{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fswiss\fcharset77\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset77\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fswiss\fcharset77\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset77\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \snext0 Normal;}{\s1\keepn\widctlpar\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 heading 1;}{\s2\keepn\widctlpar\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 heading 2;}{\s3\qj\keepn\widctlpar\tqr\tx6120\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 heading 3;}{\s4\qj\keepn\widctlpar\adjustright \b\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qj\widctlpar\adjustright \fs20\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon0 \snext15 Plain Text;}{\s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid \sbasedon0 \snext16 Code;}{\s17\qj\fi-360\li1080\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext17 Body Text 2;}{\s18\qj\fi-360\li720\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext18 Body Text Indent 2;}{\s19\qj\li720\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext19 Body Text Indent 3;}{\s20\qj\widctlpar\adjustright \b\fs20\cgrid \sbasedon0 \snext20 Body Text;}{\s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{\s22\qj\li200\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{\s23\qj\li400\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s24\qj\li600\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{\s25\qj\li800\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s26\qj\li1000\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s27\qj\li1200\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{\s28\qj\li1400\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s29\qj\li1600\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext30 header;}{\s31\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid \sbasedon0 \snext31 footer;}{\*\cs32 \additive \sbasedon10 page number;}{\s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid \sbasedon16 \snext34 CodeFormat;}{\s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid \sbasedon16 \snext35 Code (Macro);}}{\*\listtable{\list\listtemplateid984073\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listname ;}\listid2}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listname ;}\listid3}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listname ;}\listid4}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listname ;}\listid5}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-720\li720\jclisttab\tx720 }{\listname ;}\listid6}}{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}{\*\revtbl {Unknown;}}{\info{\title ]ccdef}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy31\hr10\min30}{\revtim\yr2000\mo10\dy31\hr10\min30}{\printim\yr2000\mo10\dy31\hr10\min23}{\version2}{\edmins1}{\nofpages371}{\nofwords67889}{\nofchars386968}{\*\company Byte Works, Inc.}{\nofcharsws475223}{\vern99}}\margl3060\margr3060\margt2880\margb2880 \facingp\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \linex-32767\headery2520\footery2520\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Table of Contents}{\par }}{\footerl \pard\plain \s31\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\field{\*\fldinst {\cs32 \hich\af7\dbch\af4\loch\f7  PAGE }}{\fldrslt {\cs32\lang1024 \hich\af7\dbch\af4\loch\f7 xii}}}{\par }}{\footerr \pard\plain \s31\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\field{\*\fldinst {\cs32 \hich\af7\dbch\af4\loch\f7  PAGE }}{\fldrslt {\cs32\lang1024 \hich\af7\dbch\af4\loch\f7 351}}}{\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\b\i\fs72 \hich\af4\dbch\af4\loch\f4 \hich\f4 ORCA/M\u8482\'aa\loch\f4  4.1\par }{\i\shad\fs40 \hich\af4\dbch\af4\loch\f4 Macro Assembler\par }\pard \qj\widctlpar\adjustright {\par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Copyright (c) 1984,1986\par \hich\af4\dbch\af4\loch\f4 By The Byte Works, Inc.\par \hich\af4\dbch\af4\loch\f4 All Rights Reserved\par }\pard \qj\widctlpar\adjustright {\par \par \par \par \par \par \par }\pard \qj\widctlpar\tx360\adjustright {\hich\af4\dbch\af4\loch\f4 Authors:\par }{\fs24 \tab \hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \tab \hich\af4\dbch\af4\loch\f4 Phil Montoya\par \tab \hich\af4\dbch\af4\loch\f4 Patty Westerfield\par \par }\pard \qj\widctlpar\adjustright {\sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\titlepg\sectdefaultcl {\footerf \pard\plain \s31\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\field{\*\fldinst {\cs32 \hich\af7\dbch\af4\loch\f7  PAGE }}{\fldrslt {\cs32\lang1024 \hich\af7\dbch\af4\loch\f7 xi}}}{\par }}\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\b\fs18 \hich\af4\dbch\af4\loch\f4 Limited Warranty}{\fs18 \hich\af4\dbch\af4\loch\f4  - Subject to the below stated limitations, Byte Works\hich\af4\dbch\af4\loch\f4  Inc. hereby warrants that the program contained in this unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from the date of purchase.  Except for such warranty, this product is sup\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 lied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose.  The limits of warranty extend only to the original purchaser.\par \par \hich\af4\dbch\af4\loch\f4 Neither Byte Works Inc. nor the author of this program are liable or responsible to t\hich\af4\dbch\af4\loch\f4 he purchaser and/or user for loss or damages caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par \par \hich\af4\dbch\af4\loch\f4 To ob\hich\af4\dbch\af4\loch\f4 tain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works Inc. within ten (10) days of purchase.\par \par }{\b\fs18 \hich\af4\dbch\af4\loch\f4 Important Notice}{\fs18 \hich\af4\dbch\af4\loch\f4  - This is a fully copyrighted work and as such is protected under copyright laws o\hich\af4\dbch\af4\loch\f4 f the United States of America.  According to these laws, consumers of copywriten material may make copies for their personal use only.  Duplication for any other purpose whatsoever would constitute infringement of copyright laws and the offender would be\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 fine.\par \par \hich\af4\dbch\af4\loch\f4 This product is sold for use on a single computer at a single location.  Contact the publisher for inform\hich\af4\dbch\af4\loch\f4 ation regarding licensing for use at multiple-workstation or multiple-computer installations.\par \par }{\b\fs18 \hich\af4\dbch\af4\loch\f4 Use of Libraries}{\fs18 \hich\af4\dbch\af4\loch\f4  - The enclosed subroutine libraries are fully copyrighted works.  It is the policy of Byte Works Inc to license these libraries to purchasers of\hich\af4\dbch\af4\loch\f4  ORCA/M free of charge.  Such licenses are generally restricted to including the libraries in binary files, and do not extend to use of the source code.  A copy of the program, along with any documentation, and a list of the library subroutines used is re\hich\af4\dbch\af4\loch\f4 q\hich\af4\dbch\af4\loch\f4 uired at the time of licensing, and the documentation must give credit for using libraries from ORCA/M.  For details, please contact the Byte Works Inc.\par \par \hich\af4\dbch\af4\loch\f4 ORCA/M is a trademark of the Byte Works, Inc.\par \hich\af4\dbch\af4\loch\f4 Apple is a registered trademark of Apple Computer, Inc.\par \par }\pard \qc\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Program, Documentation and Design\par }{\b\fs24 \hich\af4\dbch\af4\loch\f4 Copyright 1984,1985,1986\par \hich\af4\dbch\af4\loch\f4 The Byte Works, Inc.\par }\pard \qj\widctlpar\adjustright {\fs18 \par \page }{\b\fs18 \hich\af4\dbch\af4\loch\f4 APPLE COMPUTER, INC. MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULA\hich\af4\dbch\af4\loch\f4 R PURPOSE.  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITTED BY SOME STATES.  THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS.  THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE\hich\af4\dbch\af4\loch\f4 .\par }{\fs18 \par \hich\af4\dbch\af4\loch\f4 ProDOS is a copyrighted program of Apple Computer, Inc. liscensed to Byte Works Inc. to distribute for use only in combination with ORCA/M.  Apple Software shall not be copied onto another diskette (except for archive purposes) or into memory unless as p\hich\af4\dbch\af4\loch\f4 art of the execution of ORCA/M.  When ORCA/M has completed execution Apple Software shall not be used by any other program.\par \par \par \hich\af4\dbch\af4\loch\f4 Apple is a registered trademark of Apple Computer, Inc.\par }{\sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\titlepg\sectdefaultcl \pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qj\li2160\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Dedicated to my Father.\par \hich\af4\dbch\af4\loch\f4               -Mike Westerfield\par }\pard \qj\widctlpar\adjustright {\par \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\titlepg\sectdefaultcl \pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This program was started in June of 1980 as a summer project.  It sort of grew a little in concept over the next few weeks... months... two years.  At this point I believe it to be the most complete assembler language development system ever written for \hich\af4\dbch\af4\loch\f4 a micro computer.  I hope that your experiences with it justify that feeling.\par \par \hich\af4\dbch\af4\loch\f4 I would like to express my thanks to the many people who have helped on this project.  I would like to thank CD Osborne, Bruce Benson, Sandy Croushore, Dave Umphress and Rex Fah\hich\af4\dbch\af4\loch\f4 rquar for proofreading the original User's manual and making many suggestions for improvement.  I would also like to thank Ed Martin, Jim Barrie, Bruce Benson and Mike McCracken for their suggestions on improving the assembler.  Bruce was of special help,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 as he patiently beat the concepts of structured programming into my head, and informed me of all those things about programming that nobody bothers to tell a physicist.  I would also like to mention my closest friend, Peg Smith.  She didn't do anything (s\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 ecific) to help the assembler along, but she has always wanted to be mentioned in an introduction.\par \par \hich\af4\dbch\af4\loch\f4 My deepest thanks go to my wife, whose support made things a lot easier throughout the project.\par \par }\pard \qj\li2880\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \hich\af4\dbch\af4\loch\f4 Denver, Colorado\par \hich\af4\dbch\af4\loch\f4 November, 1982\par }\pard \qj\widctlpar\adjustright {\par \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\titlepg\sectdefaultcl \pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Welcome \hich\af4\dbch\af4\loch\f4 to the newest version of ORCA/M.  A great deal has changed since the original version of ORCA was released in February of 1983.  The Byte Works has sprung up around the product, and continues to grow and expand into other areas, and the assembler itself h\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 s matured as well.  Milestones for ORCA have included the 65816 version, which was the first assembler ever for that chip (and also defined the assembly language syntax used by all 65816 assemblers).  This version takes the product towards the UNIX operat\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng system that has become so common.\par \par \hich\af4\dbch\af4\loch\f4 The number of people who have made contributions to ORCA seems to grow almost daily.  Of all of these, one person stands out clearly.  While ORCA was published by Hayden, its product manager was David Eyes.  He was res\hich\af4\dbch\af4\loch\f4 ponsible for a great deal of the editing of the original User's Manual, and shaped the product through its first two years.  It was David who was largely responsible for the fact that ORCA was the first assembler to support the 65816.  Many of the changes\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 made in the current version are either his ideas, or resulted from long conversations between us.\par \par \hich\af4\dbch\af4\loch\f4 The Videx 80 column board driver for this version of ORCA was written by Bruce Boeke.  I would like to thank him for that contribution.\par \par \hich\af4\dbch\af4\loch\f4 I would like to welc\hich\af4\dbch\af4\loch\f4 ome Phil Montoya to ORCA.  Phil did most of the translation of the editor and operating system as it was converted from DOS to ProDOS, as well as making a number of suggestions in other areas of the program.\par \par \hich\af4\dbch\af4\loch\f4 Finally, I would like to thank all of you who h\hich\af4\dbch\af4\loch\f4 ave contributed your suggestions and pointed out errors.  I hope all of the errors have been corrected to your satisfaction, and look forward to hearing from you in the future.\par \par }\pard \qj\li2880\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \hich\af4\dbch\af4\loch\f4 Albuquerque, New Mexico\par \hich\af4\dbch\af4\loch\f4 December, 1984\par }\pard \qj\widctlpar\adjustright {\par \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Table of Contents\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Table of Contents}{\par }}\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\b\fs36 \hich\af4\dbch\af4\loch\f4 TABLE OF CONTENTS\par }{\par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\field\fldedit{\*\fldinst {\hich\af4\dbch\af4\loch\f4  TOC \\o "1-3" }}{\fldrslt {\hich\af4\dbch\af4\loch\f4 Chapter 1: Getting Started\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621743 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700340033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 1}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 How to Use the Manual\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621744 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700340034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Booting the System\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621745 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700340035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Some Basic Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621746 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700340036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 2}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 A Few Editor Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  P\hich\af4\dbch\af4\loch\f4 AGEREF _Toc497621747 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700340037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 3}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Entering a Simple Program\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621748 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700340038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 4}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 2: The Command Processor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621749 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700340039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 7}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Using Wildcards\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621750 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 7}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Required and Optional Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621751\hich\af4\dbch\af4\loch\f4  \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 8}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Types of Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621752 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 8}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The ORCA Monitor Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621753 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 9}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 3: The Editor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621754 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 11}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Introduction\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621755 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 11}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Moving Through the File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc\hich\af4\dbch\af4\loch\f4 497621756 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 11}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Entering Text\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621757 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Inserting and Deleting Text\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621758 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Moving and Copying Text\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621759 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700350039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 14}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Search and Replace\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621760 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 14}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Other Features\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAG\hich\af4\dbch\af4\loch\f4 EREF _Toc497621761 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 16}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 4: The Fundamental Assembler Directives\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621762 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 17}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Assembly Language Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621763 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 17}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Comment Lines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621764 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 KEEP\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621765 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 20}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 START and END\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621766 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 20}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Equates\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621767 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 21}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DC and DS\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621768 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 22}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Global Labels\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621769 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700360039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 25}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DATA Areas\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621770 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 26}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The APPEND Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF \hich\af4\dbch\af4\loch\f4 _Toc497621771 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 27}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 5: Advanced Commands\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621772 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 29}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Linking to Several Locations\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621773 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 29}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Partial Assemblies\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621774 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 30}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Subroutine Libraries\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621775 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 32}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 EXE\hich\af4\dbch\af4\loch\f4 C Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621776 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 33}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Device Numbers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621777 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 34}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Redirecting Input and Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621778 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 34}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 6: Advanced Assembler Directives\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621779 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700370039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 37}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 COPY\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621780 \\h\hich\af4\dbch\af4\loch\f4  }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 37}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Format Control Directives\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621781 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 37}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Positioning Code\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621782 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 39}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Controlling DC Code\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621783 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 41}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The MERR Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621784 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 41}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Using the 65C02\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49762\hich\af4\dbch\af4\loch\f4 1785 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 41}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Using the 65816 or 65802\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621786 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 42}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 7: Using Macros\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621787 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 45}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Tools of the Trade\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621788 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 45}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Macro Library\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621789 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700380039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 48}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Keyword Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAG\hich\af4\dbch\af4\loch\f4 EREF _Toc497621790 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 49}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 8: Writing Macros\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621791 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 51}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 MCOPY, MACRO and MEND\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621792 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 51}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Basic Parameter Passing\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621793 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 53}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Defining Symbolic Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621794 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 55}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Changing and Using Symbolic Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621795 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 57}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 String Manipulation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621796 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 58}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Conditional Assembly Branches\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621797 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 59}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Attributes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621798 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 60}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 9: Writing \hich\af4\dbch\af4\loch\f4 Shell Programs\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621799 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003700390039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 65}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Memory Map\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621800 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 65}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Reserving Memory\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621801 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 66}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Console Driver\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621802 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 67}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Passing the Command Line\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621803 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 67}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Inst\hich\af4\dbch\af4\loch\f4 alling a New Utility\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621804 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 68}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Installing a Compiler or Editor\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621805 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 69}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 10: Introduction\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621806 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 71}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Using The Manual\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621807 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 71}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Introduction\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49\hich\af4\dbch\af4\loch\f4 7621808 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 71}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 ORCA.SYSTEM\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621809 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800300039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 71}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 ORCA.HOST\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621810 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 71}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MONITOR\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621811 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 72}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Utilities\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621812 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 72}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 System Configuration\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621813 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 72}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 11: T\hich\af4\dbch\af4\loch\f4 he Command Processor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621814 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 75}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Types of Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621815 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 75}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Built in Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621816 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 75}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Utilities\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621817 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 75}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Language Names\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621818 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 75}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Program N\hich\af4\dbch\af4\loch\f4 ames\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621819 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800310039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 76}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Entering Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621820 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 76}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 File Names\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621821 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 77}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Types of Text Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621822 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 78}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Input and Output Redirection\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621823 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 78}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Command \hich\af4\dbch\af4\loch\f4 Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621824 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 79}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Command and Utility Reference\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621825 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 79}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 12: The Text Editor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621826 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 95}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Text Entry\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621827 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 95}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 User Buffers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621828 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 97}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The\hich\af4\dbch\af4\loch\f4  String Buffers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621829 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800320039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 97}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Character Buffer\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621830 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 97}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Information Window\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621831 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 97}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Control Key Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621832 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 98}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Cursor Movement Keys\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621833 \\h\hich\af4\dbch\af4\loch\f4  }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 98}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 String Search Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621834 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 99}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Miscellaneous Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621835 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 100}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Escape Key Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621836 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 102}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Repeat Feature\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621837 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 102}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Cursor Movement Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PA\hich\af4\dbch\af4\loch\f4 GEREF _Toc497621838 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 103}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Text Edit Window Control\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621839 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800330039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 103}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Insert and Delete\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621840 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 104}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Non-keyboard Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621841 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 104}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Buffer Commands\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621842 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 105}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 TAB Sto\hich\af4\dbch\af4\loch\f4 ps\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621843 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 106}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Insert Mode\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621844 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 106}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Editor Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621845 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 106}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Entering Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621846 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 106}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Using Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621847 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 107}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Defining Tab Stops\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAG\hich\af4\dbch\af4\loch\f4 EREF _Toc497621848 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 107}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 13: The Link Editor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621849 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800340039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 109}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Overview\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621850 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 109}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Link Edit Process\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621851 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 109}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Object Modules Created by the Assembler\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621852 \\h\hich\af4\dbch\af4\loch\f4  }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 110}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Subroutine Selection\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621853 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 110}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Link Edit Command Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621854 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 111}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Creating Library Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621855 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 112}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621856 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 113}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Pass One Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49\hich\af4\dbch\af4\loch\f4 7621857 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 113}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Pass Two Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621858 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 113}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Global Symbol Table\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621859 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800350039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 113}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 File Length and Error Count\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621860 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 113}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 14: 6502/65C02 Disassembler\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621861 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 115}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 In\hich\af4\dbch\af4\loch\f4 troduction\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621862 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 115}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Command Descriptions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621863 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 116}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Some Final Comments\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621864 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 120}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 15: Running the Assembler\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621865 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 123}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Introduction\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4976218\hich\af4\dbch\af4\loch\f4 66 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 123}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Assembler Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621867 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 124}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Assembly Process\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621868 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 126}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Pass One\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621869 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800360039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 126}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Pass Two\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621870 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 126}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Controlling the Speed\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621871 \\\hich\af4\dbch\af4\loch\f4 h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 126}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Stopping the Listing\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621872 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 127}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Terminal Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621873 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 127}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The RESET Key\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621874 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 127}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Assembly Listing\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621875 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 128}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Screen Listings\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621876\hich\af4\dbch\af4\loch\f4  \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 128}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Printer Listings\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621877 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 128}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 16: Coding Instructions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621878 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 131}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Types of Source Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621879 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800370039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 131}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Comment Lines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621880 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 131}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Blank Line\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PA\hich\af4\dbch\af4\loch\f4 GEREF _Toc497621881 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 131}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Characters *, ;, and !\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621882 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 131}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Period\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621883 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 132}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Instructions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621884 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 132}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Label\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621885 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 132}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Operation Code\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF \hich\af4\dbch\af4\loch\f4 _Toc497621886 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 132}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Operand Field\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621887 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 133}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Instruction Operand Format\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621888 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 133}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Expressions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621889 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800380039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 136}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Comment Field\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621890 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 140}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 17: Assembler\hich\af4\dbch\af4\loch\f4  Directives\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621891 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 141}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Introduction\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621892 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 141}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Descriptions of Directives\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621893 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 141}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tx2320\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 ABSADDR OFF\tab Show Absolute Addresses\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621894 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 143}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ALIGN\tab Align to a Boundary\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGE\hich\af4\dbch\af4\loch\f4 REF _Toc497621895 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 143}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1640\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 APPEND\tab Append a Source File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621896 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 143}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 COPY\tab Copy a Source File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621897 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 144}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DATA\tab  Define Data Segment\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621898 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 144}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1200\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DC\tab Declare Constant\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621899 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003800390039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 144}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DS\tab Declare Storage\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621900 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 150}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 EJECT\tab Eject the Page\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621901 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 150}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 END\tab End Program Segment\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621902 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 150}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ENTRY\tab Define Entry Point\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621903 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 151}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 EQU\tab Equate\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc\hich\af4\dbch\af4\loch\f4 497621904 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 151}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ERR ON\tab Print Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621905 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 151}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2180\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 EXPAND OFF\tab Expand DC Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621906 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 152}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1720\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 GEN OFF\tab Generate Macro Expansions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621907 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 152}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 GEQU\tab Global Equate\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621908 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 152}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1620\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 IEEE ON\tab IEEE Format Numbers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621909 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900300039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 152}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2180\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 INSTIME OFF\tab Show Instruction Times\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621910 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 153}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 KEEP\tab Keep Object Module\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621911 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 153}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1620\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LIST ON\tab List Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621912 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 153}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1940\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LONGA ON\tab \hich\af4\dbch\af4\loch\f4 Accumulator Size Selection\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621913 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 153}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1860\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LONGI ON\tab Index Register Size Selection\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621914 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 154}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MCOPY\tab Copy Macro Library\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621915 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 154}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MDROP\tab Drop a Macro Library\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621916 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 155}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 M\hich\af4\dbch\af4\loch\f4 EM\tab Reserve Memory\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621917 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 155}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MERR\tab Maximum Error Level\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621918 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 155}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MLOAD\tab Load a Macro Library\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621919 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900310039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 155}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1720\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MSB OFF\tab Set the Most Significant Bit of Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621920 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 156}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1200\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 OBJ\tab Set Assembly Address\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621921 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 156}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1620\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 OBJEND\tab Cancel OBJ\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621922 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 156}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ORG\tab Origin\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621923 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 157}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2220\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PRINTER OFF\tab Send Output to Printer\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621924 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 158}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1700\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 RENAME\tab Rename Op Codes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGER\hich\af4\dbch\af4\loch\f4 EF _Toc497621925 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 158}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1660\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SETCOM\tab Set Comment Column\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621926 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 159}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 START\tab Start Subroutine\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621927 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 159}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2080\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SYMBOL ON\tab Print Symbol Tables\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621928 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 159}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TITLE\tab Print Header\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621929 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900320039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 160}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1980\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TRACE OFF\tab Trace Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621930 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 160}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 USING\tab Using Data Area\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621931 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 160}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1860\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 65C02 OFF\tab Enable 65C02 Code\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621932 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 161}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1820\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 65816 OFF\tab Enable 65816 Code\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621933 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 161}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 18: Ma\hich\af4\dbch\af4\loch\f4 cro Language and Conditional Assembly Language\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621934 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 163}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Introduction to Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621935 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 163}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Macro File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621936 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 163}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Writing Macro Definitions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621937 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 163}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Symbolic \hich\af4\dbch\af4\loch\f4 Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621938 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 165}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Positional Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621939 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900330039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 165}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Keyword Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621940 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 168}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Subscripting Parameters in Macro Call Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621941 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 169}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Explicitly Defined \hich\af4\dbch\af4\loch\f4 Symbolic Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621942 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 170}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Symbolic Parameter Definition Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621943 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 171}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Sequence Symbols\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621944 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 172}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Attributes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621945 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 172}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Conditional Assembly and Macro \hich\af4\dbch\af4\loch\f4 Directives\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621946 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 174}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 ACTR\tab Assembly Counter\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621947 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1\hich\af4\dbch\af4\loch\f4 74}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 AGO\tab Unconditional Branch\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621948 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 175}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1200\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 AIF\tab Conditional Branch\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621949 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900340039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 176}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 AINPUT\tab Assembler Input\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49\hich\af4\dbch\af4\loch\f4 7621950 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 177}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 AMID\tab Assembler Mid String\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621951 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 178}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 ANOP\tab Assembler No Operation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621952 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 179}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1820\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ASEARCH\tab Assembler String Search\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621953 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 179}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 GBLA\tab    Declare Global Arithmetic Symbolic Paramet\hich\af4\dbch\af4\loch\f4 er\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621954 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 180}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 GBLB\tab       Declare Global Boolean Symbolic Parameter\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621955 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 180}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 GBLC\tab     Declare Global Character Symbolic Parameter\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621956 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 181}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 LCLA\tab Declare Local Arithmetic Symbolic Parame\hich\af4\dbch\af4\loch\f4 ter\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621957 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 181}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LCLB  \tab        Declare Local Boolean Symbolic Parameter\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621958 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 182}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LCLC\tab Declare Local Character Symbolic Parameter\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621959 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900350039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 182}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MACRO\tab Start Macro Definition\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4976\hich\af4\dbch\af4\loch\f4 21960 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 183}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MEND\tab End Macro Definition\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621961 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 183}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MEXIT\tab Exit Macro\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621962 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 183}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MNOTE\tab Macro Note\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621963 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 183}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SETA\tab Set Arithmetic\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621964 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 184}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SETB\tab Set Boolean\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGER\hich\af4\dbch\af4\loch\f4 EF _Toc497621965 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 184}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SETC\tab Set Character\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621966 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 185}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 19: Macro Libraries\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621967 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 187}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Addressing Modes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621968 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 187}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Data Types\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621969 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900360039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 189}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Two Byte Integers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621970 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 189}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Four Byte Integers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621971 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 190}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Eight Byte Integers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621972 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 190}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Character\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621973 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 190}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Strings\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621974 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 190}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Boolean Variables\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _\hich\af4\dbch\af4\loch\f4 Toc497621975 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 191}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Memory Usage\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621976 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 191}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 20: Mathematics Macros\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621977 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 193}}}{\par }\pard\plain \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 ABSx\tab Integer Absolute Value\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621978 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 194}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 ADDx\tab Integer Addition\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621979 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900370039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 195}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 CMP\hich\af4\dbch\af4\loch\f4 x\tab Integer Compare\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621980 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 197}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DIVx\tab Integer Division\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621981 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 199}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MODx\tab Integer Modulo Function\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621982 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 200}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MULx\tab Integer Multiplication\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621983 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 201}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 RANx\tab Integer Random Num\hich\af4\dbch\af4\loch\f4 ber Generator\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621984 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 202}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SIGNx\tab Integer Sign Function\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621985 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 203}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SQRTx\tab Integer Square Root\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621986 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 204}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SUBx\tab Integer Subtraction\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621987 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 205}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 21: Input and Outpu\hich\af4\dbch\af4\loch\f4 t Macros\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621988 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 207}}}{\par }\pard\plain \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 ALTCH\tab Select Alternate Character Set\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621989 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900380039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 208}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 BELL\tab Beep the Bell\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621990 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 209}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 CLEOL\tab Clear to End of Line\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621991 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 210}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 CLEOS\tab Clear to End of Screen\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621992 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 211}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 COUT\tab Character Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621993 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 212}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 GETx\tab Variable Input\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621994 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 213}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1960\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 GET_LANG\tab Get Current Language\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621995 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 215}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2000\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 GET_LINFO\tab Get Language Information\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _T\hich\af4\dbch\af4\loch\f4 oc497621996 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 216}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1700\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 GOTOXY\tab Position Cursor On Screen\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621997 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 219}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 HOME\tab Form Feed\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621998 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 220}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1920\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 KEYPRESS\tab Read Keypress\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497621999 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320031003900390039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 221}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1880\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 NAMEADR\tab Fetch Address of Command Table\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49762200\hich\af4\dbch\af4\loch\f4 0 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 222}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1760\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 NORMCH\tab Select Normal Character Set\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622001 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 223}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PRBL\tab Print Blanks\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622002 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 224}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 PUTx\tab Variable Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622003 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 225}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PUTCR\tab Carriage Return\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622004 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 227}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 RDKEY\tab Read K\hich\af4\dbch\af4\loch\f4 eyboard\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622005 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 228}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1740\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 READXY \tab Read Cursor Position\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622006 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 229}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1920\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SET_LANG\tab Set Language\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622007 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 230}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1960\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SET_LINFO\tab Set Language Information\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622008 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 231}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SIZE\tab Find Screen Size\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PA\hich\af4\dbch\af4\loch\f4 GEREF _Toc497622009 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000300039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 232}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 22: ProDOS Macros\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622010 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 233}}}{\par }\pard\plain \s23\qj\li400\widctlpar\tx1900\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 FINDBUFF\tab Find an Unused Memory Buffer\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622011 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 235}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1740\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 RELEASE\tab Release a Memory Buffer\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622012 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 236}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1760\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 RESERVE\tab Reserve a Memory Buf\hich\af4\dbch\af4\loch\f4 fer\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622013 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 237}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 23: Graphics Macros\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622014 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 239}}}{\par }\pard\plain \s23\qj\li400\widctlpar\tx1200\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 BB\tab Bit Block Definition\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622015 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 240}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 COLOR\tab Set Pen Color\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622016 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 241}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2000\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 COLORMAP\tab Color Map Enable/Disable\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF \hich\af4\dbch\af4\loch\f4 _Toc497622017 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 243}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2220\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DRAWBLOCK\tab Draw a Block\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622018 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 244}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1720\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DRAWTO\tab Draw a Line\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622019 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000310039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 245}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2140\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 FILLSCREEN\tab Fill Screen With a Color\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622020 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 246}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1980\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 FILLSHAPE\tab Fill a Shape\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622021 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 247}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1620\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 FINDXY\tab Find the Pen Position\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622022 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 248}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 GROUT\tab Graphics Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622023 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 249}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2020\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 INITGRAPH\tab Set Up a Screen\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622024 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 251}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1680\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MOVETO\tab Move the Pen\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622025 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 252}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PLOT\tab Plot a Point\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622026 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 253}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1680\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 READXY\tab Read a Point\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622027 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 254}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx2040\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SET_COLOR\tab Define Color Map\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622028 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 255}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1800\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TEXTOUT\tab Reset Standard Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622029 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000320039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 256}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 VIEW\tab Show a Screen\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622030 \\\hich\af4\dbch\af4\loch\f4 h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 257}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1920\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 VIEWPORT\tab Set Graphics View Port\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622031 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 259}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1760\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 WRITETO\tab Write to a Screen\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622032 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 26\hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 24: Miscellaneous Macros\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622033 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 263}}}{\par }\pard\plain \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 ASL2\tab Two Byte Arithmetic Shift Left\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497\hich\af4\dbch\af4\loch\f4 622034 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 264}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 BBRx\tab Branch on Bit Reset\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622035 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 265}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 BBSx\tab Branch on Bit Set\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622036 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 266}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 BGT\tab Branch on Greater Than\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622037 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 267}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1200\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 BLE\tab Branch on Less Than or Equal\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622038 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 268}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1680\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 BUTTON\tab Read a Game Paddle Button\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622039 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000330039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 269}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 CNVxy\tab Convert x to y\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622040 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 270}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 CMPW\tab Compare Word\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622041 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 272}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DBcn\tab Decrement and Branch\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622042 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 273}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DBcn2\tab Two Byte De\hich\af4\dbch\af4\loch\f4 crement and Branch\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622043 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 274}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DEC2\tab Two Byte Decrement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622044 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 275}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 DSTR\tab Define String\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622045 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 276}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1200\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DW \tab Define Word\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622046 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 278}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ERROR\tab Flag an Error\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49762204\hich\af4\dbch\af4\loch\f4 7 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 279}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 FLASH\tab Flashing Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622048 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 280}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 INC2\tab Two Byte Increment\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622049 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000340039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 281}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1980\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 INITSTACK\tab Initialize an Evaluation Stack\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622050 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 282}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1720\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 INVERSE\tab Inverse Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622051 \\\hich\af4\dbch\af4\loch\f4 h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 283}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1200\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 Jcn \tab Conditional Jumps\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622052 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 284}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 LA\tab Load Address\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622053 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 285}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 LM\tab Load Memory\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622054 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 286}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LSR2\tab Two Byte Logical Shift Right\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622055 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 287}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MASL \tab Multiple Arithme\hich\af4\dbch\af4\loch\f4 tic Shift Left\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622056 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 288}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MLSR\tab Multiple Logical Shift Right\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622057 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 289}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MOVE\tab Move Memory\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622058 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 290}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MOVEx\tab Long Memory Moves\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622059 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000350039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 291}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1720\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 NORMAL\tab Normal Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAG\hich\af4\dbch\af4\loch\f4 EREF _Toc497622060 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 292}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 NOTE\tab Play a Note\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622061 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 293}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1600\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PAGEx\tab Set Display Page\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622062 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 295}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 PREAD\tab Read a Game Paddle\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622063 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 296}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 RAM\tab Set the RAM Card Switches\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622064 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 297}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1760\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 RESTORE\tab Restore Registers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622065 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 298}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1400\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 RMBx\tab Reset Memory Bit\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622066 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 299}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SAVE\tab Save Registers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622067 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 300}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SEED\tab Random Number Seed\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622068 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 301}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SMBx\tab Set Memory Bit\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PA\hich\af4\dbch\af4\loch\f4 GEREF _Toc497622069 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000360039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 303}}}{\lang1024 \par }\pard \s23\qj\li400\widctlpar\tx1960\tqr\tx6110\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SOFTCALL \tab Soft Reference Call\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622070 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 304}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Appendix A: Error Messages\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622071 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 305}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Error Levels\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622072 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 305}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Recoverable Assembler Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622073 \\\hich\af4\dbch\af4\loch\f4 h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 305}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Terminal Assembler Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622074 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 314}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Recoverable Linker Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622075 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 316}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Terminal Linker Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622076 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 318}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Appendix B: File Formats\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622077 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 321}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Overview\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 PAGEREF _Toc497622078 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 321}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Text Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622079 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000370039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 321}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Object Modules\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622080 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 321}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Binary Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622081 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 330}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Appendix C: Differences Between ORCA/M 3.5 and ORCA/M 4.0\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622082 \\\hich\af4\dbch\af4\loch\f4 h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 331}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Generalities\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622083 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 331}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Changes to Support ProDOS\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622084 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 331}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Changes to Support the 65816\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622085 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 332}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The 65816 Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622086 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 332}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Address Mode Specificat\hich\af4\dbch\af4\loch\f4 ion\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622087 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 332}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Operand Size Specification\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622088 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 333}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Word Size Directives\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622089 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000380039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 334}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Byte Selection Functions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622090 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 336}}}{\lang1024 \par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Additional Changes to the Assembler\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGER\hich\af4\dbch\af4\loch\f4 EF _Toc497622091 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 337}}}{\lang1024 \par }\pard\plain \s23\qj\li400\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Case Insensitivity\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622092 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 337}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Label Formats\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622093 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 337}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Quoted String Syntax\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622094 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 337}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Assembler Statistics\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622095 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 338}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Eight Byte Integer\hich\af4\dbch\af4\loch\f4 s\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622096 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 338}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 S Attribute\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622097 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 338}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Spelling Changes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622098 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 338}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 IEEE Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622099 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003000390039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 339}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MSB Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622100 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003100300030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 339}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 RENAME Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF\hich\af4\dbch\af4\loch\f4  _Toc497622101 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003100300031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 339}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SETCOM Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622102 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003100300032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 340}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 TRACE Directive\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622103 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003100300033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 340}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Appendix D: Differences Between ORCA/M 4.0 and ORCA/M 4.1\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622104 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003100300034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 341}}}{\par }\pard\plain \s22\qj\li200\widctlpar\tqr\tx6110\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Command Processor and Utilities\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 PAGEREF _Toc497622105 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003100300035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 341}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Assembler\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc497622106 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003600320032003100300036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 342}}}{\lang1024 \par }\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid }}\pard\plain \s21\qj\sb200\sa200\keepn\widctlpar\tqr\tx6110\adjustright \fs20\lang1024\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Index\tab 343\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\lang1024 \par }{\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {\sect }\sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 User's Manual\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 1: Getting Started}{\par }}{\footerf \pard\plain \s31\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\field{\*\fldinst {\cs32 \hich\af7\dbch\af4\loch\f7  PAGE }}{\fldrslt {\cs32\lang1024 \hich\af7\dbch\af4\loch\f7 343}}}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621743}\hich\af4\dbch\af4\loch\f4 Chapter 1: Getting Started{\*\bkmkend _Toc497621743}\par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621744}\hich\af4\dbch\af4\loch\f4 How to Use the Manual{\*\bkmkend _Toc497621744} \par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This manual is laid out into four major sections.  This section, called the User's Manual, is an introduction to the system.  The next two sections, called the ORCA HOST Reference Manual and the ORCA 4.1 Assembler Reference Manual, are designed for easy reference and to give a complete, precise explanation of all of the features of the program.  The last section is the Macro Library Reference Manual.  It lists all of the macros included with ORCA, and describes the required inputs and action performed.  \par \par Please note that this manual does not teach you assembly language, it only teaches you how to use ORCA to enter your assembly language files and turn then into executable programs.  If you are a complete beginner, you will also need a good beginner's book on assembly language.  Several are available, so visit your local computer or book store and pick one up.  \par \par If you are new to ORCA, we suggest that you start here, at the beginning, and carefully read the User's Manual.  Work all of the examples, and be sure that you understand the material in each chapter before moving on. ORCA is a big system, and like all sophisticated tools, it will take some time to master. It is also the most powerful assembly language development system ever put on a micro-computer, so your time will be very well spent.  If the manual seems a bit large, it is because the program can do so much for you.  \par \par If you are just learning assembly language, don't try to understand ORCA all at once.  Learning assembly language takes time, and you shouldn't try to master the entire tool at the same time as you learn the basics of assembly language programming.  The first four chapters of the User's Manual contain enough information to let you write all of the programs you are likely to find in a beginner's book on assembly language.  Save the rest for later, when the concepts have sunk in.  After writing a few short programs of your own, the advanced features of ORCA will make a lot more sense.  \par \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621745}\hich\af4\dbch\af4\loch\f4 Booting the System{\*\bkmkend _Toc497621745} \par }\pard\plain \qj\keepn\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\nowidctlpar\adjustright {At the front of the notebook is a separate section that includes details on setting up your system, information on recent changes, and special notes about the system as a whole.  The separate booklet allows us to make changes and additions to the way in which the system is initialized and what drivers are available without updating the entire manual.  The section is called Read Me First, and you should do just that.  \par \par Having initialized the system, you are now ready to start using it.  The rest of this chapter will give a very brief overview of the way commands are entered, how the editor is used, and how to assemble and execute a program.  By the end of this chapter, you will have entered and executed a working assembly language program.  \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621746}\hich\af4\dbch\af4\loch\f4 Some Basic Commands{\*\bkmkend _Toc497621746} \par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If you don't have ORCA booted, do that now.  When you are finished, you should see a copyright message, and a # character followed by a cursor. This tells you that you are in the command processor.  It works a lot like Applesoft BASIC, and we will use that fact to help you get started quicker.  \par \par First, type }{CATALOG}{ (followed by a RETURN - we won't usually mention that, but you should always use the RETURN key after entering a command).  What you get is very similar to the same command from ProDOS BASIC.  Just like with ProDOS, you can enter the name of a directory, and you will get a catalog of the specified directory.  If you type }{CAT}{, you will get a somewhat strange message, telling you that the file is not available. More on that later - for now, just realize that the abbreviated }{CAT}{ command does not exist on ORCA.  \par \par This brings up two questions:  do you always have to type }{CATALOG}{ (that's a lot of letters), and exactly what commands are available?  \par \par The answer to the first question is an emphatic no.  Type }{C}{, then follow it with a right arrow key.  The command processor expands the command out to the full }{CATALOG}{ automatically.  What it does is to look into the command table and fill in the missing characters from the first command name that matches all of the characters that you typed.  If you really wanted }{COPY}{ instead, you can get it by typing }{CO}{ and a right arrow, or by typing }{C}{, a right arrow, and a few down arrows.  In fact, using the up and down arrow keys, you can step all the way through the commands that are available.  That's one answer to the second question:  you can find out what commands are available by using the up and down arrow keys after expanding any valid command.  \par \par There is an ORCA command that makes all of this much easier.  Type }{HELP}{. What you get is a complete listing of the command table.  If you have a two drive system, place the /UTILITY disk in the second drive and type \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab HELP CATALOG\par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Each of the commands in the command table has a help file which gives a brief description of what it is for and what parameters it needs.  This is really only useful if you have enough disk space to keep the help files around (they are contained in the prefix /UTILITY/HELP).  \par \par Well, that's all we will do with the command processor right now.  If you are adventurous, you might like to take a break and explore some of these commands.  We'll get back to the command processor in the next chapter, but for now, let's move on and edit a simple file.  \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621747}\hich\af4\dbch\af4\loch\f4 A Few Editor Commands{\*\bkmkend _Toc497621747} \par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In this section, we will take a look at a small handful of the most basic editor commands.  The goal is to learn just enough to be able to type in a simple program.  \par \par First, let's realize that the ORCA editor is very different from the line editor used to enter BASIC programs.  Like good word processors, the ORCA editor is a full screen editor.  It is very fast, can edit about 20K, and includes search and replace, block copy and move capabilities.  It also supports keyboard macros if you have an Apple //e or Apple //c.  \par \par To get into the editor, type the command }{NEW}{.  This loads the editor with an empty file.  Another command, }{EDIT}{, lets you edit a file that already exists, but so far you haven't typed anything in.  What you see on the screen is the first twenty-two lines of the file being edited; since it is a new file, they are all blank.  Whatever you type will be entered into the edit buffer.  Keep in mind that you do not need to hit RETURN, or anything like that, to enter a line.  As soon as a character appears on the screen, it becomes a part of the file you are editing.  (Nothing gets written to disk, though, until you tell the editor to save it.) \par \par To enter a simple file, you really only need to know nine commands.  Four are pretty obvious, if you have ever used a full screen editor.  The four arrow keys let you move up, down, left and right.  Even though the RETURN key does not need to be used to enter a line, it is still a handy key - it moves the cursor to the first column of the next line down, getting you ready to type a new line.  Finally, the TAB key will be used a great deal.  The tab stops appear at the bottom of the screen as a series of ^ characters.  (The TAB key is the same as a CTRL-I, which can be used on older Apples that do not have a TAB key.) \par \par Another important skill is inserting and deleting lines of text.  To delete a line, move the cursor so that it is on the line you want to get rid of.  Now type the ESC key, a Y, and the ESC key again.  The line that the cursor was on has vanished, and all of the lines in the file have moved up one to fill in the space.  Now try ESC B ESC.  This inserts a blank line, moving all of the lines from the cursor on one line down to make room for the new line.  \par \par The last command that we will examine right now is CTRL-Q, which leaves the editor.  You get five options here - type an N, and then a legal ProDOS file name for now.  The file will be saved under the name you supply.  After that, type E to leave the editor.  That's enough to let you enter the program in the next section.  Chapter 3 covers the editor in more detail.  \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621748}\hich\af4\dbch\af4\loch\f4 Entering a Simple Program{\*\bkmkend _Toc497621748} \par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Listing One shows a short, simple program which writes a line to the screen.  Before typing it in, lets take a look at the source code for the program.  The first line is an assembler directive.  Assembler directives tell the assembler to do something, and usually do not generate code in the finished program.  The first directive, KEEP, tells the assembler to keep the finished program, saving it to the file named TEST.  It is very important that no other file called TEST be on the default prefix when this program is assembled; if there is one, it will be deleted. Specifically, don't save the source file using the name TEST.  \par \par The next line is also an assembler directive.  The START directive marks the start of a program segment called MAIN.  It happens that this is the only segment in our short example program.  (A segment allows your program to be broken up into subroutines with local labels, the way you might be used to in high level languages like Fortran or C.)  The assembly language instructions that follow are all in standard format, and look like they would in any 6502 assembler.  Near the end of the program, three more directives appear, two DC directives and an ANOP directive.  The DC directives will be discussed in Chapter 4; these two define the characters for a message that the program will write to the screen and a RETURN character to go at the end of the message.  The ANOP directive doesn't do anything, it just gives us a place to put the MSG2 label.  Finally, the program winds up with an END directive.  \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab KEEP\tab TEST\par \tab MAIN\tab START \par \par \tab \tab LDX\tab #MSG2-MSG1\par \tab \tab LDY\tab #0\par \tab LB1\tab LDA\tab MSG1,Y\par \tab \tab JSR\tab COUT\par \tab \tab INY\par \tab \tab DEX\par \tab \tab BNE\tab LB1\par \tab \tab RTS \par \par \tab COUT\tab JMP\tab ($36) \par \par \tab MSG1\tab DC\tab C'Hello, world.'\par \tab \tab DC\tab H'0D'\par \tab MSG2\tab ANOP\par \tab \tab END  \par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qc\nowidctlpar\adjustright {Listing 1\par }\pard \qj\nowidctlpar\adjustright {\par Type in the program, just like you see it in the listing.  After you have finished, leave the editor, saving the file as MYPROG.  Next, type \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab RUN MYPROG \par }\pard\plain \qj\nowidctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In the next few moments, the system will load in the assembler and assemble your program.  If you entered it correctly, there will be no errors.  (If there were errors, get into the editor with an }{EDIT MYPROG}{ command and correct them, then repeat the }{\u205\'ea}{ command.) After successfully assembling the program, the link editor is loaded.  It takes the output from the assembler and creates an executable program.  Finally, the system executes your program, typing the message to the screen.  \par \par You have just finished entering and executing a small program from ORCA. The next three chapters will expand on what happened, and teach you a lot more about how to use the system.  Having read those chapters, you will be able to do as much with ORCA as you can with most small assemblers, but you will have just scratched the surface of what ORCA can do for you.  The following four chapters examine some of the powerful features that make assembly language programming on ORCA unlike anything you will ever be able to do on any other microprocessor based assembler.\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 2: The Command Processor}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621749}\hich\af4\dbch\af4\loch\f4 Chapter 2: The Command Processor{\*\bkmkend _Toc497621749}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621750}\hich\af4\dbch\af4\loch\f4 Using Wildcards{\*\bkmkend _Toc497621750}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In the first chapter, we looked at the command processor and explored the use of the arrow keys to expand partial\hich\af4\dbch\af4\loch\f4  command names and step through the commands in the command table.  In this section, we will expand on our knowledge of the command processor. \par \par \hich\af4\dbch\af4\loch\f4 One of the built in features that works with almost every command in ORCA is wildcards in file names.  Wildcard\hich\af4\dbch\af4\loch\f4 s let you select several files from a directory by specifying some of the letters in the file name, and a wildcard which will match the other characters.  Two kinds of wildcards are recognized, the = character and the ? character.  Using the ? wildcard ch\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 racter causes the system to confirm each file name before taking action, while the = wildcard character simply takes action on all matching file names. \par \par \hich\af4\dbch\af4\loch\f4 To get a firm grasp on wildcards, we will use the ENABLE and DISABLE commands.  These commands turn th\hich\af4\dbch\af4\loch\f4 e file privilege flags on and off. This is similar to locking and unlocking files from BASIC, but you have more control over the process.  First, disable delete privileges for all files on the /ORCA directory.  To do this, type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab DISABLE D =\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Cataloging /O\hich\af4\dbch\af4\loch\f4 RCA should show that the D is missing from each of the directory entries.  This means that you can no longer delete the files. Now, enable the delete privilege for the monitor file.  Since the MONITOR file is the only one that starts with the characters M\hich\af4\dbch\af4\loch\f4 O\hich\af4\dbch\af4\loch\f4 N, we can do this by typing\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab ENABLE D MON=\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The wildcard matches all of the characters after MON. \par \par \hich\af4\dbch\af4\loch\f4 What if you want to specify the last few characters instead of the first few?  The wildcard works equally well that way, too.  To disable delete privileges\hich\af4\dbch\af4\loch\f4  for the monitor, we can specify the file as =TOR.  It is even possible to use more than one wildcard.  You can use =.= to specify all files that contain a period somewhere in the file name.  Or, you could try M=.=S to get all files that start with an M, \hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 nd in an S, and contain a period in between.  As you can see, wildcards can be quite flexible and useful. \par \par \hich\af4\dbch\af4\loch\f4 To return the /ORCA disk to its original state, use the command\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par \tab ENABLE D ?\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This time, something new happens.  The system stops and prints each fi\hich\af4\dbch\af4\loch\f4 le name on the screen, followed by a cursor.  It is waiting for a Y, N or Q. Y will enable the D flag, N will skip this file, and Q will stop, not searching the rest of the files.  Give it a try! \par \par \hich\af4\dbch\af4\loch\f4 Four minor points about wildcards should be pointed out be\hich\af4\dbch\af4\loch\f4 fore we move on.  First, not all commands support wildcards every place that a file name is accepted.  The ASSEMBLE, LINK and RUN commands don't allow them at all, and RENAME and COPY allow them only in the first file name. Secondly, wildcards are only al\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 owed in the file name portion, and not in the subdirectory part of a full or partial path name.  For example, /=/STUFF is not a legal use of a wildcard.  The next point is that not all commands respect the prompting of the ? wildcard.  CATALOG does not, a\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 d new commands added to the system by separate products may not.  (Later, we will look at how commands can be added to the system.) Finally, some commands allow wildcards, but will only work on one file.  EDIT is a good example.  You can use wildcards to \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 pecify the file to edit, but only the first file that matches the wildcard file name is used. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621751}\hich\af4\dbch\af4\loch\f4 Required and Optional Parameters{\*\bkmkend _Toc497621751}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There are two kinds of parameters used in commands, required and optional.  If you leave out an optional parameter, the system\hich\af4\dbch\af4\loch\f4  takes some default action.  For example, if you use the CATALOG command without specifying a path name, the default prefix is cataloged.  An example of a required parameter is the file name in the EDIT command:  the system really needs to have a file nam\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 , since there is no system default.  For all required parameters, if you leave it out, the system will prompt for it.  This lets you explore commands, or use commands about which your memory is vague, without needing to look them up. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621752}\hich\af4\dbch\af4\loch\f4 Types of Commands{\*\bkmkend _Toc497621752}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A\hich\af4\dbch\af4\loch\f4 lthough they are all used the same way, there are really three distinct kinds of commands supported by ORCA.  The first kind is the built-in command; that is the kind you are probably most familiar with.  The code needed for a built-in command is containe\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  right in the MONITOR, so it is always available.  This is the type of command supported by DOS and ProDOS. \par \par \hich\af4\dbch\af4\loch\f4 A second kind of command is the language.  ORCA is set up to support multiple languages.  This entire topic will be covered later, when we look at\hich\af4\dbch\af4\loch\f4  EXEC files in Chapter 5. \par \par \hich\af4\dbch\af4\loch\f4 The last kind of command is the utility.  Utility commands are commands that use a separate program to do their function.  PEEK is an example. When you use a utility command, ORCA must find and load a completely separate program\hich\af4\dbch\af4\loch\f4 , them reload the monitor when the command has finished. If the /UTILITY disk is in a disk drive while this is happening, ORCA will do all of this without bothering you, but if it is not, you will get a message telling you to put the /UTILITY disk into a \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 rive.  The reason that utility commands are used at all is to be able to add more commands to the system than can be fit into memory at one time.  In addition, you will be able to add your own commands to the system.  This is discussed more fully in Chapt\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 r 9. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621753}\hich\af4\dbch\af4\loch\f4 The ORCA Monitor Commands{\*\bkmkend _Toc497621753}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The table on the next page lists the commands that are available in ORCA.  Beside each is a brief description of what it is for.  Many of the names may be familiar to those who have used DOS or ProDOS extensively, and will\hich\af4\dbch\af4\loch\f4  work very much like what you are used to.  Rather than go through them one by one, we will let you scan the list and pick out the ones that look useful to you.  You can use the built in help facility to find out more, or you can flip back to the referenc\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  manual for a complete description. \par \par }\pard \qj\keepn\widctlpar\tx720\tx2160\adjustright {\tab \hich\af4\dbch\af4\loch\f4 ASML\tab Assemble and link.\par \tab \hich\af4\dbch\af4\loch\f4 ASMLG\tab Assemble, link and go.\par \tab \hich\af4\dbch\af4\loch\f4 ASSEMBLE\tab Assemble.\par \tab \hich\af4\dbch\af4\loch\f4 CATALOG\tab Catalog a subdirectory.\par \tab \hich\af4\dbch\af4\loch\f4 CHANGE\tab Change language of source file.\par \tab \hich\af4\dbch\af4\loch\f4 CMPL\tab Compile and link.\par \tab \hich\af4\dbch\af4\loch\f4 CMPLG\tab Compile, link and go.\par \tab \hich\af4\dbch\af4\loch\f4 COMMANDS\tab Modify \hich\af4\dbch\af4\loch\f4 command table.\par \tab \hich\af4\dbch\af4\loch\f4 COMPILE\tab Compile.\par \tab \hich\af4\dbch\af4\loch\f4 COMPRESS\tab Compress and/or alphabetize directories.\par \tab \hich\af4\dbch\af4\loch\f4 COPY\tab Copy files.\par \tab \hich\af4\dbch\af4\loch\f4 CREATE\tab Create new subdirectories.\par \tab \hich\af4\dbch\af4\loch\f4 CRUNCH\tab Compress and/or alphabetize directories.\par \tab \hich\af4\dbch\af4\loch\f4 DCOPY\tab Copy complete disks.\par \tab \hich\af4\dbch\af4\loch\f4 DELETE\tab Delete a file.\par \tab \hich\af4\dbch\af4\loch\f4 DISABLE\tab Disable fi\hich\af4\dbch\af4\loch\f4 le attributes.\par \tab \hich\af4\dbch\af4\loch\f4 DISASM\tab Disassembler.\par \tab \hich\af4\dbch\af4\loch\f4 EDIT\tab Edit a source file.\par \tab \hich\af4\dbch\af4\loch\f4 ENABLE\tab Enable file attributes.\par \tab \hich\af4\dbch\af4\loch\f4 HELP\tab List the commands in the command table.\par \tab \hich\af4\dbch\af4\loch\f4 INIT\tab Initialize the disk.\par \tab \hich\af4\dbch\af4\loch\f4 LINK\tab Link an object module.\par \tab \hich\af4\dbch\af4\loch\f4 PEEK\tab Disk zap utility.\par \tab \hich\af4\dbch\af4\loch\f4 PREFIX\tab Change the default prefix.\par \tab \hich\af4\dbch\af4\loch\f4 QUIT\tab Return to ProDOS.\par \tab \hich\af4\dbch\af4\loch\f4 RENAME\tab Change a file name.\par \tab \hich\af4\dbch\af4\loch\f4 SCAN\tab List routines in an object module.\par \tab \hich\af4\dbch\af4\loch\f4 SET\tab Set system attributes.\par \tab \hich\af4\dbch\af4\loch\f4 SHOW\tab Show system attributes.\par \tab \hich\af4\dbch\af4\loch\f4 SWITCH\tab Change the order of a file in a directory.\par \tab \hich\af4\dbch\af4\loch\f4 TYPE\tab Type a source file.\par \tab \hich\af4\dbch\af4\loch\f4 XREF\tab Generate a cross-refer\hich\af4\dbch\af4\loch\f4 ence. \par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 3: Th\hich\af7\dbch\af4\loch\f7 e Editor}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621754}\hich\af4\dbch\af4\loch\f4 Chapter 3: The Editor{\*\bkmkend _Toc497621754}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621755}\hich\af4\dbch\af4\loch\f4 Introduction{\*\bkmkend _Toc497621755} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 What follows is a guided tour through the most useful text edit commands.  Not all commands are covered here, and not all capabilities of the commands listed are dealt with.  Enough information is given to le\hich\af4\dbch\af4\loch\f4 arn how to enter normal assembly language programs. \par \par \hich\af4\dbch\af4\loch\f4 We will need a file to practice on, so start by placing the /MACROS disk on line.  Now enter the text editor by typing\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab EDIT /MACROS/M6502.MSC. \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621756}\hich\af4\dbch\af4\loch\f4 Moving Through the File{\*\bkmkend _Toc497621756} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The display will clear and th\hich\af4\dbch\af4\loch\f4 e first twenty-two lines of the file will appear on the screen.  We have already seen that the cursor keys can be used to move through a file.  Another way is to enter the ESC mode.  The editor runs in two modes: edit and escape.  The escape mode is simpl\hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4  a way of making more commands available than there are keys on the keyboard.  It works very much like the I-J-K-M escape key commands in the Autostart ROM.  \par \par \hich\af4\dbch\af4\loch\f4 Press the ESC key.  At the bottom of the screen, the message \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab ESC\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 appears to indicate that th\hich\af4\dbch\af4\loch\f4 e escape mode has been entered. This message stays there for as long as the escape mode is active, and vanishes upon return to the edit mode.  Leave the escape mode now by keying ESC again.  Any key that is not an escape mode command key (for example, ESC\hich\af4\dbch\af4\loch\f4 )\hich\af4\dbch\af4\loch\f4  causes the escape mode to be exited.  \par \par \hich\af4\dbch\af4\loch\f4 Re-enter the escape mode (by using ESC again) and type }{X}{\hich\af4\dbch\af4\loch\f4 .  A RETURN is not needed.  The screen will change to show the next twenty-two lines of text.  Now type a }{W}{\hich\af4\dbch\af4\loch\f4 .  This moves the display back to the first twenty-t\hich\af4\dbch\af4\loch\f4 wo lines of text.  Notice where the keys are on the keyboard.  Think of the screen as a window which is laid on a giant scroll; it makes sense to use a top row key like W to move toward the beginning of the file and X to move toward the end.  Try these co\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 mands a few times to get a feel for them.  \par \par \hich\af4\dbch\af4\loch\f4 Just to the right of the W and X keys are the E and C keys.  These move the text window one line, instead of one page.  Try them.  \par \par \hich\af4\dbch\af4\loch\f4 At this point, the screen can be moved up and down in the file.  Cursor moveme\hich\af4\dbch\af4\loch\f4 nt is next.  Just as with the autostart ROM, the I, J, K and M keys move the cursor.  Note that these keys are placed on the keyboard in a diamond, their positions indicating the direction each key moves the cursor in.  Try them out.  Also try and move th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  cursor off of the screen in each direction, and see what happens.  When using the keys, notice that J will not move the cursor to the left of the first column.  K is similarly limited by the end-of-line marker in the TAB line, which is set to column fift\hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4 -nine.  I cannot move the cursor beyond the top of the first line in the file. However, M will continue to move past the end of the file, adding blank lines to the end of the file. \par \par \hich\af4\dbch\af4\loch\f4 Having moved to the end of the file using the M key, it would be nice to \hich\af4\dbch\af4\loch\f4 have a quick way to get back to the start of the file.  One way to do this is to use the repeat feature.  While in the ESC mode, press the 9 key.  Nothing happens.  Now press W.  Instead of moving up one page, the screen scrolls up nine pages.  Numbers up\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 to 255 may be entered in this manner.  This feature will work with any ESC command; in fact, the grouping of functions as either escape commands or control key commands was largely determined by selecting those commands which could most benefit from havin\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4  the repeat feature available to them.  \par \par \hich\af4\dbch\af4\loch\f4 At this point, you should be somewhat adept at moving through the file in memory.  There are a few other movement commands that are very useful, but they are used from the edit mode.  Get back into the edit mode (u\hich\af4\dbch\af4\loch\f4 sing ESC) and try CTRL F and CTRL L.  These keys are used to jump to the beginning or end of a file in one step.  Notice that these keys are not located geographically; instead, they were assigned mnemonically.  CTRL F stands for first line, while CTRL L \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 tands for last line. Now try CTRL T and CTRL B. These commands move to the top and bottom of the display window.  Finally, CTRL E moves to the end of a line, and CTRL W, located to the left of E, moves to the beginning of a line.  \par \par \hich\af4\dbch\af4\loch\f4 The next feature for mo\hich\af4\dbch\af4\loch\f4 ving the cursor is the tab function.  The tab keys are TAB (or CTRL I) and CTRL S.  TAB moves the cursor forward to the next column marked by a ^ character in the line below the screen.  CTRL S moves you back one tab stop.  \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621757}\hich\af4\dbch\af4\loch\f4 Entering Text{\*\bkmkend _Toc497621757} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Text may be en\hich\af4\dbch\af4\loch\f4 tered anytime the edit mode is active, i.e., when you are not in the escape mode.  Move the cursor to where the text is to be, and start typing.  The characters typed replace the old contents of the file, and the cursor moves one space to the right.  \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621758}\hich\af4\dbch\af4\loch\f4 Ins\hich\af4\dbch\af4\loch\f4 erting and Deleting Text{\*\bkmkend _Toc497621758} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As changes are made to a file, one of the more frequently needed tasks is inserting blank lines and removing unwanted ones.  As we saw earlier, this is done from the escape mode.  \par \par \hich\af4\dbch\af4\loch\f4 As with the cursor movement commands, the inser\hich\af4\dbch\af4\loch\f4 t and delete commands are geographically oriented.  The diamond of keys immediately to the left of I, J, K and M are Y, G, H and B.  \par \par \hich\af4\dbch\af4\loch\f4 To delete a line, begin by placing the cursor on it.  It doesn't matter where in the line the cursor is located.  Press }{Y}{\hich\af4\dbch\af4\loch\f4  from the escape mode.  The line vanishes, and the following lines are moved up one line to fill in the space.  The repeat feature also works; to delete twelve lines, type }{12Y}{\hich\af4\dbch\af4\loch\f4 .  The twelve lines starting with the line that the cursor is on are deleted.  Th\hich\af4\dbch\af4\loch\f4 e lines do not have to be on the screen to be deleted.  \par \par \hich\af4\dbch\af4\loch\f4 Inserting blank lines is similar.  When B is hit in the escape mode, a blank line is inserted at the location of the cursor.  The line that the cursor was on and all of the lines after it are moved \hich\af4\dbch\af4\loch\f4 down to make room for the new line.  Again, the repeat feature works.  \par \par \hich\af4\dbch\af4\loch\f4 To insert characters, place the cursor at the place that a new character is desired.  The H key will cause all characters from the cursor position on to be shifted to the right one ch\hich\af4\dbch\af4\loch\f4 aracter.  A blank is placed at the cursor position.  Try this enough times to cause a character to go off of the end of the line.  Now use the G key to delete one of the blanks just inserted.  A blank appears in the last column.  This emphasizes that char\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 cters scrolled off of the end of the line are lost.  \par \par \hich\af4\dbch\af4\loch\f4 One of the more common uses of the line insert capability is to make room for large additions to source files.  The cursor is placed appropriately, then a few hundred lines are inserted followed by a s\hich\af4\dbch\af4\loch\f4 tream of text.  There will undoubtedly be some extra blank lines left over.  Typing }{CTRL R}{\hich\af4\dbch\af4\loch\f4  from the edit mode removes these lines, beginning at the cursor position and continuing to the first non-blank line. \par \par \hich\af4\dbch\af4\loch\f4 To see how this works, insert 50 blank lines. \hich\af4\dbch\af4\loch\f4  Now move the cursor down a couple of lines, and enter the edit mode.  Type }{CTRL R}{\hich\af4\dbch\af4\loch\f4 . \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621759}\hich\af4\dbch\af4\loch\f4 Moving and Copying Text{\*\bkmkend _Toc497621759} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The editor lets you copy or delete sections of a file to disk, and read existing disk files into the one being edited.  Selecting the lines to w\hich\af4\dbch\af4\loch\f4 rite out is a two step process: first, move the cursor to the first line to be copied or deleted, and press }{CTRL O}{\hich\af4\dbch\af4\loch\f4 .  The message MARK appears at the bottom of the screen, letting you know that you have marked one end of a block of text.  Now move the curso\hich\af4\dbch\af4\loch\f4 r to the last line in the block and type }{CTRL O}{\hich\af4\dbch\af4\loch\f4  again.  \par \par \hich\af4\dbch\af4\loch\f4 At this point, you are asked for a file name.  This is the name of the file to write the lines to.  If you simply hit RETURN, the editor writes the lines to a special file (called SYSTEMP) in the wo\hich\af4\dbch\af4\loch\f4 rk prefix.  Next you are asked if the lines should be deleted.  Answer with Y or N.  \par \par \hich\af4\dbch\af4\loch\f4 After doing this, move the cursor to another point in the file and }{type CTRL P}{\hich\af4\dbch\af4\loch\f4 , for pop lines from buffer.  Again, you are asked for a file name.  You can enter the name\hich\af4\dbch\af4\loch\f4  of any ProDOS TXT or ORCA SRC file, or simply hit RETURN. The lines from the file are inserted at the cursor position. \par \par \hich\af4\dbch\af4\loch\f4 Single characters can also be removed from the file and placed in another buffer, the character buffer.  Unlike the copy buffer, the c\hich\af4\dbch\af4\loch\f4 haracter buffer functions like a true stack.  Characters are deleted using the DELETE key, and replaced using the open apple and DELETE key together. \par \par \hich\af4\dbch\af4\loch\f4 As characters are deleted from the file they are placed in the character buffer.  As they are retrieved,\hich\af4\dbch\af4\loch\f4  they are removed from the buffer.  Placing more than 256 characters in the buffer starts to delete the oldest characters.  Retrieving more characters than were put in places blanks on the screen.  \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621760}\hich\af4\dbch\af4\loch\f4 Search and Replace{\*\bkmkend _Toc497621760} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The last feature of the editor to b\hich\af4\dbch\af4\loch\f4 e examined here is one of the most useful and powerful.  The editor is capable of searching for strings in the source file and replacing them with a different string. \par \par \hich\af4\dbch\af4\loch\f4 Enter the escape mode and type an asterisk (*).  An asterisk is shown at the bottom of \hich\af4\dbch\af4\loch\f4 the screen, followed by the cursor.  Type }{END}{\hich\af4\dbch\af4\loch\f4 , followed by a RETURN.  Notice this causes a return to the edit mode, rather than remaining in the escape mode. \par \par \hich\af4\dbch\af4\loch\f4 A search string has just been entered.  It remains valid until a different search string is ente\hich\af4\dbch\af4\loch\f4 red.  Typing a CTRL X will move the text window so that the next occurrence of the search string in the file appears on the top line, with the cursor placed at the start of the string.  CTRL Z does the same thing, but searches toward the beginning of the \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 ile instead of toward the end.  Try these commands, paying special attention to what happens when the string is not found. \par \par \hich\af4\dbch\af4\loch\f4 Replacing the search string with a replace string is almost as easy.  From the escape mode, type a colon (:).  Again, the prompt ap\hich\af4\dbch\af4\loch\f4 pears at the bottom of the screen.  Type }{FIN}{\hich\af4\dbch\af4\loch\f4  and a RETURN.  This enters a replace string.  CTRL V initiates a search and replace starting at the current cursor location and proceeding down in the file, while CTRL C does the same going up in the file.  Try \hich\af4\dbch\af4\loch\f4 one of these commands.  \par \par \hich\af4\dbch\af4\loch\f4 After entering either command, the editor asks if an automatic or manual search and replace should be done.  An automatic search and replace replaces every occurrence of the search string with the replace string.  For now, try a m\hich\af4\dbch\af4\loch\f4 anual search.  After entering the M, if the search string is found, the line containing it is placed at the top of the screen.  At the bottom is the question \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Replace (Y N Q)? \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Any reply starting with Y replaces this occurrence of the search string with\hich\af4\dbch\af4\loch\f4  the replace string.  N will skip to the next occurrence of the search string without changing this one.  Q quits the search and replace sequence. \par \par \hich\af4\dbch\af4\loch\f4 Experiment with these commands for a while.  Pay close attention to results when the search string cannot b\hich\af4\dbch\af4\loch\f4 e found.  Also, be sure and try search and replace commands with search and replace strings of different lengths, and with blanks at the beginning and end of the strings. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621761}\hich\af4\dbch\af4\loch\f4 Other Features{\*\bkmkend _Toc497621761} \par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The editor has some other commands, including the ability to enter\hich\af4\dbch\af4\loch\f4  all ASCII characters from the Apple ][+ keyboard, keyboard macros, and an insert mode.  These advanced features are left to the reference manual.  \par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 4: The Fundamental Assembler Directives}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621762}\hich\af4\dbch\af4\loch\f4 Chapter 4: The Fundamental Assembler Directives{\*\bkmkend _Toc497621762}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par \hich\af4\dbch\af4\loch\f4 This chapter is a guided tour through the most useful a\hich\af4\dbch\af4\loch\f4 ssembler directives. ORCA/M has a large complement of assembler directives, easily the most complete set of any microcomputer based assembler.  Despite this fact, there are only a few which are absolutely necessary to write assembly language programs.  In\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 this chapter, we will take a close look at the eleven most important assembler directives, as well as how lines are commented and some of the rules for coding operands.  Once these directives are mastered, you will be able to use ORCA to assemble assembly\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 language programs that appear in magazines and beginners books on assembly language.  The directives that we will look at are:\par \par \tab \hich\af4\dbch\af4\loch\f4 ANOP\tab \tab Assembler no-op\par \tab \hich\af4\dbch\af4\loch\f4 APPEND\tab Concatenate two source files\par \tab \hich\af4\dbch\af4\loch\f4 DATA\tab \tab Start a new data segment\par \tab \hich\af4\dbch\af4\loch\f4 DC\tab \tab Declare constant bytes\par \tab \hich\af4\dbch\af4\loch\f4 DS\tab \tab Dec\hich\af4\dbch\af4\loch\f4 lare storage\par \tab \hich\af4\dbch\af4\loch\f4 END\tab \tab End a code or data segment\par \tab \hich\af4\dbch\af4\loch\f4 ENTRY\tab \tab Declare global label\par \tab \hich\af4\dbch\af4\loch\f4 EQU\tab \tab Declare a constant\par \tab \hich\af4\dbch\af4\loch\f4 GEQU\tab \tab Global equate\par \tab \hich\af4\dbch\af4\loch\f4 KEEP\tab \tab Keep output\par \tab \hich\af4\dbch\af4\loch\f4 START\tab \tab Start a new code segment\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621763}\hich\af4\dbch\af4\loch\f4 The Assembly Language Statement{\*\bkmkend _Toc497621763}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There are two kinds of lines in an assembly langu\hich\af4\dbch\af4\loch\f4 age program, comments and statements.  The assembly language statement will be covered here; comments will be covered in the next section. \par \par \hich\af4\dbch\af4\loch\f4 Assembly language statements can be broken down into three groups.  The first is the assembly language instruction.\hich\af4\dbch\af4\loch\f4   Each assembly language instruction corresponds exactly to a single machine language instruction that the computer can understand.  For example, the assembly language instruction RTS maps to the matching language instruction $60.  The way that these inst\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 uctions are coded is very standard, with almost every 6502 assembler using exactly the same format.  It is that fact that makes it possible to use ORCA to assemble a program written with another assembler, with just a few minor changes to the directives u\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ed. \par \par \hich\af4\dbch\af4\loch\f4 The second kind of line is the assembler directive.  Assembler directives look a lot like assembly language instructions, but in fact they are very different.  While an instruction corresponds to a machine language instruction, and tells the computer\hich\af4\dbch\af4\loch\f4  to take some action in the finished program, the directive does not.  A directive tells the assembler itself to do something.  An example of this would be the KEEP directive which instructs the assembler to keep the object module created under the name p\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ovided in the operand field.  There is very little standardization in directives.  Each assembler is just a little different from the others.  The directives in ORCA were patterned after the assembler that we believe to be the most powerful ever written, \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he IBM 370 assembler. \par \par \hich\af4\dbch\af4\loch\f4 Finally, there is the macro. Macros are expanded by the assembler to produce one or more instructions or directives, letting you do very complex things with very simple statements.  The ADD2 macro, supplied with ORCA, will perform t\hich\af4\dbch\af4\loch\f4 he function of the seven assembly language instructions normally needed to do this operation in one line.  Chapters 7 and 8 explore macros in detail. \par \par \hich\af4\dbch\af4\loch\f4 Each assembly language statement, whether it is a macro, directive or instruction, has four distinct par\hich\af4\dbch\af4\loch\f4 ts.  One of them, the operation code, or op code, is required on every statement in ORCA.  The op code is the name of the statement, like JSR for the jump-to-subroutine instruction, or KEEP for the keep directive.  Unless there is a label, the op code can\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 start in any column from two to forty.  It is customary to place it in column ten, so the editor has a tab stop in that column. \par \par \hich\af4\dbch\af4\loch\f4 Most statements can have a label, and in fact, a few directives actually require one.  Labels serve the same purpose as line n\hich\af4\dbch\af4\loch\f4 umbers in BASIC, giving you a way of telling the assembler what line you want to branch to or change.  Labels must start in column one.  They must start with an alphabetic character, tilde or underscore.  The remaining characters can be alphabetic (A thro\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 gh Z), numeric (0 through 9) or the underscore character or tilde.  Only the first ten characters are significant, although you can use as many as you like.  Thus, VERYLONGLABEL and VERYLONGLABEL2 refer to the same label.  The underscore is significant, s\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4  MYLAB and MY_LAB are not the same.  If a label is used, there must be at least one space between it and the op code.  Finally, ORCA is case insensitive.  This means that you can use a lowercase letter anywhere that an uppercase letter is used, but they m\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 an the same thing.\par \par \hich\af4\dbch\af4\loch\f4 The third field in an assembly language statement is the operand field.  There must be at least one space between the op code and the operand.  It can start in any column before column forty, and customarily starts in column sixteen, wh\hich\af4\dbch\af4\loch\f4 ere the editor has a tab stop.  Operands vary a great deal. Instruction operands are explained in books about the 6502.  Operands for directives and macros are described as the directive or macro is introduced.  However, one issue is important in all type\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  of statements.  You can substitute mathematical expressions for any number, including multiplication, division, addition, subtraction, bit shift operations, etc.  These expressions are written the same way that you would write them in most high level lan\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4 uages.  Since it is so natural, we won't discuss it in detail here.  See page 128 if you would like to know more.  The examples below illustrate the main points. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LDA\tab LABEL+1\par \tab \tab DS\tab LENGTH*400\par \tab \tab DS\tab (LENGTH+1)*400\par \tab L1\tab EQU\tab L0/14+1\par \tab N1\tab EQU\tab -1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The last field\hich\af4\dbch\af4\loch\f4  in an assembly language statement is the comment field.  There must be at least one space between the operand (or op code, if there is no operand) and the comment.  The comment is for your benefit.  It does not effect the finished program in any way, but\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 it does help you to remember what the program is doing.  Some assemblers require semi-colons before the comment; ORCA does not.  Comments normally start in column forty-one.  As you would expect by now, the editor has a tab stop there. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621764}\hich\af4\dbch\af4\loch\f4 Comment Lines{\*\bkmkend _Toc497621764}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The\hich\af4\dbch\af4\loch\f4  second type of line that can appear in an assembly language program is the comment.  Comments are used to help you remember what a program is doing.  Comments do not effect the finished program in any way.  Specifically, unlike BASIC, comments do not tak\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  up room in the finished program, so there is no reason to avoid them. \par \par \hich\af4\dbch\af4\loch\f4 ORCA supports five kinds of comment line.  First, a completely blank line is treated as a comment.  Any line with an *, ; or ! in the first column is also treated as a comment, and an\hich\af4\dbch\af4\loch\f4 y keyboard character can be used after the first character.  Finally, a line with a . in column one is a special kind of comment line called a sequence symbol.  Sequence symbols are not printed in the listing produced by the assembler.  They are used by c\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 nditional assembly directives, and discussed in detail in Chapter 8.  For now, if you decide to use this form of comment to get a line that shows up in the editor, but not later in the listing, be sure and place a space after the . character. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621765}\hich\af4\dbch\af4\loch\f4 KEEP{\*\bkmkend _Toc497621765}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 We sa\hich\af4\dbch\af4\loch\f4 w the KEEP directive in the short program that we wrote back in Chapter 1.  The KEEP directive tells the assembler to keep the object modules that it produces.  The operand field can contain any valid ProDOS path name.  The current prefix is used if only \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4  partial path name is specified.  Only one KEEP directive can be used in a program, and it must appear before the first START directive.   Although it is possible to create a finished program without using the KEEP directive (see the description of ASSEMB\hich\af4\dbch\af4\loch\f4 L\hich\af4\dbch\af4\loch\f4 E in the reference manual to find out how), most programs do in fact start with a KEEP directive. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621766}\hich\af4\dbch\af4\loch\f4 START and END{\*\bkmkend _Toc497621766}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The START and END directives are much more powerful than you might expect from looking at our first program back in Chapter 1.  These directi\hich\af4\dbch\af4\loch\f4 ves are used to indicate the start and end of named code segments.  The END directive has no operand, and usually no label.  The START directive also has no operand, but requires a label.  The label on the START directive becomes the name of the code segm\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 nt.  A program can, and usually does have more than one code segment.  It is not necessary to do separate assemblies to assemble each of the code segments, nor is it necessary to put them in separate disk files. \par \par \hich\af4\dbch\af4\loch\f4 Inside a code segment, all labels that are\hich\af4\dbch\af4\loch\f4  not defined using the GEQU or ENTRY directives are local labels.  (The GEQU and ENTRY directives are covered later.) This means that no other code segment can see the label.  For example, the following program would produce an error in SEG1 because LAB1 \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 s not defined in SEG1, but it is perfectly legal for both segments to use LAB2. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab SEG1\tab START\par \tab LAB2\tab LDA\tab LAB1\par \tab \tab END\par   \par   \par \tab SEG2\tab START\par \tab LAB2\tab LDA\tab LAB2\par \tab LAB1\tab LDA\tab LAB1\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The concept of local labels is very powerful, and unfortunately, very rare in assemble\hich\af4\dbch\af4\loch\f4 rs.  Because a section of code can be developed independently of all other code in the program, you can build up a library of subroutines that can be moved from one program to another.  And, unlike other assemblers, you don't have to worry about whether y\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 u have used the label LOOP somewhere else in the program.  Its perfectly all right to have the label LOOP in every segment in the program, so long as it is used only once in each segment. \par \par \hich\af4\dbch\af4\loch\f4 As you start to write long programs with ORCA, you should use the \hich\af4\dbch\af4\loch\f4 idea of the segment by dividing your program into short subroutines.  As with the more advanced high level languages, these subroutines can be developed and debugged separately.  Used properly, the program segmentation provided by the START and END direct\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ve can be one of the most powerful aids to writing large assembly language programs. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621767}\hich\af4\dbch\af4\loch\f4 Equates{\*\bkmkend _Toc497621767}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 One of the basic ideas behind structured programming is to give meaningful names to numbers.  This is done by defining a constant, which is used instead of the \hich\af4\dbch\af4\loch\f4 number.  In assembly language, constants are defined using the EQU directive, and are called equates. \par \par \hich\af4\dbch\af4\loch\f4 To define a constant, place the EQU in the op code field, the name of the constant in the label field, and the value in the operand field.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab ONE\tab EQU\tab 1\par \tab TWO\tab EQU\tab 1+1\par \tab FOUR\tab EQU\tab TWO*TWO\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As shown, you can use expressions in the operand, and you can use constants defined by earlier equates.  Keep in mind that equates are used to define constants:  each term in the expression in the operand field \hich\af4\dbch\af4\loch\f4 must have a specific value when the EQU is encountered.  One of the most common problems that result from this fact is people trying to use the construct\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab HERE\tab EQU\tab *\tab \tab Incorrect\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 to set the label HERE to the address of the current location counter. Because\hich\af4\dbch\af4\loch\f4  ORCA uses a link editor, the value of the current location counter is not known at assembly time, and the operand is not a constant.  If you need to define a label without generating code, you can use the ANOP (assembler no-op) directive: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab HERE\tab ANOP\tab \tab \tab Correct\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Constants should be defined before they are used.  It is customary to put all of the equates in a segment right after the START directive.  This is only a strict requirement when the constant is used later as a zero page address (or as a long addre\hich\af4\dbch\af4\loch\f4 ss on the 65816), but it is better to get in the habit of defining before use to avoid problems later. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621768}\hich\af4\dbch\af4\loch\f4 DC and DS{\*\bkmkend _Toc497621768}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A program consists of instructions and data.  So far, we haven't found out how to put data into our assembly language programs.  In ORCA, th\hich\af4\dbch\af4\loch\f4 is is done with two directives:  DC, or define constant; and DS, or define storage. \par \par \hich\af4\dbch\af4\loch\f4 The DC directive is used whenever you want to put an initialized value into memory.  With the DC directive, you can put characters, binary or hexadecimal values, integers\hich\af4\dbch\af4\loch\f4  (in a variety of lengths), addresses, or floating point numbers into memory.  In this section, we will only talk about characters, integers, and hexadecimal values.  If you need to enter one of the other kind, see Chapter 16. \par \par \hich\af4\dbch\af4\loch\f4 The operand of the DC direc\hich\af4\dbch\af4\loch\f4 tive tells what values will be placed in memory in the finished program.  The first letter is a format specifier, which tells what format the information is in.  The table below lists all of the valid format identifiers. \par \par }\pard \qj\keepn\widctlpar\adjustright {\tab \hich\af4\dbch\af4\loch\f4 A\tab address\par \tab \hich\af4\dbch\af4\loch\f4 B\tab binary\par \tab \hich\af4\dbch\af4\loch\f4 C\tab character\par \tab \hich\af4\dbch\af4\loch\f4 D\tab double precision floating point\par \tab \hich\af4\dbch\af4\loch\f4 F\tab single precision floating point\par \tab \hich\af4\dbch\af4\loch\f4 H\tab hexadecimal\par \tab \hich\af4\dbch\af4\loch\f4 I\tab integer\par \tab \hich\af4\dbch\af4\loch\f4 R\tab hard reference\par \tab \hich\af4\dbch\af4\loch\f4 S\tab soft reference\par \par }\pard \qj\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4           Table 2:  DC Format Specifiers\par \par \hich\af4\dbch\af4\loch\f4 Let's start by looking at a declaration of a string of characters.  The DC state\hich\af4\dbch\af4\loch\f4 ment shown below defines the string that is enclosed in quote marks, and illustrates that quote marks inside the string must be doubled. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {  DC C'Now''s the time for all good people to use ORCA.'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The format shown here is very similar for all types of DC d\hich\af4\dbch\af4\loch\f4 irectives.  The op code is always DC, the first character is the type of data to be defined, and the data follows, enclosed in quote marks.  When you are defining data where several different values of the same type are coded, you can separate the individ\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 al values with commas, as seen in the following example for integer declarations.  Note that integers are always stored least significant byte first, which is the way the 6502 likes its addresses, and also the way the ORCA math libraries like to find numb\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 rs. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DC\tab I'1,1+1,3,4'\par \tab \tab DC\tab I8'1000000000000'\par \tab \tab DC\tab 50I'1'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The second example demonstrates that integers come in several lengths.  If you use an I for the type specifier, you will get a two byte integer.  However, the I can be followed by any number from \hich\af4\dbch\af4\loch\f4 one to eight, giving an integer with that many bytes.  These large integers can represent very large numbers; the eight byte integer shown on the second line can represent numbers from -9223372036854775808 to 9223372036854775807.  Finally, the last line i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 troduces the idea of a repeat count, which can be used with any type of values that are placed one after the other in memory.  The last statement, then, would initialize 100 bytes of memory.  There is no limit to the number of bytes that a single DC direc\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ive can define, but the repeat count is limited to 255. \par \par \hich\af4\dbch\af4\loch\f4 The last type of DC directive that we will look at here is the hexadecimal DC definition.  Hexadecimal digits include the numbers 0 to 9 and the hexadecimal digits A to F.  Again, since the assemble\hich\af4\dbch\af4\loch\f4 r is case insensitive, you could use lowercase letters if you like.  The only thing that can appear between the quote marks is hexadecimal digits and spaces.  Each byte of memory can contain two hexadecimal digits, and the digits coded in the DC directive\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 are placed in memory in pairs.  If you code an odd number of digits, the last nibble of the last byte is padded with a zero.  The two DC directives in the example below produce exactly the same thing:  Two bytes, the first of which contains a $B1 and the \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 econd of which has a $D0. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DC\tab H'B1 D0'\par \tab \tab DC\tab H'B 1 D'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The last example shows how you can mix data types on a single line.  For a very reasonable example, lets assume that you want to place a carriage return code at the end of a line of characters.  Sinc\hich\af4\dbch\af4\loch\f4 e the carriage return code is a $0D, we could code it in hexadecimal, as in the first example.  Or, if you prefer, we could define a symbol called RETURN, and code it as a one byte integer, as in the second DC directive. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DC\tab C'Error!',H'0D'\par   \par \tab RETURN\tab EQU\tab $D\par \tab \tab DC\tab C'Error!',I1'RETURN'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As mentioned earlier, there are several more data types supported for special uses.  For more information, see the reference manual, starting on page 136.  Also, note that the DC directive and character constants used in ex\hich\af4\dbch\af4\loch\f4 pressions default to standard ASCII, with the most significant bit cleared.  This is correct for most peripherals and for the subroutine libraries, but if you are writing your own subroutines to output directly to the Apple screen, you may want to have th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  most significant bit set.  The MSB directive, described on page 146 of the reference manual, gives you a way to do that.\par \par \hich\af4\dbch\af4\loch\f4 Before moving on, lets take a quick look at another way to define data.  The DS directive is normally used when you don't care what i\hich\af4\dbch\af4\loch\f4 nitial value a variable has, but you want to reserve some space in the finished program. The operand of the DS directive is a constant which tells how many bytes to declare.  The bytes are reserved in memory and initialized to zero. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx2700\adjustright \f6\fs18\cgrid {\tab NUM\tab EQU\tab 10\par \tab SPACE\tab DS\tab 100\tab DEFINE 100 BYTES OF FREE SPACE\par \tab \tab DS\tab NUM*2\tab DEFINE NUM TWO BYTE INTEGERS\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621769}\hich\af4\dbch\af4\loch\f4 Global Labels{\*\bkmkend _Toc497621769}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 So far, we have only talked about local labels, where a label in one code segment is "invisible" in all others.  There are, of course, times when you want another s\hich\af4\dbch\af4\loch\f4 egment to be able to see a label.  We already saw one way of doing this:  the label on the START directive is global.  This means that every segment in the program is able to see the label defined on a START directive.  By the way, it's all right to defin\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  a local label with the same name as a global one, so long as they are not defined in the same segment.  The assembler will choose the local label in preference to the global one. \par \par \hich\af4\dbch\af4\loch\f4 There are also two other directives which can define a global label.  The \hich\af4\dbch\af4\loch\f4 first is a global form of the EQU directive, used for defining global constants.  It works just like EQU, but the op code is GEQU.  You should realize one important difference between the labels defined with the GEQU directive and all other labels.  Those\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 defined with GEQU can be seen at assembly time, while all the other global labels can only be seen at link time.  This means that you should always use a GEQU directive to define a zero page (or long address on the 65816) label that will be used in more t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 an one subroutine.  That way, the assembler can automatically decide which addressing mode is appropriate. \par \par \hich\af4\dbch\af4\loch\f4 The ENTRY directive can also be used to define a global label.  The ENTRY directive has no operand, and its label receives the value of the current\hich\af4\dbch\af4\loch\f4  location counter.  Its most common use is to define an alternate entry point into a subroutine, as shown in the example below. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab SUB1\tab START\tab \tab PRINT A HEX BYTE\par \tab \tab LDA\tab #$AB\par \tab \tab JSR\tab SUB2\par \tab \tab JSR\tab SUB2A\par \tab \tab RTS\par \tab \tab END\par   \par \tab SUB2\tab START\tab \tab PRINT MSB OF HEX BYTE\par \tab PRHEX\tab EQU\tab $FDE3\par \tab \tab PHA\par \tab \tab LSR\tab A\par \tab \tab LSR\tab A\par \tab \tab LSR\tab A\par \tab \tab LSR\tab A\par \tab \tab JMP\tab LB1\par   \par \tab SUB2A\tab ENTRY\tab \tab PRINT LSB OF HEX BYTE\par \tab \tab PHA\par \tab \tab AND\tab #$F\par \tab LB1\tab JSR\tab PRHEX\par \tab \tab PLA\par \tab \tab RTS\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621770}\hich\af4\dbch\af4\loch\f4 DATA Areas{\*\bkmkend _Toc497621770}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Especially in large programs, it is nice to be able to build data areas where global variables and con\hich\af4\dbch\af4\loch\f4 stants can be stored.  In fact, it is even nice to be able to have several such areas, very much like the way Fortran allows common areas to be defined.  ORCA has a structure like this, called the data area. \par \par \hich\af4\dbch\af4\loch\f4 Data areas are in fact separate segments.  But\hich\af4\dbch\af4\loch\f4  instead of using a START directive, data segments start with a DATA directive.  They still end with an END directive.  Only data definitions are allowed inside of a DATA area; the assembler will flag an instruction as an error.  Labels in a data area are\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 still local labels, and normally can only be seen inside of the data area.  Another directive, the USING directive, is then used in any code segment that needs to use the labels in the data area.  The USING directive has the effect of making the labels in\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the data area local to both the data area and the segment where the USING directive appears.  More than one code segment can use the same data segment, and in fact, more than one data segment (up to 127) can be defined and used, in any combination, by a c\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 de segment.  The syntax for these two new directives is illustrated below. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab MAIN\tab START\par \tab \tab JSR\tab INIT\par \tab \tab JSR\tab PRINT\par \tab \tab RTS\par \tab \tab END\par   \par \tab COMMON\tab DATA\par \tab KEYBOARD\tab EQU\tab $C000\par \tab PRBYTE\tab EQU\tab $FDDA\par \tab NUM1\tab DC\tab H'CD'\par \tab NUM2\tab DS\tab 1\par \tab NUM3\tab DS\tab 1\par \tab \tab END\par   \par \tab INIT\tab START\par \tab \tab USING\tab COMMON\par \tab \tab LDA\tab KEYBOARD\par \tab \tab STA\tab NUM2\par \tab \tab RTS  \par \tab \tab END\par   \par \tab PRINT\tab START\par \tab \tab USING\tab COMMON\par \tab \tab CLC\par \tab \tab LDA\tab NUM1\par \tab \tab ADC\tab NUM2\par \tab \tab STA\tab NUM3\par \tab \tab JSR\tab PRBYTE\par \tab \tab RTS\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621771}\hich\af4\dbch\af4\loch\f4 The APPEND Directive{\*\bkmkend _Toc497621771}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As you write larger and larger programs, you will eventually run out of space in the editor.  When this\hich\af4\dbch\af4\loch\f4  happens, you can split your program into two sections and use the APPEND directive to tell the assembler that another file belongs in the finished program.  The operand of the APPEND directive is a ProDOS path name.  It works like a GOTO, in that any lin\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  after the APPEND directive is ignored.  The directive can be used to append a file that is on a disk which isn't even in the computer when the assembly starts.  When the APPEND directive is encountered, the assembler checks for the disk.  When it is not \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 ound, it stops and asks you to place the disk in a drive, reminding you of the name of the disk it wants.  If you have made an error, and there is no such disk, just hit the ESC key.  Effectively, this means that you can assemble any program on a one driv\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  system that you could assemble on a two, three, or more drive system, although swapping disks will be necessary.\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 5: Advanced Commands}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621772}\hich\af4\dbch\af4\loch\f4 Chapter 5: Advanced Commands{\*\bkmkend _Toc497621772}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par \hich\af4\dbch\af4\loch\f4 With the basics behind us, we can start looking at some of the advanced features of ORCA.  You should keep in \hich\af4\dbch\af4\loch\f4 mind that even in these chapters we will not look at all of the capabilities of ORCA.  The real purpose here is to cover the most commonly used features, as well as those techniques that require the use of features described in different parts of the refe\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ence manual.  After getting comfortable with the material in these four chapters, you should plan on skimming the reference manual to look for topics which interest you. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621773}\hich\af4\dbch\af4\loch\f4 Linking to Several Locations{\*\bkmkend _Toc497621773}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Let's start by looking at one part of the ORCA system \hich\af4\dbch\af4\loch\f4 that we have ignored up to now.  The link editor can, as we have already proved, be ignored. On the other hand, it can also be used to do some very powerful things. The first of those that we will look at is assembling a program one time, then linking it \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 everal times to get binary files that will load to different locations.  The most common reason for doing this is when we are writing something to work with BASIC.  Frequently, you will want several different versions of the assembly language parts that l\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ad at different places. \par \par \hich\af4\dbch\af4\loch\f4 To do all of this, start out by simply doing an assembly.  The ASSEMBLE command works just like the RUN command that we have used up to this point, but instead of doing an assemble-link-execute sequence, it only does the assemble.\hich\af4\dbch\af4\loch\f4   The result of the assembly is the OBJ files that you find when you do a catalog of the disk.  These files cannot be executed yet.  They have been assembled into a form that contains all of the information necessary to generate code for any location in m\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 mory.  This is what is known as a relocatable object module, or simply object module. \par \par \hich\af4\dbch\af4\loch\f4 Now we can start generating the binary modules for different locations. The binary modules are the BIN files, and they are the ones that can actually execute.  Each of \hich\af4\dbch\af4\loch\f4 the BIN files will only work if it is loaded at the proper place in memory.  If you check the reference manual, you will find that there is a parameter called ORG on the link command.  The ORG is the origin for the final binary file, and by specifying it,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 we will get a binary file that will execute at the point we tell it to.  For example, if the output file from the assembly was called MYPROG, it would produce the files MYPROG.ROOT and, assuming there is more than one code segment, MYPROG.A.  Then to get \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 wo versions of the BIN file MYPROG, one of which executes at $4000 and one of which works at $300, we would type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LINK MYPROG KEEP=MYPROG.300 ORG=$300\par \tab \tab LINK MYPROG KEEP=MYPROG.4000 ORG=$4000\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The KEEP parameter tells what file name to use to save the bi\hich\af4\dbch\af4\loch\f4 nary file. It isn't required, but the binary file isn't produced if you don't use it.  As you can see, we can use hexadecimal numbers in the ORG parameter. We could also use decimal numbers, in which case the $ character is omitted. \par \par \hich\af4\dbch\af4\loch\f4 Two final points befo\hich\af4\dbch\af4\loch\f4 re we move on.  First, you can do a perfectly good link edit by leaving the ORG parameter off.  In that case, as with all programs that do not specify an ORG explicitly, the program will start at $2000.  This is the best place to start a program that will\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 run under ORCA, unless you are using the high resolution graphics page, in which case you should ORG the program to $4000, or, if page 2 will be used, $6000.  You can run the program under ProDOS that starts at $800, but such a program cannot be executed \hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 nder ORCA, since the ORCA operating system extension uses the memory from $800 to $1FFF. \par \par \hich\af4\dbch\af4\loch\f4 Secondly, if you are going to specify ORG values in the link edit step, you must not use ORGs inside the program.  An ORG in the program will override the ORG you sp\hich\af4\dbch\af4\loch\f4 ecify in the link edit step.  If you would like to use an ORG directive in the program, you can read up it on page 147 of the reference manual. \par \par \hich\af4\dbch\af4\loch\f4 By the way, you can do an assemble-link sequence without executing the finished program using the ASML command\hich\af4\dbch\af4\loch\f4 .  Its syntax is the same as the RUN command. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621774}\hich\af4\dbch\af4\loch\f4 Partial Assemblies{\*\bkmkend _Toc497621774}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The most common use of the link editor under ORCA is one that doesn't even require the use of the LINK command:  we can still use the old RUN command.  It is also a feature that is not pro\hich\af4\dbch\af4\loch\f4 vided on any other system that we know about.  This is the idea of the partial assembly. \par \par \hich\af4\dbch\af4\loch\f4 Lets imagine for a moment that you are no longer a beginner with the ORCA system.  Your program has grown to about 3000 lines of code, and contains about 40 code seg\hich\af4\dbch\af4\loch\f4 ments.  Right in the middle, there is a single line of code that has to be changed, in the code segment called BUG.  With other assemblers, you would change the line and reassemble the entire program. With ORCA, you would do a partial assembly instead.  T\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e command would look like\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab RUN MYSOURCE NAMES=(BUG)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 What happens is this:  the assembler recognizes that you are doing a partial assembly from the fact that you specified a NAMES parameter in the command line.  It scans your program, resolving directives\hich\af4\dbch\af4\loch\f4  like APPEND and GEQU which effect all of the code segments, but skips lines that effect code segments that you have not asked for.  When it finds BUG, it assembles that subroutine, then quits.  Assuming this is the first partial assembly that you have do\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 e, BUG is placed in an OBJ file that ends in .B instead of the usual .A.  The link editor, when it starts up, will start with the file ending with .ROOT (which contains the first code segment in your program), and continue with the file with the highest a\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 phabetic suffix, in this case, .B.  After all of the subroutines in the .B file are linked, the linker moves back to the previous file, in this case ending with .A.  It skips any segments that it has already found, so the old version of BUG is not include\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  in your program. \par \par \hich\af4\dbch\af4\loch\f4 More than one segment can be assembled on a partial assembly.  To specify multiple segments, enclose all of the names in the parentheses and separate them with commas or spaces.  You can do up to twenty-five partial assemblies.  At that\hich\af4\dbch\af4\loch\f4  point, the suffix is .Z, and the next suffix produces an illegal file name. \par \par \hich\af4\dbch\af4\loch\f4 Two difficulties can occur when doing partial assemblies, both of which are solved using the CRUNCH utility.  The first, and most obvious, is that you will use a lot of disk spa\hich\af4\dbch\af4\loch\f4 ce doing all of those partial assemblies. The CRUNCH utility takes the files produced by a partial assembly and combines them all into a single .A file again, deleting duplicates of the subroutines.  The other problem arises when the order of code segment\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  is critical.  The idea of the code segment is that it is a separate section of the program whose order in relation to other segments is not important.  However, there are cases when the order is, in fact, very important.  When that happens, the fact that\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the CRUNCH utility restores the original order of the object modules can be useful.  If you are concerned about the order, a partial assembly and link edit becomes a three step process.  If you are assembling a program called SOURCE which produces a final\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 file called OBJECT, the sequence would look like this: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab ASSEMBLE SOURCE NAMES=(SUB5 SUB15)\par \tab CRUNCH OBJECT\par \tab LINK OBJECT KEEP=OBJECT\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There are three cases when you must bite the bullet and do a full assembly. They are: \par \par \tab \hich\af4\dbch\af4\loch\f4 1.  When a segment is deleted or \hich\af4\dbch\af4\loch\f4 renamed.\par \tab \hich\af4\dbch\af4\loch\f4 2.  When a global equate is changed.\par \tab \hich\af4\dbch\af4\loch\f4 3.  When order is important and a segment has been added.\par \par \hich\af4\dbch\af4\loch\f4 If you would like to read more about how the link editor works, refer to Chapter 13.  The CRUNCH utility is described on page 77, and a utility that \hich\af4\dbch\af4\loch\f4 lets you see what segments are in an object module, called SCAN, is described on page 83. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621775}\hich\af4\dbch\af4\loch\f4 Subroutine Libraries{\*\bkmkend _Toc497621775}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 After linking your program, if there are any labels used that have not been found, the link editor automatically scans the SUBLIB prefix for l\hich\af4\dbch\af4\loch\f4 ibraries.  Any object module found there is treated as a library.  It is scanned, and if the name of the segment matches the name of one of the missing labels, the segment is included in your program.  Each subroutine library is searched exactly one time,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 and is searched sequentially. Segments in the library can refer to other segments, provided the other segment comes after them in the library. \par \par \hich\af4\dbch\af4\loch\f4 To create your own library, write the subroutines as a separate program, then include a short dummy subroutine \hich\af4\dbch\af4\loch\f4 at the top of the program.  Do an assembly. (Link editing is not required.) Now, delete the .ROOT file, which contains the dummy segment from the top of the program, and copy the library to the SUBLIB directory.  If the order that the libraries will be se\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 rched is important, use the SWITCH command to change the order of the files in the SUBLIB prefix; they will be searched in the order listed by the CATALOG command.  The SWITCH command is described on page 85. \par \par \hich\af4\dbch\af4\loch\f4 If you are using a library and need to includ\hich\af4\dbch\af4\loch\f4 e a segment which, for some reason, would not normally be included, you should use the R type DC directive.  That directive causes a hard reference to the segment.  This tells the linker to include the segment (or generate an error if it cannot be found) \hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ven if the linker doesn't think the segment is needed.  The directive does not use up any room in the final program.  For example, to force SUB1 and SUB2 to be included from a library, you would use\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DC\tab R'SUB1,SUB2'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621776}\hich\af4\dbch\af4\loch\f4 EXEC Files{\*\bkmkend _Toc497621776}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 ORCA supports a command f\hich\af4\dbch\af4\loch\f4 ile that works a lot like EXEC files under BASIC.  In the command file, you can enter any sequence of commands that you can type from the keyboard, then run the EXEC file.  Like executing a binary file, you just type the name of the EXEC file to execute i\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 . \par \par \hich\af4\dbch\af4\loch\f4 There is one catch to using EXEC files; they must be stamped as EXEC files.  If you catalog a directory that has some ORCA source files on it, you will notice that they all say ASM6502 in the auxiliary type field (the last entry on the line). This tell\hich\af4\dbch\af4\loch\f4 s you that the system thinks that the file is supposed to be sent to the assembler. An EXEC file must say EXEC in that field, so that the system is sure that the file is to be used as an EXEC file.  To do this, you must change languages before creating th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  new file with the editor. To change to the EXEC language, simply type EXEC.  Now, if you enter the editor with the NEW command and create a new file, it will have EXEC in the auxiliary field.  Be sure and switch back to ASM6502 by typing that language na\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 e before creating new assembly language files! \par \par \hich\af4\dbch\af4\loch\f4 There is another way to change the language that will be used when you edit a new file, and that is to edit an existing file.  The current language will change to match the language of the file you have edit\hich\af4\dbch\af4\loch\f4 ed. This brings up two problems:  how to tell just what language you are creating, and how to change the language of an existing file.  To see what the default language is, simply type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab SHOW LANGUAGE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The system will print out the language that will be us\hich\af4\dbch\af4\loch\f4 ed on a new file. (Incidentally, the SHOW command can also list the available languages, tell you what time it is, and list the volume names of the disks that you have in each disk drive.  See page 85 of the reference manual, or type HELP SHOW.)\par \par \hich\af4\dbch\af4\loch\f4 To change\hich\af4\dbch\af4\loch\f4  the language on an existing file, you can use the CHANGE command.  Two parameters are required.  The first is the name of the file to change, which can of course be specified with a wildcard if you are changing several files at once.  The second paramete\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  is the language to change the file to.  So, to change COMFILE from whatever it is to an EXEC file, you can type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab CHANGE COMFILE EXEC\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Please take a moment to experiment with these ideas.  Getting used to them now can save you a lot of time and difficulty\hich\af4\dbch\af4\loch\f4  later. \par \par \hich\af4\dbch\af4\loch\f4 By the way, there is one very special EXEC file that you should know about. When the ORCA system boots, it looks on the SYSTEM prefix for an EXEC file called LOGIN.  If one is found, it is executed as part of the boot up sequence.  This lets you \hich\af4\dbch\af4\loch\f4 set default prefixes, show the log in time, or even run a program right away.  (A calendar program would seem appropriate.)\par \par \hich\af4\dbch\af4\loch\f4 Note that EXEC files cannot contain other EXEC files. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621777}\hich\af4\dbch\af4\loch\f4 Device Numbers{\*\bkmkend _Toc497621777}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If you have been experimenting, you may have noticed that O\hich\af4\dbch\af4\loch\f4 RCA does not support slot and drive parameters.  Instead, you can use device numbers. This capability is copied from the Apple /// SOS operating system. \par \par \hich\af4\dbch\af4\loch\f4 The idea is that every disk has a device number, which ranges from one to the number of disk drives t\hich\af4\dbch\af4\loch\f4 hat you have.  You can specify the device by substituting a .D and the number of the drive instead of / volume name in a full path name.  Thus, to catalog the STUFF directory on the disk in slot 6, drive 1, you would type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab CATALOG .D1/STUFF\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Device number\hich\af4\dbch\af4\loch\f4 s are assigned in volume search order.  To see what the numbers are, as well as what volumes you have in each device, type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab SHOW UNITS\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621778}\hich\af4\dbch\af4\loch\f4 Redirecting Input and Output{\*\bkmkend _Toc497621778}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As you may know, the Apple has always used two hooks in zero page to redirect input and o\hich\af4\dbch\af4\loch\f4 utput.  As a result, most programs written for the Apple send output through a hook at $36, and receive input through $38. These hooks are supported even if you aren't using them on purpose, since the monitor's standard input and output routines use the h\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 oks.  ORCA extends this idea to give you UNIX style I/0 redirection. \par \par \hich\af4\dbch\af4\loch\f4 Input redirection means that any program that receives input from the keyboard can be told to get it from a disk file instead.  Output redirection lets you send output that would normal\hich\af4\dbch\af4\loch\f4 ly go to the screen to a disk file or printer.  For example, to send a listing of the files in a directory to the printer, you could type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab CATALOG >.PRINTER\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The same idea can be used to send the listing from an assembly or link edit to the printer.  This\hich\af4\dbch\af4\loch\f4  capability may seem almost frivolous right now, but after you use it for a couple of weeks, you would be a very unusual person if you would just as soon give it up.  Keep it in mind and try using it, and you will quickly find many uses for this ability. \par \par \hich\af4\dbch\af4\loch\f4 By the way, I/0 redirection can be used inside of EXEC files.  Also, the position of the input and output redirections in the command line is not important, since the operating system removes them before the command processor parses the line.  You can spe\hich\af4\dbch\af4\loch\f4 cify both input and output redirection on a single line, and again, the order is unimportant.\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 6: Advanced Assembler Directives}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621779}\hich\af4\dbch\af4\loch\f4 Chapter 6: Advanced Assembler Directives{\*\bkmkend _Toc497621779}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par \hich\af4\dbch\af4\loch\f4 We have already looked at the assembler directives that are really necessary to assemble a program under ORCA, but of\hich\af4\dbch\af4\loch\f4  course there are a lot more.  The remaining directives can be divided into two broad categories: those that are primarily used for writing macros, and those that generally have nothing to do with macros.  In this chapter, we will look at the directives w\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 ich are not used in macros.  Chapter 8 covers the rest. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621780}\hich\af4\dbch\af4\loch\f4 COPY{\*\bkmkend _Toc497621780}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The copy directive functions a great deal like the APPEND directive, and like that directive it uses a ProDOS path name in the operand.  The only difference between the two is that when you re\hich\af4\dbch\af4\loch\f4 ach the end of the file that was copied, the assembler returns to the original file and continues assembling from the line after the COPY directive, while, with the APPEND directive, the assembler never comes back. \par \par \hich\af4\dbch\af4\loch\f4 The APPEND directive is more efficient \hich\af4\dbch\af4\loch\f4 in terms of both time and memory, and it should always be used when you have a choice.  The COPY directive is used primarily for those cases where you would like to include a short section of code, for example a series of equates, in several subroutines, \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 r where you have a standard sequence of code that you put in every program. \par \par \hich\af4\dbch\af4\loch\f4 You can put as many COPY directives in a file as you like.  Copied files can append other files, and they can also copy other files.  The number of levels that you can copy varie\hich\af4\dbch\af4\loch\f4 s according to how much memory is available, but is generally at least four.  This means that file A can copy file B, which copies file C, which copies file D, but if file D also copies a file, you may run out of memory.  Then again, you may not.  It depe\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 ds on what other features of the assembler you are using at the time. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621781}\hich\af4\dbch\af4\loch\f4 Format Control Directives{\*\bkmkend _Toc497621781}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In this section we will look at several directives that help you format the assembler listing to suit your preferences. \par \par \hich\af4\dbch\af4\loch\f4 Let's start with the LIST directive\hich\af4\dbch\af4\loch\f4 , which can be used to turn the listing off entirely.  Like many of the format control directives, the operand for the list directive is either ON or OFF.  Why would you ever turn the listing off?  Well, to start with, errors are printed whether you are l\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 sting the file or not, so you can always see them.  Add to that the fact that the assembler spends over one tenth of its time writing the listing on the screen for you, and you can start to see why you might not want to list the output.\par \par \hich\af4\dbch\af4\loch\f4 Now add to this an\hich\af4\dbch\af4\loch\f4 other directive, SYMBOL.  It, too, uses ON and OFF as the operand.  If you have initialized your system so that a keypress will cause the system to stop when it encounters a carriage return, you will find that the assembler disables this feature - unless \hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4 ou are listing a line of source code or printing a symbol table.  If both LIST OFF and SYMBOL OFF have been used, this means that the only kind of line that can cause the system to stop is an error.  So you can start a long assembly, hit a key, and leave.\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4  If an error is found, the system will wait for you to come back and find it. \par \par \hich\af4\dbch\af4\loch\f4 Therefore, most programs should start with the following three\par \hich\af4\dbch\af4\loch\f4 directives. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {            LIST   OFF\par             SYMBOL OFF\par             KEEP   MYPROG\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 By the way, you can also c\hich\af4\dbch\af4\loch\f4 ontrol the speed of the listing with your game paddle or joystick, and can use the ESC key to cause the assembler to abort the assembly.  (You must stop the listing first by pressing a key, then use the ESC key.) You can probably figure it out with a litt\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e trial and error, or read the details starting on page 120. \par \par \hich\af4\dbch\af4\loch\f4 Another directive which uses the ON or OFF operand is the ERR directive.  If LIST is on, it has no effect, but if list is off, it can be used to turn off listing of error lines.\par \par \hich\af4\dbch\af4\loch\f4 You may have n\hich\af4\dbch\af4\loch\f4 oticed that the assembler writes the code that it is generating at the left edge of the paper.  You may also have noticed that only four bytes are written there, even if you coded a DC directive that generated more than four bytes of code.  You can cause \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he assembler to print all of the code in a DC directive (up to a maximum of 16 bytes) by using the EXPAND directive, which, like the other directives, takes an operand of ON or OFF.  Keep in mind, though, that the assembler will still need a line for each\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 four bytes that it shows you, so you might not want to use this directive! \par \par \hich\af4\dbch\af4\loch\f4 Two directives let you control output sent to the printer.  The first is PRINTER, which again uses ON or OFF in the operand.  Several of these directives can be used in a single p\hich\af4\dbch\af4\loch\f4 rogram if you would like to list only a few subroutines.  If you want to send the entire listing to the printer, it is probably easier to redirect the output from the command line.  The other directive is EJECT.  It takes no operand, and has no effect unl\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ss the output is going to the printer.  In that case, it causes the system to skip to the top of a new page. \par \par \hich\af4\dbch\af4\loch\f4 The last directive used to control the output is the TITLE directive.  The TITLE directive doesn't need an operand, but it can take a string.  If\hich\af4\dbch\af4\loch\f4  you use spaces in the string, it must be enclosed in quote marks.  This directive causes the assembler to print page numbers at the top of each page.  If a string was coded in the operand, the string is printed after the page number. \par \par \hich\af4\dbch\af4\loch\f4 To review, the list\hich\af4\dbch\af4\loch\f4 ing control directives, and their uses, are: \par \par }\pard \qj\li720\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 EJECT\tab new page on printer\par \hich\af4\dbch\af4\loch\f4 ERROR\tab list/don't list errors\par \hich\af4\dbch\af4\loch\f4 EXPAND\tab expand DC directives\par \hich\af4\dbch\af4\loch\f4 LIST\tab list/don't list source\par \hich\af4\dbch\af4\loch\f4 PRINTER\tab turn printer on/off\par \hich\af4\dbch\af4\loch\f4 SYMBOL\tab list/don't list symbol tables\par \hich\af4\dbch\af4\loch\f4 TITLE\tab place title at top of each \hich\af4\dbch\af4\loch\f4 page\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621782}\hich\af4\dbch\af4\loch\f4 Positioning Code{\*\bkmkend _Toc497621782}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In the last section, we saw how to use the link editor to generate code that would run at various locations in memory.  That's fine if the code needs to be assembled to run at several different locations, but can get to be a bore if\hich\af4\dbch\af4\loch\f4  the code must always be assembled to the same place.  In that case, the ORG directive is more appropriate.  The operand of the ORG directive is a constant, which can, of course, be coded as a hexadecimal or decimal value, or even as an expression.  It sh\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 uld appear before the first START or DATA directive in the program.  For example, if you are writing a program that uses the high resolution graphics page, you should code\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {            ORG     $4000\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 right after the KEEP directive. \par \par \hich\af4\dbch\af4\loch\f4 The ORG directive can \hich\af4\dbch\af4\loch\f4 also be used before any subsequent subroutine to force it to start on a particular boundary.  This is not a recommended practice.  You can also use an ORG directive inside of a subroutine.  If you want to use one of these unusual features, see page 147 fo\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  a more complete description of the ORG directive.\par \par \hich\af4\dbch\af4\loch\f4 Looking much like an ORG directive, but with a very different purpose, is the OBJ directive.  Like ORG, OBJ requires a constant as its operand.  This directive is used when code must be located at one loc\hich\af4\dbch\af4\loch\f4 ation, but will be moved to another before it is executed.  For details, consult the reference manual.\par \par \hich\af4\dbch\af4\loch\f4 Especially when time critical code is being written, it is sometimes nice to be able to force a segment to start on a particular memory boundary, genera\hich\af4\dbch\af4\loch\f4 lly a page boundary.  (A page boundary occurs every 256 bytes.) To do that, include an ALIGN directive before the START directive for the segment. The operand for the ALIGN directive is a constant, and must be a power of two (1, 2, 4, 8, etc.).  The link \hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ditor will insert zeros until the appropriate boundary is reached.  The ALIGN directive can also be used inside of a segment, but in that case you must also have aligned the entire segment to a boundary equal to or larger than the boundary used inside the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 segment.  The assembler will then insert the proper number of zeros to get the boundary. \par \par \hich\af4\dbch\af4\loch\f4 The last directive used to position code is the MEM directive.  Its operand is a pair of constants separated by a comma.  The first constant must be less than or equ\hich\af4\dbch\af4\loch\f4 al to the second one, and the directive must be found before the linker puts code in the address referenced by the first constant.  Thus, the MEM directive, when used, should probably be in the very first segment.  It has the effect of reserving the memor\hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4 .  When the linker starts to link a subroutine, it first checks to see if the subroutine will enter into a reserved memory area.  If so, zeros are inserted until the reserved area has been passed.  The only real use for this directive is when you are writ\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng a graphics program that will start at $800.  In that case, a\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {            MEM     $2000,$4000\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 is appropriate to reserve the graphics page. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621783}\hich\af4\dbch\af4\loch\f4 Controlling DC Code{\*\bkmkend _Toc497621783}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The first directive that we will look at in this section actually affects more than just t\hich\af4\dbch\af4\loch\f4 he DC directive.  As you may know, the ASCII character set only uses the least significant seven bits of a byte.  The most significant bit is usually off, but in the case of the character screen display used by the Apple, is on.  Normally, ORCA produces c\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 aracters with the high bit off for character DC directives and character constants in an expression.  If you need characters with the high bit on, you can get them by coding\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {            MSB     ON\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Naturally, MSB OFF causes the high bit to be off. \par \par \hich\af4\dbch\af4\loch\f4 If yo\hich\af4\dbch\af4\loch\f4 u are using the DC directive to generate floating point constants, you may notice that they are not in the same format as is used by Applesoft.  If you need Applesoft format numbers, read up on the IEEE directive on page 143. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621784}\hich\af4\dbch\af4\loch\f4 The MERR Directive{\*\bkmkend _Toc497621784}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Errors f\hich\af4\dbch\af4\loch\f4 ound by ORCA have error levels.  Appendix A, which explains the error messages and what to do about them, also has a discussion of what the different error levels mean. \par \par \hich\af4\dbch\af4\loch\f4 If ORCA finds an error, it will normally not go on to link edit and execute a file; h\hich\af4\dbch\af4\loch\f4 owever, you may have a situation where the error is expected, and is in fact all right.  If that is the case, the MERR directive can be used to tell the system that it is all right to go on.  The operand is a constant that tells the system the highest err\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 r level that it should ignore.  Normally, of course, this is zero. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621785}\hich\af4\dbch\af4\loch\f4 Using the 65C02{\*\bkmkend _Toc497621785}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If you have an Apple //c, an upgraded Apple //e, or if you have changed the CPU in an older Apple, you have the 65C02 instruction set.  The ORCA assembler is quite capabl\hich\af4\dbch\af4\loch\f4 e of generating code for that chip, whether or not you actually have one.  The 65C02 directive has an operand of ON or OFF, defaulting to OFF.  If you code\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab 65C02\tab ON\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 you will enable the new instructions and addressing modes found in the 65C02.  Otherwis\hich\af4\dbch\af4\loch\f4 e, the assembler flags these as errors so that you know that your code is safe for a 6502 machine, even if yours happens to be a 65C02 machine. \par \par \hich\af4\dbch\af4\loch\f4 Note that there are, in fact, two versions of the 65C02.  The standard instruction set was augmented by Rockwe\hich\af4\dbch\af4\loch\f4 ll when they produced their version, to include extra thirty-two bit manipulation and bit test instructions.  These instructions are not in the standard instruction set of the 65C02, and do not appear on the 65816, so we recommend that you never use them,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 even if you have the Rockwell version of the 65C02.  They are not included in the assembler.  If you need them, they are provided as macros in the M6502.65C02 macro library.  The next chapter tells you how to use the macro libraries. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621786}\hich\af4\dbch\af4\loch\f4 Using the 65816 or 6\hich\af4\dbch\af4\loch\f4 5802{\*\bkmkend _Toc497621786}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A new sixteen bit version of the 6502 is now available.  In one package (the 65802) the chip can still only address 64K of memory, but it can be plugged right into your older Apple.  The instruction set is a superset of the 65C02 (which is in turn a \hich\af4\dbch\af4\loch\f4 superset of the 6502), so all of your old software will still work.  The other version uses the same instruction set, but can address 16 megabytes.  This is the version used in the Apple IIGS.  ORCA can assemble code for the new CPU.  To enable the new op\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 codes and addressing modes, type\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab 65816\tab ON\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Naturally, 65816 OFF disables the new features.  When off (the default mode) the assembler identifies all extensions as errors so that you can still generate code for the 6502 and be sure that you have not used\hich\af4\dbch\af4\loch\f4  the new features. \par \par \hich\af4\dbch\af4\loch\f4 In addition, it is necessary to be able to tell the assembler whether immediate addresses will be eight or sixteen bits.  The LONGA and LONGI directives are used to do this job.  If you plan to develop code for the 65816, read about th\hich\af4\dbch\af4\loch\f4 ese directives starting on page 144.\par \par \hich\af4\dbch\af4\loch\f4 Note that this version of ORCA contains a linker that generates binary executable files.  This file type can be executed from an Apple IIGS, but only from ProDOS 8.  If you are writing programs to run under ProDOS 16, \hich\af4\dbch\af4\loch\f4 you need the Apple IIGS version of ORCA.  Programs written using this version of ORCA can be assembled with the version for the Apple IIGS.\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 7: Using Macros}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621787}\hich\af4\dbch\af4\loch\f4 Chapter 7: Using Macros{\*\bkmkend _Toc497621787}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621788}\hich\af4\dbch\af4\loch\f4 Tools of the Trade{\*\bkmkend _Toc497621788}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The ORCA assembler comes with a large set of predefined macros.  This collection of macros is so large and complete that most people will probably never need to write a macro of their own.  In this chapter we will look at how you can use the macros in ORCA (or any other macro library) even if you never intend to write one of your own. \par \par Lets start by getting used to the the tools that we will use.  We will do this by writing a short program to read two four byte integers, do the basic four math operations on them, and quit.  To do this, we will use the macros in the following list.  Although it is not strictly necessary, you may want to stop and read about these macros in the reference manual before we go on. The page number that each is described on is in the third column, the name of the macro is in the first, and a short description of what it is used for is in the second column.\par \par }\pard \qj\li720\widctlpar\tx1800\tx5220\adjustright {GET4\tab read a four byte integer\tab 199\par PUT4\tab write a four byte integer\tab 211\par PUTS\tab write a string\tab 211\par PUTCR\tab write a carriage return\tab 213\par ADD4\tab add two four byte integers\tab 183\par SUB4\tab subtract two four byte integers\tab 191\par MUL4\tab multiply two four byte integers\tab 187\par DIV4\tab divide two four byte integers\tab 185\par }\pard \qj\widctlpar\adjustright {\par Let's just dive right in, and write the program.  After it is up and running, we will do some things to explore what is really going on.  Enter the following program, exactly as it appears, and save it as C4.  Don't try to assemble it right away! \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab KEEP\tab CALC4\par \tab \tab MCOPY\tab C4.MACROS\par \tab **********************************************\par \tab *\par \tab *  Four Byte Integer Calculator\par \tab *\par \tab **********************************************\par \tab *\par \tab C4\tab START\par \tab ;\par \tab ;  Read the two input numbers.\par \tab ;\par \tab \tab PUTCR   \par \tab \tab PUTS\tab #'First number:  '\par \tab \tab GET4\tab NUM1,CR=T\par \tab \tab PUTS\tab #'Second number: '\par \tab \tab GET4\tab NUM2,CR=T\par \tab \tab PUTCR\par \tab ;\par \tab ;  Do the calculations and print the results.\par \tab ;\par \tab \tab ADD4\tab NUM1,NUM2,NUM3\tab addition\par \tab \tab PUTS\tab #'Sum:  '\par \tab \tab PUT4\tab NUM3,#1,CR=T\par   \par \tab \tab SUB4\tab NUM1,NUM2,NUM3\tab subtraction\par \tab \tab PUTS\tab #'Difference:  '\par \tab \tab PUT4\tab NUM3,#1,CR=T\par   \par \tab \tab MUL4\tab NUM1,NUM2,NUM3\tab multiplication\par \tab \tab PUTS\tab #'Product:  '\par \tab \tab PUT4\tab NUM3,#1,CR=T\par   \par \tab \tab DIV4\tab NUM1,NUM2,NUM3\tab division\par \tab \tab PUTS\tab #'Ratio:  '\par \tab \tab PUT4\tab NUM3,#1,CR=T\par \tab \tab PUTCR\par \tab \tab RTS\par   \par \tab NUM1\tab DS\tab 4 \par \tab NUM2\tab DS\tab 4 \par \tab NUM3\tab DS\tab 4\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The first thing that you will probably notice is that there aren't many familiar instructions.  In fact, only one assembly language instruction appears in the entire program.  All of the other lines of code are macro calls.  Like all other statements, macros have a label field, op code field, and operand.  We didn't happen to use the label field, but it works just like the label field of any other statement.  Macro operands vary a great deal.  Later, we will look at the macro reference manual and see how to tell from it what the operand format is. \par \par If you ignored the earlier warning and tried to assemble this program, you got a file not found error.  That's because of the MCOPY directive.  The MCOPY directive tells the assembler where to go to look for macros.  Since we haven't created the file yet, you get an error. \par \par It is possible to tell the assembler to use the macro libraries that come with ORCA directly, but that is very inefficient.  It takes a long time to switch between macro library files, and the macros we need are in two different library files, M6502.I.0 and M6502.INT4MATH.  Instead, we will build a macro library file just for this program which has only those macros that we actually need.  To do that, we will use a utility called MACGEN.  To run it, type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab MACGEN C4\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par where C4 is the name of the program you just typed in.  (If you called it something else, use that name instead.) MACGEN will start out by scanning your program and building a table of all of the macros that you need. Each time it finds a new macro, it prints a dot.  Once it has scanned your entire program, it will print a list of the macros that you need and ask for an output file name.  You should respond with C4.MACROS, the same name that was used in the MCOPY directive.  Next, you will be asked for the name of a macro library to search.  The easiest thing to do (but not the fastest) is to use the fact that the program supports wildcards and give it the name of the macro library disk.  If you are using the system the way it was shipped to you, you would type /MACROS/=.  After a bit of whirring, you will have a macro file. \par \par Now you can run the program.  You will notice that it takes a while to assemble the program, even though it's fairly short.  The reason is easiest to see at the end of the assembly: the lines generated message tells you how many lines the assembler created while expanding the macros.  Also, note all of the extra subroutines that the link editor finds.  These all come from the subroutine libraries.  If you have ever looked at what it takes to do these math operations and input and output in software, you can appreciate the work that you don't need to do!  Take a moment to play with the program.  You can enter some fairly large integers!  If they aren't large enough for you, you might want to convert the program to use eight byte integers by changing all of the 4 characters in the macro names to 8 and enlarging the DS areas to 8 bytes each. \par \par Well, that's your first program that uses macros.  Some minor points should be mentioned.  First, a macro file can be as large as your disk. If for some reason you need to use more than one macro library at a time, you certainly can - up to four can be used, and the MDROP directive lets you get rid of those you don't need anymore.  Multiple macro libraries for a single program are not, however, recommended.  To find out more, read about MDROP, MLOAD and MCOPY starting on page 145. \par \par You can look at the code generated by the macros by using the GEN directive at the top of your program.  If you do that, you might also want to use the -C flag on MACGEN.  Normally, there is no reason to expand the macros, so we won't cover it in detail here.  See page 80 for a full description of MACGEN, and page 143 for a description of the GEN directive. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621789}\hich\af4\dbch\af4\loch\f4 The Macro Library{\*\bkmkend _Toc497621789}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There are really three reference sections in this manual.  The first two cover the operating system, utilities and assembler, and you have probably already used them.  The last is the macro reference manual.  It starts on page 175, and covers the operand and data formats, as well as the macros used to manipulate the data. It is divided into five major sections:  Input and Output, ProDOS, Mathematics, Graphics and Miscellaneous. \par \par As you learn the macros, you should think of them as a new, larger instruction set.  Keep in mind that it took you some time to learn the instruction set of the 6502, and it will also take time to learn about the macros in the macro library.  Start by reading the introductory material about addressing modes and data formats, then scan the reference manual to look for macros that fit your needs. \par \par If you need a macro that you suspect exists, or if you have forgotten the name of a macro, you will find a list of them on the reference card. After you have the name, you can get a page number from the index and read up on the macro in the reference manual. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621790}\hich\af4\dbch\af4\loch\f4 Keyword Parameters{\*\bkmkend _Toc497621790}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In the example program that we wrote earlier, we used two kinds of parameters in the operands of the macros.  The most common kind is the positional parameter, which works like the operand of assembly language instructions and assembler directives.  If you look in the reference manual, each macro descriptions starts with an example of the macro.  The number of parameters that are allowed can be found by counting the number of parameters in the example.  Note that not all allowed parameters are actually required.  The description of the ADD4 macro, for example, points out that the third parameter is optional.  If you code\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab ADD4\tab NUM1,NUM2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par the two numbers are added and the result saved at NUM1. \par \par Occasionally, it is easier to remember the name of a parameter than it is to remember its position.  That is when keyword parameters come in.  The example macro serves a double purpose:  in addition to telling you what position the parameters are in, the names used also indicate the keyword that is associated with each parameter.  Keyword parameters are specified as the parameter's keyword followed by an equal character and the string to set the parameter to.  In our sample program, we used a keyword parameter on the PUT4 macro.  If you check the reference manual, you will find out that if you assign anything to the CR parameter, the macro will output a carriage return after writing the integer.  Rather than remember what the position of the CR parameter is, we coded a CR=T in the operand. \par \par So how do you tell the difference between a keyword parameter and a positional parameter?  Actually, you don't.  Any parameter can be set using either position or a keyword, so you can use whichever method you wish.  In fact, as you can see from the PUT4 macro, you can even use positional and keyword parameters together.  Keep in mind, though, that keyword parameters take up a space.  Coding\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab PUT4\tab NUM1,CR=T,#4\tab \tab Wrong\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would not right justify the number in a four byte field, since the format value must be the second parameter.  The proper way to code the macro would be\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab PUT4\tab NUM1,#4,CR=T\tab \tab Right\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 8: Writing Macros}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621791}\hich\af4\dbch\af4\loch\f4 Chapter 8: Writing M\hich\af4\dbch\af4\loch\f4 acros{\*\bkmkend _Toc497621791}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par As was pointed out in the last chapter, you do not need to be able to write a macro in order to use them, and in fact, since so many are provided, many people will never need to know how to write a macro of their own.  For that reason, you are urged not to try until you are fairly familiar with the system as a whole. \par \par But of course you're curious, and want to give it a try anyway.  Well, have fun!  This chapter is a tutorial on writing macros.  The first step in successfully writing macros is to get a perspective on the task.  To write macros, you will need to learn a new programming language.  This is a fairly unusual language, since it is used to program the assembler itself. \par \par Like other programming languages, the one you are about to learn has variables, which are called symbolic parameters.  There are three data types:  arithmetic variables, boolean variables, and string variables.  You can define arrays of variables, pass parameters, do operations on the variables, and assign the results of those operations to the variables. The input to this language takes the form of source statements in the assembly language program.  The ultimate output is also in the form of source statements to the assembler. \par \par So, that's what this chapter is all about.  We will start by learning how to define a subroutine in our new language. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621792}\hich\af4\dbch\af4\loch\f4 MCOPY, MACRO and MEND{\*\bkmkend _Toc497621792}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Of course, you remember right away that in the last chapter we said that macros are not subroutines, right?  Well they aren't, at least not in the sense of a subroutine in your program.  But a macro does in fact serve the same purpose in the conditional assembly language as subroutines in a program do.  We define a named sequence of instructions which accepts parameters, and use this named sequence of instructions in our program. The output from the macro is a set of assembly language source statements, which the assembler then assembles, adding code to our program. \par \par Each macro definition has a MACRO directive as the first statement.  The macro directive serves the same purpose as the START directive does for a code segment: it marks the beginning of a new macro, just as START marks the beginning of a new segment.  The last line of every macro is an MEND directive, which marks the end of the macro.  Neither of these directives needs an operand, and neither can make any use of a label. \par \par The line right after the MACRO directive describes the parameters of the macro to the assembler.  It is called the macro model line.  The op code on that line is the name of the macro, and is the same name that is coded in the program to invoke a macro.  This line is required, and must be the line immediately after the macro directive.  Leaving a blank line between them, for example, would cause the macro to not work correctly. \par \par Finally, the lines between the macro model line and the MEND directive are called macro model statements.  These lines are the ones that are sent to the assembler when you use the macro in your program. \par \par Lets stop for a minute - there were a lot of new terms in the last few paragraphs.  To firm up those ideas, let's write a very simple macro.  The Apple Reference Manual lists a series of entry points into the F8 ROM which can be used to perform special functions.  One of these, called PRBYTE, prints the contents of the accumulator on the screen.  It is located at $FDDA.  Of course, you remembered that, right?  Well, I didn't.  But I did remember that it was called PRBYTE, so I can define a macro to do the JSR and forget about the number.  The resulting macro produces a single source line, a JSR to $FDDA.  It is shown below. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab \tab PRBYTE\par \tab \tab JSR\tab $FDDA\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par We enter this macro into the editor, just like we would enter a program. Afterwards, you can save it in a file called TEST.MACROS, and then type the following program into a new file. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab KEEP\tab TESTIT\par \tab \tab MCOPY\tab TEST.MACROS\par \tab TEST\tab START\par   \par \tab \tab LDX\tab #0\par \tab LB1\tab LDA\tab 0,X\par \tab \tab PRBYTE\par \tab \tab INX\par \tab \tab BNE\tab LB1\par \tab \tab RTS\par \tab \tab END \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When you run this program, it will print the contents of zero page onto the screen.  Note that the hexadecimal value $FDDA doesn't show up anywhere in the program we wrote - the assembler pulls in the JSR instruction from a separate macro file. \par \par All right, we admit that you could do this with an equate.  You could even write a lot of equates and put them into a file that can be copied into your program.  But our macros will get much more capable! \par \par There are two directives that we will not look at here which are also a part of the macro language.  MEXIT allows early exit from a macro.  It is discussed on page 171.  MNOTE is used to generate error messages in a macro, and can be found on page 171. \par \par }\pard\plain \s2\keep\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621793}\hich\af4\dbch\af4\loch\f4 Basic Parameter Passing{\*\bkmkend _Toc497621793}\par }\pard\plain \qj\keep\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In the last section, we found out how to write a macro that would do a simple substitution of code.  Now, we will look at a way to cause one macro to generate different code when it is used in two different places. To do this, we need to learn how to pass parameters to macros. \par }\pard \qj\widctlpar\adjustright {\par The first line of the macro, like most lines, has a label field and an operand field.  In the last section, we didn't put anything there.  In fact, we can't put the normal kinds of things in those fields.  Instead, the label field of the statement must contain a symbolic parameter, if it has any thing at all, and the operand field field can only contain symbolic parameters, separated by commas.  Symbolic parameters are the variables of the conditional assembly language.  They start with an &, and are followed by a label.  Symbolic parameters defined by passing a parameter to a macro are always string variables.  The string they contain is the string that was coded in the macro call.  Once defined, a symbolic parameter can be used anywhere in an assembly language statement.  The assembler always starts by replacing any symbolic parameters with the equivalent string of characters. \par \par As an example, we will write a simple macro to add two two byte integers. We will pass three parameters, each of which is the name of a label where a two byte integer can be stored.  The macro will add the contents of the first two locations and place the result in the third.  We will also define a label, and place it on the CLC instruction.  The macro looks like this: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab &LAB\tab ADD\tab &NUM1,&NUM2,&NUM3\par \tab &LAB\tab CLC\par \tab \tab LDA\tab &NUM1\par \tab \tab ADC\tab &NUM2\par \tab \tab STA\tab &NUM3\par \tab \tab LDA\tab &NUM1+1\par \tab \tab ADC\tab &NUM2+1\par \tab \tab STA\tab &NUM3+1\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This macro is a little more complicated than our first, and you may want to see just what it really produces.  That is, in fact, a good idea. After writing any new macro, you should expand it several different ways and look at the source lines it produces.  Normally, the assembler doesn't put the lines generated by a macro in the listing, but you can force it to by placing a GEN ON directive in the program.  If the above macro is in a file called TEST.MACROS, then the following program will show you what happens. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MCOPY\tab TEST.MACROS\par \tab \tab GEN\tab ON\par \tab TEST\tab START\par   \par \tab \tab ADD\tab I,J,K\par \tab LB1\tab ADD\tab K,J,I\par   \par \tab I\tab DS\tab 2\par \tab J\tab DS\tab 2\par \tab K\tab DS\tab 2\par \tab \tab END\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There is no need to link or execute the program, since all we want to do is look at the lines produced by the macro.  If you don't try to link the program, you really don't even need the definitions of I, J and K.  Pay special attention to what happens to the label, LB1.  In fact, take a moment to change the macro, placing the &LAB parameter on the last ADC, instead of on the CLC, and see what happens.  Using a label on a macro does not define the label.  It only gets defined if the macro places the label on a statement that it produces. \par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621794}\hich\af4\dbch\af4\loch\f4 Defining Symbolic Parameters{\*\bkmkend _Toc497621794}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The next four sections introduce the instruction set of the conditional assembly language.  Although we will look at some examples of individual statements, we will have to put off until later a really meaningful example, since some parts of all of the next few sections are needed. \par \par When we defined the ADD macro in the last section, we also managed to define four symbolic parameters at the same time.  In this section, we will look at a more direct way of defining a symbolic parameter.  Six directives come to our aid.  Let's start by defining a string (or character) type symbolic parameter.  The op code is LCLC, or local character, and the operand is the name of the symbolic parameter we want to define.  There is usually no label. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LCLC\tab &STRING\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par After the assembler encounters this line, the symbolic parameter &STRING is defined.  It also has an initial value, the null string (a string with no characters).  Strings have a length as well as a value, and at this point the length of &STRING is zero.  A string variable can hold up to 255 characters. \par \par To define an arithmetic symbolic parameter called &NUM and a boolean symbolic parameter called &LOGIC, we would use\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LCLA\tab &NUM\par \tab \tab LCLB\tab &LOGIC\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Both are initialized to zero.  Arithmetic symbolic parameters can contain any four byte signed integer value, while boolean symbolic parameters can take on any value from 0 to 255.  When used in a logical expression, zero is treated as false, and any other value as true. \par \par The symbolic parameters defined so far are all local symbolic parameters. If defined in the program itself, they go away when the END directive is encountered.  If used in a macro, they vanish when the MEND directive is found.  Note, however, that if a macro contains a macro call, the symbolic parameter stays around for the second macro.  For example, the following code will work (although it is meaningless): \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab \tab MAIN\par \tab \tab LCLA\tab &NUM\par \tab \tab NEWMAC\par \tab \tab STA\tab &NUM\par \tab \tab MEND\par   \par \tab \tab MACRO\par \tab \tab NEWMAC\par \tab \tab LDA\tab &NUM\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Macros defined by the first line of the macro are also local. \par \par There is another way to define a symbolic parameter so that it is global. The following lines redefine the three symbolic parameters as global ones. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab GBLA\tab &NUM\par \tab \tab GBLB\tab &LOGIC\par \tab \tab GBLC\tab &STRING\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Global symbolic parameters still vanish at the end of a segment, when the END directive is encountered, but they do not go away when a macro expansion has finished.  This fact lets you create macros that pass information to one another by defining global symbolic parameters and assigning values to them. \par \par Symbolic parameters, as we said, can be subscripted.  To define an array of symbolic parameters, place the maximum size of the array after the name of the symbolic parameter, in parentheses.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LCLC\tab &STRINGS(10)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par defines an array of ten strings.  Using &STRING(4) in a statement would cause the fourth string in the array to be used.  The number of array elements that can be declared varies with the type of the symbolic parameter.  See the reference section for details. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621795}\hich\af4\dbch\af4\loch\f4 Changing and Using Symbolic Parameters{\*\bkmkend _Toc497621795}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The values of symbolic parameters are changed using set symbols.  The set symbol is a directive that is logically equivalent to the assignment operator in most languages, but unlike most languages, the operator itself is typed. This means that the directive used to assign a value to an arithmetic symbolic parameter is different from the one used to assign a string to a character symbolic parameter.  The set symbol directives are SETA, SETB and SETC.  All three directives must have a symbolic parameter in the label field, and it is that symbolic parameter that is changed. \par \par The SETA and SETB directives both use a constant expression in the operand field.  The operand is evaluated to give a fixed integer result.  In the case of the SETA directive, the result is assigned directly to the arithmetic symbolic parameter, while in the case of the SETB directive, the result is first taken mod 256, yielding a result between 0 and 255. Generally, logical expressions are used in the operand of a SETB directive, such as CONST<=0.  Logical expressions always produce a result of zero or one, which correspond to false and true, respectively. \par \par The operand of a SETC directive is a string.  It must be enclosed in quote marks if the string contains spaces, starts with a quote mark, or is a string operation.  Two strings can be concatenated by the SETC directive: to do that, simply separate them with a + character. \par \par Some examples of set symbols are shown below. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab &NUM\tab SETA\tab CONST-CONST/65536*65536\par \tab &NUM\tab SETA\tab &NUM-1\par \tab &LOGIC\tab SETB\tab &NUM>0\par \tab &LOGIC\tab SETB\tab 1\par \tab &STRING\tab SETC\tab &STRING+&NUM\par \tab &STRING\tab SETC\tab 10.5\par \tab &STRING\tab SETC\tab 'Here''s a quoted string'\par \tab &ARR(4)\tab SETA\tab 16\par \tab &ARR(&NUM) SETA &ARR(4)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The examples above also point out how array elements are set and used, as well as the fact that a symbolic parameter can be used to specify an array subscript.  There is one more fine point about symbolic parameters that we should point out, and that is the use of the dot operator.  If a symbolic parameter is followed immediately by a dot, the dot is removed from the line during expansion of the symbolic parameter.  To see why this is useful, let's look at a somewhat contrived example.  Let's assume that in a macro you will be doing an operation on the X register, but that you do not know if it will be a load or store.  The first two characters of the operand are contained in the symbolic parameter &OP.  Then the dot operator is used to indicate that the X is not a part of the symbolic parameter name.  If &OP contains the characters LD, then the following line creates a LDX operation. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab &OP.X\tab ADDR\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Unfortunately, the dot operator is encountered far more often in logical expressions.  The expression &LOGIC.AND.&LOGIC2 gives a syntax error:  it must be coded as &LOGIC..AND.&LOGIC2. \par \par If you have tried any of the above directives in a test program, you may have noticed that they weren't printed.  That is because once a macro is developed, it is rare to want to see all of the conditional assembly line that go into generating the code.  If you need to look at those lines, you should make use of the TRACE directive, described on page 150. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621796}\hich\af4\dbch\af4\loch\f4 String Manipulation{\*\bkmkend _Toc497621796}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Two directives greatly increase your ability to work on strings.  These are the ASEARCH directive, which lets you search one string for occurrences of another, an AMID, which allows selection of a small number of characters from a string. \par \par The ASEARCH directive has three operand fields separated by commas.  The first is the string that you want to search, the second is the string to search for, and the last is the position in the string to begin the search.  The result is a number, so the label field must contain an arithmetic symbolic parameter.  It is set to the position in the string where the search string was found, or zero if it wasn't found.  The comment fields in the following examples tell what values would be assigned. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab &NUM\tab ASEARCH 'TARGET STRING',RG,1\tab 3\par \tab &NUM\tab ASEARCH 'TARGET STRING',R,1\tab \tab 3\par \tab &NUM\tab ASEARCH 'TARGET STRING',R,4\tab \tab 10\par \tab &NUM\tab ASEARCH 'TARGET STRING',Z,1\tab \tab 0\par \tab &NUM\tab ASEARCH 'TARGET STRING',R,11\tab 0\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The AMID directive also takes three operands, separated by commas.  The first is the string, the second is the first character to select, and the third is the number of characters to select.  It is legal to ask for characters that are outside of the range of the string, in which case a character is not returned.  The label field of the directive must contain a character type symbolic parameter.  The examples below show the resulting string in the comment field. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab &STRING AMID\tab 'TARGET STRING',2,3\tab     ARG\par \tab &STRING AMID\tab 'TARGET STRING',12,3\tab     NG\par \tab &STRING AMID\tab 'TARGET STRING',20,3\tab     null string\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There is one more directive that can set the value of a symbolic parameter.  It is called AINPUT, and it lets the assembler get a response from the keyboard.  It is discussed on page 165. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621797}\hich\af4\dbch\af4\loch\f4 Conditional Assembly Branches{\*\bkmkend _Toc497621797}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Perhaps the most important capability in the conditional assembly language is the ability to branch, thus skipping code, or looping over it several times. To use a branch, we must first have something to branch to. Conditional assembly labels take the form of a period in column one, followed by a label.  These statements are called sequence symbols, and are treated as comments unless the assembler is looking for a place to branch to. \par \par There are two branching directives.  The first is called AGO.  Its operand is a sequence symbol.  It is an unconditional branch.  You might try assembling a short test program with the following code to convince yourself that it works. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab AGO\tab .THERE\par \tab ;This comment will not be in the final program\par }\pard \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx2880\adjustright {\tab \tab LDA\tab #4\tab ...and neither will this LDA\par }\pard \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright {\tab .THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The other branch is a conditional branch, similar in function to the BASIC construct, IF condition THEN GOTO label.  The operand is a logical expression followed by a comma and a sequence symbol.  If the expression evaluates to 0, it is false, and if it evaluates to 1 it is true.  Both of the following code fragments produce the same result, four ASL A instructions.  Again, you should try them out in a short sample program. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LCLA\tab &N\par \tab &N\tab SETA\tab 4\par \tab .TOP\par \tab \tab ASL\tab A\par \tab &N\tab SETA\tab &N-1\par \tab \tab AIF\tab &N>0,.TOP\par \par \tab &N\tab SETA\tab 4\par \tab .TOP2\par \tab \tab ASL\tab A\par \tab &N\tab SETA\tab &N-1\par \tab \tab AIF\tab &N,.TOP2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There are some tricks and another directive that we won't go into here. The ACTR directive lets you bypass the built in protection against infinite loops, and is described on page 163.  Efficiency considerations for writing faster branching code are discussed on page 164. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621798}\hich\af4\dbch\af4\loch\f4 Attributes{\*\bkmkend _Toc497621798}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Occasionally, it is nice to know more about a label or symbolic parameter than what it's value is.  That is where attributes come in.  Attributes give you a way of asking questions about the label or symbolic parameter. They take the form of a letter, a colon, and the name of a label or symbolic parameter.  Attributes are used like functions, being mixed into an expression as if they were an integer constant. \par \par The first attribute that we will look at is the count attribute.  It is used to tell if a label or symbolic parameter has been defined, and if so, how many subscripts are available.  The count attribute of an undefined label or symbolic parameter is zero.  The count attribute of a defined label, or a defined symbolic parameter that is not subscripted, is one. The count attribute of a subscripted symbolic parameter is the number of subscripts available.  The count attribute is used in the following loop to initialize a numeric array for a symbolic parameter that may or may not be defined. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LCLA\tab &N\par \tab &N\tab SETA\tab C:&ARRAY\par \tab \tab AIF\tab &N=0,.PAST\par   \tab .TOP      \par \tab &ARRAY(&N) SETA &N\par \tab &N\tab SETA\tab &N-1\par \tab \tab AIF\tab &N,.TOP\par \tab .PAST\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par It may seem like poor programming is the only case where you would not know if a symbolic parameter had not been defined, but there are in fact two very common uses for the count attribute.  The first is when a macro will define a global symbolic parameter to communicate with any future versions of itself.  In that case, the macro can test to make sure the parameter has not been defined already.  The following macro uses this fact to define a sequence of integers.  You don't need to count the macros, just put in a handful - they count themselves. \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par \tab \tab MACRO\par \tab &LAB\tab COUNT\par \tab \tab AIF\tab C:&N>0,.PAST\par \tab \tab GBLA\tab &N\par   \tab .PAST\par \tab &N\tab SETA\tab &N+1\par \tab &LAB\tab DC\tab I'&N'\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The second use is to check and make sure a parameter was passed.  We could modify our original ADD macro so that if the last parameter were omitted, the result could be stored in the first location.  This makes use of the fact that the assembler doesn't define an operand unless the macro call statement uses it.  The new macro would look like this: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab &LAB\tab ADD\tab &NUM1,&NUM2,&NUM3\par \tab \tab AIF\tab C:&NUM3,.PAST\par \tab \tab LCLC\tab &NUM3\par \tab &NUM3\tab SETC\tab &NUM1\par \tab .PAST\par \tab &LAB\tab CLC\par \tab \tab LDA\tab &NUM1\par \tab \tab ADC\tab &NUM2\par \tab \tab STA\tab &NUM3\par \tab \tab LDA\tab &NUM1+1\par \tab \tab ADC\tab &NUM2+1\par \tab \tab STA\tab &NUM3+1\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par It is even possible to subscript a symbolic parameter from a macro call. For a full discussion of that topic, see page 158. \par \par The next symbolic parameter is the L, or length, attribute.  The length attribute of a label is the number of bytes created by the line where the label was defined.  This makes counting characters very easy!  The DW macro from the macro library takes a string and precedes it by a one byte integer containing the number of characters in the string.  It is a very simple macro: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab &LAB\tab DW\tab &STR   \par \tab &LAB\tab DC\tab I1'L:SYSA&SYSCNT'\par \tab SYSA&SYSCNT DC C'&STR'\par }{\f4 \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par It also demonstrates the use of the &SYSCNT symbolic parameter.  This symbolic parameter is predefined by the system, and is incremented once at the beginning of each macro expansion.  It is what prevents two occurrences of the DW macro in the same code segment from creating a duplicate label.  You should try the above macro in a short sample program to see how this works. \par \par The length attribute of an arithmetic symbolic parameter is four.  The length of a boolean symbolic parameter is one.  The length of a string symbolic parameter is the number of characters in the string. \par \par There are two more attributes that we will not discuss here, since the are rarely used.  The type, or T attribute, is used to tell what kind of statement generated a label.  The S, or settings attribute, is used to detect the current setting of the assembler flags.  See page 161 for a discussion of these attributes. \par \par This concludes the tutorial of the conditional assembly language.  Like all languages, it will seem strange until you have used it for a while. Practice is the only way to overcome that difficulty.  If you would like to see some example of how the conditional assembly language is used, look at any of the macros in the macro library. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 9: Writing Shell Programs}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621799}\hich\af4\dbch\af4\loch\f4 Chapter 9: Writing Shell Programs{\*\bkmkend _Toc497621799}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par In this chapter, we will take a look at how to write a program that runs under the ORCA shell.  What environment your program will run under is really up to you.  There are three common choices: system programs, which execute directly from ProDOS when the computer is turned on; programs that are executed from BASIC.SYSTEM; and programs that are executed from the ORCA shell.\par \par If you are writing a system program, then none of this affects you.  This chapter points out the differences between programs designed to run under BASIC.SYSTEM and those that run under the shell.  Many programs can actually be written which will run under either environment.  When writing your program, the things that you will need to consider are: what memory is available, how input will be received, and if it runs under the ORCA shell, whether the program should be installed as a utility.  The sections in this chapter deal with those issues.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621800}\hich\af4\dbch\af4\loch\f4 Memory Map{\*\bkmkend _Toc497621800}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The memory map for the shell is actually quite simple.  Since the editor, assembler and linker are loaded from disk when needed, they are not in memory when your program is running.  The only memory used is from $800 to $1FFF, where the ORCA/HOST overlay processor and device drivers are located.  If you are using a non-standard clock card driver, ORCA.SYSTEM installed it in page 3 during the boot process, so you should not disturb that area.  Finally, zero page locations $FA to $FF are used by the system for entry pointers, and must not be disturbed.\par \par If you make a call to the shell from your program, certain other zero page locations may be changed.  These are $80 to $F9.  While these may be used during the call, ORCA/HOST does not depend on the values between calls.  Thus, you can use this area for temporary variables safely.\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw237\pich301\picwgoal4740\pichgoal6020\macpict\bliptag1499200128\blipupi72{\*\blipuid 595bfa8098248c2acce0537e741fed87}0720ffffffff012c00ec001102ff0c00ffffffffffff0000ffff000000ec0000012c00000000000000a00082001e0001000affffffff012c00ec002200050024003600220005002436000022003b0024360000220005005a003600220029006c360000220029006c0012002336000022002900a2001200220125002436000022004d002436000022011c0024360000220101002436000009f0f0f0f00f0f0f0f002200dd00243600002200b9002436000009ffffffffffffffff0020004d0024012500240020004d005a0125005a00a10096000c0100000002000000000000000001000a0090002d009b0042002c000c00150948656c76657469636100030015000d0009002e00040000ff000010012d00ed012d00ed002b2e9804667265650000a0009700a10096000c0100000002000000000000000001000a00c6002d00d1004d00150070002a3607686972657320320000a0009700a10096000c0100000002000000000000000001000a00ea002d00f5004d00150100002a2407686972657320310000a0009700a10096000c0100000002000000000000000001000a010e002d0119004b00150190002a24044f52434100a0009700a10096000c0100000002000000000000000001000a001b002d002600530015011000280023002e0650726f444f530000a0009700a10096000c0100000002000000000000000001000a002d00750038009b00158180002b48120650726f444f530000a0009700a10096000c0100000002000000000000000001000a005a0087006500ad001501f0002b122d0650726f444f530000a000970001000affffffff012c00ec0071001e0057005b005c00670057005b0057006700590066005c00660057005b002200590066220700a10096000c0100000002000000000000000001000a00630087006e00bf002a090b28424630302d42464646290000a0009700a10096000c0100000002000000000000000001000a003600000041001a00157cb00028003e000104443030300000a0009700a10096000c0100000002000000000000000001000a00000000000b00190015fe7000280008000104464646460000a0009700a10096000c0100000002000000000000000001000a004800000053001a0015fbf0002a48044330303000a0009700a10096000c0100000002000000000000000001000a006c00000077001a00157db0002a24044130303000a0009700a10096000c0100000002000000000000000001000a00900000009b0019001580e0002a24043830303000a0009700a10096000c0100000002000000000000000001000a00b4000000bf001900158420002a24043630303000a0009700a10096000c0100000002000000000000000001000a00fc00000107001900158760002a48043230303000a0009700a10096000c0100000002000000000000000001000a00d8000000e3001900158aa0002800e0000104343030300000a0009700a10096000c0100000002000000000000000001000a01200000012b001900158de0002a48043030303000a0009700a10096000c0100000002000000000000000001000a00240000002f001a001591200028002c000104453030300000a000970001000affffffff012c00ec0020009500b4012500b40022009500b436000022012500b436000020009500ea012500ea0022011300b436000022010100b43600002200ef00b43600002200dd00b4360000a10096000c0100000002000000000000000001000a00b400bd00ca00de002bbd9005746578740d00150110002a0b0673637265656e00a0009700a10096000c0100000002000000000000000001000a00e100bd00ec00de00150230002a2207647269766572730000a0009700a10096000c0100000002000000000000000001000a00f300bd00fe00ea00150080002a120b6c696e65206275666665720000a0009700a10096000c0100000002000000000000000001000a010500bd011000d900158240002a1205737461636b0000a0009700a10096000c0100000002000000000000000001000a011700bd012200ea00158330002a12097a65726f20706167650000a0009700a10096000c0100000002000000000000000001000a00900090009b00a9001586e000280098009104303830300000a0009700a10096000c0100000002000000000000000001000a00d8009000e300a900158a20002a48043034303000a0009700a10096000c0100000002000000000000000001000a00ea009000f500a900158d60002a12043033303000a0009700a10096000c0100000002000000000000000001000a00fc0090010700a9001590a0002a12043032303000a0009700a10096000c0100000002000000000000000001000a010e0090011900a9001593e0002a12043031303000a0009700a10096000c0100000002000000000000000001000a01200090012b00a900159720002a12043030303000a000970001000affffffff012c00ec002201130063488b002201250063240000a0008300ff}}{\par \par }\pard \qj\widctlpar\adjustright {The result of this memory usage is that programs designed to run under ORCA, like ProDOS system programs, will normally start at $2000.  Certain graphics applications might start at $4000 or $6000 to avoid the graphics pages.  Your program can use the memory from $2000 through $BEFF.  The area from $BF00 to $BFFF is used by ProDOS.\par \par When using zero page, be sure and take into account the memory used by the F8 ROM, ProDOS, and if you are using calls into it, the BASIC interpreter.  See the Apple // reference manual and the ProDOS reference manual for exact locations and uses.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621801}\hich\af4\dbch\af4\loch\f4 Reserving Memory{\*\bkmkend _Toc497621801}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Knowing what memory is available is only part of the story.  The other part is claiming it so that ProDOS and ORCA/HOST do not use it.  This is where the ORCA shell and BASIC.SYSTEM differ the most.  Under BASIC, when your program executes, all of the memory is marked as available.  Your program must then reserve the memory that it occupies to keep itself safe.  When your program executes from ORCA, just the opposite happens.  ORCA reserves the memory where your program is located.  Since ProDOS expects that memory that it will write to is free, you must deallocate memory within your program if you want to read to it.  The RELEASE macro can be used to do this.  When you want to reserve it, or to find a piece of memory of a particular size, use the RESERVE and FINDBUFF macros.\par \par If you are unfamiliar with the way memory is handled under ProDOS, refer to the ProDOS technical reference manual.  For more information on the macros mentioned above, see the reference sections on the macros.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621802}\hich\af4\dbch\af4\loch\f4 The Console Driver{\*\bkmkend _Toc497621802}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par BASIC.SYSTEM used a simplified console driver that is limited to writing ASCII characters (with the high bit set).  Like Apple Pascal, ORCA uses a more sophisticated console driver.  It is capable of clearing the screen and homing the cursor when a form feed character is written, of positioning the cursor, and so on.  The functions available are accessed using macros.  The important point to realize is that if you do anything but write text to the screen, your program cannot work from both ORCA and BASIC.SYSTEM.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621803}\hich\af4\dbch\af4\loch\f4 Passing the Command Line{\*\bkmkend _Toc497621803}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par One of the advantages to writing a program that executes under ORCA is that the program can read the command line to find out what the inputs are.  Doing so is a key element in making a program run smoothly in the ORCA environment.  It also happens to be easy.\par \par Before ORCA executes your program, it takes the command line and stores it in an internal buffer.  The command name and leading blanks are removed, along with I/O redirection commands.  (I/O redirection is handled automatically.  Your program does not need to do anything special to make it happen.)  Right before calling your program, the address of the command line is placed in zero page locations $2 and $3.  The string is a sequence of ASCII characters ending with a return character.\par \par The program below illustrates these concepts.  It is called ECHO.  What it does is to write the characters following the command name to standard out.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3420\adjustright \f6\fs18\cgrid {\tab \tab KEEP\tab ECHO\par \tab **************************************************\par \tab *\par \tab *  ECHO - Echo the command line\par \tab *\par \tab **************************************************\par \tab *\par \tab ECHO\tab START\par \tab RETURN\tab EQU\tab $0D\tab RETURN key code\par \tab LINE\tab EQU\tab 2\tab addr of the line pointer\par \par \tab \tab LDY\tab #0\par \tab LB1\tab LDA\tab (LINE),Y\par \tab \tab JSR\tab COUT\par \tab \tab INY\par \tab \tab CMP\tab #RETURN\par \tab \tab BNE\tab LB1\par \tab \tab RTS\par \par \tab COUT\tab JMP\tab ($36)\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621804}\hich\af4\dbch\af4\loch\f4 Installin\hich\af4\dbch\af4\loch\f4 g a New Utility{\*\bkmkend _Toc497621804}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Once you have a program that runs under the ORCA shell, you may want to install it as a utility.  The advantages of doing so are that the program can be executed from any directory without typing a full path name, and the utility shows up in the command table.  Once it is in the command table, you can use right arrow expansion to abbreviate the command, and HELP will list it.\par \par Installing the program as a utility is really quite simple.  To do so:\par \par }\pard\plain \s17\qj\fi-360\li720\widctlpar\adjustright \fs20\cgrid {\f4 1.\tab Place the program in the utility prefix.  As shipped, this is the /UTILITY disk, but you may have moved it to your hard disk if you are using one.\par }\pard\plain \qj\fi-360\li1080\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s18\qj\fi-360\li720\widctlpar\adjustright \fs20\cgrid {\f4 2.\tab Add the program name to the command table.  The command table is in the system directory, where the editor is located.  It is called SYSCMND.  The command table is a text file, and can be changed with the editor.  Simply edit it, and add the name of your program to the list of commands you see.  After at least one space, type a U, which indicates that the command is a utility.\par }\pard\plain \qj\fi-360\li1080\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s19\qj\li720\widctlpar\adjustright \fs20\cgrid {\f4 Be sure and put the command in the correct location.  For our example utility above, we might not want to put it before EDIT, since we would no longer be able to use E followed by a right arrow to abbreviate EDIT.  Instead, place it after EDIT.  To add ECHO as a utility, then, add the line\par }\pard\plain \qj\fi-360\li1080\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\li1080\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {ECHO     U\par }\pard\plain \qj\fi-360\li1080\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par right after the EDIT line in the command table.\par \par }\pard\plain \s19\qj\li720\widctlpar\adjustright \fs20\cgrid {\f4 The new command will not be in the command table until you use the COMMANDS command to reread the command table or reboot.\par }\pard\plain \qj\fi-360\li720\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 3.\tab If you would like to have online help for the command, add a text file to the HELP directory in the utility prefix.  The name of the file must be the same as the name of the utility.\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621805}\hich\af4\dbch\af4\loch\f4 Installing a Compiler or Editor{\*\bkmkend _Toc497621805}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Since the ORCA development environment is already broken up into small pieces, it is easy to replace one of those pieces, or to add one to those that exist.  Changing the ORCA editor is the easiest thing to do.  Simply place the new editor in the system prefix and call it EDITOR.  When it is called by the system, the editor should do a GET_LINFO call using the macro supplied with ORCA.  Two fields are of interest here.  The first is the SOURCE file, which is the full or partial path name of the file to edit.  The second is ORG, which is the displacement into the file where the cursor should be placed.  Usually, this is zero, but if a language aborted with an error, it can call the editor with the location of the offending line.  To return to the shell, the editor must use the SET_LINFO call.\par \par Installing a compiler is more difficult, but certainly easy compared to writing one!  Again, the GET_LINFO call is used to fetch input parameters, and the SET_LINFO call is used to return to the shell.  The section that describes these two shell calls explains what the compiler will see.\par \par If you are installing a compiler in ORCA, please get in touch with us so that we can assign a unique number to your language.  This prevents conflicts with other languages that may be placed on the system in the future.\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 ORCA/HOST Technical Reference Manual\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 10: Introduction}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621806}\hich\af4\dbch\af4\loch\f4 Chapter 10: Introduction{\*\bkmkend _Toc497621806}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621807}\hich\af4\dbch\af4\loch\f4 Using The Manual{\*\bkmkend _Toc497621807}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This section is the technical reference manual for the ProDOS ORCA operating environment, version 4.1.  It contains all of the technical information needed to use the ORCA/HOST operating system, command processor, and system utilities.  This information is presented in a detailed, technical manner, laid out for easy reference. \par \par This is not the manual to read during a relaxing evening in front of the fireplace; it is intended for detailed reference only.  The first section, the User's Manual, is what one should read to get familiar with the system.  As the user's manual is read, it will refer to this manual for detailed material.  After reading the user's manual, it is this manual which will be the easiest place to look up details, find command references, or explore the meaning of error messages. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621808}\hich\af4\dbch\af4\loch\f4 Introduction{\*\bkmkend _Toc497621808}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par ORCA/HOST is a collection of programs which provide an operating environment for the ORCA family of languages.  Its main modules are described below.  Later chapters give details for each module. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621809}\hich\af4\dbch\af4\loch\f4 ORCA.SYSTEM{\*\bkmkend _Toc497621809}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The ORCA system program is a short initialization and boot up program. It conforms to ProDOS conventions for system programs.  It installs non-standard clock card drivers in ProDOS (if any), sets the date, and loads and executes ORCA/HOST. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621810}\hich\af4\dbch\af4\loch\f4 ORCA.HOST{\*\bkmkend _Toc497621810}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The ORCA/HOST program is an operating system supplement to ProDOS.  One of its main functions is to provide a link between ORCA and user programs which allows them to ignore all hardware dependent aspects of the Apple. ProDOS provides a good user interface for disk drives and clock cards, so ORCA/HOST does not deal with these areas; instead it concentrates on the keyboard, the CRT display, and printers. \par \par A second function of ORCA/HOST is to provide an advanced inter-process communication facility which allows ORCA language programs to communicate with each other.  This is what allows the ORCA RUN command to switch between various assemblers and compilers, automatically invoke the link editor, and execute a program, all with a single command.  It also provides input and output redirection and command (or EXEC) files. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621811}\hich\af4\dbch\af4\loch\f4 MONITOR{\*\bkmkend _Toc497621811}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The monitor houses an advanced command processor.  There are three distinct types of commands supported by ORCA; the resident command, the utility, and the language.  Resident commands are built right into the monitor, and execute immediately after the command is typed.  Utilities are syntactically equivalent to resident commands, but are in fact separate programs.  When a utility command is entered, the monitor looks for the utility on a special directory and executes the program.  When it finishes, the utility returns control to the monitor.  The last type of command is the language, which every ORCA source file has.  It is the language that tells the system what compiler or assembler to use when translating from source to object code. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621812}\hich\af4\dbch\af4\loch\f4 Utilities{\*\bkmkend _Toc497621812}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The structure of the command processor allows for a large number of external utilities - far more than could be supported if all commands were resident in the MONITOR file.  Another less obvious advantage is that utility commands can be added to those currently available.  The utilities provided with the system are described in Chapter 11.  Three complex utilities of special importance are described in Chapters 12 through 14; these are the system text editor, link editor and disassembler. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621813}\hich\af4\dbch\af4\loch\f4 System Configuration{\*\bkmkend _Toc497621813}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par System configuration is basically a very automatic process.  The introduction to the user's manual describes this process from the User's viewpoint; this section gives a more technical description of exactly what happens. \par \par On the distribution copy of ORCA, the first system program that ProDOS will find is called INIT.SYSTEM.  This is a short program which prompts the user to answer two questions:  what clock-calendar card (if any) is being used, and what 80 column board is being used.  These are the only two hardware options currently supported which require changes in code. All clock software is handled by ORCA.SYSTEM by installing a clock driver into ProDOS. Eighty-Column board drivers are contained in ORCA.HOST.  As a result, making the required changes to the code is a simple matter of deleting all of the unwanted versions of ORCA.SYSTEM and ORCA.HOST, and renaming the proper versions.  Upon completing its task, INIT.SYSTEM deletes itself and transfers control to ORCA.SYSTEM.\par \par Once the system is configured for the particular hardware in use, it may be desirable to change the default locations where the system will look for various files, add or rename commands in the command table, change the printer initialization string, etc.  These actions are handled by modifying the command table, called SYSCMND, and by using the SET command.  The format for the command table is described with the COMMANDS command.  The options that can be changed with the SET command are described with that command.\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 11: The Command Processor}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621814}\hich\af4\dbch\af4\loch\f4 Chapter 11: The Command Processor{\*\bkmkend _Toc497621814}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621815}\hich\af4\dbch\af4\loch\f4 Types of Commands{\*\bkmkend _Toc497621815}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Commands in ORCA 4.1 can be subdivided into three major groups.  All are entered from the keyboard the same way. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621816}\hich\af4\dbch\af4\loch\f4 Built in Commands{\*\bkmkend _Toc497621816}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Built in commands can be executed as soon as the command is typed and the RETURN key is hit, since the code needed to execute the command is contained in the command processor itself.  Apple DOS and Apple ProDOS are examples of operating systems that have only built in commands. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621817}\hich\af4\dbch\af4\loch\f4 Utilities{\*\bkmkend _Toc497621817}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par ORCA 4.1 supports commands in the command table which require a program external to the command processor to execute.  An example of this type of command is PEEK, which is a separate program under ORCA 4.1.  The programs to perform these commands are contained on a special directory known as the utility directory.  The command processor must first load the program that will perform the required function, so the utility directory must be on line when the command is entered.  The command will also take longer to execute, since the operating system must load the external program, execute it, and then reload the command processor. \par \par The utilities themselves must all reside in the same subdirectory so that the command processor can locate them.  The name of the utility is the same as the name of the command used to execute it.  Utilities are responsible for parsing all of the input line which appears after the command itself, except for input or output redirection.  The address of the command line (with the command and I/O redirection parameters stripped) is passed to the utility in locations $0002 and $0003.  An RTS at the end of the utility returns control to the command processor. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621818}\hich\af4\dbch\af4\loch\f4 Language Names{\*\bkmkend _Toc497621818}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The last type of command is the language name.  All source files are stamped with a language, which can be seen when the file is cataloged under ORCA.  (ProDOS will not show the language names.) There is always a single system language active at any time when using ORCA.  New files will normally be stamped as ASM6502. \par \par The system language will change for either of two reasons.  The first is if a file is edited, in which case the system language is changed to match the language of the edited file.  The second is if the name of a language is entered as a command. \par \par The following table shows a partial list of the languages and language numbers that are currently assigned.  CATALOG and HELP will automatically recognize a language if it is properly included in the command table. ProDOS has a special status: it is not truly a language, but indicates to the editor that the file should be saved as a standard ProDOS TXT file. Language numbers are used internally by the system, and are generally only important when adding languages to ORCA.  They are assigned by the Byte Works, Inc.  Those marked with an asterisk are in the command table shipped with the ORCA assembler.\par \par \tab \tab    }{\ul language}{\tab }{\ul number}{\par \par \tab \tab * PRODOS\tab 0\par \tab \tab * TEXT\tab \tab 1\par \tab \tab * ASM6502\tab 2\par \tab \tab    ASM65816\tab 3\par \tab \tab    BASIC\tab 4\par \tab \tab    PASCAL\tab 5\par \tab \tab * EXEC\tab \tab 6\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621819}\hich\af4\dbch\af4\loch\f4 Program Names{\*\bkmkend _Toc497621819}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Anything which cannot be found in the command table is treated as a path name, and the system tries to find a file that matches the path name.  If a binary file is found, that file is loaded and executed.  If a source file with a language name of EXEC is encountered, it is treated as a file of commands, and each command is executed, in turn.  If the file is a system file, it is executed, but cannot return to ORCA.  See Command Files, later in this chapter, for details. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621820}\hich\af4\dbch\af4\loch\f4 Entering Commands{\*\bkmkend _Toc497621820}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Under ORCA 4.1, commands must be spelled out in full, as with ProDOS.  To avoid writer's cramp (typer's cramp?) one may hit the right arrow key at any time while entering a command.  If the letters typed so far are a part of a command found in the command table, the rest of the command name and a space are inserted on the command line. Parameters can then be typed in the normal way, or the RETURN key can be used to execute the command.  If more than one command matches the letters typed, the first command found in the command table that matches the characters is used. \par \par If the command is not the one desired, the up and down arrow keys may be used to step through the commands in the command table until the desired command is found. \par \par Wildcards may be used on any command that requires a file name.  Two forms of the wildcard are allowed, the = character and the ? character.  Both can substitute for any number of characters.  The difference is that use of the ? wildcard will result in prompting, while the = character will not. Wildcards cannot be used in the subdirectory portion of a pathname. \par \par Command parameters fall into two groups: required and optional.  Required parameters may be entered in the order specified in the command description.  If a required parameter is omitted, the command processor or utility will prompt for it.  If a RETURN is used immediately, the command is aborted.  The required parameter can be followed by any remaining required parameters and optional parameters if desired. \par \par If a name is typed that is not found in the command table, the system attempts to find a file by that name.  If one is found, the file is executed.  Parameters are passed to the binary program in the same way that they are passed to utilities. \par \par The command processor is case insensitive.  This means that commands and their parameters can be entered as either uppercase or lowercase letters. In fact, uppercase and lowercase letters can be mixed. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621821}\hich\af4\dbch\af4\loch\f4 File Names{\*\bkmkend _Toc497621821}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In addition to the standard ProDOS names, ORCA allows the use of a physical device number in full path names, following the convention of the Apple /// SOS operating system.  For example, if the disk in slot 6, drive 1 is named /ORCA, the following file names are equivalent. \par \par \tab /ORCA/MONITOR\tab .D1/MONITOR\par \par The SHOW UNITS command can be used to see what device numbers are assigned to what physical devices; in general, the device numbers are assigned sequentially to all active disks in volume search order. \par \par In addition, two non-disk devices are supported, .PRINTER and .CONSOLE. These are useful when redirecting input and output (see below). \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621822}\hich\af4\dbch\af4\loch\f4 Types of Text Files{\*\bkmkend _Toc497621822}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par ProDOS defines and uses ASCII format files with a TXT designator.  ORCA fully supports this file type with its system editor, but requires a language stamp for files that will be assembled or compiled, since the assembler or compiler is selected automatically by the system.  As a result, a new ASCII format file is supported by ORCA.  This file is physically identical to TXT files; only the file header in the directory has been changed.  The first byte of the AUX field in the file header is now used to hold the language number, and the file type is $B0, which is listed as SRC when cataloged from ORCA. \par \par One of the language names supported by ORCA SRC files is TEXT.  TEXT files are used as inputs to a text formatter.  In addition, PRODOS can be used as if it were an ORCA language name, resulting in a ProDOS TXT file.  TXT files are also sent to the formatter if an ASSEMBLE, COMPILE, or FORMAT command is issued. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621823}\hich\af4\dbch\af4\loch\f4 Input and Output Redirection{\*\bkmkend _Toc497621823}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par ORCA supports full redirection of all input received from the $38 hook and all output sent to the $36 hook.  All ORCA system programs that do not use direct positioning of the cursor on the screen send output through the output hook, and all of them except the editor support the input hook, as do most other programs written for the Apple //. \par \par To redirect input, place a < character followed by a valid input device anywhere on the command line.  Valid input devices include .CONSOLE and any file name for a ProDOS TXT file or ORCA SRC file.  If disk files are used for input, the disk must remain on line until the command finishes.  If the file finishes and the program continues to ask for input, it will receive $00.\par \par To redirect output, place a > character followed by a valid output device anywhere after the command.  Valid output devices include .CONSOLE, .PRINTER and any valid file name.  If a disk file is used as the output device, the file type will match the current system language, and the disk must remain on line until the command finishes. \par }{\fs16 \par }{Both input and output redirection may be used at the same time.  Each requires 1K of RAM for the open file buffer, which is taken from the highest available RAM location. \par }{\fs16 \par }{If either input or output redirection is used, all characters involved are removed from the command line before it is sent to utilities or user programs. \par }{\fs16 \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621824}\hich\af4\dbch\af4\loch\f4 Command Files{\*\bkmkend _Toc497621824}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\fs16 \par }{Command files can be used under ORCA.  These are similar to DOS and ProDOS EXEC files under BASIC.  A command file consists of a sequence of commands entered into an ORCA SRC file just as they would be entered from the keyboard in response to the command processor prompt.  The language for the source file must be EXEC.  Input and output redirection are allowed in a command file.  Command files may not execute other command files. \par }{\fs16 \par }{To execute a command file, simply type the name of the file.  When the system attempts to execute the file, it will discover that it is an EXEC file and use it as a sequence of command processor commands. \par }{\fs16 \par }{A command file removes 1K from usable RAM for its I/O buffer.  This memory is taken from the highest available RAM location. \par }{\fs16 \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621825}\hich\af4\dbch\af4\loch\f4 Command and Utility Reference{\*\bkmkend _Toc497621825}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\fs16 \par }\pard \qj\widctlpar\adjustright {This section provides a technical description of all of the built in commands and all of the utilities provided with ORCA 4.1.  These are listed in alphabetical order for easy reference.  Each command's description tells if it is a built in command or a utility.  Table 1 lists all of the commands, with an asterisk beside those that are built in. \par }{\fs16 \par }{Following the command name are any parameters for the command.  Optional parameters are enclosed in brackets, like [ORG=val].  When one of several choices can be made, this is indicated by separating the choices with a vertical bar.  For example, [LIST ON|OFF] indicates that either LIST ON, LIST OFF, or no entry at all can be used with the ASML command.  Keywords which must be typed exactly as shown are shown in uppercase, while descriptions, like "source file" in the ASML command, are shown in lowercase.  When the command is entered, either uppercase or lowercase may be used in all places, since the command processor is case insensitive. \par \par }\pard \qj\widctlpar\tx720\tx990\tx2520\adjustright {\tab *\tab ASML\tab Assemble and link\par \tab *\tab ASMLG\tab Assemble link and go.\par \tab *\tab ASSEMBLE\tab Assemble.\par \tab *\tab CATALOG\tab Catalog a subdirectory.\par \tab *\tab CHANGE\tab Change language of source file.      \par \tab *\tab CMPL\tab Compile and link.\par \tab *\tab CMPLG\tab Compile, link and go.        \par \tab *\tab COMMANDS\tab Modify command table.\par \tab *\tab COMPILE\tab Compile, link and go.\par \tab *\tab COMPRESS\tab Compress and/or alphabetize directories.\par \tab *\tab COPY\tab Copy files.\par \tab *\tab CREATE\tab Create new subdirectories.\par \tab \tab CRUNCH\tab Compress object modules.\par \tab \tab DCOPY\tab Copy a disk.\par \tab *\tab DELETE\tab Delete a file.\par \tab *\tab DISABLE\tab Disable file attributes.\par \tab \tab DISASM\tab Disassembler.\par \tab \tab EDIT\tab Edit a source file.\par \tab *\tab ENABLE\tab Enable file attributes.\par \tab *\tab FILETYPE\tab Change the type of a file.\par \tab *\tab HELP\tab List the commands in the command table.\par \tab \tab INIT\tab Initialize a disk.\par \tab *\tab LINK\tab Link an object module.\par \tab \tab MACGEN\tab Macro file generator.\par \tab *\tab NEW\tab Clear the edit buffer and enter the editor.\par \tab \tab PEEK\tab Disk zap utility.\par \tab *\tab PREFIX\tab Change the default prefix.\par \tab *\tab QUIT\tab Return to ProDOS.\par \tab *\tab RENAME\tab Change a file name.\par \tab *\tab RUN\tab Assemble, link and go.\par \tab \tab SCAN\tab List routines in an object module.\par \tab *\tab SET\tab Set system characteristics.\par \tab *\tab SHOW\tab Show system attributes.\par \tab *\tab SWITCH\tab Change the order of file in a directory.\par \tab *\tab TYPE\tab Type a source file.\par \tab \tab XREF\tab Generate a cross-reference.\par }\pard \qj\widctlpar\adjustright {\fs16 \par }\pard \qc\widctlpar\adjustright {Table 1   System Commands\par }\pard \qj\widctlpar\adjustright {\par \par }\pard\plain \s20\qj\widctlpar\adjustright \b\fs20\cgrid {\f4 ASML file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Assemble a source file.  If the maximum error level found is less than or equal to the maximum allowed error level (defaults to 0 unless overridden in the source file) the resulting program is linked.  This is a built in command, but control will be passed to one or more languages, and the link editor.\par \par Parameters:\par \par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {File\tab The name of the source file to be assembled.\par \par LIST\tab Indicates whether or not the language will produce a source listing.  If omitted, the language will choose its own language dependent default.\par \par SYMBOL\tab Indicates whether or not the language will produce symbol tables.  If omitted, the language will choose its own language dependent default.\par \par ORG\tab A hexadecimal or decimal number follows, indicating the start location for the finished program.  The value only effects the load module produced by this assembly, and can be changed for a later link edit.  If the source file contains an ORG directive, its value will override this parameter.  If omitted, the default ORG is $2000.\par \par KEEP\tab Indicates the name of the root file for saving the object modules and the finished program.  If this parameter is omitted, the source file must contain a KEEP directive for any output to be saved to disk.\par \par NAMES\tab A list of subroutine names is enclosed in parentheses.  Only the named routines are assembled.  Selection of the most recent      version of each subroutine is automatic.  (See Chapter 13 for details.)\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s20\qj\widctlpar\adjustright \b\fs20\cgrid {\f4 ASMLG file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Assemble a source file.  If the maximum error level found is less than or equal to the maximum allowed error level (defaults to 0 unless overridden in the source file) the resulting program is link edited.  If the maximum error level is still acceptable, the resulting program is executed.  See ASML for a description of the parameters.  Like ASML, this is a built in command, but it transfers control to the language translator, link editor, and finished program. \par \par }\pard\plain \s20\qj\widctlpar\adjustright \b\fs20\cgrid {\f4 ASSEMBLE file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Assemble a source file.  See ASML for a description of parameters.  Note that although the ORG parameter can be used, it really has no effect, since the link editor is not called.  This is a built in command, but control is passed to the language. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 CATALOG [file]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A catalog of the indicated directory is displayed on the screen.  If file is omitted, the current prefix is used.  The format differs slightly from ProDOS: the fields have been compressed so that all five ProDOS privileges can be displayed, and so that ten character language names can be shown in the auxiliary field.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 CHANGE file language\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Changes the language of file from whatever it is to language.  This also allows conversions of source files to ProDOS text files (use PRODOS as the language) and ProDOS text files to ORCA source files.  This is a built in command. \par \par }\pard\plain \s20\qj\widctlpar\adjustright \b\fs20\cgrid {\f4 CMPL file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Same as ASML, but more mnemonic for use with high level languages. \par \par }\pard\plain \s20\qj\keepn\widctlpar\adjustright \b\fs20\cgrid {\f4 CMPLG file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {Same as ASMLG, but more mnemonic for use with high level languages. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 COMMANDS file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The system command table is read from file.  The command table read replaces any previous commands.  The command table can contain blank lines, comment lines, or command definitions.  Comment lines start with a semicolon or asterisk.  Command lines have four fields separated by blanks.  The first field is the name of the command, which must be less than 16 characters and must be a valid ProDOS file name.  The second field is one of three characters.  If it is a U, the command is treated as a utility, and the third field is not needed.  If the second field is a C, the command is treated as a built in command, and the third field is the command number.  If the second field is an L, the command is treated as a language name, and the third field is the language number.  The last field, in all cases, is an optional comment field.\par \par See the SYSCMND file on the system prefix for an example. \par \par }\pard\plain \s20\qj\widctlpar\adjustright \b\fs20\cgrid {\f4 COMPILE file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Same as ASSEMBLE, but more mnemonic for use with high level languages. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 COMPRESS [file] A|C|A C\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The COMPRESS utility command can alphabetize and crunch subdirectories. When the A parameter is used, the file names in the given subdirectory are placed in alphabetical order.  Subsequent uses of CATALOG will show them that way.  The C parameter causes the holes in the directory to be moved to the end of the directory.  Holes are left in a directory when files are deleted from the middle of a list of files.  Subsequent file creations will occur not at the end of the list of files, where they are expected, but in one of the holes.  Removing the holes causes the new file name to appear at the end of the list. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 COPY file1 file2\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {File1 is the name of a file to copy, and file2 is the directory or file to copy it to.  If file2 is the name of an existing directory, the file is copied to that directory using its old file name.  If file2 is not a directory, it is used as the path and file name for the new file.  If file2 is omitted, the default directory is used.  Wildcards may be used in file1, but not file2.  This is a built in command.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 CREATE directory\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A subdirectory is created, using the name directory.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 CRUNCH file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par File must be the base name of an object module.  For example, if an assembly and subsequent partial assemblies have produced the object modules MYFILE.A, MYFILE.B and MYFILE.C, then file would be MYFILE.  The CRUNCH utility combines all of the object modules produced by the partial assemblies into a single .A file, deleting the subsequent files as it goes.  If a segment in a subsequent file duplicates an earlier one, the earlier one is replaced by the new one.  New segments that do not replace an existing one are placed at the end of the .A file.  Thus, if no new segments have been added, a subsequent link edit will place all of the segments in the same order that they appeared in the original source file. \par \par With this utility, a full assembly will rarely be needed.  The cases where a full assembly becomes necessary are: \par \par }\pard \qj\fi-270\li990\widctlpar\adjustright {1.  One of the following directives has been changed, and it is not possible to easily identify all of the segments that the change effects.\par \par }\pard\plain \s16\fi-270\li990\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab GEQU\tab \tab IEEE\par \tab \tab MCOPY\tab \tab MDROP\par \tab \tab MLOAD\tab \tab RENAME\par \tab \tab 65816\tab \tab 65C02\par \tab \tab MSB\par }\pard\plain \qj\fi-270\li990\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 2.  A segment has been deleted or renamed. \par \par 3.  The disk is full.  CRUNCH requires a small amount of work space on the disk.  (The amount varies, but is usually only a few blocks.)\par }\pard \qj\widctlpar\adjustright {\par CRUNCH is a utility.  See also the SCAN utility. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DCOPY dev1 dev2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The disk in dev1 is copied, in its entirety, to the disk in dev2, destroying the contents of that disk.  The second disk must be initialized as a ProDOS disk before the command is used.  Both volumes must be of the same size.  Volume names may be used instead of device numbers, if desired.  This is a utility command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DELETE file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The indicated file is deleted.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DISABLE D|N|B|W|R file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par ProDOS has a total of five privileges which can be separately enabled and disabled for each file.  This command allows each of the privileges to be turned off.  When a file is cataloged, the enabled privileges are shown using the same letters used here to enable and disable the privileges.  As indicated, at least one privilege flag is required, but more than one may be used if the flags are typed with no imbedded blanks.  Note that although B can be entered here, it has no effect: only a backup utility is allowed to turn off the backup bit.  This is a built in command. \par \par Parameters: \par \par \tab D\tab Disable delete privileges\par \tab N\tab Disable rename privileges\par \tab B\tab Disable backup required flag (has no actual effect)\par \tab W\tab Disable write privileges\par \tab R\tab Disable read privileges\par \par \tab file\tab File to change the privileges on. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DISASM\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The disassembler is invoked.  See Chapter 14 for a complete description of this utility. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 EDIT file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The system editor is entered, loading file.  This is a utility command. See Chapter 12 for details on the editor functions. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 ENABLE D|N|B|W|R file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Allows the ProDOS privilege flags to be set, granting the privilege. See DISABLE for a description of the parameters.  Note that ENABLE can turn on the backup bit, even though DISABLE cannot turn it back off.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 FILETYPE file filetype\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This command changes the type of a file.  Only the type flag is changed.  The command must be used with care: changing between some file types can be dangerous, since both ProDOS and ORCA make assumptions about a file and its structure based on its type.\par \par File is the name of the file or files whose type will be changed.  Filetype is the type that the file will become.  Filetype can be specified as a hexadecimal or decimal number, or as the type characters shown when the files are cataloged.\par \par The most common use of this command is to change a binary file that has been assembled and linked into a system file, so that ProDOS can execute it directly.  For example, to change MYFILE to a system file, any of the following commands could be used.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab FILETYPE MYFILE SYS\par \tab \tab FILETYPE MYFILE 255\par \tab \tab FILETYPE MYFILE $FF\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 HELP [file]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If file is omitted, this command displays a list of all of the commands in the command table.  If file is coded, the system looks for a TXT or SRC file by the given name in a subdirectory called HELP, contained in the utility subdirectory, and prints the file.  This gives a powerful, user extendable online help facility.  Help files are included for all commands described in this chapter.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 INIT dev1 [name]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The disk in dev1 is initialized as a blank ProDOS disk, and given the name name if it is specified, and BLANK if it is not.  If an existing disk is being reformatted, dev1 may be specified as the name of the volume, if desired.  INIT supports 35 track floppies and any device that follows Apple's protocall for a disk.  This includes the 3.5" floppy disk from Apple, and all hard disks tested to date.  INIT is a utility command. \par \par }\pard\plain \s20\qj\widctlpar\adjustright \b\fs20\cgrid {\f4 LINK file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The file name is used as the root file for the object modules.  The object modules are linked.  See ASML for a description of the parameters. This is a built in command, but control is passed to the link editor.  See Chapter 13 for a detailed description of the link editor. \par \par }\pard\plain \s20\qj\widctlpar\adjustright \b\fs20\cgrid {\f4 MACGEN [+C|-C] sourcefile outfile macrofile1 ...\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An interactive utility scans sourcefile and builds a list of the macros used by the program.  COPY and APPEND directives are resolved. When the entire program has been scanned, the utility reads the name of the output file.  It then asks for the name of an existing macro library.  Wildcards may be used for this response.  The macro library is searched, and any needed macros are written to a temporary file on the work prefix.  If there are still some unresolved macros, these are listed and the process repeats.  Entering a RETURN without a file name indicates to the program that it should stop, even if all of the macros have not been found.  When all macros have been found, or RETURN is used to indicate that no more are to be searched, the temporary file is written to outfile and deleted.\par \par The C switch, which defaults to a (+), controls compression of the output file.  If on, all excess blanks are removed from the macro to save space. If GEN ON or TRACE ON will be used, it is best to use the -C switch to prevent compression. \par \par Because of the use of a temporary output file, it is possible to specify an old version of outfile as one of the files to be searched.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 NEW\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Enters the system editor without loading a source file.  A file name should be provided when the file is saved by the editor. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 PEEK [file]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This utility command executes a disk zap utility which allows individual blocks on a disk to be examined in either hex or ASCII format, changed, and written back to any block on the same device.  Since this totally disregards normal file conventions, it can be very dangerous if misused. Once in PEEK, commands are entered as control characters.  The commands are: \par \par }\pard \qj\li720\widctlpar\tx2160\adjustright {<-\tab Move the cursor left.\par \par The cursor is moved left one character.  If the cursor was on the left-most character of a line, the cursor is moved to the last character of the next line up.\par \par }\pard\plain \s19\qj\li720\widctlpar\tx2160\adjustright \fs20\cgrid {\f4 ->\tab Move the cursor right.\par }\pard\plain \qj\li720\widctlpar\tx2160\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The cursor is moved right one character.  If the cursor was on the right-most character of the line, it is moved to the start of the next line.\par \par up arrow\tab Move the cursor up.\par \par The cursor is moved up one line.  If the cursor was on the top line, it is placed on the bottom line.  Use CTRL K on Apple ][+ computers.\par \par down arrow\tab Move the cursor down.\par \par The cursor is moved down one line.  If the cursor was on the bottom line, it is placed on the top line.  Use CTRL J on Apple ][+ computers.\par \par CTRL-Q\tab Quit\par \par Exit the utility.\par \par CTRL-R\tab Read a Block\par \par The user is prompted for a block number.  It can be entered in decimal, or in hexadecimal if preceded by a $ character.  That block is read into memory and displayed on the screen.\par \par CTRL-W\tab Write a Block\par \par The user is prompted for a block number.  The block on the screen is written to the indicated block number on disk.  Changes made on the screen are not permanent until this command is used.\par \par CTRL-P\tab Print\par \par The block currently displayed on the screen is sent to the printer.  The format, (ASCII or Hex) also matches the screen display.\par \par CTRL-S\tab Reverse High Bit\par \par Characters are normally displayed in standard ASCII format.  Using this command reverses the high bit of each character before displaying it.  The effect is reversed by using another CTRL-S.  This has no effect on the hexadecimal display.\par \par ESC\tab Change Display Screen\par \par The type of display is reversed.  If the display was in hexadecimal format, characters are shown.  If the display is in character format, hexadecimal values are shown. \par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 PREFIX directory\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The default prefix is changed to directory, which is the name of a subdirectory or volume.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 QUIT\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Control is returned to ProDOS, which prompts for the next system program to be executed.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 RENAME file1 file2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The name of file1 is changed to file2.  File1 may use wildcards; if it does, the first file name matched is changed.  Wildcards cannot be used in file2.  This is a built in command. \par \par }\pard\plain \s20\qj\keepn\widctlpar\adjustright \b\fs20\cgrid {\f4 RUN source file [LIST ON|OFF] [SYMBOL ON|OFF] [ORG=val] [KEEP=file] [NAMES=(sub[,sub])]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Same as ASMLG. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 SCAN file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par File must be the full name of an object module.  The segments in the object module are listed in the order that they appear, as well as whether each segment is a code segment (produced by a START END pair) or data segment (produced by a DATA END pair).  This is a utility command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 SET [variable [value]]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par ORCA uses several predeclared variables to control the action of the system.  The SET command allows these variables to be changed.  The table below lists the variable names, and tells what they effect and what value should look like for each.\par \par If variable is missing, a list of all variables and their values is printed.  If variable is coded, but value is missing, the value of that particular variable is listed.\par \par Note that the SET command can be used in the LOGIN file to make changes to the system automatically at boot time.\par \par }\pard \qj\li720\widctlpar\tx2160\adjustright {SET SYSTEM directory\par \par Changes the system prefix to directory.  The system prefix is where ORCA looks for the monitor, editor, command table, editor macro file and editor tab file.  The default is boot/SYSTEM, where boot is the name of the prefix where ORCA.SYSTEM was executed from.\par \par SET LANGUAGES directory\par \par Changes the languages prefix to directory.  The languages prefix is where ORCA looks for the linker, assembler, and compilers.  The default is boot/LANGUAGES, where boot is the name of the prefix where ORCA.SYSTEM was executed from.\par \par }\pard \qj\li720\keepn\widctlpar\tx2160\adjustright {SET LIBRARIES directory\par \par }\pard \qj\li720\widctlpar\tx2160\adjustright {Changes the libraries prefix to directory.  The libraries prefix is where the linker looks for libraries when a program makes references to labels that are not in the program.  The default is boot/LIBRARIES, where boot is the name of the prefix where ORCA.SYSTEM was executed from.\par \par SET UTILITIES directory\par \par Changes the utility prefix to directory.  The utility prefix is where ORCA looks for utilities.  A subdirectory in the utility prefix called HELP is where the help command looks for help files.  The default is boot/UTILITIES, where boot is the name of the prefix where ORCA.SYSTEM was executed from.\par \par SET WORK directory\par \par Changes the work prefix to directory.  The work prefix is used by ORCA for temporary files.  If a RAM disk is available, it should be set there.  The default is boot/WORK, where boot is the name of the prefix where ORCA.SYSTEM was executed from.\par \par SET CLICK ON|OFF\par \par If click is turned on, the console driver clicks the speaker whenever a key is pressed.  Click defaults to off.\par \par SET WAIT ON|OFF\par \par If wait is turned on, the console driver checks to see if a key has been pressed whenever a carriage return is written.  If a key has been pressed, it waits until another key is pressed before returning control to the program that wrote the carriage return.  Wait defaults to on.\par \par SET PRINTERSLOT number\par \par The slot where the printer driver will look for the printer is changed to number, which must be in the range 1 to 7.  The default slot is 1.\par \par }\pard \qj\li720\keepn\widctlpar\tx2160\adjustright {SET PRINTERINIT string\par }\pard \qj\li720\widctlpar\tx2160\adjustright {\par The string sent to the printer to initialize it is changed to string.  String may be ommited, in which case nothing is sent to initialize the printer.\par \par Coding "" as the string will set the printer initialization string to the null string (nothing will be sent to the printer).  Control characters can be coded in the initialization string by preceding the ASCII character by a ~.  For example, the default string of CTRL-I 80N would be coded as\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab \tab ~I80N\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 SHOW LANGUAGE|LANGUAGES|PREFIX|TIME|UNITS\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Shows current system status information.  More than one of the parameters can be entered, if desired, but at least one is required.  If multiple parameters are entered, they should be separated by spaces.  This is a built in command. \par \par Parameters:\par \par }\pard \qj\fi-2160\li2880\widctlpar\adjustright {LANGUAGE\tab Shows the current system default language.\par LANGUAGES\tab Shows a list of all of the languages in the command table, along with their language numbers.\par PREFIX\tab Shows the current system prefix.\par TIME\tab Shows the current time, as reported by the ProDOS time call.\par UNITS\tab Shows the available devices, and for disks the name of the volume currently in that device. \par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 SWITCH file1 file2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This utility changes the position of two files in a directory. File1 may use wildcards, but only the first file matched is used.  Wildcards cannot be used in file2.  Pathnames may be given, but both files must be in the same subdirectory. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 TYPE [+n|-n] file [n1 [n2]]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par File is listed on the CRT, starting at line number n1 and continuing to line number n2.  If n2 is omitted, the file is listed to its end.  If n1 is missing, the entire file is listed.  N is a switch.  It can be omitted, in which case the file is listed without line numbers.  If used, it is normally coded as +N.  There must not be a space between the + and the N, and the switch must come after the command, but before the file name.  If +N is coded, each line listed begins with a line number.  -N can also be coded, but it is the default, so it has no effect.  This is a built in command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 XREF [+L] [-L] [+X] [-X] [+F] [-F] [subrange] file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A global cross reference of file is generated.  For each language used, the utility expects to find a file by the name of XREF.name, where name is the name of the language, on the utility subdirectory.  These files are supplied with the language.  XREF is capable of scanning entire programs, resolving COPY and APPEND directives and changing languages.  Three sets of switches control the output produced.  The switches, as well as the subranges, can be specified in any order, so long as they precede the file name. \par \par The L switch, which defaults to +, is used to specify if the source file should be listed.  The listing that is produced has line numbers to the left of each line; it is these line numbers which are referred to in the cross reference.  In general, the line numbers correspond to the line numbers produced by the assembler or compiler, but can be different if partial assembly directives are used in an assembly language source file or if more than one language is used.  If a listing is not needed, specify -L. \par \par The X switch, which defaults to +, controls the generation of the actual cross reference.  Each symbol that appears in the source line and is not an operation code is identified and placed in a cross reference table. For assembly language, if the symbol appeared in column 1, it is taken to be a symbol definition, while appearance anywhere else is assumed to be a use of the symbol.  Symbols are listed in alphabetical order, followed by the line numbers of all of the lines where the symbol was defined, enclosed in square brackets.  The line numbers of the lines where the symbol was used follows the definition line numbers.  To turn off the cross reference, use a -X switch. \par \par The F switch controls the generation of a frequency count, and defaults to off.  If turned on with a +F switch, the program lists all operation codes found in the program, sorted in one column by alphabetical order, and in the other column by frequency of use.  In both cases, the operation code is accompanied by a count indicating how many times it was used. \par \par Since symbols found by this program do not have scope, they are not thrown away at the end of each segment.  This means that the cross reference utility cannot handle the number of symbols found in large programs.  To reduce this problem, up to five subranges can be specified.  Subranges are specified as pairs of capitol letters separated by spaces and enclosed in parentheses. Only symbols starting with one of the specified subranges are included in the cross reference and frequency count.  For example, if the subrange were specified as (AC SS), then only those symbols that start with A, B, C or S would be included.  If no subrange is specified, (AZ) is assumed.\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 12: The Text Editor}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621826}\hich\af4\dbch\af4\loch\f4 Chapter 12: The Text Editor{\*\bkmkend _Toc497621826}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621827}\hich\af4\dbch\af4\loch\f4 Text Entry{\*\bkmkend _Toc497621827}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Upon entering the text editor, (using the monitor EDIT or NEW commands), the user is presented with a screen which can display twenty-two lines of text.  These are the first twenty-two lines of the text file in memory; if there is no file in memory, the screen is blank.  The memory area occupied by the text file is called the text edit buffer.  The twenty-two lines displayed occupy the text edit window.  The text edit window allows examination of any twenty-two contiguous lines in the text edit buffer. \par \par What is seen in the window is exactly what is in that area of the text edit buffer.  Text is entered into the text edit buffer as keys are typed.  Any keyboard character may be entered as text except for the special function keys (<-, ->, up arrow, down arrow, DELETE, TAB, ESC, CTRL, SHIFT, RETURN, and RESET).  Keystroke sequences listed in this chapter also allow entry of the characters [, ], \{, \}, ~, |, \\ and ', which are not on a standard Apple ][+ keyboard. \par \par The character typed replaces whatever character (if any) was at the cursor position, and the cursor advances one space.  There are two cases when the cursor does not advance: either the print stop option has been used in the tab line, or the cursor was in column eighty.  In either of these cases, the cursor remains in its old position. \par \par Using more than fifty-seven columns will cause wrap-around when the assembled output is sent to an eighty column printer; for this reason, there is an end of line marker in column fifty-seven.  If more than fifty-seven columns are being used, reset the tab line as explained on page 100.  This would normally be done only if a printer that will print more than eighty columns on a line were being used. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Special Function Keys\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The special function keys have slightly different uses than are found when line-editing in BASIC; they are described below: \par \par }\pard \qj\fi-1440\li2160\widctlpar\tx2520\adjustright {<-\tab Moves the cursor one space to the left.  If the cursor was in column one, the key is ignored. \par \par ->\tab Moves the cursor one space to the right.  The key is ignored if the cursor started in column eighty or if the cursor was on an end of line marker. \par \par up arrow\tab Moves the cursor up one line.  If the cursor was on the top line of the screen, the screen is scrolled up.  If the cursor was on the first line in the file, the command is ignored.  This function is also available via the escape mode on Apple ][+ keyboards, or by using CTRL-J. \par \par down arrow\tab Moves the cursor down one line.  If the cursor was on the bottom line of the screen, the screen is scrolled down.  If the cursor was on the last line of the file, a blank line is added and the cursor is moved down.  This function is also available via the escape mode on Apple ][+ keyboards, or by using CTRL-K. \par \par DELETE\tab The character before the cursor is deleted, and the line from the cursor to the end is moved back to fill in the space.  If the cursor starts in column 1, the key is ignored.  Holding the open-apple key down while typing the DELETE key undeletes the last deleted character.  These functions are not available on Apple ][+ keyboards. \par \par TAB\tab The cursor is moved forward to the next tab stop or end of line marker.  If the cursor starts in column 80 or on the end of line marker, the key is ignored.  CTRL-I will also do a tab. \par \par ESC\tab The ESC key is used for special editor functions.  These are described starting on page 96. \par \par CTRL\tab The control keys are used for special editor functions.  These are described starting on page 92. \par \par SHIFT\tab The SHIFT key allows entry of upper-register keyboard characters.  If the shift key modification has been made, using SHIFT will give capital letters when in the lowercase entry mode.  The shift key on the Apple //e or Apple //c is fully functional. \par \par RETURN\tab The return key places the cursor at the beginning of the next line.  If the cursor started on the bottom line of the page, the text window is scrolled up before the return is issued. \par \par RESET\tab The RESET key is trapped by the editor, and thus has no real effect.  It is possible to lose the last few characters typed when RESET is hit, so it is best not to use RESET in the editor. \par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621828}\hich\af4\dbch\af4\loch\f4 User Buffers{\*\bkmkend _Toc497621828}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621829}\hich\af4\dbch\af4\loch\f4 The String Buffers{\*\bkmkend _Toc497621829}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The string buffers are memory reserved for storing the search and replace strings.  They are filled using the ESC * and ESC :  commands.  The * string can then be searched for using CTRL Z and CTRL X, and replaced with the : string using CTRL C and CTRL V. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621830}\hich\af4\dbch\af4\loch\f4 The Character Buffer{\*\bkmkend _Toc497621830}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The character buffer is a 256 byte area used to save characters deleted using DELETE.  Open-apple DELETE recovers the characters, placing them at the cursor location. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621831}\hich\af4\dbch\af4\loch\f4 Information Window{\*\bkmkend _Toc497621831}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The last two lines of the screen are used to display status information. The top line normally displays a ruler with tab marks superimposed - each of the ^ characters represents a current tab setting.  When search strings, replace strings, or file names are asked for, this line is used to enter the response. \par \par The next line contains the line number and column number where the cursor is positioned, tells how full the file is by listing the percentage of the available file space currently in use, lists the name of the file being edited, and tells what mode the editor is in.  Modes are discussed in detail later. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621832}\hich\af4\dbch\af4\loch\f4 Control Key Commands{\*\bkmkend _Toc497621832}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Control characters are immediate-response function keys in the text edit mode.  This means that as soon as they are pressed, the function that they are used for is performed.  To execute a control key function, first press CTRL, and, while holding it down, press the desired alpha key. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621833}\hich\af4\dbch\af4\loch\f4 Cursor Moveme\hich\af4\dbch\af4\loch\f4 nt Keys{\*\bkmkend _Toc497621833}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }{\b CTRL S}{\tab \tab \tab \tab Tab Left\par \par The cursor moves to the left until a tab stop is found in the tab line, or until it comes to the left edge of the page.\par \par }{\b TAB}{\tab \tab \tab \tab Tab Right\par \par The cursor moves to the right until a tab stop or print stop is found in the tab line, or until the end of the line is reached.  TAB is actually the same as CTRL-I, so that can be used as well.\par \par }{\b CTRL E}{\tab \tab \tab End of Line\par \par The cursor is moved to the first space past the last character in the line.  If the character in column eighty is not a blank, the cursor is placed in column eighty.  This allows easy continuation of a line.  If a print stop is coded in the tab line, the cursor will not be placed past the print stop.\par \par }{\b CTRL W}{\tab \tab \tab Start of Line\par \par The cursor is moved to the beginning of the line that it is on. \par \par }{\b CTRL T}{\tab \tab \tab Top Home\par \par The cursor is moved to the first column in the top line of the current display window. \par \par }{\b CTRL B}{\tab \tab \tab Bottom Home\par \par The cursor is moved to the first column in the bottom line of the current display window. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b CTRL F}{\tab \tab \tab First Line\par }\pard \qj\widctlpar\adjustright {\par The display window is moved to the first twenty-two lines of the current text edit buffer.  The cursor is then placed in column one of line one.\par \par }{\b CTRL L}{\tab \tab \tab Last Line\par \par All blank lines are removed from the end of the current text edit buffer. Next, the display window is moved to the last twenty-one lines in the text edit buffer, placing a blank line at the end of the file (and thus at the bottom of the display window).  Finally, the cursor is moved to column one of the bottom line of the display window. \par \par This command is generally used to jump to the end of a file to add new text to a partially completed text file.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621834}\hich\af4\dbch\af4\loch\f4 String Search Commands{\*\bkmkend _Toc497621834}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The following commands are used to locate any sequence of characters in a file.  The string that is being searched for should have already been entered using the ESC command *, although a chance is given to enter the string if one is not found.  If search and replace commands are used, the : string is used as the replace string. \par \par }{\b CTRL Z}{\tab \tab \tab Search Up\par \par A search for the current string is made.  The search starts at the character immediately before the character occupied by the cursor, and continues up until the string is found or until the beginning of the file is reached.  If the string is found, the display window is moved so that the line with the string is at the top of the page, then the cursor is moved to the beginning of the string.  If the string is not found, the message\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {*** String not found *** \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par is printed just below the display window.  If there was no string in the string buffer, the string entry routine is entered before the search starts. \par \par }{\b CTRL X}{\tab \tab \tab Search Down\par \par This command is identical to the search up command (CTRL Z) except that the search is conducted from the first character following the cursor to the end of the file. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b CTRL C}{\tab \tab \tab Search and Replace Up\par }\pard \qj\widctlpar\adjustright {\par The search and replace sequence begins with the question\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {Auto or Manual (A M Q)? \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If a response of A is given, a string search up is conducted for the * string.  If the string is found, it is replaced with the : string; if it is not found the process ends with the cursor in its original position. After replacing a string, another search is conducted until all occurrences of the string have been found and replaced. \par \par If a response of M is given, each successful search is followed with the question\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {Replace (Y N Q)?\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The string to be replaced is shown in inverse on the top line of the screen.  Typing N continues the search without replacing the string. Typing Y replaces the string, then continues the search.  Typing Q terminates the search without replacing the string. \par \par If a search and replace is started with no string in the : buffer, the message\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {Replace with null string (Y N Q)?\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par appears on the prompt line.  Replying with N allows entry of the : string, while Y results in a search and delete. \par \par }{\b CTRL V}{\tab \tab \tab Search and Replace Down\par \par This is identical to search and replace up, except that the string search is conducted down in the file. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621835}\hich\af4\dbch\af4\loch\f4 Miscellaneous Commands{\*\bkmkend _Toc497621835}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par CTRL A\tab \tab \tab Enter/Exit Insert Mode\par \par See page 99 for a description of this mode. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b CTRL D}{\tab \tab \tab Delete to End of Line\par \par }\pard \qj\widctlpar\adjustright {This command clears the line occupied by the cursor from the cursors position to the end of the line. \par \par }{\b CTRL N}{\tab \tab \tab Toggle Return Mode\par \par Normally, typing the RETURN key returns the cursor to the beginning of the next line.  In anticipation of compilers for block structured languages, this option changes the return function so that RETURN goes to the next line, placing the cursor on the first non-blank character.  If the line is blank, the cursor goes under the first non-blank character in the line above.  If all of the lines on the screen above the cursor are blank, the cursor goes to the beginning of the line.  Typing a CTRL N a second time restores the original handling of the RETURN key.\par \par }{\b CTRL O}{\tab \tab \tab Push Lines\par \par This command is used to write lines out to disk.  To select the lines to write, place the cursor on either the first or last line, and type CTRL-O. The message MARK will appear in the status area of the screen.  Next, move the cursor to the last line of the list to push, and type CTRL-O again.  A prompt for a file name will appear; enter the name of the file to write the lines out to and hit RETURN.  Any valid ProDOS path name can be used, or RETURN can be used without entering any file name at all.  In that case, the lines are written to the file SYSTEMP on the work prefix.  Since the work prefix is generally set to a RAM disk, the output is very fast. Finally, a prompt that allows the copied lines to be deleted appears - answer Y or N.  Note that the actual order of the selections is immaterial - it is possible to select the last line of a block of text before selecting the first line. \par \par }{\b CTRL P}{\tab \tab \tab Pop Lines\par \par A prompt for a file name appears; enter the name of any ProDOS text file or ORCA source file.  The contents of that file are read in and placed at the cursor location.  If RETURN is hit before entering a file name, the editor will read in the contents of SYSTEMP from the work prefix. \par \par }{\b CTRL Q}{\tab \tab \tab Quit\par \par This command exits the text editor, going to an exit menu.  Options presented in the exit menu include: \par \par }\pard \qj\fi-720\li1440\widctlpar\adjustright {R\tab Returns control to the editor.\par E\tab Leaves the editor and goes back to the monitor.  Changes made to the file are not saved.\par S\tab Saves the file to the same file name used when the editor was entered.  This does not result in leaving the editor.             \par N\tab Prompts for a new filename, and saves the text in the buffer to that file.\par L\tab Loads a new file from disk without leaving the editor. \par }\pard \qj\widctlpar\adjustright {\par Any time a RETURN key is hit in response to a prompt, the command is aborted and control remains at the menu level. \par \par }{\b CTRL R}{\tab \tab \tab Remove Blank Lines\par \par All blank lines, beginning with the line occupied by the cursor and continuing to the first non-blank line, are deleted from the text edit window and the text edit buffer. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621836}\hich\af4\dbch\af4\loch\f4 Escap\hich\af4\dbch\af4\loch\f4 e Key Commands{\*\bkmkend _Toc497621836}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When the ESC key is pressed, the message\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 ESC\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par appears in the status area of the screen, two lines below the edit window.  This indicates that the editor has entered the escape mode.  The message remains there until the escape mode is exited by pressing any key that does not correspond to an escape mode command, such as RETURN or ESC. \par \par Escape mode commands are executed as soon as the key corresponding to the command is pressed.  After most commands, the editor remains in the escape mode after the command is executed.  String entry commands return to the edit mode after the string has been entered. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621837}\hich\af4\dbch\af4\loch\f4 The Repeat Feature{\*\bkmkend _Toc497621837}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Escape commands may be repeated by setting a repeat count. This is done by typing a decimal number, followed by any valid ESC command.  The command is then executed the indicated number of times, to a maximum of 255. \par \par If a number larger than 255 is entered, or if the ? character is used, the next command will be executed as many times as possible.  For commands like inserting a line, which have no theoretical limit on the number of times they can be performed, 256 is used. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621838}\hich\af4\dbch\af4\loch\f4 Cursor Movement Commands{\*\bkmkend _Toc497621838}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }{\b I or Up Arrow}{\tab \tab \tab Move Up\par \par Moves the cursor up one line.  The screen is scrolled up to accommodate moving the cursor if the cursor was on the top line of the text window. If the cursor was on the first line in the file, the command is ignored. \par \par }{\b J or <-}{\tab \tab \tab \tab Move Left\par \par The cursor is moved left one column.  If it started in column one, the command is ignored. \par \par }{\b K or ->\tab }{\tab \tab \tab Move Right\par \par The cursor is moved one character to the right.  If it starts in column eighty or on a print stop, the command is ignored. \par \par }{\b M or Down Arrow}{\tab \tab Move Down\par \par Moves the cursor down one line, scrolling the page if necessary.  Blank lines are added at the end of the file if they are needed. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621839}\hich\af4\dbch\af4\loch\f4 Text Edit Window Control{\*\bkmkend _Toc497621839}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }{\b E}{\tab \tab \tab \tab Scroll Up One Line\par \par Scrolls the current text window page up one line, placing the cursor on the next line up.  The cursor remains in the same relative position on the screen that it started at. \par \par }{\b C}{\tab \tab \tab \tab Scroll Down One Line\par \par Scrolls the current text window down one line, placing the cursor on the next line down.  The cursor remains in the same relative position on the screen that it started at. \par \par }{\b W}{\tab \tab \tab \tab Scroll Up One Page\par \par Moves the edit window to the twenty-two lines immediately before the lines in the current display window.  The cursor is left in the same position in the window that it started. \par \par If the beginning of the file is less than twenty-two lines up, the edit window is moved to the beginning of the file. \par \par }{\b X}{\tab \tab \tab \tab Scroll Down One Page\par \par This is the same as scrolling up one page, except that the page after the one in the window is displayed. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621840}\hich\af4\dbch\af4\loch\f4 Insert and Delete{\*\bkmkend _Toc497621840}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }{\b B}{\tab \tab \tab \tab Insert Line\par \par Inserts a blank line at the position of the cursor, moving old lines down to make room for the new one.\par \par }{\b Y}{\tab \tab \tab \tab Delete Line\par \par The line that the cursor is on is deleted, moving the following lines up to fill the space. \par \par }{\b H}{\tab \tab \tab \tab Insert Character\par \par Inserts a space at the position of the cursor, moving the rest of the line to the right to make room.  Characters scrolled off of the right side of the line are lost. \par \par }{\b G}{\tab \tab \tab \tab Delete Character\par \par The character under the cursor is deleted, moving the rest of the line to the left to fill the gap.  A blank is inserted at the end of the line. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621841}\hich\af4\dbch\af4\loch\f4 Non-\hich\af4\dbch\af4\loch\f4 keyboard Characters{\*\bkmkend _Toc497621841}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Characters that are not on Apple ][+ keyboards may be entered in the escape mode using the following translation characters.  Although this can also be done from Apple //e and Apple //c keyboards, it is unnecessary, since those keyboards have keys for all of these characters. \par \par \tab \tab }{\ul key}{\tab \tab }{\ul result}{\par \tab \tab /\tab \tab \\\par \tab \tab -\tab \tab _\par \tab \tab +\tab \tab ~\par \tab \tab !\tab \tab |\par \tab \tab (\tab \tab \{\par \tab \tab )\tab \tab \}\par \tab \tab <\tab \tab [\par \tab \tab >\tab \tab ]\par \tab \tab %\tab \tab @\par \tab \tab "\tab \tab ^\par \tab \tab '\tab \tab `\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621842}\hich\af4\dbch\af4\loch\f4 Buffer Commands{\*\bkmkend _Toc497621842}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }{\b *}{\tab \tab \tab \tab Enter Search String\par \par This command puts the cursor just below the current display window, following an * prompt.  Any string valid in the edit mode may then be entered, finishing with a RETURN.  This enters the string into the search string buffer for use by the search commands (see CTRL X and CTRL Z above).  If RETURN is entered immediately, any existing search string is cleared from the buffer. \par \par While entering the string, three special characters are recognized.  They are the left and right arrows, and RETURN.  The left and right arrows move the cursor left and right, erasing or entering the characters they pass into the input buffer.  Characters erased from the input buffer using the left arrow remain on the screen, as they do when the monitor is in use. The RETURN key ends the string at the current cursor location.  Embedded, leading and trailing blanks are allowed, and are significant. \par \par }{\b :}{ \tab \tab \tab \tab Enter Replacement String\par \par This is the same as entering a search string except that the resulting string is used to replace the search string using the search and replace commands. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621843}\hich\af4\dbch\af4\loch\f4 TAB Stops{\*\bkmkend _Toc497621843}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {\b A}{\tab \tab \tab \tab Set, clear tab stops\par \par While in the escape mode, the A key sets a tab stop in the current column if one has not been set, and clears one if it is set.\par \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621844}\hich\af4\dbch\af4\loch\f4 The Insert Mode{\*\bkmkend _Toc497621844}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Another entry mode is available in the editor, the insert mode.  It is entered by hitting the CTRL-A key.  Hitting CTRL-A a second time leaves the insert mode.  While in the insert mode, typed characters are inserted at the cursor location, and the line from the cursor to the end of the line is moved forward one character to make room for the new character. Note that characters scrolled off the end of the line are lost. \par \par The other effect of the insert mode is that the RETURN key will split the current line, placing the line from the cursor to the end on a new, blank line, and deleting these characters from the original line. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621845}\hich\af4\dbch\af4\loch\f4 Editor Macros{\*\bkmkend _Toc497621845}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Editor macros are available on the Apple //e and Apple //c.  This allows the substitution of a single keystroke for up to 128 fixed, predefined keystrokes.  The system comes with several predefined macros, but these change so rapidly that they are not listed here.  See the system initialization supplement for details. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621846}\hich\af4\dbch\af4\loch\f4 Entering Macros{\*\bkmkend _Toc497621846}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The Macro entry mode is available whenever the editor is in use.  Begin by typing closed-apple ESC.  The first ten of the twenty-six available macros will appear on the screen.  Each of the macros is associated with an alphabetic key, shown on the left.  The left and right arrows are used to move between the three pages of macros. \par \par To enter a macro, type the letter that it is associated with.  The letter must be visible to do this.  The line will clear, and a cursor will appear.  Any sequence of keyboard characters can now be typed, including calls to other macros.  Control characters are displayed in inverse, macro calls as an inverse B followed by the letter, and open-apple commands as an inverse A followed by the key. \par \par After entering all of the new macros, hit the closed-apple key by itself. An opportunity is given to save this to a disk file - they are placed in the system prefix under the name SYSEMAC, where the editor will find them the next time it starts. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621847}\hich\af4\dbch\af4\loch\f4 Using Macros{\*\bkmkend _Toc497621847}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par To use a macro, hold down the closed-apple key and type the letter corresponding to the macro. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621848}\hich\af4\dbch\af4\loch\f4 Defining Tab Stops{\*\bkmkend _Toc497621848}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In addition to setting the tab stops while in the editor via the ESC-A command, it is possible to set the default tab stops.  A file called SYSTABS in the system prefix is searched by the editor as it comes up.  If the file exists, it should be a series of lines in a ProDOS TXT or ORCA SRC file.  For each active language in the system, the file should contain two lines.  The first consists of 80 characters, which define the tab line itself.  Zeros are used to indicate the absence of a tab stop, ones to indicate a tab stop, and a two to indicate the end of line marker.  An end of line marker is not required. \par \par The second line for the language is either a zero or one, indicating that the RETURN key should always go to the beginning of the line (zero) or that it should go to the first non-blank character in the line (one).  For block structured languages like C and Pascal, a one is normally used, while for assembly language a zero is more normal. \par \par To determine which pair of lines to modify for a given language, use the SHOW LANGUAGES command to find out the language number for the appropriate language.  The tab and RETURN mode lines in the SYSTABS file are entered sequentially by language number, starting at zero and counting up. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 13: The Link Editor}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621849}\hich\af4\dbch\af4\loch\f4 Chapter 13: The Link Editor{\*\bkmkend _Toc497621849}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621850}\hich\af4\dbch\af4\loch\f4 Overview{\*\bkmkend _Toc497621850}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This chapter describes the use and operation of the link editor.  The link editor has the job of taking individual subroutines and combining them into a complete program.  This usually means relocating certain subroutines and telling each subroutine where other subroutines are located.  One significant advantage of a link editor is that if a single subroutine has an error, only that subroutine containing the error need be reassembled, rather than the entire source file.  The link editor can then combine the new subroutine with the old ones to produce an executable program. \par \par This scheme results in three distinct kinds of files that the ORCA/M system uses.  The first is the source file; these files are created using the system editor.  Source files are saved to disk from the editor.  They have the file type SRC, which may be seen when the disk is cataloged.\par \par The assembler is used to convert the source file into an object module, which in turn is the kind of file the link editor uses.  The object module has a file type of OBJ; the link editor can relocate the code contained within an object module.  Note that the link editor does not know or care what source language produced the object module.  A Pascal or BASIC compiler designed for use with this system could produce the same type of object module as an assembler. \par \par Output from the link editor is in the form of a binary file with file type BIN.  This file is ready to be executed using the ProDOS BRUN command.  It may be executed from standard ProDOS or directly from ORCA.  It can even be moved back to a DOS 3.3 disk and executed from there. \par \par The link editor is invoked by using any monitor command that does an assembly followed by a link edit, such as ASML.  It can also be invoked by using the LINK command with a file name.  Parameters for the LINK command will be described shortly. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621851}\hich\af4\dbch\af4\loch\f4 The Link Edit Process{\*\bkmkend _Toc497621851}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par No matter how the link editor is invoked, the process is very much the same. The link editor is a two pass linker.  Pass one begins by locating an object module on disk and loading the module into memory.  Subroutines are assigned final memory locations for the binary load module, and the length of the subroutine is calculated.  All global labels defined in the object module are assigned values and placed in a symbol table.  The process is then repeated with the next subroutine. \par \par After all subroutines have been processed in the above manner, pass two starts over with the first subroutine.  This time, global labels referenced by the subroutine are looked up in the symbol table and resolved in the output file.  The subroutine is then placed in the load module on disk.  This process is then repeated for each of the other subroutines. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621852}\hich\af4\dbch\af4\loch\f4 Object Modules Created by the Assembler{\*\bkmkend _Toc497621852}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When the assembler is directed to save the results of an assembly on disk using the KEEP parameter, it was necessary to supply a file name.  The assembler then created two disk files.  The first file contained the object module for the first assembled subroutine in the source file. (This is the entry point for the finished program.) This first object module was saved with the file name supplied using the KEEP directive, with the suffix .ROOT added to the end.  For example, if the file name OBJECT was used, the first subroutine would be saved in a file called OBJECT.ROOT.  The remaining subroutines are placed in a file called OBJECT.A.  They are placed in this file in the order that they occurred in the source file. \par \par After assembling the complete program, there may be a need to reassemble a few of the subroutines, using the NAMES=(n1 ... nx) assembler option. When this is done, the assembler searches the output disk for an old file with the same root name.  If this was the second assembly, it would find the file called OBJECT.A.  The newly assembled (or re-assembled) subroutines are saved in a file called OBJECT.B.  They appear in the order in which they were encountered in the source file.  Subroutines which were not re-assembled are not placed in the new file.  The next partial assembly is stored in a file with the name OBJECT.C, and so on. \par \par If the first subroutine is reassembled, it is placed in a separate file called OBJECT.ROOT, replacing the first file by that name. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621853}\hich\af4\dbch\af4\loch\f4 Subroutine Selection{\*\bkmkend _Toc497621853}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When a link edit starts, the same KEEP file name as used by the assembler must be provided.  (This is done automatically by ASML and similar commands.) In the above example, this was OBJECT.  The link editor scans the output disk for a file with the name OBJECT.ROOT, using the subroutine in that file as the first subroutine in the final binary load module.  It then locates the last object module assembled by finding the file with the highest alphabetical suffix.  (It does this by scanning successively for files with ascending alphabetic suffixes.) In the example above, this was OBJECT.C.  Subroutines are taken from this file in the order encountered, linked and then placed in the load module.  The link editor then proceeds to the previous file - that is, the one with preceding alphabetical suffix.  If a subroutine is found which has not yet been linked, it is placed in the load module.  If the subroutine has already been linked, having been found in a previous (hence more recently assembled) file, it is ignored.  Thus, the most recent version of a subroutine is selected automatically. \par \par If there are still unresolved external references, the link editor assumes that these are to be resolved from library files.  Library files have the same format as other object modules, but they are located in the library directory.  (See the initialization addendum for more on this directory, and how to change it.) The link editor searches the library prefix for library files.  If there there are no library files to be found, the linker assumes that the unresolved references are errors. \par \par When the library directory is found, each library file is searched once, in the order in which it appears in the catalog.  If any subroutine has a name corresponding to an unresolved reference, it is placed in the load module.  A subroutine selected in this manner can have its own unresolved references, which are then resolved during the rest of the library search. \par \par Having found all of the subroutines it can, the link editor proceeds to pass two of the link edit.  Pass two produces a BIN type output file with the keep file name as its file name.  If there are no errors, the program is ready to be executed.  The binary file can be executed directly from ORCA by simply typing the name of the file.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621854}\hich\af4\dbch\af4\loch\f4 Link Edit Command Parameters{\*\bkmkend _Toc497621854}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Several link edit options are available.  These are entered as parameters to the LINK command.  They may appear in any order, and may be separated by commas or spaces.  Remember that a file name must be used with the LINK command; the file name comes after the LINK command, followed by the parameters.  The following are valid commands: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx180\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid { LINK MYFILE,KEEP=MYFILE,ORG=$8000\par  LINK /ORCA/MYFILE ERROR OFF LIST OFF KEEP=/PROFILE/SAVE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 KEEP=file\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The binary output file (load module) is saved on disk using the file name file.  This file can then be executed from either ORCA or Apple ProDOS. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 ORG=org\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The finished program will start at location org.  The value of org may be coded in decimal or hexadecimal.  If hexadecimal is used, the value must begin with a $ character.  The default is $2000. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 LIST OFF\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Normal output from the link editor is suppressed.  Only errors are listed. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 SYMBOL OFF\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The global symbol table which is normally listed at the end of the link edit output is suppressed. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621855}\hich\af4\dbch\af4\loch\f4 Creating Library Files{\*\bkmkend _Toc497621855}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Several library subroutines are included with the assembler, ready to be used automatically by the link editor.  New library files can also be created.  Begin by writing a source file as if the library subroutines were part of a main program.  A dummy subroutine is placed at the start of the file.  This first subroutine will be placed by the assembler into the root file (the one that ends in .ROOT ).  Assemble the file normally, as if it were a program - there is no need to do a link edit.  The root file is simply deleted, and the secondary file (which ends in .A ) may be renamed as desired, then placed in the library subdirectory. \par \par All subroutine libraries needed for a given link edit must be on the library directory for the link editor to find them.  Libraries are searched one time, sequentially, so if an library subroutine requires another library subroutine, it should precede it in the source file. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621856}\hich\af4\dbch\af4\loch\f4 Output{\*\bkmkend _Toc497621856}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {In addition to generating the load module, the link editor produces printed output, showing exactly what it did.  This output can be suppressed by using LIST OFF, except for errors and the global symbol table.  The global symbol table is suppressed by using SYMBOL OFF. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621857}\hich\af4\dbch\af4\loch\f4 Pass One Output{\*\bkmkend _Toc497621857}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par All link editor error messages list the name of the program segment where the error appeared, as well as how far into the program segment the error was.  Errors are the only printed output from pass one. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621858}\hich\af4\dbch\af4\loch\f4 Pass Two Output{\*\bkmkend _Toc497621858}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Pass two prints errors the same way as pass one.  In addition, pass two writes the starting location, length, and name of each program segment. Each segment is also flagged as Code (produced by a START-END sequence) or Data (produced by a DATA-END sequence). \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621859}\hich\af4\dbch\af4\loch\f4 Global Symbol Table{\*\bkmkend _Toc497621859}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The listing concludes with an alphabetized global symbol table.  Each symbol is followed by the value assigned to it, given in hexadecimal. \par \par This value is followed by a single hexadecimal digit.  The digit is zero if the label is a subroutine name or global label.  If the label was defined in a data area, the digit indicates the number of the data area that defined it. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621860}\hich\af4\dbch\af4\loch\f4 File Le\hich\af4\dbch\af4\loch\f4 ngth and Error Count{\*\bkmkend _Toc497621860}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par After the global symbol table has been printed, the link editor prints a message stating the number of errors (if any), and what the highest error level was.  (Error levels are explained in Appendix A.) This message is not printed if there were no errors.  The last line tells where the program starts and how many bytes long it is, in hexadecimal. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 14: 6502/65C02 Disassembler}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621861}\hich\af4\dbch\af4\loch\f4 Chapter 14: 6502/65C02 Disassembler{\*\bkmkend _Toc497621861}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621862}\hich\af4\dbch\af4\loch\f4 Introduction{\*\bkmkend _Toc497621862}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A disassembler is a utility for re-constructing a version of the source code for a program from a machine code version of that program.  The disassembler accepts a machine language program in the form of a binary file as input, and generates assembly-language source code for that program, in the form of a SRC file, as output. \par \par Reasons for using or needing a disassembler range from a desire to understand or modify a program which is only available as object code; re-constructing a program for which the source code has been lost; or even as a means to convert an existing program from one source format to another - in this case, the ORCA source format, as naturally that is what this disassembler produces. \par \par The disassembler will try and automatically make reasonable guesses as to which bytes in the raw binary file represent code, and which are data, as well as provide simplistic labels for all memory locations referenced in the operand field of instructions, but it cannot be expected to do a very good job on its own.  Accurate determination of just what is code and what is data, the appropriate format for the data, and meaningful names for labels, is up to the operator of the disassembler. \par \par This disassembler is therefore an interactive, command oriented program.  It uses a command interpreter similar to the one in the ORCA monitor.  To enter the disassembler, type DISASM from the ORCA/M monitor. \par \par Just as the pound sign, #, is the command-line prompt for the ORCA monitor, the disassembler likewise has a command prompt.  It is the colon; whenever the colon appears, followed by a flashing cursor, any of the disassembler commands listed below may be entered.  As with the monitor, when commands are entered in response to the command line prompt, a blank must separate commands from operands (such as filenames or addresses).  In contrast to the monitor, the full command name does not need to be typed.  Instead, only enough characters of a command need be entered to distinguish it from those preceding it in an alphabetical listing of available commands. \par \par The actual technique of disassembling a program is an art that must be developed by the individual operator.  The procedure of creating the disassembled listing is a process of building a symbol table in memory containing all of the labels, DC statements, START and END directives, and other information, that has been entered by the user.  As labels are added, and the program re-listed, the disassembled program becomes more and more intelligible as the user-entered labels are interlisted with the remaining, incompletely disassembled code.  With each iteration of the process, the symbol table is built up into what becomes the "key" to the entire program, from which the disassembler (using the GENERATE command) can create an actual source listing of the program, which can then be re-assembled to re-create an identical binary version of the program, and modified as desired. \par \par Note that in this process the disassembler can use up large amounts of memory.  The more complex and sophisticated the disassembly, the more symbol table space will be required.  If a point is reached where an out-of-memory situation occurs, divide the binary machine code file into pieces. \par \par In reviewing the command descriptions, the first and most important to learn is the HELP command.  It is provided to give a brief listing of the available commands.  Once a basic familiarity with the operation of the disassembler is achieved, it is likely that the HELP screen will be the only reference needed for operation of the disassembler. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621863}\hich\af4\dbch\af4\loch\f4 Command Descriptions{\*\bkmkend _Toc497621863}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In the operands for the commands, label means an initial alphabetic character, followed by from zero to nine alpha-numeric characters.  Adr means a hexadecimal number in the range $0000-$FFFF.  These should not be preceded by the $ character when entered in a command line.  Filename indicates a disk file name. \par \par Many commands use two addresses, separated by a period.  For a large number of these, both the period and the second address is optional.  If only a single address is given, the operation is performed only on the single byte referenced at that address.  If the first address is less than the starting address of the program being disassembled, the starting address of the program is assumed.  If the first address is followed by a period, but not by the second address, the operation is performed on all locations from the first address to the last address in the program. Using both addresses performs the operation on the range of memory from the first address to the last address, inclusive. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 CATALOG [file]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Catalogs the disk.  File is the name of the directory to catalog.  If omitted, the current directory is cataloged. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 CODE adr[.[adr]]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If the memory locations in the range indicated have previously been tagged as a part of a DC statement, they are restored to the default condition, where all binary data is listed as code (program instructions and their operands), rather than as program data. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DATA adr[,label]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A DATA directive is placed at adr in the output file.  The disassembler will automatically precede it with an END directive unless it is the first line of the program.  If label is coded, it will be placed in the label field of the directive. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DC adr[.[adr]][,type]]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A DC directive is defined, indicating that the memory is to be considered as data, and not as instructions, which is the default case.  Type is the type of DC statement desired, and defaults to H if omitted.  Valid types are A (address), B (binary), C (character), H (hexadecimal) and I (integer).  If a character DC type is requested, the high-order bit of each character will be cleared, regardless of its previous setting.  This is consistent with the ORCA/M default of MSB OFF.  Non-printing ASCII characters are replaced with the underline character. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DELETE filename\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The indicated file is deleted from the disk. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 DELLABEL [adr][,label]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The label defined for the given address (or label name) is deleted from the symbol table.  The command has no effect if the given label has not been defined. \par \par Either adr or label must be provided.  If both are entered, adr is used with a comma. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 GENERATE filename\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The program is listed (disassembled), and the output is sent to a source file on disk with the name filename. \par \par The generate process starts with the creation of those labels which are still undefined by the user, but which are needed to allow the operand of every instruction to be a label rather than a constant hexadecimal address.  Each label so defined by the disassembler is simply an "L", followed by the four byte hexadecimal address of the memory location being referenced in the program.  All instruction operands (except immediate operand instructions) and address type DC directives which reference the address will use the label.  If an address is referenced which does not begin on an instruction boundary, no label is generated, and the operand is left as a hexadecimal constant. \par \par If the resulting source file is too long to be edited, use the TYPE command to break it into smaller files.  To do this, specify the range of lines that will appear in the new, smaller file, and redirect the output of the command to the file. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 HELP\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This command accesses a built-in listing of all of the commands\par available. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 HEX adr[.[adr]]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The memory locations indicated are listed on the screen.  Each line begins with the address of the first byte listed, followed by a colon.  Up to sixteen bytes are then listed as hexadecimal numbers.  Following the hexadecimal listing, the character equivalents of the hexadecimal values are printed, surrounded on the left and right by periods.  If the value does not correspond to a printable ASCII character, it is printed as the underline character. \par \par This command can also be entered as X adr[.[adr]].  This alternate form is provided to allow a single-keystroke version of this frequently used command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 LABEL adr,label\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {The label given is entered into the symbol table with the value adr.  Any time the line starting at adr is listed using the LIST command, or generated to an output file using the GENERATE command, label is placed in the label field of the line.  If a listed instruction operand references adr, label is used instead of the address. \par \par If adr is outside the range of the program being disassembled, the label will be placed at the beginning of the program as a GEQU directive.  Global equates are listed any time the first line of the program is listed. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 LIST adr[.[adr]]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The indicated range of memory is disassembled and printed on the screen. All lines are listed exactly as they will be formed when the GENERATE command is used to send the file to disk, except that the L-type labels created by the GENERATE command are not used. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 LOAD filename\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A binary file is loaded from disk.  The file may then be disassembled using the commands described.  Note that all commands with addresses as operands will only operate on the range of memory encompassed by the program which has been loaded.  The only exception is LABEL, which will allow a label to be defined outside the range of the program. \par \par The program is actually always loaded into memory at the same fixed location, regardless of the file's actual execution address.  Whenever the file is listed, however, the disassembler lists the program as if the origin or initial offset were the execution address of the file.  Loading a program resets the symbol table pointers, deleting anything that was in the symbol table. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 PARAMETERS\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The real starting location (execution address) and length of the program currently in memory (the last one loaded using the LOAD command) is listed on the screen. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 PROFF\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Output is no longer sent to the printer. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 PRON\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Anything that is normally printed on the screen is routed to the printer.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 QUIT\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Control is returned to the ORCA/M monitor. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 START adr[,label]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A START directive is defined at the location specified by adr.  Unless it is the first line of the program, the disassembler automatically precedes it by an END directive in output listing, as well as a comment indicating the original location of the directive in the program.  If label is entered, it will be used in the label field of the START directive.  The label can also be added later using the LABEL command, or may have already been defined. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 TLOAD filename\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A symbol table is loaded from disk, replacing the currently resident one. This allows the disassembly process to be resumed after interruption. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 TSAVE filename\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The current symbol table is saved on disk under the file name filename.  The symbol table contains all of the definitions entered by the user in creating the disassembly listing.  By saving the symbol table, a session may be interrupted, and continued at a later time by re-loading the machine code binary file using LOAD, and the symbol table, using TLOAD. With these two files loaded, the interactive disassembly process can resume as before. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621864}\hich\af4\dbch\af4\loch\f4 Some Final Comments{\*\bkmkend _Toc497621864}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par It is not intended that the disassembler will produce a completed program, ready to be assembled and executed.  In fact, except for very short programs, one will always have to at least split the source file up and add APPEND directives at the end of each file.  Disassembly is the first step along the course to a completed source listing.  Much time adding comments, other directives, and more descriptive operands will need to be spent before a source listing is truly complete. \par \par Two problems are likely to occur frequently, so they will be mentioned here. The first involves character constant formats.  The ORCA system assumes that all characters have the high bit clear, which is how they are defined in the ASCII character set.  Some programs will represent characters with the high bit set.  This can be easily adjusted by placing the MSB ON directive at the beginning of the source file.  Some assemblers also provide a special directive which sets the high bit of the last character string.  The best way to deal with this is, having disassembled the entire string as C type DC statements, to then replace the DC directive with a macro to do the bit-manipulation on the characters in the string. \par \par The other problem is that not all assemblers provide a mechanism for defining local labels, which can lead to a style of program referred to as "spaghetti code." For the ORCA assembler, this results in a situation where relative branches take place outside the bounds of logical subroutines.  There are two ways to deal with this.  The first is to change the program slightly, so that relative branches are made only within the subroutine that they are contained in.  This alternative will probably make the program a little longer.  The other method is to break up the program wherever possible, ignoring logical subroutine boundaries. ENTRY directives can then be used to allow access to the subroutine at their logical entry point.  If this alternative is chosen, be sure and do a full assembly each time the program is assembled, since the subroutines will be very position dependent. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Assembler Reference Manual\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 15: Running the Assembler}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621865}\hich\af4\dbch\af4\loch\f4 Chapter 15: Running the Assembler{\*\bkmkend _Toc497621865}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621866}\hich\af4\dbch\af4\loch\f4 Introduction{\*\bkmkend _Toc497621866}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The assembler is the heart of the ORCA/M assembly language development system.  It is invoked from the monitor by using any of the assemble or compile commands.  It then assembles the source file named in the parameter list of the assemble command. \par \par The assembly is not limited to the first source file.  For large programs, that file is simply the first of many source files.  The file in memory chains to or includes other source files using APPEND and COPY assembler directives.  The needed source files are brought into memory automatically.  After the assembly is finished, the original source file is loaded back into the text edit buffer. \par \par If macros are used, one or more macro files will be needed by the assembler.  The MCOPY and MLOAD directives are used to tell the assembler which macro files to use.  When an operation code is encountered in a source file which does not match any instruction or assembler directive, the macro files are scanned for a macro definition.  The macro, if found, is then expanded into the source stream and assembled into an output file.  Both the source file itself and macro file remain unchanged.\par \par Although the assembler itself, and the initial source file, must be on line when the assemble command is issued, additional source files accessed via COPY or APPEND directives do not need to be in a disk drive when the assembly starts, provided that a full path name is used with the COPY or APPEND directive.  Whenever the assembler encounters a full path name, it stops and checks to make sure that the needed volume is online.  If not, it performs some house keeping and asks for the volume, then continues the assembly after finding the correct volume.  The prompt will look something like\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {Place /ORCA on line.  Press any key when ready. \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par After inserting /ORCA, press any key but ESC, and the assembler will continue.  If a program error results in asking for a disk that does not exist, the ESC key can be pressed so that the assembler knows the disk cannot be made available. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621867}\hich\af4\dbch\af4\loch\f4 Assembler Parameters{\*\bkmkend _Toc497621867}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par All commands which cause an assembly or compile can be followed with a number of parameters which set the assembler options. (Assemble and compile are equivalent.  The operating system loads the assembler or compiler based on the language number contained in the file header.) Abbreviation of parameter names is not allowed. \par \par All of the parameters except NAMES have corresponding assembler directives.  If both a parameter and a directive are used, the parameter setting is superseded by the assembler directive when the assembler directive is found in the source file.  Source lines before the assembler directive is found will be under the control of the command line parameter setting. \par \par }{\b\fs28 \hich\af4\dbch\af4\loch\f4 KEEP=outfile}{\tab \tab Keep File Name\par \par This parameter tells the assembler to keep the object module it produces; that is, store the generated object code to disk.  The disk file outfile is used for the output file; the file name must follow ProDOS conventions. \par \par }{\b LIST OFF}{\tab \tab \tab Don't List Output\par \par The normal output from the assembler is suppressed.  Only the pass messages, errors and symbol tables will be listed.  LIST ON can be coded, but it is redundant, since the assembler normally lists output. \par \par }{\b NAMES=(n1,n2, ... ,nx)}{ Subroutines to Assemble\par \par The assembler will assemble only the subroutines whose names are listed. Subroutines are given names using the START directive, as explained on page 149.  The output object file will contain only the subroutines listed; however, it will be named as part of a collection of files from previous assemblies of the same source file in a way that allows the link editor to link files from different assemblies together.  See the operating system reference manual for a description of how this is done. \par \par Assembler directives which are global in scope will still be resolved, whether or not they are in one of the subroutines assembled.  These directives are: \par \par }\pard \qj\keepn\widctlpar\adjustright {\tab ABSADDR\tab generate absolute addresses\par \tab APPEND\tab append a source file\par \tab COPY\tab \tab copy a source file\par \tab ERR\tab \tab print errors\par \tab EXPAND\tab expand DC statements\par \tab DC\tab \tab declare constant\par \tab GEN\tab \tab generate macro expansions\par \tab GEQU\tab \tab define global symbolic constant\par \tab INSTIME\tab generate instruction times\par \tab IEEE\tab \tab enable IEEE format numbers\par \tab KEEP\tab \tab keep output file\par \tab LIST\tab \tab list output\par \tab MCOPY\tab \tab copy macro file\par \tab MDROP\tab \tab drop macro file\par \tab MERR\tab \tab maximum error level\par \tab MLOAD\tab load macro file\par \tab MSB\tab \tab set most significant bit\par \tab PRINTER\tab send output to the printer\par \tab RENAME\tab rename op code\par \tab SYMBOL\tab print symbol tables\par \tab 65816\tab \tab enable 65816 op codes\par }\pard \qj\widctlpar\adjustright {\tab 65C02\tab \tab enable 65C02 op codes\par \par The operands of these directives cannot contain labels unless they appear inside a program segment, and the segment that they appear in is assembled.  If these rules are not followed, an invalid operand error will result.  The directives themselves are described in Chapter 17. \par \par }{\b ORG=org}{\tab \tab \tab Set Origin\par \par Assembly will begin at the fixed memory location specified to the right of the equal sign.  The origin may be coded in decimal or hexadecimal.  If hexadecimal numbers are used, the number must be preceded with a $ character. \par \par }{\b SYMBOL OFF}{\tab \tab Symbol Table Off\par \par Symbol tables are not listed.  SYMBOL ON can be coded, but is redundant, since the assembler prints symbol tables by default. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621868}\hich\af4\dbch\af4\loch\f4 The Assembly Process{\*\bkmkend _Toc497621868}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621869}\hich\af4\dbch\af4\loch\f4 Pass One{\*\bkmkend _Toc497621869}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The source file is assembled one subroutine (program segment) at a time. Each subroutine goes through two passes.  The first pass resolves local labels.  When pass one encounters an END directive or the end of the source file, it passes control to pass two.  Lines which appear outside of program segments do not contain labels, so they can be completely resolved in pass one. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621870}\hich\af4\dbch\af4\loch\f4 Pass Two{\*\bkmkend _Toc497621870}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When pass two is called, it starts at the beginning of the program segment, as defined by the START or DATA directive.  Pass two then assembles each line for the last time.  Pass one has already resolved any local labels, so pass two can produce both the object code output and the assembly listing.  External labels are resolved as $8000, possibly with some offset value.  External zero page labels, indicated in the source listing by a < character before the expression, are resolved to $80. \par \par When pass two finishes with a subroutine, it prints the local symbol table.  It then passes control back to pass one to begin the next subroutine.  If there are no more subroutines to assemble, control is returned to the operating system.  Depending on the "assemble" command given, the operating system passes control to either the monitor or link editor.  If the link editor is called, it uses the object modules created by the assembler as input.  These are relocated and global labels are resolved, giving an executable binary file as output. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621871}\hich\af4\dbch\af4\loch\f4 Controlling the Speed{\*\bkmkend _Toc497621871}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This assembler has a throttle: paddle zero can be used to slow down the assembly listing as pass two prints it.  This is desirable when only screen output is being produced, rather than using the PRINTER ON directive to create an assembly listing on a printer.  To slow down the listing, turn paddle zero counterclockwise.  Speed can be recovered by turning the paddle clockwise. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621872}\hich\af4\dbch\af4\loch\f4 Stopping the Listing{\*\bkmkend _Toc497621872}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {At any time during pass two, the assembly may be stopped by pressing any keyboard character.  Note that the assembly will stop only if a line or symbol table is being printed, and not for the pass headings (which lists the subroutine name).  This provides a quick way to scan for errors; by turning off the listing and symbol table, only the output of error lines can stop the listing.  Pressing a key at the beginning of the assembly will then stop the listing at the next error.  Since the pass headings are still displayed for each subroutine, the subroutine which contains the error may be determined. \par \par To restart the listing, any key but ESC may be pressed.  The listing will continue until another key is pressed to stop it again.  If the listing has been stopped, and ESC is pressed, the text editor is entered.  The line that would have been printed next will be at the top of the edit page, with the cursor at the beginning of that line. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621873}\hich\af4\dbch\af4\loch\f4 Terminal E\hich\af4\dbch\af4\loch\f4 rrors{\*\bkmkend _Toc497621873}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If the assembler encounters a terminal error (such as a symbol table overflow), it returns control to the operating system.  The operating system then enters the text editor automatically, and places the line that caused the error at the top of the text edit window. This allows identification of the offending line, even if pass two had not started and no listing had been produced yet. \par \par A list of terminal errors is contained in Appendix A. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621874}\hich\af4\dbch\af4\loch\f4 The RESET Key{\*\bkmkend _Toc497621874}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If the RESET key is pressed during an assembly, control is returned to the operating system.  The operating system enters the text editor as if a terminal error has occurred.  The editor is entered, and the current line is displayed, showing where the assembly process had been interrupted.  If this was done during a macro resolution, the line displayed is the macro call statement.  If the RESET key is used while a disk write is in progress, information may be lost on the diskette. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621875}\hich\af4\dbch\af4\loch\f4 The Assembly Listing{\*\bkmkend _Toc497621875}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621876}\hich\af4\dbch\af4\loch\f4 Screen Listings{\*\bkmkend _Toc497621876}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A listing on the screen is produced during pass two unless the assembler is instructed not to list the output. Each subroutine begins with two messages announcing the subroutine name and pass.  The listing continues with the assembled code. \par \par Each output line has four parts.  The first part is a line number.  This is a four digit decimal number, starting at 0001 on the first line and incrementing for each source line.  The line number is incremented even if the output line is not listed.  Thus, even if listing is turned off for part of the assembly, it is still possible to know exactly how many lines the assembler has processed.  Lines generated by a macro are not considered source lines, so they do not have a line number. \par \par Next is the current relative address.  This is the memory location that the code would be at if the subroutine were placed at location $0000 by the link editor.  (Despite this offset, labels defined relative to the program counter within the range zero to $FF are not zero page; the origin of $0000 is simply for convenience in calculation.  Internally, the actual origin in the relocatable object module is $1000.  The link editor outputs indicate where the subroutine is actually located in a given binary file.) Next comes a sequence of up to four bytes, printed in hexadecimal.  This is the code that was generated by the assembler.  Finally, the source statement that generated the code is printed. \par \par If an error is detected in the source statement, it is printed on the next line.  All error messages are text messages, not simply error numbers. The errors are explained in Appendix A. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621877}\hich\af4\dbch\af4\loch\f4 Printer Listings{\*\bkmkend _Toc497621877}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If the PRINTER ON directive is issued in a source file, subsequent lines are sent to the printer.  The assembler expects an eighty column printer with an interface card in slot one. \par \par Printed listings are generally the same as listings to the screen, except that the messages announcing the start of various passes are not printed. The assembler assumes sixty-six lines per page, and prints on sixty of those lines.  Six lines are skipped after each block of sixty lines to allow for page breaks.  After printing the symbol tables for a subroutine, the assembler skips to the top of the next page. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 16: Coding Instructions}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621878}\hich\af4\dbch\af4\loch\f4 Chapter 16: Coding Instructions{\*\bkmkend _Toc497621878}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621879}\hich\af4\dbch\af4\loch\f4 Types of Source Statements{\*\bkmkend _Toc497621879}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There are four types of lines in an assembly language source listing. The first is the comment line.  Its purpose is to allow text to be inserted in the source listing in order to document the program.  Two other line types are instructions and assembler directives.  They are coded in the same way, and are described together here.  The last is the macro call statement, detailed in Chapter 18. \par \par Assembler source file lines may be up to eighty columns long, numbered from one to eighty.  Since most printers use eighty columns, assembler source lines should generally be restricted to fifty-seven columns, as twenty-three columns must be allowed for information printed by the assembler.  If this is not done, printed assembler output will wrap around to the next line.  Aside from making the listing difficult to read, it also causes the assembler to miscount the number of lines of printed output, misplacing future page breaks.\par \par Note that many printers allow compression of text, so that more than 80 columns can be printed on a single line.  If at least 103 characters can be printed on a line, wrap-around will not occur.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621880}\hich\af4\dbch\af4\loch\f4 Comment Lines{\*\bkmkend _Toc497621880}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There are five forms of lines which are regarded as comment lines by the assembler.  They are described by use. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621881}\hich\af4\dbch\af4\loch\f4 The Blank Line{\*\bkmkend _Toc497621881}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Any blank line is treated as a comment line.  Blank lines are often used to logically separate sections of code. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621882}\hich\af4\dbch\af4\loch\f4 The Characters *, ;, and !{\*\bkmkend _Toc497621882} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Any line with an asterisk (*), semicolon (;), or exclamation mark (!) in column one is treated as a comment.  Any text in the line is ignored. It will be printed when the source listing is generated by the assembler.  Note that symbolic parameters are expanded whether or not they are in a comment.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621883}\hich\af4\dbch\af4\loch\f4 The Period{\*\bkmkend _Toc497621883}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Any line with a period (.) in column one is treated as a comment.  These lines are not printed in the source listings produced by the assembler, unless the TRACE ON directive has been used. These lines are intended for use as labels for conditional assembly branches.  (See AIF and AGO in Chapter 18.)\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621884}\hich\af4\dbch\af4\loch\f4 Instructions{\*\bkmkend _Toc497621884}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An assembly language statement, whether an instruction, directive or macro, has four basic parts.  The only exception to this format is a line that contains only a comment, as discussed above.  These four fields are the label, operation code, operand and comment. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621885}\hich\af4\dbch\af4\loch\f4 The Label{\*\bkmkend _Toc497621885}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Each line may begin with a label, which is required for a few directives.  The label must begin in column 1, and cannot contain imbedded blanks.  Each label starts with an alphabetic character, the tilde (~), or the underscore (_), and is followed by zero or more alphanumeric characters, tildes (~) or underscores (_).  Both tildes and underscores are significant.  Labels may be any length, but only the first ten characters are significant. \par \par Note that labels starting with the tilde character are reserved for use in macros and libraries supplied by the Byte Works.\par \par It is best not to use A as a label, since it can cause confusion between absolute addressing using the label A and accumulator addressing. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621886}\hich\af4\dbch\af4\loch\f4 The Operation Code{\*\bkmkend _Toc497621886}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operation code field is reserved for an assembly language instruction, assembly directive, or macro.  At least one space must be left between the label and the operation code.  If no label is coded, the operation code can begin in any column from two to forty.  Normally, the operation code begins in column ten.  The tab line has a tab stop in this column for convenient placement. \par \par Operation code mnemonics for machine-language instructions are always three character alphabetic strings.  The assembler allows the following substitutions for the standard 6502 operation codes: \par \par }\pard \qj\widctlpar\tx720\tx2160\tx3600\tx3960\adjustright {\tab \tab }{\ul Standard}{\tab \tab }{\ul Also Allowed}{\par           \par \tab \tab BCC\tab \tab BLT\par \tab \tab BCS\tab \tab BGE\par \tab \tab CMP\tab \tab CPA\par }\pard \qj\widctlpar\adjustright {\par Assembler directives vary in length from two to seven characters.  The operation codes for assembler directives are listed in Chapter 17 and Chapter 18.  Macro operation codes, which are a form of user-defined operation code, are described in Chapter 18. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621887}\hich\af4\dbch\af4\loch\f4 The Operand Field{\*\bkmkend _Toc497621887}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand is the information that the instruction uses to perform its function.  There must be at least one space between the operation code and operand.  The operand normally starts in column sixteen; a tab stop is provided to allow easy movement to that location.  Formats for the operand field vary a great deal.  Refer to the descriptions of the individual operation codes for the format to be used in forming their operand fields.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621888}\hich\af4\dbch\af4\loch\f4 Instruction Operand Format{\*\bkmkend _Toc497621888}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Assembly language instruction operands all consist of basically two parts: a number and a few characters that indicate the kind of addressing mode.  For example, 400 is a valid operand.  It is treated as an absolute address by the assembler.  With the addition of two characters one gets 400,X, which is a different addressing mode called absolute indexed.  However, the number is still the same. \par \par In ORCA, the number can take on many forms.  These forms are covered in detail in the next section, when expression syntax is covered.  For now, only one aspect of the expression is important, and that is whether that expression is a constant or whether it involves external references.  If all of the terms in an expression are constants, i.e, they are numbers or labels whose value are set by EQU directives or GEQU directives, then the assembler can determine the final value of the expression without the aid of the link editor.  In that case, the expression is a constant expression.  If any term in the expression is a label that must be relocated, the expression itself must also be relocated.  This distinction is important, since the assembler is able to automatically select between addressing modes that offer one, two, and three byte variations only if the expression is a constant expression.  In the case of a relocatable expression, the assembler will always opt for the two byte form of the address, unless it is explicitly overridden.  The length of addressing used can be forced by using a < before the expression to force zero page addressing (called direct page addressing on the 65816), a | to force absolute addressing, and a > to force long addressing.  This is illustrated in the operand format table, below.  Note that long addressing is only available on the 65816.  Also note that a ! character can be used instead of |, just in case the keyboard does not support |. \par \par Operands for immediate addressing are resolved to one, or on the 65816 occasionally two, bytes.  It is necessary to be able to select which byte or bytes to use from an expression.  Three operators are provided to select the appropriate bytes from the value.  These operators must appear immediately after the # character, which indicates immediate addressing.  If no operator is used, the least significant byte (or bytes) is used.  This also happens if the < operator is used.  The > operator has the effect of dividing the expression value by 256, selecting the next most significant byte.  Finally, the ^ operator divides the expression by 65536, moving the bank byte into the least significant byte position. \par \par The following table shows all legal operands of both the 6502 and 65816.  The labels ZP, ABS and LONG refer to constant expressions that resolve to one, two or three byte values, respectively.  EXT is a relocatable expression. \par \par \par }\pard \qj\widctlpar\tx720\tx4320\adjustright {\tab Addressing Mode\tab Operand Format\par           \par \tab Implied\tab none needed\par \tab Immediate\tab #ZP\par \tab \tab #>ABS\par                                              \tab #<ABS\par                                              \tab #^ABS\par                                             \tab #ABS\par                                              \tab #>LONG\par                                               \tab #<LONG\par                                               \tab #^LONG\par                                               \tab #LONG\par                                              \tab  /ABS\par                                              \tab /LONG\par \tab Zero Page (Direct Page)\tab ZP\par                                               \tab <EXT\par \tab Absolute\tab |ZP\par                                               \tab ABS\par                                               \tab EXT\par \tab Absolute Long \tab >ZP\par                                               \tab >ABS\par                                               \tab LONG\par                                               \tab >EXT\par \tab Relative\tab ABS\par                                               \tab EXT\par \tab Zero Page Indexed\tab ZP,X\par \tab  (Direct Page Indexed)\tab ZP,Y\par                                               \tab <EXT,X\par                                               \tab <EXT,Y\par \tab Absolute Indexed\tab |ZP,X\par                                               \tab |ZP,Y\par                                               \tab ABS,X\par                                               \tab ABX,Y\par                                               \tab EXT,X\par                                               \tab EXT,Y\par \tab Absolute Long Indexed\tab >ZP,X\par                                               \tab >ABS,X\par                                               \tab >EXT,X\par                                               \tab LONG,X\par \tab Absolute Indirect\tab (ABS)\par \tab Zero Page Indirect\tab (ZP)\par                                               \tab (<EXT)\par \tab Zero Page Indirect Long\tab [ZP]\par                                               \tab [<ZP]\par \tab Zero Page Indirect Indexed\tab (ZP),Y\par                                               \tab (<EXT),Y\par \tab Zero Page Indirect\tab [ZP],Y\par \tab  Indexed Long\tab [<EXT],Y\par \tab Zero Page Indexed\tab (ZP,X)\par \tab  Indirect\tab (<EXT,X)\par \tab Absolute Indexed Indirect\tab (ZP,X)\par \tab \tab (ABS,X)\par \tab \tab (EXT,X)\par \tab Stack Relative\tab ZP,S\par \tab \tab <EXT,S\par \tab Stack Relative Indirect\tab (ZP,S),Y\par \tab  Indexed\tab (<EXT,S),Y\par \tab Accumulator\tab A\par \tab Block Move\tab EXT,EXT\par \tab \tab ZP,ZP\par \tab \tab ABS,ABS   \par \tab \tab LONG,LONG\par }\pard \qj\widctlpar\adjustright {          \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621889}\hich\af4\dbch\af4\loch\f4 Expressions{\*\bkmkend _Toc497621889}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Whenever a number is allowed in an operand field, whether in a 6502 instruction or in a directive, an expression may be used.  In their most general form, expressions resolve to an integer in the range -2147483648 to 2147483647.  The result of a logical operation is always 0 or 1, corresponding to false and true.  If an arithmetic value is used in an assembler directive which expects a boolean result, 0 is treated as false, and any other value is treated as true. \par \par Syntactically, an expression is a simple expression, or two simple expressions separated by a logical comparison operator. \par \par }{\hich\af7\dbch\af4\loch\f7 expression\par }{\par }{{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley73\piccropl0\piccropr0\piccropt0\piccropb0\picw416\pich93\picwgoal8320\pichgoal1860\macpict\bliptag-666093413\blipupi72{\*\blipuid d84c389bbb410dba8373464061ef7cb3}0582ffffffff005c019f001102ff0c00ffffffffffff0000ffff0000019f0000005c00000000000000a00082001e0001000affffffff005c019f00090000000000000000000b0013001b0041000100120014006d0009ffffffffffffffff004800a10096000c0100000002000000000000000001000a0005001b00100069002c000c00150948656c76657469636100030015000d0009002e00040000ff000010005d01a0005d01a0002b1c0d1173696d706c652065787072657373696f6e00a000970001000affffffff005c019f00090000000000000000000b0013001300410025007e003800910009ffffffffffffffff004800090000000000000000004100250099003800ac0009ffffffffffffffff0048000900000000000000000041002500b4003800c70009ffffffffffffffff0048000900000000000000000041002500cf003800e20009ffffffffffffffff0048000900000000000000000041002500ea003800fd0009ffffffffffffffff004800090000000000000000004100250105003801180009ffffffffffffffff004800090000000000000000000b0013001b004100490129005c01840009ffffffffffffffff004800a10096000c0100000002000000000000000001000a004d013200580180001581200028005501331173696d706c652065787072657373696f6e00a000970001000affffffff005c019f0071001e000a000700100013000d001300100007000d0007000a0007000d00130022000d0007fa000071001e000a01930010019f000d019f00100193000d0193000a0193000d019f0020000d006d000d01930071001e001900880025008e0025008b001900880019008b0019008e0025008b00220019008b00f10071001e001900a3002500a9002500a6001900a3001900a6001900a9002500a60022001900a600f10071001e001900be002500c4002500c1001900be001900c1001900c4002500c10022001900c100f10071001e001900d9002500df002500dc001900d9001900dc001900df002500dc0022001900dc00f10071001e001900f4002500fa002500f7001900f4001900f7001900fa002500f70022001900f700f10071001e0019010f00250115002501120019010f00190112001901150025011200220019011200f100220052018309000071001e000a018d00160193000a019000160193001601900016018d000a019000220052019000c4002200370087001b0071001e0052011e0058012a0055012a0058011e0055011e0052011e0055012a0020005500880055011e0071001e004600a3005200a9005200a6004600a3004600a6004600a9005200a60022003700a6000f0071001e004600be005200c4005200c1004600be004600c1004600c4005200c10022003700c1000f0071001e004600d9005200df005200dc004600d9004600dc004600df005200dc0022003700dc000f0071001e004600f4005200fa005200f7004600f4004600f7004600fa005200f70022003700f7000f0071001e0046010f00520115005201120046010f004601120046011500520112002200370112000f00a10096000c0100000002000000000000000001000a0029008500340093002800310086013d00a0009700a10096000c0100000002000000000000000001000a0029009c003400ab0015c180002917023c3e00a0009700a10096000c0100000002000000000000000001000a002a00b8003500c700154480002b1c01023c3d0000a0009700a10096000c0100000002000000000000000001000a002900d4003400e30015c7800028003100d5023e3d0000a0009700a10096000c0100000002000000000000000001000a002a00f0003500fe00154a80002b1c01013c00a0009700a10096000c0100000002000000000000000001000a002a010b0035011900158c0000291b013e0000a0009700a0008300ff}}{\par \par Thus, logical comparisons have the lowest priority.  A simple expression is the customary arithmetic expression.  Syntactically, this is expressed as an optional leading sign, a term, and, optionally, a +, -, .OR., or .EOR.  followed by another term. \par \par }\pard \qj\keepn\widctlpar\adjustright {\hich\af7\dbch\af4\loch\f7 simple expression\par }{\par }{{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw398\pich93\picwgoal7960\pichgoal1860\macpict\bliptag649860565\blipupi72{\*\blipuid 26bc15d500ce693ea70ebad86b2d973f}052effffffff005c018d001102ff0c00ffffffffffff0000ffff0000018d0000005c00000000000000a00082001e0001000affffffff005c018d00090000000000000000000b00130013004100010012001400250009ffffffffffffffff004800090000000000000000005100250012003800250009ffffffffffffffff005800090000000000000000000b0013001b00410013003f0026006d0009ffffffffffffffff00480071001e001c00330022003f001f003f00220033001f0033001c0033001f003f0022001f000132000022000a0012f70000230024002309000022000a002409000071001e0010002e001c0034001c00310010002e0010003100100034001c00310022000a003100060071001e001c002e00280034001c003100280034002800310028002e001c003100220028003100060022002e002409000009000000000000000000410049007e005c00ac0009ffffffffffffffff004800090000000000000000000b001300130041002e00bd004100d00009ffffffffffffffff0048000900000000000000000041002e00e1004100f40009ffffffffffffffff004800090000000000000000000b0013001b0041002e01050041013c0009ffffffffffffffff0048000900000000000000000041002e01440041017b0009ffffffffffffffff00480071001e001c01810022018d001f018d00220181001f0181001c0181001f018d0020001f006d001f01810071001e00220160002e0166002e0163002201600022016300220166002e01630022001c016300060071001e00220121002e0127002e0124002201210022012400220127002e01240022001c012400060071001e002200eb002e00f1002e00ee002200eb002200ee002200f1002e00ee0022002200ee00fa0071001e002200c7002e00cd002e00ca002200c7002200ca002200cd002e00ca0022001c00ca00060071001e005200ac005800b8005500ac005200b8005500b8005800b8005500ac0020005500b80055016000220040015f00120071001e0046012100520127005201240046012100460124004601270052012400220040012400060071001e004600eb005200f1005200ee004600eb004600ee004600f1005200ee0022004000ee00060071001e004600c7005200cd005200ca004600c7004600ca004600cd005200ca0022004000ca000600220052007ef7000071001e001c00760028007c001c00790028007c0028007900280076001c007900220052007900d600a10096000c0100000002000000000000000001000a0017004800220061002c000c00150948656c76657469636100030015000d0009002e00040000ff000010005d018e005d018e002b491f05207465726d00a0009700a10096000c0100000002000000000000000001000a004d0087005800a00015fe70002b3f3605207465726d00a0009700a10096000c0100000002000000000000000001000a00320117003d012f00157ce00028003a0118042e4f522e0000a0009700a10096000c0100000002000000000000000001000a00320156003d01730015fc9000293f052e414e442e0000a0009700a10096000c0100000002000000000000000001000a00050018001000260015fc300028000d0019012b00a0009700a10096000c0100000002000000000000000001000a002900180034002600153db0002a24012d0000a0009700a10096000c0100000002000000000000000001000a003200c3003d00d100153c60002bab09012b00a0009700a10096000c0100000002000000000000000001000a003200e7003d00f500157de0002924012d0000a0009700a0008300ff}}{\par \par }\pard \qj\widctlpar\adjustright {A term is a factor, optionally followed by one of the operators *, /, .AND., or | (the bit shift operator) and another term.  .AND. is a logical operator, asking if the terms on either side are true.  If both are true, so is the result, otherwise the result is false.  The vertical bar (or, optionally, !) is a bit shift operator.  The first operand is shifted the number of bits specified by the right operand, with positive shifts shifting left and negative shifts shifting right.  Thus, a|b is the same as a*(2^b). \par \par }{term\par }{\par }{{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex92\picscaley92\piccropl0\piccropr0\piccropt0\piccropb0\picw330\pich75\picwgoal6600\pichgoal1500\macpict\bliptag-1734828977\blipupi72{\*\blipuid 98989c4f201137560d78aae52d7c4600}0426ffffffff004a0149001102ff0c00ffffffffffff0000ffff000001490000004a00000000000000a00082001e0001000affffffff004a014900090000000000000000000b0013001b004100010012001400490009ffffffffffffffff00480009000000000000000000410037005a004a00910009ffffffffffffffff004800090000000000000000000b001300130041001c00a2002f00b50009ffffffffffffffff0048000900000000000000000041001c00c6002f00d90009ffffffffffffffff004800090000000000000000000b0013001b0041001c00ea002f010f0009ffffffffffffffff004800090000000000000000000b001300130041001c0120002f01330009ffffffffffffffff00480071001e000a000700100013000d001300100007000d0007000a0007000d00130022000d0007fa000071001e000a013c00100148000d01480010013c000d013c000a013c000d01480020000d0049000d013c0071001e0010012a001c0130001c012d0010012a0010012d00100130001c012d00220010012d00fa0071001e001000fd001c0103001c0100001000fd0010010000100103001c010000220010010000fa0071001e001000d0001c00d6001c00d3001000d0001000d3001000d6001c00d30022001000d300fa0071001e001000ac001c00b2001c00af001000ac001000af001000b2001c00af0022001000af00fa00220040005109000071001e000a005200160058000a0055001600580016005500160052000a005500220040005500d60022002e012900120071001e004000910046009d004300910040009d0043009d0046009d0043009100200043009d0043012a0071001e003400ac004000b2004000af003400ac003400af003400b2004000af0022002e00af00060071001e003400d0004000d6004000d3003400d0003400d3003400d6004000d30022002e00d300060071001e003400fd0040010300400100003400fd0034010000340103004001000022002e0100000600a10096000c0100000002000000000000000001000a0006001e0011003b002c000c00150948656c76657469636100030015000d0009002e00040000ff000010004b014a004b014a002b1f0e06666163746f720000a0009700a10096000c0100000002000000000000000001000a003c006a0047008700150090002b4c3606666163746f720000a0009700a10096000c0100000002000000000000000001000a002100a8002c00b6001581200028002900a9012a00a0009700a10096000c0100000002000000000000000001000a002100cd002c00db00150130002925012f0000a0009700a10096000c0100000002000000000000000001000a002100ee002c010b00158150002921052e414e442e0000a0009700a10096000c0100000002000000000000000001000a00200127002b0135001580f0002800280128017c00a0009700a0008300ff}}{\par \par A factor is a constant, label, expression enclosed in parentheses, or a factor preceded by .NOT..  .NOT. is the boolean negation, producing true (1) if the following factor is false, and false (0) if it is true.  Here, a label refers to a named symbol which cannot be resolved at assembly time.  Constants are named symbols defined by a local EQU directive or global GEQU directive, or a decimal, binary, octal or hexadecimal number, or a character constant. \par \par \par }\pard \qj\keepn\widctlpar\adjustright {factor\par \par }\pard \qj\widctlpar\adjustright {{\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw218\pich129\picwgoal4360\pichgoal2580\macpict\bliptag-1350131493\blipupi72{\*\blipuid af86a0db745acf8263b292ab8247382c}0480ffffffff008000d9001102ff0c00ffffffffffff0000ffff000000d90000008000000000000000a00082001e0001000affffffff008000d900090000000000000000000b0013001b0041000100240014006d0009ffffffffffffffff0048000900000000000000000041002500240038005b0009ffffffffffffffff004800090000000000000000000b00130013004100490024005c00370009ffffffffffffffff004800090000000000000000000b0013001b004100490048005c00910009ffffffffffffffff004800090000000000000000000b001300130041004900a2005c00b50009ffffffffffffffff004800090000000000000000000b0013001b0041006d00240080005b0009ffffffffffffffff0048000900000000000000000041006d0075008000ac0009ffffffffffffffff00480071001e000a001900100025000d002500100019000d0019000a0019000d00250022000d0019e8000071001e000a00cd001000d9000d00d9001000cd000d00cd000a00cd000d00d90022000d006d60000022000a0012006c0071001e00760019007c002500790025007c001900790019007600190079002500220079001306000071001e002e001900340025003100250034001900310019002e00190031002500220031001306000071001e0052001900580025005500250058001900550019005200190055002500220055001306000071001e0076006a007c007600790076007c006a0079006a0076006a0079007600220079005b0f000022007600ab1b000071001e000a00c7001600cd000a00ca001600cd001600ca001600c7000a00ca0022007600ca00a00071001e0052003d00580049005500490058003d0055003d0052003d0055004900220055003706000071001e00520097005800a3005500a3005800970055009700520097005500a300220055009106000071001e005200bb005800c7005500c7005800bb005500bb005200bb005500c70022005500b506000071001e002e00bb003400c7003100c7003400bb003100bb002e00bb003100c700220031005b600000a10096000c0100000002000000000000000001000a0005002e00100057002c000c00150948656c76657469636100030015000d0009002e00040000ff000010008100da008100da002b2f0d08636f6e7374616e740000a0009700a10096000c0100000002000000000000000001000a002900300034004800158380002b0224056c6162656c00a0009700a10096000c0100000002000000000000000001000a004d002b005800390015849000280055002c012800a0009700a10096000c0100000002000000000000000001000a004d0056005800880015834000292b0a65787072657373696f6e00a0009700a10096000c0100000002000000000000000001000a004d00a9005800b70015055000295301290000a0009700a10096000c0100000002000000000000000001000a00710032007c004f00150400002800790033052e4e4f542e00a0009700a10096000c0100000002000000000000000001000a00710082007c009f0015031000295006666163746f7200a0009700a0008300ff}}{\par \par constant\par \par }{{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw218\pich201\picwgoal4360\pichgoal4020\macpict\bliptag310198623\blipupi72{\*\blipuid 127d415f77f02b19d569fd48857b29c4}0482ffffffff00c800d9001102ff0c00ffffffffffff0000ffff000000d9000000c800000000000000a00082001e0001000affffffff00c800d900090000000000000000000b0013001b004100010036001400a30009ffffffffffffffff004800090000000000000000004100250036003800a30009ffffffffffffffff004800090000000000000000004100490036005c00a30009ffffffffffffffff0048000900000000000000000041006d0036008000a30009ffffffffffffffff00480009000000000000000000410091003600a400a30009ffffffffffffffff004800090000000000000000004100b5003600c800a30009ffffffffffffffff00480071001e000a002b00100037000d00370010002b000d002b000a002b000d00370022000d002bd6000071001e000a00cd001000d9000d00d9001000cd000d00cd000a00cd000d00d90022000d00a32a000020000a001200be00120071001e00be002b00c4003700c1003700c4002b00c1002b00be002b00c10037002200c1001318000071001e002e002b00340037003100370034002b0031002b002e002b0031003700220031002be8000071001e0052002b00580037005500370058002b0055002b0052002b0055003700220055002be8000071001e0076002b007c003700790037007c002b0079002b0076002b0079003700220079002be8000071001e009a002b00a00037009d003700a0002b009d002b009a002b009d00370022009d002be8000071001e000a00c7001600cd000a00ca001600cd001600ca001600c7000a00ca0020001600ca00be00ca002200be00c6dc000071001e002e00bb003400c7003100c7003400bb003100bb002e00bb003100c70022003100a318000071001e005200bb005800c7005500c7005800bb005500bb005200bb005500c70022005500a318000071001e007600bb007c00c7007900c7007c00bb007900bb007600bb007900c70022007900a318000071001e009a00bb00a000c7009d00c700a000bb009d00bb009a00bb009d00c70022009d00a3180000a10096000c0100000002000000000000000001000a0005003f00100084002c000c00150948656c76657469636100030015000d0009002e00040000ff00001000c900da00c900da002b400d0e657175617465642073796d626f6c0000a0009700a10096000c0100000002000000000000000001000a0029003f0034007d001504c0002a240d62696e617279206e756d6265720000a0009700a10096000c0100000002000000000000000001000a004d003f00580078001585f0002a240c6f6374616c206e756d62657200a0009700a10096000c0100000002000000000000000001000a0071003e007c0082001587c000280079003f0e646563696d616c206e756d6265720000a0009700a10096000c0100000002000000000000000001000a0095003f00a0009700158840002b01241268657861646563696d616c206e756d6265720000a0009700a10096000c0100000002000000000000000001000a00b9003e00c4009000150b30002800c1003f1263686172616374657220636f6e7374616e740000a0009700a0008300ff}}{\par \par }\pard \qj\keepn\widctlpar\adjustright {binary number\par \par }\pard \qj\widctlpar\adjustright {{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw182\pich66\picwgoal3640\pichgoal1320\macpict\bliptag2118191628\blipupi72{\*\blipuid 7e410a0c3a53549d89b1a9134d541545}024effffffff004100b5001102ff0c00ffffffffffff0000ffff000000b50000004100000000000000a00082001e0001000affffffff004100b500090000000000000000000b00130013004100010024001400370009ffffffffffffffff0048000900000000000000000041001c005a002f006d0009ffffffffffffffff0048000900000000000000000041001c007e002f00910009ffffffffffffffff00480071001e000a001900100025000d002500100019000d0019000a0019000d00250022000d0019e8000071001e000a00a9001000b5000d00b5001000a9000d00a9000a00a9000d00b50022000d003772000071001e00100064001c006a001c006700100064001000670010006a001c006700220010006700fa0071001e00100088001c008e001c008b001000880010008b0010008e001c008b00220010008b00fa0022002e008700120023c1000071001e000a00490016004f000a004c0016004f0016004c00160049000a004c00220040004c00d60071001e003400640040006a0040006700340064003400670034006a004000670022002e0067000600a10096000c0100000002000000000000000001000a0005002a00100038002c000c00150948656c76657469636100030015000d0009002e00040000ff000010004200b6004200b6002b2b0d012500a0009700a10096000c0100000002000000000000000001000a0020005f002b006d00158010002b351b0220300000a0009700a10096000c0100000002000000000000000001000a00200084002b00920015010000292501310000a0009700a0008300ff}}{\par \par }\pard \qj\keepn\widctlpar\adjustright {octal number\par \par }\pard \qj\widctlpar\adjustright {{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw173\pich48\picwgoal3460\pichgoal960\macpict\bliptag301523240\blipupi72{\*\blipuid 11f8e1284492211c745a1f0cd0135b82}01c2ffffffff002f00ac001102ff0c00ffffffffffff0000ffff000000ac0000002f00000000000000a00082001e0001000affffffff002f00ac00090000000000000000000b0013001300410001001b0014002e0009ffffffffffffffff004800090000000000000000000b0013001b0041001c0048002f007f0009ffffffffffffffff00480071001e000a00100010001c000d001c00100010000d0010000a0010000d001c0022000d00010f000071001e000a009f001000ab000d00ab0010009f000d009f000a009f000d00ab0022000d002e71000022000a0090001b0071001e0025007f002b008b0028007f0025008b0028008b002b008b0028007f00220028008b060000220025003f09000071001e000a004000160046000a0043001600460016004300160040000a004300220025004300f100a10096000c0100000002000000000000000001000a000500200010002e002c000c00150948656c76657469636100030015000d0009002e00040000ff000010003000ad003000ad002b210d014000a0009700a10096000c0100000002000000000000000001000a00200052002b006f0015a250002b321b0820202020302e2e370000a0009700a0008300ff}}{\par \par }\pard \qj\keepn\widctlpar\adjustright {decimal number\par \par }\pard \qj\widctlpar\adjustright {{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw128\pich30\picwgoal2560\pichgoal600\macpict\bliptag-224060332\blipupi72{\*\blipuid f2a51c541bc089b646f58bd64f82b1a5}0140ffffffff001d007f001102ff0c00ffffffffffff0000ffff0000007f0000001d00000000000000a00082001e0001000affffffff001d007f00090000000000000000000b0013001b0041000100240014005b0009ffffffffffffffff00480071001e000a001900100025000d002500100019000d0019000a0019000d00250022000d000118000071001e000a00730010007f000d007f00100073000d0073000a0073000d007f0022000d005b18000022000a006c00120023a6000071001e000a001300160019000a0016001600190016001600160013000a00160022001c001600fa00a10096000c0100000002000000000000000001000a000500340010004b002c000c00150948656c76657469636100030015000d0009002e00040000ff000010001e0080001e0080002b350d0520302e2e3900a0009700a0008300ff}}{\par \par }\pard \qj\keepn\widctlpar\adjustright {hexadecimal number\par \par }\pard \qj\widctlpar\adjustright {{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw241\pich64\picwgoal4820\pichgoal1280\macpict\bliptag1054065079\blipupi72{\*\blipuid 3ed3c1b7af4be6ef1053911ad3a0af1d}026affffffff003f00f0001102ff0c00ffffffffffff0000ffff000000f00000003f00000000000000a00082001e0001000affffffff003f00f000090000000000000000000b0013001300410001001c0014002f0009ffffffffffffffff004800090000000000000000000b0013001b0041001c0093002f00ca0009ffffffffffffffff00480071001e00070010000d001c000a001c000d0010000a001000070010000a001c0022000a00010f0000a10096000c0100000002000000000000000001000a000500210010002f002c000c00150948656c76657469636100030015000d0009002e00040000ff000010004000f1004000f1002b220d012500a000970001000affffffff003f00f00071001e000600e3000c00ef000900ef000c00e3000900e3000600e3000900ef00200009002d000900e3000900000000000000000041001c0053002f008a0009ffffffffffffffff004800a10096000c0100000002000000000000000001000a00200062002b0079002b411b0520302e2e3900a0009700a10096000c0100000002000000000000000001000a002000a5002b00bc0015020000294304412e2e4600a000970001000affffffff003f00f00071001e000f00aa001b00b0001b00ad000f00aa000f00ad000f00b0001b00ad0022000900ad00060071001e0010006a001c0070001c006d0010006a0010006d00100070001c006d00220009006d00070022002e00ad000f00238f000071001e000900390015003f0009003c0015003f0015003c001500390009003c002300d80071001e0031006a003d0070003d006d0031006a0031006d00310070003d006d0022002e006d000300a0008300ff}}{\par \par }\pard \qj\keepn\widctlpar\adjustright {character constant\par \par }\pard \qj\widctlpar\adjustright {{\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw254\pich193\picwgoal5080\pichgoal3860\macpict\bliptag-767443619\blipupi72{\*\blipuid d241bd5d4ffa63bc58ac7af0e31abbbc}06a8ffffffff00c000fd001102ff0c00ffffffffffff0000ffff000000fd000000c000000000000000a00082001e0001000affffffff00c000fd00090000000000000000000b001300130041000a0024001d00370009ffffffffffffffff004800090000000000000000000b001b001b0041000a005a002f00a30009ffffffffffffffff004800090000000000000000000b00130013004100400063005300760009ffffffffffffffff0048000900000000000000000041004000870053009a0009ffffffffffffffff0048000900000000000000000041000a00c6001d00d90009ffffffffffffffff004800090000000000000000004100760024008900370009ffffffffffffffff004800090000000000000000000b001b001b00410076005a009b00a30009ffffffffffffffff004800090000000000000000000b00130013004100ac006300bf00760009ffffffffffffffff004800090000000000000000004100ac008700bf009a0009ffffffffffffffff0048000900000000000000000041007600c6008900d90009ffffffffffffffff00480071001e00100019001600250013002500160019001300190010001900130025002200130019e8000071001e0013004f0019005b0016005b0019004f0016004f0013004f0016005b00220016003718000071001e001000bb001600c7001300c7001600bb001300bb001000bb001300c70022001300a318000071001e001000f1001600fd001300fd001600f1001300f1001000f1001300fd0022001300d91800002200130012006c0071001e007c001900820025007f002500820019007f0019007c0019007f00250022007f001306000071001e0080004f0086005b0083005b0086004f0083004f0080004f0083005b002200830037180000220017004800320071001e00460058004c006400490064004c00580049005800460058004900640022004900490f000071001e0046007c004c008800490088004c007c0049007c0046007c0049008800220049007606000071001e001000a9001c00af001000ac001c00af001c00ac001c00a9001000ac0022001c00ac002a00220046009912000022001300b400ee00238b000071001e0007003c001300420013003f0007003c0007003f000700420013003f002300060071001e007c00bb008200c7007f00c7008200bb007f00bb007c00bb007f00c70022007f00a318000022007c00d812000071001e001000e8001c00ee001000eb001c00ee001c00eb001c00e8001000eb0022007c00eb00a000220083004800320071001e00b2005800b8006400b5006400b8005800b5005800b2005800b50064002200b500490f000071001e00b2007c00b8008800b5008800b8007c00b5007c00b2007c00b50088002200b500760600002200b5009912000071001e007f00a9008b00af007f00ac008b00af008b00ac008b00a9007f00ac002200b500ac00d60022008000b400ee0022006e003f75000071001e0074003c008000420080003f0074003c0074003f007400420080003f0022006e003f000600a10096000c0100000002000000000000000001000a000e002a00190038002c000c00150948656c76657469636100030015000d0009002e00040000ff00001000c100fe00c100fe002b2b16012700a0009700a10096000c0100000002000000000000000001000a000e0064002f0096001537e000293a096b6579626f6172640d0000153aa0002a0b0a6368617261637465720d0015bb60002a0b0c6f74686572207468616e202700a0009700a10096000c0100000002000000000000000001000a00790065009a009800157750002b0155096b6579626f6172640d00157a10002a0b0a6368617261637465720d0015fad0002a0b0c6f74686572207468616e202200a0009700a10096000c0100000002000000000000000001000a000e00cd001900db001530c00028001600ce012700a0009700a10096000c0100000002000000000000000001000a0044006a004f00780015e8a00028004c006b012700a0009700a10096000c0100000002000000000000000001000a0044008f004f009d0015a08000292501270000a0009700a10096000c0100000002000000000000000001000a007a002b008500390015586000280082002c012200a0009700a10096000c0100000002000000000000000001000a007a00cd008500db00158a400029a201220000a0009700a10096000c0100000002000000000000000001000a00b0006a00bb00780015bc20002800b8006b012200a0009700a10096000c0100000002000000000000000001000a00b0008e00bb009c0015ee0000292401220000a0009700a0008300ff}}{\par }{\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621890}\hich\af4\dbch\af4\loch\f4 The\hich\af4\dbch\af4\loch\f4  Comment Field{\*\bkmkend _Toc497621890}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In-line comments can start in any column past the first space after the operand field.  If an instruction does not require an operand field, they can start in any column after the first space past the operation.  Comments generally start in column forty-one.  A tab stop is provided in that column for easy movement.\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chap\hich\af7\dbch\af4\loch\f7 ter 17: Assembler Directives}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621891}\hich\af4\dbch\af4\loch\f4 Chapter 17: Assembler Directives{\*\bkmkend _Toc497621891}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621892}\hich\af4\dbch\af4\loch\f4 Introduction{\*\bkmkend _Toc497621892}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An instruction is a line that tells the assembler how to build a machine language command for the microprocessor.  An assembler directive tells the assembler itself to take some action.  In some cases, this may involve reserving memory or setting up data tables for use by the program. Conditional assembly directives tell the assembler how to modify lines of source code, and what order to process them in.  Other directives define the beginning and end of subroutines, assign values to labels, and perform various housekeeping functions. \par \par Conditional assembly directives and macro language directives are covered in the next chapter. \par \par Except for the operand field, an assembler directive is coded in the same way as an instruction.  The operand field is used to tell the assembler directive what to do.  Since there are a variety of assembler directives, there are a variety of types of operands.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621893}\hich\af4\dbch\af4\loch\f4 Descriptions of Directives{\*\bkmkend _Toc497621893}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In the descriptions below, each directive has a model line showing the format for the directive.  Anything that appears in uppercase in the model must be typed exactly as shown.  Entries shown in lowercase represent variables.  These are described in the table below.  If there are two or more choices, these are shown separated by a vertical bar (|).  Optional entries are enclosed in square brackets.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab ABSADDR ON|OFF\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par indicates that the ABSADDR directive can take ON or OFF as an operand.  An optional label can be coded.  Finally, a comment can appear after the operand.\par \par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {variable\tab description\par \par comment\tab Zero or more characters intended to document the program.  Comments are not assembled by the assembler, but they are processed by the macro processor, which expands any symbolic parameters in the comment field.\par \par expression\tab An expression is a logical or mathematical expression that resolves to a number.  Both labels and constants can be used in the same expression.  For details, see page 128.\par \par lab\tab A label.  Labels start with an alphabetic character, underscore or tilde and are followed by zero or more alphanumeric characters, tildes and underscores.  Only the first ten characters are significant.\par \par opcode\tab One of the operation codes recognized by the assembler, e.g. LDA, START.\par \par pathname\tab A full or partial path name.  If ProDOS considers it legal, the assembler will accept it.  For partial path names, the current prefix is used.\par \par segname\tab The name of a segment, i.e. a name that has appeared as the label of a START or DATA directive.\par \par special\tab An operand whose format cannot be described on a single line.  See the text for details.\par \par string\tab A sequence of ASCII characters.  If the string contains a space, it must be enclosed in either single or double quote marks.  Quote marks within quote marks must be doubled.\par }\pard \qj\widctlpar\adjustright {\par Note that directives whose operand is either ON or OFF have the default listed right after the name of the directive.\par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621894}\hich\af4\dbch\af4\loch\f4 ABSADDR OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Show Absolute Addresse\hich\af4\dbch\af4\loch\f4 s{\*\bkmkend _Toc497621894}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab ABSADDR ON|OFF\tab \tab [comment]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {Since an assembler that produces object modules that are later linked by a linker can never be sure what absolute address code will be located at, ORCA/M does not usually try to show absolute addresses.  When on, this directive gives the assembler's best guess at the final execution address.  If the assembly is a full assembly, the code is not used as a library, and if an ORG is not later specified during the link step, these addresses will be correct.  The addresses appear as a column of two digit hexadecimal numbers at the far left of the listing.\par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621895}\hich\af4\dbch\af4\loch\f4 ALIGN\tab Align to a Boundary{\*\bkmkend _Toc497621895}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab ALIGN\tab  expression\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The ALIGN directive has two distinct uses, depending on where in the program the directive occurs.  If it appears before a START or DATA directive, it tells the link editor to align the segment to a byte boundary divisible by the absolute number in the operand of the ALIGN  directive.   This number must be a power of 2.  For example, to align a segment to a page boundary, use the sequence\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab ALIGN\tab 256\par \tab SEG\tab START\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Within a segment, ALIGN inserts enough zeros to force the next byte to fall at the indicated alignment.  This is done at assembly time, so the zeros show up in the program listing.  If align is used in a subroutine, it must also have been used before the segment, and the internal align must be to a boundary that is less than or equal to the external align. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621896}\hich\af4\dbch\af4\loch\f4 APPEND\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Append a Source File{\*\bkmkend _Toc497621896}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab APPEND\tab  pathname\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Processing is transferred to the beginning of the file pathname.  Any lines following the APPEND directive in the original file are ignored. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621897}\hich\af4\dbch\af4\loch\f4 COPY\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Copy a Source File{\*\bkmkend _Toc497621897}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab COPY\tab pathname\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Processing is transferred to the beginning of the file pathname.  After the entire file is processed, assembly continues with the first line after the COPY directive in the original file.  A copied file can copy another file; the depth is limited by the available memory, and is generally about three or four levels. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621898}\hich\af4\dbch\af4\loch\f4 DATA\tab  }{\b0 \hich\af4\dbch\af4\loch\f4 Define Data Segment{\*\bkmkend _Toc497621898}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab lab\tab DATA\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The DATA directive is used instead of the START directive to define a special form of program segment which contains no instructions.  Its purpose is to set up data tables which several subroutines can access.  Its labels become local labels for any subroutine which issues a USING directive for the data segment.  The name of the data segment is the label  field of the DATA directive, and is global.  No more than 127 data  segments may be defined in any one program. \par \par Labels within data areas should not be duplicated in other data areas. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621899}\hich\af4\dbch\af4\loch\f4 DC\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Declare Constant{\*\bkmkend _Toc497621899}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab DC\tab special\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The DC directive is used for every type of program constant definition.  The operand begins with an optional repeat count, which must be in the range 1 to 255 decimal.  The variable being defined will be placed in the object file as many times as specified by the repeat count.  Next comes an identifier describing the value type.  This is followed by the value itself, enclosed in quote marks.  The entire sequence can then be followed by a comma and another definition.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab LABEL\tab DC\tab 2I'2,3',I1'4'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would place five integers into memory, four sixteen-bit and one eight-bit.  The resulting hexadecimal values would be\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab 02 00 03 00 02 00 03 00 04\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There are several options available for defining data.  These are listed separately below.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Integer\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nI[x]'expression[,expression,...]'\par \tab nI1<'expression[,expression,...]'\par \tab nI1>'expression[,expression,...]'\par \tab nI1^'expression[,expression,...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Integers can be defined in a variety of lengths, where the length is specified by replacing x with a digit from 1 to 8.  If omitted, two byte integers are generated.  All integers are stored least significant byte first; this is the format used by the 65xx family of CPUs and the ORCA subroutine libraries.  Integers of length one to four bytes can be expressed as expressions, including external references.  Longer integers can only be expressed as a signed decimal number. \par \par When one byte integers are selected, an additional format option is available.  Right before the quote, the >, <, and ^ characters used to select bytes for immediate addressing can be used for the same purpose.  See the examples below for a sample that illustrates this idea.\par     \par The table below gives the valid range of signed integers that can be expressed with each length of integer.  The ORCA subroutine libraries contain subroutines to perform math operations on 2,4 and 8 byte integers. \par     \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Size      \tab     Smallest              Largest\par          \par \tab 1                     -128                   127\par \tab 2                   -32768                 32767\par \tab 3                 -8388608               8388607\par \tab 4              -2147483648            2147483647\par \tab 5            -549755813888          549755813887\par \tab 6          -14073748355328        14073748355327\par \tab 7       -36028797018963968     36028797018963907\par \tab 8     -9223372036854775808   9223372036854775807\par \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\tab \tab Value\par \par \tab DC\tab I'4'\tab 04 00\par \tab DC\tab 2I'3'\tab 03 00 03 00\par \tab DC\tab I1'2,3'\tab 02 03\par \tab DC\tab I'$ABCD'\tab CD AB\par \tab DC\tab I'100/3'\tab 21 00\par \tab DC\tab I1>'$ABCD,$1234'\tab CD 34\par \tab DC\tab I5'3'\tab 03 00 00 00 00\par \tab DC\tab 2I3'1,2'\tab 01 00 00 02 00 00\par \tab \tab \tab 01 00 00 02 00 00\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Address\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nA[x]'expression[,expression,...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This is actually similar to integer, but is more mnemonic for the intended use of building tables of addresses.  Address type DC statements are limited to generating one to four byte values.\par \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\par \par \tab DC\tab A'AD1,AD2'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Reference an Address\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab R'label[,label,...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This generates a reference to an address in the object module without saving the address in the final program.  This allows a program to note that a subroutine will be needed from the subroutine library without reserving storage for the subroutine address.  In conjunction with S below, this allows for the development of a p-system which loads and links only those parts of the p-system language needed by a particular program.  This option is then used by the p-code instructions to insure that any library subroutines that will be needed to execute that instruction are linked. \par \par Another use for this format is to force inclusion of library routines.  Libraries are searched one time from front to back.  Because of this search method, if a library routine calls another that occurred before it in the library, the second routine may not be automatically included.  If this happens, DC R directives can be used to force inclusion of the appropriate subroutines.\par     \par Note that this directive does not take up space in the finished program. \par \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\par \par \tab DC\tab R'LIBRARY'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Soft Reference\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nS[x]'expression[,expression,...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This generates one to four bytes of storage for each address in the operand, but does not instruct the link editor to link the subroutines into the final program.  If the subroutine is not linked, the binary program produced by the link editor will resolve to zero.  This allows a table of addresses to be built, but only those subroutines requested elsewhere in the program (usually by an R type reference) have their addresses placed in the table.  See the discussion of R, above. \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\tab \tab Value\par \par \tab DC\tab S'MISSING,ADR1234'\tab 00 00 34 12\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Hexadecimal Constant\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nH'hex-digit-or-blank[hex-digit-or-blank...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The string between the single quote marks may contain any sequence of hexadecimal digits (0-9 and A-F) and blanks.  Embedded blanks are removed, and the hexadecimal value is stored unchanged.  If there are an odd number of digits, the last byte is padded on the right with a zero: \par     \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\tab \tab Value\par         \par \tab DC\tab H'01234ABCDEF'\tab 01 23 4A BC DE F0\par \tab DC\tab H'1111 2222 3333'\tab 11 11 22 22 33 33\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {        \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Binary Constant\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nB'0|1|blank[0|1|blank...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The string between the quote marks can contain any sequence of zeros, ones, and blanks.  The blanks are removed, and the resulting bit values are stored.  If a byte is left partially filled, it is padded on the right with zeros: \par     \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\tab \tab Value\par         \par \tab DC\tab 2B'01 01 01 10'\tab 56 56\par \tab DC\tab B'111111111'\tab FF 80\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {        \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Character String\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nC'character-string'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The string enclosed in quote marks may contain any sequence of keyboard characters.  If a quote mark is desired, enter it twice to distinguish it from the end of the string: \par     \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\tab \tab Value\par         \par \tab DC\tab C'NOW IS THE TIME ...' 4E 4F 57 20 49 53 20 54\par \tab \tab \tab 48 45 20 54 49 4D 45 20\par \tab \tab \tab 2E 2E 2E\par \tab DC\tab C'NOW''S THE TIME'\tab 4E 4F 57 27 53 20 54 48\par \tab \tab \tab 45 20 54 49 4D 45\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {    \par Normally, strings are stored with the high-order bit off, corresponding to the ASCII character set.  If characters will be written directly to the Apple II screen, it will be desirable to have the high bit set.  In that case, use the MSB directive to change the default. \par \par Note that the double quote character (") can be used instead of single quotes.  Use of the double quote is reserved for use in macros.\par     \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Floating Point\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nF'float-number[,float-number...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Numbers are entered as signed floating point numbers, with an optional signed exponent starting with E.  Embedded blanks are allowed anywhere except within a sequence of digits. \par     \par The number is stored as a four byte floating point number.  Bit one is the sign bit, and is 1 for negative numbers.  The next eight bits are the exponent, plus $7E.  The exponent is a power of two.  The remaining 31 bits are the mantissa, with the leading bit removed since it is always 1 in a normalized number.  The mantissa is stored most significant byte to least significant byte.  This format is compatible with the IEEE floating point standard, and is also used by the ORCA subroutine library.  See the IEEE directive for an way to get five byte floating point numbers compatible with Applesoft. \par     \par Numbers can range from approximately 1E-38 to 1E+38.  The mantissa is accurate to over seven decimal digits. \par     \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\tab \tab Value\par         \par \tab DC\tab F'3,-3,.35E1,6.25 E-2' 40400000\par \tab \tab \tab C0400000\par \tab \tab \tab 40600000\par \tab \tab \tab 3D800000\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {    \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Double Precision Floating Point\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab nD'float-number[,float-number...]'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This is identical to F, except that an eight-byte number is generated with an eleven bit exponent and a forty-eight-bit mantissa.  Numbers can range from about 1E-308 to 1E+308.  The mantissa is accurate to slightly more than 15 decimal digits.  The exponent is stored most significant byte first. \par     \par }\pard\plain \s34\keepn\nowidctlpar\tx360\tx900\tx2880\tx3420\adjustright \f6\fs18\cgrid {\tab Code\tab \tab Value\par         \par \tab DC\tab D'3,-3,.35E1,6.25 E-2' 4008000000000000\par \tab \tab \tab C008000000000000\par \tab \tab \tab 400C000000000000            \par \tab \tab \tab 3FF0000000000000\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621900}\hich\af4\dbch\af4\loch\f4 DS\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Declare Storage{\*\bkmkend _Toc497621900}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab DS\tab expression\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This directive is used to reserve sections of memory for program use.  The operand is coded the same way as an absolute address for an instruction.  The operand is resolved into a four byte unsigned integer, and that many bytes of memory are reserved. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621901}\hich\af4\dbch\af4\loch\f4 EJECT\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Eject the Page{\*\bkmkend _Toc497621901}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab EJECT\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When a printer is in use, this directive causes the output to skip to the top of the next page.  This can be of help in structuring the output of long subroutines.  The directive does not effect the code sent to the output file in any way. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621902}\hich\af4\dbch\af4\loch\f4 END\tab }{\b0 \hich\af4\dbch\af4\loch\f4 End Program\hich\af4\dbch\af4\loch\f4  Segment{\*\bkmkend _Toc497621902}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab END\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The END directive is the last statement in a program segment or data area.  It directs the assembler to print the local symbol table and delete the local labels from the symbol table. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621903}\hich\af4\dbch\af4\loch\f4 ENTRY\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Define Entry Point{\*\bkmkend _Toc497621903}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab lab\tab ENTRY\tab \tab [comment]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {It may be desirable to enter a subroutine someplace other than the top of the subroutine.  Use of the ENTRY directive allows a global label to be defined for that purpose.  The label field of the ENTRY statement becomes a global label. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621904}\hich\af4\dbch\af4\loch\f4 EQU\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Equat\hich\af4\dbch\af4\loch\f4 e{\*\bkmkend _Toc497621904}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab lab\tab EQU\tab expression\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The label is assigned the value of the operand instead of the location counter.  This allows a numeric value to be assigned to a name, with the name to be used instead of the number in further operands. \par \par Although the operand may contain labels, these labels must already have a value.  If they do not, an error is generated.  This is because the resulting value may be a zero page address.  During the first pass, the assembler has no way of knowing this, since it could not resolve the equate.  Instructions are assumed to be absolute addresses on the first pass, and two bytes are reserved.   On the second pass, the equate would be resolved as zero page.  The addresses would now occupy only one byte, and further addressing would be incorrect. \par \par For the same reason, it is important that equates defining zero page addresses be defined before they are used. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621905}\hich\af4\dbch\af4\loch\f4 ERR ON\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Print Errors{\*\bkmkend _Toc497621905}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab ERR\tab ON|OFF\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If LIST ON has been specified, errors are always printed, regardless of this flag.  If LIST OFF has been specified, this flag allows error lines to still be printed.  If turned off, errors are no longer printed, but the number of errors found will still be listed at the end of the assembly. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621906}\hich\af4\dbch\af4\loch\f4 EXPAND OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Expand DC Statements{\*\bkmkend _Toc497621906}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab EXPAND\tab  ON|OFF\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If turned on, this option causes all bytes generated by DC directives to be shown in the output listing, up to a maximum of sixteen bytes.  Only four bytes of a DC directive can be displayed on a line, so the option defaults to OFF to save paper and patience.  When the option is turned off, only the first four bytes of the generated code are shown with the output. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621907}\hich\af4\dbch\af4\loch\f4 GEN OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Generate Macro Expansions{\*\bkmkend _Toc497621907}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab GEN\tab ON|OFF\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If GEN is turned on, all lines generated by macro expansions are shown on the output listing.  Each line generated by a macro has a + character to the left of the line.  If GEN is turned off, only the macro call is printed in the assembly listing.  Errors within the macro expansion are still printed, along with the line causing the error. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621908}\hich\af4\dbch\af4\loch\f4 GEQU\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Global Equate{\*\bkmkend _Toc497621908}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab lab\tab GEQU\tab expression\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This is identical to the EQU directive, except that the label is saved in the global symbol table.  All program segments are then able to use the label.  Labels defined via the GEQU directive are resolved at assembly time, not link edit time.  They are included in the object module, so library routines can use global equates to make constants available to the main program. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621909}\hich\af4\dbch\af4\loch\f4 IEEE ON\tab }{\b0 \hich\af4\dbch\af4\loch\f4 IEEE Format Numbers{\*\bkmkend _Toc497621909}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab IEEE\tab ON|OFF\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In its default setting, DC directives with F and D operands generate numbers compatible with the IEEE floating point standard.  If IEEE is turned off, F type DC directives will generate Applesoft compatible numbers. D type DC directives are not effected; they always generate IEEE double precision numbers. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621910}\hich\af4\dbch\af4\loch\f4 INSTIME OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Show Instruction Times{\*\bkmkend _Toc497621910}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab INSTIME ON|OFF\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When turned on, this directive causes the assembler to print the number of CPU cycles required to execute a line of code.  The number appears as two characters to the left of the source line.  The first character is the number of cycles normally required by the instruction.  If the number of cycles can change due to some other cause, such as crossing a page boundary during indexing, an asterisk is shown after the number of cycles.\par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621911}\hich\af4\dbch\af4\loch\f4 KEEP\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Keep Object Module{\*\bkmkend _Toc497621911}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab KEEP\tab pathname\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The assembled code is saved on disk as a relocatable object module, using the specified name as the root name.  The link editor may then be used to generate an executable binary file.  This directive may only be used one time, and must appear before any code generating statements. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621912}\hich\af4\dbch\af4\loch\f4 LIST ON\tab }{\b0 \hich\af4\dbch\af4\loch\f4 List Output{\*\bkmkend _Toc497621912}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab LIST\tab ON|OFF\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A listing of the assembler output is sent to the current output device.  If the listing is turned off, the assembly process speeds up by about 10%. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621913}\hich\af4\dbch\af4\loch\f4 LONGA ON\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Accumulator Size Selection{\*\bkmkend _Toc497621913}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab LONGA ON|OFF\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The 65816 CPU is capable of doing sixteen bit operations involving the accumulator and memory; it is also capable of performing eight bit operations the same way the 6502 and 65C02 do.  The size of the accumulator and the amount of memory effected by instructions like LDA, STA and INC are controlled by a bit in the processor status register.  At assembly time, the assembler has no idea how that bit will be set at run time - it is the responsibility of the programmer to tell the assembler using this directive.  LONGA ON indicates 16 bit operations, while LONGA OFF indicates eight bit operations.  The only difference this will make in the assembled program is to change the number of bits placed in the code stream when an immediate load is performed.  For example,\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par \tab \tab LONGA\tab ON\par \tab \tab LDA\tab #2\tab \tab 2 byte operand\par \tab \tab LONGA\tab OFF\par \tab \tab LDA\tab #2\tab \tab 1 byte operand\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The status bit that the CPU uses at run time must be set separately.  To do so, use the REP and SEP instructions. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621914}\hich\af4\dbch\af4\loch\f4 LONGI ON\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Index Register Size Selection{\*\bkmkend _Toc497621914}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab LONGI ON|OFF\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This directive controls the number of bytes reserved for immediate loads to the X and Y registers when using the 65816.  See LONGA for a complete discussion. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621915}\hich\af4\dbch\af4\loch\f4 MCOPY\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Copy Macro Library{\*\bkmkend _Toc497621915}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab MCOPY\tab pathname\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The name of the file is placed in a list of available macro libraries.  If an operation code cannot be identified, all macro files in the list are loaded into the macro buffer in sequence, and checked for a macro with the specified name.  The search begins with the macro file in memory, proceeds to the first file in the list of macro files, and continues through to the last file in the list, in the order the respective MCOPY directives were encountered (skipping the one that was originally in memory).  If no macro with a corresponding name is found, an error is generated. \par \par No more than four macro libraries can be active at any one time.  Macro libraries cannot contain COPY or APPEND directives. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621916}\hich\af4\dbch\af4\loch\f4 MDROP\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Drop a Macro Library{\*\bkmkend _Toc497621916}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab MDROP pathname\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Removes pathname from the list of macro libraries.  This might be necessary if more than four libraries are being used.  It can also speed up processing if a library is no longer needed. \par \par If the macro library is active at the time the MDROP directive is encountered, it is left there and searched for macros until a search is made which loads a different library, or until an MLOAD directive is used. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621917}\hich\af4\dbch\af4\loch\f4 MEM\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Reserve Memory{\*\bkmkend _Toc497621917}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab MEM\tab expression,expression\tab  [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand for this directive is two absolute addresses, separated by a comma.  The absolute addresses specify a range of memory that is to be reserved as a data area.   The link editor will insure that subroutines are not placed in this range of memory.  This is done by checking the length of each subroutine to see if it will enter a reserved area.  If it does, it is started after the end of the reserved area.  This directive is intended for use when the high resolution graphics pages are needed. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621918}\hich\af4\dbch\af4\loch\f4 MERR\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Maximum Error Level{\*\bkmkend _Toc497621918}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab MERR\tab expression\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par MERR sets the maximum error level that can be tolerated and still allow the assembled program to link edit immediately after the assembly (as would happen with a RUN command from the monitor).  The default value is zero.  The operand is evaluated to a one byte positive integer. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621919}\hich\af4\dbch\af4\loch\f4 MLOAD\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Load a Macro Library{\*\bkmkend _Toc497621919}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab MLOAD pathname\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The list of macro libraries is checked.  If pathname is not in the list, it is placed there.  The file is then loaded into the macro library buffer. \par \par This directive can be used to speed up assemblies by helping the macro processor to find macros. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621920}\hich\af4\dbch\af4\loch\f4 MSB OFF}{\b0 \tab \hich\af4\dbch\af4\loch\f4 Set the Mo\hich\af4\dbch\af4\loch\f4 st Significant Bit of Characters{\*\bkmkend _Toc497621920}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab MSB\tab ON|OFF\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Character constants and characters generated by DC statements have bit seven cleared, corresponding to the ASCII character set.  If MSB ON is coded, characters generated have bit seven turned on, and appear normal on the Apple screen display. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621921}\hich\af4\dbch\af4\loch\f4 OBJ\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Set Assembly Address{\*\bkmkend _Toc497621921}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab OBJ\tab expression\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Normally, the assembler assembles code as if it will be executed where it is placed in memory when loaded.  When code will be moved before it is executed, the OBJ directive is used to tell the assembler where the code will be moved to.  That way, the code can physically reside at one location, but be moved to another before execution.  The most common reason for doing this is to install drivers that will remain in memory after the program finishes.\par \par All code that appears after the OBJ directive is assembled as if it will be executed at the address specified in expression.  This effect continues until another OBJ, an OBJEND, or an END is encountered.\par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621922}\hich\af4\dbch\af4\loch\f4 OBJEND\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Cancel OBJ{\*\bkmkend _Toc497621922}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab OBJEND\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Cancels the effect of an OBJ.  See OBJ for details.\par \par  \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621923}\hich\af4\dbch\af4\loch\f4 ORG\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Origin{\*\bkmkend _Toc497621923}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab ORG\tab expression\tab [comment]\par \tab [lab]\tab ORG\tab *+expression\tab [comment]\par \tab [lab]\tab ORG\tab *-expression\tab [comment]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {When the assembly process starts, the assembler assumes that the program will be located at $2000.  The ORG directive can be used to change that default and start the program at some other location.  The location is specified as an absolute address in the operand field.  To do this, place the ORG before the first START or DATA directive. \par \par The ORG directive can also be positioned before any subsequent START or DATA directives to force that segment to a particular fixed address.  Again, the operand is an absolute address, and must be a constant.  In this case, though, the actual method of performing the ORG is to insert zeros until the desired location is realized.  This action is performed by the link editor as the final binary module is built. \par \par The ORG directive can also be used inside a program segment, but in that case the operand must be a *, indicating the current location counter, followed by + or -, and a constant expression.  The location counter is moved forward or backward by the indicated amount.  Thus,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab ORG\tab *+2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par is equivalent to\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DS\tab 2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par while\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab ORG\tab *-1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par deletes the last byte generated.  It is not possible to delete more bytes than have been generated by the current segment. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621924}\hich\af4\dbch\af4\loch\f4 PRINTER OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Send Output to Printer{\*\bkmkend _Toc497621924}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab PRINTER\tab  ON|OFF\tab [comment]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {If PRINTER ON is coded, output is sent to the printer.  A printer capable of printing at least eighty columns is expected there.  If a printer is not connected, the system will hang.  The slot number and printer characteristics may be changed by re-configuring the operating system.  If the option is turned off, output is sent to the video display. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621925}\hich\af4\dbch\af4\loch\f4 RENAME\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Rename Op Codes{\*\bkmkend _Toc497621925}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab RENAME\tab  opcode,opcode\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par ORCA is powerful enough to actually develop a cross assembler using macros.  The only problem is that other CPU's may have an op code that conflicts with an assembly language instruction or an existing ORCA directive.  This problem can be resolved by renaming the existing op code to prevent a conflict.  The operand is the old op code followed by the new one.  In the following example, the first time LDA is encountered, it is a 6502 instruction.  The second time, it is not found in the op code table, so the assembler tries to expand it as a macro. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab INST\tab START\par \tab \tab LDA\tab #1\par \tab \tab END\par \par \tab \tab RENAME\tab LDA,NEW\par \tab MACRO\tab START\par \tab \tab LDA\tab #1\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Restrictions on the RENAME directive are that it cannot be used inside a segment (i.e., it cannot come between a START and END), the new op code name must be eight characters or less, and the op code name cannot contain spaces or the & character. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621926}\hich\af4\dbch\af4\loch\f4 SETCOM\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Set Comment C\hich\af4\dbch\af4\loch\f4 olumn{\*\bkmkend _Toc497621926}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab SETCOM\tab  expression\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There is a column beyond which the assembler will not search for an op code, and will not search for an operand unless there is exactly one space between the op code and operand.  This is customarily where comments are started, so that a comment is not accidentally used as part of an operand.  This column defaults to forty, but can be changed to any number from one to eighty by specifying the number in the operand field of this directive. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621927}\hich\af4\dbch\af4\loch\f4 START\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Start Subroutine{\*\bkmkend _Toc497621927}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab lab\tab START \tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Each program segment (that is, both main programs and subroutines), must begin with a START directive.  Labels defined inside a program segment are local labels, and are valid only inside the program segment that defined them.  There is nothing wrong, for example, with having a local label called LOOP in every program segment in a source file. \par \par Every START directive must have a label.  This becomes a global label.  Therefore, every program segment in the program is able to reference that subroutine, allowing it to be called or jumped to from any program segment (including itself). \par \par The label on the START directive becomes the subroutine name in the object module that is the output of the assembler.  Since it is a global label, the link editor can inform other subroutines of its location at link edit time.  This allows subroutines that are assembled separately to be combined later by the link editor. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621928}\hich\af4\dbch\af4\loch\f4 SYMBOL ON\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Print Symbol Tables{\*\bkmkend _Toc497621928}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab SYMBOL\tab  ON|OFF\tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An alphabetized listing of all local symbols is printed following each END directive.  After all processing is complete, global symbols are printed.  If this option is turned off, assemblies speed up slightly.  The option can also be used to save paper. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621929}\hich\af4\dbch\af4\loch\f4 TITLE\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Print Hea\hich\af4\dbch\af4\loch\f4 der{\*\bkmkend _Toc497621929}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab TITLE [string]\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The title directive has an optional operand.  If coded, it must be a legal string, and must be enclosed in single quote marks if it contains blanks or starts with a single quote mark.  If the string is longer than sixty characters, it is truncated to sixty characters. \par \par If the TITLE directive is used, page numbers will be placed at the top of each page sent to the printer.  If an operand was coded, the string used will be printed at the top of each page, immediately after the page number. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621930}\hich\af4\dbch\af4\loch\f4 TRACE OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Trace Macros{\*\bkmkend _Toc497621930}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab TRACE ON|OFF\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Most conditional assembly directives, covered in the next chapter, do not get printed by the assembler.  This is to avoid line upon line of output that has no real effect on the finished program.  Especially when debugging macros, it is desirable to see all of the lines the assembler processes.  To do this, use TRACE ON. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621931}\hich\af4\dbch\af4\loch\f4 USING\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Using Data Area{\*\bkmkend _Toc497621931}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab USING segname\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This statement should appear in any program segment that wants access to local labels within a given data area.  The operand field contains the name of the data area.  Labels defined within the subroutine take precedence over labels by the same name in data areas. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621932}\hich\af4\dbch\af4\loch\f4 65C02 OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Enable 65C02 Code{\*\bkmkend _Toc497621932}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab 65C02 ON|OFF\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The 65C02 is used the Apple //c, and can be retrofitted to older Apples.  The extra instructions and addressing modes available on that CPU can be enabled and disabled with this directive. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621933}\hich\af4\dbch\af4\loch\f4 65816 OFF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Enable 65816 Code{\*\bkmkend _Toc497621933}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab 65816 ON|OFF\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When off, 65816 instructions and operands are identified as errors by the assembler, allowing 65C02 or 6502 code to be generated without fear of accidentally using a feature not available on the smaller CPU. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 18: Macro and Conditional Assembly Language}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621934}\hich\af4\dbch\af4\loch\f4 Chapter 18: Macro Languag\hich\af4\dbch\af4\loch\f4 e and Conditional Assembly Language{\*\bkmkend _Toc497621934}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621935}\hich\af4\dbch\af4\loch\f4 Introduction to Macros{\*\bkmkend _Toc497621935}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This chapter describes how to create user-defined macros.  It is not necessary to be able to write a macro in order to use one.  It is therefore not necessary to know the material in this chapter in order to use the assembler; the macro language is an advanced capability, which should be studied after the fundamental features of the assembler have been mastered.  In this chapter, all of the macro and conditional assembly language directives are covered in detail.  Chapter 8 of the User's Manual also covers writing macros, but at an introductory level. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621936}\hich\af4\dbch\af4\loch\f4 The Macro File{\*\bkmkend _Toc497621936}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A new macro is created by coding a macro definition, which tells the assembler which instructions to replace the macro call with.  These definitions are kept in a special file called a macro file.  Macro files are created using the text editor in the same way that a source file is created.  The distinction between the two is in the way the assembler handles them.  Macro files are included in the source stream using MLOAD and MCOPY directives.  The assembler loads them into a special area of memory called the macro buffer as they are needed.  When an unidentified operation code is encountered in the source file, the assembler searches for a macro definition of that name in the macro buffer. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621937}\hich\af4\dbch\af4\loch\f4 Writing Macro Definitions{\*\bkmkend _Toc497621937}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There are three macro language directives:  MACRO, MEND, and MEXIT.  These directives are valid only in a macro file; if used inside of a regular source file, they will create an error. \par \par Each macro definition begins with a MACRO directive and ends with an MEND directive.  These directives are coded like an operation code.  No operand or label is needed, and any present is ignored.  Their sole purpose is to set the macro definition apart from others in the file.  Their use will become clear in the examples that follow shortly. \par \par Immediately following the MACRO directive is the macro definition statement.  The name of the macro being defined is placed in the the operation code field.  If the operation code that the assembler is trying to identify matches it, the assembler uses the definition that follows to replace the macro call in the source file with the instructions found in the body of the macro itself.  The macro definition operation code may be any sequence of keyboard characters except blanks or the & character.  It may contain any number characters, but only the first ten are significant. \par \par Consider the following simple macro as an example.  It is used to print a character on the screen.  The Apple monitor has a subroutine called COUT which does this, but it is inconvenient to have to always remember its address.  To remedy this, a macro may be defined, using the same name (COUT) by entering this definition in a new source file called MACROS: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab \tab COUT\par \tab \tab JSR\tab $FDED\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par COUT may now be used as a new instruction: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab \tab MCOPY MACROS\tab COPY 'COUT' MACRO INTO \par \tab !\tab \tab \tab MACRO BUFFER\par \tab \tab LDA\tab #'A'      \par \tab \tab COUT\tab \tab PRINT CHARACTER IN \par \tab !\tab \tab \tab ACCUMULATOR ("A")\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Following the COUT instruction, the assembler includes the macro expansion, yielding the sequence\par \par \tab \tab .\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab .\par \tab \tab .\par \tab \tab LDA\tab #'A'\par \tab \tab COUT\par       +\tab \tab JSR   $FDED\par \tab \tab .\par \tab \tab .\par \tab \tab .\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par in the output listing.  The new instruction COUT may be used as many times as desired anywhere in a source program provided the MCOPY MACROS directive is also included.  The assembler always prints the name of the macro (in this case COUT) to show how instructions that follow were generated; the JSR instruction is the only part of the macro expansion that actually generates code.  The + character at the beginning of the line containing the JSR instruction is put there by the assembler to indicate that the line was generated by the macro processor, rather than coded directly by the programmer.  The lines that comprise the macro expansion are normally not printed in the assembly listing; a GEN ON directive must be issued earlier in the program to list the macro expansion. \par \par The statements between the macro definition statement and the MEND directive are called model statements, since the macro processor uses them as models for the new instructions.  The instruction in the source file that caused the macro to be expanded is called the macro call statement, or simply the macro call. \par \par Macros may contain references to other macros, up to four levels deep.  They cannot contain COPY or APPEND directives. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621938}\hich\af4\dbch\af4\loch\f4 Symbolic Parameters{\*\bkmkend _Toc497621938}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A symbolic parameter is a special variable used by the assembler.  Unlike labels, they are true variables; that is, they may be assigned a value which can later be changed.  They come in three kinds: A for arithmetic, B for boolean (logical) and C for character type. \par \par A symbolic parameter is coded as an & character followed by the symbolic parameter name.  The name itself has the same syntax conventions as a label. \par \par When the assembler encounters a symbolic parameter, it replaces it with its value before assembling the line.  The value may be set in several ways.  One way, described below, is by passing the values during the macro call.  Only character type symbolic parameters may be passed this way; the use of the other types of symbolic parameters will be explained later, in the section covering conditional assembly. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621939}\hich\af4\dbch\af4\loch\f4 Positional Parameters{\*\bkmkend _Toc497621939}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par One way to define a character type symbolic parameter is to include it in the label or operand field of a macro definition statement.  Symbolic parameters defined in this way may be said to be implicitly defined by appearing on the macro definition line.  Character type symbolic parameters defined in this way are used to pass actual values to the symbolic parameters during a macro call, as will be seen in the example below.  Revisiting the macro defined above to output a character, a new, more powerful macro definition may be written which reads\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab &LAB\tab COUT\tab &CHAR\par \tab &LAB\tab LDA\tab &CHAR\par \tab \tab JSR\tab $FDED\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This new macro is called from a source program as follows. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab .\par \tab \tab .\par \tab \tab .\par \tab \tab BEQ\tab L1\par \tab \tab COUT\tab #'A'\par \tab \tab JMP\tab L2\par \tab L1\tab COUT\tab #'B'\par \tab L\tab RTS\par \tab \tab .\par \tab \tab .\par \tab \tab .\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par At assembly time, the following code is generated.  Note again that the assembler includes the macro call statement only to show what generated the new lines; there is no generated code associated with the macro call line itself: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab .\par \tab \tab .\par \tab \tab .\par \tab \tab BEQ\tab L1\par \tab \tab COUT\tab #'A'\par   +\tab \tab LDA\tab #'A'\par   +\tab \tab JSR\tab $FDED\par \tab \tab JMP\tab L2\par \tab L1\tab COUT\tab #'B'\par   +\tab L1\tab LDA\tab #'B'\par   +\tab \tab JSR\tab $FDED\par \tab L2\tab RTS\par \tab \tab .\par \tab \tab .\par \tab \tab .\par \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {The reason that &CHAR is referred to as a positional parameter is that it gets its value by being matched with a character string in the source file by position.  This becomes clear when a macro is defined which has two or more symbolic parameters.  Also note that the symbolic parameter defined in the label field of the macro definition (&LAB) resulted in the label field of the first line of the macro expansion receiving the value of L1 after the second macro call.  The symbolic parameter &LAB was also coded in the first line of the macro body, where the value of the macro call label field was substituted for it during the macro expansion.   Note that if &LAB had been omitted from either place in the macro, L1 would not have been defined and the BEQ L1 statement would have generated an error.\par \par The following example, which is a macro to print two characters, shows how positional parameters are set via the macro call: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab &LAB\tab COUT2\tab &C1,&C2\par \tab \tab LDA\tab &C1\par \tab \tab JSR\tab $FDED\par \tab \tab LDA\tab &C2\par \tab \tab JSR\tab $FDED\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Observe that the two symbolic parameter declarations on the macro definition line were separated by a comma, with no intervening spaces. The comma delimits the different positional parameters; spaces are not allowed.  When the macro is called, as shown below, the actual parameters are coded identically, that is, with commas separating the fields, and no intervening blanks: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab .\par \tab \tab .\par \tab \tab .\par \tab \tab COUT2\tab #'A',#'B'\par       +\tab LDA\tab #'A'\par       +\tab JSR\tab $FDED\par       +\tab LDA\tab #'B'\par       +\tab JSR\tab $FDED\par \tab \tab .\par \tab \tab .\par \tab \tab .\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The macro processor determined which actual parameters to substitute for which symbolic parameters by matching their relative positions in the macro call statements with those in the macro definition. \par \par Once conditional assembly instructions are introduced below, it will be seen that there are times when a positional parameter may (optionally) not be coded.  In this case, nothing need be coded in the source file. However, all commas must be included, as if something had been coded.  The macro processor keeps count of the position using the commas, so that later positional parameters appear in the right place. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621940}\hich\af4\dbch\af4\loch\f4 Keyword Parameters{\*\bkmkend _Toc497621940}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A keyword parameter is another way to reference a symbolic parameter defined in the operand field of a macro statement.  The name of the symbolic parameter is typed, followed by an equal sign, and the value to assign it.  For example, a call to the COUT2 macro could be coded as\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab .\par \tab \tab .\par \tab \tab .\par \tab \tab COUT2\tab C2=#'B',C1=#'A'\par       +\tab LDA\tab #'A'\par       +\tab JSR\tab $FDED\par       +\tab LDA\tab #'B'\par       +\tab JSR\tab $FDED\par \tab \tab .\par \tab \tab .\par \tab \tab .\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When keyword parameter substitution only is used, the order is not important.  The same rules as for positional parameters regarding commas and blanks do apply, however.  Keyword and positional parameters can be mixed.  If this is done, keyword parameters take up a space, and are counted for determining positions.  The macro processor simply counts the number of commas encountered when setting values for positional parameters.  Note that the & character is not coded when referencing a parameter as a keyword.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621941}\hich\af4\dbch\af4\loch\f4 Subscripting Parameters in Macro Call Statements{\*\bkmkend _Toc497621941}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par All types of symbolic parameters may be subscripted.  Character type symbolic parameters defined in the macro definition statement are subscripted by including the subscripted variables in parentheses on the macro call line.  For example, if a macro call statement contained the following phrase in the operand field\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab SUB=(ALPHA,,GAMMA)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par (an example of keyword parameter substitution), the symbolic parameter &SUB for the given expansion would have three subscripts allowed. The initial value of each element would be:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab &SUB(1)\tab \tab 'ALPHA'\par \tab \tab &SUB(2)\tab \tab null string\par \tab \tab &SUB(3)\tab \tab 'GAMMA'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par To effectively use subscripted actual parameters, the macro itself would have to be coded so as to detect the number of subscripts allowed and to take appropriate action via conditional assembly directives. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621942}\hich\af4\dbch\af4\loch\f4 Explicitly Defined Symbolic Parameters{\*\bkmkend _Toc497621942}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The use of character type symbolic parameters in the macro definition and macro call lines was explained above. \par \par In addition to being defined implicitly in the macro definition statement, as in the case of character-type symbolic parameters, all symbolic parameter types (arithmetic, boolean, and character) may be declared explicitly. \par \par Explicitly defined symbolic parameters are not set with actual parameters via a macro call.  Rather, they are used as internal variables within a macro or source file.  Using the conditional directives, their values may be set and reset during the macro expansion, resulting in an extremely powerful conditional assembly capability. \par \par Explicitly defined symbolic parameters may also be subscripted.  The subscript must follow the symbolic parameter name.  Only a single subscript is allowed.  The range that is acceptable depends on the type of the symbolic parameter.  See the descriptions of LCLA, LCLB, LCLC, GBLA, GBLB and GBLC below for details.  A symbolic parameter used as a subscript for another symbolic parameter cannot be subscripted. \par \par In the following example, assume that four symbolic parameters have been defined, as listed below.  The maximum allowable subscripts for the subscripted symbolic parameters are shown with the symbolic parameter name. Next is the type, followed by the value.  Subscripted symbolic parameters have their values listed on successive lines. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {    name           type      value(s)\par     \par     &ART           A         $FE\par     &BIN(2)        B         1  (true)\par                              0  (false)\par     &CHAR          C         'LABEL'\par     &CHAR2(3)      C         'STRING1'\par                              ''  (null string)\par                              'A'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Below are instructions as typed in a macro file, on the left, with the instructions as expanded by the macro processor on the right. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3420\tx4590\tx5220\adjustright \f6\fs18\cgrid {\tab &CHAR\tab LDA\tab &CHAR2(1)\tab LABEL\tab LDA\tab STRING1\par \tab \tab STA\tab &CHAR.&BIN(2)\tab \tab STA\tab LABEL0\par \tab \tab LDA\tab #&ART\tab \tab LDA\tab #254\par \tab \tab BEQ\tab L&BIN\tab \tab BEQ\tab L1\par \tab \tab LDA\tab LB&CHAR2(2)\tab \tab LDA\tab LB\par \tab L&BIN(1)\tab STA\tab EQ&BIN(2)\tab L1\tab STA\tab EQ0\par \tab \tab LD&CHAR2(3) #1\tab \tab LDA\tab #1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Note that a boolean symbolic parameter becomes zero if false and one if true.  The null string is valid; it is replaced by nothing. \par \par The second line demonstrates the use of the period to concatenate symbolic parameters.  The period itself does not appear in the final line.  It can be used after any symbolic parameter, regardless of how that parameter was defined.  It must be used if a symbolic parameter is followed by a character, or if a subscript is followed by a mathematical symbol or expression. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621943}\hich\af4\dbch\af4\loch\f4 Symbolic Parameter Definition Statements{\*\bkmkend _Toc497621943}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Symbolic parameters may be defined either for the current macro expansion or for the entire subroutine.  Defining symbolic parameters whose scope is the entire subroutine allows macros to communicate with each other. Symbolic parameters which are only valid inside a macro are called local symbolic parameters; those valid throughout the subroutine are called global symbolic parameters. \par \par A symbolic parameter definition statement does not contain a label.  The operand field consists of the name of the symbolic parameter to be defined.  If the symbolic parameter is to be subscripted, the maximum allowable subscript must be specified in parentheses immediately following\par  \par Symbolic parameter definition statements are not printed in the output listing unless they contain errors or TRACE ON has been coded.\par \par A permanent global symbolic parameter called &SYSCNT of type arithmetic is available.  Its value is set to one at the beginning of each subroutine and is incremented at the beginning of each macro expansion.  It is used to prevent labels defined inside macros from being duplicated if the same macro is used more than once in the same subroutine.  This is done by concatenating &SYSCNT to any labels used within the macro definition\par itself. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab Examples:\par      \par \tab \tab LCLA\tab &NUM\par \tab \tab GBLC\tab &STRINGS(40)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621944}\hich\af4\dbch\af4\loch\f4 Sequence Symbols{\*\bkmkend _Toc497621944}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The conditional assembly branch instructions AGO and AIF must have someplace to go.  This is provided by sequence symbols. \par \par A sequence symbol is a line with a period in column one, followed by a label.  Comments may follow the label after at least one space. Instructions contained in the line are treated as comments.  The line is not printed in the output listing unless TRACE ON is used. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621945}\hich\af4\dbch\af4\loch\f4 Attributes{\*\bkmkend _Toc497621945}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In certain cases it is desirable to know something about a label or symbolic parameter other than its value.  This information is provided via attributes, which may be thought of as functions that return information about a label or symbolic parameter. \par \par An attribute is coded as an attribute letter, a colon, and the label or symbolic parameter it is to evaluate.  For example, the length attribute of the label LABEL is coded as\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {L:LABEL\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Attributes may be used in operands in the same way that a constant is used. \par \par }{\b C:}{\tab \tab \tab \tab Count\par \par The count attribute gives the number of subscripts defined for a symbolic parameter.  It is normally used to find out if a multiple argument has been assigned to a symbolic parameter by a macro call.  It can also be used to find out if a symbolic parameter (or label) was defined at all; if not, the count attribute is zero.  The count attribute of a defined label is one. \par \par }{\b L:}{\tab \tab \tab \tab Length\par \par The length attribute of a label is the number of bytes generated by the line that defined the label. \par \par The length attribute of an arithmetic symbolic parameter is four.  For a boolean symbolic parameter it is one.  For a character symbolic parameter, it is the number of characters in the current string.  If the symbolic parameter is subscripted, the subscript of the desired element should be specified; otherwise, the first element is assumed. \par \par }{\b S:}{\tab \tab \tab \tab Setting\par \par Setting is a special attribute that returns the current setting of one of the flags set using directives whose operand is ON or OFF.  If the current setting is ON, the result is 1, otherwise the result is 0.  For example, if it were necessary to write a macro which expanded to two different code sequences depending on whether the accumulator was set to 8 or 16 bits on a 65816, one could use S:LONGA to test the current setting of the LONGA directive.  The directives which accept ON or OFF for operands are summarized below. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LIST        LONGA       PRINTER\par \tab \tab SYMBOL      LONGI       MSB\par \tab \tab ERR         65816       IEEE\par \tab \tab GEN         65C02       TRACE\par \tab \tab EXPAND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }{\b T:}{\tab \tab \tab \tab Type\par \par The type attribute evaluates as a character.  The type attribute of a label indicates the type of the operation in the line that defined the label.  For a symbolic parameter, the type attribute is used to distinguish between A, B and C type symbolic parameters.  The character that is returned for each type is indicated in the table below. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {    Character  Meaning\par     \par     A          Address Type DC Statement\par     B          Boolean Type DC Statement\par     C          Character Type DC Statement\par     D          Double Precision Floating Point Type DC\par                Statement\par     F          Floating Point Type DC Statement\par     G          EQU or GEQU Directive\par     H          Hexadecimal Type DC Statement\par     I          Integer Type DC Statement\par     K          Reference Address Type DC Statement\par     L          Soft Reference Type DC Statement\par     M          Instruction\par     N          Assembler Directive\par     O          ORG Statement\par     P          ALIGN Statement\par     S          DS Statement\par     X          Arithmetic Symbolic Parameter\par     Y          Boolean Symbolic Parameter\par     Z          Character Symbolic Parameter\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If a DC statement contains more than one type of variable, the first type in the line determines the type attribute. \par \par It is worth noting that many assembler directives are not printed, yet they do have a label field.  Generally, it is not a good idea to put labels in this field, since the line will not be found in the output listing. \par \par Examples of macro definitions and how they use conditional assembly directives can be found in the macro library. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621946}\hich\af4\dbch\af4\loch\f4 Conditional Assembly and Macro Directives{\*\bkmkend _Toc497621946}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621947}\hich\af4\dbch\af4\loch\f4 ACTR\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Assembly Count\hich\af4\dbch\af4\loch\f4 er{\*\bkmkend _Toc497621947}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab ACTR expression\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Each time a branch is made in a macro definition, a counter is decremented.  If it reaches zero, processing of the macro stops, to protect from infinite loops. \par \par The ACTR directive is coded with a number from 1 to 255 in the operand field.  The counter is then assigned this value.  The ACTR directive is used to limit the number of loops caused by conditional assembly branches.  In loops with more than 255 iterations, it must be reset within the body of the loop to prevent the counter from reaching zero. \par \par The counter value is set to 255 automatically at the beginning of each macro. \par \par The ACTR directive is not printed unless it contains an error or TRACE ON is used. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621948}\hich\af4\dbch\af4\loch\f4 AGO\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Unconditional Branch{\*\bkmkend _Toc497621948}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab AGO seq-symbol\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand contains a sequence symbol.  The macro definition (or subroutine, if not used in a macro) is searched for a matching sequence symbol.  Processing continues with the instruction immediately following\par the sequence symbol. \par \par The search range for a source file includes the entire file, not just the subroutine containing the AGO directive.  Searching begins in the forward direction and continues until the sequence symbol is found or the end of the file is reached.  The search then begins with the instruction before the AGO directive and continues toward the beginning of the file. \par \par The search process in a macro definition is similar, except that the search will not cross an MEND or MACRO directive. \par \par Searches for sequence symbols will not cross into a copied or appended file; they are limited to the file in memory. \par \par The AGO directive is not printed in the output listing unless it contains an error or TRACE ON is used.\par \par In the following example, the assembler encounters the initial AGO directive.  Processing continues at the sequence symbol.  All lines between the AGO and sequence symbol are ignored by the assembler. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab AGO\tab .THERE\par \tab !  THESE LINES ARE IGNORED.\par \tab \tab .\par \tab \tab .\par \tab \tab .\par \tab .THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Processing branches is one of the most time consuming tasks performed by the assembler.  For that reason, it should be kept in mind that when looking for a sequence symbol, the assembler searches forward first, then backward.  If a sequence symbol appears before the branch, code a ^ character instead of a period for the first character of the sequence symbol.  This forces the assembler to skip the forward search, proceeding directly to the backward search.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab AGO\tab ^THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par will not search forward at all, but will search backward in the file. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621949}\hich\af4\dbch\af4\loch\f4 AIF\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Conditiona\hich\af4\dbch\af4\loch\f4 l Branch{\*\bkmkend _Toc497621949}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab AIF expression,seq-symbol\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand contains a boolean expression followed by a comma and a sequence symbol.  The boolean expression is evaluated.  If true, processing continues with the first statement following the sequence symbol; if false, processing continues with the first statement following the AIF directive.  As with the AGO directive, the . in the sequence symbol may be replaced with a ^ character to speed up branches in the case where the destination sequence symbol comes before the AIF directive. \par \par The AIF directive is not printed in the output listing unless it contains an error or TRACE ON is used.\par \par As an example, consider a file which contains the following statements\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LCLA\tab &LOOP\par \tab &LOOP\tab SETA\tab 4\par \tab .TOP\par \tab \tab ASL\tab A\par \tab &LOOP\tab SETA\tab &LOOP-1\par \tab \tab AIF\tab &LOOP>0,.TOP\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The output listing will contain these lines:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab ASL\tab A\par \tab \tab ASL\tab A\par \tab \tab ASL\tab A\par \tab \tab ASL\tab A\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par While the above example is very straight forward, there is a more efficient way to code it.  Coding for efficiency, the loop would be\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LCLA\tab &LOOP\par \tab &LOOP\tab SETA\tab 4\par \tab .TOP\par \tab \tab ASL\tab A\par \tab &LOOP\tab SETA\tab &LOOP-1\par \tab \tab AIF\tab &LOOP,^TOP\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The first difference, which appears in the last line, is that we have used the ^ character on the symbolic parameter to indicate that the label occurs before the AIF statement.  This allows the assembler to skip searching for .TOP in the forward direction, saving a great deal of time.  A smaller savings is also realized in the same statement by depending on the fact that any non-zero value is treated as true in a logical expression.  The branch will be made as long as &LOOP is non-zero.\par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621950}\hich\af4\dbch\af4\loch\f4 AINPUT\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Assembler Input{\*\bkmkend _Toc497621950}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab sym-parm AINPUT [string]\tab \tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand is optional and, if coded, consists of a literal string.  If the operand is coded, the string contained in the operand is printed on the screen during pass one as an input prompt.  The assembler then waits for a line to be entered from the standard input (usually the keyboard, but it can be redirected from a text file).  The string entered is assigned to the character type symbolic parameter specified in the label field. \par \par During pass one, keyboard responses are saved by the assembler.  When an AINPUT directive is encountered on pass two, the response given in pass one is again placed in the symbolic parameter specified in the label field.  Thus, keyboard response is only needed one time for each input, but the symbolic parameter is set to the response on both pass one and pass two.  This means that it is safe to use the response for conditional branching. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Example:\par     \par \tab &RESULT AINPUT\tab  'Prompt: '\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621951}\hich\af4\dbch\af4\loch\f4 AMID\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Assembler Mid String{\*\bkmkend _Toc497621951}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab sym-parm AMID string,expression,expression \tab \tab \tab \tab \tab \tab \tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This is a special kind of character type set symbol which provides a mid-string function.  It has three arguments in the operand field, separated by commas.  Embedded blanks are not allowed. \par \par The first argument is the string to be operated on.  It must be a simple string (no concatenation is allowed).  If the string contains embedded blanks or commas, it must be enclosed in quote marks.  Quote marks inside quote marks must be doubled. \par \par The second and third arguments are of type arithmetic.  The second argument specifies the position within the target string of the first character to be chosen.  It must be greater than zero.  Characters from the target string are numbered sequentially, starting with one.  The third argument specifies the number of characters to be chosen. \par \par If the combination of the last two arguments result in an attempt to select characters after the last character of the target string, the selection is terminated.  Characters already selected are still valid. \par \par The resulting string is assigned to the character type symbolic parameter specified in the label field. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \tab \par \tab instruction\tab \tab \tab resulting string\par \par \tab &CHAR\tab AMID\tab 'TARGET',2,3\tab \tab ARG\par }\pard \s16\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright {\tab &CHAR\tab AMID\tab 'TARGET',5,3\tab \tab ET\par }\pard \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright {\tab &CHAR\tab AMID\tab 'TARGET',7,3\tab \tab null string\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621952}\hich\af4\dbch\af4\loch\f4 ANOP\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Assembler No Operation{\*\bkmkend _Toc497621952}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab ANOP\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The ANOP directive does nothing.  It is used to define labels without an instruction.  The label assumes the current value of the program counter. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621953}\hich\af4\dbch\af4\loch\f4 ASEARCH\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Assembler String Search{\*\bkmkend _Toc497621953}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab sym-parm ASEARCH string,string,expression\par \tab \tab \tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This is a special form of arithmetic set symbol.  It implements a string search function for character type symbolic parameters. \par \par The ASEARCH directive has three arguments.  The first is of type character, and is the target string to be searched.  The second is also of type character, and is the string to search for.  The last is of type arithmetic, and is the position in the target string to begin the search. The search can be conducted for any sequence of keyboard characters. \par \par The label field contains an arithmetic symbolic parameter.  It is set to the character position in the target string where the search string was first found.  If the search string was not found, it receives the value zero. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par     \par \tab instruction\tab \tab resulting value\par     \par \tab &NUM\tab ASEARCH 'TARGET',GE,1\tab 4\par \tab &NUM\tab ASEARCH 'TARGET',GE,5\tab 0\par \tab &NUM\tab ASEARCH 'TARGET',X,1\tab 0\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621954}\hich\af4\dbch\af4\loch\f4 GBLA\tab    }{\b0 \hich\af4\dbch\af4\loch\f4 Declare Global Arithmetic Symbolic Parameter{\*\bkmkend _Toc497621954}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab GBLA sym-parm\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Defines the arithmetic symbolic parameter sym-parm.  The symbolic parameter is valid for the rest of the segment that it is defined in, including inside macros and in the source file itself.\par \par The symbolic parameter can be declared as subscripted by following the name with a number inclosed in parentheses.  If used, the subscript must be in the range one to sixty.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par      \par \tab \tab GBLA\tab &NEW\par \tab \tab GBLA\tab &NUM(45)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621955}\hich\af4\dbch\af4\loch\f4 GBLB\tab      }{\b0 \hich\af4\dbch\af4\loch\f4  Declare Global Boolean Symbolic Parameter{\*\bkmkend _Toc497621955}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab GBLB sym-parm\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Defines the boolean symbolic parameter sym-parm.  The symbolic parameter is valid for the rest of the segment that it is defined in, including inside macros and in the source file itself.\par \par The symbolic parameter can be declared as subscripted by following the name with a number inclosed in parentheses.  If used, the subscript must be in the range 1 to 240.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab \tab GBLB\tab &BOOL\par \tab \tab GBLB\tab &ARR(45)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621956}\hich\af4\dbch\af4\loch\f4 GBLC\tab    }{\b0 \hich\af4\dbch\af4\loch\f4  Declare Global Character Symbolic Parameter{\*\bkmkend _Toc497621956}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab GBLC sym-parm\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Defines the character symbolic parameter sym-parm.  The symbolic parameter is valid for the rest of the segment that it is defined in, including inside macros and in the source file itself.\par \par The symbolic parameter can be declared as subscripted by following the name with a number inclosed in parentheses.  If used, the subscript must be in the range 1 to 240.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab \tab GBLC\tab &CHAR\par \tab \tab GBLC\tab &STRARR(45)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621957}\hich\af4\dbch\af4\loch\f4 LCLA\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Declare Local Arithmetic Symbolic Parameter{\*\bkmkend _Toc497621957}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab LCLA sym-parm\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Defines the arithmetic symbolic parameter sym-parm.  The symbolic parameter is valid only in the macro in which it is defined, including inside macros and in the source file itself.\par \par The symbolic parameter can be declared as subscripted by following the name with a number inclosed in parentheses.  If used, the subscript must be in the range one to sixty.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab \tab LCLA\tab &NUM\par \tab \tab LCLA\tab &ARR(45)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621958}\hich\af4\dbch\af4\loch\f4 LCLB  \tab        }{\b0 \hich\af4\dbch\af4\loch\f4 Declare Local Boolean Symbolic Parameter{\*\bkmkend _Toc497621958}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab LCLB sym-parm\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Defines the boolean symbolic parameter sym-parm.  The symbolic parameter is valid only in the macro in which it is defined, including inside macros and in the source file itself.\par \par The symbolic parameter can be declared as subscripted by following the name with a number inclosed in parentheses.  If used, the subscript must be in the range 1 to 240.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab \tab LCLB\tab &BOOL\par \tab \tab LCLB\tab &ARR(45)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621959}\hich\af4\dbch\af4\loch\f4 LCLC\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Declare Local Character Symbolic Parameter{\*\bkmkend _Toc497621959}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab LCLC sym-parm\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Defines the character symbolic parameter sym-parm.  The symbolic parameter is valid only in the macro in which it is defined, including inside macros and in the source file itself.\par \par The symbolic parameter can be declared as subscripted by following the name with a number inclosed in parentheses.  If used, the subscript must be in the range 1 to 240.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab \tab LCLC\tab &STR\par \tab \tab LCLC\tab &ARR(45)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621960}\hich\af4\dbch\af4\loch\f4 MACRO\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Start Macro Definition{\*\bkmkend _Toc497621960}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab MACRO\tab \tab [comment]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {The MACRO directive marks the start of a macro definition.  It can be used only in a macro file.  See the discussion at the beginning of the chapter for details on its use.\par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621961}\hich\af4\dbch\af4\loch\f4 MEND\tab }{\b0 \hich\af4\dbch\af4\loch\f4 End Macro Definition{\*\bkmkend _Toc497621961}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab  \tab MEND\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The MEND directive marks the end of a macro definition.  It can be used only in a macro file.  See the discussion at the beginning of the chapter for details on its use.\par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621962}\hich\af4\dbch\af4\loch\f4 MEXIT\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Exit Macro{\*\bkmkend _Toc497621962}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MEXIT\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An MEXIT directive indicates that a macro expansion is complete.  Unlike MEND, it does not indicate the end of the macro definition.  A good way conceptualize this directive is to think of it as a return from a macro definition.  The MEND is the end of the definition, but the MEXIT can return from within the macro definition. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621963}\hich\af4\dbch\af4\loch\f4 MNOTE\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Macro Note{\*\bkmkend _Toc497621963}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab [lab]\tab MNOTE string[,expression]\tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A macro definition may include an MNOTE directive.  The operand of an MNOTE directive contains a message, optionally followed by a comma and a number.  The assembler prints the message on the output device as a separate line.  If the number is present, it is used as a severity code for an error. \par \par Assume that the following statements appear in a program: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab *  MNOTE FOLLOWS\par \tab \tab MNOTE\tab 'ERROR!',4\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The output would look like this: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab 0432 10FE\tab *  MNOTE FOLLOWS\par \tab ERROR!\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Assuming that there were no other errors in the assembly, the maximum error level found (printed at the end of the assembly) would be four. \par \par MNOTE is designed for use when conditional assembly directives are used to scan parameters passed via a macro call for correct (user defined) syntax.  Although MNOTE statements are intended for use inside macros, they are legal inside of a source program. \par \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621964}\hich\af4\dbch\af4\loch\f4 SETA\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Set\hich\af4\dbch\af4\loch\f4  Arithmetic{\*\bkmkend _Toc497621964}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab sym-parm SETA expression\tab \tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand field is resolved as a four byte signed hexadecimal number and assigned to the symbolic parameter in the label field. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab &NUM\tab SETA\tab 4\par \tab &N(&NUM) SETA\tab &NUM2+LABEL*4\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621965}\hich\af4\dbch\af4\loch\f4 SETB\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Set Boolean{\*\bkmkend _Toc497621965}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab sym-parm SETB expression\tab \tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand field contains a boolean expression, which is evaluated as true or false.  If true, the symbolic parameter is assigned a value of one.  If false, or if the line contains an error, the symbolic parameter is assigned a value of zero. \par \par The boolean expression in the operand field for a SETB directive is coded using the same rules as an absolute address.  It is referred to as a boolean phrase because it most generally takes on a value of true or false (one or zero). \par \par Recall that boolean operators may be used in expressions.  If they are used, the resulting expression has a boolean value that appears as a zero or one used to indicate false and true boolean results.  Arithmetic results are also valid in a boolean expression; thus a boolean variable can be used in the same way as arithmetic variables.  Since only one byte is reserved for each boolean value, the boolean variable selects the least significant byte of an arithmetic result, using it as an unsigned arithmetic value in the range 0 to 255.  Use of such a result in a boolean statement will result in the value being evaluated as true if the value is non-zero, and false if the value is zero. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab &FLAG\tab SETB\tab A<&NUM\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621966}\hich\af4\dbch\af4\loch\f4 SETC\tab }{\b0 \hich\af4\dbch\af4\loch\f4 Set Character{\*\bkmkend _Toc497621966}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab sym-parm SETC string\tab \tab \tab [comment]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operand is evaluated as a character string and assigned to the symbolic parameter.  Several sub-strings may be concatenated to make up the final string; they are separated in the operand field by plus characters (+).  Such strings must be enclosed in quote marks.  Embedded blanks outside of strings are not allowed.  Quote marks inside quote marks must be doubled. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab Examples:\par \par \tab &STRING(4) SETC &STRING\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\tab \hich\af4\dbch\af4\loch\f4 &STR\tab SETC\tab '&FKENAME'+'.OBJ'\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Macro Reference Manual\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 19: Macro Libraries }{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621967}\hich\af4\dbch\af4\loch\f4 Chapter 19: Macro Libraries}{{\*\bkmkend _Toc497621967}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par The ORCA 4.1 macro and subroutine libraries provide a comprehensive set of primitive commands that greatly extend the instructions available to the assembly language programmer.  Because of this extensive library, most programmers will never need to write a macro; instead, appropriate macros are selected from the macro libraries for use in a program.  Macros that require utility subroutines will generate external references which will be automatically resolved by the link editor from the subroutine library.\par \par Since the system is fairly automatic, the macros can be learned as if they were simply extensions to the 6502 instruction set.  The typical steps involved in using the libraries would be:\par \par }\pard \qj\fi-720\li1440\widctlpar\adjustright {1.\tab Write a program conforming to the rules outlined in the macro descriptions.\par \par 2.\tab Run the program through the MACGEN utility to create a unique, tailored macro library for the program.\par \tab \par 3.\tab Add an MCOPY directive at the beginning of the program for the file created by MACGEN.\par \par 4.\tab Assemble and execute the program in the normal way.\par }\pard \qj\widctlpar\adjustright {\par The documentation of the macros is divided into six sections.  The rest of this one discusses topics of general interest to all (or most) of the macros.  This includes definition of the data formats used by the macros, as well as the four addressing modes which are common throughout the macro libraries.  The last five sections discuss the macros themselves.  Macros are discussed by topic.  The first section deals with the mathematics macros, the second with input and output, the third with ProDOS support, the fourth with graphics, and the last section with those macros that did not fit into one of the previous sections.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621968}\hich\af4\dbch\af4\loch\f4 Addressing Modes{\*\bkmkend _Toc497621968}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Like the instruction set of the CPU, macros use a variety of addressing modes to increase the power and flexibility of each macro.  There are four addressing modes supported by the macros; immediate, absolute, indirect and stack.\par \par Immediate addressing is available on most macros that require an input to perform their function.  An immediate operand is coded as a pound sign (#) followed by the value for the operand.  All data types are supported.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab PUT8\tab #4500000000\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would write the approximate population of the Earth to the screen.\par \par Absolute addresses are coded as a number, label, or expression, using the same rules as absolute addresses on instructions.  An absolute address designates the memory location to use as a source or destination by the macro.\par \par Indirect addresses take the form of an address which points to the address of the data rather than the data itself.  Indirect addressing is indicated by enclosing the absolute address where the effective address is stored in soft brackets.  Thus,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MUL4\tab \{P1\},\{P2\}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par multiplies the number pointed to by P1 by the one pointed to by P2, placing the result where P1 points.\par \par Stack addressing refers to taking a source value from the "evaluation stack", or storing a result there.  The evaluation stack is the stack used by the ORCA high level languages to pass parameters and evaluate expressions. It is a software stack, distinct from the hardware stack in page 1 for the 6502.  The INITSTACK macro can be used to set up this stack.  Further use is made using any of the I/O, math or move macros.  A stack operand is indicated with an asterisk (*).\par \par When discussing stack operations, it is customary to refer to values based on the "top of stack" (TOS).  Thus, the value on the top of the stack is said to be at TOS, while the number "below" the top one is at TOS-1.  With this in mind, the following operation divides the two byte integer at TOS-1 by the one at TOS, placing the result at TOS:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DIV2\tab *,*\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This addressing mode is very convenient for reverse polish notation calculation, and must be used when doing parameter passing to high level languages.  For any other application, it will probably not be useful.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621969}\hich\af4\dbch\af4\loch\f4 Data Types{\*\bkmkend _Toc497621969}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The macros support several data types, including three lengths of integers, characters, strings, and boolean variables.  Typing is not enforced; it is possible to read a four byte integer into an area, then access it as a two byte integer.  The type of data in use is indicated by a single character from the table below.   This character is used as a part of the macro name.  For example, the PUTx macro can be used to write any of these variable types to an output device; the type is indicated by replacing the x with one of the characters.  Thus, PUT2 writes a two byte integers, while PUTS writes a string.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx1080\tx2520\tx3960\adjustright \f6\fs18\cgrid {\tab }{\ul Character}{\tab }{\ul Type}{\par \par \tab 2 \tab two byte integer\par \tab 4\tab four byte integer\par \tab 8\tab eight byte integer\par \tab C\tab character\par \tab S\tab string\par \tab B\tab boolean\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The general convention of using a lowercase character in the macro name to represent a group of very similar macros is followed throughout the descriptions of the macros.  This saves a great deal of space, makes the task of learning the macros easier, and serves to connect macros that might otherwise be scattered across the manual.  Lowercase letters are never used in the name of a macro for anything else.  Of course, your own macros can indeed use lowercase letters in the macro name.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621970}\hich\af4\dbch\af4\loch\f4 Two Byte Integers{\*\bkmkend _Toc497621970}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par As the name implies, two byte integers require two bytes of storage each.  Two's complement notation is used, with the least significant byte stored first, followed by the most significant.  Two byte integers range from -32768 to 32767.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621971}\hich\af4\dbch\af4\loch\f4 Four Byte Integers{\*\bkmkend _Toc497621971}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {Four byte integers require four bytes of storage.  They are represented in two's compliments notation with the least significant byte stored first, proceeding sequentially to the most significant byte, which is stored last.  The range represented by four byte integers is -2147483548 to 2147483647.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621972}\hich\af4\dbch\af4\loch\f4 Eight Byte Integers{\*\bkmkend _Toc497621972}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Eight byte integers require eight bytes of storage, are stored in two's complement notation, and are represented with the least significant byte first, proceeding to the most significant byte.  The range of the eight byte integers is -9223372036854775808 to 9223372036854775807.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621973}\hich\af4\dbch\af4\loch\f4 Character{\*\bkmkend _Toc497621973}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A character requires one byte for storage.  The ASCII character set is used to represent characters; in general, it doesn't matter if the high bit is on or off.  The system provides all inputs with the high bit off, and converts any outputs as needed; the only conflict arises for comparisons.  For that reason, it is recommended that character data always be represented with the high bit off. \par \par Control characters have differing effects on various output devices.  If an output device cannot respond to a given control character because that character is not defined, the control character is ignored.  Check the technical descriptions of individual hardware devices for details.  All terminal control codes are respected by the ORCA CRT drivers.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621974}\hich\af4\dbch\af4\loch\f4 Strings{\*\bkmkend _Toc497621974}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Strings are variable length sequences of characters.  Each string is made up of three parts.  The first part, which requires one byte, contains the maximum number of characters in the string; this can range from 1 to 254.  The next byte contains the number of characters currently in the string; this ranges from 0 to the value of the first byte.  The third field contains the characters in the string itself.  One byte is reserved in this field for each possible character in the string; unused bytes are not defined and have unreliable values.\par \par Strings require two bytes more than the maximum number of characters in the string for storage.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621975}\hich\af4\dbch\af4\loch\f4 Boolean Variables{\*\bkmkend _Toc497621975}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Boolean variables require one byte of storage.  They are either TRUE (non-zero) or FALSE (zero).\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621976}\hich\af4\dbch\af4\loch\f4 Memory Usage{\*\bkmkend _Toc497621976}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The macros may use one or more of the locations $80 to $FC of zero page.  The ORCA operating system uses $FD to $FF.  So long as the evaluation stack is not being used, these macros do not depend on the values of these zero page locations remaining unchanged: a program can also use these locations, so long as it, too, does not mind if the locations are disturbed.\par \par The input macros do not use the GETLN subroutine of the F8 ROM, so they do not modify page 2.  Naturally, the output macros do modify pages 4 to 7, since that is where the Apple display screen is located.  \par \par Page 1 is the hardware stack, and is subject to use by the macros.\par \par All other memory locations used are documented in the Apple ProDOS reference manual, and are only used by the ProDOS macros.\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 20: Mathematics Macros}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621977}\hich\af4\dbch\af4\loch\f4 Chapter 20: Mathematics Macros{\*\bkmkend _Toc497621977}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par The mathematics macros provide support for the three formats of integer numbers described earlier.  When dealing with numbers, it will also be useful to look through the miscellaneous macros, which have number conversion macros and several macros which deal with two byte integers as unsigned numbers.\par \par The macros in this section are contained in the following libraries:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab M6502.INT2MATH\par \tab \tab M6502.INT2MATH2\par \tab \tab M6502.INT4MATH\par \tab \tab M6502.INT8MATH\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The macros described are:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab ABSx \tab N1,N2\tab absolute value function\par \tab ADDx\tab N1,N2,N3\tab add\par \tab CMPx\tab N1,N2\tab signed compare\par \tab DIVx\tab N1,N2,N3\tab divide\par \tab MODx\tab N1,N2,N3\tab remainder function\par \tab MULx\tab N1,N2,N3\tab multiply\par \tab RANx\tab N1\tab random number\par \tab SIGNx\tab N1,N2\tab sign function\par \tab SQRTx\tab N1,N2\tab square root function\par \tab SUBx\tab N1,N2,N3\tab subtract\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621978}\hich\af4\dbch\af4\loch\f4 ABSx\tab Integer Absolute Value{\*\bkmkend _Toc497621978}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par }{\hich\af4\dbch\af4\loch\f4 LAB\tab ABS2\tab NUM1,NUM2\par \hich\af4\dbch\af4\loch\f4 LAB\tab ABS4\tab NUM1,NUM2\par \hich\af4\dbch\af4\loch\f4 LAB\tab ABS8\tab NUM1,\hich\af4\dbch\af4\loch\f4 NUM2\par }{  \par \par Operands:\par \par LAB - Label.\par NUM1 - The argument. \par NUM2 - The result.\par \par \par Description:\par \par The result is the absolute value of the argument.  NUM2 is optional; if it is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  No errors are possible.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab ABS4\tab NUM1,*\tab places the absolute value of\par !\tab \tab \tab  NUM1 on the software stack\par \tab ABS2\tab \{P1\}\tab replaces the number pointed to \par !\tab \tab \tab  by P1 with its absolute value\par \tab ABS8\tab #10000000,NUM1\tab places the value of 10,000,000 \par !\tab \tab \tab  in NUM1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621979}\hich\af4\dbch\af4\loch\f4 ADDx\tab Integer Addition{\*\bkmkend _Toc497621979}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab ADD2\tab NUM1,NUM2,NUM3\par LAB\tab ADD4\tab NUM1,NUM2,NUM3\par LAB\tab ADD8\tab NUM1,NUM2,NUM3\par   \par Operands:\par \par LAB - Label.\par NUM1 - The first argument for the addition.\par NUM2 - The second argument for the addition.\par NUM3 - The result of the addition.\par \par \par Description:\par \par A signed integer addition is performed on the two arguments, NUM1 and NUM2.  NUM3 is optional; if it is coded, the result is placed there, if it  is not coded, the result is placed at NUM1.  The contents of the accumulator  are lost.  If any operand used indirect or stack addressing, the contents of  the Y register are also lost.  If the operation is on four or eight byte  integers, the X and Y registers are both lost.  For a two byte add, if an  overflow occurs, the V flag is set, otherwise it is cleared.  For four and  eight byte operations, an overflows will set the overflow error condition.  The description of the ERROR macro tells how to detect and  report this error.\par \par \par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2610\adjustright \f6\fs18\cgrid {\tab ADD2\tab *,*\tab performs a stack addition, \par !\tab \tab \tab  placing the result on the stack\par \tab ADD4\tab \{P1\},NUM1\tab adds the four byte integer \par !\tab \tab \tab \tab pointed to by P1 to the four \par !\tab \tab \tab \tab byte integer at NUM2, saving \par !\tab \tab \tab \tab the result in the location \par !\tab \tab \tab \tab pointed to by P1\par  \tab ADD8\tab NUM1,#4\tab adds 4 to the eight byte integer \par !\tab \tab \tab \tab  at NUM1\par \tab ADD2\tab NUM1,NUM2,NUM3\tab adds the two byte integers at \par !\tab \tab \tab \tab  NUM1 and NUM2, saving the\par !\tab \tab \tab \tab  result at NUM3\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621980}\hich\af4\dbch\af4\loch\f4 CMPx\tab Integer Compare{\*\bkmkend _Toc497621980}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab CMP2\tab NUM1,NUM2\par LAB\tab CMP4\tab NUM1,NUM2\par LAB\tab CMP8\tab NUM1,NUM2\par   \par \par Operands:\par \par LAB - Label.\par NUM1 - The first argument. \par NUM2 - The second argument.\par \par \par Description:\par \par The first signed integer is compared to the second signed integer.  The C and Z flags are set in the same way that they are set for CMP instructions; C is set if NUM1 >= NUM2 and cleared otherwise, and Z is set if NUM1 = NUM2 and cleared otherwise.  Branch instructions and branch and conditional jump macros can be used after the compare to test the condition codes.\par \par Unlike most two operand instructions, both operands are required for a comparison, and no result (other than than the setting of the status flags) is produced.  The contents of all registers are destroyed.\par \par Note that, unlike the 6502 compare instruction, this comparison is a signed comparison.  For example, the two byte integer $0001 is larger than $FFFF, since the first represents 1 and the second represents -1.  Signed compares are longer in terms of both space and speed than unsigned compares.  If you can avoid using a signed compare, and can instead use an unsigned compare, refer to the CMPW macro.\par \par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2520\adjustright \f6\fs18\cgrid {\tab CMP4\tab NUM1,*\tab compares NUM1 to the four byte \par !\tab \tab \tab  integer on the top of the \par !\tab \tab \tab  evaluation stack; the four byte \par !\tab \tab \tab  integer on the stack is removed \par !\tab \tab \tab  from the stack\par \tab CMP2\tab \{P1\},#4\tab compares the two byte integer \par !\tab \tab \tab  pointed to by P1 to 4\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621981}\hich\af4\dbch\af4\loch\f4 DIVx\tab Integer Division{\*\bkmkend _Toc497621981}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab DIV2\tab NUM1,NUM2,NUM3\par LAB\tab DIV4\tab NUM1,NUM2,NUM3\par LAB\tab DIV8\tab NUM1,NUM2,NUM3\par   \par \par Operands:\par \par LAB - Label.\par NUM1 - The first argument (numerator) for the division.\par NUM2 - The second argument (denominator) for the division.\par NUM3 - The result.\par \par \par Description:\par \par A signed integer division is performed on the two arguments, dividing NUM1 by NUM2.  NUM3 is optional, if it is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If NUM2 is zero, the divide by zero error flag is raised.  See the ERROR macro for a description of the detection and reporting of such errors.\par \par It is important to realize that this is an integer division, and that the result is an integer; thus, 3/2 is 1, not 1.5.\par \par \par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2610\adjustright \f6\fs18\cgrid {\tab DIV4\tab #7,NUM1,NUM2\tab divides 7 by NUM1, placing the \par !\tab \tab \tab  result in NUM2; the third \par !\tab \tab \tab  operand is required, since the \par !\tab \tab \tab  default operand uses immediate \par !\tab \tab \tab  addressing, which cannot be \par !\tab \tab \tab  used by a result\par \tab DIV2\tab #7,#2,NUM1\tab an inefficient way of setting \par !\tab \tab \tab  the number NUM1 to 3\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621982}\hich\af4\dbch\af4\loch\f4 MODx\tab Integer Modulo Function{\*\bkmkend _Toc497621982}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab MOD2\tab NUM1,NUM2,NUM3\par LAB\tab MOD4\tab NUM1,NUM2,NUM3\par LAB\tab MOD8\tab NUM1,NUM2,NUM3\par   \par \par Operands:\par \par LAB - Label.\par NUM1 - The first argument (numerator) for the operation.\par NUM2 - The second argument (denominator) for the operation.\par NUM3 - The result.\par \par \par Description:\par \par A signed integer division is performed on the two arguments, dividing NUM1 by NUM2; the result reported is the unsigned integer remainder.  NUM3 is optional; if is is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If NUM2 is zero, the divide by zero error flag is raised.  See The ERROR macro for a description of the detection and reporting of such errors.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2610\adjustright \f6\fs18\cgrid {\tab MOD2\tab #7,#2,NUM1\tab places 1, the remainder from the \par !\tab \tab \tab \tab division, into NUM1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621983}\hich\af4\dbch\af4\loch\f4 MULx\tab Integer Multiplication{\*\bkmkend _Toc497621983}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab MUL2\tab NUM1,NUM2,NUM3\par LAB\tab MUL4\tab NUM1,NUM2,NUM3\par LAB\tab MUL8\tab NUM1,NUM2,NUM3\par   \par \par Operands:\par \par LAB - Label.\par NUM1 - The first argument for the multiplication.\par NUM2 - The second argument for the multiplication.\par NUM3 - The result.\par \par \par Description:\par \par A signed integer multiplication is performed on the two arguments, NUM1 and NUM2.  NUM3 is optional; if it is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If an overflow of the signed result occurs, the overflow error flag is raised.  See the ERROR macro description for error handling details.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2610\adjustright \f6\fs18\cgrid {\tab MUL4\tab \{P1\},#4\tab multiplies the four byte integer \par !\tab \tab \tab  pointed to by P1 by 4\par \tab MUL2\tab NUM1,NUM2,NUM3 multiplies the two byte \par !\tab \tab \tab  integers at NUM1 and NUM2, \par !\tab \tab \tab  saving the result at NUM3\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621984}\hich\af4\dbch\af4\loch\f4 RANx\tab Integer Random Number Generator{\*\bkmkend _Toc497621984}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab RAN2\tab NUM1\par LAB\tab RAN4\tab NUM1\par LAB\tab RAN8\tab NUM1\par   \par \par Operands:\par \par LAB - Label.\par NUM1 - The result. \par \par \par Description:\par \par A signed integer is generated by a pseudo-random number generator, and the result saved at NUM1.  Since no argument is required, this macro becomes the only integer math macro with a single operand.  All registers are destroyed.\par \par The random numbers generated are evenly distributed across the entire range for the size of the integer being generated; for example, two byte random numbers range from -32768 to 32767.\par \par The random number generator should be initialized by using the SEED macro before the first random number macro is generated.  The SEED macro is described in the last section.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab RAN8\tab NUMBER\tab \tab places an eight byte random \par !\tab \tab \tab \tab  number at NUMBER\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621985}\hich\af4\dbch\af4\loch\f4 SIGNx\tab Integer Sign Function{\*\bkmkend _Toc497621985}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab SIGN2\tab NUM1,NUM2\par LAB\tab SIGN4\tab NUM1,NUM2\par LAB\tab SIGN8\tab NUM1,NUM2\par   \par \par Operands:\par \par LAB - Label.\par NUM1 - The argument. \par NUM2 - The result.\par \par \par Description:\par \par The result is 0 if the argument was zero, 1 if it was positive, and -1 if it was negative.  The result is placed at NUM2 if it is coded, and at NUM1 if it is not.  No errors are possible.  The contents of all the registers are lost.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab SIGN8\tab NUM1\tab replaces NUM1 with the result\par \tab SIGN4\tab *,NUM2\tab places the sign of the number \par !\tab \tab \tab  on the top of the stack into \par !\tab \tab \tab  NUM2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621986}\hich\af4\dbch\af4\loch\f4 SQRTx\tab Integer Square Root{\*\bkmkend _Toc497621986}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab SQRT2\tab NUM1,NUM2\par LAB\tab SQRT4\tab NUM1,NUM2\par LAB\tab SQRT8\tab NUM1,NUM2\par   \par \par Operands:\par \par LAB - Label.\par NUM1 - The argument. \par NUM2 - The result.\par \par \par Description:\par \par The result is the integer square root of the argument.  NUM2 is optional; if it is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If the argument is 0, so is the result.  If the argument is negative, the result is the correct square root for the absolute value of the argument, and the operation exception error flag is raised.  See the ERROR macro for information on detection and reporting of the error.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab SQRT2\tab #450,NUM2\tab places 21 in NUM2\par \tab SQRT4\tab \{P1\}\tab replaces the four byte integer \par !\tab \tab \tab  pointed to by P1 with its \par !\tab \tab \tab  square root\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621987}\hich\af4\dbch\af4\loch\f4 SUBx\tab Integer Subtraction{\*\bkmkend _Toc497621987}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab SUB2\tab NUM1,NUM2,NUM3 \par LAB\tab SUB4\tab NUM1,NUM2,NUM3\par LAB\tab SUB8\tab NUM1,NUM2,NUM3\par   \par \par Operands:\par                                 \par LAB - Label.\par NUM1 - The first argument for the subtraction.\par NUM2 - The second argument for the subtraction.\par NUM3 - Result.\par \par \par Description:\par \par The second argument (NUM2) is subtracted from the first argument (NUM1).  NUM3 is optional; if it is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of the accumulator are lost.  If any operand uses indirect or stack addressing, the contents of the Y register are also lost.  If the operation is on four or eight byte integers, the X and Y registers are both lost.  For two byte operations, V is set if there is an overflow and cleared otherwise.  If the operation is on four or eight byte integers, and an overflow of the signed result occurs, the overflow error flag is raised.  See the ERROR macro for a description of how to detect and report this error.\par \par \par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab SUB2\tab *,#4\tab the two byte signed integer on \par !\tab \tab \tab  the top of the stack is \par !\tab \tab \tab  decremented by four  \par \tab SUB4\tab \{P1\},NUM2,\{P2\}\tab subtracts the four byte integer \par !\tab \tab \tab  at NUM2 from the four byte\par !\tab \tab \tab  integer pointed at by P1, \par !\tab \tab \tab  placing the result at the \par !\tab \tab \tab  location pointed at by P2}{\f4  \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\f4 \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 21: Input and Output Macros}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497621988}\hich\af4\dbch\af4\loch\f4 Chapter 21: Input and Output Macros{\*\bkmkend _Toc497621988}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par The macros in this section provide for the input and output of the basic data types.  All output is sent through the output hook at $36, and all input is received through the input hook at $38.  All of the macros described in this section can be found in M6502.I.O.   Macros in this section include:\par \par }\pard \qj\widctlpar\tx630\tx720\tx3240\adjustright {\tab \tab ALTCH\tab use alternate character set\par \tab \tab BELL\tab beep the bell\par \tab \tab CLEOL\tab clear to end of line\par \tab \tab CLEOS\tab clear to end of screen\par \tab \tab COUT\tab character output\par \tab \tab GETx   N1,CR\tab variable input\par \tab \tab GET_LANG LANG\tab get current language\par \tab \tab GET_LINFO DCB\tab get language information\par \tab \tab GOTOXY X,Y\tab position cursor on screen\par \tab \tab HOME\tab form feed\par \tab \tab KEYPRESS\tab read keypress\par \tab \tab NAMEADDR ADR\tab fetch address of command table\par \tab \tab NORMCH\tab select normal character set\par \tab \tab PRBL   AD1\tab print blanks\par \tab \tab PUTx   N1,F1,CR\tab variable output\par \tab \tab PUTCR\tab carriage return\par \tab \tab RDKEY NOCURSOR\tab read keyboard\par \tab \tab READXY\tab read cursor position\par \tab \tab SET_LANG LANG\tab set language\par \tab \tab SET_LINFO DCB\tab set language information\par \tab \tab SIZE\tab find screen size\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621989}\hich\af4\dbch\af4\loch\f4 ALTCH\tab Select Alternate Ch\hich\af4\dbch\af4\loch\f4 aracter Set{\*\bkmkend _Toc497621989}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab ALTCH\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The ASCII control character $0E is sent to the output device.  If the device is a CRT, this enables the alternate character set.  Some 80 column boards may not have an alternate character set; see your user's manual.  On an Apple //e, the alternate character set is the inverse characters.  Printers may also use this code; again, see your user's manual for details.  The accumulator is returned with a $0E in it.\par \par See the NORMCH macro for a way to reverse the effect.\par \par \par Coding Examples:\par                                                            \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab ALTCH\tab \tab \tab (no operands are required)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621990}\hich\af4\dbch\af4\loch\f4 BELL\tab Beep the Bell{\*\bkmkend _Toc497621990}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab BELL\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The ASCII control character BEL ($07) is sent to the output device.  This beeps the speaker if the CRT is in use; most printers will also make an audible sound.  The accumulator is returned with a $07 in it.\par \par \par Coding Example:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {         BELL\tab \tab (no operand is required)\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621991}\hich\af4\dbch\af4\loch\f4 CLEOL\tab Clear to End of Line{\*\bkmkend _Toc497621991}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab CLEOL\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The ASCII control character GS ($1D) is sent to the output device.  If the CRT is the output device, the line is cleared from the cursor to the end of the line.  This function will work fine with ORCA, as well as most eighty column board drivers.  The accumulator is returned with a $1D in it.\par \par \par Coding Example:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab CLEOL\tab \tab (no operand is required)\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621992}\hich\af4\dbch\af4\loch\f4 CLEOS\tab Clear to End of Screen{\*\bkmkend _Toc497621992}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab CLEOS\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The ASCII control character VT ($0B) is sent to the output device.  If the CRT is the output device, the screen is cleared from the cursor to the end of the screen.  This function will work fine with ORCA, as well as most eighty column board drivers.  The accumulator is returned with a $0B in it.\par \par \par Coding Example:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab CLEOS\tab \tab \tab (no operand is required)\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621993}\hich\af4\dbch\af4\loch\f4 COUT\tab Character Output{\*\bkmkend _Toc497621993}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab COUT\tab CHAR\par \par \par Operands:\par \par LAB - Label.\par CHAR - Character to write.\par \par \par Description:\par \par A character is sent to the current output device.  CHAR must be a valid operand for a LDA instruction.  A similar function is performed by the PUTC macro, but this one is generally more efficient.  The accumulator is returned with the character in it.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab COUT\tab #'.'\tab \tab write a .\par \tab COUT\tab CH\tab \tab write the character at CH\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621994}\hich\af4\dbch\af4\loch\f4 GETx\tab Variable Input{\*\bkmkend _Toc497621994}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab GET2\tab N1,CR\par LAB\tab GET4\tab N1,CR\par LAB\tab GET8\tab N1,CR\par LAB\tab GETC\tab N1,CR\par LAB\tab GETS\tab N1,CR\par \par \par Operands:\par \par LAB - Label.\par N1 - Location to place the variable read.\par CR - Carriage return flag.\par \par \par Description:\par \par The get macros are the standard way of reading information from external devices.  It receives all information through the $38 hook, which means that the input stream can be redirected to read from disk drives or other input devices by simply placing the address of the character input subroutine for that device at $36.\par \par N1 is used to compute the effective address where the variable read will be stored.  It can be specified as an absolute address, an indirect address, or a stack address.   The type of variable being read is specified by which macro is used; the GET2 macro reads in a signed two byte integer, while the GETS macro reads a string.   The macros, and the types they input, are:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab GET2\tab two byte integer\par \tab \tab GET4\tab four byte integer\par \tab \tab GET8\tab eight byte integer\par \tab \tab GETC\tab character\par \tab \tab GETS\tab string\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The CR parameter is a flag; simply using the CR keyword is enough to signal that the flag is true.  This is normally done by coding\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab CR=T\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par in the macro's operand.  If CR is true, the input is followed by skipping to the end of the current line.  If CR is not true, the next get macro  will use the first character that was not used by the original get macro.  For Example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab GET2\tab NUM1\par \tab \tab GET2\tab NUM2,CR=T\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would read NUM1 and NUM2 from the same input line, while\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab GET2\tab NUM1,CR=T\par \tab \tab GET2\tab NUM2,CR=T\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would read the numbers from two separate lines.\par \par The contents of all registers are destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2520\adjustright \f6\fs18\cgrid {\tab GET2\tab INT\tab reads a two byte integer from \par !\tab \tab \tab  the keyboard\par \tab GETC\tab CHAR,CR=T\tab reads a character from the \par !\tab \tab \tab  keyboard, then skips characters   \par !\tab \tab \tab  until a RETURN is typed\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621995}\hich\af4\dbch\af4\loch\f4 GET_LANG\tab Get Current Language{\*\bkmkend _Toc497621995}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab GET_LANG LANG\par \par \par Operands:\par     \par LAB - Label.\par LANG - Place to store language number.\par \par \par Description:\par \par Places the number of the current default language at LANG, which must be a valid operand for a store instruction.  The X and A registers are destroyed.  This command is specific to the ORCA operating system.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab GET_LANG LNUM\tab \tab fetch language number\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621996}\hich\af4\dbch\af4\loch\f4 GET_LINFO\tab Get Language Information{\*\bkmkend _Toc497621996}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab GET_LINFO DCB\par \par \par Operands:\par \par LAB - Label.\par DCB - Address of control block.\par \par \par Description:\par \par ORCA communicates with its compilers, linkers, interpreters and editors through this and the SET_LINFO macro.  When one of these programs is called, it can read the parameters that are passed to it by doing a GET_LINFO call.     The call works like a call to ProDOS internally, with the JSR instruction being followed by the op code and the address of a control block.  The fields in the control block are:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3510\tx3960\adjustright \f6\fs18\cgrid {\ul name}{\tab }{\ul byte}{\tab }{\ul use}{\par \par COUNT\tab 0\tab 11; number of fields\par SFILE\tab 1,2\tab address of source file name\par DFILE\tab 3,4\tab address of output file name\par PARMS\tab 5,6\tab address of parameter list\par MERR\tab 7\tab max error level allowed\par MERRF\tab 8\tab max error level found\par LOPS\tab 9\tab operations flags\par KFLAG\tab 10\tab keep flag\par OUTF\tab 11\tab list output flag\par SYMF\tab 12\tab list symbols flag\par ERRF\tab 13\tab list errors flag\par ORG\tab \tab 14-17\tab origin\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par In actual use, SFILE is the name of the input file, and DFILE is the name of the output file.  DFILE can be omitted, in which case it has a length of zero.  Both of these file names are valid ProDOS file names, and can be partial or full path names.  They are stored in the operating system, and are subject to being wiped out by input or output operations, so they must be read immediately and copied into an internal work space.\par \par The PARMS field is only used when a call is being made to an assembler or compiler.  It contains the list of names from the NAMES= parameter list, and starts with a zero if there were none.  Like SFILE and DFILE, this field is volatile, and should be copied into a local work area immediately.\par \par MERR and MERRF are used to control when the system will stop in an assemble, link, execute sequence.  If control is returned to the system with MERR negative, it treats the situation as a terminal error.  The ProDOS mark to get to the line that caused the terminal error should be stored in the ORG field, and the file name should be pointed to by SFILE.  If MERR is positive, but greater than MERRF, the system will not continue on with a link or program execution.\par \par LOPS is used by the operating system to keep track of what must be done.   Currently, the last three bits are used.  Bit 0 is a flag indicating that a compile must be performed, bit 1 indicates a link edit is needed, and bit 2 indicates that the finished program is to be executed.  A link editor would always find bit 0 cleared, and should clear bit 1 before returning.  An interpreter should clear all bits before returning, since linking is not needed and the interpreter itself did the execution.  A compiler or assembler should clear the low order bit before returning if the compile is complete, and leave it alone if it is switching languages.\par \par All languages under ORCA must have an equivalent to the APPEND directive in the assembler.  Whenever a new file is encountered, the APPEND handler should check the AUX field of the file header to insure that it matches the value of the fourth byte of the compiler itself, which is the language number for the compiler.  If it does, then the compiler should continue.  Otherwise, it should close all files, set KFLAG to 3, place the address of the file name in SFILE, and return with bit 0 of the LOPS field cleared.  The operating system handles the remaining functions of switching languages.\par \par The KFLAG field is used to indicate what should be done with the output from a compiler or assembler.  A value of 0 indicates that the output is not to be saved, while 1 indicates that it is to be saved to an object module whose base name is the ProDOS name pointed to by DFILE.  In the later case, the compiler should create a file with a .ROOT suffix containing the first segment to execute, and place all subsequent segments in a file with a .A suffix.  A value of 2 in this field means that another language has already created a .ROOT file, while a value of 3 indicates that at least one alphabetic suffix has been used.  If KFLAG is 3, the compiler must search the directory for the highest alphabetical suffix which has been used, and use the next one.\par \par OUTF, SYMF, and ERRF indicate if the compiler, assembler or linker should send the source listing, symbol tables, and error messages to the output device.  Zero means suppress the output, one means to send it, and two means that the language should choose its own default.\par \par ORG is the start location for the binary file, and is used only by the linker.  On entry to an editor, it is a displacement to move into the file being edited.\par \par The accumulator is destroyed.\par \par \par Coding Examples:\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par }\pard \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3420\adjustright {\tab \tab GET_LINFO COUNT\tab get language linfo\par \tab \tab RTS\par \par \tab COUNT\tab DC\tab I1'11'\tab parameter count\par \tab SFILE\tab DS\tab 2 \tab addr of source file name\par \tab DFILE\tab DS\tab 2\tab addr of output file name\par \tab PARMS\tab DS\tab 2\tab addr of parameter list\par \tab MERR\tab DS\tab 1\tab max error level allowed\par \tab MERRF\tab DS\tab 1\tab max error level found\par \tab LOPS\tab DS\tab 1\tab operations flags\par \tab KFLAG\tab DS\tab 1\tab keep flag\par \tab OUTF\tab DS\tab 1\tab list output flag\par \tab SYMF\tab DS\tab 1\tab list symbols flag\par \tab ERRF\tab DS\tab 1\tab list errors flag\par \tab ORG\tab DS\tab 4\tab \tab origin\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621997}\hich\af4\dbch\af4\loch\f4 GOTOXY\tab Position Cursor On Screen{\*\bkmkend _Toc497621997}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab GOTOXY X,Y\par \par \par Operands:\par \par LAB - Label.\par X - Column number, counting from 0.\par Y - Row number, counting from 0.\par \par \par Description:\par \par The CRT cursor is moved to the indicated location.  If Y is larger the 23, it is set to 23; if X is larger than the number of columns on the CRT minus 1 (39 for a 40 column screen, 79 for an 80 column screen) then the cursor is placed at the far right of the screen.  Operands can be immediate or absolute.  All registers are destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1260\tx2700\adjustright \f6\fs18\cgrid {\tab GOTOXY\tab #4,#6\tab \tab places the cursor on row 6, \par !\tab \tab \tab \tab  column 4\par \tab GOTOXY\tab N1,N2\tab \tab places the cursor on row N2, \par !\tab \tab \tab \tab  column N1\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621998}\hich\af4\dbch\af4\loch\f4 HOME\tab \hich\af4\dbch\af4\loch\f4 Form Feed{\*\bkmkend _Toc497621998}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab HOME\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The ASCII control character $0C (FF) is sent to the output device.  If the device is a CRT, the screen is cleared and the cursor is placed at the upper left corner of the screen.  If the device is a printer, most printers will skip to the top of a new page.  (If yours does not, it will be necessary to replace the printer driver in the operating system with one that performs this function through software.)  The accumulator returns with a value of $0C.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab HOME\tab \tab \tab (no operand is required)\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497621999}\hich\af4\dbch\af4\loch\f4 KEYPRESS\tab Read Keypress{\*\bkmkend _Toc497621999}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab KEYPRESS \par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Upon return, the accumulator contains a one if a key has been pressed, and a zero if not.  This is an ORCA specific call.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab KEYPRESS\par \tab CMP\tab #0\par \tab BEQ\tab NOTPRESSED\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622000}\hich\af4\dbch\af4\loch\f4 NAMEADR\tab Fetch Address of Command Table{\*\bkmkend _Toc497622000}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab NAMEADR ADR\par \par \par Operands:\par \par LAB - Label.\par ADR - Address of the table.\par \par \par Description:\par \par Places the address of the command table at ADR.  Each entry in the command table starts with a type byte which is zero for a utility, positive for a built in command, and negative for a language.  The value is a displacement into an internal table in the command processor for built in commands.  For languages, anding the value with $7F will return the language number.  The second field is the name of the command, stored as a length count followed by the name in capitol letters.  The end of the table is marked by two $00 bytes.  The accumulator is destroyed.  This is an ORCA specific call.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2520\adjustright \f6\fs18\cgrid {\tab NAMEADR ADR\tab fetch the address of the table\par }\pard \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright {\tab RTS\par \par ADR\tab DS\tab 2\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622001}\hich\af4\dbch\af4\loch\f4 NORMCH\tab Select Normal Character Set{\*\bkmkend _Toc497622001}  \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab NORMCH\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The ASCII control character $0F is sent to the output device.  If the device is a CRT, this enables the normal character set, reversing the effect of the ALTCH macro.  The accumulator returns with a value of $0F.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab NORMCH\tab \tab (no operand is required)\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622002}\hich\af4\dbch\af4\loch\f4 PRBL\tab Print Blanks{\*\bkmkend _Toc497622002}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab PRBL\tab AD1\par \par \par Operands:\par \par LAB - Label.\par AD1 - Number of blanks to print.\par \par \par Description:\par \par AD1 is the number of blanks to print.  It must be a valid operand for a load instruction.  If zero, 256 blanks are printed.  The A and X registers are destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab PRBL\tab #10\tab \tab print 10 blanks\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622003}\hich\af4\dbch\af4\loch\f4 PUTx\tab Variable Output{\*\bkmkend _Toc497622003}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab PUT2\tab N1,F1,CR\par LAB\tab PUT4\tab N1,F1,CR\par LAB\tab PUT8\tab N1,F1,CR\par LAB\tab PUTB\tab N1,F1,CR\par LAB\tab PUTC\tab N1,F1,CR\par LAB\tab PUTS\tab N1,F1,CR\par \par \par Operands:\par \par LAB - Label.\par N1 - Location to place the variable read.\par F1 - Field with.\par CR - Carriage return flag.\par \par \par Description:\par \par The CR parameter has the same meaning and is used the same as for the GETx macro, with the exception that the variable is written instead of read.\par \par N1 still specifies the variable, this time for output.  The only change is that immediate addressing is allowed in addition to absolute, indirect and stack.  It is also possible to output boolean values via the PUTB macro; this writes the string "true" if the boolean byte is non-zero, and "false" if it is zero.\par \par F1 specifies the field width, which defaults to 0.  This specifies the width, in characters, of the field to be written to.  If the number of characters generated by the put macro is greater than or equal to the field width, the characters generated are printed as is.  If the number of characters are less than the field width, blanks are written to right justify the characters in the field.  For example,\par \par \tab \tab PUTC\tab #'c',#1\par \par would simply print a "c" on the screen, while\par \par \tab \tab PUTC\tab #'c','#3\par \par would print two blanks, followed by a "c".\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab PUT2\tab INT,CR=T\tab writes the two byte integer to \par !\tab \tab \tab \tab  the CRT with a CR\par \tab PUTSC\tab #'They''''re here...',#20 prints "They're \par !\tab \tab \tab \tab  here..." to the CRT, right \par !\tab \tab \tab \tab  justified in a 20 character \par !\tab \tab \tab \tab  field\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622004}\hich\af4\dbch\af4\loch\f4 PUTCR\tab Carriage Return{\*\bkmkend _Toc497622004}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab PUTCR \par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The ASCII control character $0D (CR) is sent to the output device.  If the device is a CRT, the cursor is placed at the start of the next line, scrolling the screen to get a new line if that is necessary.\par \par The accumulator returns with a value of $0D.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab PUTCR\tab \tab \tab (no operand is required)\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622005}\hich\af4\dbch\af4\loch\f4 RDKEY\tab Read Keyboard{\*\bkmkend _Toc497622005}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab RDKEY\tab NOCURSOR\par \par \par Operands:\par \par LAB - Label.\par NOCURSOR - Cursor flag.\par \par \par Description:\par \par The keyboard is read, and the value read returned in the A register.  If anything is coded in the NOCURSOR field (immediately after the macro), a cursor does not appear on the screen; otherwise, a cursor is used.  This is an ORCA specific call.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab RDKEY\tab \tab \tab read with cursor\par \tab RDKEY\tab NO\tab \tab read without cursor\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622006}\hich\af4\dbch\af4\loch\f4 READXY \tab Read Cursor Position{\*\bkmkend _Toc497622006}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab READXY\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The horizontal position of the cursor is returned in X, and the vertical position (counting from top to bottom) in Y.  The upper left corner of the screen is 0,0.  This is an ORCA specific call.  The accumulator is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab READXY\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622007}\hich\af4\dbch\af4\loch\f4 SET_LANG\tab Set Language{\*\bkmkend _Toc497622007} \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab SET_LANG LANG\par \par \par Operands:\par \par LAB - Label.\par LANG - Language number.\par \par \par Description:\par \par LANG must be a valid operand for a load instruction.  The accumulator is returned with a 0, and the X register is destroyed.  The default language for the ORCA system is set to the specified number.  This is an ORCA specific call.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab SET_LANG #3\tab \tab set the default language to 3\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622008}\hich\af4\dbch\af4\loch\f4 SET_LINFO\tab Set Language Information{\*\bkmkend _Toc497622008}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab SET_LINFO DCB\par \par \par Operands:\par \par LAB - Label.\par DCB - Address of the control block.\par \par \par Description:\par \par This macro is the other half of the GET_LINFO macro.  It is used by assemblers, compilers, linkers and editors to pass information back to the operating system.  See GET_LINFO for a complete description of the control block and the used for the control block fields.  This is an ORCA specific call.  The accumulator is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab SET_LINFO DCB\tab \tab set language information\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622009}\hich\af4\dbch\af4\loch\f4 SIZE\tab Find Screen Size{\*\bkmkend _Toc497622009}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab SIZE\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Returns the width of the screen in X and the height of the screen in Y.  This operation is specific to ORCA.  The accumulator is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab SIZE\tab \tab \tab get screen size\par \tab STX\tab WIDTH\par \tab STY\tab HEIGHT\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 22: ProDOS Macros}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622010}\hich\af4\dbch\af4\loch\f4 Chapter 22: ProDOS Macros{\*\bkmkend _Toc497622010}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par The ProDOS Machine Language Interface (MLI) provides a very regular set of subroutine calls which allow most of the common functions of disk interface to be performed.  Limited clock support is also provided.  The macros in this section are primarily designed to "hide the ugly," freeing you from looking up the op codes associated with the ProDOS calls and helping avoid possibly disastrous results of misplacing the addresses of the control blocks (DCB's) usually associated with ProDOS calls.\par \par Each call to the MLI consists of a JSR to $BF00, followed by a one byte op code and a two byte DCB address.  All communication is through the DCB; this is where ProDOS gets the inputs for the call, as will as where the outputs are placed.  With the exception of the TIME call, all ProDOS calls require a DCB.  Even with the time call, two bytes must be included after the op code.  As a result, each of the ProDOS macros (except TIME) require a single parameter, the absolute address of the DCB.\par \par The following table summarizes the macros for using the MLI.  Complete descriptions of each function, as well as the formats for the DCBs, can be found in the ProDOS reference manual.\par \par }\pard \qj\widctlpar\tx720\tx2430\tx3600\adjustright {\tab Macro Name\tab Op Code\tab \tab ProDos Title\par \par \tab ALL_INT\tab 40\tab \tab Allocate Interrupt\par \tab CLOSE\tab CC\tab \tab Close\par \tab CREATE\tab C0\tab \tab Create\par \tab DEAL_INT\tab 41\tab \tab Deallocate Interrupt\par \tab DESTROY\tab C1\tab \tab Destroy\par \tab FLUSH\tab CD\tab \tab Flush\par \tab GET_BUF\tab D3\tab \tab Get Buffer\par \tab GET_EOF\tab D1\tab \tab Get End of File\par \tab GET_INFO\tab C4\tab \tab Get File Information\par \tab GET_MARK\tab CF\tab \tab Get Mark\par \tab GET_PREFIX\tab C7\tab \tab Get Prefix\par \tab GET_TIME\tab 82\tab \tab Time\par \tab NEW_LINE\tab C9\tab \tab New Line\par \tab ON_LINE\tab C5\tab \tab On Line\par \tab OPEN\tab C8\tab \tab Open \par \tab READ\tab CA\tab \tab Read\par \tab READ_BLK\tab 80\tab \tab Read Block\par \tab RENAM\tab C2\tab \tab Rename\par \tab SET_BUF\tab D3\tab \tab Set Buffer\par \tab SET_EOF\tab D0\tab \tab Set End of File\par \tab SET_INFO\tab C3\tab \tab Set File Information\par \tab SET_MARK\tab CE\tab \tab Set Mark\par \tab SET_PREFIX\tab C6\tab \tab Set Prefix\par \tab WRITE\tab CB\tab \tab Write\par \tab WRITE_BLK\tab 81\tab \tab Write Block\par }\pard \qj\widctlpar\adjustright {\par In addition, there are three macros used to allocate and deallocate memory.  These macros make use of the memory bit map maintained by ProDOS.  For specifics about the memory map itself, see the ProDOS reference manual.\par \par All of the ProDOS macros from the table above, as well as the memory management macros described in the remainder of the section, can be found in M6502.PRODOS.\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622011}\hich\af4\dbch\af4\loch\f4 FINDBUFF\tab F\hich\af4\dbch\af4\loch\f4 ind an Unused Memory Buffer{\*\bkmkend _Toc497622011}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab FINDBUFF ADR,LEN\par \par \par Operands:\par \par LAB - Label.\par ADR - Location to place start address of memory.\par LEN - Amount of memory to find.\par \par \par Description:\par \par The ProDOS memory map is searched from end to beginning for a block of memory at least as large as LEN.  If such a block is found, its address is returned in ADR and the carry flag is set, otherwise the carry flag is cleared and ADR is unchanged.  Note that the memory is not reserved, only located.  All registers are destroyed.\par \par \par Coding Example:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab FINDBUFF LOC,#512\tab find two pages of memory\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622012}\hich\af4\dbch\af4\loch\f4 RELEASE\tab Release a Memory Buffer{\*\bkmkend _Toc497622012}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par \par Forms:\par \par LAB\tab RELEASE START,LEN\par \par \par Operands:\par \par LAB - Label.\par START - Start location of the memory buffer.\par LEN - Amount of memory to release.\par \par \par Description:\par \par The memory starting an START and extending for LEN bytes is released in the ProDOS memory map.  Memory is released and reserved in pages, but the macro will compute the correct pages to release for any number of bytes.  All registers are destroyed.\par \par \par Coding Examples:\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab RELEASE #STUFF,#10\tab release STUFF for a read\par \tab RELEASE BUFF,#1024\tab release 1K buffer whose addr is \par !\tab \tab \tab \tab  in BUFF\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622013}\hich\af4\dbch\af4\loch\f4 RESERVE\tab Reser\hich\af4\dbch\af4\loch\f4 ve a Memory Buffer{\*\bkmkend _Toc497622013}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab RESERVE START,LEN\par \par \par Operands:\par \par LAB - Label.\par START - Start of memory to reserve.\par LEN - Amount of memory to reserve.\par \par \par Description:\par \par The memory starting an START and extending for LEN bytes is reserved in the ProDOS memory map.  Memory is released and reserved in pages, but the macro will compute the correct pages to release for any number of bytes.  All registers are destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab RESERVE #STUFF,#10\tab reserve STUFF\par \tab RESERVE BUFF,#1024\tab reserve 1K buffer whose addr is \par !\tab \tab \tab \tab  in BUFF \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 23: Graphics Ma\hich\af7\dbch\af4\loch\f7 cros}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622014}\hich\af4\dbch\af4\loch\f4 Chapter 23: Graphics Macros{\*\bkmkend _Toc497622014}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par The macros described in this section provide a unified approach to graphic output which is loosely based on turtle graphics as presented in Apple Pascal.  With the graphics macros presented here, all of the display screens available on the Apple // family of computers can be addressed.  It is even possible to treat the text screens as graphics screens.\par \par The package can also be quickly adapted to work on any other pixel oriented graphics device.  This is because the high level functions are implemented in a completely general way, making use of three subroutines (plot a point, read a point, plot a point with color mapping) and four variables describing the device.  This makes the task of adding a new graphics device fairly straight forward.  The source code for the package is necessary to do this; it is available as a separate product. The other effect of using such a general method is not so pleasant - a few of these routines are significantly  slower than they could be.  The sheer size of including sixteen versions of each subroutine ruled out writing separate, faster versions for each graphics screen.  For most of the commands, this is not noticeable, but the clear screens are a bit slow due to their pixel by pixel approach to doing the job.  If the entire screen is to be cleared, consider zeroing the area with a block move, instead.\par \par Unless noted otherwise, all macros in the graphics library destroy all registers.\par \par The macros described in this section can be found in M6502.GR.\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622015}\hich\af4\dbch\af4\loch\f4 BB\tab Bit Block Definition{\*\bkmkend _Toc497622015}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab BB\tab PIXELS\par \par \par Operands:\par \par LAB - Label.\par PIXELS - Bit map of the pixels for one row of the block.\par \par \par Description:\par \par The operand is a quoted string consisting of a series of blanks and some other character, usually an asterisk.  Each blank will be represented as a zero, while any other character will be represented as a 1 in a bit field which is right filled with zeros.  This conforms to the format needed for a black and white picture for the DRAWBLOCK macro.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {MAN\tab BB\tab '          '\par \tab BB\tab '          '\par \tab BB\tab '   ***    '\par \tab BB\tab '   ***    '\par \tab BB\tab '    **    '\par \tab BB\tab '  *****   '\par \tab BB\tab ' * *** *  '\par \tab BB\tab ' * *** *  '\par \tab BB\tab ' * *** *  '\par \tab BB\tab '   ***    '\par \tab BB\tab '   * *    '\par \tab BB\tab '   * *    '\par \tab BB\tab '   * *    '\par \tab BB\tab '          '\par \tab BB\tab '          '\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622016}\hich\af4\dbch\af4\loch\f4 COLOR\tab Set Pen Color{\*\bkmkend _Toc497622016}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab COLOR\tab C     \par \par \par Operands:\par \par LAB - Label.\par C - Pen color.                                      \par \par \par Description:\par \par When FILLSCREEN, FILLSHAPE, PLOT, GROUT or DRAWTO are used, all points placed on the graphics screen will be in the current color.  The current color can be set using this macro.\par \par There are a total of sixteen colors available on some graphics displays, all of which may be selected using the COLOR macro.  For those displays that have fewer colors, setting the color to an unavailable choice has no effect.  The table shown below lists the colors and which screen they are available on.  The operand for the COLOR macro can be immediate, absolute, or a text color descriptor; available descriptors are also shown in the table.  Text descriptors must be given in uppercase.  All registers are destroyed.\par \par }\pard \qj\keepn\widctlpar\tx1260\tx2520\tx3600\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Color}{\hich\af4\dbch\af4\loch\f4  \tab }{\ul \hich\af4\dbch\af4\loch\f4 Descriptor}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Number}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Available on:}{\par \hich\af4\dbch\af4\loch\f4                                     \par \hich\af4\dbch\af4\loch\f4 Black\tab BLACK\tab 0\tab all screens\par \hich\af4\dbch\af4\loch\f4 Magenta\tab MAGENTA\tab 1\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Dark Blue\tab DBLUE\tab 2\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Purple\tab PURPLE\tab 3\tab all but black a\hich\af4\dbch\af4\loch\f4 nd white\par \hich\af4\dbch\af4\loch\f4 Dark Green\tab GREEN\tab 4\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Grey 1\tab GREY\tab 5\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Blue\tab BLUE\tab 6\tab all but black and white\par \hich\af4\dbch\af4\loch\f4 Light Blue\tab LBLUE\tab 7\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Brown\tab BROWN\tab 8\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Orange\tab ORANGE\tab 9\tab all but black and white\par \hich\af4\dbch\af4\loch\f4 Grey \hich\af4\dbch\af4\loch\f4 2\tab GREY2\tab 10\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Pink\tab PINK\tab 11\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Light Green\tab LGREEN\tab 12\tab all but black and white \par }\pard \qj\widctlpar\tx1260\tx2520\tx3600\adjustright {\hich\af4\dbch\af4\loch\f4 Yellow\tab YELLOW\tab 13\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 Aqua Marine\tab AQUA\tab 14\tab low res, double high res\par \hich\af4\dbch\af4\loch\f4 White\tab WHITE\tab 15\tab all screens\par }\pard \qj\widctlpar\adjustright {\par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab COLOR\tab BLUE\tab \tab addressed by color name\par \tab COLOR\tab #12\tab \tab immediate selection of LGREEN\par \tab COLOR\tab MYCOLOR\tab \tab color number is at MYCOLOR\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622017}\hich\af4\dbch\af4\loch\f4 COLORMAP\tab Color Map Enable/Disable{\*\bkmkend _Toc497622017}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab COLORMAP ONOFF\par \par \par Operands:\par \par LAB - Label.\par ONOFF - ON or OFF.\par \par \par Description:\par \par The graphics library can map colors as it draws them.  This powerful capability gives the ability to insure that a line drawn across a screen is seen, no matter what the background; to reverse the screen, etc.  Performance of the package is about cut in half, due to the fact that a point must be read before being written.  See SET_COLOR for a way to set the color map.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab COLORMAP ON\tab \tab enable color map\par \tab COLORMAP OFF\tab \tab disable color map\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622018}\hich\af4\dbch\af4\loch\f4 DRAWB\hich\af4\dbch\af4\loch\f4 LOCK\tab Draw a Block{\*\bkmkend _Toc497622018}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab DRAWBLOCK BLOCK,X,Y  \par \par \par Operands:\par \par LAB - Label.\par BLOCK - Block to draw.                                  \par X - Number of pixels wide.\par Y - Number of pixels high.\par \par \par Description:\par \par A block is a series of pixel definitions, proceeding from top to bottom, left to right.  Each row of a block must end on an even byte boundary, although the block width does not need to correspond to an even number of bytes.  Each pixel is a single bit for black and white screens, or a four bit pattern for color screens.  The four bit patterns are the numeric values for the colors, listed under the color macro.  DRAWBLOCK dumps the indicated block to the screen at the current pen position, which starts at the upper left corner of the block.  The X and Y operands can be immediate or absolute values.  The pen is left in its original position.  All registers are destroyed.\par \par Black and white blocks are normally defined using the BB macro; they can also be defined with a binary DC statement.  Color blocks are defined with hex DC statements.  Each hex digit corresponds to a pixel of one of the sixteen available colors.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab DRAWBLOCK MAN,#10,#15 see BB for the block\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622019}\hich\af4\dbch\af4\loch\f4 DRAWTO\tab Draw a Line{\*\bkmkend _Toc497622019}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab DRAWTO X,Y  \par \par \par Operands:\par \par LAB - Label.\par X - X coordinate to draw to.                            \par Y - Y coordinate to draw to.\par \par \par Description:\par \par A line of the current pencolor is drawn from the current pen position of the specified X,Y location.  The pen is left in the specified location.  X and Y must be in the range 0 to 32767; if they are not, the least significant fifteen bits of the value provided will be used.  The operands can be immediate or absolute.  All registers are destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab COLOR\tab WHITE\tab \tab draw a white box around\par \tab MOVETO #0,#0\tab \tab the low res screen\par \tab DRAWTO #0,#47\par \tab DRAWTO #39,#47\par \tab DRAWTO #39,#0\par \tab DRAWTO #0,#0\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622020}\hich\af4\dbch\af4\loch\f4 FILLSCREEN\tab Fill Screen With a Color{\*\bkmkend _Toc497622020}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab FILLSCREEN  \par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The current viewport is filled with the current color.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab COLOR BLACK\tab \tab clear the screen\par \tab FILLSCREEN\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622021}\hich\af4\dbch\af4\loch\f4 FILLSHAPE\tab Fill a Shape{\*\bkmkend _Toc497622021}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab FILLSHAPE\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The point at the current pen position, and all points of the same color that are simply connected to it, are filled with the current color.  Simply connected means all points that can be moved to by going up, down, left or right.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab MOVETO #10,#10\tab \tab colors the shape at 10,10\par \tab COLOR\tab MAGENTA\tab \tab  magenta\par \tab FILLSHAPE\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622022}\hich\af4\dbch\af4\loch\f4 FINDXY\tab Find the Pen Position{\*\bkmkend _Toc497622022}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab FINDXY X,Y  \par \par \par Operands:\par \par LAB - Label.\par X - Place to put the X position of the pen.\par Y - Place to put the Y position of the pen.\par \par \par Description:\par \par The current value of the pen coordinates is placed at X and Y, both of which must be absolute operands.  Allow two bytes of storage for each value.  Valid ranges are 0 to 32767 for both values.  All registers are destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab FINDXY PENX,PENY\tab read the color of the \par \tab READXY PENX,PENY\tab  \tab current point\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622023}\hich\af4\dbch\af4\loch\f4 GROUT\tab Graphics Output{\*\bkmkend _Toc497622023}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab GROUT\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The standard output hook is changed so that subsequent text output is written to the current graphics screen.  Text is written in full color, using the current pen color.  This means that color high res screens will display only 20 columns of text, while the black and white screens still display 40 (standard) or 80 columns (extended).  At the start of each character, the pen position specifies the upper-left corner of the 7x9 character field.  The pen is left one position to the right of the upper-right corner of the letter, ready to write the next character.  Terminal control codes are not interpreted.\par \par The character output routine makes use of a 1152 byte table of character shapes containing nine bytes for each of the 128 characters in the ASCII character set.  Each character consists of nine seven bit patterns; the first pattern in memory corresponds to the top line of the character.  Within each byte, the seven bits appear left justified.  They are placed on the screen in the same order read.  A table containing the standard ASCII character set is provided in the subroutine library.  To replace it with a different table, simply create a table in a program module called SYSCHAR.\par \par \par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab GROUT  \par \tab \tab PUTS\tab #'This string is drawn in graphics'\par \tab \tab TEXTOUT\par \tab \tab PUTS\tab #'...but this one is in text.',CR=T\par \par \tab SYSCHAR\tab START\tab \tab local character set\par \par \tab \tab DC\tab B'00010000'\par \tab \tab DC\tab B'00010000'\par \tab \tab DC\tab B'00010000'\par \tab \tab DC\tab B'00010000'\par \tab \tab DC\tab B'11111110'\par \tab \tab DC\tab B'00010000'\par \tab \tab DC\tab B'00010000'\par \tab \tab DC\tab B'00010000'\par \tab \tab DC\tab B'00010000'\par \tab \tab :\par \tab \tab :\par \tab \tab :\par \tab \tab END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622024}\hich\af4\dbch\af4\loch\f4 INITGRAPH\tab Set Up a Screen{\*\bkmkend _Toc497622024}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab INITGRAPH   \par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par The view port for the current graphics screen is set to its maximum value and the pen is placed at 0,0.  The pen color is set to black. These functions are separate from those of WRITETO, which defines the screen to be drawn on, but the two are normally used together to initialize a graphics session.  WRITETO must be used first.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab WRITETO HIRES2\tab \tab set up the second hi\par \tab INITGRAPH\tab \tab res screen\par \tab VIEW\tab HIRES2\par \tab PENCOLOR BLACK\par \tab FILLSCREEN\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622025}\hich\af4\dbch\af4\loch\f4 MOVETO\tab Move\hich\af4\dbch\af4\loch\f4  the Pen{\*\bkmkend _Toc497622025}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {___________________________________________________\-\-\-\-\-__________                            \par Forms:   \par \par LAB\tab MOVETO X,Y\par \par \par Operands:\par \par LAB - Label.\par X - X position to move to.\par Y - Y position to move to.   \par \par \par Description:\par \par The graphics pen is moved to the specified location on the graphics screen. Nothing is actually drawn on the screen; only the starting position for a character write or DRAWTO is changed.  X and Y must be in the range 0 to 32767; if they are not, the fifteen  least significant bits of the value given will be used.  The value moved to does not actually have to correspond to a physical point on the screen, since points plotted outside the window are ignored.  The operands can be immediate or absolute.  The A register is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab MOVETO #10,#10\tab \tab move the pen to 10,10\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622026}\hich\af4\dbch\af4\loch\f4 PLOT\tab Plot a Point{\*\bkmkend _Toc497622026}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par Forms:   \par \par LAB\tab PLOT\tab X,Y\par \par \par Operands:\par \par LAB - Label.\par X - X coordinate to plot to.\par Y - Y coordinate to plot to. \par \par \par Description:\par \par The pen is moved to X, Y, and a single point of the current pen color is drawn there.  X and Y must be in the range 0 to 32767; if they are not, the least significant fifteen bits of the value will be used.  All registers are destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab PLOT\tab #10,#20\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622027}\hich\af4\dbch\af4\loch\f4 READXY\tab Read a Point{\*\bkmkend _Toc497622027}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:   \par \par LAB\tab READXY X,Y\par \par \par Operands:\par \par LAB - Label.\par X - X position to read from.\par Y - Y position to read from. \par \par \par Description:\par \par The accumulator is loaded with the number corresponding to the color of the  point at X, Y.  X and Y must be in the range 0 to 32767 or the least significant fifteen bits of the value provided will be used.  The X and Y registers are destroyed.  The cursor is moved to X, Y.\par \par \par Coding Examples:\par \par }{\hich\af4\dbch\af4\loch\f4 See FINDXY.\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622028}\hich\af4\dbch\af4\loch\f4 SET_COLOR\tab Define Color Map{\*\bkmkend _Toc497622028}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:   \par \par LAB\tab SET_COLOR C1,C2,C3\par \par \par Operands:\par \par LAB - Label.\par C1 - Plot color.\par C2 - Screen color.\par C3 - Resulting color.\par \par \par Description:\par \par This macro is used to set up a color map.  Even if the COLORMAP macro has been used to enable color mapping, the system starts out working as if color mapping were not being used.  SET_COLOR allows one element of the color map array to be changed.  The example below illustrates the idea by setting up a color map that will cause exclusive oring on a black and white screen.  After setting the color map up this way, drawing something onto a black and white screen twice would result in the original screen, no matter how complicated the original screen or the shape drawn might be.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab SET_COLOR WHITE,WHITE,BLACK set up XOR for B+W screen\par \tab SET_COLOR BLACK,WHITE,WHITE\par \tab COLORMAP ON\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622029}\hich\af4\dbch\af4\loch\f4 TEXTOUT\tab Reset Standard Output{\*\bkmkend _Toc497622029}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:   \par \par LAB\tab TEXTOUT\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Resets the standard output hook after a GROUT so that future text output is sent to the standard output device.  This macro must not be used unless a GROUT has been used first.  It is acceptable to use several TEXTOUT macros in  a row, so long as GROUT has been used at least once before hand.\par \par \par Coding Examples:\par \par See GROUT.\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622030}\hich\af4\dbch\af4\loch\f4 VIEW\tab Show a Screen{\*\bkmkend _Toc497622030}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:   \par \par LAB\tab VIEW\tab NUM\par \par \par Operands:\par \par LAB - Label.\par NUM - Screen number or name to view.\par \par \par Description:\par \par This macro changes the screen that is displayed on the CRT.  It can show any of the ten graphics screens or three text screens.  It does not change which screen output is sent to (for that function see WRITETO), only the screen that is viewed.\par \par The operand must be one of the thirteen text descriptors.  Text  descriptors must be coded in uppercase characters.  The text descriptors and the screen that will be shown when these values are used are shown in the table below.\par \par }\pard \qj\widctlpar\tx1800\tx3780\adjustright {     }{\ul Number}{\tab }{\ul Descriptor}{\tab }{\ul Screen}{\par \par      #1\tab TEXT\tab primary 40 col screen\par      #2\tab TEXT2\tab secondary 40 col screen\par      #3\tab TEXT80\tab Apple //e 80 col screen\par      #4\tab LORES\tab primary low res screen\par      #5\tab LORES2\tab secondary low res screen\par      #6\tab DLORES\tab extended low res screen\par      #7\tab HIRES\tab primary hi res screen\par      #8\tab HIRES2\tab secondary hi res screen\par      #9\tab DHIRES\tab extended hi res screen\par      #10\tab CHIRES\tab primary color hi res screen\par      #11\tab CHIRES2\tab secondary color hi res screen\par      #12\tab CDHIRES\tab extended color hi res screen \par }\pard \qj\widctlpar\adjustright {\par Primary screens are the screens from $400 to $7FF and the high res graphics screen from $2000 to $3FFF.  The secondary screens are located at $800 to $BFF for text and low resolution graphics, and $4000 to $5FFF for high resolution graphics.  Extended high and low resolution graphics double the number of points in the horizontal direction, or increase the number of colors from six to sixteen in high resolution graphics displayed on color screens.  Like 80 column displays, these modes are only available on an Apple //e with 128K of memory; unlike text, you must also have a revision B or later motherboard, and have a special jumper installed on your extended 80 column card.  (The Apple //c meets these requirements.)\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab VIEW\tab HIRES\tab \tab these are equivalent\par \tab VIEW\tab #7\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622031}\hich\af4\dbch\af4\loch\f4 VIEWPORT\tab Set Graphics View Port{\*\bkmkend _Toc497622031}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:   \par \par LAB\tab VIEWPORT X1,X2,Y1,Y2\par \par Operands:\par \par LAB - Label.\par X1 - Lowest X value to use.\par X2 - Highest X value to use.\par Y1 - Lowest Y value to use.\par Y2 - Highest Y value to use.\par \par Description:\par \par The viewport is an imaginary window on the graphics screen that you cannot draw out of.  Any plot command which tries to write outside of the current window will do nothing.  A line drawn partially in the window and partially out of the window will only show up for those parts that are in the window.\par \par Each graphics screen has a specific physical size.  The window cannot be set outside of that physical size.  Each graphics screen pixel is numbered from 0, so that X1 and Y1 must be positive.  In addition, X2 must be greater than or equal to X1, and Y2 must be greater than or equal to Y1.  The maximum sizes for each window are shown in the table below.\par \par Operands may be immediate or absolute.  All registers are destroyed.\par \par }\pard \qj\widctlpar\tx2880\tx5040\adjustright {     Screen\tab Max X\tab Max Y\par \par      standard low res\tab   39\tab   47\par      double low res\tab   79\tab   47\par      standard high res\tab 279\tab 191\par      double high res\tab 559\tab 191\par      standard color high res\tab 139\tab 191\par      double color high res\tab 139\tab 191\par      standard text (40 col)\tab   39\tab   23 \par      double text (80 col)\tab   79\tab   23\par }\pard \qj\widctlpar\adjustright {\par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab VIEWPORT #0,RIGHT,#0,TOP\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622032}\hich\af4\dbch\af4\loch\f4 WRITETO\tab Write to a Screen{\*\bkmkend _Toc497622032}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:   \par \par LAB\tab WRITETO NUM\par \par \par Operands:\par \par LAB - Label.\par NUM - Screen number or name to write to.\par \par \par Description:\par \par This macro changes the screen that is written to by the graphics macros.  It does not change the screen that is shown on the CRT; for that function see the VIEW macro.\par \par The operand must be one of twelve text descriptors.  Text descriptors must be coded in uppercase characters.  The text descriptors, the corresponding immediate value, and the screen that will be shown when these values are used is shown in the table below.\par \par }\pard \qj\widctlpar\tx1800\tx3600\adjustright {     }{\ul Number}{\tab }{\ul Descriptor}{\tab }{\ul Screen\par }{\par      #1\tab TEXT\tab primary 40 col screen\par      #2\tab TEXT2\tab secondary 40 col screen\par      #3\tab TEXT80\tab Apple //e 80 col screen\par      #4\tab LORES\tab primary low res screen\par      #5\tab LORES2\tab secondary low res screen\par      #6\tab DLORES\tab extended low res screen\par      #7\tab HIRES\tab primary hi res screen\par      #8\tab HIRES2\tab secondary hi res screen\par      #9\tab DHIRES\tab extended hi res screen\par      #10\tab CHIRES\tab primary color hi res screen\par      #11\tab CHIRES2\tab secondary color hi res screen\par      #12\tab CDHIRES\tab extended color hi res screen \par }\pard \qj\widctlpar\adjustright {\par Primary screens are the text screen from $400 to $7FF and the graphics from $2000 and $3FFF.  The secondary screens are located at $800 and $BFF for text and low resolution graphics, and $4000 to $5FFF for high resolution graphics. Extended high and low resolution graphics double the number of points in the horizontal direction, or increase the number of colors from six to sixteen in high resolution graphics displayed on color screens.  Like 80 column displays, these modes are only available on an Apple //e with 128K of memory; unlike text, you must also have a revision B or later motherboard, and have a special jumper installed on your extended 80 column card.  Check with you dealer if you are not sure on these points.  The difference between the color and black and white versions of the high resolution graphics screens is in the way that the plot a point primitives work.  If a black and white screen is selected, standard high resolution graphics has a total of 280 points available on each line, and extended graphics has 560, but only two colors are recognized: black and white.  If the color mode has been selected, only 140 points exist on each line, but each point can have six colors in the standard mode and sixteen colors in the extended mode.  Note that this only effects the way the plotting routine are used, since the number of points and number of colors displayed is a function of whether or not a color screen is used to show the graphics.\par \par \par Coding Examples:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab WRITETO CHIRES\tab \tab these are equivalent\par \tab WRITETO #10\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Chapter 24: Miscellaneous Macros}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622033}\hich\af4\dbch\af4\loch\f4 Chapter 24: Miscellaneous Macros{\*\bkmkend _Toc497622033}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par This section describes all of the macros that did not fit into one of the previous groups.  Included are a host of useful logic macros, a note macro for making sounds with the Apple speaker, support for the 65C02 instructions added by Rockwell, and some macros for dealing with the F8 ROM.  The macros appear in the following libraries:\par \par \tab \tab M6502.65C02\par \tab \tab M6502.LOGIC\par \tab \tab M6502.MSC\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622034}\hich\af4\dbch\af4\loch\f4 ASL2\tab Two Byte Arithmetic Shift Left{\*\bkmkend _Toc497622034}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab ASL2\tab N1\par \par \par Operands:\par \par LAB - Label.\par N1 - Number to shift.\par \par \par Description:\par \par The two byte number at N1 is shifted left.  The least significant bit is replaced with a zero, and the most significant bit is placed into the carry flag.  All registers are returned intact.\par \par \par Coding Example:\par \par }\pard\plain \s35\keepn\nowidctlpar\tx540\tx1170\tx2700\adjustright \f6\fs18\cgrid {\tab ASL2\tab NUM1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622035}\hich\af4\dbch\af4\loch\f4 BBRx\tab Branch on Bit Reset{\*\bkmkend _Toc497622035}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab BBR0\tab ZP,REL\par LAB\tab BBR1\tab ZP,REL\par LAB\tab BBR2\tab ZP,REL\par LAB\tab BBR3\tab ZP,REL\par LAB\tab BBR4\tab ZP,REL\par LAB\tab BBR5\tab ZP,REL\par LAB\tab BBR6\tab ZP,REL\par LAB\tab BBR7\tab ZP,REL\par \par \par Operands:\par \par LAB - Label.\par ZP - Zero page location to test.\par REL - Branch point.\par \par \par Description:\par \par This 65C02 instruction was included by Rockwell on their version of the 65C02, but is not a part of the standard 65C02 instruction set.  It tests to see if the bit specified as part of the opcode is clear in the indicated zero page location.  If so, a relative branch is made.  This operation is only available on the Rockwell 65C02.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab BBR2\tab 5,THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622036}\hich\af4\dbch\af4\loch\f4 BBSx\tab Branch on Bit Se\hich\af4\dbch\af4\loch\f4 t{\*\bkmkend _Toc497622036}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab BBS0\tab ZP,REL\par LAB\tab BBS1\tab ZP,REL\par LAB\tab BBS2\tab ZP,REL\par LAB\tab BBS3\tab ZP,REL\par LAB\tab BBS4\tab ZP,REL\par LAB\tab BBS5\tab ZP,REL\par LAB\tab BBS6\tab ZP,REL\par LAB\tab BBS7\tab ZP,REL\par \par \par Operands:\par \par LAB - Label.\par ZP - Zero page location to test.\par REL - Branch point.\par \par \par Description:\par \par This 65C02 instruction was included by Rockwell on their version of the 65C02, but is not a part of the standard 65C02 instruction set.  It tests to see if the bit specified as part of the opcode is set in the indicated zero page location.  If so, a relative branch is made.  This operation is only available on the Rockwell 65C02.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab BBS2\tab 5,THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622037}\hich\af4\dbch\af4\loch\f4 BGT\tab Branch on Greater Than{\*\bkmkend _Toc497622037}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab BGT\tab BP\par \par \par Operands:\par \par LAB - Label.\par BP - Branch point.\par \par \par Description:\par \par The 6502 does not include an instruction to branch after a comparison on the condition that the register was strictly greater than the memory location.  This macro serves the purpose, working just like the normal relative branch instructions.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab BGT\tab THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622038}\hich\af4\dbch\af4\loch\f4 BLE\tab Branch on Less Than or Equal{\*\bkmkend _Toc497622038}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab BLE\tab BP\par \par \par Operands:\par \par LAB - Label.\par BP - Branch point.\par \par \par Description:\par \par The 6502 does not include an instruction to branch after a comparison on the condition that the register was less that or equal to the memory location.  This macro serves the purpose, working just like the normal relative branch instructions.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab BLE\tab THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622039}\hich\af4\dbch\af4\loch\f4 BUTTON\tab Read a Game Paddle Button{\*\bkmkend _Toc497622039}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab BUTTON BTN,VAL\par \par \par Operands:\par \par LAB - Label.\par BTN - Button number.\par VAL - Location to place value.\par \par \par Description:\par \par BTN is the number of one of the three game paddle buttons, numbered from 0 to 2; it can be specified using an absolute or immediate address.  The value returned is negative if the button is being pressed, and positive if it is not.  The condition codes are set appropriately, so VAL can be omitted, and the program can follow the macro with a BMI to test for a button being pressed.  If VAL is specified, it should be an absolute address - the result is stored there.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3780\adjustright \f6\fs18\cgrid {\tab \tab BUTTON #0\tab branch to PRESSED if \par \tab \tab BMI\tab PRESSED\tab button 0 is being\par \tab !\tab \tab \tab  pressed\par \tab \tab BUTTON NUM,RES RES\tab is the result of\par \tab !\tab \tab \tab  examining button NUM\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622040}\hich\af4\dbch\af4\loch\f4 CNVxy\tab Convert x to y{\*\bkmkend _Toc497622040}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms: \par \par LAB\tab CNV24\tab N1,N2\par LAB\tab CNV28\tab N1,N2\par LAB\tab CNV2S\tab N1,N2\par LAB\tab CNV42\tab N1,N2\par LAB\tab CNV48\tab N1,N2\par LAB\tab CNV4S\tab N1,N2\par LAB\tab CNV82\tab N1,N2\par LAB\tab CNV84\tab N1,N2\par LAB\tab CNV8S\tab N1,N2\par LAB\tab CNVS2\tab N1,N2\par LAB\tab CNVS4\tab N1,N2\par LAB\tab CNVS8\tab N1,N2\par \par \par Operands:\par \par LAB - Label.\par N1 - The argument.\par N2 - The result.\par \par \par Description:\par \par These macros are used to convert from one type to another type.  By   varying the characters substituted for x and y, all of the macros used for conversion can be formed.  Since they all use exactly the same protocol, they are described together here.\par \par Both operands can be specified using absolute, indirect or stack  addressing.   It is also possible to use immediate addressing on the argument, although this is not recommended (it would be more efficient to simply use a constant in its original form).  The argument is converted from the type  indicated by x to the type indicated by y, and stored at N2.  Overflow and underflow errors are checked for during the conversion process; see the ERROR macro description for more on error handling.  The second operand can be omitted if the result is to be placed at the same location used for the source.  S is a string type, so it is possible to use these macros to convert a string to a binary number, or to convert a binary number to a string without printing the result.\par \par \par Coding Examples:\par \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab \tab CNV24\tab INT1,INT2\tab converts the two byte \par \tab !\tab \tab \tab  integer at INT1 into \par \tab !\tab \tab \tab  a four byte integer, \par \tab !\tab \tab \tab  saving the result at \par \tab !\tab \tab \tab  INT2\par \tab \tab CNV84\tab *\tab converts the eight byte \par \tab !\tab \tab \tab  integer on the top of \par \tab !\tab \tab \tab  the stack into a four\par \tab !\tab \tab \tab  byte integer, saving \par \tab !\tab \tab \tab  the result back onto \par \tab !\tab \tab \tab  the stack\par \tab \tab CNV42\tab \{P1\}\tab converts the number \par \tab !\tab \tab \tab  pointed to by P1 from\par \tab !\tab \tab \tab  a four byte integer \par \tab !\tab \tab \tab  to a two byte integer\par \tab \tab CNV2S\tab N1,STR\tab convert 2 byte integer \par \tab !\tab \tab \tab  N1 to string, saving \par \tab !\tab \tab \tab  at STR\par \tab STR\tab DSTR\tab ,10\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622041}\hich\af4\dbch\af4\loch\f4 CMPW\tab Compare Wor\hich\af4\dbch\af4\loch\f4 d{\*\bkmkend _Toc497622041}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab CMPW\tab N1,N2\par \par \par Operands:\par \par LAB - Label.\par N1 - First number to compare.\par N2 - Second number to compare.\par \par \par Description:\par \par Does a two byte unsigned comparison of N1 to N2, setting condition flags the same way the CMP instruction does.  Unsigned compares are far faster than the signed compare done by the CMP2 macro.  The accumulator is destroyed.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab CMPW\tab NUM1,#0\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622042}\hich\af4\dbch\af4\loch\f4 DBcn\tab Decrement and Branch{\*\bkmkend _Toc497622042}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab DBEQ\tab R,BP\par LAB\tab DBNE\tab R,BP\par LAB\tab DBPL\tab R,BP\par \par \par Operands:\par \par LAB - Label.\par R - Register or memory location to decrement.\par BP - Branch point.\par \par \par Description:\par \par This set of macros implements the end of a loop in assembly language.  R can be a register or location in memory.  It is decremented, and then a branch to BP is performed if the condition specified in the op code is met.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab \tab DBNE\tab X,LAB\tab decrement X, branch if \par \tab !\tab \tab \tab  not 0\par \tab \tab DBEQ\tab Y,THERE\tab decrement Y, branch if 0\par \tab \tab DBPL\tab NUM,TOP\tab decrement NUM, branch \par \tab !\tab \tab \tab  if positive\par }\pard \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622043}\hich\af4\dbch\af4\loch\f4 DBcn2\tab Two Byte Decrement and Branch{\*\bkmkend _Toc497622043}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab DBNE2\tab ADR,BP\par LAB\tab DBPL2\tab ADR,BP\par \par \par Operands:\par \par LAB - Label.\par ADR - Address of two byte number to decrement.\par BP - Branch point.\par \par \par Description:\par \par These macros implement two byte forms of the previous decrement macros.  The two byte number whose address is specified by ADR is decremented.  If the condition specified in the op code is met, a branch is made to BP.  The accumulator is destroyed.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3780\adjustright \f6\fs18\cgrid {\tab \tab DBNE2 NUM1,TOP\tab decrement, branch if \par \tab !\tab \tab \tab  not 0     \par \tab \tab DBPL2 NUM1,TOP\tab decrement, branch if \par \tab !\tab \tab \tab  positive\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622044}\hich\af4\dbch\af4\loch\f4 DEC2\tab Two Byte Decrement{\*\bkmkend _Toc497622044}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab DEC2\tab N1\par \par \par Operands:\par \par LAB - Label.\par N1 - Two byte number to decrement.\par \par \par Description:\par \par N1 is decreased by one.  The accumulator is destroyed.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DEC2\tab NUM1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622045}\hich\af4\dbch\af4\loch\f4 DSTR\tab Define String{\*\bkmkend _Toc497622045}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab DSTR\tab ADR,LENGTH\par \par \par Operands:\par \par LAB - Label.\par ADR - Character string.\par LENGTH - Maximum length of string.\par \par \par Description:\par \par A string is a set of characters which have both a current and maximum length. The current length is the number of characters currently in the string; it can range from 0 (a null string) to the maximum length.  In memory, a string is represented by two count bytes, followed by the character bytes.  The first count byte is the maximum length of the string.  It specifies the total number of bytes used for the character bytes, so the amount of memory used by a string is the maximum length plus two.  The second byte is the current length.  The remaining bytes are the ASCII character codes for the characters currently in the string.  Unused bytes, which occur when a string is less that its maximum length, do not have predictable values.\par \par The DSTR macro allows the definition of string constants and variables.  At least one of the operands must be specified.  It is legal to specify both.  LENGTH is the maximum length of the string, while ADR is the initial string which will be stored in the area.  Both must be constants.  ADR should be enclosed in single quote marks; if a quote mark is needed as part of the string, it should be coded four times.  If ADR is not coded, the string is initialized with a current length of 0.  If LENGTH is not coded, it is initialized to the length of the string given.\par \par \par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx900\tx1530\tx3330\adjustright \f6\fs18\cgrid {\tab \tab DSTR\tab 'They''''re here...' initializes a \par \tab !\tab \tab \tab  constant\par \tab \tab DSTR\tab LENGTH=80\tab a variable string with\par \tab !\tab \tab \tab  maximum length 80; \par \tab !\tab \tab \tab  requires 82 bytes of\par \tab !\tab \tab \tab  storage\par \tab \tab DSTR\tab 'one',20\tab a string with max \par \tab !\tab \tab \tab  length of 20 and current \par \tab !\tab \tab \tab  length of 3\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622046}\hich\af4\dbch\af4\loch\f4 DW \tab Define Word{\*\bkmkend _Toc497622046}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab DW\tab ADR\par \par \par Operands:\par \par LAB - Label.\par ADR - String to define.\par \par \par Description:\par \par The string is placed in memory after a count byte which gives the length of the characters.  The operand should be enclosed in single quote marks; if the string contains a single quote mark, code it four times.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DW\tab 'Here''''s a sample'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622047}\hich\af4\dbch\af4\loch\f4 ERROR\tab Flag an Error{\*\bkmkend _Toc497622047}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab ERROR\tab ERR\par \par \par Operands:\par \par LAB - Label.\par ERR - The error number.\par \par \par Description:\par \par An error is flagged by the error processor.  The error processor will begin by calling an error intercept routine called SYSERIN.  If the carry flag is clear after that call, the error handler prints the error message and terminates processing.  The subroutine library has a subroutine called SYSERIN which simply clears the error flag, so that if a program takes no action, any error is terminal.\par \par Errors can be intercepted by simply providing a subroutine called SYSERIN in the program.  Upon entry, the X register will contain an error number from the table below.  If terminal error processing is desired, one can then clear the carry flag and return.  If the error is intercepted, set the carry flag and return.\par \par         Error Number\tab \tab Message\par \par \tab 1\tab Evaluation Stack Overflow\par \tab 5\tab Invalid Operation\par \tab 6\tab Division by Zero\par \tab 7\tab Overflow\par \tab 8\tab Underflow\par \tab 9\tab Inexact\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab ERROR\tab #6\tab flags a division by \par \tab !\tab \tab \tab  zero\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622048}\hich\af4\dbch\af4\loch\f4 FLASH\tab Flashing Characters{\*\bkmkend _Toc497622048}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab FLASH\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Sets $32 to $7F, so that output through the standard F8 ROM character output routine will print flashing characters on the Apple 40 column screen.  This will only work on the Apple //e if the standard character set is being used; the standard character set does not support lowercase letters.  See the related INVERSE and NORMAL macros.  The accumulator is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3240\adjustright \f6\fs18\cgrid {\tab \tab FLASH\tab \tab (no operands are required)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622049}\hich\af4\dbch\af4\loch\f4 INC2\tab Two Byte Increme\hich\af4\dbch\af4\loch\f4 nt{\*\bkmkend _Toc497622049}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab INC2\tab N1\par \par \par Operands:\par \par LAB - Label.\par N1 - Number to increment.\par \par \par Description:\par \par Increase the two byte number N1 by one.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab INC2\tab NUM1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622050}\hich\af4\dbch\af4\loch\f4 INITSTACK\tab Initialize an Evalu\hich\af4\dbch\af4\loch\f4 ation Stack{\*\bkmkend _Toc497622050}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab INITSTACK LEN\par \par \par Operands:\par \par LAB - Label.\par LEN - Number of bytes for stack.\par \par \par Description:\par \par Many of the ORCA macros provide a stack addressing mode.  The stack these refer to is a software stack.  This macro gives an easy way to allocate the space for that stack and initialize all of the variables associated with  it.   LEN is the length of the stack, and should be a multiple of 256 for efficient use of memory.  512 bytes is a good value to choose as a starting point, 1024 bytes provides a very substantial stack.  Memory for the stack is requested from the free memory in the ProDOS memory map.\par \par This stack is not associated in any way with the hardware stack used by the 6502.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3780\adjustright \f6\fs18\cgrid {\tab INITSTACK #1024\tab set up a large stack\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622051}\hich\af4\dbch\af4\loch\f4 INVERSE\tab Inverse Characters{\*\bkmkend _Toc497622051}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab INVERSE\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Sets $32 to $3F, so that output through the standard F8 ROM character output routine will print inverse characters on the Apple 40 column screen.  If a program is written to work under ORCA HOST, the ALTCH macro provides a more standard way of doing this.  See the related macros FLASH and NORMAL.  The accumulator is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3240\adjustright \f6\fs18\cgrid {\tab \tab INVERSE\tab (no operands are required)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622052}\hich\af4\dbch\af4\loch\f4 Jcn \tab Conditional Jumps{\*\bkmkend _Toc497622052}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab JCC\tab BP \par LAB\tab JCS\tab BP \par LAB\tab JEQ\tab BP \par LAB\tab JGE\tab BP \par LAB\tab JGT\tab BP \par LAB\tab JLE\tab BP \par LAB\tab JLT\tab BP \par LAB\tab JMI\tab BP \par LAB\tab JNE\tab BP \par LAB\tab JPL\tab BP \par \par \par Operands:\par \par LAB - Label.\par BP - Branch point.\par \par \par Description:\par \par Relative branches have a limited range.  For the many cases when a conditional branch must be made that is outside of that range, these macros let the branch around a JMP be hidden in an easily readable form.  A conditional jump macro is provided for each of the branch conditions available on the 6502 as an instruction, as well as those provided in this macro library.  \par \par A conditional jump can go to any memory location.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab JNE\tab THERE\tab conditional jump\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622053}\hich\af4\dbch\af4\loch\f4 LA\tab Load Address{\*\bkmkend _Toc497622053}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab LA\tab AD1,AD2,R\par \par \par Operands:\par \par LAB - Label.\par AD1 - Place to load the address.\par AD2 - Address to load.\par R - Register to use.\par \par \par Description:\par \par The address specified by the second operand is loaded into the location specified by the first operand.  Both must be absolute addresses.  R is the register used to do the load; it defaults to A.  AD1 can be a multiple operand.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab \tab LA\tab NUM1,4\tab sets the two byte \par \tab !\tab \tab \tab  integer NUM1 to 4\par \tab \tab LA\tab P1,THERE,X\tab loads the address of \par \tab !\tab \tab \tab  the label THERE into\par \tab !\tab \tab \tab  the pointer P1 using\par \tab !\tab \tab \tab  the X register\par \tab \tab LA\tab (P1,P2),THERE\tab loads both P1 and P2 \par \tab !\tab \tab \tab  with the address THERE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622054}\hich\af4\dbch\af4\loch\f4 LM\tab Load Memory{\*\bkmkend _Toc497622054}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab LM\tab AD1,AD2,R\par \par \par Operands:\par \par LAB - Label.\par AD1 - Place to load the byte.\par AD2 - Byte to load.\par R - Register to use.\par \par \par Description:\par \par The value specified by the second operand is loaded into the location specified by the first operand.  AD1 must be an absolute addresses; AD2 can be absolute or immediate. R is the register used to do the load; it defaults to A.  AD1 can be a multiple operand.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1080\tx1710\tx3330\adjustright \f6\fs18\cgrid {\tab \tab LM\tab NUM1,#4\tab sets the one byte integer\par \tab !\tab \tab \tab  NUM1 to 4 using the Y\par \tab !\tab \tab \tab  register\par \tab \tab LM\tab (F1,F2,F3),#0\tab sets the three flags \par \tab !\tab \tab \tab  to 0\par \tab \tab LM\tab F1,F2\tab sets F1 to the value \par \tab !\tab \tab \tab  of F2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622055}\hich\af4\dbch\af4\loch\f4 LSR2\tab Two Byte Logical Shift Right{\*\bkmkend _Toc497622055}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab LSR2\tab N1\par \par \par Operands:\par \par LAB - Label.\par N1 - Two byte number to shift.\par \par \par Description:\par \par The two byte number at N1 is shifted right.  The most significant bit becomes a zero, and the least significant bit is shifted into the C flag.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LSR2\tab NUM1\tab divide NUM1 by 2 \par \tab !\tab \tab \tab  (unsigned)\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622056}\hich\af4\dbch\af4\loch\f4 MASL \tab Multiple Arithmetic Shift Left{\*\bkmkend _Toc497622056}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab MASL\tab ADR,NUM\par \par \par Operands:\par \par LAB - Label.\par ADR - Value to shift.\par NUM - Number of times to shift it.\par \par \par Description:\par \par The one byte value at ADR is shifted left NUM times.  ADR can be the accumulator.  NUM must be a number.\par \par \par Coding Example:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MASL\tab A,3\tab shift accumulator\par \tab \tab MASL\tab MEM,4\tab shift memory\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622057}\hich\af4\dbch\af4\loch\f4 MLSR\tab Multiple Logical Shift Right{\*\bkmkend _Toc497622057}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab MLSR\tab ADR,NUM\par \par \par Operands:\par \par LAB - Label.\par ADR - Value to shift.\par NUM - Number of times to shift it.\par \par \par Description:\par \par The one byte value at ADR is shifted right NUM times.  ADR can be the accumulator.  NUM must be a number.\par \par Coding Example:\par \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MLSR\tab A,3\tab shift accumulator\par \tab \tab MLSR\tab MEM,4\tab shift memory\par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622058}\hich\af4\dbch\af4\loch\f4 MOVE\tab Move Memory{\*\bkmkend _Toc497622058}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab MOVE\tab AD1,AD2,LEN\par \par \par Operands:\par \par LAB - Label.\par AD1 - Source address.\par AD2 - Destination address.\par LEN - Number of bytes to move.\par \par \par Description:\par \par LEN bytes are moved from AD1 to AD2, starting at the end of the move range and proceeding toward the beginning.  LEN can range from 0 to 255; if 0, 256 bytes are moved.  LEN must be specified with absolute or immediate addressing.  AD1 and AD2 can both use absolute, indirect or stack addressing. AD1 can also use immediate addressing, in which case the entire destination range is set to the immediate value specified.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3420\adjustright \f6\fs18\cgrid {\tab \tab MOVE\tab #0,PAGE,#0\tab sets 256 bytes to 0, \par \tab !\tab \tab \tab  starting at PAGE\par \tab \tab MOVE\tab HERE,THERE,Q\tab moves Q bytes from \tab \tab !\tab \tab \tab  HERE to THERE\par \tab \tab MOVE\tab \{P1\},*,#8\tab moves 8 bytes from where\par \tab !\tab \tab \tab  P1 is pointing to the\par \tab !\tab \tab \tab  stack; P1 must be in\par \tab !\tab \tab \tab  zero page\par }\pard \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622059}\hich\af4\dbch\af4\loch\f4 MOVEx\tab Lo\hich\af4\dbch\af4\loch\f4 ng Memory Moves{\*\bkmkend _Toc497622059}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab MOVEB\tab AD1,AD2,LEN\par LAB\tab MOVEE\tab AD1,AD2,LEN\par \par \par Operands:\par \par LAB - Label.\par AD1 - Source address.\par AD2 - Destination address.\par LEN - Number of bytes to move.\par \par \par Description:\par \par These memory moves are similar to MOVE, described above, except that they are not limited to moving 256 bytes at a time.  MOVEB moves from AD1 to AD2, working from the beginning of the area towards the end.  MOVEE moves from AD1 to AD2, starting with the last byte in AD1 and proceeding back to the first. The final characters are mnemonic for "move from the beginning" and "move from the end."  All operands can be specified with absolute, indirect or stack  addressing.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx990\tx1620\tx3600\adjustright \f6\fs18\cgrid {\tab \tab MOVEB\tab SOURCE,DEST,#$500 these are equivalent\par \tab \tab MOVEE\tab SOURCE,DEST,#$500  DEST and SOURCE do \par \tab !\tab \tab \tab  not overlap\par \tab \tab MOVEB\tab \{P1\},*,\{P2\}\tab moves the number of \tab !\tab \tab \tab  bytes specified by the \tab \par \tab !\tab \tab \tab  two  byte integer \par \tab !\tab \tab \tab  pointed to by P2 from \par \tab !\tab \tab \tab  where P1 points to the \par \tab !\tab \tab \tab  stack\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622060}\hich\af4\dbch\af4\loch\f4 NORMAL\tab Normal Characters{\*\bkmkend _Toc497622060}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab NORMAL\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Sets $32 to $FF, reversing the effect of the related FLASH and INVERSE macros.  The accumulator is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3240\adjustright \f6\fs18\cgrid {\tab \tab NORMAL\tab (no operands are required)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622061}\hich\af4\dbch\af4\loch\f4 NOTE\tab Play a Note{\*\bkmkend _Toc497622061}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab NOTE\tab KEY,TIME,VOICE\par \par \par Operands:\par \par LAB - Label.\par KEY - The particular piano key note to play.\par TIME - How long to hold the note.\par VOICE - Selects the voice to use.\par \par \par Description:\par \par This macro and its supporting subroutine simulate a slightly out of tune piano with four voices.  Before examining the operands, it is important to understand the limitations of the sound system in use.  The Apple speaker can only be clicked; its volume cannot be controlled, and the shape of the pulse created by the click cannot be controlled.  This causes the four voices to be out  of tune with each other, and results in a "cracking" from a raspy sound on the lower notes to a clear bell sound on the high notes.  This cracking occurs in all four voices, but not on the same note.\par \par With that caveat, let us examine the capabilities of the macro.  KEY specifies the note to be played, and can range from 0 to 88.  Zero is used for a pause; it makes no sound.  The other numbers correspond roughly to the keys of a piano, numbered from left to right.  TIME specifies the amount of time that the note will be held in 1/16ths of a second; it can range from 1 to 64 (1/16 second to 4 seconds).  Voice can range from 0 to 3, specifying one of four voices.  The first corresponds to the actual notes on the piano fairly well, and is the clearest; it clicks the speaker once every cycle.  Voice 1 clicks the speaker at the start of each cycle, and again after 1/8 cycle, producing a raspier sound.  Voice 2 sounds the echo after 1/4 of a cycle, giving a simulated harpsichord.  The last voice sounds echoes after 1/8 and 1/4 of a cycle, giving a full sound.  All operands can be immediate or absolute.\par \par \par }\pard \qj\keepn\widctlpar\adjustright {Coding Examples:\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3780\adjustright \f6\fs18\cgrid {\tab TEST\tab START\par \tab \tab LM\tab VNUM,#3\tab plays through the \par \tab LB1\tab LM\tab KNUM,#0\tab scales of all voices\par \tab LB2\tab NOTE\tab KNUM,#4,VNUM\par \tab \tab INC \tab KNUM\par \tab \tab LDA \tab KNUM\par \tab \tab CMP\tab #89\par \tab \tab BLT\tab LB2\par \tab \tab DBPL\tab VNUM,LB1\par \tab \tab RTS\par \par \tab VNUM\tab DS\tab 1\par \tab KNUM\tab DS\tab 1\par \tab \tab END\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622062}\hich\af4\dbch\af4\loch\f4 PAGEx\tab Set Display Page{\*\bkmkend _Toc497622062}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab PAGE1\par LAB\tab PAGE2\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par These macros serve the dual purpose of setting the graphics page which is displayed (or the text page, although the lack of a way to write directly to the second text page prevents their normal use there) and setting which half of the 80 column page is being written to on the Apple //e.  Be sure that a program sets other soft switches appropriately for the correct use.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3240\adjustright \f6\fs18\cgrid {\tab \tab PAGE1\tab \tab sets the display to page 1\par \tab \tab PAGE2\tab \tab sets the display to page 2\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622063}\hich\af4\dbch\af4\loch\f4 PREAD\tab Read a Game Paddle{\*\bkmkend _Toc497622063}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab PREAD\tab PDL,VAL\par \par \par Operands:\par \par LAB - Label.\par PDL - Paddle number.\par VAL - Value read.\par \par \par Description:\par \par The value of one of the four game paddles is read (the paddles are numbered from 0 to 3).  The PDL operand must be specified; it can use immediate or absolute addressing.  VAL is optional - if specified, it must use absolute addressing.  Whether or not it is specified, the value read is in the Y register.  The accumulator is also scrambled.  VAL will range from 0 to 255, depending on the position of the paddle read.\par \par Due to the way that the Apple game paddles work, it is not a good idea to read two paddle values in quick succession.  In general, about 0.05 seconds must be allowed to elapse between readings.  Although this may seem like a short time, it is actually about 50,000 machine cycles, or about 17,000 typical assembly language instructions.  A clear symptom that enough time is not being allowed to elapse is unpredictable or clearly erroneous paddle readings.  If a program is suffering from this problem, a quick fix is to insert a pause of 1/16 second (0.0625 second) by playing a note of duration 1 and note 0, which is simply a pause.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3780\adjustright \f6\fs18\cgrid {\tab \tab PREAD\tab #0,VAL1\tab read paddles 1 and 2 \par \tab \tab NOTE\tab #0,#1,#0\tab with an appropriate\par \tab \tab PREAD\tab #1,VAL2\tab pause\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622064}\hich\af4\dbch\af4\loch\f4 RAM\tab Set the RAM Card Switches{\*\bkmkend _Toc497622064}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {____________________________________________________________\par \par Forms:\par \par LAB\tab RAM\tab READ,WRITE,BANK\par \par \par Operands:\par \par LAB - Label.\par READ - Read access flag.\par WRITE - Write access flag.\par BANK - Bank selection.\par \par \par Description:\par \par The RAM macro allows mnemonic access to the RAM card switches in 64K or larger Apple ]][ computers.  READ defaults to RAM; it selects whether the program will read from RAM or ROM.  WRITE defaults to ON; it enables or disables the ability to write to the RAM card memory.  PAGE selects which bank of $D000 memory is switched in; it defaults to 1 and can be set to 1 or 2.  Any use of the RAM macro will change all of these settings, so be sure and set all flags properly.\par \par Although it is possible to use positional parameters with this macro, it is recommended that keyword parameters be used to take advantage of the mnemonic symbolic parameter names.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab ;\par \tab ;  this setting allows ROM to be copied to the RAM \par \tab ;  card area\par \tab ;\par \tab \tab RAM\tab READ=ROM,WRITE=ON,BANK=1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622065}\hich\af4\dbch\af4\loch\f4 RESTORE\tab Restore Registers{\*\bkmkend _Toc497622065}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab RESTORE\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Restores the user registers from the hardware stack in the order X, Y, A. This is the reverse of the order in which they are stacked by the SAVE macro, so RESTORE can be used to recover the registers saved by that macro.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3240\adjustright \f6\fs18\cgrid {\tab \tab RESTORE\tab (no operands are required)\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622066}\hich\af4\dbch\af4\loch\f4 RMBx\tab Reset Memory Bit{\*\bkmkend _Toc497622066}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab RMB0\tab ZP\par LAB\tab RMB1\tab ZP\par LAB\tab RMB2\tab ZP\par LAB\tab RMB3\tab ZP\par LAB\tab RMB4\tab ZP\par LAB\tab RMB5\tab ZP\par LAB\tab RMB6\tab ZP\par LAB\tab RMB7\tab ZP\par \par \par Operands:\par \par LAB - Label.\par ZP - Location to modify.\par \par \par Description:\par \par The RMB instruction is provided on the Rockwell 65C02, but is not available in any other 65xx CPU.  It causes the bit indicated in the op code to be set to zero in the zero page location indicated in the operand.\par \par \par Coding Example:\par          \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab RMB7\tab NUM\tab clears the sign bit \par \tab !\tab \tab \tab  of NUM\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622067}\hich\af4\dbch\af4\loch\f4 SAVE\tab Save Registers{\*\bkmkend _Toc497622067}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab SAVE\par \par \par Operands:\par \par LAB - Label.\par \par \par Description:\par \par Saves the user registers to the hardware stack in the order A, Y, X.  They can be recovered with the RESTORE macro, described above.  A is destroyed.\par \par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3240\adjustright \f6\fs18\cgrid {\tab \tab SAVE\tab \tab (no operands are required)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622068}\hich\af4\dbch\af4\loch\f4 SEED\tab Random Numb\hich\af4\dbch\af4\loch\f4 er Seed{\*\bkmkend _Toc497622068}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab SEED\tab N1\par \par \par Operands:\par \par LAB - Label.\par N1 - The seed.\par \par \par Description:\par \par The SEED macro is used to initialized the random number generator that is used by all of the random number generation macros.  The seed is set only one time, before the first random number is required.\par \par To understand what the inputs to the SEED macro should be, it is necessary to first understand a little about how it is used to generate random numbers.  The first point is that the random number generators do not really produce random numbers; they produce a stream of highly uncorelated numbers, but the stream of numbers produced is always the same if the same seed is used.  A different seed will produce a completely different set of numbers.\par \par This points out the two common types of inputs used to random number generators.  The first is a specified seed which does not change; this means that the program will use exactly the same sequence of random numbers each time it is executed.  This is generally done when one is debugging a program, and would like to have some measure of repeatability.  The second input type is itself a more or less random number.  This can be a number entered from the keyboard when the program is executed, or it can be provided through some other means.  Fortunately, the Apple has an excellent source of random number seeds, produced by a tight loop in the keyboard input routine that continuously updates a seed value.  This is the preferred initial seed value for producing unpredictable sequences of numbers, and is the default value used by the SEED macro.\par \par To get the default random number seed, code the  SEED macro without an operand.  If an operand is supplied, it should be a two byte integer.  It is actually acceptable to use any number as input if you are not using immediate addressing.  The reason is that the SEED macro is really after a two byte bit pattern, which could easily be taken from the least significant part of an eight byte integer.  The operand can be specified using immediate, absolute, indirect or stack addressing.\par \par \par Coding Examples:\par                                                        \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab \tab SEED\tab \tab uses the keyboard seed\par \tab \tab SEED\tab INT\tab uses the two bytes at \par \tab !\tab \tab \tab  INT as a seed\par \tab \tab SEED\tab *\tab takes a two byte \par \tab !\tab \tab \tab  integer from the\par \tab !\tab \tab \tab  stack as a seed\par \tab \tab SEED\tab \{P1\}\tab uses the two bytes \par \tab !\tab \tab \tab  pointed to by P1\par \tab \tab SEED\tab #8\tab uses 8 as a seed; \par \tab !\tab \tab \tab  good for debugging\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622069}\hich\af4\dbch\af4\loch\f4 SMBx\tab Set Memory Bit{\*\bkmkend _Toc497622069}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab SMB0\tab ZP\par LAB\tab SMB1\tab ZP\par LAB\tab SMB2\tab ZP\par LAB\tab SMB3\tab ZP\par LAB\tab SMB4\tab ZP\par LAB\tab SMB5\tab ZP\par LAB\tab SMB6\tab ZP\par LAB\tab SMB7\tab ZP\par \par \par Operands:\par \par LAB - Label.\par ZP - Memory location to change.\par \par \par Description:\par \par This instruction is only available on the Rockwell version of the 65C02.  It sets the bit indicated in the op code to one in the zero page memory location indicated by ZP.\par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3600\adjustright \f6\fs18\cgrid {\tab \tab SMB7\tab NUM\tab set the sign bit of NUM\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {\page {\*\bkmkstart _Toc497622070}\hich\af4\dbch\af4\loch\f4 SOFTCALL \tab Soft Reference Call{\*\bkmkend _Toc497622070}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {_____________________________________________________________\par \par Forms:\par \par LAB\tab SOFTCALL SUB\par \par \par Operands:\par \par LAB - Label.\par SUB - Subroutine to call.\par \par \par Description:\par \par A JSR instruction is issued to the indicated subroutine, but the address is specified by a soft reference (DC S) type DC statement.  This allows a subroutine to call another subroutine from a section of code that may not be executed in a given program, but not ask the link editor to bring in that subroutine unless requested elsewhere.  This macro finds its only use in subroutine libraries; examples of its use can be found in the subroutine library listings.\par \par Coding Examples:\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab SOFTCALL SYSEROR                     \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Appendix A: Error Messages\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Appendix A: Error Messages}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622071}\hich\af4\dbch\af4\loch\f4 Appendix A: Error Messages{\*\bkmkend _Toc497622071}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622072}\hich\af4\dbch\af4\loch\f4 Error Levels{\*\bkmkend _Toc497622072}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par For each error that the assembler or linker can recover from, there is an error level which gives an indication as to how bad the error is.  The table below lists the error levels and their meaning. Each error description shows the error level in brackets, right after the message.  The highest error level found is printed at the end of the assembly or link edit. \par \par }\pard \qj\fi-3240\li3240\widctlpar\tx720\tx2790\adjustright {\tab }{\ul Severity}{\tab \tab }{\ul Meaning}{\par \par \tab 2\tab \tab Warning - things may be ok.\par \par \tab 4\tab \tab Error - an error was made, but the assembler or linker thinks it knows the intent and has corrected the mistake.  Check the result carefully!\par \par \tab 8\tab \tab Error - no correction is possible, but the assembler or linker knew how much space to leave.  A debugger can be used to fix the problem without reassembly.\par \par \tab 16\tab \tab Error - it was not even possible to tell how much space to leave.  Reassembly will be required to fix the problem.\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622073}\hich\af4\dbch\af4\loch\f4 Recoverable Assembler Errors{\*\bkmkend _Toc497622073}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When the assembler finds an error that it can recover from, it prints the error on the line after the source line that contained the error.  Only one error per line is flagged, even if there is more than one error in the line.  The error message is actually a brief description of the error.  In the sections that follow, each of the possible error messages is listed, in alphabetical order.  After the error message is a number; this is the error level.  (More on that later.) In the description following the error message, every possible cause for the error is explained, and ways to correct the problem are outlined. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 ACTR Count Exceeded [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par More than the allowed number of AIF or AGO directives were encountered during a macro expansion.  Unless changed by the ACTR directive, only 255 AIF or AGO branches are allowed in a single macro expansion.  This is a safeguard to prevent infinite loops during macro expansions.  If more than 255 branches are needed, use the ACTR directive inside of the loop to keep the count sufficiently high. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Address Length not Valid [2]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An attempt was made to force the assembler to use an operand length that is not valid for the given instruction.  For example, indirect indexed addressing requires a one byte operand, so forcing an absolute address by coding\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {    LDA (|2),Y\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would result in this error. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Addressing Errors [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The program counter when pass 1 defined a label was different than the program counter when pass 2 encountered the label.  There are three likely reasons for this to happen.  The first is if, for some reason, the result of a conditional assembly test was different on the two passes; this is actually caused by one of the remaining errors.  The second is if a label is defined using an EQU to be a long or zero page address, then the label is used before the EQU directive is encountered.  The last reason is if a label has been defined as zero page or long using a GEQU directive, then redefined as a local label.  On the first pass in both of these cases, the assembler assumes a length for the instruction which is then overridden before pass 2 starts. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Duplicate Label [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  Two or more local labels were defined using the same name.  The first such label gets flagged as a duplicate label; subsequent definitions are flagged as addressing errors.  Any use of the label will result in the first definition being used. \par \par 2.  Two or more symbolic parameters were defined using the same name.  Subsequent definitions are ignored. \par \par Duplicate Ref in MACRO Operand [2]\par \par A parameter in a macro call was assigned a value two or more times.  This usually happens when both a keyword and positional parameter set the same symbolic parameter.  For the macro\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {          MACRO\par           EXAMPLE  &P1,&P2\par           MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The call\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {          EXAMPLE A,P1=B\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would produce this error, since P1 is set to A as a positional parameter, then to B as a keyword parameter. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Error in Expression [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Either the expression contains an error, such as mismatched parentheses, or the expression had too many terms for the assembler to handle.  There is no fixed limit to the number of terms or level of parentheses in an expression, but generally the assembler will handle as many terms as will fit on a line, and about five or six levels of parentheses.  Check for any kind of syntax error in the expression itself. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Invalid Operand [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An operand was used on an instruction that does not support the addressing mode. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Label Syntax [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  A symbolic parameter was expected in the label field, but one was not found.  Symbolic parameters must begin with the & character, and are followed by an alphabetic character and one or more alphanumeric characters. Directives which require a symbolic parameter in the label field are: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {          SETA\par           SETB\par           SETC\par           AMID\par           ASEARCH\par           AINPUT\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 2.  A directive that requires a label was used without one.  The directives which must have a label in the label field are: \par \par           START\par           DATA\par \par 3.  The label field of a statement contained a string which does not conform to the standard label syntax.  A label must start with an alphabetic character, underscore or tilde, and can be followed by zero or more alphanumeric characters, underscore characters, and tildes.  Only the first ten alphanumeric characters are actually significant. \par \par 4.  A macro model statement had something in the label field, but it was not a symbolic parameter.  If anything occupies the label field of the statement immediately following a MACRO directive, it must be a symbolic parameter. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Length Exceeded [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  An expression was used in an operand that requires a zero page result, and the expression was not in the range 0..255.  If external labels are used in the expression, and the result will resolve to zero page when the linker resolves the references, force zero page addressing by preceding the expression with a < character, like\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {          LDA (<LABEL),Y\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par If the expression is a constant expression, correct it so that it is in the range 0..255. \par \par 2.  A directive which requires a number in a specific range received a number outside of that range in the directive.  See specific directive descriptions for allowed parameter ranges. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 MACRO Operand Syntax Error [4]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {The operand of the macro model statement contained something other than a sequence of undefined symbolic parameters separated by commas.  The macro model statement is the line immediately following a MACRO directive.  If it has an operand at all, the operand must consist of a list of symbolic parameters separated by commas, with no imbedded spaces. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Missing Operand [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The operation code was one that required an operand, but no operand was found.  Make sure that the comment column has not been set to too low a value; see the description of the SETCOM directive.  Remember that ORCA requires the A as an operand for the accumulator addressing mode. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Missing Operation [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par There was no operation code on a line that was not a comment.  Make sure the comment column has not been set to too small a value; see the SETCOM directive.  Keep in mind that operation codes cannot start in column 1. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Misplaced Statement [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  A statement was used outside of a code segment which must appear inside a code segment.  Only the following directives can be used outside of a code segment: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {    AIF       AGO       ORG       GEQU\par     MERR      SETCOM    EJECT     ERR\par     GEN       MSB       LIST      SYMBOL\par     PRINTER   65C02     65816     LONGA\par     LONGI     IEEE      TRACE     EXPAND\par     ALIGN     TITLE     RENAME    KEEP\par     COPY      APPEND    MCOPY     MDROP\par     MLOAD\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The way to remember this list is that any directive or instruction that generates code or places information in the object module must appear inside a code segment. \par \par 2.  A KEEP directive was used after the first START or DATA directive, or two KEEP directives were used for a single assembly.  Only one KEEP directive is allowed, and it must come before any code is generated. \par \par 3.  The RENAME directive, which must appear outside of a program segment, was used inside of a program segment. \par \par 4.  An ORG with a constant operand was used inside a program segment, or an ORG that was not a displacement off of the location counter was used outside of a program segment, or two ORG's were used before the same code segment.  See the description of the ORG directive for details on its use. \par \par 5.  More than one ALIGN directive was used for the same program segment. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Nest Level Exceeded [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Macros were nested more than four levels deep.  A macro may use another macro (including itself) provided that the macro used resides in the same macro file as the macro that is using it, and provided the calls are not nested more than four levels deep. \par \par No END [8]\par \par A START or DATA directive was encountered before the previous code segment was ended with an END directive.  Each code segment must end with the END directive. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Numeric Error in Operand [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  An overflow or underflow occurred during the conversion of a floating point or double precision number from the string form in the source file to the IEEE representation for the number.  Floating point numbers are limited to about 1E-38...1E38, while double precision numbers are limited to about 1E-308...1E308.  If this error occurs, the assembler will insert the IEEE format representation for 0 on an underflow, and infinity for an overflow. \par \par 2.  A decimal number was found in the operand field which was not in the range -2147483648...2147483647.  Since all integers are represented as four byte signed numbers, decimal numbers must be in the above range. \par \par 3.  A binary, octal or hexadecimal constant was found which requires more than 32 bits to represent.  All numbers must be represented by no more than four bytes. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Operand Syntax [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par This error covers a wide range of possible problems in the way an operand is written.  Generally, a quick look at the operand field will reveal the problem.  If this does not help, read the section of the reference manual that deals with operand formats for the specific instruction or directive in question. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Operand Value Not Allowed [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  An ALIGN directive was used with an operand that was not a power of two. \par \par 2.  An ALIGN directive was used in a program segment that was either not aligned itself, or was not aligned to a byte value greater than or equal to the ALIGN directive used in the program segment.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {            ALIGN    4\par     T       START\par             ALIGN    4\par             END \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par is acceptable, but\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {            ALIGN    4\par     T       START\par             ALIGN    8\par             END\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par will cause an error. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Rel Branch Out of Range [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A relative branch has been made to a label that is too far away.  For all instructions except BRL, relative branches are limited to a one byte signed displacement from the end of the instruction, giving a range of 129 bytes forward and 126 bytes backward from the beginning of the instruction.  For BRL, a two byte displacement is used, giving a range of -32765 to 32770 from the beginning of the instruction.  BRL is only available on the 65816.  For one remedy, see the conditional jump macros in the macro library. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Sequence Symbol Not Found [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An AIF or AGO directive attempted to branch, but could not find the sequence symbol named in the operand field.  A sequence symbol serves as the destination for a conditional assembly branch.  It consists of a period in column one, followed by the sequence symbol name in column 2.  The sequence symbol name follows the same conventions as a label, except that symbolic parameters may not be used. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Set Symbol Type Mismatch [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The set symbol type does not match the type of the symbolic parameter being set.  Symbolic parameters come in one of three types; A (arithmetic), B (boolean) and C (character).  All symbolic parameters defined in the parameter list of a macro call are character type.  SETA and ASEARCH directives must have an arithmetic symbolic parameter; SETB directives must have a boolean symbolic parameter; and SETC, AMID and AINPUT directives must have a character symbolic parameter in the label field. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Subscript Exceeded [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  A symbolic parameter subscript was larger than the number of subscripts defined for it.  For example,\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {        LDA     &NUM(4)\par &NUM(5) SETA    1\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par would cause this error.  A subscript of 0 will also cause the error. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Too Many MACRO Libs [2]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An MCOPY or MLOAD directive was encountered, and four macro libraries were already in use.  The best solution is to combine all of the macros needed during an assembly into a single file.  Not only does this get rid of the problem, it makes assemblies much faster.  Another remedy is to use the MDROP directive to get rid of macro libraries that are no longer needed. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Too Many Positional Parameters [4]\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {The macro call statement used more parameters in the operand than the macro model statement had definitions for.  Keep in mind that keyword parameters take up a position.  For example, the following macro calls must all be to a macro definition with at least three parameters defined in the macro model statement operand. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {        CALL    L1,L2,L3\par         CALL    ,,\par         CALL    L1,,L3\par         CALL    ,L1=A,L3\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Undefined Directive in Attribute [8]\par \par The S attribute was requested for an undefined operation code, or for an operation code that does not use ON or OFF as its operand.  The S attribute is only defined for these directives: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {        ERR     PRINTER   EXPAND\par         MSB     65C02     IEEE\par         GEN     65816     TRACE\par         LIST    LONGA\par         SYMBOL  LONGI\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Unidentified Operation [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  An operation code was encountered which was not a valid instruction or directive, nor was it a defined macro.  If you are using 65C02 or 65816 instructions, make sure that they are enabled using the 65C02 and 65816 directives.  Make sure MCOPY directives have been used to make all needed macros available at assembly time. \par \par 2.  The first operation code in a RENAME directive's operand could not be found in the current list of instructions and directives. \par \par 3.  A MACRO, MEND or MEXIT directive was encountered in a source file. \par \par Undefined Symbolic Parameter [8]\par \par An & character followed by an alphabetic character was found in the source  line.  The assembler tried to find a symbolic parameter by the given name, and none was defined. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Unresolved Label not Allowed [2]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  The operand of a directive contains an expression that must be explicitly evaluated to perform the assembly, but a label whose value could not be determined was used in the expression.  In most cases, local labels cannot be used in place of a constant.  Even though the assembler knows that the local label exists, it does not know the final location that will be assigned by the link editor. \par \par 2.  The length or type attribute of an undefined symbolic parameter was requested.  Only the count attribute is allowed for an undefined symbolic parameter. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622074}\hich\af4\dbch\af4\loch\f4 Terminal Assembler\hich\af4\dbch\af4\loch\f4  Errors{\*\bkmkend _Toc497622074}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Some errors are so bad that the assembler cannot keep going; these are called terminal errors.  When the assembler finds a terminal error, it prints the error message and then waits for a key to be pressed.  After a key is pressed, control is passed to the system editor, which loads the file that the assembler was working on and places the line that caused the terminal error at the top of the display screen. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 File Could not be Opened\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A ProDOS error occurred during an attempt to open a source or macro file. \par \par This is generally caused by a bad file of some type, or a file that is missing entirely.  Begin by carefully checking the spelling in the offending statement.  Make sure that the file can be loaded with the listed file name using the editor.  It is important to specify the pathname the same way as it is listed in the assembler command when doing this check.  If the error occurs in a strange place where no files are asked for, keep in mind that a macro file is not loaded into memory until a macro is found - in other words, the problem is in one of the MCOPY or MLOAD directives. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Keep File Could Not be Opened\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Either there was not enough memory to open the output file or a ProDOS error was encountered during an attempt to open the output file. \par \par Check the file name used in the KEEP directive for errors.  This error will occur if the file name of the keep file exceeds ten characters, since the assembler must be able to append ".ROOT" to the keep file name, and ProDOS restricts file names to fifteen characters. \par  \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Symbol Table Overflow\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The list that follows outlines the uses made of the symbol table. One or more of the uses will have to be reduced to avoid this error. \par \par 1.  Each macro in the macro file that is currently open requires twelve bytes.  Since only one macro file is open at a time, splitting a macro file into shorter files can help.  It is not the length of a macro or the macro file that is a problem, but rather the actual number of macros in a file. \par \par 2.  Each symbol defined using the GEQU directive requires seventeen bytes of symbol table space.  This space is not released at the end of each subroutine.  The GEQU directive is only needed for specifying fixed zero page or long addresses; using the EQU directive in a data area and issuing a USING directive for the data area in the subroutine will do just as well for other purposes, and the used symbol table space is released as soon as the data area has been assembled. \par \par 3.  Each local label in a segment requires seventeen bytes of space.  This space is released as soon as the segment has been assembled.  Using shorter subroutines will reduce the total number of local symbols in each. \par \par 4.  Symbolic parameters require a variable amount of symbol table space. Reducing the total number or cutting down on the depth of macro calls can help. \par \par 5.  The AINPUT directive saves the answers typed from the keyboard in the symbol table.  These answers are removed when the segment where the AINPUT directive appears has been assembled.  Two ways exist to reduce this kind of use:  either split the segment so that fewer AINPUT directives are in any one segment, or answer the questions posed by the directive more briefly. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Unable to Write to Object Module\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A ProDOs error was encountered while writing to the object module. \par \par This error is generally caused by a full disk, but could also be caused by a disk drive error of some sort. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622075}\hich\af4\dbch\af4\loch\f4 Recoverable Linker Errors{\*\bkmkend _Toc497622075}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par When the linker finds an error, it prints the name of the segment that contained the error, how far into the segment (in bytes) that the error was, and a text error message.  The descriptions below explain the possible causes for each of the errors, as well as possible ways to avoid the error when the cause is not obvious. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Addressing Error [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The segment could not be placed at the same location on pass 2 as it was placed on pass 1.  This error is almost always accompanied by some other error which caused this one to occur.  Correcting the other error will also correct this one. \par \par If this error occurs with no accompanying error in either the assembly or link edit, check for disk errors by doing a full assembly and link edit. If the error persists, report the problem as a bug. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Address is not in Correct Bank [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The most significant, truncated bytes of an expression did not evaluate to a value that matched the current location counter.  In all cases except for long addressing, the truncated address bytes must match the location counter.  Long addressing is not available on the 6502 or 65C02. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Address is not Zero Page [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The most significant bytes of the expression result were not zero, but were required to be zero because of the type of statement in which they were used.  Generally, this is used for operands which require zero page results (in the range 0..255), which gives the error its name. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Data Area not Found [2]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A USING directive was issued in a segment, and the link editor could not find a DATA segment by the given name.  Either insure that the proper libraries are included, or correct the USING directive. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Duplicate Label [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A label was defined twice in the same program.  One of the definitions must be removed. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Evaluation Stack Overflow [2]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par 1.  Expression syntax errors can occasionally show up as an evaluation stack overflow.  Check that error message for some causes. \par \par 2.  The expression was too complex to evaluate by the link editor.  The expression would have to be extremely complex for this to happen; generally, if the assembler will accept an expression, the link editor will have no problem. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Expression Syntax Error [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The format of an expression in the object module was incorrect.  This error should not occur unless another assembler or link editor error accompanies it.  Correcting the other error will cause this one to go away. \par \par If this error occurs with no accompanying error in either the assembly or link edit, check for disk errors by doing a full assembly and link edit. If the error persists, report the problem as a bug. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Linker Version Mismatch [2]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The link editor is not a recent enough version for the segment being linked.  Update the version of the linker being used. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 MEM Location has been Passed [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A MEM directive was encountered which tried to reserve a memory area which the linker had already passed.  The definition must be found by the linker before it has placed code at that location.  Move the MEM directive to an earlier subroutine, preferably the first. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 ORG Location has been Passed [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par An ORG was encountered for a location that has been passed.  Move the segment to an earlier position in the program. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Relative Address out of Range [4]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The destination of a relative address was too far from the current location.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Undefined Op Code [16]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The linker encountered an instruction that it did not understand.  This can occur from one of four causes: \par \par 1.  The linker in use is an old version, and the assembler or compiler needs a newer version.  If this happens, a "Linker Version Mismatch" error will also have occurred. \par \par 2.  An assembly or compile error caused the generation of a bad object module.  Remove all assembly or compile errors. \par \par 3.  The object module file has been physically damaged.  Reassemble to a fresh disk. \par \par 4.  There is a bug in either the assembler, compiler or link editor. Please report the problem for correction. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Unresolved Reference [8]\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A label was referenced but not found by the link editor.  If the label shows up in the global symbol table from the link edit, make sure the segment has issued a USING directive for the data segment that contains the label.  Otherwise, correct the problem by removing the label reference, or defining it as a global label or in a data segment. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622076}\hich\af4\dbch\af4\loch\f4 Terminal Linker Errors{\*\bkmkend _Toc497622076}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par Some errors are so bad that the linker cannot keep going; these are called terminal errors.  When the linker finds a terminal error, it prints the error message, waits for a keypress, and then quits. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Could not read Sublib Directory\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A ProDOS error occurs when attempting to read the sublib directory. \par \par This usually results from a bad disk or disk drive.  Try accessing the libraries from a different disk drive, or copy the offending disk to a new one. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 File could not be Re-opened\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A ProDOS error occurred when trying to re-open an object module file after a disk swap. \par \par Check for disk or disk drive errors. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Illegal Sublib Directory\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The sublib directory pointed to by the sublib prefix does not exist, or is not a directory. \par \par Use SET to correct the directory name. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Input File not Found\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The .ROOT File could not be Found. \par \par When the linker is invoked by using, for example, LINK MYPROG, it expects to find the file MYPROG.ROOT.  That file is created by the assembler (or a compiler).  This error occurs when the .ROOT file was not found.  Check the spelling of the file name in both the KEEP directive of the assembler and in the link editor command line.  Make sure that the file is in the prefix that is specified in the link command. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Object Module Read Error\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A ProDOS error occurred during an attempt to read from the currently opened object module.  This can sometimes occur after a non-terminal error; if so, get all of those errors out before being concerned about this one.  Usually, the error occurs as a result of a bad disk or disk drive. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Out of Memory\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The linker needed memory, but all of it had been used. \par \par This error should not occur.  If it does, report the problem as a bug. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Output Error\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A ProDOS error occurred when trying to write to the binary output file. \par \par This is generally caused by a full disk.  If that is not the case, check for a bad disk or disk drive. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Output File Could not be Opened\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par A ProDOS error occurred during an attempt to open the binary output file. \par \par This is generally caused by a full disk or trying to write to a disk that is write protected.  A drive error or trying to write to an unformatted disk could also cause the problem. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Output File could not be Re-opened\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par After swapping disks, the linker was unable to re-open the output file. \par \par Check for a full disk or a disk or disk drive error. \par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\f4 Symbol Table Overflow\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par The symbol table could not hold all of the symbols needed by the program. \par \par This should be a very rare error.  If it occurs, the only solution is to cut down on the number of global labels in the program.  Global symbols are created and passed to the link editor by START, DATA, ENTRY and GEQU directives.  Labels created inside of data areas are also passed to the linker, and so take up space.\par \par }{\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Appendix B: File Formats\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Appendix B: File Formats}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622077}\hich\af4\dbch\af4\loch\f4 Appendix B: File Formats{\*\bkmkend _Toc497622077}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622078}\hich\af4\dbch\af4\loch\f4 Overview{\*\bkmkend _Toc497622078}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The ORCA system makes use of four kinds of files:  ProDOS TXT files, ORCA SRC files, ORCA OBJ files, \hich\af4\dbch\af4\loch\f4 and ProDOS BIN files. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622079}\hich\af4\dbch\af4\loch\f4 Text Files{\*\bkmkend _Toc497622079}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 ProDOS TXT files and ORCA SRC files have the same internal format.  Both are a sequence of ASCII characters with lines separated by $0D carriage return codes.  Although ProDOS makes no strict requirement, the high bit mu\hich\af4\dbch\af4\loch\f4 st be off for use with ORCA programs.  In addition, ORCA languages on eight bit Apple // computers will ignore any character beyond the 80th character in each line.  Both types of file can be created and changed by the system editor, described in Chapter \hich\af4\dbch\af4\loch\f4 1\hich\af4\dbch\af4\loch\f4 2.  Most other ProDOS based editors will also suffice, although it will probably be necessary of convert the file to a TXT file before editing, and back to a SRC file afterward. \par \par \hich\af4\dbch\af4\loch\f4 The difference between TXT and SRC files is entirely in the way the AUX fiel\hich\af4\dbch\af4\loch\f4 d in the file header is used.  TXT files leave this field undefined, while ORCA SRC files define it to be the language number.  In addition, ORCA SRC files have a file type of $B0, rather than the $04 used by ProDOS. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622080}\hich\af4\dbch\af4\loch\f4 Object Modules{\*\bkmkend _Toc497622080}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 ORCA languages take s\hich\af4\dbch\af4\loch\f4 ource files as input and produce object modules as output.  These object modules are then used as input to the link editor.  Object modules are contained in a special file type with a file type number of $B1, which shows up as OBJ when cataloged from ORCA\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4  \par \par \hich\af4\dbch\af4\loch\f4 There are now two versions of the object module format.  The first, used with ORCA/M 4.0, is labeled as version zero in the header.  The second, used by ORCA/M 4.1 on both eight and sixteen bit Apple II computers, and by the Apple IIGS Programmers Works\hich\af4\dbch\af4\loch\f4 hop on the Apple IIGS, has a one as the version number.  Both formats are supported by this version of ORCA/M.  The assembler generates object modules using version one of the object module format, while the linker and utilities will take either version z\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ro or version one.\par \par \hich\af4\dbch\af4\loch\f4 The description below describes the subset of version one object modules used by this version of ORCA/M.  Several features that deal with relocatable code and libraries have been ommited.  For a description of these, see the reference m\hich\af4\dbch\af4\loch\f4 anual for the sixteen bit versions of ORCA/M.\par \par \hich\af4\dbch\af4\loch\f4 Object modules consist of one or more object segments.  Each object segment corresponds to a code or data segment in the assembly language source file.  Object segments are aligned to an even block boundary in\hich\af4\dbch\af4\loch\f4  the object file.  The object segment consists of two parts, the header and the body.  The header describes the entire object segment.  It contains such things as how many blocks the segment occupies, how many bytes it will add to the binary output file, \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 nd so on.  The second part is one or more operation codes that tell the linker what to put in the final executable file.  These operation codes can define constant bytes, give the linker an expression involving external labels to use to compute the value \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 f an address, and so forth.\par \par \hich\af4\dbch\af4\loch\f4 The headers for the two formats of the object module format are shown below.  Note that NUMLEN and LABLEN can greatly affect the size of the op code portion of the object segment. \par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex97\picscaley97\piccropl0\piccropr0\piccropt0\piccropb0\picw268\pich519\picwgoal5360\pichgoal10380\macpict\bliptag105433037\blipupi72{\*\blipuid 0648c7cdf99a39eccbe60d321d4264e8}0d18ffffffff0206010b001102ff0c00ffffffffffff0000ffff0000010b0000020600000000000000a00082001e0001000affffffff0206010b0022000f00046c000022003300046c000022002100040900002200210070f7000022005700046c000022007b00046c000022004500040900002200450070f700002200690004090000220069006709000022009f00046c000022008d00046c000022007b003a0024002200c300046c00002200b100040900002200b100670900002200e700046c00002200d500040900002200d5006709000022010b00046c00002200f900040900002200f9006709000022011d00043600002300ee0022015300046c0000a10096000c0100000002000000000000000001000a001c001600270057002c000c00150948656c76657469636100030015000d0009002e00040000ff0000100207010c0207010c002b17240a424c4f434b434f554e540000a0009700a10096000c0100000002000000000000000001000a00400016004b004b0015ff30002a2408524553535041434500a0009700a10096000c0100000002000000000000000001000a00640016006f003e00150250002a24064c454e47544800a0009700a10096000c0100000002000000000000000001000a007f000d008a00290015820000280087000e04545950450000a0009700a10096000c0100000002000000000000000001000a007f0043008a006a001503a0002936064c41424c454e00a0009700a10096000c0100000002000000000000000001000a0091000d009c0036001586d000280099000e064e554d4c454e0000a0009700a10096000c0100000002000000000000000001000a00910043009c0070001585000029360756455253494f4e0000a0009700a10096000c0100000002000000000000000001000a00ac001600b7004700150620002800b400170842414e4b53495a450000a0009700a10096000c0100000002000000000000000001000a00d0001600db002b001588b0002a24034f52470000a0009700a10096000c0100000002000000000000000001000a00f4001600ff004e00150840002a2409414c49474e4d454e540000a0009700a10096000c0100000002000000000000000001000a010f000d011a00370015878000280117000e064e554d5345580000a0009700a10096000c0100000002000000000000000001000a012a00160135003a00150710002b091b06556e757365640000a0009700a10096000c0100000002000000000000000001000a01600016016b0047001509a0002a36075345474e414d450000a0009700a10096000c0100000002000000000000000001000a00000016000c0046000d000a00150ac00028000900170956657273696f6e203000a000970001000affffffff0206010b0022000f00946c000020000f009401a400940020000f010001a4010000a10096000c0100000002000000000000000001000a000000a6000c00d60029900956657273696f6e20310000a000970001000affffffff0206010b0022003300946c000022005700946c000022007b00946c000022009f00946c000022008d00946c000022007b00ca0024002200690094090000220045009409000022002100940900002200210100f700002200450100f700002200690100f70000a10096000c0100000002000000000000000001000a001c00a6002700e7000d0009002a1b0a424c4f434b434f554e5400a0009700a10096000c0100000002000000000000000001000a004000a6004b00db0015ff30002a2408524553535041434500a0009700a10096000c0100000002000000000000000001000a006400a6006f00ce00150250002a24064c454e47544800a0009700a10096000c0100000002000000000000000001000a007f009d008a00b90015820000280087009e04545950450000a0009700a10096000c0100000002000000000000000001000a007f00d3008a00fa001503a0002936064c41424c454e00a0009700a10096000c0100000002000000000000000001000a0091009d009c00c6001586d000280099009e064e554d4c454e0000a0009700a10096000c0100000002000000000000000001000a009100d3009c0100001585000029360756455253494f4e0000a000970001000affffffff0206010b002200c300946c00002200b100940900002200b10100f70000a10096000c0100000002000000000000000001000a00ac00a600b700d7002800b400a70842414e4b53495a450000a000970001000affffffff0206010b002200e700946c00002200d500940900002200d50100f7000022010b00946c00002200f900940900002200f90100f70000a10096000c0100000002000000000000000001000a00d000a600db00ca002a2406556e7573656400a0009700a10096000c0100000002000000000000000001000a00f400a600ff00bf00158290002a24034f52470000a000970001000affffffff0206010b0022012f00946c000022011d009409000022011d0100f70000a10096000c0100000002000000000000000001000a011800a6012300de002a2409414c49474e4d454e540000a000970001000affffffff0206010b0022015300946c000022014100946c000022014100ca00ee00a10096000c0100000002000000000000000001000a0133009d013e00c70028013b009e064e554d5345580000a0009700a10096000c0100000002000000000000000001000a013300d3013e00fb0015ff90002936064c4342414e4b00a0009700a10096000c0100000002000000000000000001000a014500a6015000d1001501400028014d00a7065345474e554d0000a000970001000affffffff0206010b0022017700946c000022016500940900002201650100f70000a10096000c0100000002000000000000000001000a016000a6016b00c8002a1b05454e5452590000a000970001000affffffff0206010b0022018900946c000022019b00946c0000a10096000c0100000002000000000000000001000a017b00a6018600d9002a1b08444953504e414d4500a0009700a10096000c0100000002000000000000000001000a018d00a6019800d700158070002a1208444953504441544100a000970001000affffffff0206010b002201a4008b1200002201ad008b1200002201a400f71200002201ad00f71200002201bf00946c00002201ec00946c0000a10096000c0100000002000000000000000001000a01cc00a601d700dc002a3f084c4f41444e414d4500a0009700a10096000c0100000002000000000000000001000a01f900a6020400d700150080002a2d075345474e414d450000a0009700a10096000c0100000002000000000000000001000a000a00790015008d001501a000280012007a0324303000a0009700a10096000c0100000002000000000000000001000a002e00790039008d00150410002a24032430340000a0009700a10096000c0100000002000000000000000001000a00520079005d008d00150680002a24032430380000a0009700a10096000c0100000002000000000000000001000a007600790081008e001508f0002a24032430430000a0009700a10096000c0100000002000000000000000001000a008800790093008e001589e0002a12032430450000a0009700a10096000c0100000002000000000000000001000a009a007900a5008d00158c40002a12032431300000a0009700a10096000c0100000002000000000000000001000a00be007900c9008d00158eb0002a24032431340000a0009700a10096000c0100000002000000000000000001000a00e2007900ed008900159120002a24032431380000a0009700a10096000c0100000002000000000000000001000a010600790111008e00159390002a24032431430000a0009700a10096000c0100000002000000000000000001000a012a00790135008d00151480002a24032432300000a0009700a10096000c0100000002000000000000000001000a013c00790147008d001516f0002a12032432320000a0009700a10096000c0100000002000000000000000001000a014e00790159008d00151960002a12032432340000a0009700a10096000c0100000002000000000000000001000a01720079017d008d00151bd0002a24032432380000a0009700a10096000c0100000002000000000000000001000a01840079018f008e00151e40002a12032432410000a0009700a10096000c0100000002000000000000000001000a01ba004c01c5007f001520a0002801c2004d08444953504e414d450000a0009700a10096000c0100000002000000000000000001000a01e7004c01f2008f00152110002a2d0b444953504e414d452b24410000a000970001000affffffff0206010b0071001e01610001016d0007016d0004016100010161000401610007016d00040020000f0004016100040071001e0162006d016e0073016e00700162006d0162007001620073016e0070002000100070016200700071001e01f70091020300970203009401f7009101f7009401f7009702030094002201ad0094004a0071001e01f800fd020401030204010001f800fd01f8010001f8010302040100002201ae0100004a00a0008300ff}}{\par }\pard \qj\widctlpar\adjustright {\par }\pard \qj\fi-2880\li3600\widctlpar\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Name}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Description}{\par \par \hich\af4\dbch\af4\loch\f4 BLOCKCOUNT\tab Number of blo\hich\af4\dbch\af4\loch\f4 cks occupied by the segment.\par \par \hich\af4\dbch\af4\loch\f4 RESSPACE\tab Number of bytes to place at the end of the segment.\par \par \hich\af4\dbch\af4\loch\f4 LENGTH\tab Total number of bytes occupied by the segment in the executable file.\par \par \hich\af4\dbch\af4\loch\f4 TYPE\tab \tab Type of segment.  In this version of ORCA, only two types are used.  $00 indicat\hich\af4\dbch\af4\loch\f4 es a code segment, and is produced by the START directive.  $01 indicates a data segment.  It is produced by the DATA directive.\par \par \hich\af4\dbch\af4\loch\f4 LABLEN\tab Length of labels.  This can range from zero to ten.  A label length of zero indicates that labels are variable length. \hich\af4\dbch\af4\loch\f4  Variable length labels start with a length byte and are followed by ASCII characters.  They can be up to 255 bytes long.  Fixed length labels are padded on the right with spaces.  In this version, labels are ten characters long.\par \par \hich\af4\dbch\af4\loch\f4 NUMLEN\tab Numbers can be one\hich\af4\dbch\af4\loch\f4  to four bytes in length.  In this version, they are four bytes long.\par \par \hich\af4\dbch\af4\loch\f4 VERSION\tab The version of the object module format.  Both zero and one are supported.  The assembler generates object modules using version one.\par \par \hich\af4\dbch\af4\loch\f4 BANKSIZE\tab The maximum size of an executable\hich\af4\dbch\af4\loch\f4  segment.  In this version, this value is $10000, for executable segments up to 64K in length.\par \par \hich\af4\dbch\af4\loch\f4 ORG\tab Fixed origin for the segment.  If omitted, the segment is placed immediately after the one before it.  If none have appeared before it, and no origin is spe\hich\af4\dbch\af4\loch\f4 cified through another mechanism, the segment will be placed at $2000.\par \par \hich\af4\dbch\af4\loch\f4 ALIGNMENT\tab Byte boundary to align the segment to.  This value must be a power of two.\par \par \hich\af4\dbch\af4\loch\f4 NUMSEX\tab Specifies the order that numbers appear in.  If NUMSEX is zero, numbers appear least signif\hich\af4\dbch\af4\loch\f4 icant byte first.  If it is not zero, they appear most significant byte first.  NUMSEX is always zero in this version of ORCA.\par \par \hich\af4\dbch\af4\loch\f4 LCBANK\tab Used on the Apple IIGS to indicate if a segment should be loaded into the language card area.  Not used in this version o\hich\af4\dbch\af4\loch\f4 f ORCA.\par \par \hich\af4\dbch\af4\loch\f4 SEGNUM\tab In the Apple IIGS load segment, this number is used by the loader to check the contents of the file.  It is not used in this version of ORCA.\par \par \hich\af4\dbch\af4\loch\f4 ENTRY\tab Displacement into the object segment where execution should begin.  Not used in this versio\hich\af4\dbch\af4\loch\f4 n of ORCA.\par \par \hich\af4\dbch\af4\loch\f4 DISPNAME\tab Displacement to the name field.  Using a displacement allows the format to be expanded later.\par \par \hich\af4\dbch\af4\loch\f4 DISPDATA\tab Displacement to the data field.  Using a displacement allows the format to be expanded later.\par \par \hich\af4\dbch\af4\loch\f4 LOADNAME\tab Name of the load segment.  \hich\af4\dbch\af4\loch\f4 This field is always ten bytes long.  It is not used in this version of ORCA.\par \par \hich\af4\dbch\af4\loch\f4 SEGNAME\tab Name of the object segment.\par }\pard \qj\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The op code portion of the segment consists of three major groups of op codes.  These are:\par \par }\pard \qj\widctlpar\tx720\tx2160\adjustright {\tab }{\ul \hich\af4\dbch\af4\loch\f4 Op Code}{\tab \tab }{\ul \hich\af4\dbch\af4\loch\f4 Use}{\par \par \tab \hich\af4\dbch\af4\loch\f4 00\tab \tab end of segment indicator\par \tab \hich\af4\dbch\af4\loch\f4 01\hich\af4\dbch\af4\loch\f4 -DF\tab \tab absolute bytes\par \tab \hich\af4\dbch\af4\loch\f4 E0-FF\tab \tab directives\par }\pard \qj\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 As indicated, the segment ends when a $00 is found.  A hex number from $01 to $DF is essentially a byte counter.  The indicated number of bytes are placed directly in the load module, unchanged.  The bytes follow the\hich\af4\dbch\af4\loch\f4  byte count in the order of use.\par \par \hich\af4\dbch\af4\loch\f4 The last item to describe is the directives themselves. \par \par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Op Code}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Description}{\par \par \hich\af4\dbch\af4\loch\f4 E0\tab Align - The operand is a NUMLEN byte number indicating the even byte boundary to align to.  Alignment to a page boundary would appear, with \hich\af4\dbch\af4\loch\f4 M=2, as E0 00 01.\par \par \hich\af4\dbch\af4\loch\f4 E1\tab ORG - The operand is a NUMLEN byte number  indicating an absolute address to ORG to.  If ORG>* (* is the current location counter) zeros are inserted to reach ORG.  If ORG=*, no action is taken.  If ORG<*, the linker must back track i\hich\af4\dbch\af4\loch\f4 n the binary load module. If ORG < START, where START is the first byte generated, an error results.\par \par \hich\af4\dbch\af4\loch\f4 E4\tab USING - followed by a LABLEN byte name of a data area to use.\par \par \hich\af4\dbch\af4\loch\f4 E5\tab STRONG - followed by a LABLEN byte name to generate a strong reference to.  This does\hich\af4\dbch\af4\loch\f4  not generate code, but will flag an error if the routine cannot be found.  Its effect is to insure that the routine is included in the load module.\par \par \hich\af4\dbch\af4\loch\f4 E6\tab GLOBAL - followed by a LABLEN byte label whose  value is set to *.  The name is followed by  three one \hich\af4\dbch\af4\loch\f4 byte fields.  The first two define the length and type attributes of the label.  The last is a private flag, which indicates if the name is visible outside of the object module in which it appears (the value is zero) or only in the object file (the value \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 s one). \par \par \hich\af4\dbch\af4\loch\f4 E7\tab GEQU - The operand is a LABLEN byte name,  followed by three one byte fields, followed by an expression.  The first two attributes are the length and type attributes of the label.  The last is a private flag, which indicates if the name is vis\hich\af4\dbch\af4\loch\f4 ible outside of the object module in which it appears (the value is zero) or only in the object file (the value is one).  The value of the label is set to the value of the expression.  In this version of ORCA, the expression is always a constant.  See EXP\hich\af4\dbch\af4\loch\f4 R\hich\af4\dbch\af4\loch\f4  (op code $E8) for a description of an expression.\par \par \tab \hich\af4\dbch\af4\loch\f4 Note that in version zero of the object module format, the last term is a NUMLEN byte constant.\par \par \hich\af4\dbch\af4\loch\f4 E8\tab MEM - The operand is two absolute NUMLEN byte values specifying an absolute range of memory which must \hich\af4\dbch\af4\loch\f4 be reserved.  This is intended for graphics use.\par \par \hich\af4\dbch\af4\loch\f4 EB\tab EXPR - The first operand byte is the  number of bytes to generate, and is <= NUMLEN.  This is followed by a reverse polish notation expression.  Operators include:\par }\pard \qj\widctlpar\adjustright {\par }\pard \qj\fi-2790\li4230\widctlpar\tx2250\tx2880\adjustright {\tab \hich\af4\dbch\af4\loch\f4          }{\ul \hich\af4\dbch\af4\loch\f4 Operator}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Description}{\par \par \tab \tab \hich\af4\dbch\af4\loch\f4 00\tab e\hich\af4\dbch\af4\loch\f4 nd of expression\par \tab \tab \hich\af4\dbch\af4\loch\f4 01\tab signed integer add\par \tab \tab \hich\af4\dbch\af4\loch\f4 02\tab signed integer subtract\par \tab \tab \hich\af4\dbch\af4\loch\f4 03\tab signed integer multiply\par \tab \tab \hich\af4\dbch\af4\loch\f4 04\tab signed integer divide\par \tab \tab \hich\af4\dbch\af4\loch\f4 05\tab modulo operation\par \tab \tab \hich\af4\dbch\af4\loch\f4 06\tab arithmetic negation\par \tab \tab \hich\af4\dbch\af4\loch\f4 07\tab signed bit shift operator\par \tab \tab \hich\af4\dbch\af4\loch\f4 08\tab logical and\par \tab \tab \hich\af4\dbch\af4\loch\f4 09\tab logical or\par \tab \tab \hich\af4\dbch\af4\loch\f4 0A\tab logical eor\par \tab \tab \hich\af4\dbch\af4\loch\f4 0B\tab logical not\par \tab \tab \hich\af4\dbch\af4\loch\f4 0C\tab logical <=\par \tab \tab \hich\af4\dbch\af4\loch\f4 0D\tab logical >=\par \tab \tab \hich\af4\dbch\af4\loch\f4 0E\tab logical <>\par \tab \tab \hich\af4\dbch\af4\loch\f4 0F\tab logical <\par \tab \tab \hich\af4\dbch\af4\loch\f4 10\tab logical >\par \tab \tab \hich\af4\dbch\af4\loch\f4 11\tab logical =\par }\pard \qj\widctlpar\adjustright {\par }\pard \qj\fi-2880\li4320\widctlpar\tx1710\tx2790\adjustright {\tab \tab \hich\af4\dbch\af4\loch\f4 Operands are\par \par \tab \tab \hich\af4\dbch\af4\loch\f4 80\tab current location counter\par \tab \tab \hich\af4\dbch\af4\loch\f4 81\tab ABS - followed by a NUMLEN byte absolute value\par \tab \tab \hich\af4\dbch\af4\loch\f4 82\tab WEAK - followed by a NUMLEN byte weak refere\hich\af4\dbch\af4\loch\f4 nce label name\par \tab \tab \hich\af4\dbch\af4\loch\f4 83\tab reference to a LABLEN byte label in the operand, resolves as the label value\par \tab \tab \hich\af4\dbch\af4\loch\f4 84\tab length attribute of the following LABLEN byte label\par \tab \tab \hich\af4\dbch\af4\loch\f4 85\tab type attribute of the following a NUMLEN byte label\par \tab \tab \hich\af4\dbch\af4\loch\f4 86\tab count attribute of the following LABLEN \hich\af4\dbch\af4\loch\f4 byte label\par \tab \tab \hich\af4\dbch\af4\loch\f4 87\tab REL - followed by a NUMLEN byte displacement from the start of the current module\par }\pard \qj\widctlpar\adjustright {\par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 EC\tab ZPEXPR - same as EB, except that the bits truncated to allow the final value to fit into the specified space must all be zero.  This is effectively a vari\hich\af4\dbch\af4\loch\f4 able length implementation of a zero page protocol.\par \par \hich\af4\dbch\af4\loch\f4 ED\tab BKEXPR - same as EB, except that the bits truncated to allow the final value to fit  into the specified space must match the corresponding bits in the correct location counter.  This allows checking t\hich\af4\dbch\af4\loch\f4 o insure  that an address is in the correct bank.\par \par \hich\af4\dbch\af4\loch\f4 EE\tab RELEXPR - the first byte is the number of bytes to generate, and is <=NUMLEN.  This is  followed by a NUMLEN byte displacement from the current location counter, which is the origin for a relative branc\hich\af4\dbch\af4\loch\f4 h.  An expression of the same format as that for EB follows this value.  The expression is resolved as a NUMLEN byte absolute address, then a relative branch is  generated from the origin to the computed destination.  The result is  truncated to the neede\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  number of bytes, and checked to insure that no range errors resulted from the truncation.\par \par \hich\af4\dbch\af4\loch\f4 EF\tab LOCAL - same as E6 except that it is a true  local label, and is ignored by the link editor unless the module is a data area.  In subroutines, it can be used for\hich\af4\dbch\af4\loch\f4  symbolic debugging.\par \par \hich\af4\dbch\af4\loch\f4 F0\tab EQU - same as E7, except that this is a local label, significant only in data areas.\par \par \hich\af4\dbch\af4\loch\f4 F1\tab DS - the operand is a NUMLEN byte number indication how many zero bytes of insert in the file at the current location counter.\par }\pard \qj\widctlpar\adjustright {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622081}\hich\af4\dbch\af4\loch\f4 Binary Files{\*\bkmkend _Toc497622081}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The output from the link editor is a standard ProDOS binary file.  Binary files are a sequence of bytes with a start location given in the file header.  When binary files are executed by ProDOS or ORCA, they are loaded unchanged into memory at the given s\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 art address, and a JSR is performed to that start address.  If a program does not call any special ORCA operating system functions, it can be executed under ProDOS.  If it does not interfere with the memory from $800 to $1FFF, it can be executed under ORC\hich\af4\dbch\af4\loch\f4 A\hich\af4\dbch\af4\loch\f4 .  The program should end with an RTS, which will pass control back to the operating system. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Appendix C: Differences Between ORCA/M 3.5 and 4.0\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Appendix C: Differences Between ORCA/M 3.5 and 4.0}{\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622082}\hich\af4\dbch\af4\loch\f4 Appendix C: Differences Between ORCA/M 3.5 and ORCA/M 4.0{\*\bkmkend _Toc497622082}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par \hich\af4\dbch\af4\loch\f4 This appendix gives a quick summary of the differences between ProDOS ORCA (ORCA/M 4.0) and DOS ORCA\hich\af4\dbch\af4\loch\f4  (ORCA/M 3.5).  Most of the changes were actually made when ORCA 3.6 was released - that version of ORCA supports the 65816 under DOS. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622083}\hich\af4\dbch\af4\loch\f4 Generalities{\*\bkmkend _Toc497622083}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There are three basic changes which drive all of the minor differences between the two systems.  The firs\hich\af4\dbch\af4\loch\f4 t is support for the 65816 CPU, including the extension of the address bus from sixteen to thirty-two bits.  In the process of adding the RENAME directive, all op code lengths were extended to eight characters.  This allowed the op codes for a number of d\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 rectives to be spelled out, since they were no longer limited to five characters.  Finally, some changes were necessary to support ProDOS as opposed to DOS. \par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622084}\hich\af4\dbch\af4\loch\f4 Changes to Support ProDOS{\*\bkmkend _Toc497622084}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 All directives that use file names in their operand must now use names\hich\af4\dbch\af4\loch\f4  that are valid under ProDOS.  Unless file names are longer than fifteen characters or unless they contain non-alphanumeric characters, this will probably amount to meaning that the volume parameters will need to be removed.  If desired, full or partial p\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 th names are now valid. \par \par \hich\af4\dbch\af4\loch\f4 The directives that require a file name in the operand, and thus need to be checked for possible changes, are: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab KEEP\par \tab \tab COPY\par \tab \tab APPEND\par \tab \tab MCOPY \par \tab \tab MDROP\par \tab \tab MLOAD\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622085}\hich\af4\dbch\af4\loch\f4 Changes to Support the 65816{\*\bkmkend _Toc497622085}\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622086}\hich\af4\dbch\af4\loch\f4 The 65816 Directive{\*\bkmkend _Toc497622086}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A new directive e\hich\af4\dbch\af4\loch\f4 nables the instruction set of the 65816, in much the same way that the 65C02 directive enables the 65C02 instruction set in version 3.5 of ORCA.  The directive is called 65816, and its operand is either ON or OFF. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622087}\hich\af4\dbch\af4\loch\f4 Address Mode Specification{\*\bkmkend _Toc497622087}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There are fo\hich\af4\dbch\af4\loch\f4 ur cases on the 65816 which require a syntax different from the operand formats already defined for the 6502.  These operand formats comply with the assembler syntax adopted by the Western Design Center as standard for the 65816. \par \par \hich\af4\dbch\af4\loch\f4 The first new addressing\hich\af4\dbch\af4\loch\f4  mode is stack relative addressing.  The effective address for a stack relative address is computed by adding the sixteen bit stack pointer to an eight bit displacement.  Since this is, at the machine level, simply a form of zero page indexed addressing u\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ing a somewhat unusual index register, the operand is specified like zero page indexed addresses on the 6502: \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LDA\tab DP,S\par \par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The DP portion of the above example is an expression which must resolve to a one byte number, and the S indicates that the indexing \hich\af4\dbch\af4\loch\f4 will be off of the S, or stack, register. \par \par \hich\af4\dbch\af4\loch\f4 Continuing with this line of reasoning, stack relative indexed addressing is a combination of two old addressing modes, indexed indirect addressing and indirect indexed addressing.  The addressing mode, again for\hich\af4\dbch\af4\loch\f4  a LDA instruction, is specified as\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab LDA\tab (DP,S),Y\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 where DP must again resolve to a one byte number.  The effective address for this instruction is computed by adding the sixteen bit stack register to the one byte direct address, whose result points to a\hich\af4\dbch\af4\loch\f4 n address.  Y is then added to the address, which becomes the effective address for the instruction. \par \par \hich\af4\dbch\af4\loch\f4 Two new addressing modes allow a three byte long address to be used for an indirect address.  These addressing modes are direct indirect indexed long and\hich\af4\dbch\af4\loch\f4  direct indirect long addressing.  In both of these cases, the fact that a long address is being used is indicated by using square brackets instead of parentheses to indicate the indirection.  The following examples illustrate this point. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3060\adjustright \f6\fs18\cgrid {\tab ZP\tab EQU\tab 4\par \tab \tab LDA\tab (ZP),Y\tab direct indirect indexed\par \tab !\tab \tab \tab  (two byte address at ZP)\par \tab \tab LDA\tab [ZP],Y\tab direct indirect indexed long\par \tab !\tab \tab \tab  (three byte address at ZP)\par \tab \tab LDA\tab (ZP)\tab direct indirect\par \tab !\tab \tab \tab  (two byte address at ZP)\par \tab \tab LDA\tab [ZP]\tab direct indirect long\par \tab !\tab \tab \tab  (three byte address at ZP)\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The last added addressing mode which requires a new operand format is the operand used by the string move instructions MVN and MVP.  Both of these operation codes are followed by two one byte values when the machine code is examined.  These one byte \hich\af4\dbch\af4\loch\f4 values represent the bank bytes for the destination and source addresses, respectively.  If both the source and destination bank are the current bank, the entire operand becomes optional.  If either of the banks is different, the operand is required: it i\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  two absolute long values separated by a comma.  The first of these values is in the source bank, while the second is in the destination bank.  The examples below show the machine code generated to the left of the instructions, assuming that the code is l\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 nked to bank 5. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1080\tx1980\tx2610\adjustright \f6\fs18\cgrid {\tab \tab ABC\tab EQU\tab $50000\par \tab \tab DEF\tab EQU\tab $60000\par \tab 540505\tab \tab MVN\par \tab 540605\tab \tab MVN\tab ABC,DEF\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622088}\hich\af4\dbch\af4\loch\f4 Operand Size Specification{\*\bkmkend _Toc497622088}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The remaining addressing modes added by the 65816 instruction set are all long addressing mode versions of existing instructions, like the ab\hich\af4\dbch\af4\loch\f4 solute long indexed by X, which is the long addressing mode format of the absolute indexed by X addressing mode found on the 6502.  These are coded exactly like their absolute addressing mode counterparts.  The assembler can automatically select between z\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ro page addresses, absolute addresses, and absolute long addresses if the address is known at assembly time.\par \par \hich\af4\dbch\af4\loch\f4 In any case, it is possible to force zero page, absolute or long  addressing by using the characters < | or > right in front of the expression in \hich\af4\dbch\af4\loch\f4 the operand field.  (On Apple ][+ computers, the ! may be substituted for the | character, which is not on the keyboard.) The < character forces direct page addressing, the | forces absolute addressing, and the > forces long addressing.  In cases where th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  operation code explicitly requires a particular address length, like JML, which requires long addressing, or indirect indexed addressing, which requires a zero page address, forcing an incorrect addressing mode will result in an error.  The JML instructi\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 n, and others like it, will force long addressing by themselves; it is not necessary to explicitly force long addressing. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab LDA\tab <ZP\tab forces zero page addressing\par \tab LDA\tab |ZP,X\tab forces absolute indexed addressing\par \tab LDA\tab >ZP\tab forces long addressing\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622089}\hich\af4\dbch\af4\loch\f4 Word Size Direct\hich\af4\dbch\af4\loch\f4 ives{\*\bkmkend _Toc497622089}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 When the immediate addressing mode is used, the assembler needs a clue as to what mode the 65816 will be operating in when the instruction is executed, so that it will know whether to use a one or two byte immediate value.  There are two directives f\hich\af4\dbch\af4\loch\f4 or this purpose, LONGA and LONGI, both of which can have operands of ON or OFF.  LONGA specifies the size being used for accumulator and memory based instructions, while LONGI specifies the length of index registers.  It is entirely the responsibility of \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he programmer to insure that the assembler is kept informed of the appropriate register sizes.  The following code should clarify the use of these directives. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx720\tx1710\tx2340\tx3420\adjustright \f6\fs18\cgrid {\tab \tab LONGA\tab ON\tab \tab tell the assembler\par \tab !\tab \tab \tab  to use long A\par C220\tab \tab REP\tab #%00100000\tab tell the 65816 to\par \tab !\tab \tab \tab  use long A\par \tab \tab LONGI\tab OFF\tab \tab tell the assembler\par \tab !\tab \tab \tab  to use 8 bit X, Y\par E210\tab \tab SEP\tab #%00010000\tab tell the 65816 to\par \tab !\tab \tab \tab  use 8 bit X, Y\par A93412\tab \tab LDA\tab #$1234\par A034\tab \tab LDY\tab #$1234\par \tab \tab LONGA\tab OFF\tab \tab tell the assembler\par \tab !\tab \tab \tab  to use 8 bit A\par E220\tab \tab SEP\tab #%00100000\tab tell the 65816 to\par \tab !\tab \tab \tab  use 8 bit A\par A934\tab \tab LDA\tab #$1234\par \tab \tab LONGI\tab ON\tab \tab tell the assembler\par \tab !\tab \tab \tab  to use long X, Y\par C210\tab \tab REP\tab #%00010000\tab tell the 65816 to\par \tab !\tab \tab \tab  use long X, Y\par A03412\tab \tab LDY\tab #$1234\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In each case, the number of immediate bytes inserted in the code stream was determined b\hich\af4\dbch\af4\loch\f4 y the LONGA and LONGI directives, while the number of bytes the CPU expected was determined by the REP and SEP instructions.  Below are two macros which should make the job of setting and clearing these modes easier; the macros set and clear the modes for\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 both the assembler and the CPU.\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MACRO\par \tab &LAB\tab INDEX\tab &L\par \tab \tab AIF\tab &L='SH',.A\par  \tab &LAB\tab REP\tab #%00010000\par \tab \tab LONGI\tab ON\par \tab \tab MEXIT\par \tab .A\par \tab &LAB\tab SEP\tab $%00010000\par \tab \tab LONGI\tab OFF\par \tab \tab MEND\par \par \tab \tab MACRO\par \tab &LAB\tab MEMORY &L\par \tab \tab AIF\tab &L='SH',.A\par  \tab &LAB\tab REP\tab #%00100000\par \tab \tab LONGA\tab ON\par \tab \tab MEXIT\par \tab .A\par \tab &LAB\tab SEP\tab #%00100000\par \tab \tab LONGA\tab OFF\par \tab \tab MEND\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Using these macros, the example could be written as\par \par }\pard\plain \s16\keepn\nowidctlpar\tx810\tx1350\tx2250\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MEMORY\tab LONG\par \tab \tab INDEX\tab SHORT\par A93412\tab \tab LDA\tab #$1234\par A034\tab \tab LDY\tab #$1234\par \tab \tab MEMORY\tab SHORT\par A934\tab \tab LDA\tab #$1234\par \tab \tab INDEX\tab LONG\par A03412\tab \tab LDY\tab #$1234\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622090}\hich\af4\dbch\af4\loch\f4 Byte Selection Functions{\*\bkmkend _Toc497622090}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The up arrow chara\hich\af4\dbch\af4\loch\f4 cter has been added to the less than and greater than keys for use in selecting the byte or bytes to be used during immediate addressing.  The function of the various byte selection functions has also been increased slightly to define their operation for \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 wo byte immediate values.  In the new definition, the > selector causes the immediate value to be divided by 256, placing the most significant byte of a two byte address in the least significant byte position.  For one byte immediate addresses, this confo\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ms to the action of the 6502 assembler syntax definition.  If a two byte immediate address is used, this results in the bank byte showing up in the most significant byte position.  The ^ character causes the result to be divided by 65536 instead of 256, t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 us shifting the bank byte into the least significant byte position. \par \par \par }\pard\plain \s16\keepn\nowidctlpar\tx720\tx1350\tx2160\tx3960\adjustright \f6\fs18\cgrid {\tab \tab MEMORY\tab SHORT\par \tab \tab BANK\tab $12\par A956\tab \tab LDA\tab #<$3456\par A934\tab \tab LDA\tab #>$3456\par A912\tab \tab LDA\tab #^$3456\par \tab \tab MEMORY\tab LONG\par A95634\tab \tab LDA\tab #<$3456\par A93412\tab \tab LDA\tab #>$3456\par A91200\tab \tab LDA\tab #^$3456\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622091}\hich\af4\dbch\af4\loch\f4 Additional Changes to the Asse\hich\af4\dbch\af4\loch\f4 mbler{\*\bkmkend _Toc497622091}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622092}\hich\af4\dbch\af4\loch\f4 Case Insensitivity{\*\bkmkend _Toc497622092}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Lowercase letters may now be used anywhere that an uppercase letter is used.  The assembler automatically converts to uppercase before using a character.  Thus, ABC, abc and AbC are equivalent labels. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622093}\hich\af4\dbch\af4\loch\f4 Label Formats{\*\bkmkend _Toc497622093}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There is no\hich\af4\dbch\af4\loch\f4  longer a limit to the length of labels; however, only the first ten characters of a label are significant.  The underscore character can now be used in labels; it too is not significant.  For example, THISLABEL and THIS_LABEL are treated as equivalent by\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the assembler. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622094}\hich\af4\dbch\af4\loch\f4 Quoted String Syntax{\*\bkmkend _Toc497622094}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The double quote character may now be used instead of the single quote character for quoting strings.  The opening and closing quote types must, however, match.  It is not recommended that the double quotes be used by\hich\af4\dbch\af4\loch\f4  the programmer; they are intended for use by the macro writer so that strings passed to the macro which contain single quote marks within the string can be properly parsed. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622095}\hich\af4\dbch\af4\loch\f4 Assembler Statistics{\*\bkmkend _Toc497622095}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The number of source lines processed and the number of lin\hich\af4\dbch\af4\loch\f4 es generated by macro expansions are now printed at the end of an assembly.  The number of page faults is also listed.  This is the number of times the assembler had to access the macro file during macro expansions. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622096}\hich\af4\dbch\af4\loch\f4 Eight Byte Integers{\*\bkmkend _Toc497622096}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A DC format has b\hich\af4\dbch\af4\loch\f4 een added to support integers up to eight bytes in length. It is now possible to specify any integer length, from one to  eight, after the I in a DC statement.  Expressions and labels may only be used in one to four byte integers. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab DC\tab I1'1'\par \tab \tab DC\tab I2'1'\par \tab \tab DC\tab I5'1'\par \tab \tab DC\tab I8'1'\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622097}\hich\af4\dbch\af4\loch\f4 S Attribute{\*\bkmkend _Toc497622097}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A new attribute is available which lets the source code detect the current status of the assembler flags set by all of the directives which have operands of either ON or OFF.  This is provided mostly to support macros whi\hich\af4\dbch\af4\loch\f4 ch needed to know if the long or short register sizes had been selected.  For example, the code below would distinguish between long or short index registers at assembly time, using the conditional assembly capabilities of ORCA to select the proper code. \par \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab \tab AIF\tab S:LONGI,.A\par  \tab * Insert code here for 8 bit index registers.\par \tab \tab AGO\tab .B\par  \tab .A\par  \tab * Insert code here for 16 bit index registers.\par  \tab .B\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622098}\hich\af4\dbch\af4\loch\f4 Spelling Changes{\*\bkmkend _Toc497622098}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The maximum number of characters that could be used in an assembler directive was changed from five to\hich\af4\dbch\af4\loch\f4  eight, allowing several directive names to be spelled correctly.  The &SCNT predefined symbolic parameter spelling has also been changed, in keeping with the ORCA wide convention of starting all system symbols with the characters SYS.  (The purpose of th\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 s convention is to prevent accidental label conflicts - a programmer should never start a label with the characters SYS, and since the system always does, there will never be a conflict.)\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab OLD\tab \tab NEW\par \par \tab &SCNT\tab \tab &SYSCNT\par \tab AINPT\tab \tab AINPUT\par \tab APEND\tab \tab APPEND\par \tab ASRCH\tab \tab ASEARCH\par \tab EXPND\tab \tab EXPAND\par \tab PRNT\tab \tab PRINTER\par \tab SYMBL\tab \tab SYMBOL\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 You can change all of your old files to the new spellings using the editor's global search and replace command, or use the RENAME directive, described below, to avoid problems with all of the changes exce\hich\af4\dbch\af4\loch\f4 pt &SCNT. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622099}\hich\af4\dbch\af4\loch\f4 IEEE Directive{\*\bkmkend _Toc497622099}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The IEEE directive now defaults to ON instead of OFF.  In addition, the 3.5 version's double precision floating point format is no longer available; all double precision numbers will be in IEEE format. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622100}\hich\af4\dbch\af4\loch\f4 MSB Directive{\*\bkmkend _Toc497622100}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The most \hich\af4\dbch\af4\loch\f4 significant bit directive now defaults to off instead of on, causing strings and character constants to be generated with the most significant bit off instead of on.  To reverse the effect, start your program with MSB ON. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622101}\hich\af4\dbch\af4\loch\f4 RENAME Directive{\*\bkmkend _Toc497622101}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The RENAME dir\hich\af4\dbch\af4\loch\f4 ective allows the name of any instruction or directive to be changed during an assembly.  The reason for this addition is to allow instructions to be renamed to avoid conflicts between the 6502 instruction set and the instruction set of a CPU which is bei\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 g implemented as a cross assembler via macros from ORCA.  To use the directive, place the current operation code, a comma, and the new operation code in the operand field of the RENAME directive.  Limitations are that the new operation code must be eight \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 haracters or less, contain no blanks, and that the RENAME directive must appear outside of a subroutine (i.e. before the first START directive or following an END directive and before the succeeding START directive). \par \par \hich\af4\dbch\af4\loch\f4 Another more immediate use is to prov\hich\af4\dbch\af4\loch\f4 ide compatibility with the old directive spellings from ORCA 3.5.  For example, starting a program with the following directives would provide almost complete compatibility with the old version - the only changes needed would be to switch the spelling of \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ny occurrence of &SCNT to &SYSCNT, and to eliminate any of the old ten byte double precision floating point DC directives from the program. \par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx2250\tx3960\adjustright \f6\fs18\cgrid {\tab \tab SETCOM\tab 20\par \tab \tab MSB\tab ON\par \tab \tab IEEE\tab OFF\par \tab \tab RENAME\tab AINPUT,AINPT\par \tab \tab RENAME\tab APPEND,APEND\par \tab \tab RENAME\tab ASEARCH,ASRCH\par \tab \tab RENAME\tab EXPAND,EXPND\par \tab \tab RENAME\tab PRINTER,PRNT\par \tab \tab RENAME\tab SYMBOL,SYMBL\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622102}\hich\af4\dbch\af4\loch\f4 SETCOM Directive{\*\bkmkend _Toc497622102}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The SETCOM directive uses a constant operand in the range 1 to 80 to set the column that defines the start of a comment field to the assembler.  The comment column defines the last colum\hich\af4\dbch\af4\loch\f4 n where an operand field can start; it currently defaults to 40, and defaulted to 20 in version 3.5 of ORCA. \par \par }\pard\plain \s3\qj\keepn\widctlpar\tqr\tx6120\outlinelevel2\adjustright \b\fs28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622103}\hich\af4\dbch\af4\loch\f4 TRACE Directive{\*\bkmkend _Toc497622103}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A trace directive has been added; its operand is either ON or OFF, defaulting to OFF.  When ON, all lines are listed, even those\hich\af4\dbch\af4\loch\f4  that the assembler normally does not list.  This is provided principally to aid in debugging macros. \par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Appe\hich\af7\dbch\af4\loch\f7 ndix D: Differences Between ORCA/M 4.0 and 4.1\par }}\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622104}\hich\af4\dbch\af4\loch\f4 Appendix D: Differences Between ORCA/M 4.0 and ORCA/M 4.1{\*\bkmkend _Toc497622104}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622105}\hich\af4\dbch\af4\loch\f4 The Command Processor and Utilities{\*\bkmkend _Toc497622105}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 COPY\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The copy command will now accept a file name as \hich\af4\dbch\af4\loch\f4 a destination.  For example, if you type\par \par }\pard\plain \s16\keepn\nowidctlpar\tx360\tx1350\tx1980\tx3960\adjustright \f6\fs18\cgrid {\tab COPY MYFILE /THATDISK/THATDIR/NEWFILE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 and /THATDISK/THATDIR/NEWFILE is not a directory, but /THATDISK/THATDIR is, the file will be copied to NEWFILE in the indicated directory.  As was true before, if a directory\hich\af4\dbch\af4\loch\f4  is specified as the destination, the file retains its original name.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 FILETYPE\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A new command called FILETYPE has been added.  It is used to change the file type of a disk file.  Its most common use is to change BIN files to SYS files so that they can be \hich\af4\dbch\af4\loch\f4 executed by ProDOS during the boot process.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 INIT\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The INIT utility now supports any disk that allows the ProDOS initialization call to be made, not simply 5-1/4 inch disks.  Specifically, this includes the 800K 3-1/2 inch floppy and most hard disks.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 MACG\hich\af4\dbch\af4\loch\f4 EN\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The MACGEN utility now saves the file it is building in a temporary file on the work prefix, writing it to the output file name only after all input files are scanned.  This means it is safe to use the output file name as an input file, as when modifyi\hich\af4\dbch\af4\loch\f4 ng an existing macro library.\par \par \hich\af4\dbch\af4\loch\f4 The utility will also accept all parameters on the command line.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 SET\par }\pard\plain \qj\keepn\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard \qj\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The SET command has been added to allow changing system options from the command line.  It replaces the SYSGEN utility, which has been removed.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 COMMANDS\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The COMMANDS command is no longer a utility that allows the command table to be edited.  Instead, it reads the command table from a standard text or source file, which can be changed using any text editor.\par \par }\pard\plain \s2\keepn\widctlpar\outlinelevel1\adjustright \b\fs32\loch\af0\hich\af0\dbch\f4\cgrid {{\*\bkmkstart _Toc497622106}\hich\af4\dbch\af4\loch\f4 The Assembler{\*\bkmkend _Toc497622106}\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 OBJ\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The OBJ directive was actual\hich\af4\dbch\af4\loch\f4 ly added in later versions of ORCA/M 4.0, but was missed by many because it was not in the original documentation.  It allows code to be assembled to execute at a specified location, but to be physically located in the normal code stream.  Its companion d\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 rective, OBJEND, cancels the effect.\par \par }\pard\plain \s4\qj\keepn\widctlpar\outlinelevel3\adjustright \b\fs20\cgrid {\loch\af4\hich\af4\dbch\f4 \hich\af4\dbch\af4\loch\f4 ABSADDR\par }\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This directive cause absolute addresses to be printed to the left of the assembly listing.  Please read the reference manual for cautions on its use.\par \par }{\b \hich\af4\dbch\af4\loch\f4 INSTIME\par }{\par \hich\af4\dbch\af4\loch\f4 The number of cycles needed for an instruction ar\hich\af4\dbch\af4\loch\f4 e printed in the listing.\par \hich\af4\dbch\af4\loch\f4  \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerf \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Index\par }}\pard\plain \qj\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\b \hich\af4\dbch\af4\loch\f4 Editors Note:\par \par \hich\af4\dbch\af4\loch\f4 All indexing from the original manual was lost when Microsoft Word 98 refused to load documents created with earlier versions of Microsoft Word. The index you see here is the text from the original manual, but the\hich\af4\dbch\af4\loch\f4  page numbers will not match this manual exactly. In general, look after the page number you see here--the original manual was 14 pages shorter than this one due to minor differences in page layout.\par }{\par \sect }\sectd \sbknone\linex-32767\headery2520\footery2520\cols2\colsx360\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s30\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Index\par }}{\headerr \pard\plain \s30\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\hich\af7\dbch\af4\loch\f7 Index}{\par }}\pard\plain \qj\fi-180\li180\widctlpar\adjustright \fs20\loch\af0\hich\af0\dbch\f4\cgrid {\b \hich\af4\dbch\af4\loch\f4 A\par }{\par \hich\af4\dbch\af4\loch\f4 ABSADDR directive  119, 135, 328\par \hich\af4\dbch\af4\loch\f4 ABS2 macro  181, 18\hich\af4\dbch\af4\loch\f4 2 \par \hich\af4\dbch\af4\loch\f4 ABS4 macro  181, 182 \par \hich\af4\dbch\af4\loch\f4 ABS8 macro  181, 182 \par \hich\af4\dbch\af4\loch\f4 absolute addressing mode  125,126\par \hich\af4\dbch\af4\loch\f4 ACTR directive  55, 163\par \hich\af4\dbch\af4\loch\f4 ADD2 macro  181, 183\par \hich\af4\dbch\af4\loch\f4 ADD4 macro  41, 181, 183\par \hich\af4\dbch\af4\loch\f4 ADD8 macro   181, 183\par \hich\af4\dbch\af4\loch\f4 address mode specification  318\par \hich\af4\dbch\af4\loch\f4 addressing modes  126, 127\par \hich\af4\dbch\af4\loch\f4   absolute indexed  127\par \hich\af4\dbch\af4\loch\f4   absolute indirect  127\par \hich\af4\dbch\af4\loch\f4   absolute long  127\par \hich\af4\dbch\af4\loch\f4   absolute long indexed  127\par \hich\af4\dbch\af4\loch\f4   direct page  126\par \hich\af4\dbch\af4\loch\f4   direct page indexed  127\par \hich\af4\dbch\af4\loch\f4   macros  176\par \hich\af4\dbch\af4\loch\f4 address type DC directive  138\par \hich\af4\dbch\af4\loch\f4 AGO directive  55, 161, 163, 164\par \hich\af4\dbch\af4\loch\f4 AIF directive  161, 164, 165\par \hich\af4\dbch\af4\loch\f4 AINPUT directive  54, 165\par \hich\af4\dbch\af4\loch\f4 AL\hich\af4\dbch\af4\loch\f4 IGN  directive  38, 135\par \hich\af4\dbch\af4\loch\f4 ALL_INT macro  220\par \hich\af4\dbch\af4\loch\f4 ALTCH  macro  193, 194, 269\par \hich\af4\dbch\af4\loch\f4 AMID directive  54, 166\par \hich\af4\dbch\af4\loch\f4 ANOP directive  4, 17, 167\par \hich\af4\dbch\af4\loch\f4 APPEND directive  17, 26, 35, 117, 119, 135, 317\par \hich\af4\dbch\af4\loch\f4 Apple II GS  40\par \hich\af4\dbch\af4\loch\f4 ASEARCH directive  54, 167\par \hich\af4\dbch\af4\loch\f4 ASL2 macro  250\par \hich\af4\dbch\af4\loch\f4 ASML command  10, 28, 74, \hich\af4\dbch\af4\loch\f4 75, 103 \par \hich\af4\dbch\af4\loch\f4 ASMLG command  10, 74, 75\par \hich\af4\dbch\af4\loch\f4 ASM6502  70\par \hich\af4\dbch\af4\loch\f4 ASSEMBLE command  8, 10, 27, 74, 76\par \hich\af4\dbch\af4\loch\f4 assembler directives  17, 18, 133\par \hich\af4\dbch\af4\loch\f4 assembler, listing speed  120\par \hich\af4\dbch\af4\loch\f4 assembler statistics  322\par \hich\af4\dbch\af4\loch\f4 assemblies, partial  28\par \hich\af4\dbch\af4\loch\f4 assembly langugae instructions  17, 18\par \hich\af4\dbch\af4\loch\f4 assembly language st\hich\af4\dbch\af4\loch\f4 atements  17, 18, 19, 23\par \hich\af4\dbch\af4\loch\f4 attribute  56, 161, 323\par \hich\af4\dbch\af4\loch\f4 attributes,\par \hich\af4\dbch\af4\loch\f4   count  161\par \hich\af4\dbch\af4\loch\f4   length  161\par \hich\af4\dbch\af4\loch\f4   setting  162\par \hich\af4\dbch\af4\loch\f4   type  162\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 B\par }{\par \hich\af4\dbch\af4\loch\f4 BB macro  226\par \hich\af4\dbch\af4\loch\f4 BBRx macro  251\par \hich\af4\dbch\af4\loch\f4 BBSx macro  252\par \hich\af4\dbch\af4\loch\f4 BCC instruction  125\par \hich\af4\dbch\af4\loch\f4 BCS instruction  125\par \hich\af4\dbch\af4\loch\f4 BELL macro  193, 195 \par \hich\af4\dbch\af4\loch\f4 BGE instruction  125\par \hich\af4\dbch\af4\loch\f4 BIN f\hich\af4\dbch\af4\loch\f4 iles  27\par \hich\af4\dbch\af4\loch\f4 binary files  314\par \hich\af4\dbch\af4\loch\f4 binary number  130\par \hich\af4\dbch\af4\loch\f4 BLE macro  254\par \hich\af4\dbch\af4\loch\f4 BLT instruction  125\par \hich\af4\dbch\af4\loch\f4 boolean expression  172\par \hich\af4\dbch\af4\loch\f4 boolean variable  178\par \hich\af4\dbch\af4\loch\f4 buffers,\par \hich\af4\dbch\af4\loch\f4   character  91\par \hich\af4\dbch\af4\loch\f4   commands  99\par \hich\af4\dbch\af4\loch\f4   string  91\par \hich\af4\dbch\af4\loch\f4 built in command  69\par \hich\af4\dbch\af4\loch\f4 BUTTON macro  255\par \hich\af4\dbch\af4\loch\f4 byte selection functions  321\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 C\par }{\par \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ase insensitive  18, 322\par \hich\af4\dbch\af4\loch\f4 CATALOG command  2, 3, 8, 10, 30, 32 70, 74, 76\par \hich\af4\dbch\af4\loch\f4 CHANGE command  10, 31, 74, 76\par \hich\af4\dbch\af4\loch\f4 character  131, 140, 178\par \hich\af4\dbch\af4\loch\f4 character constant  131\par \hich\af4\dbch\af4\loch\f4 character string  173\par \hich\af4\dbch\af4\loch\f4 characters,\par \hich\af4\dbch\af4\loch\f4   control  178 \par \hich\af4\dbch\af4\loch\f4   non-keyboard  98\par \hich\af4\dbch\af4\loch\f4 CLEOL macro  193, 196\par \hich\af4\dbch\af4\loch\f4 CLEOS macro \hich\af4\dbch\af4\loch\f4  193, 197\par \hich\af4\dbch\af4\loch\f4 clock driver  61\par \hich\af4\dbch\af4\loch\f4 CLOSE  macro  220\par \hich\af4\dbch\af4\loch\f4 CMP instruction  125\par \hich\af4\dbch\af4\loch\f4 CMP2 macro  181, 184\par \hich\af4\dbch\af4\loch\f4 CMP4 macro  181. 184\par \hich\af4\dbch\af4\loch\f4 CMP8 macro  181, 184\par \hich\af4\dbch\af4\loch\f4 CMPL command  10, 74, 76\par \hich\af4\dbch\af4\loch\f4 CMPLG command  10, 74, 76\par \hich\af4\dbch\af4\loch\f4 CMPW macro  258\par \hich\af4\dbch\af4\loch\f4 CNVxy macro  256\par \hich\af4\dbch\af4\loch\f4 code segment  20, 149\par \hich\af4\dbch\af4\loch\f4 COLOR macro  227\par \hich\af4\dbch\af4\loch\f4 COLO\hich\af4\dbch\af4\loch\f4 RMAP macro  229\par \hich\af4\dbch\af4\loch\f4 command files  73\par \hich\af4\dbch\af4\loch\f4 command line  61\par \hich\af4\dbch\af4\loch\f4 COMMANDS command  10, 63, 67, 74, 76, 328\par \hich\af4\dbch\af4\loch\f4 commands, entering  71\par \hich\af4\dbch\af4\loch\f4 comment 124, 134\par \hich\af4\dbch\af4\loch\f4 comment field  131\par \hich\af4\dbch\af4\loch\f4 COMPILE command  10, 74, 77\par \hich\af4\dbch\af4\loch\f4 compiler, installing  63\par \hich\af4\dbch\af4\loch\f4 COMPRESS command  10, 74, 77\par \hich\af4\dbch\af4\loch\f4 conditional assembly b\hich\af4\dbch\af4\loch\f4 ranches  55\par \hich\af4\dbch\af4\loch\f4 conditional assembly directives  133, 150, 163-173\par \hich\af4\dbch\af4\loch\f4 conditional assembly instructions  157\par \hich\af4\dbch\af4\loch\f4 conditional directives  159\par \hich\af4\dbch\af4\loch\f4 .CONSOLE device  72\par \hich\af4\dbch\af4\loch\f4 console driver  61\par \hich\af4\dbch\af4\loch\f4 control characters  92\par \hich\af4\dbch\af4\loch\f4 COPY command  2, 8, 10, 74, 77, 327 \par \hich\af4\dbch\af4\loch\f4 COPY directive  35, 117, 11\hich\af4\dbch\af4\loch\f4 9, 136, 317\par \hich\af4\dbch\af4\loch\f4 copy text  14, 95\par \hich\af4\dbch\af4\loch\f4 COUT macro  154, 155, 193, 198 \par \hich\af4\dbch\af4\loch\f4 CPA instruction  125\par \hich\af4\dbch\af4\loch\f4 CREATE command  10, 74, 75\par \hich\af4\dbch\af4\loch\f4 CREATE macro 220\par \hich\af4\dbch\af4\loch\f4 CRUNCH utility  10, 29,30, 74, 77\par \hich\af4\dbch\af4\loch\f4 cursor movement commands  92,96\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 D\par }{\par \hich\af4\dbch\af4\loch\f4 data areas  25\par \hich\af4\dbch\af4\loch\f4 DATA directive  17,25, 136, 147\par \hich\af4\dbch\af4\loch\f4 data segmen\hich\af4\dbch\af4\loch\f4 ts  25, 136\par \hich\af4\dbch\af4\loch\f4 DBEQ macro  259\par \hich\af4\dbch\af4\loch\f4 DBNE macro  259\par \hich\af4\dbch\af4\loch\f4 DBNE2  macro  260\par \hich\af4\dbch\af4\loch\f4 DBPL macro  259\par \hich\af4\dbch\af4\loch\f4 DBPL2 macro  260\par \hich\af4\dbch\af4\loch\f4 DC directive  4, 17, 22, 23, 36, 38, 119, 136, 143, 146, 163\par \hich\af4\dbch\af4\loch\f4 DC directives  135\par \hich\af4\dbch\af4\loch\f4   Address  138\par \hich\af4\dbch\af4\loch\f4   Binary Constant  139\par \hich\af4\dbch\af4\loch\f4   Character String  140\par \hich\af4\dbch\af4\loch\f4   Double Precision \hich\af4\dbch\af4\loch\f4 Floating Point  141, 143\par \hich\af4\dbch\af4\loch\f4   Floating Point  140, 143\par \hich\af4\dbch\af4\loch\f4   Hexadecimal Constant  139\par \hich\af4\dbch\af4\loch\f4   Integer  137\par \hich\af4\dbch\af4\loch\f4   Reference an Address  138\par \hich\af4\dbch\af4\loch\f4   Soft Reference  139\par \hich\af4\dbch\af4\loch\f4 DCOPY command  10, 74, 78\par \hich\af4\dbch\af4\loch\f4 DEAL_INT macro  220\par \hich\af4\dbch\af4\loch\f4 debug macros  150\par \hich\af4\dbch\af4\loch\f4 DEC2 macro  261\par \hich\af4\dbch\af4\loch\f4 decimal number  130\par \hich\af4\dbch\af4\loch\f4 DELETE comm\hich\af4\dbch\af4\loch\f4 and  10, 13, 74, 78\par \hich\af4\dbch\af4\loch\f4 delete line  13, 94, 98\par \hich\af4\dbch\af4\loch\f4 delete text  13, 14, 95\par \hich\af4\dbch\af4\loch\f4 DESTROY macro  220\par \hich\af4\dbch\af4\loch\f4 device number 32\par \par \hich\af4\dbch\af4\loch\f4 DISABLE command  7, 10, 74, 78\par \hich\af4\dbch\af4\loch\f4 DISASM command  10, 74, 79\par \hich\af4\dbch\af4\loch\f4 disassembler  109\par \hich\af4\dbch\af4\loch\f4   command descriptions  110, 111-114\par \hich\af4\dbch\af4\loch\f4 DIV2 macro  181, 185\par \hich\af4\dbch\af4\loch\f4 DIV4 macro  41, 1\hich\af4\dbch\af4\loch\f4 81, 185\par \hich\af4\dbch\af4\loch\f4 DIV8 macro  181, 185\par \hich\af4\dbch\af4\loch\f4 DRAWBLOCK macro  226, 230\par \hich\af4\dbch\af4\loch\f4 DS directive  17, 141\par \hich\af4\dbch\af4\loch\f4 DSTR macro   262\par \hich\af4\dbch\af4\loch\f4 DW macro  57, 264\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 E\par }{\par \hich\af4\dbch\af4\loch\f4 EDIT command  3, 8, 10, 74, 79, 89\par \hich\af4\dbch\af4\loch\f4 editor, \par \hich\af4\dbch\af4\loch\f4   information window  91\par \hich\af4\dbch\af4\loch\f4   installing  63\par \hich\af4\dbch\af4\loch\f4   macros  100\par \hich\af4\dbch\af4\loch\f4   repeat feature  96\par \hich\af4\dbch\af4\loch\f4   window control  \hich\af4\dbch\af4\loch\f4 97\par \hich\af4\dbch\af4\loch\f4 EJECT directive  37, 141\par \hich\af4\dbch\af4\loch\f4 ENABLE command  7, 8, 10, 74, 79\par \hich\af4\dbch\af4\loch\f4 END directive  4, 17, 21, 25, 142\par \hich\af4\dbch\af4\loch\f4 ENTRY directive  17, 20, 24\par \hich\af4\dbch\af4\loch\f4 EQU directive  17, 21, 24, 125, 129, 142\par \hich\af4\dbch\af4\loch\f4 ERR directive  36, 119, 142\par \hich\af4\dbch\af4\loch\f4 error,\par \hich\af4\dbch\af4\loch\f4   levels  291\par \hich\af4\dbch\af4\loch\f4   recoverable assembler  291-299\par \hich\af4\dbch\af4\loch\f4   recovera\hich\af4\dbch\af4\loch\f4 ble linker  301-303\par \hich\af4\dbch\af4\loch\f4   terminal  121\par \hich\af4\dbch\af4\loch\f4   terminal assembler  299-300\par \hich\af4\dbch\af4\loch\f4   terminal linker  303-305\par \hich\af4\dbch\af4\loch\f4 ERROR macro  265\par \hich\af4\dbch\af4\loch\f4 ESC key editor commands  96\par \hich\af4\dbch\af4\loch\f4 EXEC files  31, 32, 33, 70, 73\par \hich\af4\dbch\af4\loch\f4 EXPAND directive  36, 37, 119, 142\par \hich\af4\dbch\af4\loch\f4 expressions  128, 134\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 F\par }{\par \hich\af4\dbch\af4\loch\f4 F8 ROM  178, 269\par \hich\af4\dbch\af4\loch\f4 factor  \hich\af4\dbch\af4\loch\f4 129\par \hich\af4\dbch\af4\loch\f4 file names  71, 75\par \hich\af4\dbch\af4\loch\f4 FILETYPE command  74, 79,  327\par \hich\af4\dbch\af4\loch\f4 FILLSCREEN macro  227, 232\par \hich\af4\dbch\af4\loch\f4 FILLSHAPE macro  227, 233 \par \hich\af4\dbch\af4\loch\f4 FINDBUFF macro  61, 221\par \hich\af4\dbch\af4\loch\f4 FINDXY macro   234\par \hich\af4\dbch\af4\loch\f4 FLASH macro  266, 269, 278\par \hich\af4\dbch\af4\loch\f4 floating point numbers 140, 141, 143\par \hich\af4\dbch\af4\loch\f4 FLUSH macro  220\par \hich\af4\dbch\af4\loch\f4 format control directive\hich\af4\dbch\af4\loch\f4 s  35\par \par \par }\pard \qj\fi-180\li180\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 G\par }\pard \qj\fi-180\li180\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 GBLA directive  52, 168 \par \hich\af4\dbch\af4\loch\f4 GBLB directive  52, 168\par \hich\af4\dbch\af4\loch\f4 GBLC directive  52, 169\par \hich\af4\dbch\af4\loch\f4 GEN  directive   50, 119, 143, 155\par \hich\af4\dbch\af4\loch\f4 GEQU directive  17, 20, 25, 119, 125, 129, 143\par \hich\af4\dbch\af4\loch\f4 GET2 macro  193, 199\par \hich\af4\dbch\af4\loch\f4 GET4 macro  41, 193, 199\par \hich\af4\dbch\af4\loch\f4 GET8 macro  193, 199\par \hich\af4\dbch\af4\loch\f4 GET_BUF macro  220\par \hich\af4\dbch\af4\loch\f4 GETC\hich\af4\dbch\af4\loch\f4  macro  193, 199\par \hich\af4\dbch\af4\loch\f4 GET_EOF macro  220\par \hich\af4\dbch\af4\loch\f4 GET_INFO macro  220\par \hich\af4\dbch\af4\loch\f4 GETLN  subroutine  177\par \hich\af4\dbch\af4\loch\f4 GET_LANG macro  193, 201\par \hich\af4\dbch\af4\loch\f4 GET_LINFO macro  193, 201, 217\par \hich\af4\dbch\af4\loch\f4 GET_MARK macro  220\par \hich\af4\dbch\af4\loch\f4 GET_PREFIX macro  220\par \hich\af4\dbch\af4\loch\f4 GETS macro  193, 199         \par \hich\af4\dbch\af4\loch\f4 GET_TIME macro  220\par \hich\af4\dbch\af4\loch\f4 global label  24, 142, 143\par \hich\af4\dbch\af4\loch\f4 GO\hich\af4\dbch\af4\loch\f4 TO  26\par \hich\af4\dbch\af4\loch\f4 GOTOXY macro  193, 205\par \hich\af4\dbch\af4\loch\f4 graphics  225-247\par \hich\af4\dbch\af4\loch\f4 GROUT macro  227, 235, 242\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 H\par }{\par \hich\af4\dbch\af4\loch\f4 hard reference  138\par \hich\af4\dbch\af4\loch\f4 hardware stack  179\par \hich\af4\dbch\af4\loch\f4 HELP command  3, 10, 62, 70, 74, 80\par \hich\af4\dbch\af4\loch\f4 hexadecimal numbers  131, 139\par \hich\af4\dbch\af4\loch\f4 HOME macro  193, 206\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 I\par }{\par \hich\af4\dbch\af4\loch\f4 IEEE directive  119, 143, 324\par \hich\af4\dbch\af4\loch\f4 immediate addr\hich\af4\dbch\af4\loch\f4 essing mode  126, 320\par \hich\af4\dbch\af4\loch\f4 implied addressing mode  126\par \hich\af4\dbch\af4\loch\f4 INC2 macro  267\par \hich\af4\dbch\af4\loch\f4 INIT command  10, 74, 80, 327\par \hich\af4\dbch\af4\loch\f4 INITGRAPH macro  237\par \hich\af4\dbch\af4\loch\f4 INITSTACK macro  176, 268\par \hich\af4\dbch\af4\loch\f4 INIT. SYSTEM  67\par \hich\af4\dbch\af4\loch\f4 input redirection  32, 72\par \hich\af4\dbch\af4\loch\f4 insert \par \hich\af4\dbch\af4\loch\f4   character  98\par \hich\af4\dbch\af4\loch\f4   line  13, 98\par \hich\af4\dbch\af4\loch\f4   mode  99\par \hich\af4\dbch\af4\loch\f4   text  13, 94\par \hich\af4\dbch\af4\loch\f4 INST\hich\af4\dbch\af4\loch\f4 IME directive  119, 144, 328\par \hich\af4\dbch\af4\loch\f4 integers  130, 137, 177, 178\par \hich\af4\dbch\af4\loch\f4 integers, eight byte  323\par \hich\af4\dbch\af4\loch\f4 INVERSE macro  266, 269, 278\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 J\par }{\par \hich\af4\dbch\af4\loch\f4 Jcn (jump)  270\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 K\par }{\par \hich\af4\dbch\af4\loch\f4 KEEP directive  4, 17, 20, 86, 118, 119, 144, 317\par \hich\af4\dbch\af4\loch\f4 keep parameter\par \hich\af4\dbch\af4\loch\f4   command processor  75\par \hich\af4\dbch\af4\loch\f4   link editor  28, 106\par \hich\af4\dbch\af4\loch\f4 keybo\hich\af4\dbch\af4\loch\f4 ard click  84\par \hich\af4\dbch\af4\loch\f4 KEYPRESS macro  193, 207\par \hich\af4\dbch\af4\loch\f4 keyword parameter  44, 45, 158      \par \par \par }{\b \hich\af4\dbch\af4\loch\f4 L\par }{\par \hich\af4\dbch\af4\loch\f4 LA macro  271\par \hich\af4\dbch\af4\loch\f4 label  18, 124, 134\par \hich\af4\dbch\af4\loch\f4 label formats  322\par \hich\af4\dbch\af4\loch\f4 label parameter  56\par \hich\af4\dbch\af4\loch\f4 language name  70  \par \hich\af4\dbch\af4\loch\f4 languages prefix  83\par \hich\af4\dbch\af4\loch\f4 LANGUAGE, SHOW  85\par \hich\af4\dbch\af4\loch\f4 LCLA directive  51, 169\par \hich\af4\dbch\af4\loch\f4 LCLB directive  17\hich\af4\dbch\af4\loch\f4 0\par \hich\af4\dbch\af4\loch\f4 LCLC directive  51, 52, 170\par \hich\af4\dbch\af4\loch\f4 libraries prefix  84\par \hich\af4\dbch\af4\loch\f4 library files,  creating  106\par \hich\af4\dbch\af4\loch\f4 LINK command  8, 10, 74, 80, 105\par \hich\af4\dbch\af4\loch\f4 link editor  103\par \hich\af4\dbch\af4\loch\f4 linking to several locations  27\par \hich\af4\dbch\af4\loch\f4 LIST directive  36, 37, 75, 118, 119, 144\par \hich\af4\dbch\af4\loch\f4 LIST parameter, link editor  106\par \hich\af4\dbch\af4\loch\f4 listings\par \hich\af4\dbch\af4\loch\f4   printe\hich\af4\dbch\af4\loch\f4 r  122\par \hich\af4\dbch\af4\loch\f4   screen  121\par \hich\af4\dbch\af4\loch\f4 LM macro  272\par \hich\af4\dbch\af4\loch\f4 local labels  20\par \hich\af4\dbch\af4\loch\f4 LOGIN EXEC file  32\par \hich\af4\dbch\af4\loch\f4 long addressing mode  126\par \hich\af4\dbch\af4\loch\f4 LONGA directive  40, 144\par \hich\af4\dbch\af4\loch\f4 LONGI directive  40, 145\par \hich\af4\dbch\af4\loch\f4 lowercase charaters  19\par \hich\af4\dbch\af4\loch\f4 LSR2 macro  273\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 M\par }{\par \hich\af4\dbch\af4\loch\f4 MACGEN utility  43, 44, 74, 80, 175, 327\par \hich\af4\dbch\af4\loch\f4 macro  18, 41-58, 153-\hich\af4\dbch\af4\loch\f4 173\par \hich\af4\dbch\af4\loch\f4   addressing modes  176\par \hich\af4\dbch\af4\loch\f4   buffer  153\par \hich\af4\dbch\af4\loch\f4   data types  176\par \hich\af4\dbch\af4\loch\f4     boolean variable  178\par \hich\af4\dbch\af4\loch\f4     character  178\par \hich\af4\dbch\af4\loch\f4     eight byte integers  178\par \hich\af4\dbch\af4\loch\f4     four byte integers  177\par \hich\af4\dbch\af4\loch\f4     strings  178\par \hich\af4\dbch\af4\loch\f4     two byte integers  177\par \hich\af4\dbch\af4\loch\f4   definition\par \hich\af4\dbch\af4\loch\f4     statement  154, 158\par \hich\af4\dbch\af4\loch\f4     writing  \hich\af4\dbch\af4\loch\f4 153, 154\par \hich\af4\dbch\af4\loch\f4   directives  163-173\par \hich\af4\dbch\af4\loch\f4   editor  100\par \hich\af4\dbch\af4\loch\f4   files  153\par \hich\af4\dbch\af4\loch\f4   graphics  225-247\par \hich\af4\dbch\af4\loch\f4   input & output  193-218  \par \hich\af4\dbch\af4\loch\f4   label field  42\par \hich\af4\dbch\af4\loch\f4   library  44, 145, 146\par \hich\af4\dbch\af4\loch\f4   math  181-191\par \hich\af4\dbch\af4\loch\f4   miscellaneous  249-290\par \hich\af4\dbch\af4\loch\f4   op code field  42\par \hich\af4\dbch\af4\loch\f4   operand  42\par \hich\af4\dbch\af4\loch\f4   paramter passing  49\par \hich\af4\dbch\af4\loch\f4   ProDOS  \hich\af4\dbch\af4\loch\f4 219-224\par \hich\af4\dbch\af4\loch\f4 MACRO directive  47, 48, 153, 164, 171\par \hich\af4\dbch\af4\loch\f4 MASL macro  274\par \hich\af4\dbch\af4\loch\f4 MCOPY directive  43, 44, 47, 117, 119, 145, 153, 155, 175, 317\par \hich\af4\dbch\af4\loch\f4 MDROP directive  119, 145, 317\par \hich\af4\dbch\af4\loch\f4 memory map  59\par \hich\af4\dbch\af4\loch\f4 memory usage  179\par \hich\af4\dbch\af4\loch\f4 MEND directive  47, 48, 51, 153, 154, 155, 164, 171\par \hich\af4\dbch\af4\loch\f4 MEXIT directiv\hich\af4\dbch\af4\loch\f4 e  49, 153, 171\par \hich\af4\dbch\af4\loch\f4 MEM directive  38, 146\par \hich\af4\dbch\af4\loch\f4 MERR directive  39, 119, 146\par \hich\af4\dbch\af4\loch\f4 MLOAD directive  117, 119, 146, 153, 317\par \hich\af4\dbch\af4\loch\f4 MLSR macro  275\par \hich\af4\dbch\af4\loch\f4 MNOTE directive  49, 171, 172\par \hich\af4\dbch\af4\loch\f4 MOD2 macro  186 \par \hich\af4\dbch\af4\loch\f4 MOD4 macro  186 \par \hich\af4\dbch\af4\loch\f4 MOD8 macro  186 \par \hich\af4\dbch\af4\loch\f4 model statements  155\par \hich\af4\dbch\af4\loch\f4 MONITOR  166\par \hich\af4\dbch\af4\loch\f4 monitor command\hich\af4\dbch\af4\loch\f4 s  9, 10\par \hich\af4\dbch\af4\loch\f4 MOVE macro  276\par \hich\af4\dbch\af4\loch\f4 MOVEB macro  277\par \hich\af4\dbch\af4\loch\f4 MOVEE macro  277\par \hich\af4\dbch\af4\loch\f4 MOVETO macro  238\par \hich\af4\dbch\af4\loch\f4 MSB directive  39, 119, 146, 324\par \hich\af4\dbch\af4\loch\f4 MUL2 macro  181, 187\par \hich\af4\dbch\af4\loch\f4 MUL4 macro  41, 181, 187\par \hich\af4\dbch\af4\loch\f4 MUL8 macro  181, 187\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 N\par }{\par \hich\af4\dbch\af4\loch\f4 names=  29, 75, 104, 118\par \hich\af4\dbch\af4\loch\f4 NAMEADR macro  193, 208\par \hich\af4\dbch\af4\loch\f4 NEW command  3, 74, 81, 8\hich\af4\dbch\af4\loch\f4 9\par \hich\af4\dbch\af4\loch\f4 NEW_LINE macro  220\par \hich\af4\dbch\af4\loch\f4 NORMCH macro  193, 194, 209\par \hich\af4\dbch\af4\loch\f4 NORMAL macro  266, 269, 278\par \hich\af4\dbch\af4\loch\f4 NOTE macro  279\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 O\par }{\par \hich\af4\dbch\af4\loch\f4 OBJ directive  147, 328\par \hich\af4\dbch\af4\loch\f4 OBJ files  27\par \hich\af4\dbch\af4\loch\f4 object module  104, 307\par \hich\af4\dbch\af4\loch\f4 OBJEND directive  147\par \hich\af4\dbch\af4\loch\f4 octal number  130\par \hich\af4\dbch\af4\loch\f4 ON_LINE macro  220\par \hich\af4\dbch\af4\loch\f4 OPEN macro  220\par \hich\af4\dbch\af4\loch\f4 op code  18\par \hich\af4\dbch\af4\loch\f4 operand \hich\af4\dbch\af4\loch\f4  124, 125\par \hich\af4\dbch\af4\loch\f4   field  19, 133\par \hich\af4\dbch\af4\loch\f4   formats  126, 127\par \hich\af4\dbch\af4\loch\f4   size specification  319\par \hich\af4\dbch\af4\loch\f4 operation code  124, 134\par \hich\af4\dbch\af4\loch\f4 ORCA/HOST  65, 66\par \hich\af4\dbch\af4\loch\f4 ORCA SRC files  72, 307\par \hich\af4\dbch\af4\loch\f4 ORCA.SYSTEM  59, 65, 67\par \hich\af4\dbch\af4\loch\f4 ORG directive  37, 38, 75, 147, 148\par \hich\af4\dbch\af4\loch\f4   assembler  119\par \hich\af4\dbch\af4\loch\f4   link editor  28, 106\par \hich\af4\dbch\af4\loch\f4 output \par \hich\af4\dbch\af4\loch\f4   link e\hich\af4\dbch\af4\loch\f4 ditor 106 \par \hich\af4\dbch\af4\loch\f4   redirection  32, 72\par \par \par }\pard \qj\fi-180\li180\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 P\par }{\par }\pard \qj\fi-180\li180\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 PAGE1 macro  281\par \hich\af4\dbch\af4\loch\f4 PAGE2 macro  281\par \hich\af4\dbch\af4\loch\f4 page numbers  150\par \hich\af4\dbch\af4\loch\f4 partial assemblies  28, 75, 118\par \hich\af4\dbch\af4\loch\f4 pathname  134\par \hich\af4\dbch\af4\loch\f4 PEEK command  10, 74, 81\par \hich\af4\dbch\af4\loch\f4 PLOT macro  239\par \hich\af4\dbch\af4\loch\f4 positional parameter  44, 45, 155, 157\par \hich\af4\dbch\af4\loch\f4 PREAD macro  282\par \hich\af4\dbch\af4\loch\f4 PRBL macro  193, 210\par \hich\af4\dbch\af4\loch\f4 PR\hich\af4\dbch\af4\loch\f4 EFIX command  10, 74, 82\par \hich\af4\dbch\af4\loch\f4 .PRINTER device  72\par \hich\af4\dbch\af4\loch\f4 PRINTER directive  37, 119, 148\par \hich\af4\dbch\af4\loch\f4 printer listing  148\par \hich\af4\dbch\af4\loch\f4 PRINTERINIT string  85\par \hich\af4\dbch\af4\loch\f4 PRINTER_SLOT number  84\par \hich\af4\dbch\af4\loch\f4 ProDOS  59, 60, 317\par \hich\af4\dbch\af4\loch\f4   binary file  314\par \hich\af4\dbch\af4\loch\f4   BRUN  103\par \hich\af4\dbch\af4\loch\f4   memory map  268\par \hich\af4\dbch\af4\loch\f4   MLI  219\par \hich\af4\dbch\af4\loch\f4   TXT file  70, 72, 307\par \hich\af4\dbch\af4\loch\f4 ProDOS-\hich\af4\dbch\af4\loch\f4 8  40\par \hich\af4\dbch\af4\loch\f4 ProDOS-16  40\par \hich\af4\dbch\af4\loch\f4 PUT2 macro  193, 211\par \hich\af4\dbch\af4\loch\f4 PUT4 macro  41, 193, 211\par \hich\af4\dbch\af4\loch\f4 PUT8 macro  193, 211\par \hich\af4\dbch\af4\loch\f4 PUTB macro  193, 211\par \hich\af4\dbch\af4\loch\f4 PUTC macro  193, 211\par \hich\af4\dbch\af4\loch\f4 PUTCR macro  41, 193, 213 \par \hich\af4\dbch\af4\loch\f4 PUTS macro  41, 193, 211\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 Q\par }{\par \hich\af4\dbch\af4\loch\f4 QUIT command  10, 74, 82\par \hich\af4\dbch\af4\loch\f4 quit editor  95\par \hich\af4\dbch\af4\loch\f4 quoted string syntax  322\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 R\par }{\par \hich\af4\dbch\af4\loch\f4 RAM macro  283\par \hich\af4\dbch\af4\loch\f4 RAN2 macro  181, 188\par \hich\af4\dbch\af4\loch\f4 RAN4 macro  181, 188\par \hich\af4\dbch\af4\loch\f4 RAN8 macro  181, 188\par \hich\af4\dbch\af4\loch\f4 RDKEY macro  193, 214\par \hich\af4\dbch\af4\loch\f4 READ macro  220\par \hich\af4\dbch\af4\loch\f4 READ_BLK macro  220\par \hich\af4\dbch\af4\loch\f4 READXY macro  193, 213\par \hich\af4\dbch\af4\loch\f4   graphics macro  240\par \hich\af4\dbch\af4\loch\f4   text macro  215\par \hich\af4\dbch\af4\loch\f4 redirection, input and output  72\par \hich\af4\dbch\af4\loch\f4 relative addressing m\hich\af4\dbch\af4\loch\f4 ode  127\par \hich\af4\dbch\af4\loch\f4 RELEASE macro  61, 222\par \hich\af4\dbch\af4\loch\f4 RENAM macro  220\par \hich\af4\dbch\af4\loch\f4 RENAME command  8, 10, 74, 83\par \hich\af4\dbch\af4\loch\f4 RENAME directive  119, 148, 149, 324\par \hich\af4\dbch\af4\loch\f4 repeat count  12, 96\par \hich\af4\dbch\af4\loch\f4 replace, search and  14, 15\par \hich\af4\dbch\af4\loch\f4 repalcement string  99\par \hich\af4\dbch\af4\loch\f4 RESERVE macro  61, 223\par \hich\af4\dbch\af4\loch\f4 reserving memory  60          \par \hich\af4\dbch\af4\loch\f4 RESTORE macro \hich\af4\dbch\af4\loch\f4  284, 286\par \hich\af4\dbch\af4\loch\f4 RETURN  5\par \hich\af4\dbch\af4\loch\f4 RMBx macro  285\par \hich\af4\dbch\af4\loch\f4 Rockwell 65C02  285\par \hich\af4\dbch\af4\loch\f4 .ROOT  104\par \hich\af4\dbch\af4\loch\f4 RUN command  8, 74, 83\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 S\par }{\par \hich\af4\dbch\af4\loch\f4 SAVE macro  284, 286\par \hich\af4\dbch\af4\loch\f4 SCAN command  10, 74, 83\par \hich\af4\dbch\af4\loch\f4 search  14, 93, 99\par \hich\af4\dbch\af4\loch\f4 search and replace  14, 94, 99\par \hich\af4\dbch\af4\loch\f4 search string  99\par \hich\af4\dbch\af4\loch\f4 SEED macro  287\par \hich\af4\dbch\af4\loch\f4 segname  134\par \hich\af4\dbch\af4\loch\f4 sequence symbol  5\hich\af4\dbch\af4\loch\f4 5, 161\par \hich\af4\dbch\af4\loch\f4 SET command  10, 67, 74, 83, 328\par \hich\af4\dbch\af4\loch\f4   CLICK  84\par \hich\af4\dbch\af4\loch\f4   LANGUAGES  83\par \hich\af4\dbch\af4\loch\f4   LIBRARIES  84\par \hich\af4\dbch\af4\loch\f4   PRINTERINIT  string  85\par \hich\af4\dbch\af4\loch\f4   PRINTERSLOT  84\par \hich\af4\dbch\af4\loch\f4   SYSTEM  83\par \hich\af4\dbch\af4\loch\f4   UTILITIES  84\par \hich\af4\dbch\af4\loch\f4   WAIT  84\par \hich\af4\dbch\af4\loch\f4   WORK  84\par \hich\af4\dbch\af4\loch\f4 SETA directive  52, 53, 172\par \hich\af4\dbch\af4\loch\f4 SETB directive  52, 53, 172\par \hich\af4\dbch\af4\loch\f4 SET_BUF macro  220\par \hich\af4\dbch\af4\loch\f4 SE\hich\af4\dbch\af4\loch\f4 TC directive  53, 172\par \hich\af4\dbch\af4\loch\f4 SET_COLOR macro  229, 241\par \hich\af4\dbch\af4\loch\f4 SETCOM directive  149, 325\par \hich\af4\dbch\af4\loch\f4 SET_EOF macro  220\par \hich\af4\dbch\af4\loch\f4 SET_INFO macro  220\par \hich\af4\dbch\af4\loch\f4 SET_LANG macro  193, 216\par \hich\af4\dbch\af4\loch\f4 SET_LINFO macro  193, 202, 217\par \hich\af4\dbch\af4\loch\f4 SET_MARK macro  220\par \hich\af4\dbch\af4\loch\f4 SET_PREFIX macro  220\par \hich\af4\dbch\af4\loch\f4 set symbol directives  52\par \hich\af4\dbch\af4\loch\f4 SHOW command  10, \hich\af4\dbch\af4\loch\f4 31, 32, 72, 74, 85\par \hich\af4\dbch\af4\loch\f4 SIGN2 macro  181, 189\par \hich\af4\dbch\af4\loch\f4 SIGN4 macro  181, 189\par \hich\af4\dbch\af4\loch\f4 SIGN8 macro  181, 189\par \hich\af4\dbch\af4\loch\f4 simple expression  128\par \hich\af4\dbch\af4\loch\f4 SIZE macro  193, 218\par \hich\af4\dbch\af4\loch\f4 SMBx macro  289\par \hich\af4\dbch\af4\loch\f4 SOFTCALL macro  290\par \hich\af4\dbch\af4\loch\f4 soft reference  139, 290\par \hich\af4\dbch\af4\loch\f4 special function keys  90\par \hich\af4\dbch\af4\loch\f4 spelling changes 3.5 -> 4.0  323\par \hich\af4\dbch\af4\loch\f4 SQRT2 m\hich\af4\dbch\af4\loch\f4 acro  181, 190\par \hich\af4\dbch\af4\loch\f4 SQRT4 macro  181, 190\par \hich\af4\dbch\af4\loch\f4 SQRT8 macro  181, 190\par \hich\af4\dbch\af4\loch\f4 START directive  4, 17, 38, 118, 147, 149\par \hich\af4\dbch\af4\loch\f4 status bit  145\par \hich\af4\dbch\af4\loch\f4 string  134, 140, 262\par \hich\af4\dbch\af4\loch\f4   constants  262\par \hich\af4\dbch\af4\loch\f4   manipulation  54\par \hich\af4\dbch\af4\loch\f4   search  93, 94, 99\par \hich\af4\dbch\af4\loch\f4   search and replace  94, 99\par \hich\af4\dbch\af4\loch\f4   variables  262\par \hich\af4\dbch\af4\loch\f4 SUB2 macro  18\hich\af4\dbch\af4\loch\f4 1, 191\par \hich\af4\dbch\af4\loch\f4 SUB4 macro  41, 181, 191\par \hich\af4\dbch\af4\loch\f4 SUB8 macro  181, 191\par \hich\af4\dbch\af4\loch\f4 SUBLIB directory  30\par \hich\af4\dbch\af4\loch\f4 subroutine library  30\par \hich\af4\dbch\af4\loch\f4 subscripted parameters,\par \hich\af4\dbch\af4\loch\f4   actual  159\par \hich\af4\dbch\af4\loch\f4   explicitly defined  159\par \par \hich\af4\dbch\af4\loch\f4 SWITCH command  10, 30, 74, 85\par \hich\af4\dbch\af4\loch\f4 SYMBOL directive  36, 37, 75, 119, 150\par \hich\af4\dbch\af4\loch\f4 SYMBOL parameter, link e\hich\af4\dbch\af4\loch\f4 ditor  106\par \hich\af4\dbch\af4\loch\f4 symbol table,  link editor  107\par \hich\af4\dbch\af4\loch\f4 symbolic parameter  49, 52, 56, 57, 155, 157, 158, 159, 160, 162, 170\par \hich\af4\dbch\af4\loch\f4 &SYSCNT  57, 324 \par \hich\af4\dbch\af4\loch\f4 system configuration  66\par \hich\af4\dbch\af4\loch\f4 system prefix  83\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 T\par }{\par \hich\af4\dbch\af4\loch\f4 tab  99, 100\par \hich\af4\dbch\af4\loch\f4 term  128, 129\par \hich\af4\dbch\af4\loch\f4 terminal control codes  178\par \hich\af4\dbch\af4\loch\f4 text\par \hich\af4\dbch\af4\loch\f4   copying  14\par \hich\af4\dbch\af4\loch\f4   \hich\af4\dbch\af4\loch\f4 deleting  13\par \hich\af4\dbch\af4\loch\f4   entering  13, 89\par \hich\af4\dbch\af4\loch\f4   files, types  72, 307\par \hich\af4\dbch\af4\loch\f4   inserting  13\par \hich\af4\dbch\af4\loch\f4   moving  14\par \hich\af4\dbch\af4\loch\f4 TEXTOUT macro  242\par \hich\af4\dbch\af4\loch\f4 TIME,  show  85\par \hich\af4\dbch\af4\loch\f4 TITLE directive  36, 37, 150\par \hich\af4\dbch\af4\loch\f4 TOS (top of stack)  176\par \hich\af4\dbch\af4\loch\f4 TRACE directive  150, 160, 161, 164, 165, 325\par \hich\af4\dbch\af4\loch\f4 TYPE command  10, 74, 85\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 U\par }{\par \hich\af4\dbch\af4\loch\f4 UNITS, \hich\af4\dbch\af4\loch\f4 show  85\par \hich\af4\dbch\af4\loch\f4 uppercase letters  19\par \hich\af4\dbch\af4\loch\f4 USING directive  25, 150\par \hich\af4\dbch\af4\loch\f4 utility  9, 62, 63, 66, 69\par \hich\af4\dbch\af4\loch\f4 /UTILITY disk  3, 9, 62\par \hich\af4\dbch\af4\loch\f4 utility prefix  84\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 V\par }{\par \hich\af4\dbch\af4\loch\f4 VIEW macro  243\par \hich\af4\dbch\af4\loch\f4 VIEWPORT macro  245\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 W\par }{\par \hich\af4\dbch\af4\loch\f4 wildcards  7\par \hich\af4\dbch\af4\loch\f4 WRITE macro  220\par \hich\af4\dbch\af4\loch\f4 WRITE_BLK macro  220\par \hich\af4\dbch\af4\loch\f4 WRITETO macro  211, 237, 246\par \hich\af4\dbch\af4\loch\f4 writ\hich\af4\dbch\af4\loch\f4 ing macros  47\par \hich\af4\dbch\af4\loch\f4 word size directives  320\par \hich\af4\dbch\af4\loch\f4 work prefix  84\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 X\par }{\par \hich\af4\dbch\af4\loch\f4 XREF command  10, 74, 86\par \par \par }{\b \hich\af4\dbch\af4\loch\f4 Z\par }{\par \hich\af4\dbch\af4\loch\f4 zero page addressing  126\par \hich\af4\dbch\af4\loch\f4 zero page indexed addressing mode  127\par \par \par }\pard \qj\fi-180\li180\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 numbers\par }\pard \qj\fi-180\li180\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 65802 CPU  40\par \hich\af4\dbch\af4\loch\f4 65816 CPU  40, 126, 144, 317, 319\par \hich\af4\dbch\af4\loch\f4 65816 directive  40, 119, 151, 318\par \hich\af4\dbch\af4\loch\f4 65C02\hich\af4\dbch\af4\loch\f4  CPU  39, 40, 119, 151\par \hich\af4\dbch\af4\loch\f4 65C02 directive  39, 119, 151\par }\pard \qj\widctlpar\adjustright {\par }}