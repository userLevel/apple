{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset77\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f22\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Venice;}{\f23\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}London;}{\f24\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Athens;}{\f25\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}San Francisco;}{\f26\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Toronto;}{\f27\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Cairo;}{\f28\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Los Angeles;}{\f29\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Dingbats;}{\f30\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Bookman;}{\f31\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Helvetica Narrow;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f33\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Chancery;}{\f34\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mobile;}{\f35\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Avant Garde;}{\f36\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}New Century Schoolbook;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset77\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f22\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Venice;}{\f23\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}London;}{\f24\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Athens;}{\f25\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}San Francisco;}{\f26\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Toronto;}{\f27\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Cairo;}{\f28\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Los Angeles;}{\f29\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Dingbats;}{\f30\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Bookman;}{\f31\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Helvetica Narrow;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f33\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Chancery;}{\f34\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mobile;}{\f35\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Avant Garde;}{\f36\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}New Century Schoolbook;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \f12\cgrid \snext0 Normal;}{\s1\sb240\widctlpar\adjustright \b\f5\ul\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb120\widctlpar\adjustright \b\f5\cgrid \sbasedon0 \snext0 heading 2;}{\s3\li360\widctlpar\adjustright \b\f12\cgrid \sbasedon0 \snext0 heading 3;}{\s4\li360\widctlpar\adjustright \f12\ul\cgrid \sbasedon0 \snext0 heading 4;}{\s5\li720\widctlpar\adjustright \b\f12\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\s6\li720\widctlpar\adjustright \f12\fs20\ul\cgrid \sbasedon0 \snext0 heading 6;}{\s7\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 8;}{\s9\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li2160\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 4;}{\s16\li1440\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 3;}{\s17\li720\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 2;}{\s18\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 1;}{\s19\li2160\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 7;}{\s20\li1800\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 6;}{\s21\li1440\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 5;}{\s22\li1080\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 4;}{\s23\li720\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 3;}{\s24\li360\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 2;}{\s25\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 1;}{\*\cs26 \additive \sbasedon10 line number;}{\s27\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext27 footer;}{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext28 header;}{\*\cs29 \additive \fs16\up6 \sbasedon10 footnote reference;}{\s30\widctlpar\adjustright \f12\fs20\cgrid \sbasedon0 \snext30 footnote text;}{\*\cs31 \additive \sbasedon10 page number;}{\s32\widctlpar\adjustright \f6\fs20\cgrid \sbasedon0 \snext32 Code;}}{\*\revtbl {Unknown;}}{\info{\title ORCA/Debugger\'aa}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy5\hr21\min8}{\revtim\yr2000\mo10\dy5\hr21\min8}{\printim\yr2000\mo10\dy5\hr21\min3}{\version2}{\edmins1}{\nofpages58}{\nofwords17047}{\nofchars97169}{\*\company Byte Works, Inc.}{\nofcharsws119330}{\vern99}}\margl2160\margr2160\margt2600\margb2300 \facingp\widowctrl\ftnbj\aenddoc\hyphhotz0\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbkodd\pgnrestart\headery2160\footery1872\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\tx450\tx720\adjustright \f12\cgrid {\b\f4\fs72 \par \par ORCA/Debugger}{\b\f4\fs48\up20 \u8482\'aa}{\b\f4\fs72 \par \par }{\f4\fs36 A GSBug Style Source Level Debugger\par for\par ORCA Compatible High-Level Languages \par \par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4 \par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\b\f4\fs36 \par Mike Westerfield\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4\fs36 Byte Works, Inc.}{\f4 \par 4700 Irving Blvd. NW, Suite 207\par Albuquerque, NM  87114\par (505) 898-8183\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4\fs20 \sect }\sectd \sbkodd\pgnlcrm\headery2160\footery1872\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 iv}}}{\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\fs20  PAGE  }}{\fldrslt {\fs20\lang1024  }}}{\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 iii}}}{\f5\fs20 \par }}\pard\plain \widctlpar\tx450\tx720\adjustright \f12\cgrid {\f4\fs20 \par \par \par \par \par \par \par \par }\pard \li2880\widctlpar\adjustright {\f4\fs20 \par \tab \par \par \par \tab \par \tab \par \par \par \tab \par \tab \par \par \par \tab \par \tab \par \tab \par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4\fs20 Copyright 1992\par By The Byte Works, Inc.\par All Rights Reserved\par \par \par \par \par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\f4\fs20 \page }{\b\f4\fs18 Limited Warranty}{\f4\fs18  - Subject to the below stated limitations, Byte Works, Inc. hereby warrants that the programs contained in this unit will load and run on the standard manufacturer\rquote s configuration for the computer listed for a period of ninety (90) days from date of purchase.  Except for such warranty, this product is supplied on an \ldblquote as is\rdblquote  basis without warranty as to merchantability or its fitness for any particular purpose.  The limits of warranty extend only to the original purchaser.\par Neither Byte Works, Inc. nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par To obtain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works, Inc. within ten (10) days of purchase.\par }{\b\f4\fs18 Important Notice}{\f4\fs18  - This is a fully copyrighted work and as such is protected under copyright laws of the United States of America.  According to these laws, consumers of copywritten material may make copies for their personal use only.  Duplication for any purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par This product is sold for use on a }{\i\f4\fs18 single computer}{\f4\fs18  at at a }{\i\f4\fs18 single location}{\f4\fs18 .  Contact the publisher for information regarding licensing for use at multiple-workstation or multiple-computer installations.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\b\f4\fs18 \par }{\f4\fs18 ORCA/Debugger is a trademark of the Byte Works, Inc.\par Byte Works is a registered trade mark of the Byte Works, Inc.\par }{\f4\fs14 \par }\pard \qc\fi540\widctlpar\tx450\tx720\adjustright {\f4\fs18 Program, Documentation and Design\par Copyright 1992\par The Byte Works, Inc.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\f4\fs14 \par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\f4\fs18 Apple Computer, Inc. MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITTED BY SOME STATES.  THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS.  THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE.\par GS/OS is a copyrighted program of Apple Computer, Inc. licensed to Byte Works, Inc. to distribute for use only in combination with ORCA/Debugger.  Apple software shall not be copied onto another diskette (except for archive purpose) or into memory unless as part of the execution of ORCA/Debugger.  When ORCA/Debugger has completed execution Apple Software shall not be used by any other program.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\f4\fs18 Apple is a registered trademark of Apple Computer, Inc.\par }\pard \qc\widctlpar\adjustright {\f4\fs20 \sect }\sectd \sbkodd\pgnlcrm\headery2160\footery1872\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 ORCA/Debugger\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Table Of Contents\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 50}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 47}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid }{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 49}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Table of Contents\par \par \par }\pard\plain \s18\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Chapter 1 \endash  Introduction\tab 1\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The ORCA/Debugger\tab 1\par An Overview of This Manual\tab 1\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s18\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 2 \endash  A Tutorial Introduction to the ORCA/Debugger\tab 3\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Installing the ORCA/Debugger\tab 3\par Tour of the Debugger\tab 3\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Running the Test Program\tab 4\par The Main Display\tab 4\par Help Screen\tab 5\par Step Mode\tab 5\par Switching Screens\tab 5\par Living with Subroutines\tab 6\par }\pard\plain \s15\li2160\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Variables Display\tab 6\par Changing a Variable\rquote s Value\tab 7\par The Stack Frame Display\tab 8\par Tracing Through and Around Subroutines\tab 8\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Viewing Memory\tab 8\par Setting Break Points\tab 9\par Memory Protection\tab 10\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Entering the Debugger\tab 10\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Using Break Points\tab 11\par The Four-Finger Salute\tab 11\par Using the DebugBreak Utility\tab 11\par A Debug Script\tab 11\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Controlling Speed\tab 12\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The DebugFast Utility\tab 12\par Debugging Parts of a Program\tab 12\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s18\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  TOC \\f \\l "1-3"  }}{\fldrslt {\f4\fs20 Chapter 3 \endash  ORCA/Debugger Command Reference\tab 13\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Organization\tab 13\par Entering the Debugger\tab 13\par Leaving the Debugger\tab 14\par The Command Line\tab 14\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 "var:\tab 15\par "var=val\tab 15\par :\tab 18\par ?\tab 18\par addr:\tab 19\par BP\tab 19\par CLR\tab 19\par FRAME\tab 19\par IN\tab 19\par INDENT\tab 20\par JUMP\tab 20\par MEM\tab 20\par MP\tab 20\par OPEN file\tab 20\par OUT\tab 21\par STEP\tab 21\par TRACE\tab 21\par VERSION\tab 21\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Step/Trace Commands\tab 21\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ?\tab 22\par esc\tab 22\par space\tab 22\par return\tab 22\par left arrow\tab 23\par right arrow\tab 23\par }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \tab 23\par J\tab 23\par L\tab 23\par N\tab 23\par Q\tab 23\par R\tab 23\par S\tab 24\par T\tab 24\par X\tab 24\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Listing Display\tab 24\par Break Point Display Commands\tab 25\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ?\tab 26\par esc\tab 26\par return\tab 26\par left arrow, right arrow\tab 26\par tab\tab 27\par delete\tab 27\par up arrow\tab 27\par down arrow\tab 27\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Memory Protection Display Commands\tab 28\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ?\tab 29\par esc\tab 29\par return\tab 29\par left arrow, right arrow\tab 29\par tab\tab 29\par delete\tab 30\par up arrow\tab 30\par down arrow\tab 30\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Memory Display Commands\tab 31\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ?\tab 32\par esc\tab 32\par return\tab 32\par down arrow\tab 32\par up arrow\tab 33\par A\tab 33\par B\tab 33\par C\tab 33\par D\tab 33\par E\tab 33\par I\tab 34\par L\tab 34\par N\tab 34\par P\tab 34\par R\tab 34\par S\tab 34\par U\tab 34\par X\tab 35\par ^ * @ &\tab 35\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Stack Frame Display Commands\tab 35\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ?\tab 36\par esc\tab 36\par return\tab 36\par down arrow\tab 36\par up arrow\tab 36\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 RAM Display Commands\tab 37\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ?\tab 38\par esc\tab 38\par return\tab 38\par down arrow\tab 38\par up arrow\tab 39\par A\tab 39\par B\tab 39\par C\tab 39\par D\tab 40\par E\tab 40\par I\tab 40\par L\tab 40\par P\tab 40\par R\tab 40\par S\tab 40\par U\tab 40\par X\tab 40\par ^ * @ &\tab 40\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s18\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Chapter 4 \endash  Debugger Utilities Reference\tab 43\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 DebugBreak\tab 43\par DebugFast and DebugNoFast\tab 43\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s18\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  TOC \\f \\l "1-3"  }}{\fldrslt {\f4\fs20 Appendix A \endash  How the Debugger Works\tab 45\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 COP Vector\tab 45\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 COP 00\tab 45\par COP 01\tab 45\par COP 02\tab 46\par COP 03\tab 46\par COP 04\tab 46\par COP 05\tab 46\par COP 06\tab 48\par COP 07\tab 48\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s18\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\f4\fs20 Index\tab 49\par }\pard\plain \qc\widctlpar\adjustright \f12\cgrid }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\f4\fs20 \sect }\sectd \sbkodd\pgnrestart\linex0\headery2160\footery1880\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 1:   Introduction\par }}\pard\plain \qc\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 1\par Introduction\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par \par \par \par \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 1 \endash  Introduction\tcl1}}}{\f4\fs20 \par }{\b\f4\fs28 The ORCA/Debugger}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The ORCA/Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA/Debugger is a powerful new debugging tool for high-level languages.  It is an Init style debugger, installed as your computer boots and always sitting in the background, ready when you need it \endash  yet in uses only 24K of memory in it\rquote s dormant state, so it loads fast and doesn\rquote t take up much of your computer\rquote s memory.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 An Overview of This Manual}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 An Overview of This Manual\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This manual is divided into two main sections.  Chapter 2 is a short, tutorial introduction to the ORCA/Debugger.  It is a great way to get started, quickly reviewing the major features of the debugger, and mentioning more detailed features, pointing you to the appropriate sections of the manual if you need to use the advanced features.  Chapter 2 also contains the installation instructions.  I would strongly recommend that you read all of Chapter 2.\par The reference manual for the ORCA/Debugger is in Chapter 3.  I suggest that you don\rquote t read this chapter.  Instead, skim through the pages, looking at the major topics so you know where the technical details are when you need them.\par Chapter 4 is the reference manual for the utilities.  Like Chapter 3, it\rquote s worth skimming so you know what information is available when you need it.\par Appendix A contains detailed information about how the ORCA languages and debuggers work.  These are internal details that are generally only needed by those of you who are writing compilers and debuggers of your own.\par }\pard \qc\widctlpar\adjustright {\b\f4\fs20 \sect }\sectd \sbkodd\linex0\headery2160\footery1880\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 2:   A Tutorial Introduction to the ORCA/Debugger\par }}\pard\plain \qc\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 2\par A Tutorial Introduction to the ORCA/Debugger\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par \par \par \par \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 2 \endash  A Tutorial Introduction to the ORCA/Debugger\tcl1}}}{\v\f4\fs20 \par }{\b\f4\fs28 Installing the ORCA/Debugger}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Installing the ORCA/Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 installation}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA/Debugger package is made up of four programs \endash  the debugger itself and three utilities.  You can install all of them using the installer.\par Start by running the Installer, which is on the ORCA/Debugger disk.  You will see two installation scripts, one called \ldblquote ORCA/Debugger,\rdblquote  and the other called \ldblquote Debug Utilities.\rdblquote   Click on the \ldblquote ORCA/Debugger\rdblquote  line (even if it is already highlighted) and then click on install.  This copies the debugger to the System.Setup folder of your System folder.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugBreak utility}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugFast utility}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugNoFast utility}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Next, click on the \ldblquote Debug Utilities\rdblquote  script, then select your ORCA folder in the right-hand list.  You will see \ldblquote ORCA.Sys16\rdblquote  in the file list when you are in the right place.  Click on install.  The installer will copy the three utilities that come with ORCA/Debugger into your ORCA utilities folder, and copy three help files for the utilities into your help folder.\par The last step has to be performed by hand.  You need to add three lines to your SYSCMND file before the ORCA shell will recognize the three new utilities.  Run the ORCA editor (or any other editor that handles text files) and load the file :ORCA.Debugger:Shell:SYSCMND from the ORCA/Debugger disk.  Copy the three lines you see into the ORCA SYSCMND file.  If you are using the 2.0 shell, you will find your SYSCMND file in the Shell folder, which will be located in the same folder as ORCA.Sys16.  If you are using one of the older ORCA shells, the SYSCMND file will be in a folder called System.  This isn\rquote t necessarily your main system folder; the ORCA system folder is in the same folder as ORCA.Sys16.\par Once you have completed installation, reboot your computer and run ORCA.Sys16.  When you type help from your shell or shell window you should see the three debugger utilities listed.  Their names are }{\f6\fs18 DebugFast}{\f4\fs20 , }{\f6\fs18 DebugNoFast}{\f4\fs20  and }{\f6\fs18 DebugBreak}{\f4\fs20 .  If you are using Apple\rquote s System 6 operating system, you will also see the ORCA/Debugger icon on your screen as the computer boots.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Tour of the Debugger}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Tour of the Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The rest of this chapter is a short, tutorial introduction to the debugger, using some sample programs from the ORCA.Debugger disk.  There are some debugger features we won\rquote t talk about in this tutorial, and more that we\rquote ll just touch on.  Once you\rquote ve finished with this chapter, glance through chapters 3 and 4 to see how they are organized so you can find the detailed technical information when you need it.\par I would suggest using the text shell to run the programs as you work through these examples.  The ORCA/Debugger will work from PRIZM, but we\rquote ll be using the shell a lot, and also exploring how the text screen works when you debug a text program.  Using the shell is a little easier from the text shell than it is from PRIZM.  More important, some of the examples deal specifically with how the debugger interacts with the text screen.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Running the Test Program}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Running the Test Program\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 entering the debugger}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 We\rquote ll be using two programs to explore the debugger, and both are probably familiar to you.  The first is the BullsEye program, which may have been the first program you ever compiled with ORCA/Pascal or ORCA/C.  The other is also used to introduce you to our compilers; it\rquote s the Sort sample.  Just to be indifferent, I\rquote ve used the Pascal version of the BullsEye program and the C version of the Sort program, but from the debugger\rquote s standpoint, it really doesn\rquote t matter much which language you are using.  Even if you only know one or the other, you should have no trouble following the examples.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 The Main Display}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Main Display\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Let\rquote s start by jumping right into the debugger.  Put the debugger disk in your computer and set the prefix to :ORCA.Debugger:Samples:, then run BullsEye.  It\rquote s important to }{\i\f4\fs20 run}{\f4\fs20  the BullsEye program and not }{\i\f4\fs20 compile}{\f4\fs20  it.  To do that, just type the name of the program.  Assuming you\rquote ve installed the debugger correctly, you\rquote ll hear a beep and see this on your screen:\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich154\picwgoal6060\pichgoal3080\macpict\bliptag1003992916\blipupi72{\*\blipuid 3bd7b75422adb3175ce281021a148a57}08a8ffffffff0099012e1101a0008201000affffffff0099012e3100030002000900423831004b008e0051012b38a10096000c0100000002000000000000000e0000001e01000a00020002009801232c000a001607436f75726965720300160500030d00062b0307127e5f5041534d41494e2020202020202020200e00000021050001293f3f202020203020202020302020202030202030202030207b246b656570202742756c6c73457965277d202020202020202020202020202020202020202020200d28000d00035120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302070726f6772616d2042756c6c7345796528696e7075742c6f7574707574293b2020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030207573657320436f6d6d6f6e2c20517569636b4472617749493b2020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020766172202020202020202020202020202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020636f6c6f723a20696e74656765723b20202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302020207261646975733a20696e74656765723b202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020723a20726563743b2020202020202020202020202020202020202020202020202020202020200d2a065152414449555320202020203020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a0651434f4c4f522020202020203020202020202020202020202020202020202020202020202020202020626567696e20202020202020202020202020202020202020202020202020202020202020202020200d2a0628202020202020202020202020202020202020202020202020202020202020202020202020202020200e0000001e050003298c105374617274477261706828363430293b0e000000210500012938192020202020202020202020202020202020202020202020200d2800550003512020202020202020202020202020202020202020202020202020202020202020202020202020202050656e4e6f726d616c3b2020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020636f6c6f72203a3d20313b20202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020666f7220726164697573203a3d20323020646f776e746f203120646f20626567696e2020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020536574536f6c696450656e50617428636f6c6f72293b202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020636f6c6f72203a3d20636f6c6f72202120333b202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202077697468207220646f20626567696e20202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020206831203a3d203136302d7261646975732a353b20202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020206832203a3d203136302b7261646975732a353b20202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020207631203a3d2034322d7261646975732a323b2020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06514f5243412f446562756767657220312e30202020202020436f7079726967687420313939322c204279746520576f726b732c20496e632e202020202020202020202020202020202020202020202020200da0009701000affffffff0099012e30000100010094012d20003c008c003c00012200020043003822000200660038200001008d0088008da00083ff}}{\f4\fs20 \par \par Figure 2-1:  The Main Debugger Display\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This is the main debugger display.  It\rquote s divided up into six sections; these are called displays in this manual.  Each of the displays shows you something specific about the program you are debugging.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack frame display}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Starting at the top left, you see the stack frame display.  The stack frame display shows you a list of the subroutines that are currently running.  In this case, all you see is the name of the main Pascal program, which ORCA/Pascal calls ~_PASMAIN.  The stack frame display is used to flip back and forth among the various subroutines so you can see all of the variables in a program, even if you are debugging a recursive subroutine.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break point display}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory protect display}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The two displays to the right are filled with zeros.  The first one, with two columns of zeros, is the memory protect display.  The memory protect display is used to ignore ranges of code so you can debug the part of the program you are interested in, skipping quickly over the part you don\rquote t care much about.  The display with three columns of zeros is the break point display.  It\rquote s used to set manual break points anywhere in your program.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory display}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Just below these three displays is the memory display.  The name is stolen from GSBug in an attempt to make it easier for you to switch between the two debuggers.  If you like, you can think of this as the variables display.  It shows all of the variables in a program or subroutine, along with their current values.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 listing display}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The right half of the screen shows the source code you are debugging.  It\rquote s called the listing display.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line display}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The bottom two lines are the command line display.  When you start, there is a copyright message in the command line display; that will go away as soon as you press a key.  Don\rquote t press just any old key, though!  The key you press is also used as the first key for the command you type.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Help Screen}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Help Screen\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Start by pressing ? and then the return key.  What you get is a complete list of the command line commands.  This list is a quick reminder of the commands you can use; if you don\rquote t have any idea what it\rquote s for, you can always look up the detailed information in this manual.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Step Mode}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Step Mode\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The first command we\rquote ll try is the }{\f6\fs18 STEP}{\f4\fs20  command.  You don\rquote t have to type the whole command name, just the S, followed by a return.  When you do that, you enter the step/trace mode.  This is where you\rquote ll probably spend most of your time in the debugger.  While you are in the step/trace mode you can step through your program one line at a time, watching where you are, the values of the variables, and flipping back to the program\rquote s screen to see what the user would see.  Press the space bar a few times, and you\rquote ll see how this works.  Each time you press the space bar, one more line of the program executes.  When you get to the bottom of the listing display, the screen scrolls.\par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The debugger has a lot of modes, and each has it\rquote s own set of single-key commands, like the space bar command you just tried.  All of the screens have two commands in common, though.  The esc key always gets you out, returning you to the command line.  The ? key always brings up a window with a list of the commands you can use, too.\par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 trace command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 So far, you\rquote ve been stepping through the program.  The other half of the name for the step/trace mode comes from trace mode, which is basically when the debugger steps as fast as it can, not waiting for you to press the space bar.  Press the return key to see the trace mode in action.  If you get to it quickly enough, you can press the open-apple key to pause the trace \endash  it starts again as soon as you release the key.  You can also press the space bar to stop the trace, putting you back in step mode.  If you weren\rquote t quick enough, rerun the program and try again.\par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text screen}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Towards the end of the program the program\rquote s text screen kicks in.  The debugger automatically switches to the program\rquote s display when text is written or read.  In this case, you\rquote re near the end of the program, where the readln statement is found.  Press return and the program will continue on.\par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 jump command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The last of the basic stepping and tracing commands is }{\f6\fs18 J}{\f4\fs20 , which Jumps back to your program.  In fact, J is one of the three ways to \ldblquote leave\rdblquote  the debugger, returning control to your program until it finishes or hits a break point.  (The other two ways are to step or trace to the end of the program, or to use the JUMP command from the command line.)  Go ahead and try the }{\f6\fs18 J}{\f4\fs20  command now, remembering to press return when the program executes the }{\f6\fs18 readln}{\f4\fs20  statement.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Switching Screens}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Switching Screens\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 low resolution graphics}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You\rquote ve already seen that the debugger will switch to the program\rquote s screen when text is being read or written.  You can also switch to the program\rquote s screen while you step or trace.  The two main commands for switching the screen are }{\f6\fs18 S}{\f4\fs20  and }{\f6\fs18 T}{\f4\fs20 , which switch to the super-high resolution graphics screen and the 80 column text screen, respectively.  These are the only two screens you can access under direct control from Pascal or C.  You can also use the }{\f6\fs18 L}{\f4\fs20  key to switch to low resolution graphics, which is used by Integer BASIC.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 super high resolution graphics}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The super-high resolution graphics screen is the 320 mode or 640 mode screen used by most Apple IIGS programs.  It\rquote s the one QuickDraw and the rest of the tools use.  It\rquote s also the screen used by PRIZM, so if you happen to be using PRIZM and the ORCA/Debugger at the same time, this is the screen you would normally switch to.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text screen}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The 80 column text screen is the one used by the text based ORCA shell, and it\rquote s the one used in stand-alone C and Pascal text programs.  It\rquote s also the one used by every other Apple IIGS shell I\rquote m aware of, so you should have no trouble debugging text programs written for any shell.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The debugger maintains a separate text screen, distinct from the one your own program uses.  The fact that both the debugger and your program can use the text screen is the reason the debugger flips back to your program screen before allowing input or output.  If you pick one of the program screens, the debugger will still flip back to its own screen if you leave step/trace mode with the esc key, and that may be the easiest way to remember to get back to the debugger screen.  You can also use the N key to switch from one of the program screens back to the debugger screen, though.  N stands for \ldblquote Normal\rdblquote  debugger display.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Living with Subroutines}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Living with Subroutines\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 subroutines}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack frames}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Subroutines are wonderful for organizing a program, but they do present some special problems when you are debugging a program.  The most severe is that there are several different variable spaces in a program that uses subroutines.  For example, you can have a global variable called }{\f6\fs18 i}{\f4\fs20 , and another one in each and every subroutine.  Even worse, a recursive subroutine creates multiple copies of what looks like the \ldblquote same\rdblquote  variable in the source code \endash  one copy for each recursive call.\par There\rquote s a term that goes with each of these variables spaces.  Each one is called a stack frame.  All of the global variables in the main program are in one stack frame, and each time a subroutine is called, it creates a separate stack frame, stuffing all of the variables that are local to the subroutine in the new stack frame.\par In C, static variables are a special, half-way case.  A static variable exists all of the time, like a global variable, but it is local to a particular subroutine.  The debugger treats static variables as if they were normal, local variables, though.  The only difference between static and local variables in C is that the static variable will always have the same value, even when the subroutine is called recursively.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 The Variables Display}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 The Variables Display\tcl4}}}{\b\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 {\*\bkmkstart bk0}{\*\bkmkstart bk1}{\*\bkmkstart bk2}The debugger\rquote s variables display shows one stack frame at a time.  The variables are shown in the sort of format you would expect in a high-level language.  To see how this works, run the Sort program.  It\rquote s in the same folder as the BullsEye program we\rquote ve been using so far.\par \par }\pard \qj\fi-720\li1080\ri360\widctlpar\adjustright {\b\f4\fs20 Note}{\f4\fs20 \tab Sort isn\rquote t exactly an uncommon name for utilities in the ORCA system \endash  in fact, our Utility Pack #1 has a sort utility.  If you have a utility named sort installed in your ORCA shell, you will need to type the full path name for the sort sample program so the shell executes the sample, and not your utility.  If you aren\rquote t sure if you have a utility named sort, type }{\f6\fs18 HELP}{\f4\fs20  from the shell.  The help command lists all of the utilities.  If sort isn\rquote t in the list, there won\rquote t be a conflict.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When the program starts you see two variables in the memory window.  They are an integer loop counter, }{\f6\fs18 I}{\f4\fs20 , and an array, }{\f6\fs18 A}{\f4\fs20 .  In the case of the integer variable you will see 0, the initial value for the variable.  The array looks sort of strange, though.  What you actually see is the address of the array in memory.  We\rquote ll look at some commands to see all of the array a little later.\par Step through the program far enough to enter the ShellSort subroutine.  As soon as you hit the subroutine, the debugger switches the variables window.  You still see a variable called }{\f6\fs18 I}{\f4\fs20 , but it\rquote s not the same one as before.  You also see two other integers, }{\f6\fs18 T}{\f4\fs20  and }{\f6\fs18 DONE}{\f4\fs20 .  }{\f6\fs18 I}{\f4\fs20 , }{\f6\fs18 T}{\f4\fs20  and }{\f6\fs18 DONE}{\f4\fs20  are the local variables defined in the ShellSort subroutine.\par The }{\f6\fs18 DONE}{\f4\fs20  variable is actually a boolean value, but the C language doesn\rquote t have a separate data type for boolean values.  Instead, C uses integers, using the convention that 0 means false and any other value means true.  Still, you might want to look at }{\f6\fs18 DONE}{\f4\fs20  as an actual boolean value, with a True or False value.  This is a simple example of a very common problem: the program displays a variable using its \ldblquote natural\rdblquote  format, but it would be easier on you to see the value in another format.  Another common example, especially in C, occurs when a character value is stored in an integer.  It\rquote s also fairly common to want to see an integer value in hexadecimal format, where it is easier to read off bit flags.  You can edit the memory display to change the format of any of the variables.\par To edit the memory display, esc back to the command line and type }{\f6\fs18 MEM}{\f4\fs20 .  The top variable will be inverted.  Use the down arrow key to scroll down to }{\f6\fs18 DONE}{\f4\fs20 , then press the }{\f6\fs18 A}{\f4\fs20  key.  This switches the display format to boolean.  (B would have made more sense, of course, but it was already taken for single byte integers.)  You can actually choose from a total of 11 different formats, and you can ask for signed or unsigned versions of any of the integers.  (Try }{\f6\fs18 ?}{\f4\fs20  to see a list of the commands.)\par Scrolling with the up and down arrow keys has another use, too.  It\rquote s pretty common to have more variables in a stack frame than the debugger can display.  By using the up and down arrow keys, you can scroll through the stack frame to see the variable you are interested in.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 Changing a Variable\rquote s Value}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Changing a Variable\rquote s Value\tcl4}}}{\b\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you start to debug a new subroutine, it\rquote s pretty common to find an error that sets a variable to a wrong value \endash  or doesn\rquote t set it at all, when the variable should have been initialized.  You could back out of the debugger, change the program, recompile it, and start testing again.  You could also change the value in the debugger and keep stepping through the program looking for more errors, though, and that just might save you a lot of time.\par Use esc to get back to the command line display.  Now type\par \par }{\f6\fs18 "I=10\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 and press return.  The }{\f6\fs18 "}{\f4\fs20  tells the debugger that you are typing a variable name next, and the }{\f6\fs18 I}{\f4\fs20  is, of course, the name of the variable.  Be sure you type an uppercase }{\f6\fs18 I}{\f4\fs20 , though.  Variable names are case sensitive, so }{\f6\fs18 "i=10}{\f4\fs20  won\rquote t do.  The command sets the value of }{\f6\fs18 I}{\f4\fs20  to 10.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The debugger is well aware of the format for each of the variables, and expects you to use the same format when you type a value.  For example, }{\f6\fs18 DONE}{\f4\fs20  started out as an integer value, but we changed its display format to boolean.  As long as the display format is boolean the debugger expects you to type any new value as boolean, too.  For example,\par \par }{\f6\fs18 "DONE=true\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 will work just fine, but if you try\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 "DONE=1\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 the debugger will beep to flag the error, and ignore the new value.  If you want to set the value of }{\f6\fs18 DONE}{\f4\fs20  using an integer, you have to change the display format to integer first.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The rules for typing variable values should be pretty familiar to you, since, for the most part, they match the rules used in Pascal and C.  If you want detailed information, though, it\rquote s all broken down very carefully in Chapter 3.\par \par }\pard \fi360\widctlpar\adjustright {\*\bkmkend bk0}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory display}{\rxe bk0}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 The Stack Frame Display}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 The Stack Frame Display\tcl4}}}{\b\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are two global variables that we can\rquote t see at the moment.  The stack frame display gives you a way to see them.\par From the command line, type FRAME.  This puts you in the stack frame display editing mode, where you have very few options.  Basically, you use this mode to scroll through the various stack frames.  If you press the up arrow key, you will see the global variables stack frame.  Press the down arrow key to move back to the local variable display.\par \par }\pard \fi360\widctlpar\adjustright {\*\bkmkend bk1}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack frames}{\rxe bk1}}}{\*\bkmkend bk2}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}{\rxe bk2}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 Tracing Through and Around Subroutines}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Tracing Through and Around Subroutines\tcl4}}}{\b\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Right at the moment, you\rquote re in the middle of the ShellSort subroutine.  Let\rquote s assume you\rquote re finished seeing what you wanted to see in this subroutine, but you want to continue tracing from the main program.  Type }{\f6\fs18 R}{\f4\fs20 , and you will pop out of the subroutine.  Actually, the debugger ran the rest of the subroutine, stopping when it got back to the main program.  Technically, it ran through the subroutine, returning to the caller \endash  which, in a large program, probably would have been another subroutine.\par Step through the program carefully until the cursor is on the line that calls BubbleSort.  Let\rquote s assume you know this subroutine works, and don\rquote t want to bother stepping or tracing through the subroutine.  Press }{\f6\fs18 X}{\f4\fs20 , and the debugger steps to the next line, running BubbleSort at full speed.  This also works with function calls.  Now press }{\f6\fs18 X}{\f4\fs20  a few more times.  As you can see, except for the fact that it steps through subroutines, the }{\f6\fs18 X}{\f4\fs20  command works just like the }{\f6\fs18 STEP}{\f4\fs20  command (space bar).\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Viewing Memory}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Viewing Memory\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f6\fs18 "}{\v\f4\fs20 var\: command}{\v\f6\fs18 }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Run Sort again.  The value of }{\f6\fs18 I}{\f4\fs20  is pretty clear, but there\rquote s still the array.  From the command line, type\par \par }{\f6\fs18 "A:\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 What you see is a full memory dump, like the one in Figure 2-2.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich153\picwgoal6060\pichgoal3060\macpict\bliptag1791381654\blipupi72{\*\blipuid 6ac65096742adb8ebab390593c7113de}0843ffffffff0098012e1101a00082a10096000c01000000020000000000000001000a00010007009701182c000a001607436f75726965720300160d00062b08065141202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512b302020202020203230202020202031392020202020313820202020203137202020202031362020202020313520202020203134202020202031332020202020313220202020203131202020202020200d2a06512b31302020202020343236352020202d3238363936202d3530303320202d3232323539203335363020202033303335312020333536342020202d3133343338202d3230373334202d36303433202020200d2a06512b323020202020202d3134303637202d3630333920203133323634202032363238372020333536302020202d3539343320202d3132323735202d3230363934202d3630313120202d31343036372020200d2a06512b333020202020202d322020202020383635362020202d313532382020323637343620202d393633382020313834373220202d31343030382031302020202020323736382020203335373220202020200d2a06512b343020202020202d32343036342036313536202020333420202020202d373933362020333233342020203837323820202030202020202020323638343920202d3230363239202d36303431202020200d2a06512b353020202020203138343435202032363033312020333536302020202d3233373336203138343430202033342020202020302020202020202d313339372020323637343620202d39363338202020200d2a06512b36302020202020323735363320202d363033392020313320202020202d34383530202031332020202020302020202020203020202020202030202020202020302020202020203020202020202020200d2a06512b3730202020202030202020202020302020202020203020202020202030202020202020302020202020202d312020202020353330202020202d322020202020302020202020203020202020202020200d2a06512b3830202020202030202020202020302020202020203020202020202030202020202020302020202020203020202020202030202020202020302020202020202d3120202020203533302020202020200d2a06512b393020202020202d322020202020383236342020202d353537342020323336353620202d3332303420202d3239393339202d32313638352033313438322020323434202020202d33303732202020200d2a06512b313030202020203020202020202032343420202020323330343020202d3231303330202d3333303220202d3231313736202d33333034202031353137362020323333303720202d32383236302020200d2a06512b313130202020202d3235333636202d3534383520202d3237333538203335363220202034323120202020373733202020203937362020202032323430322020363134352020203432312020202020200d2a06512b31323020202020323135332020202d3331343838202d3238363731202d3636353420202d323430363120302020202020202d3735323520202d3138363536202d3430393520202d31343034352020200d2a06512b313330202020202d3430363420202d3134303732202d3430363220202d3134303736202d3132323739202d3134333333202d3437333620202d3138343536202d3430393520202d31343036352020200d2a06512b313430202020202d3430363420202d3133383532202d3430363220202d3133383536202d3430383720202d3134313136202d34373336202038333836202020363739342020203235373020202020200d2a06512b31353020202020313434373720203233323734202032353430302020333132333320203138353034202032343420202020313834333220202d313038333320333536322020202d33303030202020200d2a06512b313630202020202d313633373620323434202020202d333037322020302020202020203637342020202038373133202020302020202020202d3238343437202d3332373332203333343220202020200d2a06512b313730202020203330303331202038333038202020323632323320203237393336202032383030352020323932393520202d32393531202031332020202020313631313620202d32333833312020200d2a06512b3138302020202036393234202020333420202020202d3739333620202d383720202020323338303720202d33323034202032363633372020323934392020202d3331333834202d32343536332020200d2a06512b3139302020202032202020202020323939392020202d3232363134202d3239343239202d3535383020203133393636202036333738202020313434343520202d3238343338202d36313433202020200d2a06512b32303020202020323934392020203334363220202038343138202020313630202020202d3138363838202d3236383739202d3430383520202d3134333333202d3231373620203833383620202020200d2a06512b3231302020202033343933202020393031202020203239383120202033383920202020313339393720202d3331323534202d3231323335202d353538302020323934392020203432332020202020200da0009701000affffffff0098012e20000d0022008f002230000100010094012da00083ff}}{\f4\fs20 \par \par Figure 2-2:  RAM Display\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f6\fs18 ?}{\v\f4\fs20  command}{\v\f6\fs18 }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This is the RAM display, used to look at large chunks of memory using any one of the variable formats.  In this case, it\rquote s a handy way to look at the contents of the array A.  You can switch the format used to display the memory with the same keys you used to change formats in the memory display.  (Press ? for the help screen for a quick summary.)\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Setting Break Points}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Setting Break Points\tcl3}}}{\b\f4 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A break point causes the debugger to stop.  Break points are set on a particular line of the source code, and when the program gets to that line, the debugger breaks.  If you are already in the debugger, doing a trace or running through a subroutine, the debugger simply beeps and stops the trace, leaving you in step mode.  If you are running the program at full speed when the break point is hit, the debugger kicks in, showing the debugger screen and letting you enter debugger commands.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points\: see also break points}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break-points\:see also hard-coded break points}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are two kinds of break points.  Hard-coded break points are the ones you set from an editor.  These break points are placed in the executable program by the compiler.  The debugger will always stop when it hits a hard-coded break point.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The other kind of break point is a manual break point you set from within the debugger.  Manual break points are a lot more flexible than hard-coded break points, but you have to spend a little more time setting them up, too.\par To set a manual break point, start by typing }{\f6\fs18 BP}{\f4\fs20  from the command line.  This edits the break point display.  The break point display is the one with three columns of numbers, just to the left of the listing display.  When you edit the break point display, the first number on the first line is highlighted, and the highlighting of the listing window goes away.  You\rquote re ready to pick out the line where the break will occur.  Use the up and down arrow keys to move through the source file until the line you want to break at is highlighted.  You can move a little faster by holding down the open-apple key while you press the arrow (this moves 10 lines at a time), by holding down the option key while you press the arrow (moving 100 lines) or by holding down both (which moves 1000 lines).\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OPEN command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Most large programs are split across several source files.  Use the tab key to switch between the various source files to find the one you want.  If the debugger hasn\rquote t already loaded the source file you want, you\rquote ll have to use the }{\f6\fs18 OPEN}{\f4\fs20  command (described in Chapter 3) to load the source file before you start editing the break point display.\par The second column is a trigger value.  Manual break points don\rquote t always break right away.  Instead, you can set a trigger count, and the debugger won\rquote t break until the line with the break point has been executed that number of times.  This is real handy when you want to break inside a loop, but you want to see the last few executions, and not trace through all of the executions of the loop.  To set the trigger value, use the right or left arrow key.  That moves the cursor to the trigger value.  Now use the up and down arrow keys to select the proper trigger value.  If you like, you can hold down the open-apple key to step the value a little faster.\par The last column is the number of times the break point line has actually been executed.  The debugger sets this value to 0 when you change a break point, and increments it by one each time the break point line is executed.  As soon as the execution count is equal to the trigger value, the debugger breaks.\par There are several commands that can help you manage manual break points.  }{\f6\fs18 IN}{\f4\fs20  and }{\f6\fs18 OUT}{\f4\fs20  let you tell the debugger to ignore the manual break points, and }{\f6\fs18 CLR}{\f4\fs20  lets you clear the manual break points.  For details about these commands, see Chapter 3.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Memory Protection}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Memory Protection\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory protection}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The memory protection display is just to the left of the break point display.  It\rquote s the one with two columns of numbers.  Memory protection lets you tell the debugger to execute a series of lines at full speed.  There are several times when this is handy.  One is to ignore entire subroutines that you already know work.  Another is to block of a time-consuming chunk of code in a subroutine, such as a loop that is initializing an array.  Either way, the debugger will execute the lines you\rquote ve blocked off at full speed.\par Setting a memory protection range is a lot like setting a break point.  Type }{\f6\fs18 MP}{\f4\fs20  to edit the memory protection display.  Use the arrow keys in conjunction with the option and open-apple keys to select the first line of the area you want to protect, then use the left or right arrow key to move to the second column, and select the end of the area you want to protect.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Entering the Debugger}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Entering the Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk3}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA/Debugger works together with the compiler to create a program and a debugging environment that work with one another.  While there are several ways to enter the debugger, all depend on the compiler creating the debug code necessary for the debugger to realize there is a program to debug.  There are a variety of ways to create the debug code in the first place.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIZM}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 From the PRIZM desktop development environment, you can select a compile option that tells the compiler to create debug code.  You do this by selecting the debug code check box in the Compile dialog.  If you compile and execute the program from PRIZM, though, PRIZM\rquote s debugger will be used to debug the program, not the ORCA/Debugger.  If you are using PRIZM to compile the program, but you want to use the ORCA/Debugger to debug it, be sure you turn off the execute after linking option in the Link dialog, then execute the program either as an S16 program, or by leaving PRIZM and running the program from the text shell.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 From the text development environment (or from a script) you can create a program with debug code by using the }{\f6\fs18 +D}{\f4\fs20  flag on your compile line.  The }{\f6\fs18 +D}{\f4\fs20  flag is supported by all of the ORCA shell commands that compile a program, including those that also link and execute the program.  For example,\par \par }{\f6\fs18 cmpl +d program.cc keep=program\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 will create a program that you can debug with the ORCA/Debugger.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/C}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA/C also has a debug pragma.  You can use this pragma to create debug code without using flags or setting options in PRIZM.  See the ORCA/C manual for details.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Using Break Points}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Using Break Points\tcl3}}}{\b\f4 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIZM}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 auto-go}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The method we\rquote ve used to get into the debugger so far is a hard-coded break point.  Hard-coded break points are set in an editor; as this manual is written, the only editor that supports them is the PRIZM desktop development environment.  Event if you\rquote re a died in the wool text interface fan, though, you can install PRIZM as a utility and still use it just to set break points and auto-go points.  (Auto-go points are like memory protection ranges, but they are hard-coded.)\par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Once you set a manual break point, just compile the program in the normal way, with debug code turned on.  You will pop into the debugger as soon as one of the lines with a break point is executed.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 The Four-Finger Salute}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Four-Finger Salute\tcl3}}}{\b\f4 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 four-finger salute}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 For long programs, you can get into the debugger by holding down the option, open-apple and shift keys, then pressing the tab key.  That\rquote s called the four-finger salute.\par This method works pretty well for long programs, but there is a problem: the debugger has to actually execute a line of code while this keypress is in the keyboard buffer before it will kick in.  There are a lot of situations where your program is either busy doing something besides executing the lines you wrote, or where your program is also reading keypresses and is getting them before the debugger.  In those situations, you may find it difficult or even impossible to get into the debugger with the four-finger salute.  Some common examples of this situation are when your desktop program is in the event loop; when your text program is waiting for keyboard input; or when any program is doing something time consuming, like reading or writing a disk file.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Using the }{\b\f6\fs20 DebugBreak}{\b\f4  Utility}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Using the }{\b\v\f6\fs20 DebugBreak}{\b\v\f4  Utility\tcl3}}}{\b\f4 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugBreak utility}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The last way to get into the debugger is the }{\f6\fs18 DebugBreak}{\f4\fs20  utility.  You can run this utility anytime you want \endash  say, in the script that builds your program \endash  and the debugger will break into your program on the first executable line.  The utility sends a message to the debugger, telling it to treat the next executable line as if it were a hard-coded break point.  Since no other programs besides the one you are developing will be using debug code, nothing bad happens even if your program doesn\rquote t get executed.  In fact, you can even use the }{\f6\fs18 DebugBreak}{\f4\fs20  utility while you are in the shell, then back out to another program launcher before you run your program.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 A Debug Script}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 A Debug Script\tcl3}}}{\b\f4 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugBreak utility}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DEBUG utility}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 scripts}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 utility style debugger}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Of course, you might prefer just running a debugger as a utility.  There isn\rquote t a utility version of the ORCA/Debugger, but the }{\f6\fs18 DebugBreak}{\f4\fs20  utility gives you a way to create one with just a couple of lines in a scrip file.  Here\rquote s the script file for entering the debugger as if it were a utility:\par \par }{\f6\fs18 DebugBreak\par \{Parameters\}\par }{\f4\fs20 \par That\rquote s all there is to it.  Create this as a script file (language type EXEC) and save it in your utility folder with a file name of, say, DEBUG.  Next, add the line\par \par }{\f6\fs18 DEBUG\tab U\tab \tab Utility style debugger\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 to your SYSCMND file.  That\rquote s the same file you added the debugger utilities to back when you installed the ORCA/Debugger.  If you like, you can even add a help file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To use the script, just type\par \par }{\f6\fs18 DEBUG file\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 where }{\f6\fs18 file}{\f4\fs20  is the name of the program you want to debug.  The script will even support command line parameters, so you can use it to debug shell utilities.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\*\bkmkend bk3}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 entering the debugger}{\rxe bk3}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Controlling Speed}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Controlling Speed\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speed}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 execution speed}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 One of the problems with an intrusive debug mechanism like the one used by the ORCA languages is that it slows down the execution of the program, even when you are not using the debugger.  For programs that spend most of their time doing math or calling the tools, the time difference isn\rquote t that big, and may not be a factor while you are developing the program.  For programs where it is a problem, though, there are two alternatives to repeatedly recompiling the program with and without debug code.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 The }{\b\f6\fs20 DebugFast}{\b\f4  Utility}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The }{\b\v\f6\fs20 DebugFast}{\b\v\f4  Utility\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugFast utility}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 DebugFast}{\f4\fs20  utility tells the debugger to replace debug code with JMP instructions as the program runs.  This will speed up all but the tightest code to the point where the program runs almost as fast with debug code as without.  For details, refer to Chapter 3.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4 Debugging Parts of a Program}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Debugging Parts of a Program\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You don\rquote t have to put debug code in the entire program.  If your program is broken into more than one source file, it\rquote s perfectly OK to compile some of the source files with debug code turned on, and some with debug code turned off.  If you are using C, you can even use the debug pragma to turn debug code on and off for individual subroutines.  Just be sure that each subroutine is consistent \endash  in other words, don\rquote t turn debug code on or off inside of a subroutine.\par The only disadvantage to turning debug code off for some source files or subroutines is that you will loose access to the global variables and to the stack frames of any subroutines that called the ones with debug code on.  You can get access to the global variables back, though, by making sure the program body of your Pascal program, or the }{\f6\fs18 main()}{\f4\fs20  function in your C program, is one of the subroutines compiled with debug code on.\par }\pard \qc\widctlpar\adjustright {\b\f4\fs20 \sect }\sectd \sbkodd\linex0\headery2160\footery1880\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 3:   ORCA/Debugger Command Reference\par }}\pard\plain \qc\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 3\par ORCA/Debugger Command Reference\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par \par \par \par \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 3 \endash  ORCA/Debugger Command Reference\tcl1}}}{\f4\fs20 \par }{\b\f4\fs28 Organization}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Organization\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA/Debugger is a permanent initialization file.  It is installed automatically by the GS/OS operating system when your computer boots, and stays in memory at all times.  You enter the debugger in one of several ways while the program you want to debug is in memory.  Once you are in the debugger, you will see the debugger\rquote s main text display.  At this point, you can enter any of the commands listed below in the section \ldblquote The Command Line.\rdblquote   Several of these command line commands let you edit the various displays, or even switch to completely different screens.  Each of these displays has a different set of operations; the commands you can use are described in the following sections based on the display you are editing.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Entering the Debugger}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Entering the Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 {\*\bkmkstart bk4}\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are three ways to enter the debugger:\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\v\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab You can set a hard-coded break point in the source file, then compile the source file with debug code turned on.  The program will break into the debugger when it hits the first break point.\par \par \tab Some editors can be used to set a break point, including the PRIZM desktop development environment.\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugBreak utility}}}{\v\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 2.\tab You can compile a program with debug code turned on, then run the }{\f6\fs18 DebugBreak}{\f4\fs20  utility.  This utility tells the debugger to break into the program as soon as you start to run the program.  See Chapter 4 for details on using the }{\f6\fs18 DebugBreak}{\f4\fs20  utility.\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 four-finger salute}}}{\v\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 3.\tab While any program that has been compiled with debug code is running, hold down the option, open-apple, and shift keys, then press the tab key.  The debugger will break into your program at the currently executing line.  This is called the four-finger salute.\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Event Manager}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 event loops}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 keyboard}}}{\v\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \tab If your program is polling the keyboard or fetching events from the Event Manager when you press these keys, your program may intercept the keypress before the debugger sees it.  Try pressing the key a few more times.\par \par \tab If your program is doing some time-consuming task using GS/OS, the tools, an assembly language library, or a part of your program that does not have debug code turned on, you won\rquote t break into the debugger until the task is complete.\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 readln}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 scanf}}}{\v\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \tab If your program has called a library routine to read a line \endash  such as Pascal\rquote s }{\f6\fs18 readln}{\f4\fs20  or C\rquote s }{\f6\fs18 scanf}{\f4\fs20  \endash  you won\rquote t be able to enter the debugger until your program has read the line.  In some programs, you may be reading lines from the keyboard so fast that it will be impractical to get into the debugger using these keys.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\*\bkmkend bk4}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 entering the debugger\bxe }{\rxe bk4}}}{\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Leaving the Debugger}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Leaving the Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 leaving the debugger}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The debugger starts by interrupting your program, and you leave the debugger by telling it to start running your program at full speed.  From the command line, use the }{\f6\fs18 Jump}{\f4\fs20  command.  From the Step/Trace mode, press }{\f6\fs18 J}{\f4\fs20 .\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 The Command Line}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Command Line\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich154\picwgoal6060\pichgoal3080\macpict\bliptag1376331717\blipupi72{\*\blipuid 520927c54db4ba95d4333921a86a06b5}08abffffffff0099012e1101a0008201000affffffff0099012e09880022008800220031000100010088012d09ffffffffffffffff31000300030009004e3831006200900068012b38a10096000c0100000002000000000000000e0000001e01000a000200030098012b2c000a001607436f75726965720300160500030d00062b0407097e5f5041534d41494e0e00000021050001291f30202020202020202020202020203020202020302020202030202030202030207b246b6565702027466f726d6174277d0d28000d00045120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302070726f6772616d20746573743b2020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020766172202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020623a20627974653b20202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020693a20696e74656765723b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206c3a206c6f6e67696e743b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206368617261637465723a20636861723b2020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020207074723a205e696e74656765723b20202020202020202020202020202020202020202020200d2a0651522020202020202020202020302e30303030303030303030303030303030303030652b30303020202020207374723a20737472696e675b3130305d3b20202020202020202020202020202020202020200d2a065153545220202020202020202020202020202020202020202020202020202020202020202020202020202020637374723a20737472696e675b3530305d3b202020202020202020202020202020202020200d2a06515054525e202020202020203236202020202020202020202020202020202020202020202020202020202020723a207265616c3b20202020202020202020202020202020202020202020202020202020200d2a06514c202020202020202020203020202020202020202020202020202020202020202020202020202020202020643a20646f75626c653b2020202020202020202020202020202020202020202020202020200d2a0651442020202020202020202020302e30303030303030303030303030303030303030652b3030302020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065143535452202020202020202020202020202020202020202020202020202020202020202020202020626567696e20202020202020202020202020202020202020202020202020202020202020202020200d2a0628434841524143544552202040202020202020202020202020202020202020202020202020202020200e0000001e050003298c0762203a3d20313b0e000000210500012918222020202020202020202020202020202020202020202020202020202020202020200d28006d0004514920202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d2031323b20202020202020202020202020202020202020202020202020202020202020200d2a06514220202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d203230343b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202062203a3d203235353b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d20313b2020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d2031303b20202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06514f5243412f446562756767657220312e30202020202020436f7079726967687420313939322c204279746520576f726b732c20496e632e202020202020202020202020202020202020202020202020200da0009701000affffffff0099012e20003b0003003b008c220037005000cd200004008f0086008f220037007300cd30000100010094012da00083ff}}{\f4\fs20 \par \par Figure 3-1:  The Command Line Display\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 VERSION command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The command line is a line at the bottom of the screen where you can type commands.  It\rquote s the command line display that is active when you first enter the debugger.  A copyright message fills the command line, but it will vanish as soon as you press a key.  The key you press is also the first letter for the first command you type.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are quite a few commands that you can use from the command line, but they fall into three broad groups.  The first group of commands execute the program in a variety of ways.  These commands either return control to your program or put you in the step/trace mode, described in the next section.  The next group of commands let you edit the various other displays to set break points, scroll the variables display, and so forth.  Each of the displays has a separate set of keystrokes that effect that display; these are described by display in the sections later in this chapter.  The last set of commands are those that do something immediately in the command mode.\par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Table 3-1 shows the various command line commands.  The characters you must type exactly are shown in uppercase, although you can use either uppercase letters or lowercase letters when you actually type in a command.  Lowercase letters are used for fields that change from one time the command is typed to the next.  For example, the }{\f6\fs18 INDENT}{\f4\fs20  command is used to scroll the listing window horizontally.  You have to type the name of the command as is, but the number of columns you want to indent can change, so it\rquote s shown as a lowercase }{\f6\fs18 n}{\f4\fs20 .\par You don\rquote t have to type the entire command name to execute a command, just enough letters to distinguish the command from the others.  For example, }{\f6\fs18 S}{\f4\fs20  will execute the }{\f6\fs18 STEP}{\f4\fs20  command.  In the case of a tie, the command that is first in alphabetical order is executed.  This means the }{\f6\fs18 IN}{\f4\fs20  command is executed if you type }{\f6\fs18 I}{\f4\fs20  or }{\f6\fs18 IN}{\f4\fs20 , and the }{\f6\fs18 MEM}{\f4\fs20  command is executed if you just type }{\f6\fs18 M}{\f4\fs20 .\par \par }\pard \qj\li720\keepn\widctlpar\tx2160\adjustright {\f6\fs18 "var:}{\f4\fs20 \tab Display RAM starting at the location of a variable.\par }{\f6\fs18 "var=val}{\f4\fs20 \tab Set a variable to a new value.\par }{\f6\fs18 :}{\f4\fs20 \tab Display RAM from the last address used.\par }{\f6\fs18 ?}{\f4\fs20 \tab Show the command line help screen.\par }{\f6\fs18 addr:}{\f4\fs20 \tab Display RAM starting at an address.\par }{\f6\fs18 BP}{\f4\fs20 \tab Edit the break point display.\par }{\f6\fs18 CLR}{\f4\fs20 \tab Clear all manual break points.\par }{\f6\fs18 FRAME}{\f4\fs20 \tab Edit the stack frame display.\par }{\f6\fs18 IN}{\f4\fs20 \tab Use manual break points.\par }{\f6\fs18 INDENT n}{\f4\fs20 \tab Indent the source listing window.\par }{\f6\fs18 JUMP}{\f4\fs20 \tab Jump back to the program in real-time mode.\par }{\f6\fs18 MEM}{\f4\fs20 \tab Edit the memory (variables) display.\par }{\pard\plain \qj\li720\keepn\widctlpar\tx2160\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 auto-go}}}{\v\f6\fs18 \par }{\f6\fs18 MP}{\f4\fs20 \tab Edit the memory protect (auto-go) display.\par }{\f6\fs18 OPEN file}{\f4\fs20 \tab Open a source file.\par }{\f6\fs18 OUT}{\f4\fs20 \tab Don\rquote t use manual break points.\par }{\f6\fs18 STEP}{\f4\fs20 \tab Enter step/trace mode in step mode.\par }{\f6\fs18 TRACE}{\f4\fs20 \tab Enter step/trace mode in trace mode.\par }{\f6\fs18 VERSION}{\f4\fs20 \tab Show the version number and copyright.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 3-1:  The Command Line Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 "var:}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 "var\:\tcl3\tcn }}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 "var\: command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A separate RAM display is shown, with the name of the variable you enter shown at the top of the screen.  The screen is filled with as many variable values as will fit, starting with the variable you specified.  You can change the format used to display the variables or scroll through memory to see other values.  For details on the commands you can use, and a complete description of the various variable formats, see \ldblquote RAM Display Commands,\rdblquote  later in this chapter.\par When the screen is first displayed, the debugger will use the same number format that is currently used to display the value of the variable in the variables display.\par The variable name itself must be typed exactly as it appears in the variables display.  The variable name is case sensitive, so if the variable name in the variables window is uppercase, you must type the name of the variable using only uppercase letters.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 "var=val}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 "var=val\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 "var=val command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables\:setting}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command lets you change the value of a variable while your program is running.\par The variable name itself must be typed exactly as it appears in the variables display.  The variable name is case sensitive, so if the variable name in the variables window is uppercase, you must type the name of the variable using only uppercase letters.\par The value of the variable can be typed in in a variety of formats.  The debugger expects you to use the same format to enter a variable as the one used to display it in the variables window.  The debugger trusts you \endash  and if you abuse that trust, you can easily cause the computer to crash.  For example, if you change the format of a two-byte integer to an extended real value, then set the value using this command, you will change ten bytes of memory.  If the extra eight bytes happen to be used for other variables, you will see those variables change, too.  If the extra bytes are used for executable parts of your program, or as part of some other program, you could cause the computer to crash.  Since the memory you just wiped out may not be executed for a while, the crash may not occur right away.\par You can only change the value of a variable in the current stack frame.  If there are a lot of variables in a stack frame, not all are always visible in the variables display.  That\rquote s not a problem \endash  you can set the value of a variable whether or not the debugger has room to show the value in the variables display.  If you want to set a variable from a nested subroutine, or set a global value, though, you have to switch to the proper stack frame before you can set the variable\rquote s value.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Integers\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integers}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Integer values are entered as signed decimal values, or as hexadecimal values.\par Signed integer values can range from -2147483648 to 4294967295.  If you are familiar with the way integers are stored, you can see that these values allow you to enter any legitimate signed or unsigned value for a long integer.  Some of the values overlap \endash  the unsigned value 4294967292 is stored the same way as the signed value -4.  When you type in the value, the debugger doesn\rquote t care which one you use.  Either one will set the bits in memory the same way.  The display format you have selected will determine if the variable is displayed as a signed or unsigned value in the variables window.\par A leading + sign is allowed, but not required.\par Hexadecimal values are entered as a $ character followed by zero to eight hexadecimal digits.  If fewer than eight digits are entered, the value is padded on the left with zeros.  For example, $FF is a valid value.  It is treated exactly like $000000FF.\par The debugger does not check for overflows.  If you type a number that is outside the range of valid four-byte integers, the debugger will use the least significant 32 bits of the value and continue on without flagging an error.  All integer values are treated as four-byte values.  The debugger then extracts the least significant word if you are setting the value of an integer, or the least significant byte if you are setting a byte.  For example, $0101 is equivalent to 257, which will fit in either an integer or long integer variable.  If you set a byte to $0101, though, only the least significant byte is used.  The least significant byte is $01, so the byte variable would be set to 1.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab 1\tab 400534\tab +38\tab -16\tab $00a6\tab $FFFFFFFE\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Real Numbers\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 real numbers}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 single-precision}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 double-precision}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 extended precision}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Real numbers are entered in the following format:\par \par <sign><digits>.<digits>e<sign><digits>\par \par The leading sign is either a \lquote +\rquote  or \lquote -\rquote , and can be omitted for positive numbers.\par The number itself is a sequence of digits with a decimal point.  If there is no fractional part, you can omit the decimal point.  The decimal point can also appear before or after all of the digits in the number.\par The exponent starts with the character \lquote e\rquote  or \lquote E\rquote .  You can omit the exponent, but if you use one, you must have at least one digit after the \lquote e\rquote .  The exponent sign is either a \lquote +\rquote  or \lquote -\rquote , and can be omitted for positive numbers.\par The valid range of numbers depends on whether you are setting a single-precision real number, a double-precision real number, or an extended number.  The approximate range for each format is:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20\ul precision}{\f4\fs20 \tab }{\f4\fs20\ul approximate range}{\f4\fs20 \par single\tab 1e-38 to 1e38\par double\tab 1e-308 to 1e308\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 extended\tab 1e-4932 to 1e4932\par \par If you enter an illegal value you will hear a beep, and the variable will not be set.  If you enter a value that is outside of the range of values that the variable can hold, the value will be set to 0 or infinity (displayed as INF) as appropriate.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab 3.14\tab 0\tab .4\tab 1e-673\tab -5.3\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Characters\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 characters}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Characters are entered as a quote mark followed by a character.  If you omit the character, the debugger assigns chr(0).  In all other cases, the debugger assigns the first character that follows the quote mark.\par You can use either a single quote mark or double quote mark at the start of the character.  No closing quote is required.\par There are many valid character values that cannot be typed from the keyboard.  These can be entered as integer values by first switching the variable to a one-byte integer, setting the value, then switching back to a character format.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab '2\tab "G\tab '"\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Pascal Strings and C Strings\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 p-strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 c-strings}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Strings are entered as a quote mark followed by zero or more characters.  All of the characters from the first one after the quote mark to the end of the line are placed in the string.  You should not use a closing quote mark \endash  if you do, the debugger will use it as a character in the string.\par You can use either a single quote mark or double quote mark at the start of the string.\par The debugger has no way of checking to see if a string can fit in the space set aside for the value by the program.  If you create a program with a 10 character string space, then set the string to a 40 character value in the debugger, you will wipe out 30 bytes of memory after the string.  In short, it\rquote s up to you to make sure that the value you type will fit in the available space.\par C strings and Pascal strings are entered the same way.  Pascal strings are stored in memory with a leading length byte.  C strings (and Standard Pascal strings) are stored in memory with a trailing null character.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab \tab 'Hello, world.\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab "McCoy said tonelessly, "He's dead, Jim."\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Boolean Values\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 booleans}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Pascal uses a separate type for boolean values.  The debugger allows you to set these boolean values by typing \ldblquote true\rdblquote  or \ldblquote false,\rdblquote  just as you would in a Pascal program.  The debugger isn\rquote t very picky about what you type, though.  Anything that starts with the character \lquote f\rquote  is accepted as false, while anything starting with \lquote t\rquote  will do for true.\par Setting a boolean value to true sets a single byte of memory to 1, while setting a value to false sets a single byte to 0.  In some cases, the boolean variable may be two bytes long, and you may need to set both bytes.  In that case, switch to an integer format for display and set the integer to 0 or 1, then switch back to a boolean display.  C programmers may also want to display a value as boolean while debugging, but test the program with values for true other than 1.  Again, to set some other value, convert the format to integer.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab true\tab False\tab TRUE\tab f\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Pointers\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pointers}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are two steps to changing the location a pointer variable points to.  The first step is to display the pointer variable as a pointer.  If you try to set a value while the variables window shows the value being pointed to, you will change the value, not the pointer itself.  The second step is to actually change the pointer\rquote s value.\par For example, let\rquote s say a pointer variable is set to $04/0046, that the two bytes at $04/0046 happen to hold 367, and that the pointer points to an integer.  If you see 367 on the screen, you are looking at the value being pointed at.  You can change the value of 367 at memory location $04/0046, but you can\rquote t change the value of the pointer itself.  If you see $04/0046 in the variables display, you can change the pointer itself.\par pointers are entered as hexadecimal values with an optional / character separating the bank byte from the rest of the address.  You don\rquote t have to enter leading zeros, and any extra digits are stripped.  In fact, all of the addresses shown in the examples below are for the same value of $04/0046.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par }\pard \qj\li1440\widctlpar\tx2880\tx4320\tx5760\adjustright {\f6\fs18 04/0046\tab 0004/0046\tab 040046\tab 4/46\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 :}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 \:\tcl3\tcn }}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \: command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM display}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Using the }{\f6\fs18 :}{\f4\fs20  character as a command shows the last RAM display you viewed, with the same format, offset, and starting location.  You would normally use this command to quickly flip back to a RAM display that you had set up with the }{\f6\fs18 addr:}{\f4\fs20  command or the }{\f6\fs18 "var:}{\f4\fs20  command.  See the description of either of those commands for more details.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ?}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ?\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ? command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The help command brings up a dialog with a brief listing of the command line commands.  The ? key is used throughout ORCA/Debugger; you can always type the ? character to get a list of the commands you can use.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 addr:}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 addr\:\tcl3\tcn }}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addr\: command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM display}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 address format}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A separate RAM display is shown, with the address you enter shown at the top of the screen.  The screen is filled with as many variable values as will fit, starting at the address you specified.  You can change the format used to display the variables or scroll through memory to see other values.  For details on the commands you can use, and a complete description of the various variable formats, see \ldblquote RAM Display Commands,\rdblquote  later in this chapter.\par The address is given as a hexadecimal value, with or without a / character between the bank number and the least significant word of the address.  For example,\par \par }{\f6\fs18 E12000:\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 would display the contents of the super high resolution graphics screen.  You could also use\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 E1/2000:\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 to display the same thing.  You can omit leading zeros in either field, so\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 1/400:\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 will display the bank 1 portion of the text page.  The full address for the text page is 01/0400.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 BP}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 BP\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BP command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 BP}{\f4\fs20  command lets you edit the break point display, which is used to set manual break points.  For details, see \ldblquote Break Point Display Commands,\rdblquote  later in this chapter.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 CLR}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 CLR\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CLR command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 CLR}{\f4\fs20  command clears all of the manual break points you\rquote ve set in the BP display.  This actually removes the values, setting all fields in the display back to 0.  This will speed up tracing and execution slightly, since the debugger doesn\rquote t have to check each line to see if it has been flagged as a manual break point.\par See also }{\f6\fs18 IN}{\f4\fs20 , }{\f6\fs18 OUT}{\f4\fs20 .\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 FRAME}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 FRAME\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FRAME command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack frames}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 FRAME}{\f4\fs20  command lets you edit the stack frame display, which is used to switch between the various stack frames to look at local variables during nested subroutine calls.  For details, see \ldblquote Stack Frame Display Commands,\rdblquote  later in this chapter.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 IN}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 IN\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IN command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The In command reverses the effect of the }{\f6\fs18 OUT}{\f4\fs20  command.  After executing the }{\f6\fs18 IN}{\f4\fs20  command, manual break points are no longer ignored.\par See also }{\f6\fs18 CLR}{\f4\fs20 , }{\f6\fs18 OUT}{\f4\fs20 .\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 INDENT}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 INDENT\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 listing display}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source code}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INDENT command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 INDENT}{\f4\fs20  command lets you shift the source code shown in the listing window to the left or right.\par The debugger doesn\rquote t follow indenting in the source code automatically, and can only show 40 columns of source code at a time.  If you are tracing through a section of code that has been indented a lot, you can use this command to shift the display over a few columns so you can see the source code a little better.\par The }{\f6\fs18 INDENT}{\f4\fs20  command takes a single integer as a parameter.  When the source window is drawn, the debugger skips that number of columns before it starts to display letters.  For example,\par \par }{\f6\fs18 INDENT 16\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 will cause the display to shift over 16 characters.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 INDENT 0\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 is the default, which doesn\rquote t skip over at all.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 JUMP}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 JUMP\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 leaving the debugger}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 JUMP command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 four-finger salute}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 JUMP}{\f4\fs20  command shuts down the debugger and starts executing your program at full speed.  Manual break points remain in effect, so triggering a manual break point will restart the debugger.  You can also restart the debugger with the four-finger salute or by hitting a hard-coded break point.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 MEM}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 MEM\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEM command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 MEM}{\f4\fs20  command lets you edit the memory display, also called the variables display.  The memory display shows the names and values of several variables.  By editing the memory display, you can scroll the display to show other variables or change the format used to display the variables.  For details, see \ldblquote Memory Display Commands,\rdblquote  later in this chapter.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 MP}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 MP\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MP command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 auto-go}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 MP}{\f4\fs20  command lets you edit the memory protect display, which is used to tell the debugger to execute specific lines of the program faster.  This capability is called auto-go in the PRIZM desktop debugger.  For details, see \ldblquote Memory Protection Display Commands,\rdblquote  later in this chapter.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 OPEN file}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 OPEN file\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OPEN command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 listing display}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source code}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The }{\f6\fs18 OPEN}{\f4\fs20  command loads a source file from disk and places it in the list of files.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 auto-go}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The debugger always shows the active source file (the one where execution is taking place) so the source file you load is immediately hidden.  The reason for this command is to help you set manual break points and memory protection ranges.  In both cases, you need to see the source file to select the correct line.  Once you have loaded a file with the }{\f6\fs18 OPEN}{\f4\fs20  command (or once the file is loaded automatically by the debugger) you can use the tab key to move to the proper file.\par For more details on setting break points in multi-file programs, see \ldblquote Break Point Display Commands,\rdblquote  later in this chapter.For details on setting memory protection ranges, see \ldblquote Memory Protection Display Commands,\rdblquote  later in this chapter.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 OUT}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 OUT\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OUT command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 OUT}{\f4\fs20  command tells the debugger to ignore all of the manual break points you have set in the }{\f6\fs18 BP}{\f4\fs20  display.  This speeds up traces and program execution slightly, since the debugger no longer has to check each line to see if it is a manual break point.\par The break points are not removed, just ignored.  You can enable the break points using the }{\f6\fs18 IN}{\f4\fs20  command.  Break points will also be enabled if you edit the }{\f6\fs18 BP}{\f4\fs20  display and make any changes.  (If you just enter the }{\f6\fs18 BP}{\f4\fs20  editing mode and leave right away, break points will not be enabled.  You actually have to make some change to enable the break points.)\par See also }{\f6\fs18 CLR}{\f4\fs20 , }{\f6\fs18 IN}{\f4\fs20 .\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 STEP}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 STEP\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 STEP command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 STEP}{\f4\fs20  command enters step/trace mode in step mode.  The next command to be executed is highlighted, and you can use any of the single-key step/trace mode commands.  For a complete list of the commands, see \ldblquote Step/Trace Commands,\rdblquote  later in this chapter.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 TRACE}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 TRACE\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE command}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 TRACE}{\f4\fs20  command enters step/trace mode in trace mode.  Your program is executed as fast as the debugger can execute it.  You can use any of the single-key step/trace mode commands listed in \ldblquote Step/Trace Commands,\rdblquote  later in this chapter.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 VERSION}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 VERSION\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 VERSION command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The name of the program, version number, and copyright are shown on the command line.  As soon as you press a key, the command line is cleared.  The key you press becomes the first key typed for the next command.\par The debugger executes this command automatically when you enter the debugger.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Step/Trace Commands}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Step/Trace Commands\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 {\*\bkmkstart bk5}The step/trace mode is the main debugger mode.  You can use the step/trace mode to single step through a program, trace a program and watch the various variables update, step through subroutines, or step to the end of a subroutine.  You can also flip between the various displays while you step or trace.\par Table 3-2 shows the single-key commands that are available while you are in step/trace mode.  Character commands are shown in uppercase, but the command processor is not case sensitive.  You can use the equivalent lowercase letter if you prefer.\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f6\fs18 ?}{\f4\fs20 \tab Display a help window with this list of commands.\par }{\f6\fs18 esc}{\f4\fs20 \tab Leave step/trace mode and return to the command line mode.\par }{\f6\fs18 space}{\f4\fs20 \tab If you are not already in step mode, start stepping.  If you are in step mode, step one line.\par }{\f6\fs18 return}{\f4\fs20 \tab Start tracing the program.\par }{\f6\fs18 left arrow}{\f4\fs20 \tab Slow down the trace.\par }{\f6\fs18 right arrow}{\f4\fs20 \tab Speed up the trace.\par }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \tab Pause a trace.  The trace resumes when the key is released.\par }{\f6\fs18 J}{\f4\fs20 \tab Switch back to real time execution.\par }{\f6\fs18 L}{\f4\fs20 \tab Display the low resolution graphics screen.\par }{\f6\fs18 N}{\f4\fs20 \tab Display the debugger\rquote s screen.\par }{\f6\fs18 Q}{\f4\fs20 \tab Turn sound on or off.\par }{\f6\fs18 R}{\f4\fs20 \tab Go until the next return.\par }{\f6\fs18 S}{\f4\fs20 \tab Display the super high resolution graphics screen.\par }{\f6\fs18 T}{\f4\fs20 \tab Display the 80 column text screen.\par }{\f6\fs18 X}{\f4\fs20 \tab Run through subroutines.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 3-2:  The Step and Trace Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ?}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ?\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 ?}{\f4\fs20  key is available from all of the displays.  It shows a help window with all of the single-key commands you can use while editing the display.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 esc}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 esc\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The esc key leaves the step/trace mode, returning you to the command line mode.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 space}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 space\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you are tracing, running through a subroutine, or running until the next return, pressing the space key puts you in step mode.  Your program is frozen while you are in step mode, waiting for you to execute some command.\par If you are already in step mode when you press the space bar, the debugger executes one line in the program, then stops, waiting for another command.\par One way to trace slowly through a program is to press and hold down the space bar.  The repeat feature of the Apple IIGS will kick in, effectively pressing the space bar very fast.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 return}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 return\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 trace}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Pressing return starts tracing the program.  The debugger still updates the debug display while tracing, which takes time, but trace mode is the fastest way to execute the program and still be able to watch the cursor scroll through the source listing and the variable values update in the variables display.  The debugger runs the program as fast as it can while still updating the displays.\par There are several things that effect the speed of tracing.  Subroutine calls slow the debugger down in general, and redrawing the stack frame display also takes a little time, so portions of a program that are tracing through subroutine calls will run slower than portions that don\rquote t.  Scrolling the source window also takes time, so tight loops that fit entirely on the screen trace faster than code that scrolls the display.  Finally, updating the variables window takes more time if there are more variables.  It also takes a lot of time to format and print the value of a floating point variable.\par You can speed up or slow down the trace using the left and right arrow keys, and pause a trace by holding down the open-apple key.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 left arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 left arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Slows down a trace by adding a small delay each time a line is executed.  By default, the debugger traces as fast as possible, with no delay.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 right arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 right arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Speeds up a trace by removing the small delays inserted by the left arrow key.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\outl\f6\fs18 \u-3\'f0}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\outl\v\f6\fs18 \u-3\'f0\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Pauses a trace.  The trace resumes as soon as you release the open-apple key, but you can type one of the other commands to stop it right away.  For example, pressing the space bar while you hold down the open-apple key will put you in step mode.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 J}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 J\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Using this command is one way to leave the debugger.  The debugger switches back to the last program display you used, then starts executing the program at full speed.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 L}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 L\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Switches to the low resolution graphics display with 4 lines of text at the bottom of the screen.  This display mode is currently used only by ORCA/Integer BASIC.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 N}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 N\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Switches the display to the debugger display.  This command is used after using one of the other display commands to look at the program\rquote s screen.  You can still step and trace while looking at the program\rquote s screen, then switch back to the debugger display using this key.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 Q}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Q\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sound}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The debugger clicks the speaker each time you execute a line while stepping or tracing.  This command turns the sound off.  If the sound is already off, this command will turn it back on, again.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 R}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 R\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 subroutines}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The R command runs the program at full speed until the program returns from the current subroutine.  The debugger does not switch back to the program\rquote s display, although you can use one of the display commands to switch to the program\rquote s display before using this command.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 S}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 S\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 super high resolution graphics}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 desktop}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Switches to the super high resolution graphics display.  This is the display normally used by all desktop programs and most Apple IIGS graphics programs.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 T}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 T\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text display}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Switches to the 80 column text display.  This is the display use by text programs, including those written for the ORCA or APW shell.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 X}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 X\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 subroutines}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command is almost identical to the }{\f6\fs18 STEP}{\f4\fs20  command (i.e. pressing the space bar).  The critical difference is that if the line to be executed enters a subroutine, the step command will move to the first line inside the subroutine, but the }{\f6\fs18 X}{\f4\fs20  command executes the subroutine at full speed, stopping on the next line after the one that called the subroutine.\par If you are debugging a subroutine by stepping, and don\rquote t want to step through the procedures and functions the subroutine calls, use this key instead of the space bar.\par {\*\bkmkend bk5}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 step/trace mode}{\rxe bk5}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 The Listing Display}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Listing Display\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source code}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 listing display}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich154\picwgoal6060\pichgoal3080\macpict\bliptag-1776874961\blipupi72{\*\blipuid 96170a2f357b92de1fe289e998240209}08b4ffffffff0099012e1101a0008201000affffffff0099012e098800220088002200310086008e0094012d31000100010094009009ffffffffffffffff31000300030009004e3831006200900068012b38a10096000c0100000002000000000000000e0000001e01000a000200030098012b2c000a001607436f75726965720300160500030d00062b0407097e5f5041534d41494e0e00000021050001291f30202020202020202020202020203020202020302020202030202030202030207b246b6565702027466f726d6174277d0d28000d00045120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302070726f6772616d20746573743b2020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020766172202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020623a20627974653b20202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020693a20696e74656765723b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206c3a206c6f6e67696e743b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206368617261637465723a20636861723b2020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020207074723a205e696e74656765723b20202020202020202020202020202020202020202020200d2a0651522020202020202020202020302e30303030303030303030303030303030303030652b30303020202020207374723a20737472696e675b3130305d3b20202020202020202020202020202020202020200d2a065153545220202020202020202020202020202020202020202020202020202020202020202020202020202020637374723a20737472696e675b3530305d3b202020202020202020202020202020202020200d2a06515054525e202020202020203236202020202020202020202020202020202020202020202020202020202020723a207265616c3b20202020202020202020202020202020202020202020202020202020200d2a06514c202020202020202020203020202020202020202020202020202020202020202020202020202020202020643a20646f75626c653b2020202020202020202020202020202020202020202020202020200d2a0651442020202020202020202020302e30303030303030303030303030303030303030652b3030302020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065143535452202020202020202020202020202020202020202020202020202020202020202020202020626567696e20202020202020202020202020202020202020202020202020202020202020202020200d2a0628434841524143544552202040202020202020202020202020202020202020202020202020202020200e0000001e050003298c0762203a3d20313b0e000000210500012918222020202020202020202020202020202020202020202020202020202020202020200d28006d0004514920202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d2031323b20202020202020202020202020202020202020202020202020202020202020200d2a06514220202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d203230343b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202062203a3d203235353b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d20313b2020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d2031303b20202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06514f5243412f446562756767657220312e30202020202020436f7079726967687420313939322c204279746520576f726b732c20496e632e202020202020202020202020202020202020202020202020200da0009701000affffffff0099012e20003b0003003b008c220037005000cd200004008f0086008f220037007300cd30000100010094012da00083ff}}{\f4\fs20 \par \par Figure 3-2:  The Listing Display\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The listing display is an information only display.  Unlike the other display areas on the debugger\rquote s screen, you never edit the source listing from within the debugger.\par As you step through a program, the debugger automatically highlights the next line to be executed, scrolling the screen if necessary.\par The debugger can handle programs with multiple source files.  Unless you are editing the break point or memory protection displays, the debugger always shows the source file that is currently being executed.  When you call a subroutine in another source file, the debugger automatically switches to the new source file, loading it from disk if necessary.\par See the description of the }{\f6\fs18 INDENT}{\f4\fs20  command, earlier in this chapter, for a way to scroll the listing display left and right.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Break Point Display Commands}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Break Point Display Commands\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk6}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break point display}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich154\picwgoal6060\pichgoal3080\macpict\bliptag-1709654823\blipupi72{\*\blipuid 9a18bcd906bdfd2e2991dc7aa4636c43}08bdffffffff0099012e1101a0008201000affffffff0099012e09880022008800220031003b007200940090310001008f0094012d31000100010094007409ffffffffffffffff31000300030009004e3831006200900068012b38a10096000c0100000002000000000000000e0000001e01000a000200030098012b2c000a001607436f75726965720300160500030d00062b0407097e5f5041534d41494e0e00000021050001291f30202020202020202020202020203020202020302020202030202030202030207b246b6565702027466f726d6174277d0d28000d00045120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302070726f6772616d20746573743b2020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020766172202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020623a20627974653b20202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020693a20696e74656765723b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206c3a206c6f6e67696e743b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206368617261637465723a20636861723b2020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020207074723a205e696e74656765723b20202020202020202020202020202020202020202020200d2a0651522020202020202020202020302e30303030303030303030303030303030303030652b30303020202020207374723a20737472696e675b3130305d3b20202020202020202020202020202020202020200d2a065153545220202020202020202020202020202020202020202020202020202020202020202020202020202020637374723a20737472696e675b3530305d3b202020202020202020202020202020202020200d2a06515054525e202020202020203236202020202020202020202020202020202020202020202020202020202020723a207265616c3b20202020202020202020202020202020202020202020202020202020200d2a06514c202020202020202020203020202020202020202020202020202020202020202020202020202020202020643a20646f75626c653b2020202020202020202020202020202020202020202020202020200d2a0651442020202020202020202020302e30303030303030303030303030303030303030652b3030302020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065143535452202020202020202020202020202020202020202020202020202020202020202020202020626567696e20202020202020202020202020202020202020202020202020202020202020202020200d2a0628434841524143544552202040202020202020202020202020202020202020202020202020202020200e0000001e050003298c0762203a3d20313b0e000000210500012918222020202020202020202020202020202020202020202020202020202020202020200d28006d0004514920202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d2031323b20202020202020202020202020202020202020202020202020202020202020200d2a06514220202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d203230343b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202062203a3d203235353b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d20313b2020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d2031303b20202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06514f5243412f446562756767657220312e30202020202020436f7079726967687420313939322c204279746520576f726b732c20496e632e202020202020202020202020202020202020202020202020200da0009701000affffffff0099012e30000100010094012d20003b0003003b008c220037005000cd200004008f0086008f220037007300cda00083ff}}{\f4\fs20 \par \par Figure 3-3:  The Break Point Display\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When your program triggers a break point, the program stops.  If you are not already in the debugger, the debugger screen appears.  The computer beeps.  If you were executing the program at full speed, the debugger executes the }{\f6\fs18 VERSION}{\f4\fs20  command.  If you were tracing a program from inside the debugger, the debugger puts you in step mode.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source break points\:see hard-coded break points}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are actually two different kinds of break points.  Hard-coded break points are the ones you set in the source code using an editor, such as the one in the PRIZM desktop development environment.  Hard-coded break points always trigger; there is no way to stop them.  Hard-coded break points are generally set at the start of a short program, or just before the section of code you are interested in in a long program, and are used as an easy way to get into the debugger.  Since they are triggered every time, though, it\rquote s a good idea to put them in a section of code that will only be executed once in a debugging session.  Putting a source break point in the middle of a for loop, for example, isn\rquote t usually a good idea.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 manual break points}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The memory protection display is used to set another kind or break point, the manual break point.  Manual break points can be ignored by using the }{\f6\fs18 OUT}{\f4\fs20  command, and then reinstated with the }{\f6\fs18 IN}{\f4\fs20  command.  You can set a manual break point in any source file, even if the debugger hasn\rquote t loaded the source file yet.  You can also set a trigger value, which tells the debugger not to break until the break point has been passed a certain number of times.  This is quite handy for looking at the last few steps of a loop.\par There is one thing you have to be careful of when setting a break point.  Not all source lines in a program are actually executed.  For example, if you set a break point on the line that defines a Pascal procedure or function, or on the one that defines a C function, you won\rquote t hit the break point.  The first executable line is right after the }{\f6\fs18 begin}{\f4\fs20  in Pascal, and at the first executable line in a C function.  Basically, if the line is a declaration, any break point you set will be ignored.  Break points only work when you set them on a line in the executable part of a procedure or function.\par Use the }{\f6\fs18 BP}{\f4\fs20  command from the command line to start editing the break point display.  While you are editing the break point display, you will see one of the fields in the display in inverse.  Any of the single-key commands shown in Table 3-3 can be used.  These commands are described in more detail in the sections that follow.\par The three fields in the break point display are described in the section that describes the left and right arrow keys.\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f6\fs18 ?}{\f4\fs20 \tab Display a help window with this list of commands.\par }{\f6\fs18 esc}{\f4\fs20 \tab Stop editing the break point display; returns to the command line.\par }{\f6\fs18 return}{\f4\fs20 \tab Move to the next break point entry.\par }{\f6\fs18 left arrow}{\f4\fs20 \tab Toggle between the break point line and trigger.\par }{\f6\fs18 right arrow}{\f4\fs20 \tab Toggle between the break point line and trigger.\par }{\f6\fs18 tab}{\f4\fs20 \tab Move to the next source file.\par }{\f6\fs18 delete}{\f4\fs20 \tab Remove a break point.\par }{\f6\fs18 up arrow}{\f4\fs20 \tab Move up one line in the source file.  Hold down the open-apple key to move up ten lines.  Hold down the option key to move up 100 lines.  Hold down both the open-apple key and the option key to move up 1000 lines.\par }{\f6\fs18 down arrow}{\f4\fs20 \tab Move down one line in the source file.  Hold down the open-apple key to move down ten lines.  Hold down the option key to move down 100 lines.  Hold down both the open-apple key and the option key to move down 1000 lines.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 3-3:  Break Point Display Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ?}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ?\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 ?}{\f4\fs20  key is available from all of the displays.  It shows a help window with all of the single-key commands you can use while editing the display.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 esc}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 esc\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The esc key leaves the break point display editing mode, returning you to the command line mode.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 return}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 return\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The return key moves down one entry in the break point display.  If you are already on the last break point, the cursor moves to the top line.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 left arrow, right arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 left arrow, right arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break point trigger}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are three columns in the break point display.  The left and right arrow keys move the cursor between the leftmost column and the middle column, allowing you to set either one.\par The leftmost column is the line number where the break point is set.  When you put the cursor on the break point, the debugger will automatically display the source file for that break point, highlighting the line where the break point is set.\par The second column is the trigger count.  When you set a break point for the first time the trigger value is set to 1.\par The third column is a count of the number of times the line has actually been executed.  It is set to 0 when you change a break point.  (So, to reset the trigger, you could edit the break point and shift the break point up one line, then down one line.)  When the value in the last column reaches the trigger count, the debugger will actually break.  So, for example, you can set a break point in a loop that will execute 20 times, setting the trigger to 19.  That way, the debugger will break for the next-to-last cycle through the loop.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IN command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OUT command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The break point line count in column three is incremented each time the break point is executed, even if you are running at full speed under program control, and can\rquote t see the break point.  The break point line count is not incremented if you use the }{\f6\fs18 OUT}{\f4\fs20  command, which tells the debugger to ignore break points.  You can reinstate break points with the }{\f6\fs18 IN}{\f4\fs20  command.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 tab}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 tab\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 listing display}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source code}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 multiple files}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The tab key switches the listing window to show the next source file.  If the debugger has only loaded one source file, the tab key is ignored.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OPEN command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command lets you switch between the various source files in a multi-file program so you can set break points in a source file other than the one you are currently debugging.  By using the }{\f6\fs18 OPEN}{\f4\fs20  command to open a source file before you edit the break point display, you can even set a break point in a source file that the debugger hasn\rquote t loaded, yet.\par The only limit on the number of source files is the amount of available memory.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 delete}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 delete\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The delete key permanently removes a manual break point, setting all three break point fields to zero.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 up arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 up arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the cursor is in the source code line number column, this command moves you up in the listing window.  If the right or left arrow has been used to toggle to the trigger count display, this key reduces the trigger count.\par If you press the up-arrow key by itself, the line number or trigger count is reduced by one.  In the case of the line number, this moves you up one line in the source file.\par If you hold down the open-apple key while the up-arrow key is pressed, the line number or trigger count is reduced by ten.\par If you hold down the option key and press the up-arrow key, the line number is reduced by 100.  The option key is ignored if you are editing the trigger count.\par If you hold down both the option key and the open-apple key and press the up-arrow key, the line number is reduced by 1000.  The option key is ignored if you are editing the trigger count.\par Zero is the smallest value allowed in either field.  If you try to set either the line number or trigger count to a value that is less than zero, the debugger sets the value to zero.\par Setting the line number to zero removes the break point.  You can also remove the break point using the delete key.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 down arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 down arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the cursor is in the source code line number column, this command moves you down in the listing window.  If the right or left arrow has been used to toggle to the trigger count display, this key increases the trigger count.\par If you press the down-arrow key by itself, the line number or trigger count is incremented by one.  In the case of the line number, this moves you down one line in the source file.\par If you hold down the open-apple key while the down-arrow key is pressed, the line number or trigger count is incremented by ten.\par If you hold down the option key and press the down-arrow key, the line number is incremented by 100.  The option key is ignored if you are editing the trigger count.\par If you hold down both the option key and the open-apple key and press the down-arrow key, the line number is incremented by 1000.  The option key is ignored if you are editing the trigger count.\par The maximum allowed trigger count is 99, and the debugger won\rquote t allow you to set the trigger count to a larger number.  There is no maximum line number.  If you scroll past the end of the file, the debugger will happily show you a lot of blank lines.  If you scroll too far, the line number will eventually overflow, setting the line count back to a small value.\par \par {\*\bkmkend bk6}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}{\rxe bk6}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Memory Protection Display Commands}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Memory Protection Display Commands\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 {\*\bkmkstart bk7}\par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich154\picwgoal6060\pichgoal3080\macpict\bliptag1481701511\blipupi72{\*\blipuid 5850f887e8fa0f13b2c3af6260e68c3b}08bdffffffff0099012e1101a0008201000affffffff0099012e09880022008800220031000100730094012d31003b004f0094007431000100010094005109ffffffffffffffff31000300030009004e3831006200900068012b38a10096000c0100000002000000000000000e0000001e01000a000200030098012b2c000a001607436f75726965720300160500030d00062b0407097e5f5041534d41494e0e00000021050001291f30202020202020202020202020203020202020302020202030202030202030207b246b6565702027466f726d6174277d0d28000d00045120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302070726f6772616d20746573743b2020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020766172202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020623a20627974653b20202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020693a20696e74656765723b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206c3a206c6f6e67696e743b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206368617261637465723a20636861723b2020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020207074723a205e696e74656765723b20202020202020202020202020202020202020202020200d2a0651522020202020202020202020302e30303030303030303030303030303030303030652b30303020202020207374723a20737472696e675b3130305d3b20202020202020202020202020202020202020200d2a065153545220202020202020202020202020202020202020202020202020202020202020202020202020202020637374723a20737472696e675b3530305d3b202020202020202020202020202020202020200d2a06515054525e202020202020203236202020202020202020202020202020202020202020202020202020202020723a207265616c3b20202020202020202020202020202020202020202020202020202020200d2a06514c202020202020202020203020202020202020202020202020202020202020202020202020202020202020643a20646f75626c653b2020202020202020202020202020202020202020202020202020200d2a0651442020202020202020202020302e30303030303030303030303030303030303030652b3030302020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065143535452202020202020202020202020202020202020202020202020202020202020202020202020626567696e20202020202020202020202020202020202020202020202020202020202020202020200d2a0628434841524143544552202040202020202020202020202020202020202020202020202020202020200e0000001e050003298c0762203a3d20313b0e000000210500012918222020202020202020202020202020202020202020202020202020202020202020200d28006d0004514920202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d2031323b20202020202020202020202020202020202020202020202020202020202020200d2a06514220202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d203230343b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202062203a3d203235353b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d20313b2020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d2031303b20202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06514f5243412f446562756767657220312e30202020202020436f7079726967687420313939322c204279746520576f726b732c20496e632e202020202020202020202020202020202020202020202020200da0009701000affffffff0099012e30000100010094012d20003b0003003b008c220037005000cd200004008f0086008f220037007300cda00083ff}}{\f4\fs20 \par \par Figure 3-4:  The Memory Protection Display\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Tracing a program takes time.  When you are tracing, the debugger spends quite a lot of time updating the source window, redrawing variable values, repainting the stack frame display, and drawing the break point display as trigger values are updated.  If you are tracing through a part of the program that has already been debugged, you can use memory protection to tell the debugger not to bother updating the display while the code executes, saving an enormous amount of time.  It\rquote s also easier to trace through a subroutine if the subroutines it calls are protected, so you aren\rquote t constantly jumping into and out of other subroutines.\par The memory protection display lets you set aside chunks of memory that will be executed at full speed.  Each memory protection range is a pair of line numbers.  Whenever the debugger is executing a line inside that range, it skips updating the display.  Break points are still honored, so if the code triggers a break point, the program will still stop tracing.\par Use the }{\f6\fs18 MP}{\f4\fs20  command to start editing the memory protection display.  Once you start, you can use any of the single-keystroke commands shown in table 3-4.  These commands are described in more detail in the sections that follow the table.\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f6\fs18 ?}{\f4\fs20 \tab Display a help window with this list of commands.\par }{\f6\fs18 esc}{\f4\fs20 \tab Stop editing the memory protection display; returns to the command line.\par }{\f6\fs18 return}{\f4\fs20 \tab Move to the next memory protection entry.\par }{\f6\fs18 left arrow}{\f4\fs20 \tab Toggle between the start and end line number.\par }{\f6\fs18 right arrow}{\f4\fs20 \tab Toggle between the start and end line number.\par }{\f6\fs18 tab}{\f4\fs20 \tab Move to the next source file.\par }{\f6\fs18 delete}{\f4\fs20 \tab Remove a memory protection range.\par }{\f6\fs18 up arrow}{\f4\fs20 \tab Move up one line in the source file.  Hold down the open-apple key to move up ten lines.  Hold down the option key to move up 100 lines.  Hold down both the open-apple key and the option key to move up 1000 lines.\par }{\f6\fs18 down arrow}{\f4\fs20 \tab Move down one line in the source file.  Hold down the open-apple key to move down ten lines.  Hold down the option key to move down 100 lines.  Hold down both the open-apple key and the option key to move down 1000 lines.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 3-4:  The Memory Protection Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ?}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ?\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ? key is available from all of the displays.  It shows a help window with all of the single-key commands you can use while editing the display.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 esc}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 esc\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The esc key leaves the memory protection display editing mode, returning you to the command line mode.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 return}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 return\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The return key moves down one entry in the memory protection display.  If you are already on the last memory protection range, the cursor moves to the top line.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 left arrow, right arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 left arrow, right arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The two columns in the memory protection display are the starting line number (on the left) and the ending line number (on the right).  The left are right arrow keys toggle the cursor between the two columns.  While you are in either column, you can use the up and down arrow keys to change the value.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 tab}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 tab\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 listing display}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source code}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 multiple files}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The tab key switches the listing window to show the next source file.  If the debugger has only loaded one source file, the tab key is ignored.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OPEN command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command lets you switch between the various source files in a multi-file program so you can set memory protection ranges in a source file other than the one you are currently debugging.  By using the }{\f6\fs18 OPEN}{\f4\fs20  command to open a source file before you edit the memory protection display, you can even set a memory protection range in a source file that the debugger hasn\rquote t loaded, yet.\par The only limit on the number of source files is the amount of available memory.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 delete}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 delete\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The delete key permanently removes a memory protection range, setting both fields to zero.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 up arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 up arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you press the up-arrow key by itself, the line number is reduced by one, moving the cursor up one line in the source file.\par If you hold down the open-apple key while the up-arrow key is pressed, the line number is reduced by ten.\par If you hold down the option key and press the up-arrow key, the line number is reduced by 100.\par If you hold down both the option key and the open-apple key and press the up-arrow key, the line number is reduced by 1000.\par Zero is the smallest value allowed in either field.  If you try to set either line number to a value that is less than zero, the debugger sets the value to zero.\par The end line number (on the right) must be greater than or equal to the start line number (on the left).  If you try to set the end line number to a value smaller than the current start line number, the start line number is updated, too.\par Setting both line numbers to zero removes the memory protection range.  You can also remove the memory protection range using the delete key.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 down arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 down arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you press the down-arrow key by itself, the line number is incremented by one, moving the cursor down one line in the source file.\par If you hold down the open-apple key while the down-arrow key is pressed, the line number is incremented by ten.\par If you hold down the option key and press the down-arrow key, the line number is incremented by 100.\par If you hold down both the option key and the open-apple key and press the down-arrow key, the line number is incremented by 1000.\par There is no maximum line number.  If you scroll past the end of the file, the debugger will happily show you a lot of blank lines.  If you scroll too far, the line number will eventually overflow, setting the line count back to a small value.\par The start line number (on the left) must be less than or equal to the end line number (on the right).  If you try to set the start line number to a value that is larger than the current end line number, the end line number is updated, too.\par \par }\pard \fi360\widctlpar\adjustright {\*\bkmkend bk7}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory protection}{\rxe bk7}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Memory Display Commands}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Memory Display Commands\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory display}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich154\picwgoal6060\pichgoal3080\macpict\bliptag-1508294936\blipupi72{\*\blipuid a6193ee83013daea0a320a28042048c4}08bdffffffff0099012e1101a0008201000affffffff0099012e098800220088002200310086000100940090310001008f0094012d3100010001003c009009ffffffffffffffff31000300030009004e3831006200900068012b38a10096000c0100000002000000000000000e0000001e01000a000200030098012b2c000a001607436f75726965720300160500030d00062b0407097e5f5041534d41494e0e00000021050001291f30202020202020202020202020203020202020302020202030202030202030207b246b6565702027466f726d6174277d0d28000d00045120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302070726f6772616d20746573743b2020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020766172202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020623a20627974653b20202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020693a20696e74656765723b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206c3a206c6f6e67696e743b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206368617261637465723a20636861723b2020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020207074723a205e696e74656765723b20202020202020202020202020202020202020202020200d2a0651522020202020202020202020302e30303030303030303030303030303030303030652b30303020202020207374723a20737472696e675b3130305d3b20202020202020202020202020202020202020200d2a065153545220202020202020202020202020202020202020202020202020202020202020202020202020202020637374723a20737472696e675b3530305d3b202020202020202020202020202020202020200d2a06515054525e202020202020203236202020202020202020202020202020202020202020202020202020202020723a207265616c3b20202020202020202020202020202020202020202020202020202020200d2a06514c202020202020202020203020202020202020202020202020202020202020202020202020202020202020643a20646f75626c653b2020202020202020202020202020202020202020202020202020200d2a0651442020202020202020202020302e30303030303030303030303030303030303030652b3030302020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065143535452202020202020202020202020202020202020202020202020202020202020202020202020626567696e20202020202020202020202020202020202020202020202020202020202020202020200d2a0628434841524143544552202040202020202020202020202020202020202020202020202020202020200e0000001e050003298c0762203a3d20313b0e000000210500012918222020202020202020202020202020202020202020202020202020202020202020200d28006d0004514920202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d2031323b20202020202020202020202020202020202020202020202020202020202020200d2a06514220202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d203230343b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202062203a3d203235353b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d20313b2020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d2031303b20202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06514f5243412f446562756767657220312e30202020202020436f7079726967687420313939322c204279746520576f726b732c20496e632e202020202020202020202020202020202020202020202020200da0009701000affffffff0099012e30000100010094012d20003b0003003b008c220037005000cd200004008f0086008f220037007300cda00083ff}}{\f4\fs20 \par \par Figure 3-5:  The Memory Display\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The memory display shows the current value for several variables.  By default, the debugger shows the local variables in the subroutine you are debugging, using a format that matches the variable declaration.  There are two reasons to use the }{\f6\fs18 MEM}{\f4\fs20  command to edit the memory display.  First, some subroutines may have more variables than the debugger can display at one time.  You can scroll through the list of variables while you are editing the memory display, and the debugger will not change the position of the display until you leave the subroutine.  Second, there are times when you might want to see a value using another format.  Some common examples would be to look at the value of a pointer, rather than the value it is pointing at, or to look at a long integer as an integer or as an unsigned value.  You can change the display format used for a variable while you are editing the memory display.\par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack frames}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 subroutines\:see also stack frames}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Stack Frame display is used to change the display to show global variables, or variables from another nested subroutine.  See \ldblquote Stack Frame Display Commands,\rdblquote  later in this chapter, for details.\par \par }\pard \qj\fi-720\li720\ri360\keepn\widctlpar\adjustright {\pard\plain \qj\fi-720\li720\ri360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 unsigned integers}}}{\v\f4\fs20 \par }\pard \qj\fi-720\li720\ri360\widctlpar\adjustright {\b\f4\fs20 Note}{\f4\fs20 \tab As this manual is being written, the current release of ORCA/C always tells the debugger that integers and long integers are signed, and that characters are unsigned, regardless of the actual definition.  This is necessary to support the current version of the PRIZM debugger.  Eventually, PRIZM and the C compiler will be updated to handle unsigned values.  The ORCA/Debugger can already handle them, so they will work right away.  Until that time, you will have to use the format commands to view variables with an unsigned format.\par \par }\pard \qj\fi-720\li720\ri360\keepn\widctlpar\adjustright {\pard\plain \qj\fi-720\li720\ri360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity}}}{\pard\plain \qj\fi-720\li720\ri360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variable name case}}}{\v\f4\fs20 \par }\pard \qj\fi-720\li720\ri360\widctlpar\adjustright {\b\f4\fs20 Note}{\f4\fs20 \tab Pascal is a case insensitive language, while C is not.  The convention that is used to support this difference is for the Pascal compiler to always report variable names as uppercase.  The current version of the C compiler also converts variable names to uppercase for the debugger; this is to support a limitation in the current version of PRIZM.  The ORCA/Debugger can handle mixed case variable names, and will do so automatically once the C compiler and PRIZM are updated.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Table 3-5 shows the single-key commands that are available while you are viewing this display.  Character commands are shown in uppercase, but the command processor is not case sensitive.  You can use the equivalent lowercase letter if you prefer.\par \par }\pard \fi-1440\li2160\keepn\widctlpar\adjustright {\f6\fs18 ?}{\f4\fs20 \tab Display a help window with this list of commands.\par }{\f6\fs18 esc}{\f4\fs20 \tab Stop editing the memory display; returns to the command line.\par }{\f6\fs18 return}{\f4\fs20 \tab Move to the next variable.\par }{\f6\fs18 down arrow}{\f4\fs20 \tab Move to the next variable.\par }{\f6\fs18 up arrow}{\f4\fs20 \tab Move to the previous variable.\par }{\f6\fs18 A}{\f4\fs20 \tab Display the current variable as a boolean.\par }{\f6\fs18 B}{\f4\fs20 \tab Display the current variable as a byte.\par }{\f6\fs18 C}{\f4\fs20 \tab Display the current variable as a character.\par }{\f6\fs18 D}{\f4\fs20 \tab Display the current variable as a double-precision real.\par }{\f6\fs18 E}{\f4\fs20 \tab Display the current variable as an extended-precision real.\par }{\f6\fs18 I}{\f4\fs20 \tab Display the current variable as an integer.\par }{\f6\fs18 L}{\f4\fs20 \tab Display the current variable as a long integer.\par }{\f6\fs18 N}{\f4\fs20 \tab Display the current variable using the default format from the source code.\par }{\f6\fs18 P}{\f4\fs20 \tab Display the current variable as a p-string.\par }{\f6\fs18 R}{\f4\fs20 \tab Display the current variable as a single-precision real.\par }{\f6\fs18 S}{\f4\fs20 \tab Display the current variable as a c-string.\par }{\f6\fs18 X}{\f4\fs20 \tab Display the current variable as a four-byte hexadecimal number.\par }{\f6\fs18 U}{\f4\fs20 \tab Toggle the signed/unsigned status of a byte, integer, or long integer.\par }{\f6\fs18 ^ * @ &}{\f4\fs20 \tab Any of these keys toggles the pointer mode.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 3-5:  The Memory Display Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ?}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ?\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 ?}{\f4\fs20  key is available from all of the displays.  It shows a help window with all of the single-key commands you can use while editing the display.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 esc}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 esc\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The esc key leaves the memory display editing mode, returning you to the command line mode.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 return}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 return\tcl3}}}{\b\f6\fs20 \par down arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 down arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Moves the cursor down one line.  You can scroll off of the end of the list of variables, eventually filling the entire memory display with blank lines.  You might even want to do this on occasion, since formatting and printing variables is one of the most time-consuming tasks the debugger has to perform during a trace, especially when any of the floating-point variable formats are used.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 up arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 up arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Moves the cursor up one line.  The debugger will ignore this command if the cursor is already on the first variable in the current stack frame.  The memory display will scroll if the cursor is on the top line of the display and the top variable is not the first variable in the stack frame.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 A}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 A\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 booleans}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to boolean.  Boolean values are displayed as \ldblquote True\rdblquote  or \ldblquote False.\rdblquote \par The debugger only uses the least significant byte to determine the value of a boolean variable.  In some cases, boolean values are actually two bytes long, so the displayed value may not quite match the value the program sees.  You can switch the display format to byte or integer to see the actual value as either a one-byte integer or a two-byte integer.\par The debugger treats zero as false and any other value as true.  This matches the way the C language works.  Technically, in Pascal, boolean variables always have on ordinal value of either zero or one, and any other value can cause problems.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 B}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 B\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bytes}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a one-byte integer.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 C}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 C\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 characters}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a character.\par Non-printing characters will still be displayed as some printing character by mapping the character into the \ldblquote closest\rdblquote  printing character.  You can switch to an integer or byte format to see the actual ASCII character value.\par The debugger only uses one byte to determine the value of a character.  In Pascal, characters are often stored in two-byte spaces, and in C, integers can be used to store character values.  In either case, comparisons may not act the way it appears they should if the most significant byte is not set to 0.  For example, if a two-byte character has a value of $1041 in RAM, the debugger will display \lquote A\rquote , which is the correct character for $41.  When you are tracing through a program, though, the comparison }{\f6\fs18 "'A' = ch"}{\f4\fs20  (or }{\f6\fs18 "'A' == ch"}{\f4\fs20  in C) would give a false result.  To see the full, two-byte value, switch to an integer format.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 D}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 D\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 real numbers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a double-precision (8 byte) real number.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 E}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 E\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 real numbers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a extended-precision (10 byte) real number.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 I}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 I\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a two-byte integer.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 L}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 L\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integers}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a four-byte integer.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 N}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 N\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to the format used in the source listing.  You can use this command to quickly switch a variable back to it\rquote s \ldblquote natural\rdblquote  format after manually changing the format.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 P}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 P\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 p-strings}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 strings}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a p-string.  P-strings start with a length byte, and are followed by 0 to 255 characters.  The debugger will print up to the length of the string, or the width of the memory display, whichever is shorter.  Non-printing characters will be displayed as the \ldblquote closest\rdblquote  printable character.\par Strings are often too long to display in the memory display.  You can use the RAM display to see the entire string.  See \ldblquote RAM Display Commands,\rdblquote  later in this chapter, for details.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 R}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 R\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 real numbers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a single-precision (4 byte) real number.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 S}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 S\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 strings}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 c-strings}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a c-string (null terminated string).  The debugger will print up to the length of the string, or the width of the memory display, whichever is shorter.  Non-printing characters will be displayed as the \ldblquote closest\rdblquote  printable character.\par Strings are often too long to display in the memory display.  You can use the RAM display to see up to 1584 characters from the string.  See \ldblquote RAM Display Commands,\rdblquote  later in this chapter, for details.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 U}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 U\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 unsigned integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The three integer formats (byte, integer and long integer) can be displayed as signed or unsigned values.  This command toggles between a signed and unsigned display.  It does not effect any other display formats.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 X}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 X\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hexadecimal values}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display the value of the currently selected variable to a four-byte hexadecimal number.  While separate formats are not available for other lengths, you can read off the one and two byte hexadecimal values by ignoring either the first two or three bytes.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ^ * @ &}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ^ * @ &\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pointers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When the debugger encounters a pointer variable, by default, it displays the value pointed to by the pointer.  Any of these command keys will toggle the pointer mode, causing the debugger to display the pointer itself, rather than the value being pointed to.  Using the same command again toggles back to the original display format.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Stack Frame Display Commands}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Stack Frame Display Commands\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack frame display}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich154\picwgoal6060\pichgoal3080\macpict\bliptag-738418295\blipupi72{\*\blipuid d3fca18975b56bde9f449b8c9579201d}08b4ffffffff0099012e1101a0008201000affffffff0099012e09880022008800220031000100500094012d31003b00010094005109ffffffffffffffff31000300030009004e3831006200900068012b38a10096000c0100000002000000000000000e0000001e01000a000200030098012b2c000a001607436f75726965720300160500030d00062b0407097e5f5041534d41494e0e00000021050001291f30202020202020202020202020203020202020302020202030202030202030207b246b6565702027466f726d6174277d0d28000d00045120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202030202020203020202020302020302020302070726f6772616d20746573743b2020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020766172202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020623a20627974653b20202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020302020202030202020203020203020203020202020693a20696e74656765723b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206c3a206c6f6e67696e743b20202020202020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020203020202020302020202030202030202030202020206368617261637465723a20636861723b2020202020202020202020202020202020202020200d2a0651202020202020202020202020202020202020202020202020202020202020202020202020202020202020207074723a205e696e74656765723b20202020202020202020202020202020202020202020200d2a0651522020202020202020202020302e30303030303030303030303030303030303030652b30303020202020207374723a20737472696e675b3130305d3b20202020202020202020202020202020202020200d2a065153545220202020202020202020202020202020202020202020202020202020202020202020202020202020637374723a20737472696e675b3530305d3b202020202020202020202020202020202020200d2a06515054525e202020202020203236202020202020202020202020202020202020202020202020202020202020723a207265616c3b20202020202020202020202020202020202020202020202020202020200d2a06514c202020202020202020203020202020202020202020202020202020202020202020202020202020202020643a20646f75626c653b2020202020202020202020202020202020202020202020202020200d2a0651442020202020202020202020302e30303030303030303030303030303030303030652b3030302020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065143535452202020202020202020202020202020202020202020202020202020202020202020202020626567696e20202020202020202020202020202020202020202020202020202020202020202020200d2a0628434841524143544552202040202020202020202020202020202020202020202020202020202020200e0000001e050003298c0762203a3d20313b0e000000210500012918222020202020202020202020202020202020202020202020202020202020202020200d28006d0004514920202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d2031323b20202020202020202020202020202020202020202020202020202020202020200d2a06514220202020202020202020302020202020202020202020202020202020202020202020202020202062203a3d203230343b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202062203a3d203235353b202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d20313b2020202020202020202020202020202020202020202020202020202020202020200d2a06512020202020202020202020202020202020202020202020202020202020202020202020202020202069203a3d2031303b20202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06514f5243412f446562756767657220312e30202020202020436f7079726967687420313939322c204279746520576f726b732c20496e632e202020202020202020202020202020202020202020202020200da0009701000affffffff0099012e30000100010094012d20003b0003003b008c220037005000cd200004008f0086008f220037007300cda00083ff}}{\f4\fs20 \par \par Figure 3-6:  The Stack Frame Display\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Most programs consist of a main program and several subroutines, and it\rquote s common for the subroutines to call other subroutines.  In many programs, subroutines even call themselves \endash  this is called recursion.  The main program and each of the subroutines has it\rquote s own private variable space for local variables.  In the case of a recursive subroutine, each time the subroutine is called a new set of local variables is created.\par All of this means that there is no one list of variables that the debugger can show.  To keep track of what is actually happening in the program, you need to be able to see the variables for a particular subroutine, and in some cases, you need to be able to flip back and forth to the variables from other subroutines or the global variables for the entire program.\par The stack frame display is use to keep track of all of the subroutines.  When your program starts, the name of the main program appears in the stack frame display, and the variables for the main program show up in the memory display.  When a subroutine is called the name of the main program moves down and the subroutine name appears at the top of the stack frame display.\par You can edit the stack frame display using the }{\f6\fs18 FRAME}{\f4\fs20  command.  All you can do is move up or down in the list of stack frames, but as you do, the variables shown in the memory window will shift to the appropriate subroutine.\par If you don\rquote t select a stack frame manually, the debugger automatically switches the variables window to show the topmost subroutine \endash  the one that is currently executing.  If you select a stack frame other than the top one, though, the debugger won\rquote t change the stack frame until the one you pick becomes the topmost stack frame.  One convenient use for this feature is to display the global variables, then watch just those global variables as the program enters and leaves the various subroutines in the program.\par Table 3-6 shows the single-key commands that are available while you are viewing this display.\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f6\fs18 ?}{\f4\fs20 \tab Display a help window with this list of commands.\par }{\f6\fs18 esc}{\f4\fs20 \tab Stop editing the stack frame display; returns to the command line.\par }{\f6\fs18 return}{\f4\fs20 \tab Move down one stack frame.\par }{\f6\fs18 down arrow}{\f4\fs20 \tab Move down one stack frame.\par }{\f6\fs18 up arrow}{\f4\fs20 \tab Move up one stack frame.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 3-6:  The Stack Frame Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ?}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ?\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ? key is available from all of the displays.  It shows a help window with all of the single-key commands you can use while editing the display.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 esc}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 esc\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The esc key leaves the stack frame display mode, returning you to the command line mode.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 return}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 return\tcl3}}}{\b\f6\fs20 \par down arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 down arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Moves the cursor down one stack frame.  The variables window is updated to reflect the variables for the stack frame you have selected.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 up arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 up arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Moves the cursor up one stack frame.  The variables window is updated to reflect the variables for the stack frame you have selected.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 RAM Display Commands}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 RAM Display Commands\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw303\pich153\picwgoal6060\pichgoal3060\macpict\bliptag-2065679649\blipupi72{\*\blipuid 84e03adf4d27b1261dd79d6753ee733d}0843ffffffff0098012e1101a00082a10096000c01000000020000000000000001000a00010007009701182c000a001607436f75726965720300160d00062b08065161202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a065120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200d2a06512b302020202020203230202020202031392020202020313820202020203137202020202031362020202020313520202020203134202020202031332020202020313220202020203131202020202020200d2a06512b31302020202020343236352020202d3238363936202d3530303320202d3232323539203335363020202033303335312020333536342020202d3133343338202d3230373334202d36303433202020200d2a06512b323020202020202d3134303637202d3630333920203133323634202032363238372020333536302020202d3539343320202d3132323735202d3230363934202d3630313120202d31343036372020200d2a06512b333020202020202d322020202020383635362020202d313532382020323637343620202d393633382020313834373220202d31343030382031302020202020323736382020203335373220202020200d2a06512b343020202020202d32343036342036313536202020333420202020202d373933362020333233342020203837323820202030202020202020323638343920202d3230363239202d36303431202020200d2a06512b353020202020203138343435202032363033312020333536302020202d3233373336203138343430202033342020202020302020202020202d313339372020323637343620202d39363338202020200d2a06512b36302020202020323735363320202d363033392020313320202020202d34383530202031332020202020302020202020203020202020202030202020202020302020202020203020202020202020200d2a06512b3730202020202030202020202020302020202020203020202020202030202020202020302020202020202d312020202020353330202020202d322020202020302020202020203020202020202020200d2a06512b3830202020202030202020202020302020202020203020202020202030202020202020302020202020203020202020202030202020202020302020202020202d3120202020203533302020202020200d2a06512b393020202020202d322020202020383236342020202d353537342020323336353620202d3332303420202d3239393339202d32313638352033313438322020323434202020202d33303732202020200d2a06512b313030202020203020202020202032343420202020323330343020202d3231303330202d3333303220202d3231313736202d33333034202031353137362020323333303720202d32383236302020200d2a06512b313130202020202d3235333636202d3534383520202d3237333538203335363220202034323120202020373733202020203937362020202032323430322020363134352020203432312020202020200d2a06512b31323020202020323135332020202d3331343838202d3238363731202d3636353420202d323430363120302020202020202d3735323520202d3138363536202d3430393520202d31343034352020200d2a06512b313330202020202d3430363420202d3134303732202d3430363220202d3134303736202d3132323739202d3134333333202d3437333620202d3138343536202d3430393520202d31343036352020200d2a06512b313430202020202d3430363420202d3133383532202d3430363220202d3133383536202d3430383720202d3134313136202d34373336202038333836202020363739342020203235373020202020200d2a06512b31353020202020313434373720203233323734202032353430302020333132333320203138353034202032343420202020313834333220202d313038333320333536322020202d33303030202020200d2a06512b313630202020202d313633373620323434202020202d333037322020302020202020203637342020202038373133202020302020202020202d3238343437202d3332373332203333343220202020200d2a06512b313730202020203330303331202038333038202020323632323320203237393336202032383030352020323932393520202d32393531202031332020202020313631313620202d32333833312020200d2a06512b3138302020202036393234202020333420202020202d3739333620202d383720202020323338303720202d33323034202032363633372020323934392020202d3331333834202d32343536332020200d2a06512b3139302020202032202020202020323939392020202d3232363134202d3239343239202d3535383020203133393636202036333738202020313434343520202d3238343338202d36313433202020200d2a06512b32303020202020323934392020203334363220202038343138202020313630202020202d3138363838202d3236383739202d3430383520202d3134333333202d3231373620203833383620202020200d2a06512b3231302020202033343933202020393031202020203239383120202033383920202020313339393720202d3331323534202d3231323335202d353538302020323934392020203432332020202020200da0009701000affffffff0098012e20000d0022008f002230000100010094012da00083ff}}{\f4\fs20 \par \par Figure 3-7:  The RAM Display\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The RAM display is a separate, full page display of the contents of memory.  You can change the format used to display memory to a wide variety of number and string formats, and you can page through memory to examine large arrays or to scan for a particular area.\par There are three command line commands that will bring up this display.  The }{\f6\fs18 "var:}{\f4\fs20  command displays RAM starting at the address of a particular variable.  The }{\f6\fs18 addr:}{\f4\fs20  command displays memory starting at a particular address.  The }{\f6\fs18 :}{\f4\fs20  command displays the RAM page as it appeared the last time you saw it, letting you switch back and forth between this display and the standard debugger display with a minimum of hassle.  These commands are described in the section \ldblquote The Command Line,\rdblquote  earlier in this chapter.\par Table 3-7 shows the single-key commands that are available while you are viewing this display.  Character commands are shown in uppercase, but the command processor is not case sensitive.  You can use the equivalent lowercase letter if you prefer.\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f6\fs18 ?}{\f4\fs20 \tab Display a help window with this list of commands.\par }{\f6\fs18 esc}{\f4\fs20 \tab Stop editing the RAM display; returns to the command line.\par }{\f6\fs18 return}{\f4\fs20 \tab Move down in memory.\par }{\f6\fs18 down arrow}{\f4\fs20 \tab Move down in memory.\par }{\f6\fs18 up arrow}{\f4\fs20 \tab Move up in memory.\par }{\f6\fs18 A}{\f4\fs20 \tab Display the current variable as a boolean.\par }{\f6\fs18 B}{\f4\fs20 \tab Display the current variable as a byte.\par }{\f6\fs18 C}{\f4\fs20 \tab Display the current variable as a character.\par }{\f6\fs18 D}{\f4\fs20 \tab Display the current variable as a double-precision real.\par }{\f6\fs18 E}{\f4\fs20 \tab Display the current variable as an extended-precision real.\par }{\f6\fs18 I}{\f4\fs20 \tab Display the current variable as an integer.\par }{\f6\fs18 L}{\f4\fs20 \tab Display the current variable as a long integer.\par }{\f6\fs18 P}{\f4\fs20 \tab Display the current variable as a p-string.\par }{\f6\fs18 R}{\f4\fs20 \tab Display the current variable as a single-precision real.\par }{\f6\fs18 S}{\f4\fs20 \tab Display the current variable as a c-string.\par }{\f6\fs18 X}{\f4\fs20 \tab Display the current variable as a four-byte hexadecimal number.\par }{\f6\fs18 U}{\f4\fs20 \tab Toggle the signed/unsigned status of a byte, integer, or long integer.\par }{\f6\fs18 ^ * @ &}{\f4\fs20 \tab Any of these keys toggles the pointer mode.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 3-7:  The RAM Display Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ?}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ?\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 help}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 ?}{\f4\fs20  key is available from all of the displays.  It shows a help window with all of the single-key commands you can use while editing the display.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 esc}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 esc\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The esc key leaves the RAM display mode, returning you to the command line mode.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 return}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 return\tcl3}}}{\b\f6\fs20 \par down arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 down arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Moves the cursor down in memory.  (\ldblquote Down in memory\rdblquote  means to a higher memory address.)\par The distance moved depends on what you are displaying and whether the open-apple key is held down when you move down in memory.\par When the open-apple key is held down, you will move down 256 bytes in memory.  This is independent of the display mode used, but with the exception of the string formats (which are variable length) and extended-precision floating-point numbers, all of the formats you can display have lengths which divide into 256 evenly, so you will end up on a value boundary.\par If the open-apple key is not held down, the display moves down one line.  The number of bytes moved will depend on the display format.\par There are a few areas of memory that cannot be examined safely, namely the memory mapped I/O areas from C000 to CFFF in banks 0, 1, E0 and E1.  The debugger recognizes this, displaying a ? instead of the value.\par You can also scroll to an address space that is beyond the end of the memory you actually have plugged into your computer.  The debugger will display something \endash  but it\rquote s hard to predict what it might be.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 up arrow}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 up arrow\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Moves the cursor up in memory.  (\ldblquote Up in memory\rdblquote  means to a lower memory address.)\par The distance moved depends on what you are displaying and whether the open-apple key is held down when you move up in memory.\par When the open-apple key is held down, you will move up 256 bytes in memory.  This is independent of the display mode used, but with the exception of the string formats (which are variable length) and extended-precision floating-point numbers, all of the formats you can display have lengths which divide into 256 evenly, so you will end up on a value boundary.\par If the open-apple key is not held down, the display moves up one line.  The number of bytes moved will depend on the display format.\par There are a few areas of memory that cannot be examined safely, namely the memory mapped I/O areas from C000 to CFFF in banks 0, 1, E0 and E1.  The debugger recognizes this, displaying a ? instead of the value.\par You can also scroll to an address space that is beyond the end of the memory you actually have plugged into your computer.  The debugger will display something \endash  but it\rquote s hard to predict what it might be.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 A}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 A\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 booleans}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to boolean values.  Boolean values are displayed as \ldblquote True\rdblquote  or \ldblquote False.\rdblquote \par The debugger assumes boolean values are one byte long, which would be correct for a }{\f6\fs18 packed array of boolean}{\f4\fs20  in Pascal, or for a boolean value or array declared as }{\f6\fs18 char}{\f4\fs20  in C.  In some cases, boolean values are actually two bytes long, so the displayed value may not quite match the value the program sees.  You can switch the display format to byte or integer to see the actual values as either one-byte integers or two-byte integers.\par The debugger treats zero as false and any other value as true.  This matches the way the C language works.  Technically, in Pascal, boolean variables always have on ordinal value of either zero or one, and any other value can cause problems.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 B}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 B\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bytes}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to one-byte integers.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 C}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 C\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 characters}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to a series of characters.\par Non-printing characters will still be displayed as some printing character by mapping the character into the \ldblquote closest\rdblquote  printing character.  You can switch to an integer or byte format to see the actual ASCII character value.\par The debugger assumes characters occupy a single byte in memory, which is correct for C\rquote s }{\f6\fs18 char}{\f4\fs20  type and for Pascal\rquote s }{\f6\fs18 packed array of char}{\f4\fs20  and strings.  In Pascal, individual character variables and unpacked arrays of char are stored as two-byte values, and in C, integers can be used to store character values.  In either case, comparisons may not act the way it appears they should if the most significant byte is not set to 0, and the debugger will display an extra character for each value the program sees.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 D}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 D\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 real numbers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to double-precision (8 byte) real numbers.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 E}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 E\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 real numbers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to extended-precision (10 byte) real numbers.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 I}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 I\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to two-byte integers.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 L}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 L\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integers}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to four-byte integers.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 P}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 P\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 p-strings}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 strings}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to a single p-string.  P-strings start with a length byte, and are followed by 0 to 255 characters.  Non-printing characters will be displayed as the \ldblquote closest\rdblquote  printable character.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 R}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 R\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 real numbers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to single-precision (4 byte) real numbers.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 S}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 S\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 strings}}}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 c-strings}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to a single c-string (null terminated string).  The debugger will print up to the length of the string, or 1584 characters, whichever is shorter.  Non-printing characters will be displayed as the \ldblquote closest\rdblquote  printable character.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 U}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 U\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 unsigned integers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The three integer formats (byte, integer and long integer) can be displayed as signed or unsigned values.  This command toggles between a signed and unsigned display.  It does not effect any other display formats.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 X}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 X\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hexadecimal values}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to a series of hexadecimal values.  After every four bytes, a space is displayed to break the page up and make it easier to count over a specific number of bytes, but the columns formed by these blanks have no meaning at all in terms of RAM.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ^ * @ &}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ^ * @ &\tcl3}}}{\b\f6\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pointers}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Changes the format used to display RAM to a series of pointers.  The debugger assumes each pointer occupies four bytes of memory, but it also assumes that the most significant byte is meaningless, and displays the pointers in the format xx/xxxx.  If you need to check the most significant byte, use the hexadecimal display option.\par }\pard \qc\widctlpar\adjustright {\b\f4\fs20 \sect }\sectd \sbkodd\linex0\headery2160\footery1880\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 4:   Debugger Utilities Reference\par }}\pard\plain \qc\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 4\par Debugger Utilities Reference\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par \par \par \par \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 4 \endash  Debugger Utilities Reference\tcl1}}}{\v\f4\fs20 \par }{\b\f4\fs28 DebugBreak}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 DebugBreak\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugBreak utility}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 DebugBreak}{\f4\fs20  utility gives you a quick and easy way to break into a program at it\rquote s first executable line.  This utility sends a message to the debugger, telling it to break on the next executable line of any program that uses debug code.  You can then run your program from the shell, or even leave the shell to run the program from some other launcher, like the Finder.  It is also possible to break into desk accessories, XCMDs, or any other program that uses debug code.  You can, of course, call the utility from a script file, so that the debugger will pop up as soon as your program is built and starts to run.\par There are no parameters or options for this utility.  Once it is installed, just type the name at any time from the shell.\par It\rquote s possible to simulate a utility style debugger using this utility and a short script.  See \ldblquote A Debug Script\rdblquote  in Chapter 2 for details.\par \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 DebugFast and DebugNoFast}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 DebugFast and DebugNoFast\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugFast utility}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugNoFast utility}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The method of debugging used by the ORCA compilers and debuggers is an intrusive method that inserts COP instructions in the executable program.  There are both advantages and disadvantages to this method, but one of the disadvantages is that a program with debug code runs slower than one that does not use debug code, even if you aren\rquote t using the debugger.  For some programs, the extra speed hit is severe enough to cause you to want to compile the program without debug code most of the time, adding debug code only when you want to use the debugger.\par The }{\f6\fs18 DebugFast}{\f4\fs20  utility gives you another alternative.  This utility sends a message to the debugger, telling it to patch the program.  This replaces each of the COP instructions with a JMP instruction, completely bypassing both the debugger and the COP interrupt handler.  For all but the tightest loops, this increases the speed of the program to almost the same speed you would get without debug code.\par }{\f6\fs18 DebugFast}{\f4\fs20  tells the debugger to patch the RAM version of the program only.  Once you decide to use the debugger, run }{\f6\fs18 DebugNoFast}{\f4\fs20  to tell the debugger to stop patching programs, then run the program again.  Unless your program is restartable, this reloads it from disk, and the debugger will work, again.  If the program is restartable you will have to remove it from memory somehow and then execute the program again.  If you have no other way of purging memory, you can always reboot.\par Neither utility has any options or parameters.  To run the utilities, type the name from any command processor that can run ORCA or APW shell utilities.\par See Appendix A for details on how the debugger works.\par }\pard \qc\widctlpar\adjustright {\b\f4\fs20 \sect }\sectd \sbkodd\linex0\headery2160\footery1880\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix A:  How  the Debugger Works\par }}\pard\plain \qc\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Appendix A\par How the Debugger Works\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par \par \par \par \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Appendix A \endash  How the Debugger Works\tcl1}}}{\f4\fs20 \par }{\b\f4\fs28 COP Vector}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 COP Vector\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA compilers and debuggers use an invasive debug mechanism that depends on the compilers inserting COP instructions in the code stream.  When the Apple IIGS executes a COP instruction it calls a COP handler; the debuggers insert themselves in the list of programs that are called when a COP instruction is encountered.\par Several COP instructions are used.  There are separate COP instructions for executing a line of source code, breaking, stepping past a line, creating symbol tables, entering and leaving subroutines, and for passing messages to the debugger.  The various COP instructions are summarized in table A-1, and explained in detail below.\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f6\fs18 00}{\f4\fs20 \tab Indicates a new source code line.\par }{\f6\fs18 01}{\f4\fs20 \tab Indicates a hard-coded break point.\par }{\f6\fs18 02}{\f4\fs20 \tab Indicates a memory protection point.\par }{\f6\fs18 03}{\f4\fs20 \tab Used when a new subroutine starts.\par }{\f6\fs18 04}{\f4\fs20 \tab Marks the end of a subroutine.\par }{\f6\fs18 05}{\f4\fs20 \tab Creates a symbol table.\par }{\f6\fs18 06}{\f4\fs20 \tab Switches the source file.\par }{\f6\fs18 07}{\f4\fs20 \tab Sends a message to the debugger.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table A-1:  Debugger COP Instructions\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 00}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 00\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 COP 00 indicates that a new source line has been reached and that the debugger must take appropriate action, such as updating the source listing position and variables window.\par The COP instruction is followed by the line number.  In assembly language, this would look like:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx2160\adjustright {\f6\fs18 \tab cop\tab 00\par \tab dc\tab i'16'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 01}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 01\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 break points}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 COP 01, like COP 00, marks the start of an executable line of source code.  The difference is that COP 01 also indicates that the user has marked the line as a hard-coded break point, so the debugger should break at the line.\par The COP instruction is followed by the line number.  In assembly language, this would look like:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx2160\adjustright {\f6\fs18 \tab cop\tab 01\par \tab dc\tab i'16'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 02}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 02\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory protection}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard-coded break points}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 COP 02, like COP 00, marks the start of an executable line of source code.  The difference is that COP 02 marks a protected line, indicating that the debugger should not take the normal action of updating the debugger display.  The only reason for putting COP 02 instructions in the code is to give the debugger a chance to override the memory protection status of a line.  For example, the ORCA/Debugger allows manual break points to override these hard-coded memory protection points.\par The COP instruction is followed by the line number.  In assembly language, this would look like:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx2160\adjustright {\f6\fs18 \tab cop\tab 02\par \tab dc\tab i'16'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 03}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 03\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 subroutines}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This instruction is used right after a subroutine is called, and marks entry into the subroutine.  The COP instruction is followed by the four byte address of the subroutine name, coded as a null terminated string (c-string).\par \par }\pard \qj\fi360\widctlpar\tx1080\tx2160\adjustright {\f6\fs18 \tab cop\tab 03\par \tab dc\tab a4'name'\par \par \tab ...\par \par name\tab dc\tab c'Subroutine Name',i1'0'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 04}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 04\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 subroutines}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This instruction marks the end of a subroutine.  It should appear right after the last executable line in the subroutine, but before the code that wipes out the stack frame and returns to the caller.\par Debuggers will remove any symbol tables that have been created since the last COP 03 instruction.\par Every COP 04 instruction must match exactly one COP 03 instruction.  If the debugger encounters a COP 03 and never finds a COP 04, or encounters a COP 04 without first hitting a COP 03, it could crash or corrupt memory.\par There is no operand for this instruction.  In assembly language, it looks like this:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx2160\adjustright {\f6\fs18 \tab cop\tab 04\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 05}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 05\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol table}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 COP 05 provides access to a subroutine\rquote s symbol table.  It can be used after a call to vectors 3 or 6, but must be used before any calls to vectors 0, 1, and 2.  The debugger\rquote s symbol table is organized as shown in Figure A-1.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw372\pich318\picwgoal7440\pichgoal6360\macpict\bliptag-471897758\blipupi72{\*\blipuid e3df6962942104da960134614bf573d0}0710000700070145017b1101a00082a0008c01000a000700070145017b0a000000000000000034000a00280023010138a10096000605000000023da1009a0008fffe0000004c0000a000982c000c00150948656c7665746963610300150d00092b321922646973706c6163656d656e7420746f2074686520656e64206f6620746865207461622988026c65a00099a00097a0008da0008ca0008c34002200280053010138a10096000605000000023da1009a00080003000000590000a00098280037002f22706f696e74657220746f20746865206e657874207661726961626c65206e616d653b29860a20746865206e616d650da00099a1009a0008fff8000000590000a00098280042002f2169732073746f72656420696e2050617363616c20737472696e6720666f726d6174a00099a00097a0008da10096000605000000023da1009a0008fffe0000000e0000a0009828002a000b03243032a00099a00097a0008da0008ca0008c34005200280083010138a10096000605000000023da1009a00080003000000650000a000982b243d22706f696e74657220746f20746865207661726961626c6527732076616c75653b2069297d126620746865207661726961626c652069730da00099a1009a0008fff8000000650000a00098280072002f22616e2061727261792c207468656e207468697320706f696e747320746f2074686520297f0d666972737420656c656d656e74a00099a00097a0008da10096000605000000023da1009a0008fffe0000000e0000a0009828005a000b03243036a00099a00097a0008da0008ca0008c34009a002800b3010138a10096000605000000023da1009a0008fffe000000500000a000982b244f226e756d626572206f6620737562736372697074733b2030206966206e6f7420616e202983056172726179a00099a00097a0008da10096000605000000023da1009a0008fffe0000000e0000a000982800a2000b03243043a00099a00097a0008da0008ca0008c3400b2002800e3010138a10096000605000000023da1009a0008fffe0000003b0000a000982b242b176d696e696d756d207375627363726970742076616c7565a00099a00097a0008da10096000605000000023da1009a0008fffe0000000e0000a000982800ba000b03243045a00099a00097a0008da0008ca0008c3400e200280113010138a10096000605000000023da1009a0008fffe0000003b0000a000982b2443176d6178696d756d207375627363726970742076616c7565a00099a00097a0008da10096000605000000023da1009a0008fffe0000000e0000a000982800ea000b03243132a00099a00097a0008da0008ca0008c34011200280143010138a10096000605000000023da1009a0008fffe0000002f0000a000982b24431473697a65206f66206561636820656c656d656e74a00099a00097a0008da10096000605000000023da1009a0008fffe0000000e0000a0009828011a000b03243136a00099a00097a0008da000ac6101380103014c0117ffe800306100a8010300bc0117009c00302000ba010c013a010ca000ada1009600060500000002baa1009a000800140000001a0000a000982800ea0113077265706561740da00099a1009a000800090000001a0000a000982a0b04666f720da00099a1009a0008fffe0000001a0000a000982a0b05656163680da00099a1009a0008fff30000001a0000a000982a0b0661727261790da00099a1009a0008ffe80000001a0000a000982a0b0964696d656e73696f6ea00099a00097a000ac610018013f002c0153009c0030610138013f014c0153ffe8003020013a0148002a0148a000ada1009600060500000002baa1009a0008000e000000140000a000982800c0014f077265706561740da00099a1009a00080003000000140000a000982a0b04666f720da00099a1009a0008fff8000000140000a000982a0b05656163680da00099a1009a0008ffed000000140000a000982a0b087661726961626c65a00099a0009734008200280083010138a0008ca10096000605000000023da1009a0008fffe0000000e0000a0009828008a000b03243041a00099a00097a0008c3400820028008f010138a10096000605000000023da1009a0008fffe000000620000a000982b2401226164647265737320666c61673b2030202d3e2064697265637420706167652c20312029810f2d3e206c6f6e672061646472657373a00099a00097a0008da0008da1009600060500000002baa1009a0008fffe0000000e0000a00098280012000b03243030a00099a00097a0008ca0008c34008e0028009b010138a10096000605000000023da1009a0008fffe000000470000a000982b24851e666f726d6174206f662076616c75653b20736565205461626c6520412d32a00099a00097a0008da10096000605000000023da1009a0008fffe0000000e0000a00098280096000b03243042a00099a00097a0008da00083ff}}{\f4\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure A-1:  Debugger Symbol Table Format\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The following table shows the format used to store the variable\rquote s current value:\par \par }\pard \li2160\keepn\widctlpar\tx2880\tx3960\adjustright {\f4\fs20 \tab }{\f4\fs20\ul Value}{\f4\fs20 \tab }{\f4\fs20\ul Format}{\f4\fs20 \par \tab 0\tab 1-byte integer\par \tab 1\tab 2-byte integer\par \tab 2\tab 4-byte integer\par \tab 3\tab single-precision real\par \tab 4\tab double-precision real\par \tab 5\tab extended-precision real\par \tab 6\tab C-style string\par \tab 7\tab Pascal-style string\par \tab 8\tab character\par \tab 9\tab boolean\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table A-2:  Debugger Symbol Table Format Codes\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The format code indicating a pointer to any of these types of values is obtained by ORing the value\rquote s format code with $80.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIZM}}}{\v\f4\fs20 \par }{\f4\fs20 One-byte integers default to unsigned, while two-byte and four-byte integers default to signed format.  ORing the format code with $40 reverses this default, giving signed one-byte integers or unsigned four-byte integers.  (The signed flag is not supported by PRIZM 1.1.3.)\par The symbol table follows right after the COP 05 instruction.}{\f4 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 06}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 06\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 COP 06 is used at the start of all subroutines, right after the COP 03 that marks the start of the subroutine.  (You can put the COP 06 before or after any COP 05, so long as it comes before any COP 00, COP 01 or COP 02 instructions).  This instruction flags the source file for the subroutine, giving the debugger a chance to switch to the correct source file if it is not already being displayed.  You can also imbed other COP 06 instructions inside of the subroutine if the subroutine spans several source files.\par The COP 06 instruction is followed by the four-byte address of the full path name of the source file.  The path name is given as a C-string.  The ORCA/Debugger supports path names up to 255 characters long, and allows either / or : characters as separators.  Here\rquote s what the instruction might look like in assembly language:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx2160\adjustright {\f6\fs18 \tab cop\tab 06\par \tab dc\tab a4'name'\par \par \tab ...\par \par name\tab dc\tab c'/hd/programs/source.pas',i1'0'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 COP 07}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COP 07\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 COP 07 is used to send messages to the debugger.  The first four bytes following the COP 07 have a fixed format, but the remaining bytes vary from message to message.\par The two bytes right after the COP 07 instruction are the total length of the debugger message, in bytes.  This will always be at least 4.  The next two bytes are the message number.  The message number can be followed by more bytes.\par Three messages are currently defined and supported by ORCA/Debugger.  None uses any optional fields, so the length word should be four for all three of these messages.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugFast utility}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debug code}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Message 0 tells the debugger to start patching all debugger COP instructions with JMP instructions.  This is the message sent by the }{\f6\fs18 DebugFast}{\f4\fs20  utility.  This message must be sent before a program starts to execute \endash  sending this message after a program with debug code starts, but before it finishes, can cause memory corruption or crashes.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugNoFast utility}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Message 1 tells the debugger to stop patching COP instructions, reversing the effect of message 0.  The }{\f6\fs18 DebugNoFast}{\f4\fs20  utility sends this message.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DebugBreak utility}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Message 2 tells the debugger to treat the next COP 00 as if it were a COP 01.  The }{\f6\fs18 DebugBreak}{\f4\fs20  utility sends this message.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 auto-go\:see also memory protection}}}{\v\f4\fs20 \par }\pard \widctlpar\adjustright {\f4\fs20 \sect }\sectd \sbkodd\linex0\headery2160\footery1880\cols2\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Index\par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Index\par }}\pard\plain \widctlpar\adjustright \f12\cgrid {\pard\plain \widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Index\tcl1}}}{\b\v\f4\fs20 \par }{\b\f4\fs20 special characters\par \par }\pard\plain \s24\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 : command 18\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 ? command 9, 18\par }\pard\plain \s24\widctlpar\adjustright \f12\cgrid {\f4\fs20 "var: command 8, 15\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 "var=val command 15\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par A\par \par }\pard\plain \s24\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 addr: command 19\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 address format 19\par APW 24\par auto-go 11, 15, 20\par }\pard\plain \s24\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see also memory protection\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par B\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 booleans 18, 33, 39\par BP command 19\par break point display 4, 25\par break point trigger 26\par }\pard \s25\fi-180\li180\widctlpar\adjustright {\f4\fs20 break points 9, 11, 13, 19, 20, 21, 25-28, 45\par }\pard\plain \s24\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see also hard-coded break points\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 bytes 33, 39\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par C\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 c-strings 17, 34, 40\par case sensitivity 31\par characters 17, 33, 39\par CLR command 19\par command line 14\par command line display 5\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par D\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 debug code 10, 11, 12, 43, 48\par DEBUG utility 11\par DebugBreak utility 3, 11, 13, 43, 48\par DebugFast utility 3, 12, 43, 48\par DebugNoFast utility 3, 43, 48\par desktop 24\par double-precision 16\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par E\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 entering the debugger 4, 10-12, }{\b\f4\fs20 13}{\f4\fs20 -}{\b\f4\fs20 14}{\f4\fs20 \par event loops 13\par Event Manager 13\par execution speed 12\par extended precision 16\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par F\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 four-finger salute 11, 13, 20\par FRAME command 19\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par H\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 hard-coded break points 9, 11, 20, 25, 45, 46\par }\pard\plain \s24\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see also break points\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 help 5, 18, 22, 26, 29, 32, 36, 38\par hexadecimal values 35, 40\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par I\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 IN command 19, 27\par INDENT command 20\par installation 3\par integers 16, 33, 34, 39, 40\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par J\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 jump command 5, 20\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par K\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 keyboard 13\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par L\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 leaving the debugger 14, 20\par listing display 5, 20, 24, 27, 29\par long integers 34, 40\par low resolution graphics 5\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par M\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 manual break points 25\par MEM command 20\par memory display 4, 6-8, 31\par memory protect display 4\par memory protection 10, 28-30, 46\par MP command 20\par multiple files 27, 29\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 O\par }\pard \widctlpar\adjustright {\b\f4\fs20 \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 OPEN command 9, 20, 27, 29\par ORCA 24\par ORCA/C 11\par OUT command 21, 27\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par P\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 p-strings 17, 34, 40\par pointers 18, 35, 40\par PRIZM 10, 11, 48\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par R\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 RAM display 18, 19\par readln 14\par real numbers 16, 33, 34, 40\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par S\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 scanf 14\par scripts 11\par shell 10, 24\par single-precision 16\par sound 23\par source break points\par }\pard\plain \s24\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see hard-coded break points\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 source code 20, 24, 27, 29\par speed 12\par stack frame display 4, 35\par stack frames 6, 8, 19, 31\par step 22\par step command 5, 21\par step/trace mode 5, 6, 14, 21, 24\par strings 17, 34, 40\par subroutines 6, 23, 24, 46\par }\pard\plain \s24\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see also stack frames\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 super high resolution graphics 6, 24\par symbol table 46\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par T\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 text display 24\par text screen 5, 6\par trace 22\par trace command 5, 21\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 U\par }\pard \widctlpar\adjustright {\b\f4\fs20 \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 unsigned integers 31, 34, 40\par utility style debugger 11\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par V\par \par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 variable name case 31\par variables 6-8, 18, 19, 20, 31, 46\par }\pard\plain \s24\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 setting 15\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 VERSION command 14, 21\par }}}\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }}