{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset2\fprq2{\*\panose 03b811100059001d74c0}Zapf Dingbats;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f23\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f25\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f26\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f27\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f28\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f34\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f35\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f37\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f38\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f40\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f41\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f42\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f44\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f45\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f46\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f47\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f48\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f49\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f50\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f51\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f52\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f53\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f55\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f56\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f57\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f58\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f60\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f61\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f62\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f63\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f64\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f65\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f66\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f67\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f68\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f69\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f78\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f80\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f81\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f82\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f86\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f87\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f88\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f89\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f90\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f91\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f92\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f93\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f96\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f97\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f98\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f99\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f100\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f101\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f102\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f103\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f104\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f105\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f106\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f107\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f108\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f109\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f110\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f112\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f113\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f114\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f115\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f116\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f117\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f118\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f119\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f121\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f122\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f123\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f124\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f125\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset2\fprq2{\*\panose 03b811100059001d74c0}Zapf Dingbats;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f23\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f25\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f26\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f27\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f28\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f34\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f35\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f37\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f38\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f40\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f41\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f42\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f44\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f45\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f46\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f47\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f48\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f49\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f50\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f51\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f52\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f53\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f55\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f56\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f57\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f58\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f60\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f61\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f62\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f63\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f64\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f65\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f66\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f67\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f68\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f69\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f78\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f80\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f81\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f82\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f86\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f87\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f88\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f89\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f90\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f91\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f92\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f93\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f96\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f97\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f98\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f99\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f100\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f101\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f102\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f103\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f104\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f105\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f106\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f107\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f108\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f109\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f110\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f112\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f113\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f114\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f115\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f116\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f117\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f118\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f119\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f121\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f122\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f123\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f124\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f125\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \snext0 Normal;}{\s1\sa60\keepn\widctlpar\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 2;}{\s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 3;}{\s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 4;}{\s5\li720\widctlpar\adjustright \b\f4\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\s6\li720\widctlpar\adjustright \f4\fs20\ul\cgrid \sbasedon0 \snext0 heading 6;}{\s7\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 8;}{\s9\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{\s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext16 Text;}{\s17\li720\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{\s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s19\li720\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{\s20\li960\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s21\li1200\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s22\li1440\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{\s23\li1680\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s24\li1920\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\s25\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext25 header;}{\s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon16 \snext26 Code;}{\s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon26 \snext27 Model;}{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext28 footer;}{\*\cs29 \additive \sbasedon10 page number;}{\s30\li2160\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 7;}{\s31\qj\li360\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon16 \snext31 Table Header;}{\s32\li1800\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 6;}{\s33\li1440\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 5;}{\s34\li1080\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 4;}{\s35\li720\widctlpar\adjustright \f4\fs20\cgrid \sbasedon0 \snext0 \sautoupd index 3;}{\s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid \sbasedon0 \snext0 \sautoupd index 2;}{\s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid \sbasedon0 \snext0 \sautoupd index 1;}{\*\cs38 \additive \sbasedon10 line number;}{\*\cs39 \additive \fs16\up6 \sbasedon10 footnote reference;}{\s40\widctlpar\adjustright \f4\fs20\cgrid \sbasedon0 \snext40 footnote text;}{\s41\fi-240\li1920\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 8;}{\s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon27 \snext42 Model w/o Space;}{\s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon16 \snext43 Error Header;}{\s44\fi-240\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 9;}{\s45\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext37 index heading;}}{\*\revtbl {Unknown;}}{\info{\upr{\title \'fe7                         \'9e  f      }{\*\ud\uc0{\title {\uc1\u731 \'fe7                         \'fb  f      }}}}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy4\hr18\min52}{\revtim\yr2000\mo10\dy4\hr18\min52}{\printim\yr2000\mo10\dy4\hr18\min50}{\version2}{\edmins2}{\nofpages479}{\nofwords145557}{\nofchars829675}{\*\company Byte Works, Inc.}{\nofcharsws1018899}{\vern99}}\margl2160\margr2160\margt2880\margb2880 \facingp\widowctrl\ftnbj\aenddoc\formshade\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \sbkcol\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 1:  Introducing ORCA/C\par }}{\footerl \pard\plain \s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs29\fs20 \hich\af5\dbch\af4\loch\f5  PAGE }}{\fldrslt {\cs29\fs20\lang1024 \hich\af5\dbch\af4\loch\f5 462}}}{\fs20 \par }}{\footerr \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs29\fs20 \hich\af5\dbch\af4\loch\f5  PAGE }}{\fldrslt {\cs29\fs20\lang1024 \hich\af5\dbch\af4\loch\f5 463}}}{\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\tx450\tx720\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs72 \par \par }\pard \qc\widctlpar\adjustright {\b\i\fs72 \hich\af4\dbch\af4\loch\f4 ORCA/C 2.0}{\b\fs48\up20 \loch\af4\dbch\af4\hich\f4 \u8482\'aa}{\b\i\fs72 \hich\af4\dbch\af4\loch\f4  \par }{\b\i\shad\fs36 \hich\af4\dbch\af4\loch\f4 A C Compiler\par \hich\af4\dbch\af4\loch\f4 and Development System \par \hich\af4\dbch\af4\loch\f4 for the\par \hich\af4\dbch\af4\loch\f4 Apple\~II}{\b\i\shad\scaps\fs28 \hich\af4\dbch\af4\loch\f4 GS}{\b\i\shad\fs36 \par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\b\fs36 \par \hich\af4\dbch\af4\loch\f4 Mike Westerfield\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\fs36 \hich\af4\dbch\af4\loch\f4 Byte Works}{\fs20\up12 \loch\af4\dbch\af4\hich\f4 \u174\'a8}{\fs36 \hich\af4\dbch\af4\loch\f4 , Inc.}{\par \hich\af4\dbch\af4\loch\f4 8000 Wagon Mound Dr. NW\par \hich\af4\dbch\af4\loch\f4 Albuquerque, NM 87120\par \hich\af4\dbch\af4\loch\f4 (505) 898-8183\par }\pard \widctlpar\adjustright {\fs20 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs29\fs20 \hich\af5\dbch\af4\loch\f5  PAGE }}{\fldrslt {\cs29\fs20\lang1024 \hich\af5\dbch\af4\loch\f5 v}}}{\fs20 \par }}\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par \par \par \par \par }\pard \qc\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Credits\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \li2880\widctlpar\adjustright {\fs20 \hich\af4\dbch\af4\loch\f4 C Compiler\par \tab \hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \par \hich\af4\dbch\af4\loch\f4 Development Environment\par \tab \hich\af4\dbch\af4\loch\f4 Mike \hich\af4\dbch\af4\loch\f4 Westerfield\par \tab \hich\af4\dbch\af4\loch\f4 Phil Montoya\par \par \hich\af4\dbch\af4\loch\f4 Testing\par \tab \hich\af4\dbch\af4\loch\f4 Barbara Allred\par \tab \hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \par \hich\af4\dbch\af4\loch\f4 Documentation\par \tab \hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \tab \hich\af4\dbch\af4\loch\f4 Barbara Allred\par \tab \hich\af4\dbch\af4\loch\f4 Patty Westerfield\par }\pard \widctlpar\adjustright {\fs20 \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\adjustright {\fs20 \hich\af4\dbch\af4\loch\f4 Copyright 1989, 1991, 1992\par \hich\af4\dbch\af4\loch\f4 By The Byte Works, Inc.\par \hich\af4\dbch\af4\loch\f4 All Rights Reserved\par \par \hich\af4\dbch\af4\loch\f4 Copyright 1986,1987, 1989\par \hich\af4\dbch\af4\loch\f4 Apple Com\hich\af4\dbch\af4\loch\f4 puter, Inc.\par \hich\af4\dbch\af4\loch\f4 All Rights Reserved\par }\pard \qj\fi720\widctlpar\adjustright {\fs20 \page }{\b\fs18 \hich\af4\dbch\af4\loch\f4 Limited Warranty}{\fs18 \hich\af4\dbch\af4\loch\f4  - Subject to the below stated limitations, Byte Works, Inc. hereby warrants that the programs contained in this unit will load and run on the standard manufacturer's configuration for the computer listed fo\hich\af4\dbch\af4\loch\f4 r a period of ninety (90) days from date of purchase.  Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose.  The limits of warranty extend only to the orig\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 nal purchaser.\par \hich\af4\dbch\af4\loch\f4 Neither Byte Works, Inc. nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, incl\hich\af4\dbch\af4\loch\f4 uding (but not limited to) interruption of service, loss of business, or anticipatory profits.\par \hich\af4\dbch\af4\loch\f4 To obtain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works, Inc. within ten (10) days of purchase.\par }{\b\fs18 \hich\af4\dbch\af4\loch\f4 Important Notice}{\fs18 \hich\af4\dbch\af4\loch\f4  - This is a fully copyrighted work and as such is protected under copyright laws of the United States of America.  According to these laws, consumers of copywritten material may make copies for their personal use only.  Duplication for an\hich\af4\dbch\af4\loch\f4 y purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par \hich\af4\dbch\af4\loch\f4 This produc\hich\af4\dbch\af4\loch\f4 t is sold for use on a single computer at at a single location.  Contact the publisher for information regarding licensing for use at multiple-workstation or multiple-computer installations.\par }{\b\fs18 \hich\af4\dbch\af4\loch\f4 Use of Libraries}{\fs18 \hich\af4\dbch\af4\loch\f4  - The enclosed subroutine libraries are fully co\hich\af4\dbch\af4\loch\f4 pyrighted works.  It is the policy of Byte Works, Inc. to license these libraries to purchasers of ORCA/C free of charge.  Such licenses are generally restricted to include the libraries of binary files, and do not extend to use of the source code.  For d\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 tails, see Appendix C.\par \hich\af4\dbch\af4\loch\f4 ORCA/C is a trademark of the Byte Works, Inc.\par \hich\af4\dbch\af4\loch\f4 The Byte Works is a registered trademark of the Byte Works, Inc.\par \hich\af4\dbch\af4\loch\f4 Apple and GS/OS are registered trademarks of Apple Computer, Inc.\par \par \hich\af4\dbch\af4\loch\f4 Program, Documentation and Design\par \hich\af4\dbch\af4\loch\f4 Copyright 1984-1992\par \hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 he Byte Works, Inc.\par \par \hich\af4\dbch\af4\loch\f4 Apple Computer, Inc. MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITT\hich\af4\dbch\af4\loch\f4 ED BY SOME STATES.  THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS.  THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE.\par \hich\af4\dbch\af4\loch\f4 GS/OS is a copyrighted program of Apple Computer, Inc. licens\hich\af4\dbch\af4\loch\f4 ed to Byte Works, Inc. to distribute for use only in combination with ORCA/C.  Apple software shall not be copied onto another diskette (except for archive purpose) or into memory unless as part of the execution of ORCA/C.  When ORCA/C has completed execu\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ion Apple Software shall not be used by any other program.\par \hich\af4\dbch\af4\loch\f4 Apple is a registered trademark of Apple Computer, Inc.\par }\pard \widctlpar\adjustright {\fs20 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl \pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs36 \hich\af4\dbch\af4\loch\f4 Table of Contents\par }{\fs20 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\field\fldedit{\*\fldinst {\hich\af4\dbch\af4\loch\f4  TOC \\o "1-3" }}{\fldrslt {\hich\af4\dbch\af4\loch\f4 Chapter 1 \endash  Introducing ORCA/C\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318064 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000360034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 1}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 ORCA/C\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318065 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000360035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Wha\hich\af4\dbch\af4\loch\f4 t You Need\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318066 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000360036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 About the Manual\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318067 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000360037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 2}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Visual Cues\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318068 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000360038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 3}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Other Books and Reference Materials\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318069 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000360039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 3}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 2 \endash  Exploring the System\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49531\hich\af4\dbch\af4\loch\f4 8070 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 7}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Backing Up ORCA/C\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318071 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 7}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Bull's Eye Program\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318072 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 7}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Finding Out About the Desktop\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318073 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 8}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 How Graphics and Text are Handled\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318074 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 9}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Langua\hich\af4\dbch\af4\loch\f4 ges Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318075 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 9}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 What's a Debugger?\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318076 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 10}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Using the Source-Level Debugger\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318077 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 11}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Debugging a Simple Graphics Program\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318078 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 11}}}{\par \hich\af4\dbch\af4\loch\f4 The Step Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _T\hich\af4\dbch\af4\loch\f4 oc495318079 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000370039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 11}}}{\par \hich\af4\dbch\af4\loch\f4 The Stop Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318080 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 11}}}{\par \hich\af4\dbch\af4\loch\f4 The Trace Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318081 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 11}}}{\par \hich\af4\dbch\af4\loch\f4 The Go Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318082 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 12}}}{\par \hich\af4\dbch\af4\loch\f4 The Set Auto-Go Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318083 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 12}}}{\par \hich\af4\dbch\af4\loch\f4 Break Points\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49\hich\af4\dbch\af4\loch\f4 5318084 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 13}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Debugging a Program With More Than One Subroutine\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318085 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The Profile Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318086 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 13}}}{\par \hich\af4\dbch\af4\loch\f4 The Step Through Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318087 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 14}}}{\par \hich\af4\dbch\af4\loch\f4 The Goto Next Return Command\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49\hich\af4\dbch\af4\loch\f4 5318088 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 15}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Viewing Program Variables\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318089 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000380039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 15}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Those Other Disks\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318090 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 16}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 3 \endash  Compiler Directives\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318091 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 19}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 What's a Compiler Directive?\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318092 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Ho\hich\af4\dbch\af4\loch\f4 w Directives are Coded\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318093 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 A Brief Summary of ORCA/C Pragmas\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318094 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 4 \endash  Programming on the Apple IIGS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318095 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 23}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Text Programs\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318096 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 23}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Library Fun\hich\af4\dbch\af4\loch\f4 ctions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318097 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 27}}}{\par \hich\af4\dbch\af4\loch\f4 Console Control Codes\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318098 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 28}}}{\par \hich\af4\dbch\af4\loch\f4 Programming in Pieces\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318099 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003000390039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 28}}}{\par \hich\af4\dbch\af4\loch\f4 Stand-Alone Programs\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318100 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 33}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Graphics Programs\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318101 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 33}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Y\hich\af4\dbch\af4\loch\f4 our First Graphics Program\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318102 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 33}}}{\par \hich\af4\dbch\af4\loch\f4 Stand-Alone Programs\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318103 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 34}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Programming on the Desktop\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318104 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 35}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Learning the Toolbox\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318105 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 36}}}{\par \hich\af4\dbch\af4\loch\f4 Hardware Requirements\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGE\hich\af4\dbch\af4\loch\f4 REF _Toc495318106 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 36}}}{\par \hich\af4\dbch\af4\loch\f4 Toolbox Header Files\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318107 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 37}}}{\par \hich\af4\dbch\af4\loch\f4 Debugging a Desktop Program\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318108 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 38}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Writing New Desk Accessories\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318109 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100300039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 40}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Debugging NDAs\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318110 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 42}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Clas\hich\af4\dbch\af4\loch\f4 sic Desk Accessories\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318111 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 42}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Debugging Classic Desk Accessories\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318112 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 44}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Inits\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318113 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 45}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 HyperStudio NBAs\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318114 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 45}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 HyperCard XCMDs\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318115 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 46}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Control Panel Devices (CDevs)\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318116 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 46}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 5 \endash  Writing Assembly Language Subroutines\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318117 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 47}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Introduction\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318118 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 47}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Basics\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318119 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100310039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 47}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Returning Functi\hich\af4\dbch\af4\loch\f4 on Values From Assembly Language Subroutines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318120 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 49}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Passing Parameters to Assembly Language Subroutines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318121 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 50}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Macro Solution\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318122 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 53}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Accessing C Variables from Assembly Langu\hich\af4\dbch\af4\loch\f4 age\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318123 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 54}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Calling C Procedures and Functions from Assembly Language\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318124 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 55}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 6 \endash  Using the Shell\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318125 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 57}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Another Look at the Shell Window\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318126 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 57}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 G\hich\af4\dbch\af4\loch\f4 etting Into Text\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318127 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 57}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 How Shell Commands Work\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318128 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 58}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 File Names\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318129 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100320039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 59}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Directory Walking\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318130 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 60}}}{\par \hich\af4\dbch\af4\loch\f4 Device Names\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318131 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 60}}}{\par \hich\af4\dbch\af4\loch\f4 Standard\hich\af4\dbch\af4\loch\f4  Prefixes\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318132 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 61}}}{\par \hich\af4\dbch\af4\loch\f4 Using Wild Cards\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318133 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 63}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Required and Optional Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318134 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 64}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Redirecting Input and Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318135 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 65}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Pipelines\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318136 \\\hich\af4\dbch\af4\loch\f4 h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 66}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Writing Your Own Utilities\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318137 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 66}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Installing a New Utility\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318138 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 67}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Learning More About the Shell\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318139 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100330039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 68}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 7 \endash  Desktop Reference\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318140 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 69}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Basi\hich\af4\dbch\af4\loch\f4 c Operations\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318141 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 69}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Cursor\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318142 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 69}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The Insertion Point\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318143 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 69}}}{\par \hich\af4\dbch\af4\loch\f4 Over Strike Mode\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318144 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 69}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Selecting Text\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318145 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 70}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Selection By Dr\hich\af4\dbch\af4\loch\f4 agging\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318146 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 70}}}{\par \hich\af4\dbch\af4\loch\f4 Selecting Lines\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318147 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 70}}}{\par \hich\af4\dbch\af4\loch\f4 Selecting the Entire Document\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318148 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 71}}}{\par \hich\af4\dbch\af4\loch\f4 Selecting Words\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318149 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100340039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 71}}}{\par \hich\af4\dbch\af4\loch\f4 Extending a Selection\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318150 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 71}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Split Screen\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318151 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 72}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Entering Text\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318152 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 72}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Special Keys\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318153 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 73}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The Return Key\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318154 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 73}}}{\par \hich\af4\dbch\af4\loch\f4 Delete Key\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318155 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 73}}}{\par \hich\af4\dbch\af4\loch\f4 Tab Key\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495\hich\af4\dbch\af4\loch\f4 318156 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 73}}}{\par \hich\af4\dbch\af4\loch\f4 The Arrow Keys\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318157 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 73}}}{\par \hich\af4\dbch\af4\loch\f4 Screen Moves\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318158 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 74}}}{\par \hich\af4\dbch\af4\loch\f4 Word Tabbing\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318159 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100350039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 74}}}{\par \hich\af4\dbch\af4\loch\f4 Moving to the Start or End of a Line\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318160 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 74}}}{\par \hich\af4\dbch\af4\loch\f4 Moving Within the File\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGER\hich\af4\dbch\af4\loch\f4 EF _Toc495318161 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 74}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Ruler\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318162 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 75}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Default tab stops\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318163 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 75}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The File Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318164 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 76}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 New\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318165 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 76}}}{\par \hich\af4\dbch\af4\loch\f4 Open\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318166 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 76}}}{\par \hich\af4\dbch\af4\loch\f4 Close\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGERE\hich\af4\dbch\af4\loch\f4 F _Toc495318167 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 76}}}{\par \hich\af4\dbch\af4\loch\f4 Save\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318168 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 76}}}{\par \hich\af4\dbch\af4\loch\f4 Save As\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318169 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100360039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 77}}}{\par \hich\af4\dbch\af4\loch\f4 Revert To Saved\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318170 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 77}}}{\par \hich\af4\dbch\af4\loch\f4 Page Setup\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318171 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 77}}}{\par \hich\af4\dbch\af4\loch\f4 Print\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318172 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 77}}}{\par \hich\af4\dbch\af4\loch\f4 Quit\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4\hich\af4\dbch\af4\loch\f4 95318173 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 77}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Edit Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318174 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 78}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Undo\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318175 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 78}}}{\par \hich\af4\dbch\af4\loch\f4 Cut\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318176 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 78}}}{\par \hich\af4\dbch\af4\loch\f4 Copy\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318177 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 78}}}{\par \hich\af4\dbch\af4\loch\f4 Paste\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318178 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 78}}}{\par \hich\af4\dbch\af4\loch\f4 Clear\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318179 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100370039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 79}}}{\par \hich\af4\dbch\af4\loch\f4 Select All\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318180 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 79}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Windows Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318181 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 79}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Tile\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318182 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 79}}}{\par \hich\af4\dbch\af4\loch\f4 Stack\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318183 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 80}}}{\par \hich\af4\dbch\af4\loch\f4 Shell Window\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318184 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 80}}}{\par \hich\af4\dbch\af4\loch\f4 Graphics Window\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318185\hich\af4\dbch\af4\loch\f4  \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 80}}}{\par \hich\af4\dbch\af4\loch\f4 Variables Window\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318186 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 80}}}{\par \hich\af4\dbch\af4\loch\f4 List of Window Names\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318187 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 82}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Find Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318188 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 82}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Find\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318189 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100380039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 83}}}{\par \hich\af4\dbch\af4\loch\f4 Find Same\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318190 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 84}}}{\par \hich\af4\dbch\af4\loch\f4 Display Select\hich\af4\dbch\af4\loch\f4 ion\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318191 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 84}}}{\par \hich\af4\dbch\af4\loch\f4 Replace\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318192 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 84}}}{\par \hich\af4\dbch\af4\loch\f4 Replace Same\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318193 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 85}}}{\par \hich\af4\dbch\af4\loch\f4 Goto\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318194 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 85}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Extras Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318195 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 85}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Shift Left\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318196 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 86}}}{\par \hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 hift Right\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318197 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 86}}}{\par \hich\af4\dbch\af4\loch\f4 Delete to End of Line\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318198 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 86}}}{\par \hich\af4\dbch\af4\loch\f4 Join Lines\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318199 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003100390039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 86}}}{\par \hich\af4\dbch\af4\loch\f4 Insert Line\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318200 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 86}}}{\par \hich\af4\dbch\af4\loch\f4 Delete Line\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318201 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 87}}}{\par \hich\af4\dbch\af4\loch\f4 Auto Indent\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _\hich\af4\dbch\af4\loch\f4 Toc495318202 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 87}}}{\par \hich\af4\dbch\af4\loch\f4 Over Strike\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318203 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 87}}}{\par \hich\af4\dbch\af4\loch\f4 Show Ruler\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318204 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 87}}}{\par \hich\af4\dbch\af4\loch\f4 Auto Save\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318205 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 88}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Run Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318206 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 88}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Compile to Memory\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318207 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 88}}}{\par \hich\af4\dbch\af4\loch\f4 Compi\hich\af4\dbch\af4\loch\f4 le to Disk\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318208 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 89}}}{\par \hich\af4\dbch\af4\loch\f4 Check for Errors\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318209 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200300039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 90}}}{\par \hich\af4\dbch\af4\loch\f4 Compile\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318210 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 90}}}{\par \hich\af4\dbch\af4\loch\f4 Link\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318211 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 92}}}{\par \hich\af4\dbch\af4\loch\f4 Execute\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318212 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 94}}}{\par \hich\af4\dbch\af4\loch\f4 Execute Options...\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318213\hich\af4\dbch\af4\loch\f4  \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 94}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Debug Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318214 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 95}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Step\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318215 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 95}}}{\par \hich\af4\dbch\af4\loch\f4 Step Through\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318216 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 96}}}{\par \hich\af4\dbch\af4\loch\f4 Trace\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318217 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 96}}}{\par \hich\af4\dbch\af4\loch\f4 Go\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318218 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 96}}}{\par \hich\af4\dbch\af4\loch\f4 Go to Next Return\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4953182\hich\af4\dbch\af4\loch\f4 19 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200310039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 96}}}{\par \hich\af4\dbch\af4\loch\f4 Stop\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318220 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 97}}}{\par \hich\af4\dbch\af4\loch\f4 Profile\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318221 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 97}}}{\par \hich\af4\dbch\af4\loch\f4 Set/Clear Break Points\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318222 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 97}}}{\par \hich\af4\dbch\af4\loch\f4 Set/Clear Auto-Go\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318223 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 98}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Languages Menu\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318224 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 98}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Shell\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318225 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 98}}}{\par \hich\af4\dbch\af4\loch\f4 Installed Languages\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318226 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 99}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The SYSTABS File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318227 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 99}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Setting up Defaults\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318228 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 100}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 8 - The Command Processor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318229 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200320039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 103}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Line Editor\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318230 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 103}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Command Name Expansion\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318231 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 103}}}{\par \hich\af4\dbch\af4\loch\f4 Multiple Commands\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318232 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 105}}}{\par \hich\af4\dbch\af4\loch\f4 Scrolling Through Commands\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318233 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 105}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Command Types\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318\hich\af4\dbch\af4\loch\f4 234 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 106}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Built-in Commands\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318235 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 106}}}{\par \hich\af4\dbch\af4\loch\f4 Utilities\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318236 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 106}}}{\par \hich\af4\dbch\af4\loch\f4 Language Names\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318237 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 106}}}{\par \hich\af4\dbch\af4\loch\f4 Program Names\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318238 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 107}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Standard Prefixes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318239 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200330039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 107}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Prefixes 0 to 7\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318240 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 110}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 File Names\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318241 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 110}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Wildcards\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318242 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 112}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Types of Text Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318243 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 112}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 EXEC Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318244 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 113}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Passing Paramet\hich\af4\dbch\af4\loch\f4 ers Into EXEC Files\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318245 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 114}}}{\par \hich\af4\dbch\af4\loch\f4 Programming EXEC Files\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318246 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 114}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Redirecting Input and Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318247 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 118}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The .PRINTER Driver\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318248 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 119}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The .NULL Driver\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _\hich\af4\dbch\af4\loch\f4 Toc495318249 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200340039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 122}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Pipelines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318250 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 122}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Command Table\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318251 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 123}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Command And Utility Reference\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318252 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 125}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ALIAS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318253 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 127}}}{\par \hich\af4\dbch\af4\loch\f4 ASM65816\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318254 \\\hich\af4\dbch\af4\loch\f4 h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 128}}}{\par \hich\af4\dbch\af4\loch\f4 ASML\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318255 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 128}}}{\par \hich\af4\dbch\af4\loch\f4 ASMLG\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318256 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 132}}}{\par \hich\af4\dbch\af4\loch\f4 ASSEMBLE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318257 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 132}}}{\par \hich\af4\dbch\af4\loch\f4 BREAK\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318258 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 132}}}{\par \hich\af4\dbch\af4\loch\f4 CAT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318259 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200350039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 133}}}{\par \hich\af4\dbch\af4\loch\f4 CATALOG\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318260 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 133}}}{\par \hich\af4\dbch\af4\loch\f4 CC\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318261 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 1\hich\af4\dbch\af4\loch\f4 36}}}{\par \hich\af4\dbch\af4\loch\f4 CHANGE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318262 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 136}}}{\par \hich\af4\dbch\af4\loch\f4 CMPL\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318263 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 137}}}{\par \hich\af4\dbch\af4\loch\f4 CMPLG\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318264 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 137}}}{\par \hich\af4\dbch\af4\loch\f4 COMMANDS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318265 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 137}}}{\par \hich\af4\dbch\af4\loch\f4 COMPACT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318266 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 138}}}{\par \hich\af4\dbch\af4\loch\f4 COMPILE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF \hich\af4\dbch\af4\loch\f4 _Toc495318267 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 138}}}{\par \hich\af4\dbch\af4\loch\f4 COMPRESS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318268 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 139}}}{\par \hich\af4\dbch\af4\loch\f4 CONTINUE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318269 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200360039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 139}}}{\par \hich\af4\dbch\af4\loch\f4 COPY\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318270 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 140}}}{\par \hich\af4\dbch\af4\loch\f4 CREATE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318271 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 142}}}{\par \hich\af4\dbch\af4\loch\f4 CRUNCH\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318272 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 142}}}{\par \hich\af4\dbch\af4\loch\f4 DELETE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4953\hich\af4\dbch\af4\loch\f4 18273 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 142}}}{\par \hich\af4\dbch\af4\loch\f4 DEREZ\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318274 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 143}}}{\par \hich\af4\dbch\af4\loch\f4 DEVICES\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318275 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 145}}}{\par \hich\af4\dbch\af4\loch\f4 DISABLE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318276 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 146}}}{\par \hich\af4\dbch\af4\loch\f4 DISKCHECK\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318277 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 147}}}{\par \hich\af4\dbch\af4\loch\f4 ECHO\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318278 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 148}}}{\par \hich\af4\dbch\af4\loch\f4 EDIT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318279 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200370039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 148}}}{\par \hich\af4\dbch\af4\loch\f4 ELSE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318280 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 149}}}{\par \hich\af4\dbch\af4\loch\f4 ENABLE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318281 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 149}}}{\par \hich\af4\dbch\af4\loch\f4 ENTAB\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318282 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 149}}}{\par \hich\af4\dbch\af4\loch\f4 END\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318283 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 150}}}{\par \hich\af4\dbch\af4\loch\f4 ERASE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318284 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 150}}}{\par \hich\af4\dbch\af4\loch\f4 EXEC\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318285 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 150}}}{\par \hich\af4\dbch\af4\loch\f4 EXECUTE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAG\hich\af4\dbch\af4\loch\f4 EREF _Toc495318286 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 151}}}{\par \hich\af4\dbch\af4\loch\f4 EXISTS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318287 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 151}}}{\par \hich\af4\dbch\af4\loch\f4 EXIT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318288 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 151}}}{\par \hich\af4\dbch\af4\loch\f4 EXPORT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318289 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200380039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 152}}}{\par \hich\af4\dbch\af4\loch\f4 EXPRESS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318290 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 152}}}{\par \hich\af4\dbch\af4\loch\f4 FILETYPE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318291 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 153}}}{\par \hich\af4\dbch\af4\loch\f4 FOR\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495\hich\af4\dbch\af4\loch\f4 318292 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 155}}}{\par \hich\af4\dbch\af4\loch\f4 HELP\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318293 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 155}}}{\par \hich\af4\dbch\af4\loch\f4 HISTORY\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318294 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 156}}}{\par \hich\af4\dbch\af4\loch\f4 HOME\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318295 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 156}}}{\par \hich\af4\dbch\af4\loch\f4 IF\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318296 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 156}}}{\par \hich\af4\dbch\af4\loch\f4 INIT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318297 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 157}}}{\par \hich\af4\dbch\af4\loch\f4 INPUT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318298 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 158}}}{\par \hich\af4\dbch\af4\loch\f4 LIN\hich\af4\dbch\af4\loch\f4 K\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318299 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003200390039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 158}}}{\par \hich\af4\dbch\af4\loch\f4 LINKER\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318300 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 160}}}{\par \hich\af4\dbch\af4\loch\f4 LOOP\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318301 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 160}}}{\par \hich\af4\dbch\af4\loch\f4 MAKELIB\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318302 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 161}}}{\par \hich\af4\dbch\af4\loch\f4 MOVE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318303 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 162}}}{\par \hich\af4\dbch\af4\loch\f4 NEWER\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318304 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 163}}}{\par \hich\af4\dbch\af4\loch\f4 PASCAL\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _T\hich\af4\dbch\af4\loch\f4 oc495318305 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 164}}}{\par \hich\af4\dbch\af4\loch\f4 PREFIX\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318306 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 164}}}{\par \hich\af4\dbch\af4\loch\f4 PRODOS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318307 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 165}}}{\par \hich\af4\dbch\af4\loch\f4 QUIT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318308 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 165}}}{\par \hich\af4\dbch\af4\loch\f4 RENAME\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318309 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300300039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 165}}}{\par \hich\af4\dbch\af4\loch\f4 RESEQUAL\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318310 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 166}}}{\par \hich\af4\dbch\af4\loch\f4 REZ\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318311 \\\hich\af4\dbch\af4\loch\f4 h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 167}}}{\par \hich\af4\dbch\af4\loch\f4 RUN\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318312 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 167}}}{\par \hich\af4\dbch\af4\loch\f4 SET\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318313 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 167}}}{\par \hich\af4\dbch\af4\loch\f4 SHOW\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318314 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 168}}}{\par \hich\af4\dbch\af4\loch\f4 SHUTDOWN\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318315 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 168}}}{\par \hich\af4\dbch\af4\loch\f4 SWITCH\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318316 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 169}}}{\par \hich\af4\dbch\af4\loch\f4 TEXT\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318317 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 170}}}{\par \hich\af4\dbch\af4\loch\f4 TOUCH\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  P\hich\af4\dbch\af4\loch\f4 AGEREF _Toc495318318 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 170}}}{\par \hich\af4\dbch\af4\loch\f4 TYPE\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318319 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300310039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 170}}}{\par \hich\af4\dbch\af4\loch\f4 UNALIAS\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318320 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 171}}}{\par \hich\af4\dbch\af4\loch\f4 UNSET\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318321 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 171}}}{\par \hich\af4\dbch\af4\loch\f4 *\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318322 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 172}}}{\par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 9 \endash  The Text Editor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318323 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 173}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Modes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318324 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 173}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Insert\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318325 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 173}}}{\par \hich\af4\dbch\af4\loch\f4 Escape\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318326 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 174}}}{\par \hich\af4\dbch\af4\loch\f4 Auto Indent\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318327 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 174}}}{\par \hich\af4\dbch\af4\loch\f4 Select Text\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318328 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 174}}}{\par \hich\af4\dbch\af4\loch\f4 Hidden Characters\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318329 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300320039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 175}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318330 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 176}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Using Editor Dialogs\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318331 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 177}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Using the Mouse\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318332 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 179}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Command Descriptions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318333 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 179}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Setting Editor Defaults\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318334 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 192}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 10 - The Resource Compiler\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318335 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 195}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Overview\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318336 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 195}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Resource Decompiler\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318337 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 195}}}{\par \hich\af4\dbch\af4\loch\f4 Type Declaration Files\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318338 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 195}}}{\par \hich\af4\dbch\af4\loch\f4 Using the Resource Compile\hich\af4\dbch\af4\loch\f4 r and DeRez\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318339 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300330039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 196}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Structure of a Resource Description File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318340 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 196}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Sample Resource Description File\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318341 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 197}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Resource Description Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318342 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 198}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Sy\hich\af4\dbch\af4\loch\f4 ntax Notation\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318343 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 198}}}{\par \hich\af4\dbch\af4\loch\f4 Include \endash  Include Resources from Another File\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318344 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 199}}}{\par \hich\af4\dbch\af4\loch\f4 Read \endash  Read Data as a Resource\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318345 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 201}}}{\par \hich\af4\dbch\af4\loch\f4 Data \endash  Specify Raw Data\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318346 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 20\hich\af4\dbch\af4\loch\f4 1}}}{\par \hich\af4\dbch\af4\loch\f4 Type \endash \hich\af4\dbch\af4\loch\f4  Declare Resource Type\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318347 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 202}}}{\par \hich\af4\dbch\af4\loch\f4 Symbol Definitions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318348 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 210}}}{\par \hich\af4\dbch\af4\loch\f4 Delete \endash  Delete a Resource\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318349 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300340039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 211}}}{\par \hich\af4\dbch\af4\loch\f4 Change \endash  Change a Resource's Vital Information\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318350 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 211}}}{\par \hich\af4\dbch\af4\loch\f4 Res\hich\af4\dbch\af4\loch\f4 ource \endash  Specify Resource Data\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318351 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 212}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Labels\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318352 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 214}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Built-in Functions to Access Resource Data\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318353 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 215}}}{\par \hich\af4\dbch\af4\loch\f4 Declaring Labels Within Arrays\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318354 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 216}}}{\par \hich\af4\dbch\af4\loch\f4 Label Lim\hich\af4\dbch\af4\loch\f4 itations\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318355 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 216}}}{\par \hich\af4\dbch\af4\loch\f4 An Example Using Labels\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318356 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 217}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Preprocessor Directives\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318357 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 218}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Variable Definitions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318358 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 218}}}{\par \hich\af4\dbch\af4\loch\f4 If-Then-Else Processing\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4953\hich\af4\dbch\af4\loch\f4 18359 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300350039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 219}}}{\par \hich\af4\dbch\af4\loch\f4 Printf Directive\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318360 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 220}}}{\par \hich\af4\dbch\af4\loch\f4 Include Directive\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318361 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 222}}}{\par \hich\af4\dbch\af4\loch\f4 Append Directive\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318362 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 222}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Resource Description Syntax\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318363 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 223}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Numbers and Literals\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  P\hich\af4\dbch\af4\loch\f4 AGEREF _Toc495318364 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 224}}}{\par \hich\af4\dbch\af4\loch\f4 Expressions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318365 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 225}}}{\par \hich\af4\dbch\af4\loch\f4 Variables and Functions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318366 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 225}}}{\par \hich\af4\dbch\af4\loch\f4 Strings\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318367 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 227}}}{\par \hich\af4\dbch\af4\loch\f4 Escape Characters\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318368 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 228}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Using the Resource Compiler\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318369 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300360039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 230}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Resource Forks and Data Forks\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318370 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 230}}}{\par \hich\af4\dbch\af4\loch\f4 Rez Options\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318371 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 230}}}{\par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 11 \endash  Program Symbols\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318372 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 233}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Identifiers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318373 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 233}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Re\hich\af4\dbch\af4\loch\f4 served Words\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318374 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 233}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Reserved Symbols\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318375 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 233}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Continuation Lines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318376 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 234}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Constants\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318377 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 235}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Decimal Integers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318378 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 235}}}{\par \hich\af4\dbch\af4\loch\f4 Octal Inte\hich\af4\dbch\af4\loch\f4 gers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318379 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300370039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 235}}}{\par \hich\af4\dbch\af4\loch\f4 Hexadecimal Integers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318380 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 236}}}{\par \hich\af4\dbch\af4\loch\f4 Character Constants\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318381 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 237}}}{\par \hich\af4\dbch\af4\loch\f4 String Constants\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318382 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 237}}}{\par \hich\af4\dbch\af4\loch\f4 Escape Sequences\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318383 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 239}}}{\par \hich\af4\dbch\af4\loch\f4 Real N\hich\af4\dbch\af4\loch\f4 umbers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318384 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 240}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 White Space\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318385 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 241}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Comments\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318386 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 241}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 12 \endash  The Preprocessor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318387 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 243}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Syntax\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318388 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 243}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Preprocessor Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318389 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300380039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 243}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Entering Macros from the Command Line\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318390 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 247}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Including Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318391 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 248}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Precompiled Headers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318392 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 249}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Conditional Compilation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318393\hich\af4\dbch\af4\loch\f4  \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 250}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Line Numbers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318394 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 253}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Flagging Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318395 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 254}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Pragmas\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318396 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 254}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 cda\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318397 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 254}}}{\par \hich\af4\dbch\af4\loch\f4 cdev\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318398 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 255}}}{\par \hich\af4\dbch\af4\loch\f4 databank\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318\hich\af4\dbch\af4\loch\f4 399 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003300390039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 255}}}{\par \hich\af4\dbch\af4\loch\f4 debug\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318400 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 256}}}{\par \hich\af4\dbch\af4\loch\f4 expand\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318401 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 257}}}{\par \hich\af4\dbch\af4\loch\f4 float\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318402 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 258}}}{\par \hich\af4\dbch\af4\loch\f4 ignore\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318403 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 258}}}{\par \hich\af4\dbch\af4\loch\f4 keep\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318404 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 259}}}{\par \hich\af4\dbch\af4\loch\f4 lint\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318405 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 259}}}{\par \hich\af4\dbch\af4\loch\f4 me\hich\af4\dbch\af4\loch\f4 morymodel\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318406 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 260}}}{\par \hich\af4\dbch\af4\loch\f4 nba\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318407 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 261}}}{\par \hich\af4\dbch\af4\loch\f4 nda\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318408 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 262}}}{\par \hich\af4\dbch\af4\loch\f4 noroot\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318409 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400300039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 263}}}{\par \hich\af4\dbch\af4\loch\f4 optimize\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318410 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 263}}}{\par \hich\af4\dbch\af4\loch\f4 path\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318411 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 265}}}{\par \hich\af4\dbch\af4\loch\f4 rtl\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF\hich\af4\dbch\af4\loch\f4  _Toc495318412 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 266}}}{\par \hich\af4\dbch\af4\loch\f4 stacksize\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318413 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 266}}}{\par \hich\af4\dbch\af4\loch\f4 toolparms\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318414 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 267}}}{\par \hich\af4\dbch\af4\loch\f4 xcmd\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318415 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 267}}}{\par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 13 \endash  Basic Data Types\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318416 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 269}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Integers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318417 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 269}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Reals\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318418 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 269}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Pointers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318419 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400310039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 270}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 14 \endash  C Programs\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318420 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 271}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Anatomy of a C Program\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318421 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 271}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Function main\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318422 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 271}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Argc and Argv\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318423 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 271}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Separate Compilation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318424 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 272}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Interface Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318425 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 272}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 15 \endash  Declarations\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318426 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 275}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Declarations\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318427 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 275}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Storage Classes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318428 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 275}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Type Specifiers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318429 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400320039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 277}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Enumerations\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318430 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 279}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Arrays\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318431 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 280}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Pointers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318432 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 282}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Structures\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF\hich\af4\dbch\af4\loch\f4  _Toc495318433 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 283}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Unions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318434 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 286}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Initializers\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318435 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 287}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Constructing Complex Data Types\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318436 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 289}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Scope and Visibility\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318437 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 290}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 16 \endash  Functions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318438 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 293}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Declaring a Function\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318439 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400330039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 293}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318440 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 295}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Traditional C Parameters\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318441 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 295}}}{\par \hich\af4\dbch\af4\loch\f4 Function Prototypes\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318442 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 296}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Variable\hich\af4\dbch\af4\loch\f4  Length Parameter Lists\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318443 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 297}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Common Mistakes With Parameters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318444 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 298}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 How Parameters are Passed\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318445 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 298}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Returning Values from Functions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318446 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 300}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Pascal\hich\af4\dbch\af4\loch\f4  Functions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318447 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 300}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 17 \endash  Expressions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318448 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 303}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Syntax\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318449 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400340039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 303}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Operator Precedence\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318450 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 304}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Terms\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318451 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 305}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 L-values\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGERE\hich\af4\dbch\af4\loch\f4 F _Toc495318452 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 305}}}{\par \hich\af4\dbch\af4\loch\f4 Constants\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318453 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 305}}}{\par \hich\af4\dbch\af4\loch\f4 Simple Variables\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318454 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 305}}}{\par \hich\af4\dbch\af4\loch\f4 Arrays\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318455 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 305}}}{\par \hich\af4\dbch\af4\loch\f4 Function Calls\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318456 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 307}}}{\par \hich\af4\dbch\af4\loch\f4 Component Selection\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318457 \\\hich\af4\dbch\af4\loch\f4 h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 308}}}{\par \hich\af4\dbch\af4\loch\f4 Parenthesized Expressions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318458 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 309}}}{\par \hich\af4\dbch\af4\loch\f4 Postincrement and Postdecrement\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318459 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400350039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 309}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Math Operators\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318460 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 310}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Addition\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318461 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 310}}}{\par \hich\af4\dbch\af4\loch\f4 Subtraction\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495\hich\af4\dbch\af4\loch\f4 318462 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 310}}}{\par \hich\af4\dbch\af4\loch\f4 Multiplication\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318463 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 311}}}{\par \hich\af4\dbch\af4\loch\f4 Division\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318464 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 311}}}{\par \hich\af4\dbch\af4\loch\f4 Remainder\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318465 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 312}}}{\par \hich\af4\dbch\af4\loch\f4 Unary Subtraction\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318466 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 312}}}{\par \hich\af4\dbch\af4\loch\f4 Unary Addition\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318467 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 312}}}{\par \hich\af4\dbch\af4\loch\f4 Pr\hich\af4\dbch\af4\loch\f4 efix Increment\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318468 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 312}}}{\par \hich\af4\dbch\af4\loch\f4 Prefix Decrement\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318469 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400360039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 313}}}{\par \hich\af4\dbch\af4\loch\f4 Sizeof Operator\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318470 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 313}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Comparison Operations\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318471 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 314}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Logical Operations\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318472 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 315}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Bit Manipulation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318473 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 315}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Assignment Operators\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318474 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 316}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Simple Assignment\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318475 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 316}}}{\par \hich\af4\dbch\af4\loch\f4 Compound Assignment\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318476 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 317}}}{\par \hich\af4\dbch\af4\loch\f4 Multiple Assignments\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318\hich\af4\dbch\af4\loch\f4 477 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 318}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Pointers and Addresses\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318478 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 318}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Sequential Evaluation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318479 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400370039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 319}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Conditional Expressions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318480 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 319}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Automatic Type Conversions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318481 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 320}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Assignment\hich\af4\dbch\af4\loch\f4  Conversions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318482 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 320}}}{\par \hich\af4\dbch\af4\loch\f4 Function Argument Conversions\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318483 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 321}}}{\par \hich\af4\dbch\af4\loch\f4 Unary Conversion Rules\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318484 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 321}}}{\par \hich\af4\dbch\af4\loch\f4 Binary Conversion Rules\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318485 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 321}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Type Casting\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495\hich\af4\dbch\af4\loch\f4 318486 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 322}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Converting Integers to Integers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318487 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 322}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Floating-Point Values to Integers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318488 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 322}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Pointers to Integers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318489 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400380039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 322}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Floating-Point Va\hich\af4\dbch\af4\loch\f4 lues to Other Floating-Point Formats\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318490 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 323}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Integers to Floating-Point Values\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318491 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 323}}}{\par \hich\af4\dbch\af4\loch\f4 Converting to and from Enumerations\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318492 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 323}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Pointers to Pointers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PA\hich\af4\dbch\af4\loch\f4 GEREF _Toc495318493 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 323}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Integers to Pointers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318494 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 324}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Arrays to Pointers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318495 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390035000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 324}}}{\par \hich\af4\dbch\af4\loch\f4 Converting Functions to Pointers\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318496 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 324}}}{\par \hich\af4\dbch\af4\loch\f4 Converting to Void\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF \hich\af4\dbch\af4\loch\f4 _Toc495318497 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 324}}}{\par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 18 \endash  Statements\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318498 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 325}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Compound Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318499 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003400390039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 325}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Null Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318500 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 326}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Expression Statements\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318501 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 326}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 While Statemen\hich\af4\dbch\af4\loch\f4 t\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318502 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 327}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Do Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318503 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 327}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 For Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318504 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 327}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 If Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318505 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 328}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Goto Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318506 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 329}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Switch Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _T\hich\af4\dbch\af4\loch\f4 oc495318507 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 329}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Break and Continue\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318508 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 330}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Return Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318509 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500300039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 331}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Segment Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318510 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 332}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Asm Statement\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318511 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 333}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 19 \endash  Libraries\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGER\hich\af4\dbch\af4\loch\f4 EF _Toc495318512 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 337}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Overview of the Libraries\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318513 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 337}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Apple IIGS Toolbox\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318514 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 337}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 System Functions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318515 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 337}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Standard C Libraries\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318516 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 342}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Append\hich\af4\dbch\af4\loch\f4 ix A \endash  Error Messages\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318517 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 4\hich\af4\dbch\af4\loch\f4 09}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Compilation Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318518 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 409}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Terminal Compilation Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318519 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500310039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 423}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Linking Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318520 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 424}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Linker Error Levels\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49\hich\af4\dbch\af4\loch\f4 5318521 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 424}}}{\par \hich\af4\dbch\af4\loch\f4 Recoverable Linker Errors\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318522 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 425}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Terminal Linker Errors\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318523 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 429}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Appendix B \endash  Custom Installations\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318524 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320034000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 433}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Installer Scripts\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318525 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 433}}}{\lang1024 \par }\pard\plain \s18\li1440\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 L\hich\af4\dbch\af4\loch\f4 ow Memory\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318526 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 433}}}{\par \hich\af4\dbch\af4\loch\f4 New System\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318527 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 433}}}{\par \hich\af4\dbch\af4\loch\f4 New Text System\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318528 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320038000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 434}}}{\par \hich\af4\dbch\af4\loch\f4 ORCA Icons\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318529 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500320039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 434}}}{\par \hich\af4\dbch\af4\loch\f4 ORCA Pascal, C, Asm Libraries\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318530 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 435}}}{\par \hich\af4\dbch\af4\loch\f4 Update S\hich\af4\dbch\af4\loch\f4 ystem\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318531 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330031000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 435}}}{\par \hich\af4\dbch\af4\loch\f4 Update Text System\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318532 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330032000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 435}}}{\par \hich\af4\dbch\af4\loch\f4 Update Text System, No Editor\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318533 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 436}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 RAM Disks\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318534 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 436}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Details About Configuration\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318535 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 436}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Appendix C \endash  Run-Time License\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318536 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330036000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 441}}}{\par \hich\af4\dbch\af4\loch\f4 Appendix D \endash  Console Control Codes\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318537 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330037000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 443}}}{\par }\pard\plain \s17\li720\sl223\slmult1\widctlpar\tqr\tx7910\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Beep the Speaker\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318538 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 443}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Cursor Control\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318539 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500330039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 443}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Clearing the Scr\hich\af4\dbch\af4\loch\f4 een\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318540 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 446}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Inverse Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318541 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500340031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 446}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 MouseText\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318542 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500340032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 447}}}{\lang1024 \par }\pard\plain \s15\sb200\sl223\slmult1\keepn\widctlpar\tqr\tx7910\adjustright \fs20\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Index\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc495318543 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390035003300310038003500340033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 449}}}{\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid }}\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerl \pard\plain \s25\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 User's Manual\par }}{\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter \hich\af5\dbch\af4\loch\f5 1:  Introducing ORCA/C\par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs29\fs20 \hich\af5\dbch\af4\loch\f5  PAGE }}{\fldrslt {\cs29\fs20\lang1024 \hich\af5\dbch\af4\loch\f5 449}}}{\fs20 \par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc494638387}{\*\bkmkstart _Toc495318064}\hich\af4\dbch\af4\loch\f4 Chapter 1 \endash  Introducing ORCA/C{\*\bkmkend _Toc494638387}{\*\bkmkend _Toc495318064} \par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318065}\hich\af4\dbch\af4\loch\f4 ORCA/C{\*\bkmkend _Toc495318065}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Welcome to ORCA/C!  ORCA/C is a complet\hich\af4\dbch\af4\loch\f4 e, stand-alone program containing all of the software you need to write professional quality programs on the Apple IIGS.  The package includes a fast, easy to use C compiler, a linker that lets you create and use libraries, or even mix C programs with sub\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 outines written in other languages, and two complete development environments.  This manual is based on the most popular of the two development environments, which we refer to as the desktop development environment}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 desktop development environment}}}{\hich\af4\dbch\af4\loch\f4 . \hich\af4\dbch\af4\loch\f4  The desktop development environment gives you fast graphics and mouse based editing.  The editor supports files up to the size of available memory; split screen; search and replace; cut, copy and paste; the ability to edit several files at one time; and \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 everal specialized editing features.  The desktop development environment also features a built-in debugger.  This source level debugger lets you debug C programs, showing you what line is executing and what the values of the variables are.  It supports m\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ny advanced debugging features like step-and-trace, break points, and profiling.\par \hich\af4\dbch\af4\loch\f4 The second development environment is a UNIX-style text based development}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text based development}}}{\hich\af4\dbch\af4\loch\f4  environment.  This is an updated version of the same environment sold \hich\af4\dbch\af4\loch\f4 by Apple Computer as Apple Programmer's Workshop (APW}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW}}}{\hich\af4\dbch\af4\loch\f4 ).  Many programmers who program on a daily basis prefer text environments for their speed and power.  In later chapters, you will learn how to set up and use the text based environment.  At \hich\af4\dbch\af4\loch\f4 least while you are getting started, we recommend using the desktop development environment unless you have a compelling reason to use the text environment.  You might want to consider the text environment if you are working on a computer without much mem\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ry, or if you are used to text environments and prefer them over desktop programs.\par \hich\af4\dbch\af4\loch\f4 In later chapters, as we explore the capabilities of the desktop environment, you will also find that the power of the text based shell is not lost to those who prefer the d\hich\af4\dbch\af4\loch\f4 esktop environment.  The central part of the text based environment is a powerful, programmable shell}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4 .  The shell is a program that gives you control over the files on your disks, the process of compiling programs, and where program output go\hich\af4\dbch\af4\loch\f4 es and input comes from.  You may have used simple shells before, like BASIC.SYSTEM, used with AppleSoft.  The ORCA shell shares many features with these simpler shells, but is much more powerful.\par \hich\af4\dbch\af4\loch\f4 After purchasing a new program, you would probably like to \hich\af4\dbch\af4\loch\f4 sit right down at your computer and try it out.  We encourage you to do just that, and in fact, this manual is designed to help you.  Before getting started, though, we would like to take some time to suggest how you should approach learning to use ORCA/C\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  since the best approach is different for different people.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318066}\hich\af4\dbch\af4\loch\f4 What You Need{\*\bkmkend _Toc495318066}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 To use ORCA/C, you will need an Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  with at least 1.125M of memory for ROM 3 machines, or 1.25M of memory with ROM 1 machines.  You will also need at least two disk drives, an\hich\af4\dbch\af4\loch\f4 d at least one of those must be a 3.5" disk drive.  To use all of the features and utilities included with ORCA/C, you will need at least 1.75M of memory and a hard disk; this is the minimum system for developing desktop programs.\par \hich\af4\dbch\af4\loch\f4 You do not need to do any\hich\af4\dbch\af4\loch\f4  initialization to use ORCA/C.  Simply insert the 3.5" disk labeled "Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  System Disk" in your 3.5" disk and boot your computer.  After a few moments, the Finder will appear.  Eject the boot disk and insert the disk labeled "Program Disk."  Execute O\hich\af4\dbch\af4\loch\f4 RCA.Sys16, which shows up with an orca whale icon.  If you are unfamiliar with the basic operation of your computer, refer to the manuals supplied with the computer itself.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 booting ORCA/C}}}{\par \hich\af4\dbch\af4\loch\f4 If you have a hard disks}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hard disks}}}{\hich\af4\dbch\af4\loch\f4 , or if you have \hich\af4\dbch\af4\loch\f4 two 3.5" floppies and would like to use ORCA/C with its programmable shell}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4  or in combination with another language, you will want to reconfigure your system.  The Extras Disk has a copy of Apple's installer, along with several scripts that wi\hich\af4\dbch\af4\loch\f4 ll help you install ORCA/C in a variety of different configurations; these are explained in detail in Appendix B.  While these installation instructions make it easy to install ORCA/C, the first few chapters of this manual assume you are running the progr\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 m as we ship it.  There may be a few points that will be confusing to you until you have learned a little more about ORCA/C; if you find that you are confused, you might try using the floppy-disk based system until you learn how to use ORCA/C.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318067}\hich\af4\dbch\af4\loch\f4 About the Ma\hich\af4\dbch\af4\loch\f4 nual{\*\bkmkend _Toc495318067}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This manual is your guide to ORCA/C.  To make it easy for you to learn about the system, this manual has been divided into three major sections.  The first part is called the "User's Guide."  It is a tutorial introduction to the development environmen\hich\af4\dbch\af4\loch\f4 t, showing you how to create C programs under ORCA.  The second part is called the "Environment Reference Manual."  It is a working reference to provide you with in-depth information about the development environment you will use to create and test C prog\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ams.  Part three is the "Language Reference Manual."  It contains information about the ORCA/C programming language.  This organization also makes it easy for you to skip sections that cover material that you already know.  For example, the ORCA languages\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 are unique on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  in that a single development environment can be used with many different languages.  If you have already used the development environment with another ORCA language, you can skip the sections that cover the environment, and con\hich\af4\dbch\af4\loch\f4 centrate on the C programming language.\par \hich\af4\dbch\af4\loch\f4 While this manual will teach you how to use ORCA/C to write and test programs, it does not teach you the basics of the language itself.  Basic concepts about programming in C are necessary to create useful, efficient\hich\af4\dbch\af4\loch\f4  programs.  If you are new to C, you can start with our Learn to Program in C course, which is written specifically for ORCA/C on the Apple IIGS.  You\rquote ll find some details about this course, and several other books that may be of interest, at the end of t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 is chapter.\par \hich\af4\dbch\af4\loch\f4 If you are new to ORCA, start at the beginning and carefully read the first three chapters of the "User's Manual," along with any portions of Chapter 4 that interest you.  These sections were written with you in mind.  Work all the examples, an\hich\af4\dbch\af4\loch\f4 d be sure that you understand the material in each chapter before leaving it.  ORCA is a big system, and like any sophisticated tool, it takes time to master.  On the other hand, you don't need to know everything there is to know about ORCA to create soph\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 sticated programs, and the desktop environment makes it easy to write and test the most common kinds of C programs.  The first four chapters give you enough information to create, test and debug C programs using ORCA/C.  After working through these chapte\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 s, you can skim through the rest of the manual to pick up more advanced features.\par \hich\af4\dbch\af4\loch\f4 From time to time, we make improvements to ORCA/C.  You should return your registration card}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 registration card}}}{\hich\af4\dbch\af4\loch\f4  so we can notify you when the software is improved.  We\hich\af4\dbch\af4\loch\f4  also notify our customers when we release new products, often offering substantial discounts to those who already have one of our programs.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318068}\hich\af4\dbch\af4\loch\f4 Visual Cues{\*\bkmkend _Toc495318068}}{\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Visual Cues}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 In order to tell the difference between information that this manual provides and c\hich\af4\dbch\af4\loch\f4 haracters that you type or characters that appear on your computer screen, special type faces are used.  When you are to enter characters, }{\b\fs18 \hich\af2\dbch\af4\loch\f2 the type face looks like this}{\hich\af4\dbch\af4\loch\f4 .  When you are supposed to notice characters displayed on the computer screen }{\fs18 \hich\af2\dbch\af4\loch\f2 they look\hich\af2\dbch\af4\loch\f2  like this}{\hich\af4\dbch\af4\loch\f4 . Named keys, such as the return key, are shown in outline, }{\outl \hich\af4\dbch\af4\loch\f4 like this}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318069}\hich\af4\dbch\af4\loch\f4 Other Books and Reference Materials{\*\bkmkend _Toc495318069}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If you are new to C, you will need to supplement this manual with a good beginner's book on the C programming language.  A companion course\hich\af4\dbch\af4\loch\f4  is available from the Byte Works that teaches you the C language and some basic techniques for programming.  The book is called }{\ul \hich\af4\dbch\af4\loch\f4 Learn to Program in C}{\hich\af4\dbch\af4\loch\f4 , and it has one distinct advantage over any other C programming book: it is written specifically for ORCA\hich\af4\dbch\af4\loch\f4 /C running on an Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  Another good way to find a book that suits you, especially if you already know a little C, is to visit a well-stocked bookstore and look through their selection.  There are literally hundreds of books that cover various aspect\hich\af4\dbch\af4\loch\f4 s of programming in C; which book you choose depends on your background.  A few of our favorites are listed below.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 learning C}}}{\par \hich\af4\dbch\af4\loch\f4 If you will be using the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  Toolbox to create your own desktop programs, you should have a copy of the }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 Toolbox Reference}{\hich\af4\dbch\af4\loch\f4 , volumes 1 through 3, and }{\ul \hich\af4\dbch\af4\loch\f4 Programmer\rquote s Reference for System 6.0}{\hich\af4\dbch\af4\loch\f4 .  These books do not teach you about the toolbox, but they are essential references.  For an introduction to the toolbox, we suggest }{\ul \hich\af4\dbch\af4\loch\f4 Toolbox Programming in C}{\hich\af4\dbch\af4\loch\f4 , which is a comp\hich\af4\dbch\af4\loch\f4 lete introduction to the world of toolbox programming.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox\:learning}}}{\par \par }\pard \s16\qj\li360\sl223\slmult1\widctlpar\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Learn to Program in C\par }{\hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \hich\af4\dbch\af4\loch\f4 Byte Works, Inc., Albuquerque, New Mexico\par \hich\af4\dbch\af4\loch\f4 This introductory C programming course is written specifically for ORCA/C running on an Apple \hich\af4\dbch\af4\loch\f4 II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  It contains hundreds of complete programs as examples, as well as problems with solutions.\par \par }\pard \s16\qj\li360\sl223\slmult1\keepn\widctlpar\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Toolbox Programming in C\par }{\hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \hich\af4\dbch\af4\loch\f4 Byte Works, Inc., Albuquerque, New Mexico\par }\pard \s16\qj\li360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 This is the only self-paced course available for programming the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.  Unlike the toolbox reference manuals, this is a course that teaches you how to write programs, not a catalog of the various toolbox calls available on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  It includes four disks filled with toolbox source code, as well as an abrid\hich\af4\dbch\af4\loch\f4 ged toolbox reference manual, so you won\rquote t have to buy all of the toolbox reference manuals right away.}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox\:learning}}}{\par \par }{\ul \hich\af4\dbch\af4\loch\f4 C:  A Reference Manual, Third Edition\par }{\hich\af4\dbch\af4\loch\f4 Samuel P. Harbison and Guy L. Steele Jr.\par \hich\af4\dbch\af4\loch\f4 Tartan Laboratories, Prentice-Hall, Inc., Engle\hich\af4\dbch\af4\loch\f4 wood Cliffs, New Jersey\par \hich\af4\dbch\af4\loch\f4 The definitive C reference manual.\par \par }{\ul \hich\af4\dbch\af4\loch\f4 The C Programming Language, Second Edition\par }{\hich\af4\dbch\af4\loch\f4 Brian W. Kerninghan and Dennis M. Ritchie\par \hich\af4\dbch\af4\loch\f4 Prentice-Hall Software Series, Englewood Cliffs, New Jersey\par \hich\af4\dbch\af4\loch\f4 The original C "Bible."  While this book is still a\hich\af4\dbch\af4\loch\f4  popular reference for the C language, we feel }{\ul \hich\af4\dbch\af4\loch\f4 C:  A Reference Manual}{\hich\af4\dbch\af4\loch\f4  does a better job of covering the language.\par \par }{\ul \hich\af4\dbch\af4\loch\f4 C Primer Plus\par }{\hich\af4\dbch\af4\loch\f4 Mitchell Wait, Stephen Prata, Donald Martin\par \hich\af4\dbch\af4\loch\f4 Howard W. Sams & Co., Inc., Indianapolis, Indiana\par \hich\af4\dbch\af4\loch\f4 An excellent primer for beginners\hich\af4\dbch\af4\loch\f4 .\par \par }{\ul \hich\af4\dbch\af4\loch\f4 Technical Introduction to the Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \par }{\hich\af4\dbch\af4\loch\f4 Apple Computer\par \hich\af4\dbch\af4\loch\f4 Addison-Wesley Publishing Company, Inc.  Reading, MA\par \hich\af4\dbch\af4\loch\f4 A good basic reference source for the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par \par }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Hardware Reference and Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Firmware Reference\par }{\hich\af4\dbch\af4\loch\f4 Apple Computer\par \hich\af4\dbch\af4\loch\f4 Addison-Wesley\hich\af4\dbch\af4\loch\f4  Publishing Company, Inc.  Reading, MA\par \hich\af4\dbch\af4\loch\f4 These manuals provide information on how the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  works.\par \par }{\ul \hich\af4\dbch\af4\loch\f4 Programmer's Introduction to the Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \par }{\hich\af4\dbch\af4\loch\f4 Apple Computer\par \hich\af4\dbch\af4\loch\f4 Addison-Wesley Publishing Company, Inc.  Reading, MA\par \hich\af4\dbch\af4\loch\f4 Provides programming concepts about the A\hich\af4\dbch\af4\loch\f4 pple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox\:learning}}}{\par \par }\pard \s16\qj\li360\sl223\slmult1\keepn\widctlpar\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Toolbox Reference: Volume I, Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Toolbox Reference: Volume II and Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Toolbox Reference: Volume III\par }{\hich\af4\dbch\af4\loch\f4 Apple Computer\par \hich\af4\dbch\af4\loch\f4 Addison-Wesley Publishing Company, Inc.  Reading, MA\par \hich\af4\dbch\af4\loch\f4 These volumes provide esse\hich\af4\dbch\af4\loch\f4 ntial information on how the tools work \endash  the parameters you need to set up and pass, the calls that are available, etc.  You must have these books to use the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox effectively.}{\pard\plain \s16\qj\li360\sl223\slmult1\keepn\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\pard\plain \s16\qj\li360\sl223\slmult1\keepn\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox\:reference manuals}}}{\hich\af4\dbch\af4\loch\f4 ;\par }\pard \s16\qj\li360\sl223\slmult1\widctlpar\adjustright {\par }{\ul \hich\af4\dbch\af4\loch\f4 Programmer\rquote s \hich\af4\dbch\af4\loch\f4 Reference for System 6.0}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Programmer\rquote s Reference for System 6.0}}}{\par \hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \hich\af4\dbch\af4\loch\f4 Byte Works, Inc., Albuquerque, New Mexico\par \hich\af4\dbch\af4\loch\f4 The first three volumes of the toolbox reference manual cover the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox up through System 5.  This book covers th\hich\af4\dbch\af4\loch\f4 e new features added to the toolbox and GS/OS in System 6.}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 System 6.0}}}{\par \par }{\ul \hich\af4\dbch\af4\loch\f4 GS/OS}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\ul\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v\ul \hich\af4\dbch\af4\loch\f4 GS/OS}}}{\ul \hich\af4\dbch\af4\loch\f4  Reference\par }{\hich\af4\dbch\af4\loch\f4 Apple Computer\par \hich\af4\dbch\af4\loch\f4 Addison-Wesley Publishing Company, Inc.  Reading, MA\par \hich\af4\dbch\af4\loch\f4 This manual provides information on the underlying disk operati\hich\af4\dbch\af4\loch\f4 ng system.  It is rarely needed for C programming, since C has library functions for dealing with disk files.\par \par }{\ul \hich\af4\dbch\af4\loch\f4 ORCA/M}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\ul\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v\ul \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\ul \hich\af4\dbch\af4\loch\f4   A Macro Assembler for the Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \par }{\hich\af4\dbch\af4\loch\f4 Mike Westerfield and Phil Montoya\par \hich\af4\dbch\af4\loch\f4 Byte Works, Inc., Albuquerque, NM\par \hich\af4\dbch\af4\loch\f4 ORCA/M is a macro\hich\af4\dbch\af4\loch\f4  assembler that can be used with ORCA/C.  Without changing programming environments, you can create a program in C, assembly language, or a combination of the two.  Chapter 5 will give you more information on how easy it is to mix the two languages.}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ssembly language}}}{\par \par }{\ul \hich\af4\dbch\af4\loch\f4 ORCA/Pascal}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\ul\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v\ul \hich\af4\dbch\af4\loch\f4 ORCA/Pascal}}}{\ul \par }{\hich\af4\dbch\af4\loch\f4 Mike Westerfield\par \hich\af4\dbch\af4\loch\f4 Byte Works, Inc., Albuquerque, NM\par \hich\af4\dbch\af4\loch\f4 ORCA/Pascal is a Pascal compiler which can be installed in the same environment as ORCA/C.  With the Pascal compiler installed, you can write C or Pasca\hich\af4\dbch\af4\loch\f4 l programs without switching environments.  You can also use library routines written in Pascal from your C programs.}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}{\txe see also ORCA/Pascal}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 2:  Exploring the System\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart index1}{\*\bkmkstart _Toc495318070}\hich\af4\dbch\af4\loch\f4 Chapter 2 \endash  Exploring the System{\*\bkmkend _Toc495318070}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318071}\hich\af4\dbch\af4\loch\f4 Backing Up ORCA/C{\*\bkmkend _Toc495318071}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This chapter is a hands-on introduction to OR\hich\af4\dbch\af4\loch\f4 CA/C.  You should read it while seated at your computer, and try the things suggested as we talk about them.  By the end of the chapter, you will have a good general feel for what C programming is like using ORCA/C.  The next two chapters introduce slight\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 y more advanced topics, including control of the compiler, and how to write programs for the various environments supported on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 As with any program, the first step you should take is to make a backup copy of the original disks.  To do this, \hich\af4\dbch\af4\loch\f4 you will need five blank disks and a copy program \endash  Apple's Finder, from the System Disk, will do the job, or you can use any other copy program if you have a personal favorite.  If you are unfamiliar with copying disks, refer to the documentation that ca\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 e with your computer.  As always, copies are for your personal use only.  Using the copies for any purpose besides backing up your program is a violation of federal copyright laws.  If you will be using ORCA/C in a classroom or work situation where more t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 an one copy is needed, please contact the publisher for details on our licensing policies.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 backing up the disks}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 copying disks}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 site license}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318072}\hich\af4\dbch\af4\loch\f4 The Bull's Eye Program{\*\bkmkend _Toc495318072}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If you have not yet made a backup, please do so at this time.  The ste\hich\af4\dbch\af4\loch\f4 ps we will take in this section will change the disk.\par \hich\af4\dbch\af4\loch\f4 The first thing we will do is run a simple sample program that draws a bull's eye on the screen.  We will use this program to get an overview of the system, and gradually build on this foundation by sup\hich\af4\dbch\af4\loch\f4 plying more and more details about what is happening.  Begin by making sure that all of the disks you are using are not write protected, since ORCA/C does write some information to disk as it prepares your programs.  The first step is to start ORCA/C.  To\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 do this, insert a copy of the disk labeled "Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  System Disk" into your computer and boot the disk, which will boot into Apple's Finder.  Eject this disk and insert the "Program Disk," and launch the program called ORCA.Sys16 \endash  the one that shows up \hich\af4\dbch\af4\loch\f4 with the orca whale icon.  After a few moments, you will see a standard desktop \endash  you are ready to start using ORCA/C.\par \hich\af4\dbch\af4\loch\f4 Go ahead and select Open from the File menu.  In the list of files you will see a folder called Samples.  Open this folder by clicking tw\hich\af4\dbch\af4\loch\f4 ice in rapid succession on the name, or by clicking once on the name to select the folder, and then clicking on the Open button.  You will see another, shorter list of files.  One of these is called BullsEye.cc.  This file is the source code for the C pro\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4 ram we will run.  Click twice on the file name, and the program will appear in a window on the desktop.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 open command}}}{\par \hich\af4\dbch\af4\loch\f4 The bull's eye program will draw several circles, one inside the other.  ORCA/C let's you see the output from your program while yo\hich\af4\dbch\af4\loch\f4 u look at the source code.  Naturally, to do this, you need someplace to put the output.  In the case of graphics output, the drawing appears in a special window called the Graphics Window.  To see this window, you need to do two things.  First, shrink th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  bull's eye program's window by holding the mouse down in the grow box (the box at the bottom right of the window) and dragging the grow box to the left.  You want to cut the width of the window to about half of the screen, so the right side of the window\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is just before the start of the word Run in the menu bar.  Now pull down the Windows menu and select the Graphics Window command.  The graphics window will show up in the lower right portion of the screen.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics window}}}{\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to memory co\hich\af4\dbch\af4\loch\f4 mmand}}}{\hich\af4\dbch\af4\loch\f4 Positioning the windows is the hard part!  To run the program, pull down the Run menu and select the Compile to Memory command.  A third window, called Shell, will show up in the top right portion on the screen.  The system uses this window to writ\hich\af4\dbch\af4\loch\f4 e text error messages and keep you informed about progress as the program is compiled and linked.  The first compile of the day takes a little time, so be patient.  The desktop development environment is a multi-lingual programming environment.  Because t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e program doesn't know in advance what language you will be using, it waits until you compile a program to load the compiler and linker.  If you have 1.75M of memory, and haven't set aside a large RAM disk, these programs remain in memory, so subsequent c\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 mpiles are much faster.  In addition, once a program has been compiled, if you try to compile it again without changing the source file, the program is simply executed.  To see this, try the Compile To Memory command again.  The executable program is load\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 d from disk and re-executed.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window}}}{\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to memory command}}}{\hich\af4\dbch\af4\loch\f4 You might wonder why the executable program is saved to disk when you use the Compile To Memory command.  Compile To Memory refers to the intermediate files, called object \hich\af4\dbch\af4\loch\f4 modules,}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4  that are passed from the compiler to the linker when your program is prepared for execution.  For some advanced applications, you will want to save these to disk, but for simple programs like the bull's \hich\af4\dbch\af4\loch\f4 eye program, the Compile To Memory command gives you faster compiles by not writing the object modules to disk.  For both Compile to Memory and Compile to Disk, though, the executable program is still saved on the disk.\par \hich\af4\dbch\af4\loch\f4 Before moving on, let's try one more\hich\af4\dbch\af4\loch\f4  command.  Pull down the Debug menu and select Trace.  Watch the left margin of your source window as the program runs \endash  you will see an arrow moving from line to line in the source code.  The ability to trace through a program is the foundation of the de\hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 ugger supplied with ORCA/C.  In later sections, we will explore this capability in detail.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318073}\hich\af4\dbch\af4\loch\f4 Finding Out About the Desktop{\*\bkmkend _Toc495318073}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 As you can see, it's pretty easy to load, compile and execute programs using ORCA/C.  One of the main advantages of the desktop program\hich\af4\dbch\af4\loch\f4 ming environment is ease of use.  The rest of this chapter explains how to use the desktop development environment to develop programs, but it assumes that you already know how to use menus, how to manipulate windows on the desktop, and how to edit text u\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ing a mouse.  If you had any trouble understanding how to use the mouse to manipulate the menu commands and window in the last section, or if you are unfamiliar with mouse-based editors, now would be a good time to refer to Chapter 3 of the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  Owne\hich\af4\dbch\af4\loch\f4 r's Guide, which came with your computer.  The owner's guide has a brief tutorial introduction to using desktop programs.  Complete details on our desktop can be found in Chapter 7 of this manual, but that chapter is arranged for reference \endash  if you are co\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 pletely new to desktop programs, a gentler introduction, like the one in the user's guide, is probably better.  The major features of our desktop development environment that are specific to programming, and are therefore not covered in Apple's introducto\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 y manual, will be covered in the remainder of this chapter.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menus}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 windows}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 mouse}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318074}\hich\af4\dbch\af4\loch\f4 How Graphics and Text are Handled{\*\bkmkend _Toc495318074}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 One of the unique features of the desktop development environment is its ability to show you the program and its outpu\hich\af4\dbch\af4\loch\f4 t at the same time.  You have already seen an example of this.  The bull's eye program produces graphics and text output (it writes the string "Bull's eye!" after the bull's eye is drawn).  Most books on C teach you the language using text input and outpu\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 .  As with the bull's eye program, the text will show up in a special window called the Shell window.  This window is created automatically when you compile a program, and stays around until you close it.  You can resize it \endash  even hide it behind the progr\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 m window if it bothers you.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics window}}}{\par \hich\af4\dbch\af4\loch\f4 The shell window is used for several other purposes besides giving your program a place to write text output.  If your program needs input from the keyboard, you will see the input ec\hich\af4\dbch\af4\loch\f4 hoed in the shell window.  The compiler and linker also write error messages to the shell window.  These error messages will also be shown in a dialog, so you won't miss the error even if you hide the shell window.  Writing the errors to the shell window,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 though, gives you a more permanent record of the errors.  Later, in Chapter 6, we will explore still more uses of the shell window.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compilation errors}}}{\par \hich\af4\dbch\af4\loch\f4 The graphics window lets you write programs that draw pictures without doing all of the initializ\hich\af4\dbch\af4\loch\f4 ation required to write stand-alone programs.  For example, if you are writing a game that uses pull-down menus and windows, your program will open windows for itself.  For simple graphics tasks like drawing bull's eyes or plotting a function, though, the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 graphics window lets you concentrate on the algorithms and on the graphics language, without all of the fuss of learning how to create menus and windows for yourself.\par \hich\af4\dbch\af4\loch\f4 You don't need to open the graphics window unless your program uses it.  If you want to u\hich\af4\dbch\af4\loch\f4 se the graphics window, just be sure to open it before running your program.  (If you forget, nothing tragic happens \endash  you just won't be able to see the graphics output from your program.)  If you need more space, you can drag the window around and size i\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 One feature of the graphics window is worth pointing out.  When your program draws to the graphics window, it does so using QuickDraw II.  The development environment does not know what commands you are using, so it cannot repaint the window.  What this \hich\af4\dbch\af4\loch\f4 means is that if you move a window on top of a drawing in the graphics window, and then move it back off, the only way to refresh the picture is to run the program again.  You might try this right now to see what we mean.  Drag the shell window down so it\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 covers about half of the graphics window, then move it back to its original location.  The part of the graphics window that was covered will be erased.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318075}\hich\af4\dbch\af4\loch\f4 The Languages Menu{\*\bkmkend _Toc495318075}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 languages menu}}}{\hich\af4\dbch\af4\loch\f4 The Languages menu shows all of the languages installed on you\hich\af4\dbch\af4\loch\f4 r system.  It changes when you install or delete a programming language.  You can use this menu to find out what language is associated with a particular file, or to change the language.\par \hich\af4\dbch\af4\loch\f4 Under ORCA, all source and data files are associated with a language.\hich\af4\dbch\af4\loch\f4   The system uses the underlying language stamp to call the appropriate compiler or assembler when you issue a compile command for a source file.  For example, if you select the BullsEye.cc source file (a window is selected by clicking anywhere on the win\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 ow) and pull down the Languages menu, you will see CC checked.  If you select the shell window, the language SHELL will be checked.  When you create a new program, the system tries to select the proper language automatically by assigning the language of t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e last file edited.  You should always check the language menu, though.  If you write a C program, and the system thinks it is an assembly language source file, the assembler will give you enough errors that you will know something is wrong.  If you don't\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 have the assembler on the disk, a dialog will appear with the message "A compiler is not available for this language."  In either case, simply pull down the Languages menu and select the appropriate language, then try compiling again.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318076}\hich\af4\dbch\af4\loch\f4 What's a Debugger?{\*\bkmkend _Toc495318076}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A \hich\af4\dbch\af4\loch\f4 debugger helps you find errors in your program.  You can use a debugger to execute all or part of your program one line at a time, watching the values of selected variables change as the program runs.  If you know that some subroutines are working, while \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 here are problems with other subroutines, you can execute the working routines at full speed and then trace slowly through the problem areas.  You can also set break points}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 break points}}}{\hich\af4\dbch\af4\loch\f4  in your program and then have the debugger execute your progra\hich\af4\dbch\af4\loch\f4 m until it reaches the break.\par \hich\af4\dbch\af4\loch\f4 While the desktop development system supports many languages besides C, not all languages that work with the development system support the source-level debugger.  If you are using another language with ORCA/C, and are not sur\hich\af4\dbch\af4\loch\f4 e whether or not it supports the debugger, try it.  If the language doesn't support the debugger, your program will simply execute at full speed.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug code}}}{\hich\af4\dbch\af4\loch\f4 There is one very important point to keep in mind about the debugger.  When you compile a p\hich\af4\dbch\af4\loch\f4 rogram with debug on, the compiler inserts special code into your program to help the debugger decide which line it is on, where symbols are located, and so forth.  If you run a program with debug code in it from the Finder or the text-based shell, the pr\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 gram will crash.  For that reason, it is very important that you turn the debug option off after a program is finished.  To turn debugging off, pull down the Run menu and select the Compile command.  The dialog that appears has an option with the caption \hich\af4\dbch\af4\loch\f4 "\hich\af4\dbch\af4\loch\f4 Generate debug code."  If there is an X in the box to the left of this option, debug code is turned on; if there is no X, it is turned off.  Clicking in the box turns the option on and off.  Once you set this option the way you want it, click on the Set O\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 tions button.\par \hich\af4\dbch\af4\loch\f4 One other point about debug code deserves to be mentioned.  The debug code takes time and space.  When you turn debugging off, your program will get smaller and faster.  In programs that do lots of graphics or floating point calculations, lik\hich\af4\dbch\af4\loch\f4 e the bull's eye program, the difference is relatively small, but in programs that spend their time looping and doing logical operations, the difference in execution speed can be considerable.\par \hich\af4\dbch\af4\loch\f4 In the remainder of this chapter, we will look at how you can u\hich\af4\dbch\af4\loch\f4 se the source-level }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4  to find problems in your C programs.  The examples we will use here are fairly short, simple programs.  You can debug large programs, including desktop applications.  The basic ideas are similar, but there are a few re\hich\af4\dbch\af4\loch\f4 strictions to keep in mind.  Debugging desktop programs is covered in a special section in Chapter 4.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318077}\hich\af4\dbch\af4\loch\f4 Using the Source-Level Debugger{\*\bkmkend _Toc495318077}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 open command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics window}}}{\hich\af4\dbch\af4\loch\f4 Let's use the bull's eye program again to become familiar with the source-lev\hich\af4\dbch\af4\loch\f4 el debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4 .  If you do not have the program open on the desktop, please pull down the File menu and use the Open command to load it from the Samples folder}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Samples folder}}}{\hich\af4\dbch\af4\loch\f4 .  Now shrink the bull's eye window to about half its curren\hich\af4\dbch\af4\loch\f4 t width, as before.  If you do not have a }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics window}}}{\hich\af4\dbch\af4\loch\f4 graphics window open, pull down the Windows menu and use the Graphics Window command to open a graphics window.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318078}\hich\af4\dbch\af4\loch\f4 Debugging a Simple Graphics Program{\*\bkmkend _Toc495318078}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 run menu}}}{\hich\af4\dbch\af4\loch\f4 P\hich\af4\dbch\af4\loch\f4 ull down the Run menu and select the Compile command.  The desktop brings up a dialog box.  For now, just ignore all of the items in the Compile window except the box in front of the "Generate debug code" option.  This box should be marked with an X, tell\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng the compiler to produce the special code needed during debugging.  After checking the "Generate debug code" box, click on the Set Options button at the bottom of the Compile window.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug code}}}{\par \hich\af4\dbch\af4\loch\f4 Now pull down the Debug menu.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318079}\hich\af4\dbch\af4\loch\f4 The Step Command{\*\bkmkend _Toc495318079}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step command}}}{\hich\af4\dbch\af4\loch\f4 Select the Step command from the Debug menu and watch the source file window.  When the program starts to run, you will see an arrow pointing to the first line in the source file.  Select Step again \endash  the arrow now moves down to the second \hich\af4\dbch\af4\loch\f4 line in the program.  You can continue to select Step from the Debug menu, or you can use the keyboard equivalent.  Holding down the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  key and typing [ will also step one time.  Remembering the keystroke will be hard at first, but you can always pull down \hich\af4\dbch\af4\loch\f4 the menu to check to see what key is used:  the key is shown to the right of the menu command name.  Either way, each time you step, the arrow moves to the next line in the program, and the bull's eye is slowly painted on the graphics window}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics \hich\af4\dbch\af4\loch\f4 window}}}{\hich\af4\dbch\af4\loch\f4 , one circle at a time.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318080}\hich\af4\dbch\af4\loch\f4 The Stop Command{\*\bkmkend _Toc495318080}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stop command}}}{\hich\af4\dbch\af4\loch\f4 Any time your program is executing, you can use the Stop command to stop the program.  This also works when the debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4  is paused, waiting for you to select the next d\hich\af4\dbch\af4\loch\f4 ebugging command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318081}\hich\af4\dbch\af4\loch\f4 The Trace Command{\*\bkmkend _Toc495318081}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 At any time, you can trace your program's execution by selecting Trace from the Debug menu.  Once it starts tracing, the program will run until it finishes, or until you issue another debugging command.  Select Trace fro\hich\af4\dbch\af4\loch\f4 m the Debug menu, and notice the arrow in the source file window \endash  it moves through the lines of code as each line is executed.  Any of the windows which might be open as a result of debugging (the source file, shell, variables, stack, and memory windows)\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 will be continually updated while Trace is running.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trace command}}}{\par \hich\af4\dbch\af4\loch\f4 To pause for a moment in the middle of a trace, move the cursor to the menu bar and press on the mouse button.  You do not have to be on a menu; in fact, it is better if you aren't. \hich\af4\dbch\af4\loch\f4  As long as you hold down on the mouse button, the program will pause.  When you let up, execution continues.  While you have the mouse button down, if you decide to switch to step mode or stop the program, move to the Debug menu and select the appropriat\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  command, or use the appropriate keyboard equivalent.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318082}\hich\af4\dbch\af4\loch\f4 The Go Command{\*\bkmkend _Toc495318082}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 go command}}}{\hich\af4\dbch\af4\loch\f4 Experiment with the Go command in the Debug menu.  It is similar to Trace, but executes an entire program at full speed.  Unlike Trace, however, the debugging windows a\hich\af4\dbch\af4\loch\f4 re not updated.  Go is especially useful for quickly seeing the results of changing your program while you are fixing bugs.  It is also useful when you are using break points and want to execute up to the location of the first break point.\par \hich\af4\dbch\af4\loch\f4 Once a program i\hich\af4\dbch\af4\loch\f4 s executing, it can be stopped by using one of the debug commands in the first part of the Debug menu.  A break point or run-time error will also stop the program.  You can pause debugging at any time by moving the cursor to the right-hand area of the men\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4  bar}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4  and pressing on the mouse button.  Debugging continues as soon as you release the mouse button.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318083}\hich\af4\dbch\af4\loch\f4 The Set Auto-Go Command{\*\bkmkend _Toc495318083}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\shp{\*\shpinst\shpleft4104\shptop26\shpright7964\shpbottom3526\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz0\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw193\pich175\picwgoal3860\pichgoal3500\macpict\bliptag-1971827416\blipupi72{\*\blipuid 8a784d2878e21c6a32c62936904adbea}1abc0000000000af00c1001102ff0c00ffffffff000000000000000000c1000000af00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff036c03c600a101f200044d53574400a10096000604000000000000a1008c0008ffffffff00f103c6001e0001000a00000000003000c10098002800000000004e014000000000004e013900000000003000c1000102d90006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff00001b037ff8000ff7ff0af07333f3f8706660fe1e1ff7ff04f8000fff001b037ff8000ff7ff0af07333f3f8706660fe1e1ff7ff04f8000fff001b037ff9ffcff7ff0af33333f3f333e667fccccff7ff04f9f3cfff001b037ff9ffcff7ff0af33333f3f333e667fccccff7ff04f9f3cfff001a037ff9ffcff7ff02f33333fef303e667fcfcf6ff04f9f3cfff001a037ff9ffcff7ff02f33333fef303e667fcfcf6ff04f9f3cfff001a037ff9ffcff7ff09f07333f3f870f0e1fcfcf6ff04f803cfff001a037ff9ffcff7ff09f07333f3f870f0e1fcfcf6ff04f803cfff001a037ff9ffcff7ff09f33333f3ff33f9e7fcfcf6ff04f9ffcfff001a037ff9ffcff7ff09f33333f3ff33f9e7fcfcf6ff04f9ffcfff001b037ff9ffcff7ff0af33333f3f333f9e7fccccff7ff04f9ffcfff001b037ff9ffcff7ff0af33333f3f333f9e7fccccff7ff04f9ffcfff001b037ff8000ff7ff0af0787030387079e0ce1e1ff7ff04f8000fff001b037ff8000ff7ff0af0787030387079e0ce1e1ff7ff04f8000fff0006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000403000003000a0060df000403000003000a0060df000403003003000a0060df000403003003000a0060df00040300cc03000a0060df00040300cc0300080060df00fd030000080060df00fd03000011036000000efc000006e80004030c00c30011036000000efc000006e80004030c00c300110360000006fc00000ee80004033f03f300110360000006fc00000ee80004033f03f3001109600fcf860f97800f8006e800fd0300001109600fcf860f97800f8006e800fd030000120a601818c618d8c000000606e900fd030000120a601818c618d8c000000606e900fd0300001109601818c618d8000f8006e800fd0300001109601818c618d8000f8006e800fd0300001405601818c618d8fe00010606e900040303ff03001405601818c618d8fe00010606e900040303ff03001405600fcf8f0f98fe00010f06e9000403000003001405600fcf8f0f98fe00010f06e9000403000003000e0060f800000ce9000003feff00000e0060f800000ce9000003feff00002405600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fc000403666667002405600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fc000403666667002405600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fc00040399999b002405600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fc00040399999b00291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8366666700291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8366666700290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c399999b00290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c399999b00291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc366666700291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc366666700291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c399999b00291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c399999b00291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc366666700291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc366666700120060f100000cf600000cfc00040399999b00120060f100000cf600000cfc00040399999b0021176000000f80060f800e0600df80001f80060300000e000006f6000403666667000000a0008d00a1008c000800f0ffff01e203c60001000a00300000006000c100980028004e0000009c0140004e0000009c013900300000006000c1000121176000000f80060f800e0600df80001f80060300000e000006f60004036666670021176000001840061840060000d8c00018c00606000006000003f600040399999b0021176000001840061840060000d8c00018c00606000006000003f600040399999b002218600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f7000403666667002218600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f70004036666670022186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f700040399999b0022186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f700040399999b00220060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f700040366666700220060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f700040366666700221860000010d806d0d8c60618d81818d818c6c61818c618d80306f700040399999b00221860000010d806d0d8c60618d81818d818c6c61818c618d80306f700040399999b0022056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f70004036666670022056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f7000403666667000e0060ea00000cf700040399999b000e0060ea00000cf700040399999b00190060fd00000efa00000efe000306001fc0f300040366666700190060fd00000efa00000efe000306001fc0f300040366666700190060fd000006fa000006fe00030f0000c0f300040399999b00190060fd000006fa000006fe00030f0000c0f300040399999b001e146000000fcf860f97800f800fcf860f978019800180f3000403666667001e146000000fcf860f97800f800fcf860f978019800180f3000403666667001e146000001818c618d8c000001818c618d8c000000306f3000003feff00001e146000001818c618d8c000001818c618d8c000000306f3000003feff00001e0f6000001818c618d8000f801818c618d8fe00010180f3000403c0000f001e0f6000001818c618d8000f801818c618d8fe00010180f3000403c0000f001e076000001818c618d8fe00041818c618d8fe000118c6f3000403c0000f001e076000001818c618d8fe00041818c618d8fe000118c6f3000403c0000f001e076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f3000403c0000f001e076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f3000403c0000f000e0060ee00000cf3000403c0000f000e0060ee00000cf3000403c0000f002001601ffeff01e7f9feff03f9f8703ffeff0539fffffde03ff5ff04e3c0000f002001601ffeff01e7f9feff03f9f8703ffeff0539fffffde03ff5ff04e3c0000f001f01601ffeff01e7f1feff03f1f3e73ffeff043fffffe527f4ff04e3c0000f001f01601ffeff01e7f1feff03f1f3e73ffeff043fffffe527f4ff04e3c0000f001f15601fffe87fe079fff07ff9e7e63fe8707031e7303061f4ff04e3c0000f001f15601fffe87fe079fff07ff9e7e63fe8707031e7303061f4ff04e3c0000f002006601fffe73fe739feff0cf9e06520273f2739e727f8fe79f5ff04e3c0000f002006601fffe73fe739feff0cf9e06520273f2739e727f8fe79f5ff04e3c0000f002016601fffe7ffe739fff07ff9e7233fe7f02739e730707f3ff5ff04e3c0000f002016601fffe7ffe739fff07ff9e7233fe7f02739e730707f3ff5ff04e3c0000f002006601fffe7ffe739feff0cf9e7273fe7e72739e73f252739f5ff04e3c0000f002006601fffe7ffe739feff0cf9e7273fe7e72739e73f252739f5ff04e3c0000f002006601fffe7fce730feff0cf0f0607fe7f03030f0607df079f5ff04e3c0000f002006601fffe7fce730feff0cf0f0607fe7f03030f0607df079f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f002001601ffeff08e7f07ffffff9f8703ffeff0539fffffde03ff5ff04e3c0000f002001601ffeff08e7f07ffffff9f8703ffeff0539fffffde03ff5ff04e3c0000f001f01601ffeff08e7e73ffffff1f3e739feff043fffffe527f4ff04e3c0000f001f01601ffeff08e7e73ffffff1f3e739feff043fffffe527f4ff04e3c0000f001f15601fffe87fe07f3ff07ff9e7e639e8707031e7303061f4ff04e3c0000f001f15601fffe87fe07f3ff07ff9e7e639e8707031e7303061f4ff04e3c0000f002016601fffe73fe73e7ffffff9e06520673f2739e727f8fe79f5ff04e3c0000f002016601fffe73fe73e7ffffff9e06520673f2739e727f8fe79f5ff04e3c0000f002016601fffe7ffe739fff07ff9e72339e7f02739e730707f3ff5ff04e3c0000f002016601fffe7ffe739fff07ff9e72339e7f02739e730707f3ff5ff04e3c0000f002006601fffe7ffe727feff0cf9e72739e7e72739e73f252739f5ff04e3c0000f002006601fffe7ffe727feff0cf9e72739e7e72739e73f252739f5ff04e3c0000f002016601fffe7fce7203ffffff0f0607fe7f03030f0607df079f5ff04e3c0000f002016601fffe7fce7203ffffff0f0607fe7f03030f0607df079f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f001e01601ffdff00f9feff02fc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff00f9feff02fc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff00f1feff02f8673ffeff053fffffe5273ff4ff04e3c0000f001e01601ffdff00f1feff02f8673ffeff053fffffe5273ff4ff04e3c0000f001f15601fffe87fe739fff07ff27f3fe8707031e730307f3ff4ff04e3c0000f001f15601fffe87fe739fff07ff27f3fe8707031e730307f3ff4ff04e3c0000f001f06601fffe73fe739feff0be67e60273f2739e727f8fe79f4ff04e3c0000f001f06601fffe73fe739feff0be67e60273f2739e727f8fe79f4ff04e3c0000f001e14601fffe7ffe739fff07fe039ffe7f02739e7307079f3ff04e3c0000f001e14601fffe7ffe739fff07fe039ffe7f02739e7307079f3ff04e3c0000f001f06601fffe7fff279feff0bfe67ffe7e72739e73f2527f9f4ff04e3c0000f001f06601fffe7fff279feff0bfe67ffe7e72739e73f2527f9f4ff04e3c0000f001f06601fffe7fcf8f0feff0bfe603fe7f03030f0607de039f4ff04e3c0000f001f06601fffe7fcf8f0feff0bfe603fe7f03030f0607de039f4ff04e3c0000f000f01601feeff00f3f4ff04e3c0000f0000a0008d00a1008c000801e0ffff02d203c60001000a00600000009000c100980028009c000000ea0140009c000000ea013900600000009000c100010f01601feeff00f3f4ff04e3c0000f001e01601ffdff06f07ffffffc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff06f07ffffffc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff06e73ffffff86739feff053fffffe5273ff4ff04e3c0000f001e01601ffdff06e73ffffff86739feff053fffffe5273ff4ff04e3c0000f001f15601fffe87fe73f3ff07ff27f39e8707031e730307f3ff4ff04e3c0000f001f15601fffe87fe73f3ff07ff27f39e8707031e730307f3ff4ff04e3c0000f001f15601fffe73fe73e7fffffe67e60673f2739e727f8fe79f4ff04e3c0000f001f15601fffe73fe73e7fffffe67e60673f2739e727f8fe79f4ff04e3c0000f001e14601fffe7ffe739fff07fe039f9e7f02739e7307079f3ff00e3feff00001e14601fffe7ffe739fff07fe039f9e7f02739e7307079f3ff00e3feff00001f06601fffe7fff267feff0bfe67f9e7e72739e73f2527f9f4ff04e399999b001f06601fffe7fff267feff0bfe67f9e7e72739e73f2527f9f4ff04e399999b001f15601fffe7fcf8e03ffffffe603fe7f03030f0607de039f4ff04e3666667001f15601fffe7fcf8e03ffffffe603fe7f03030f0607de039f4ff04e3666667000f01601feeff00f3f4ff04e399999b000f01601feeff00f3f4ff04e399999b00180e6000001f800600060f80000e030006ed00040366666700180e6000001f800600060f80000e030006ed00040366666700180e60000018c000000618c00006060003ed00040399999b00180e60000018c000000618c00006060003ed00040399999b00190f60000018cf8e1f9f98d8cf860c178180ee00040366666700190f60000018cf8e1f9f98d8cf860c178180ee00040366666700190f6000001f80c618c618d8c0c60c18c186ee00040399999b00190f6000001f80c618c618d8c0c60c18c186ee00040399999b00190f600000180fc618c618d8cfc60c180180ee00040366666700190f600000180fc618c618d8cfc60c180180ee00040366666700190f6000001818c618c6d8cd98c606180306ee00040399999b00190f6000001818c618c6d8cd98c606180306ee00040399999b00190f600000180fcf18c38f870fcf03180606ee00040366666700190f600000180fcf18c38f870fcf03180606ee000403666667000e0060f300000cee00040399999b000e0060f300000cee00040399999b000d036000000ee2000403666667000d036000000ee2000403666667000d0360000003e200040399999b000d0360000003e200040399999b000d0360000003e2000403666667000d0360000003e2000403666667000e046000000180e300040399999b000e046000000180e300040399999b000d0360000003e2000403666667000d0360000003e2000403666667000d0360000003e200040399999b000d0360000003e200040399999b000d036000000ee2000403666667000d036000000ee2000403666667000a0060df00040399999b000a0060df00040399999b001e0c60000006000607830d9f800e0efc00040600000d86f5000403666667001e0c60000006000607830d9f800e0efc00040600000d86f5000403666667001d0060fd0007060cc60d98c00606fc00040618000d83f500040399999b001d0060fd0007060cc60d98c00606fc00040618000d83f500040399999b002117601f978e1f9f8c0c0d98d8c6060fc00f98cf860c1f8d8180f6000403666667002117601f978e1f9f8c0c0d98d8c6060fc00f98cf860c1f8d8180f600040366666700210e6018d8c618c61f0c001f18c606181ffed805c60618c00186f600040399999b00210e6018d8c618c61f0c001f18c606181ffed805c60618c00186f600040399999b0021176018d80618c60c0c0018d8c6060f801fd8dfc60318c00180f60004036666670021176018d80618c60c0c0018d8c6060f801fd8dfc60318c00180f6000403666667002117601f980618c6cc060018d8c60600c0180fd8000198c00306f600040399999b002117601f980618c6cc060018d8c60600c0180fd8000198c00306f600040399999b0021176018180f18c38c03001f8f8f0f1f800fc0cfc60018c00606f60004036666670021176018180f18c38c03001f8f8f0f1f800fc0cfc60018c00606f60004036666670014016018f300010f80fc00000cf600040399999b0014016018f300010f80fc00000cf600040399999b000b01600ee0000403666667000b01600ee0000403666667000b016003e000040399999b000b016003e000040399999b000b016003e0000403666667000b016003e0000403666667000c02600180e100040399999b000c02600180e100040399999b000b016003e0000403666667000b016003e0000403666667000b016003e0000003feff00000b016003e0000003feff00000b01600ee00004030000030000a0008d00a1008c000802d0ffff036c03c60001000a0090000000af00c10098002800ea0000011c014000ea0000011c01390090000000af00c100010b01600ee0000403000003000a0060df00040303ff03000a0060df00040303ff0300080060df00fd030000080060df00fd030000080060df00fd030000080060df00fd030000080060df00fd030000080060df00fd0300000a0060df0004033f03f3000a0060df0004033f03f3000a0060df0004030c00c3000a0060df0004030c00c300080060df00fd030000080060df00fd0300000a0060df00040300cc03000a0060df00040300cc03000a0060df000403003003000a0060df000403003003000a0060df000403000003000a0060df0004030000030006007fdbff000006007fdbff000014036000003ffeff00f6e966076e0000030000030014036000003ffeff00f6e966076e0000030000030014036007003efe000039e999079e00e0033ff0030014036007003efe000039e999079e00e0033ff003001403601b003efe000036e966076e00d803303003001403601b003efe000036e966076e00d8033030030014036063fe3efe000039e999079e7fc603303ff30014036063fe3efe000039e999079e7fc603303ff30014036180063efe000036e966076e6001833030330014036180063efe000036e966076e6001833030330014036600063efe000039e999079e6000633ff0330014036600063efe000039e999079e6000633ff0330014036180063efe000036e966076e6001830600330014036180063efe000036e966076e6001830600330014036063fe3efe000039e999079e7fc6030600330014036063fe3efe000039e999079e7fc603060033001403601b003efe000036e966076e00d803060033001403601b003efe000036e966076e00d8030600330014036007003efe000039e999079e00e00307fff30014036007003efe000039e999079e00e00307fff30014036000003efe000036e966076e0000030000030014036000003efe000036e966076e0000030000030014036000003ffeff00f9e999079e0000030000030014036000003ffeff00f9e999079e0000030000030006007fdbff000006007fdbff000002d9000000a0008d00a0008d00a10096000604000000000000ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx4103\posy25\absh3500\absw3860\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw193\pich175\picwgoal3860\pichgoal3500\macpict\bliptag-1971827416\blipupi72{\*\blipuid 8a784d2878e21c6a32c62936904adbea}1abc0000000000af00c1001102ff0c00ffffffff000000000000000000c1000000af00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff036c03c600a101f200044d53574400a10096000604000000000000a1008c0008ffffffff00f103c6001e0001000a00000000003000c10098002800000000004e014000000000004e013900000000003000c1000102d90006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff00001b037ff8000ff7ff0af07333f3f8706660fe1e1ff7ff04f8000fff001b037ff8000ff7ff0af07333f3f8706660fe1e1ff7ff04f8000fff001b037ff9ffcff7ff0af33333f3f333e667fccccff7ff04f9f3cfff001b037ff9ffcff7ff0af33333f3f333e667fccccff7ff04f9f3cfff001a037ff9ffcff7ff02f33333fef303e667fcfcf6ff04f9f3cfff001a037ff9ffcff7ff02f33333fef303e667fcfcf6ff04f9f3cfff001a037ff9ffcff7ff09f07333f3f870f0e1fcfcf6ff04f803cfff001a037ff9ffcff7ff09f07333f3f870f0e1fcfcf6ff04f803cfff001a037ff9ffcff7ff09f33333f3ff33f9e7fcfcf6ff04f9ffcfff001a037ff9ffcff7ff09f33333f3ff33f9e7fcfcf6ff04f9ffcfff001b037ff9ffcff7ff0af33333f3f333f9e7fccccff7ff04f9ffcfff001b037ff9ffcff7ff0af33333f3f333f9e7fccccff7ff04f9ffcfff001b037ff8000ff7ff0af0787030387079e0ce1e1ff7ff04f8000fff001b037ff8000ff7ff0af0787030387079e0ce1e1ff7ff04f8000fff0006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff000006007fdbff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000003feff00000a0060df000403000003000a0060df000403000003000a0060df000403003003000a0060df000403003003000a0060df00040300cc03000a0060df00040300cc0300080060df00fd030000080060df00fd03000011036000000efc000006e80004030c00c30011036000000efc000006e80004030c00c300110360000006fc00000ee80004033f03f300110360000006fc00000ee80004033f03f3001109600fcf860f97800f8006e800fd0300001109600fcf860f97800f8006e800fd030000120a601818c618d8c000000606e900fd030000120a601818c618d8c000000606e900fd0300001109601818c618d8000f8006e800fd0300001109601818c618d8000f8006e800fd0300001405601818c618d8fe00010606e900040303ff03001405601818c618d8fe00010606e900040303ff03001405600fcf8f0f98fe00010f06e9000403000003001405600fcf8f0f98fe00010f06e9000403000003000e0060f800000ce9000003feff00000e0060f800000ce9000003feff00002405600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fc000403666667002405600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fc000403666667002405600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fc00040399999b002405600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fc00040399999b00291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8366666700291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8366666700290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c399999b00290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c399999b00291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc366666700291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc366666700291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c399999b00291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c399999b00291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc366666700291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc366666700120060f100000cf600000cfc00040399999b00120060f100000cf600000cfc00040399999b0021176000000f80060f800e0600df80001f80060300000e000006f6000403666667000000a0008d00a1008c000800f0ffff01e203c60001000a00300000006000c100980028004e0000009c0140004e0000009c013900300000006000c1000121176000000f80060f800e0600df80001f80060300000e000006f60004036666670021176000001840061840060000d8c00018c00606000006000003f600040399999b0021176000001840061840060000d8c00018c00606000006000003f600040399999b002218600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f7000403666667002218600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f70004036666670022186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f700040399999b0022186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f700040399999b00220060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f700040366666700220060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f700040366666700221860000010d806d0d8c60618d81818d818c6c61818c618d80306f700040399999b00221860000010d806d0d8c60618d81818d818c6c61818c618d80306f700040399999b0022056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f70004036666670022056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f7000403666667000e0060ea00000cf700040399999b000e0060ea00000cf700040399999b00190060fd00000efa00000efe000306001fc0f300040366666700190060fd00000efa00000efe000306001fc0f300040366666700190060fd000006fa000006fe00030f0000c0f300040399999b00190060fd000006fa000006fe00030f0000c0f300040399999b001e146000000fcf860f97800f800fcf860f978019800180f3000403666667001e146000000fcf860f97800f800fcf860f978019800180f3000403666667001e146000001818c618d8c000001818c618d8c000000306f3000003feff00001e146000001818c618d8c000001818c618d8c000000306f3000003feff00001e0f6000001818c618d8000f801818c618d8fe00010180f3000403c0000f001e0f6000001818c618d8000f801818c618d8fe00010180f3000403c0000f001e076000001818c618d8fe00041818c618d8fe000118c6f3000403c0000f001e076000001818c618d8fe00041818c618d8fe000118c6f3000403c0000f001e076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f3000403c0000f001e076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f3000403c0000f000e0060ee00000cf3000403c0000f000e0060ee00000cf3000403c0000f002001601ffeff01e7f9feff03f9f8703ffeff0539fffffde03ff5ff04e3c0000f002001601ffeff01e7f9feff03f9f8703ffeff0539fffffde03ff5ff04e3c0000f001f01601ffeff01e7f1feff03f1f3e73ffeff043fffffe527f4ff04e3c0000f001f01601ffeff01e7f1feff03f1f3e73ffeff043fffffe527f4ff04e3c0000f001f15601fffe87fe079fff07ff9e7e63fe8707031e7303061f4ff04e3c0000f001f15601fffe87fe079fff07ff9e7e63fe8707031e7303061f4ff04e3c0000f002006601fffe73fe739feff0cf9e06520273f2739e727f8fe79f5ff04e3c0000f002006601fffe73fe739feff0cf9e06520273f2739e727f8fe79f5ff04e3c0000f002016601fffe7ffe739fff07ff9e7233fe7f02739e730707f3ff5ff04e3c0000f002016601fffe7ffe739fff07ff9e7233fe7f02739e730707f3ff5ff04e3c0000f002006601fffe7ffe739feff0cf9e7273fe7e72739e73f252739f5ff04e3c0000f002006601fffe7ffe739feff0cf9e7273fe7e72739e73f252739f5ff04e3c0000f002006601fffe7fce730feff0cf0f0607fe7f03030f0607df079f5ff04e3c0000f002006601fffe7fce730feff0cf0f0607fe7f03030f0607df079f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f002001601ffeff08e7f07ffffff9f8703ffeff0539fffffde03ff5ff04e3c0000f002001601ffeff08e7f07ffffff9f8703ffeff0539fffffde03ff5ff04e3c0000f001f01601ffeff08e7e73ffffff1f3e739feff043fffffe527f4ff04e3c0000f001f01601ffeff08e7e73ffffff1f3e739feff043fffffe527f4ff04e3c0000f001f15601fffe87fe07f3ff07ff9e7e639e8707031e7303061f4ff04e3c0000f001f15601fffe87fe07f3ff07ff9e7e639e8707031e7303061f4ff04e3c0000f002016601fffe73fe73e7ffffff9e06520673f2739e727f8fe79f5ff04e3c0000f002016601fffe73fe73e7ffffff9e06520673f2739e727f8fe79f5ff04e3c0000f002016601fffe7ffe739fff07ff9e72339e7f02739e730707f3ff5ff04e3c0000f002016601fffe7ffe739fff07ff9e72339e7f02739e730707f3ff5ff04e3c0000f002006601fffe7ffe727feff0cf9e72739e7e72739e73f252739f5ff04e3c0000f002006601fffe7ffe727feff0cf9e72739e7e72739e73f252739f5ff04e3c0000f002016601fffe7fce7203ffffff0f0607fe7f03030f0607df079f5ff04e3c0000f002016601fffe7fce7203ffffff0f0607fe7f03030f0607df079f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f000f01601fedff00f3f5ff04e3c0000f001e01601ffdff00f9feff02fc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff00f9feff02fc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff00f1feff02f8673ffeff053fffffe5273ff4ff04e3c0000f001e01601ffdff00f1feff02f8673ffeff053fffffe5273ff4ff04e3c0000f001f15601fffe87fe739fff07ff27f3fe8707031e730307f3ff4ff04e3c0000f001f15601fffe87fe739fff07ff27f3fe8707031e730307f3ff4ff04e3c0000f001f06601fffe73fe739feff0be67e60273f2739e727f8fe79f4ff04e3c0000f001f06601fffe73fe739feff0be67e60273f2739e727f8fe79f4ff04e3c0000f001e14601fffe7ffe739fff07fe039ffe7f02739e7307079f3ff04e3c0000f001e14601fffe7ffe739fff07fe039ffe7f02739e7307079f3ff04e3c0000f001f06601fffe7fff279feff0bfe67ffe7e72739e73f2527f9f4ff04e3c0000f001f06601fffe7fff279feff0bfe67ffe7e72739e73f2527f9f4ff04e3c0000f001f06601fffe7fcf8f0feff0bfe603fe7f03030f0607de039f4ff04e3c0000f001f06601fffe7fcf8f0feff0bfe603fe7f03030f0607de039f4ff04e3c0000f000f01601feeff00f3f4ff04e3c0000f0000a0008d00a1008c000801e0ffff02d203c60001000a00600000009000c100980028009c000000ea0140009c000000ea013900600000009000c100010f01601feeff00f3f4ff04e3c0000f001e01601ffdff06f07ffffffc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff06f07ffffffc707ffeff0539fffffdf07ff4ff04e3c0000f001e01601ffdff06e73ffffff86739feff053fffffe5273ff4ff04e3c0000f001e01601ffdff06e73ffffff86739feff053fffffe5273ff4ff04e3c0000f001f15601fffe87fe73f3ff07ff27f39e8707031e730307f3ff4ff04e3c0000f001f15601fffe87fe73f3ff07ff27f39e8707031e730307f3ff4ff04e3c0000f001f15601fffe73fe73e7fffffe67e60673f2739e727f8fe79f4ff04e3c0000f001f15601fffe73fe73e7fffffe67e60673f2739e727f8fe79f4ff04e3c0000f001e14601fffe7ffe739fff07fe039f9e7f02739e7307079f3ff00e3feff00001e14601fffe7ffe739fff07fe039f9e7f02739e7307079f3ff00e3feff00001f06601fffe7fff267feff0bfe67f9e7e72739e73f2527f9f4ff04e399999b001f06601fffe7fff267feff0bfe67f9e7e72739e73f2527f9f4ff04e399999b001f15601fffe7fcf8e03ffffffe603fe7f03030f0607de039f4ff04e3666667001f15601fffe7fcf8e03ffffffe603fe7f03030f0607de039f4ff04e3666667000f01601feeff00f3f4ff04e399999b000f01601feeff00f3f4ff04e399999b00180e6000001f800600060f80000e030006ed00040366666700180e6000001f800600060f80000e030006ed00040366666700180e60000018c000000618c00006060003ed00040399999b00180e60000018c000000618c00006060003ed00040399999b00190f60000018cf8e1f9f98d8cf860c178180ee00040366666700190f60000018cf8e1f9f98d8cf860c178180ee00040366666700190f6000001f80c618c618d8c0c60c18c186ee00040399999b00190f6000001f80c618c618d8c0c60c18c186ee00040399999b00190f600000180fc618c618d8cfc60c180180ee00040366666700190f600000180fc618c618d8cfc60c180180ee00040366666700190f6000001818c618c6d8cd98c606180306ee00040399999b00190f6000001818c618c6d8cd98c606180306ee00040399999b00190f600000180fcf18c38f870fcf03180606ee00040366666700190f600000180fcf18c38f870fcf03180606ee000403666667000e0060f300000cee00040399999b000e0060f300000cee00040399999b000d036000000ee2000403666667000d036000000ee2000403666667000d0360000003e200040399999b000d0360000003e200040399999b000d0360000003e2000403666667000d0360000003e2000403666667000e046000000180e300040399999b000e046000000180e300040399999b000d0360000003e2000403666667000d0360000003e2000403666667000d0360000003e200040399999b000d0360000003e200040399999b000d036000000ee2000403666667000d036000000ee2000403666667000a0060df00040399999b000a0060df00040399999b001e0c60000006000607830d9f800e0efc00040600000d86f5000403666667001e0c60000006000607830d9f800e0efc00040600000d86f5000403666667001d0060fd0007060cc60d98c00606fc00040618000d83f500040399999b001d0060fd0007060cc60d98c00606fc00040618000d83f500040399999b002117601f978e1f9f8c0c0d98d8c6060fc00f98cf860c1f8d8180f6000403666667002117601f978e1f9f8c0c0d98d8c6060fc00f98cf860c1f8d8180f600040366666700210e6018d8c618c61f0c001f18c606181ffed805c60618c00186f600040399999b00210e6018d8c618c61f0c001f18c606181ffed805c60618c00186f600040399999b0021176018d80618c60c0c0018d8c6060f801fd8dfc60318c00180f60004036666670021176018d80618c60c0c0018d8c6060f801fd8dfc60318c00180f6000403666667002117601f980618c6cc060018d8c60600c0180fd8000198c00306f600040399999b002117601f980618c6cc060018d8c60600c0180fd8000198c00306f600040399999b0021176018180f18c38c03001f8f8f0f1f800fc0cfc60018c00606f60004036666670021176018180f18c38c03001f8f8f0f1f800fc0cfc60018c00606f60004036666670014016018f300010f80fc00000cf600040399999b0014016018f300010f80fc00000cf600040399999b000b01600ee0000403666667000b01600ee0000403666667000b016003e000040399999b000b016003e000040399999b000b016003e0000403666667000b016003e0000403666667000c02600180e100040399999b000c02600180e100040399999b000b016003e0000403666667000b016003e0000403666667000b016003e0000003feff00000b016003e0000003feff00000b01600ee00004030000030000a0008d00a1008c000802d0ffff036c03c60001000a0090000000af00c10098002800ea0000011c014000ea0000011c01390090000000af00c100010b01600ee0000403000003000a0060df00040303ff03000a0060df00040303ff0300080060df00fd030000080060df00fd030000080060df00fd030000080060df00fd030000080060df00fd030000080060df00fd0300000a0060df0004033f03f3000a0060df0004033f03f3000a0060df0004030c00c3000a0060df0004030c00c300080060df00fd030000080060df00fd0300000a0060df00040300cc03000a0060df00040300cc03000a0060df000403003003000a0060df000403003003000a0060df000403000003000a0060df0004030000030006007fdbff000006007fdbff000014036000003ffeff00f6e966076e0000030000030014036000003ffeff00f6e966076e0000030000030014036007003efe000039e999079e00e0033ff0030014036007003efe000039e999079e00e0033ff003001403601b003efe000036e966076e00d803303003001403601b003efe000036e966076e00d8033030030014036063fe3efe000039e999079e7fc603303ff30014036063fe3efe000039e999079e7fc603303ff30014036180063efe000036e966076e6001833030330014036180063efe000036e966076e6001833030330014036600063efe000039e999079e6000633ff0330014036600063efe000039e999079e6000633ff0330014036180063efe000036e966076e6001830600330014036180063efe000036e966076e6001830600330014036063fe3efe000039e999079e7fc6030600330014036063fe3efe000039e999079e7fc603060033001403601b003efe000036e966076e00d803060033001403601b003efe000036e966076e00d8030600330014036007003efe000039e999079e00e00307fff30014036007003efe000039e999079e00e00307fff30014036000003efe000036e966076e0000030000030014036000003efe000036e966076e0000030000030014036000003ffeff00f9e999079e0000030000030014036000003ffeff00f9e999079e0000030000030006007fdbff000006007fdbff000002d9000000a0008d00a0008d00a10096000604000000000000ff}\par}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step command}}}{\hich\af4\dbch\af4\loch\f4 Now let's look at Auto-Go.  You can set lines for Auto-Go so that they will be executed at f\hich\af4\dbch\af4\loch\f4 ull speed, even if you are stepping or tracing.  Use the mouse to select the four lines assigning values to the rectangle, as shown in the figure.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 auto-go command}}}{\hich\af4\dbch\af4\loch\f4   Next, pull down the Debug menu and choose Set/Clear Auto-Go.  A large green dot will\hich\af4\dbch\af4\loch\f4  appear to the left of each of the selected lines.   Now use the Step command to step through the for loop.  Notice that when the arrow stepped into the block of statements you selected, it jumped to the end of the block marked for auto-go.  As you can se\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 , Auto-Go can be very useful when you are stepping through your program, but don't want to see portions you have already debugged.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318084}\hich\af4\dbch\af4\loch\f4 Break Points{\*\bkmkend _Toc495318084}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Next let's look at how to set break points}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 break points}}}{\hich\af4\dbch\af4\loch\f4 .  First use the Stop command to stop the program\hich\af4\dbch\af4\loch\f4  (if it hasn't already completed), and then select the program line containing the call to PaintOval.  Now choose Set/Clear Break Point from the Debug menu.  A purple X will appear to the left of the PaintOval line, indicating it is a break point.  Now se\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 ect Trace from the Debug menu.  Execution stops at the PaintOval line.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trace command}}}{\par \hich\af4\dbch\af4\loch\f4 A break point will always cause the program to stop \endash  even if it was executing at full speed.  Break points are especially useful for debugging large programs.  Yo\hich\af4\dbch\af4\loch\f4 u can set a break point on the first line of the area you want to examine, then execute the rest of the program at full speed.  Execution will be suspended when you reach the break point.\par \hich\af4\dbch\af4\loch\f4 Another use of break points is when you suspect that a certain porti\hich\af4\dbch\af4\loch\f4 on of your program is not being executed at all.  By setting a break point, you can check where your program quits executing, and then determine if this is in the location that you thought was not being reached.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318085}\hich\af4\dbch\af4\loch\f4 Debugging a Program With More Than One Subro\hich\af4\dbch\af4\loch\f4 utine{\*\bkmkend _Toc495318085}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There are several features of the debugger that are only useful in programs that have more than one subroutine.  The bull's eye program we have been using so far doesn't have any subroutines, so we will need to switch to a program that does.  If you \hich\af4\dbch\af4\loch\f4 haven't already done so, stop the bull's eye program.  After you get the main menu back, close the graphics window and the bull's eye program's source window, and then open the file Sort.cc.  Like the bull's eye program, the sort program is in the Samples\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 folder.  The sort program compares two simple sort procedures by sorting the same array of integers using each routine.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318086}\hich\af4\dbch\af4\loch\f4 The Profile Command{\*\bkmkend _Toc495318086}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 One of the advanced features of the debugger that can help you improve a program is the profiler.  The profiler coll\hich\af4\dbch\af4\loch\f4 ects statistics about your program to help you find bugs and "hot spots."  A hot spot is a place in your program that takes a long time to execute compared with the rest of the program.  You may have heard of a famous rule of thumb in programming which st\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 tes that a program spends 90% of its time in 10% of its code.  The 10% of the code is the hot spot, and knowing where it is can help you speed up your program.\par \hich\af4\dbch\af4\loch\f4 As you can see, the sort program you just opened has two subroutines, named ShellSort and Bubble\hich\af4\dbch\af4\loch\f4 Sort.  Shrink the window to about half its width.  Pull down the Debug menu and select the Profile command.  This turns the profiler on.  Next, use the Compile to Memory command to compile and execute the program, just as you did with the bull's eye progr\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 m.  After the program compiles and executes, you will see the profiler's statistics printed in the shell window.  The profiler returns the following information:}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 profiler}}}{\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab The number of times each subroutine and main program was called.\par \hich\af4\dbch\af4\loch\f4 2.\tab The n\hich\af4\dbch\af4\loch\f4 umber of heartbeats while in each subroutine and the main program.\par \hich\af4\dbch\af4\loch\f4 3.\tab The percent of heartbeats for each subroutine and main program compared to the total number of heartbeats.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 This information is in columns, and won't all be visible unless you expand the\hich\af4\dbch\af4\loch\f4  size of the shell window.  If you don't see three columns of numbers after the names of the subroutines, make the shell window larger.\par \hich\af4\dbch\af4\loch\f4 The number of times a subroutine is called is more useful than it seems at first.  For example, let's say you are testin\hich\af4\dbch\af4\loch\f4 g a program that reads characters from a file and processes them \endash  a spelling checker, perhaps.  If you know that the test file has 3278 characters, but the subroutine you call to read a single character is called 3289 times, you know right away that ther\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  is a problem.  In addition, if you are really calling a subroutine 3278 times, and the subroutine is a short one that is only called from a few places, you might want to consider placing the few lines of code "in-line," replacing the subroutine calls.  Y\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ur program will get larger, and perhaps a little harder to read, but the improvement in execution speed could make these inconveniences worthwhile.\par \hich\af4\dbch\af4\loch\f4 The sort program only calls each sort one time, so the first column of information isn't very useful in this\hich\af4\dbch\af4\loch\f4  example.  We also see, however, that the sort program spent about 32% of its time in the BubbleSort subroutine, about 42% of its time in the ShellSort routine, and about 26% of its time in the main program.  At least for this type of data, then, the bubb\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e sort is the better choice.  You should be aware that the statistics generated by the profiler are based on a random sampling.  It can be quite accurate for some types of programs, and very unreliable for others.  To get the best results, run a program s\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 veral times, and try to use input data that will cause it to execute for several seconds to a few minutes.  The larger the sample, the better the results will be.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318087}\hich\af4\dbch\af4\loch\f4 The Step Through Command{\*\bkmkend _Toc495318087}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step through command}}}{\hich\af4\dbch\af4\loch\f4 Two commands, Step Through and Goto Nex\hich\af4\dbch\af4\loch\f4 t Return, are designed to make debugging subroutines easier. The Step Through command is used to execute subroutines at full speed.  For instance, many times when you are writing a new program, you may have problems with one or more of the subroutines, bu\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  you know that other subroutines are working fine.  You would like to be able to pass quickly through the working routines, and then slow down and step through the problem areas of the code.  This is the reason for the Step Through command.\par \hich\af4\dbch\af4\loch\f4 To see how the \hich\af4\dbch\af4\loch\f4 Step Through command works, let's debug the Sort.cc program.  If you pull down the Debug menu, you will see that the Step Through, Go to Next Return, and Stop items are all dimmed, meaning that they are not selectable at this time.  This is because there \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 s nothing to step through or stop, and no return to go to.  \par \hich\af4\dbch\af4\loch\f4 Pull down the Debug menu and select the Step command.  Sort.cc is compiled and linked, and then our step arrow appears next to the for loop, which is the first statement in the main program.  To \hich\af4\dbch\af4\loch\f4 get beyond the for loop, select Step eleven times.  The step arrow is now next to the line containing the call to the ShellSort subroutine.  Now pull down the Debug menu and select Step Through.  There is a momentary pause, and then the arrow advances to \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he next line, another for loop.  The Step Through command has just executed the ShellSort subroutine at full speed.  If we now single-step through the for loop, we will see the sorted array values printed in the shell window.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318088}\hich\af4\dbch\af4\loch\f4 The Goto Next Return Command{\*\bkmkend _Toc495318088}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 goto next return command}}}{\hich\af4\dbch\af4\loch\f4 The Goto Next Return command is useful when you are only debugging a portion of a subroutine.  To see how this command works, single-step through the statements in the main program until you reach the line containing the cal\hich\af4\dbch\af4\loch\f4 l to the BubbleSort routine.  Single-step once more to reach the beginning of the BubbleSort subroutine.  Now select Go to Next Return from the Debug menu.  The BubbleSort routine is executed, and then the step arrow appears to the left of the line follow\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng that which called the BubbleSort function.  To verify execution of the subroutine, we could use Step, Step Through, Go, or Trace to see the sorted array displayed in the shell window}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window}}}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318089}\hich\af4\dbch\af4\loch\f4 Viewing Program Variables{\*\bkmkend _Toc495318089}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\shp{\*\shpinst\shpleft5184\shptop35\shpright7920\shpbottom1567\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz1\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex51\picscaley51\piccropl0\piccropr0\piccropt0\piccropb0\picw268\pich150\picwgoal5360\pichgoal3000\macpict\bliptag1881758399\blipupi72{\*\blipuid 70295abfa10bd108ffaf9cd3e8486f77}07c2000000020096010e001102ff0c00ffffffff0002000000000000010e0000009600000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800220000000000960110000000020096010e000000020096010e000106003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc13033ffc0007f9ff06fce7fffe7ff3f8f3ff00fc13033ffc0007f9ff06fce7fffe7ff3f8f3ff00fc13033ffcffe7f9ff01fce7feff01f3fcf3ff00fc13033ffcffe7f9ff01fce7feff01f3fcf3ff00fc16033ffcffe7f9ff09fce7064c78307cf8787ff6ff00fc16033ffcffe7f9ff09fce7064c78307cf8787ff6ff00fc15033ffcffe7f9ff08fe4e663e73333cf333f5ff00fc15033ffcffe7f9ff08fe4e663e73333cf333f5ff00fc16033ffcffe7f9ff09fe4e667e73333cf0387ff6ff00fc16033ffcffe7f9ff09fe4e667e73333cf0387ff6ff00fc15033ffcffe7f8ff081e667e73333cf3ff3ff6ff00fc15033ffcffe7f8ff081e667e73333cf3ff3ff6ff00fc15033ffc0007f8ff041f067c3830fe78007ff6ff00fc15033ffc0007f8ff041f067c3830fe78007ff6ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc0c0630006000c00180e700000c0c0630006000c00180e700000c0e0830106060c0c1800003e900000c0e0830106060c0c1800003e900000c0c06303061f8c1e180e700000c0c06303061f8c1e180e700000c0f093010676ecffd9fc3e71fea00000c0f093010676ecffd9fc3e71fea00000c100a30306060c7f99b66631980eb00000c100a30306060c7399b66631980eb00000c100a31116060c3319b66631980eb00000c100a31116060c3f19b66631980eb00000c100a31326060c3f19b66631980eb00000c100a31326060c3f19b66631980eb00000c100a30506060c7f99b63e79980eb00000c100a30506060c7f99b63e79980eb00000c0c0630306060c73980e700000c0c0630306060c73980e700000c0c0630006000c00180e700000c0c0630006000c00180e700000c06003fe1ff00fc06003fe1ff00fc090030e400030ffffffc090030e400030ffffffc12043001e60780f9000160f0f200030c00000c12043001e60780f9000160f0f200030c00000c13043001866180fa000201e180f200030c00c00c13043001866180fa000201e180f200030c00c00c120430f9866180f9000161f0f200030c03300c120430f9866180f9000161f0f200030c03300c0f043199866180f900016198f200fd0c0f043199866180f900016198f200fd0c1204319987e180f900016198f200030c30030c1204319987e180f900016198f200030c30030c12043199806180f900016198f200030cfc0fcc12043199806180f900016198f200030cfc0fcc100430f9806180fa000201f8f0f200fd0c100430f9806180fa000201f8f0f200fd0c0a043001e00780e800fd0c0a043001e00780e800fd0c060030e400fd0c060030e400fd0c0e0130c0f60000f0f100030c0ffc0c0e0130c0f60000f0f100030c0ffc0c0e0030f600010198f100030c00000c0e0030f600010198f100030c00000c0e0131c0f6000018f100030ffffffc0e0131c0f6000018f100030ffffffc0e0130c0f6000030f100030c00000c0e0130c0f6000030f100030c00000c0e0130c0f6000060f100030c00000c0e0130c0f6000060f100030c00000c0e0130c0f60000c0f100030c00000c0e0130c0f60000c0f100030c00000c0f0131e0f7000101f8f100030c00000c0f0131e0f7000101f8f100030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030ffffffc090030e400030ffffffc090030e400030c00000c090030e400030c00000c090030e400030c0ffc0c090030e400030c0ffc0c060030e400fd0c060030e400fd0c060030e400fd0c060030e400fd0c060030e400fd0c060030e400fd0c090030e400030cfc0fcc090030e400030cfc0fcc090030e400030c30030c090030e400030c30030c060030e400fd0c060030e400fd0c090030e400030c03300c090030e400030c03300c090030e400030c00c00c090030e400030c00c00c090030e400030c00000c090030e400030c00000c090030e400030ffffffc090030e400030ffffffc090030e400030c00000c090030e400030c00000c090030e400030cffc00c090030e400030cffc00c090030e400030cc0c00c090030e400030cc0c00c090030e400030cc0ffcc090030e400030cc0ffcc090030e400030cc0c0cc090030e400030cc0c0cc090030e400030cffc0cc090030e400030cffc0cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1fffcc090030e400030c1fffcc090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c06003fe1ff00fc06003fe1ff00fc00a0008f00a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx5183\posy34\absh1532\absw2736\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex51\picscaley51\piccropl0\piccropr0\piccropt0\piccropb0\picw268\pich150\picwgoal5360\pichgoal3000\macpict\bliptag1881758399\blipupi72{\*\blipuid 70295abfa10bd108ffaf9cd3e8486f77}07c2000000020096010e001102ff0c00ffffffff0002000000000000010e0000009600000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800220000000000960110000000020096010e000000020096010e000106003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc13033ffc0007f9ff06fce7fffe7ff3f8f3ff00fc13033ffc0007f9ff06fce7fffe7ff3f8f3ff00fc13033ffcffe7f9ff01fce7feff01f3fcf3ff00fc13033ffcffe7f9ff01fce7feff01f3fcf3ff00fc16033ffcffe7f9ff09fce7064c78307cf8787ff6ff00fc16033ffcffe7f9ff09fce7064c78307cf8787ff6ff00fc15033ffcffe7f9ff08fe4e663e73333cf333f5ff00fc15033ffcffe7f9ff08fe4e663e73333cf333f5ff00fc16033ffcffe7f9ff09fe4e667e73333cf0387ff6ff00fc16033ffcffe7f9ff09fe4e667e73333cf0387ff6ff00fc15033ffcffe7f8ff081e667e73333cf3ff3ff6ff00fc15033ffcffe7f8ff081e667e73333cf3ff3ff6ff00fc15033ffc0007f8ff041f067c3830fe78007ff6ff00fc15033ffc0007f8ff041f067c3830fe78007ff6ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc06003fe1ff00fc0c0630006000c00180e700000c0c0630006000c00180e700000c0e0830106060c0c1800003e900000c0e0830106060c0c1800003e900000c0c06303061f8c1e180e700000c0c06303061f8c1e180e700000c0f093010676ecffd9fc3e71fea00000c0f093010676ecffd9fc3e71fea00000c100a30306060c7f99b66631980eb00000c100a30306060c7399b66631980eb00000c100a31116060c3319b66631980eb00000c100a31116060c3f19b66631980eb00000c100a31326060c3f19b66631980eb00000c100a31326060c3f19b66631980eb00000c100a30506060c7f99b63e79980eb00000c100a30506060c7f99b63e79980eb00000c0c0630306060c73980e700000c0c0630306060c73980e700000c0c0630006000c00180e700000c0c0630006000c00180e700000c06003fe1ff00fc06003fe1ff00fc090030e400030ffffffc090030e400030ffffffc12043001e60780f9000160f0f200030c00000c12043001e60780f9000160f0f200030c00000c13043001866180fa000201e180f200030c00c00c13043001866180fa000201e180f200030c00c00c120430f9866180f9000161f0f200030c03300c120430f9866180f9000161f0f200030c03300c0f043199866180f900016198f200fd0c0f043199866180f900016198f200fd0c1204319987e180f900016198f200030c30030c1204319987e180f900016198f200030c30030c12043199806180f900016198f200030cfc0fcc12043199806180f900016198f200030cfc0fcc100430f9806180fa000201f8f0f200fd0c100430f9806180fa000201f8f0f200fd0c0a043001e00780e800fd0c0a043001e00780e800fd0c060030e400fd0c060030e400fd0c0e0130c0f60000f0f100030c0ffc0c0e0130c0f60000f0f100030c0ffc0c0e0030f600010198f100030c00000c0e0030f600010198f100030c00000c0e0131c0f6000018f100030ffffffc0e0131c0f6000018f100030ffffffc0e0130c0f6000030f100030c00000c0e0130c0f6000030f100030c00000c0e0130c0f6000060f100030c00000c0e0130c0f6000060f100030c00000c0e0130c0f60000c0f100030c00000c0e0130c0f60000c0f100030c00000c0f0131e0f7000101f8f100030c00000c0f0131e0f7000101f8f100030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030ffffffc090030e400030ffffffc090030e400030c00000c090030e400030c00000c090030e400030c0ffc0c090030e400030c0ffc0c060030e400fd0c060030e400fd0c060030e400fd0c060030e400fd0c060030e400fd0c060030e400fd0c090030e400030cfc0fcc090030e400030cfc0fcc090030e400030c30030c090030e400030c30030c060030e400fd0c060030e400fd0c090030e400030c03300c090030e400030c03300c090030e400030c00c00c090030e400030c00c00c090030e400030c00000c090030e400030c00000c090030e400030ffffffc090030e400030ffffffc090030e400030c00000c090030e400030c00000c090030e400030cffc00c090030e400030cffc00c090030e400030cc0c00c090030e400030cc0c00c090030e400030cc0ffcc090030e400030cc0ffcc090030e400030cc0c0cc090030e400030cc0c0cc090030e400030cffc0cc090030e400030cffc0cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1800cc090030e400030c1fffcc090030e400030c1fffcc090030e400030c00000c090030e400030c00000c090030e400030c00000c090030e400030c00000c06003fe1ff00fc06003fe1ff00fc00a0008f00a0008300ff}\par}}\hich\af4\dbch\af4\loch\f4 Watching a program ex\hich\af4\dbch\af4\loch\f4 ecute, and seeing exactly when output is produced, can be very useful.  The debugger has another ability, though, which is even more important:  you can watch the values of the internal variables.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger:variables}}}{\par \hich\af4\dbch\af4\loch\f4 To see how this works, pull dow\hich\af4\dbch\af4\loch\f4 n the Windows menu and select the Variables command.   The desktop brings up a Variables window in the center of the screen, like the one pictured to the right.  (The window you will see won't have any variable names in it.)}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window}}}{\par \hich\af4\dbch\af4\loch\f4 The rectangle beneath the title bar of the Variables window contains three boxes, and an area to the right of the boxes where the name of the currently executing subroutine is displayed.  Drag the Variables window out of the way of the \hich\af4\dbch\af4\loch\f4 other windows on the desktop, and then select the source file window.\par \hich\af4\dbch\af4\loch\f4 We can't enter any variables into the Variables window unless we are executing a program.  This makes intuitive sense \endash  memory for variables isn't allocated until run-time.  The first tw\hich\af4\dbch\af4\loch\f4 o boxes control which subroutine we are looking at, while the third is a command button that displays all of the simple variables.  Likewise, these boxes are dimmed until they can be used.\par \hich\af4\dbch\af4\loch\f4 To see how to set up the variables we would like to view, start ste\hich\af4\dbch\af4\loch\f4 pping through the program by using the Step command.  You should be at the first line in the main program.  Click anywhere in the Variables window below the title bar and function-name bar, and to the left of the scroll control.  (This area is called the \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ontent region of the window.)  A line-edit box will appear, with a flashing insertion point.  Let's enter one of the main program's variables, a[4], and then press return.  After the carriage return, we see the current value of a[4] displayed, which is ze\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 o.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window}}}{\hich\af4\dbch\af4\loch\f4 You can enter new variable names by clicking in the content region of the Variables window, and then typing in the name.  You can change an existing variable in the window by clicking on its name, and then using the line editor \hich\af4\dbch\af4\loch\f4 to make the necessary modifications.\par \hich\af4\dbch\af4\loch\f4 Typing the name of a variable works great when we are trying to look at very specific things, like a particular element of an array, or if we just want to look at a few variables.  It\rquote s a little tedious to type the name\hich\af4\dbch\af4\loch\f4 s of each and every variable, though.  If you click on the third box \endash  the one with a star \endash  all of the simple variables will be displayed in the window.  For arrays, structures or pointers, though, you still have to type the specific value you want to se\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 Continue stepping through the program, and watch what happens when the program enters the ShellSort function.  The name ShellSort appears in the information bar of the Variables window, the up-arrow is now selectable, and the variable a[4] vanishes.  If \hich\af4\dbch\af4\loch\f4 you click on the up arrow to the left of the ShellSort function name, you will see the variables display for the main program, and the down arrow in the Variables window becomes selectable.  The variable a[4], which is defined at the main program level, a\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 so reappears.  If you click on the down arrow, the Variables window switches back to the ShellSort display.  You can enter any of the ShellSort variable names whose values you wish to see whenever the program is executing in this subroutine.\par \hich\af4\dbch\af4\loch\f4 If you haven't\hich\af4\dbch\af4\loch\f4  finished executing the program, stop it now using the Stop command.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 scalars}}}{\hich\af4\dbch\af4\loch\f4 The debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4  is capable of displaying any scalar quantity.  Scalar variables include integers, real numbers, strings, pointers, booleans, and characters. \hich\af4\dbch\af4\loch\f4  Integers, reals, and strings are stored internally in a variety of formats; the debugger can display any of these formats.  The debugger can also show values pointed to by a pointer, fields within a structure or union, or elements of an array, so long as\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the actual thing you are trying to display is ultimately a single value.  For example, you can use\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 r.h1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 to display one of the fields within the rectangle record in the bull\rquote s eye program, although you cannot just type r to try to display the entire struc\hich\af4\dbch\af4\loch\f4 ture.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The rules you use to type complex expressions are covered in detail in Chapter 7, but some simpler rules of thumb are probably all you need.  First, array subscripts must always be constant values, not expressions or variables.  When dereferencing po\hich\af4\dbch\af4\loch\f4 inters, you need to use the Pascal pointer operator, which is a ^ character after the pointer, rather than C\rquote s * character before the pointer.  You can use the -> operator to look at a field in a structure that is pointed to by a pointer, just like you do\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 in C.  Finally, you can use pointer operators (^ and ->), field operators (the . character) and array subscripts in combination.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window}}}{\par \hich\af4\dbch\af4\loch\f4 All variable names are case insensitive \endash  that is, Size and SiZE are regarded as the same name.  If yo\hich\af4\dbch\af4\loch\f4 u define two variables in the same function with names that differ only in the case of the letters, only one can be seen from the debugger, and there is no good way to predict which of the two will be visible.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger\:case sensitivity}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318090}\hich\af4\dbch\af4\loch\f4 Those Other \hich\af4\dbch\af4\loch\f4 Disks{\*\bkmkend _Toc495318090}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There are three other disks in your ORCA/C package that we haven't used yet.  Two are labeled "Extras Disk" and "More Extras Disk," these have a number of files that you can use if you install ORCA/C on a hard disk, but that you don't have room for o\hich\af4\dbch\af4\loch\f4 n a single 800K floppy disk.  If you are using floppy disks and happen to need one of these files, though, you aren't completely stuck: by moving some of the files that you don't happen to be using off of the program disk, you can make room for the files \hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4 ou do need.  The extras disk also has a copy of Apple's installer and installer scripts to help you set up a text-based version of ORCA/C or to install ORCA/C on a hard disk.  Installation is covered in Appendix B.  Two text files that you should eventual\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 y read are also on the extras disk.  The first, Tech.Support, gives our address, phone number, and several e-mail addresses that you can use to get in touch with us if you have any questions or problems.  The second, Release.Notes, lists changes, addition\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  and corrections to this manual.\par \hich\af4\dbch\af4\loch\f4 The last disk is the "Samples Disk."  This disk is chocked full of actual C programs, some of which illustrate useful programming techniques, some of which are used later in Chapter 4 to illustrate the various programming e\hich\af4\dbch\af4\loch\f4 nvironments on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , and some of which are just plain fun.  If you have a question about how to do something on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , you might look on the samples disk first \endash  there just might be a program on the samples disk that does exactly what yo\hich\af4\dbch\af4\loch\f4 u are trying to do.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 desktop development environment}{\rxe index1}}}{\par {\*\bkmkend index1}\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 3:  Compiler Directives\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318091}\hich\af4\dbch\af4\loch\f4 Chapter 3 \endash  Compiler Directives{\*\bkmkend _Toc495318091}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318092}\hich\af4\dbch\af4\loch\f4 What's a Compiler Directive?{\*\bkmkend _Toc495318092}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 When you learn to write programs in C, most books cover relatively straight-forward text-based programs that can be writt\hich\af4\dbch\af4\loch\f4 en using standard C.  You don't need to use compiler directives in such simple programs.  Later, as you develop more experience, you start to wish the compiler performed just a little differently.  For example, if you are trying to write a classic desk ac\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 essory on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , you need a compiler that will generate a special header.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 directives}}}{\par \hich\af4\dbch\af4\loch\f4 Compiler directives are instructions to the compiler.  They give you a way to tell the compiler to do something in a slightly different way than it normal\hich\af4\dbch\af4\loch\f4 ly does.  With compiler directives, you can ask ORCA/C to create a desk accessory, generate particular kinds of debug code, or even tell the compiler how to optimize the program.  This chapter lists the compiler directives used in ORCA/C, and briefly desc\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ibes what they are for.  While you don't need to be intimately familiar with each of the compiler directives to use the system, it is important that you know that they exist, and basically what they do.  That way, you will end up saying to yourself "let's\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 see, to make the compiler do...," rather than "gee, it's too bad the compiler can't..."\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318093}\hich\af4\dbch\af4\loch\f4 How Directives are Coded{\*\bkmkend _Toc495318093}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pragma}{\txe see also #pragma}}}{\hich\af4\dbch\af4\loch\f4 Compiler directives under ORCA/C follow a common convention.  They look like a standard C preprocessor com\hich\af4\dbch\af4\loch\f4 mand.  In all cases, ORCA/C's compiler directives start with the word pragma}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pragma}}}{\hich\af4\dbch\af4\loch\f4 , which is used in C preprocessors for directives that are unique to a given compiler.  That way, other C compiler will ignore the directives that are only used by O\hich\af4\dbch\af4\loch\f4 RCA/C, and ORCA/C will ignore directives for any other compiler.  Most of the directives can be used anywhere in the source file.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The following example shows how to save the object module to the file MYPROG and use the large memory mod\hich\af4\dbch\af4\loch\f4 el.  The function of the directives themselves will be explained later \endash  this example is simply to show you the correct format.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma keep "MYPROG"\par \hich\af2\dbch\af4\loch\f2 #pragma memorymodel 1\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318094}\hich\af4\dbch\af4\loch\f4 A Brief Summary of ORCA/C Pragmas{\*\bkmkend _Toc495318094}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The various pragmas are explained in detail later\hich\af4\dbch\af4\loch\f4  in this book.  All of the pragmas are described in Chapter 12, and many are explained in the next chapter, which outlines the various kinds of programs you can write with ORCA/C.  The table you see below gives you a brief overview of the pragmas so you k\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 ow what is available.\par \par }\pard\plain \s31\qj\fi-1800\li2160\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 pragma\tab use\par }\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 cda\tab Used to create Classic Desk Accessories (CDAs).  CDAs are the text programs, like the text control panel, that you can use from virtually all programs.  Chapter 4 discusses CDAs in more detail.\par \hich\af4\dbch\af4\loch\f4 cdev\tab Used to create Cont\hich\af4\dbch\af4\loch\f4 rol Panel Devices (CDevs).  CDevs are the small programs executed by the desktop control panel that ships with Apple's System 6.0 software.  Chapter 4 discussed CDevs.\par \hich\af4\dbch\af4\loch\f4 databank\tab When you are using the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox, there are a few cases where you need\hich\af4\dbch\af4\loch\f4  to define a function that will be called by the toolbox itself.  C expects a register called the databank register to be set in a specific way, though, and the toolbox does not set the databank register.  This pragma tells ORCA/C to set the databank regi\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ter properly, something it normally does not need to do.\par \hich\af4\dbch\af4\loch\f4 debug\tab ORCA/C generates several kinds of debug code to support the PRIZM and ORCA/Debugger source-level debuggers.  Generally, you want to turn all of the debug code on, or turn all of it off, using c\hich\af4\dbch\af4\loch\f4 ommand line switches or PRIZM check boxes.  This directive provides closer control of the debug process.\par \hich\af4\dbch\af4\loch\f4 expand\tab The C preprocessor actually changes the program the C compiler compiles.  This directive tells ORCA/C to write the output of the C preprocessor \hich\af4\dbch\af4\loch\f4 so you can see what the compiler it actually compiling; it is very handy when you are debugging preprocessor macros.\par \hich\af4\dbch\af4\loch\f4 float\tab ORCA/C generally uses SANE for floating-point calculations, but it can also use the Innovative Systems FPE card}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FPE card}}}{\hich\af4\dbch\af4\loch\f4 .  Th\hich\af4\dbch\af4\loch\f4 is directive disables certain direct calls to SANE so that code generated for the FPE card runs faster.\par \hich\af4\dbch\af4\loch\f4 ignore\tab The C language has changed over the years, and one of the changes that helps a lot is that error checking is more extensive than it used to be.  \hich\af4\dbch\af4\loch\f4 While extra error checking is generally a good thing, it can make it difficult to compile some outdated, otherwise correct, programs.  This pragma lets you tell ORCA/C to ignore some kinds of errors, making it easier to port these programs.\par \hich\af4\dbch\af4\loch\f4 keep\tab The keep p\hich\af4\dbch\af4\loch\f4 ragma lets you hard code a specific keep name in the source file for your program.\par \hich\af4\dbch\af4\loch\f4 lint\tab A lot of the safety associated with high-level languages is not present in the C language.  This directive adds extra restrictions to the C language to catch some kinds\hich\af4\dbch\af4\loch\f4  of programming mistakes that the compiler generally ignores.\par \hich\af4\dbch\af4\loch\f4 memorymodel\tab All 65816 programs must consist of chunks of code that are 64K or smaller, and ORCA/C further assumes that all arrays are structures are 64K or smaller.  The memorymodel directive mo\hich\af4\dbch\af4\loch\f4 ves all global variables to segments that are not combined with the executable code for the program, so the total size of your global variables can exceed 64K.  It also tells the compiler not to assume that arrays and structures allocated using dynamic me\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 ory are smaller than 64K.  The segment statement can also be used to break a program into smaller pieces.\par \hich\af4\dbch\af4\loch\f4 nba\tab Used to create New Button Actions (NBAs) for HyperStudio.  NBAs are discussed in Chapter 4.\par \hich\af4\dbch\af4\loch\f4 nda\tab Used to create New Desk Accessories (NDAs).  NDAs \hich\af4\dbch\af4\loch\f4 are the small programs available under the Apple menu in most desktop programs.  NDAs are discussed in Chapter 4.\par \hich\af4\dbch\af4\loch\f4 noroot\tab When ORCA/C creates a program, it actually generates two files that are used later by a part of the development system called the linke\hich\af4\dbch\af4\loch\f4 r.  One of these, called the root file, contains startup code that must be executed to set up the program.  In programs that consist of more than one separately compiled source file, you can use the noroot pragma in all of the source files except the one \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ith main; this tells the compiler not to generate startup code for the source files that don't need it, making your program a little smaller.\par \hich\af4\dbch\af4\loch\f4 optimize\tab ORCA/C is an optimizing compiler, but optimizations take time.  When you are developing a program it's ge\hich\af4\dbch\af4\loch\f4 nerally best to turn optimizations off so the compiler compiles quicker.  Once the program is finished, turn the optimizations on.  The compiler will take a lot longer to compile the program, but the program will generally be a lot smaller and faster, too\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4   This pragma lets you control the level of optimization.\par \hich\af4\dbch\af4\loch\f4 path\tab When you use an include or append statement, you can tell ORCA/C to search the ORCACDefs folder or the current folder.  In some cases, though, you may want ORCA/C to look other places for addit\hich\af4\dbch\af4\loch\f4 ional source files and header files \endash  say, on a network computer that is also used by other programmers.  The path pragma adds path names to the list of locations ORCA/C will look for a file.\par \hich\af4\dbch\af4\loch\f4 rtl\tab ORCA/C programs normally return to the program that launched\hich\af4\dbch\af4\loch\f4  them using a GS/OS Quit call.  Some kinds of programs need to exit with an RTL instruction; the most common example is an Init.  This pragma tells the compiler to use an RTL instruction to exit.  Inits, and the use of this pragma, are discussed in Chapte\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  4.\par \hich\af4\dbch\af4\loch\f4 stacksize\tab Local variables and some information used as functions are called are stored in a special area of memory called the stack.  If your program uses too much stack space, it could crash or cause other programs (like PRIZM) to crash.  By default, \hich\af4\dbch\af4\loch\f4 your program has 4K of stack space; this pragma is used to increase or decrease the stack space.\par \hich\af4\dbch\af4\loch\f4 toolparms\tab When you are using the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox, there are a few cases where you need to define a function that will be called by the toolbox itself.  The \hich\af4\dbch\af4\loch\f4 toolbox does not return function values the same way C does, though.  This directive is used to tell the C compiler to create a function that returns values using the toolbox convention.  You will also need to use the databank pragma, and it's generally a\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 good idea to use the pascal directive to switch the order of the parameters, too.\par \hich\af4\dbch\af4\loch\f4 xcmd\tab Used to create XCMDs for HyperCard.  XCMDs are discussed in Chapter 4.\par \sect }\sectd \sbkcol\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 4 \endash  Programming on the Apple II}{\fs18 \hich\af5\dbch\af4\loch\f5 GS}{\fs20 \par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318095}\hich\af4\dbch\af4\loch\f4 Chapter 4 \endash  Programming on the Apple II}{\fs28 \hich\af4\dbch\af4\loch\f4 GS}{{\*\bkmkend _Toc495318095}\hich\af4\dbch\af4\loch\f4  \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par \hich\af4\dbch\af4\loch\f4 The Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  is a very flexible machine.  With it,\hich\af4\dbch\af4\loch\f4  you can write programs in a traditional text environment, in a high-resolution graphics environment, or in a Macintosh-style desktop environment.  ORCA/C lets you write programs for all of these environments, and also supports a number of specialty forma\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 s, like desk accessories and HyperCard XCMDs.  In this chapter, we will look at each of the programming environments in turn, examining how you use ORCA/C to write programs, what tools and libraries are available, and what your programs can do in each of \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he environments.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318096}\hich\af4\dbch\af4\loch\f4 Text Programs{\*\bkmkend _Toc495318096}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text environment}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4 Text programs are by far the easiest kind of programs to write.  To write characters to the shell window}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window}}}{\hich\af4\dbch\af4\loch\f4 , you simply include the appropriate standard C library i\hich\af4\dbch\af4\loch\f4 nterfaces and use any of the standard C output routines, like printf}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printf}}}{\hich\af4\dbch\af4\loch\f4 .  Input is just as easy \endash  you use standard C library routines like gets to read characters from the keyboard.  (Standard library routines are covered in Chapter 19.  Each r\hich\af4\dbch\af4\loch\f4 outine lists the interface file you must include in your program to use the function.)  Later, when the shell is covered in detail, you will also see that text programs can be executed as a command from the shell window, or even used from the text based p\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ogramming environment.\par \hich\af4\dbch\af4\loch\f4 As an example, we'll create a simple text program to show how many payments will be needed to pay off a loan for any given interest rate, loan amount, and payment.  The variables are placed at the top of the program as constants, so \hich\af4\dbch\af4\loch\f4 there is no input.\par \hich\af4\dbch\af4\loch\f4 This is actually the first time we have created a program from scratch in this manual, so we will go over the steps involved fairly carefully.  If you aren't in the development environment, boot it now.  Pull down the File menu and use t\hich\af4\dbch\af4\loch\f4 he New command to open a new program window.  Be sure and check the languages menu - CC should be checked.  If it is not, select CC from the languages menu.  Now type in the program shown below.  If you have trouble using the editor, glance through Chapte\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  7 for help.\par \hich\af4\dbch\af4\loch\f4 (Note:  Although the point of this example is to show you how to type in a program from scratch, we should point out that the following example is also on the samples disk in the Text.Samples folder.)\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /****************************************\hich\af2\dbch\af4\loch\f2 ********\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  Finance\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  This program prints the balance on an\par \hich\af2\dbch\af4\loch\f2 *  account for monthly payments, along with the\par \hich\af2\dbch\af4\loch\f2 *  total amount paid so far.\par \hich\af2\dbch\af4\loch\f2 *\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 *************************************************/\par \par \hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \par \hich\af2\dbch\af4\loch\f2 #define LOANAMOUNT 10000.0       /* amou\hich\af2\dbch\af4\loch\f2 nt of the loan */\par \hich\af2\dbch\af4\loch\f2 #define PAYMENT    600.0         /* monthly payment */\par \hich\af2\dbch\af4\loch\f2 #define INTEREST   15            /* yearly interest (as %) */\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 float balance,                   /* amount left to pay */\par \hich\af2\dbch\af4\loch\f2       monthlyInterest,           /* multipli\hich\af2\dbch\af4\loch\f2 er for interest */\par \hich\af2\dbch\af4\loch\f2       paid ;                     /* total amount paid */\par \hich\af2\dbch\af4\loch\f2 int   month;                     /* month number */\par \par \hich\af2\dbch\af4\loch\f2 /* set up the initial values */\par \hich\af2\dbch\af4\loch\f2 balance = LOANAMOUNT;\par \hich\af2\dbch\af4\loch\f2 paid = month = 0;\par \hich\af2\dbch\af4\loch\f2 monthlyInterest = 1.0 + INTEREST/1200.0;\par \par \hich\af2\dbch\af4\loch\f2 /* write out \hich\af2\dbch\af4\loch\f2 the conditions */\par \hich\af2\dbch\af4\loch\f2 printf("Payment schedule for a loan of %10.2f\\n", LOANAMOUNT);\par \hich\af2\dbch\af4\loch\f2 printf("with monthly payments of %5.2f at an\\n", PAYMENT);\par \hich\af2\dbch\af4\loch\f2 printf("interest rate of %d%%.\\n\\n", INTEREST);\par \hich\af2\dbch\af4\loch\f2 printf("          month        balance    amount paid\\n");\par \hich\af2\dbch\af4\loch\f2 printf(" \hich\af2\dbch\af4\loch\f2          -----        -------    -----------\\n");\par \par \hich\af2\dbch\af4\loch\f2 /* check for payments that are too small */\par \hich\af2\dbch\af4\loch\f2 if (balance*monthlyInterest - balance >= PAYMENT)\par \hich\af2\dbch\af4\loch\f2    printf("The payment is too small!");\par \hich\af2\dbch\af4\loch\f2 else\par \hich\af2\dbch\af4\loch\f2    while (balance > 0) \{\par \hich\af2\dbch\af4\loch\f2       /* add in the interest */\par \hich\af2\dbch\af4\loch\f2       bal\hich\af2\dbch\af4\loch\f2 ance *= monthlyInterest;\par \hich\af2\dbch\af4\loch\f2       /* make a payment */\par \hich\af2\dbch\af4\loch\f2       if (balance > PAYMENT) \{\par \hich\af2\dbch\af4\loch\f2          balance -= PAYMENT;\par \hich\af2\dbch\af4\loch\f2          paid += PAYMENT;\par \hich\af2\dbch\af4\loch\f2          \}\par \hich\af2\dbch\af4\loch\f2       else \{\par \hich\af2\dbch\af4\loch\f2          paid += balance;\par \hich\af2\dbch\af4\loch\f2          balance = 0;\par \hich\af2\dbch\af4\loch\f2          \}\par \hich\af2\dbch\af4\loch\f2       /* update the month number */\par \hich\af2\dbch\af4\loch\f2       ++month;\par \hich\af2\dbch\af4\loch\f2       /* write the new statistics */\par \hich\af2\dbch\af4\loch\f2       printf("%15d %14.2f %14.2f\\n", month, balance, paid);\par \hich\af2\dbch\af4\loch\f2       \}\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text environment}}}{\hich\af4\dbch\af4\loch\f4 Once the program is typed in, you will need to save it to a work disk.  The best choice is a second disk dr\hich\af4\dbch\af4\loch\f4 ive, whether that disk drive is a 3.5" drive or a 5.25" drive.  Don't be concerned about the amount of disk space available \endash  a 5.25" disk drive has plenty of room for programs.  The program disk \endash  that is, the disk with the compiler and linker on it \endash  mu\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 t be in a disk drive when you compile the program, and the disk where you save the program also must be in a drive.  The choice of a file name is important, too.  Because of the way the ORCA system deals with multi-lingual compiles and partial compiles, a\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 d because of some other naming conventions we won't go into now, it's best to pick a name for your program that is ten characters or less, then add .CC to the name.  For this particular program, save it as Finance.cc.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to memory command}}}{\hich\af4\dbch\af4\loch\f4 With\hich\af4\dbch\af4\loch\f4  the program safely on a disk, you are ready to compile it.  As with the bull's eye program, you compile the program using Compile to Memory command from the Run menu.  If you didn't type the program in properly, an attention box will appear with the erro\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  message.  When you click OK, you will find the cursor on the exact spot where the error occurred \endash  simply make the correction and recompile.  Once the program compiles, it will print the results in the shell window.  Unless you shrink the window with you\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  program, you won't see the source window, but the output is still there.  You will need to move the shell window and grow it to see all of the results.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text environment}}}{\hich\af4\dbch\af4\loch\f4 One of the classic interactive computer games of all time will serve as our se\hich\af4\dbch\af4\loch\f4 cond example, giving us a chance to explore text input and accessing the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.  In this simple game, the computer will pick a distance to a target, and you pick a firing angle for a cannon.  The computer then lets you know if you hit the targ\hich\af4\dbch\af4\loch\f4 et, or if you missed, by how much.  The listing is show below.  Go ahead and type it in, but don't compile it yet.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /************************************************\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  Artillery\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  This classic interactive text game lets you\par \hich\af2\dbch\af4\loch\f2 *  pick the angle of your \hich\af2\dbch\af4\loch\f2 artillery gun in\par \hich\af2\dbch\af4\loch\f2 *  an attempt to knock out the enemy position.\par \hich\af2\dbch\af4\loch\f2 *  The computer picks a secret distance.  When\par \hich\af2\dbch\af4\loch\f2 *  you fire, you will be told how much you\par \hich\af2\dbch\af4\loch\f2 *  missed by, and must fire again.  The object\par \hich\af2\dbch\af4\loch\f2 *  is to hit the target with the fewest shells.\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *****\hich\af2\dbch\af4\loch\f2 *******************************************/\par \par \hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 #include <time.h>\par \hich\af2\dbch\af4\loch\f2 #include <math.h>\par \hich\af2\dbch\af4\loch\f2 #include <misctool.h>\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 #define FALSE 0                 /* boolean constants */\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 #define TRUE  1\par \par \hich\af2\dbch\af4\loch\f2 #define BLASTRADIUS 50.0     /* max dis\hich\af2\dbch\af4\loch\f2 tance from target for a hit */\par \hich\af2\dbch\af4\loch\f2 #define DTR         0.01745329  /* convert from degrees to radians */\par \hich\af2\dbch\af4\loch\f2 #define VELOCITY    434.6       /* muzzle velocity */\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 int main (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 float angle,                    /* angle */\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2       distance,                 /* di\hich\af2\dbch\af4\loch\f2 stance to the target */\par \hich\af2\dbch\af4\loch\f2       flightTime,               /* time of flight */\par \hich\af2\dbch\af4\loch\f2       x,                        /* distance to impact */\par \hich\af2\dbch\af4\loch\f2       vx,vy;                    /* x, y velocities */\par \hich\af2\dbch\af4\loch\f2 int   done,                     /* is there a hit, yet? */\par \hich\af2\dbch\af4\loch\f2       tri\hich\af2\dbch\af4\loch\f2 es,                    /* number of shots */\par \hich\af2\dbch\af4\loch\f2       i;                        /* loop variable */\par \par \hich\af2\dbch\af4\loch\f2 /* choose a distance to the target */\par \hich\af2\dbch\af4\loch\f2 srand((int) time(NULL));\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 100; ++i)\par \hich\af2\dbch\af4\loch\f2    rand();\par \hich\af2\dbch\af4\loch\f2 distance = rand()/5.55373;\par \par \hich\af2\dbch\af4\loch\f2 /* not done yet... */\par \hich\af2\dbch\af4\loch\f2 done = F\hich\af2\dbch\af4\loch\f2 ALSE;\par \hich\af2\dbch\af4\loch\f2 tries = 1;\par \par \hich\af2\dbch\af4\loch\f2 /* shoot 'til we hit it */\par \hich\af2\dbch\af4\loch\f2 do \{\par \hich\af2\dbch\af4\loch\f2    /* get the firing angle */\par \hich\af2\dbch\af4\loch\f2    printf("Firing angle: ");\par \hich\af2\dbch\af4\loch\f2    scanf("%f", &angle);\par \par \hich\af2\dbch\af4\loch\f2    /* compute the muzzle velocity in x, y */\par \hich\af2\dbch\af4\loch\f2    angle *= DTR;\par \hich\af2\dbch\af4\loch\f2    vx = cos(angle)*VELOCITY;\par \hich\af2\dbch\af4\loch\f2    vy = sin(angle)*VELOCITY;\par \par \hich\af2\dbch\af4\loch\f2  \hich\af2\dbch\af4\loch\f2   /* find the time of flight */\par \hich\af2\dbch\af4\loch\f2    /* (velocity = acceleration*flightTime, two trips) */\par \hich\af2\dbch\af4\loch\f2    flightTime = 2.0*vy/32.0;\par \par \hich\af2\dbch\af4\loch\f2    /* find the distance */\par \hich\af2\dbch\af4\loch\f2    /* (distance = velocity*flightTime) */\par \hich\af2\dbch\af4\loch\f2    x = vx*flightTime;\par \par \hich\af2\dbch\af4\loch\f2    /* see what happened... */\par \hich\af2\dbch\af4\loch\f2    if (fabs(dis\hich\af2\dbch\af4\loch\f2 tance-x) < BLASTRADIUS) \{\par \hich\af2\dbch\af4\loch\f2       done = TRUE;\par \hich\af2\dbch\af4\loch\f2       printf("A hit, after %d", tries);\par \hich\af2\dbch\af4\loch\f2       if (tries == 1)\par \hich\af2\dbch\af4\loch\f2         printf(" try!\\n");\par \hich\af2\dbch\af4\loch\f2       else\par \hich\af2\dbch\af4\loch\f2         printf(" tries!\\n");\par \hich\af2\dbch\af4\loch\f2       switch (tries) \{\par \hich\af2\dbch\af4\loch\f2          case 1:\par \hich\af2\dbch\af4\loch\f2             printf("(A lucky shot...)\\n");\par \hich\af2\dbch\af4\loch\f2             break;\par \hich\af2\dbch\af4\loch\f2          case 2:\par \hich\af2\dbch\af4\loch\f2             printf("Phenomenal shooting!\\n");\par \hich\af2\dbch\af4\loch\f2             break;\par \hich\af2\dbch\af4\loch\f2          case 3:\par \hich\af2\dbch\af4\loch\f2             printf("Good shooting.\\n");\par \hich\af2\dbch\af4\loch\f2             break;\par \hich\af2\dbch\af4\loch\f2          otherwise:\par \hich\af2\dbch\af4\loch\f2             printf("Practice makes perfect - try again.\\n"\hich\af2\dbch\af4\loch\f2 );\par \hich\af2\dbch\af4\loch\f2          \}\par \hich\af2\dbch\af4\loch\f2       \}\par \hich\af2\dbch\af4\loch\f2    else if (distance > x)\par \hich\af2\dbch\af4\loch\f2       printf("You were short by %d feet.\\n", (int)(distance-x));\par \hich\af2\dbch\af4\loch\f2    else\par \hich\af2\dbch\af4\loch\f2       printf("You were over by %d feet.\\n", (int)(x-distance));\par \hich\af2\dbch\af4\loch\f2    ++tries;\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 while (!done);\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text environment}}}{\hich\af4\dbch\af4\loch\f4 One of the \hich\af4\dbch\af4\loch\f4 problems with interactive text programs is that, if you can't see the input, you can't run the program.  Before compiling the artillery program, be sure to arrange your windows so you can see the shell window.\par \hich\af4\dbch\af4\loch\f4 By now you've seen that the shell window will \hich\af4\dbch\af4\loch\f4 open automatically when the program starts to compile, but in a case like this one, you need to open the shell window and resize it before you start to compile the program.  There's nothing special about the shell window the system opens for you, so you c\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 uld just create a new window and change the language type to Shell.  You can also open the system's shell window early, though, using the Window menu's Shell Window command.\par \hich\af4\dbch\af4\loch\f4 For the artillery program, you might try leaving the program's window at the full \hich\af4\dbch\af4\loch\f4 width of the screen, but shortening it so the bottom third of the screen is free.  The shell window can be sized to fit in the bottom third of the screen.  This arrangement works very well when both the program and it's output use most of the available sc\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 een width.\par \hich\af4\dbch\af4\loch\f4 When you run the program, you will see a prompt for the firing angle followed by a black box.  This black box is the cursor used by interactive text programs.  It lets you know that the input is being read by a program, so normal desktop editing\hich\af4\dbch\af4\loch\f4  features cannot be used.  If you make a mistake, you can use the delete key to back space over your input.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318097}\hich\af4\dbch\af4\loch\f4 Library Functions{\*\bkmkend _Toc495318097}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4 Your most important resource for writing programs that run in the text environment are the library functions.  T\hich\af4\dbch\af4\loch\f4 hese are available in any program you write \endash  to use them, you simply include the appropriate header file.  Library functions include disk access routines like }{\fs18 \hich\af2\dbch\af4\loch\f2 fopen}{\hich\af4\dbch\af4\loch\f4 , }{\fs18 \hich\af2\dbch\af4\loch\f2 fscanf}{\hich\af4\dbch\af4\loch\f4 , and }{\fs18 \hich\af2\dbch\af4\loch\f2 fprintf}{\hich\af4\dbch\af4\loch\f4 ; mathematical functions like }{\fs18 \hich\af2\dbch\af4\loch\f2 cos}{\hich\af4\dbch\af4\loch\f4 , }{\fs18 \hich\af2\dbch\af4\loch\f2 atan}{\hich\af4\dbch\af4\loch\f4 , and }{\fs18 \hich\af2\dbch\af4\loch\f2 tan}{\hich\af4\dbch\af4\loch\f4 ; and many others, lik\hich\af4\dbch\af4\loch\f4 e }{\fs18 \hich\af2\dbch\af4\loch\f2 malloc}{\hich\af4\dbch\af4\loch\f4  and }{\fs18 \hich\af2\dbch\af4\loch\f2 free}{\hich\af4\dbch\af4\loch\f4 .  These functions are described in Chapter 19.\par \hich\af4\dbch\af4\loch\f4 If you have used many C compilers, you know that the libraries vary from one compiler to another.  This is because the C libraries have evolved somewhat with time, and because the complete se\hich\af4\dbch\af4\loch\f4 t of libraries is so large that some implementors don't bother with a few of the obscure functions.  Our libraries are drawn from four sources:  the ANSI C standard, APW C}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW C}}}{\hich\af4\dbch\af4\loch\f4 , and a few we added that are unique to ORCA/C.  With a few minor excep\hich\af4\dbch\af4\loch\f4 tions, all of the ANSI C libraries are implemented in ORCA/C.  APW C is an older C compiler written by Apple Computer.  It included a few extensions to the standard C libraries to deal with the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  To make it easier for people with APW C to move t\hich\af4\dbch\af4\loch\f4 heir programs to ORCA/C, we have implemented these extensions to the standard C libraries exactly as APW C did.  There are also a few libraries that we added to ORCA/C to make it easier to use the toolbox.\par \hich\af4\dbch\af4\loch\f4 For a complete description of the ORCA/C libraries\hich\af4\dbch\af4\loch\f4 , as well as examples on how to use them, see Chapter 19.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318098}\hich\af4\dbch\af4\loch\f4 Console Control Codes{\*\bkmkend _Toc495318098}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 console device}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 output}}}{\hich\af4\dbch\af4\loch\f4 When you are writing text programs that will execute on a text screen, one of the things you should know about are\hich\af4\dbch\af4\loch\f4  the console control codes.  These are special characters that, when written to the standard text output device, cause specific actions to be taken.  Using console control codes, you can beep the speaker, move the cursor, or even turn the cursor off.  The\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 consol control codes are covered in Appendix D.\par \hich\af4\dbch\af4\loch\f4 Keep in mind that these console control codes only work with the text screen.  While you can write text programs and execute them from the desktop, you cannot use these console control codes to control the ou\hich\af4\dbch\af4\loch\f4 tput in the shell window.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318099}\hich\af4\dbch\af4\loch\f4 Programming in Pieces{\*\bkmkend _Toc495318099}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart libraries}\hich\af4\dbch\af4\loch\f4 When you are writing small, self-contained programs, the program is generally written in a single source file, and compiled as a single piece.  There are two occasions when you might want to break a program u\hich\af4\dbch\af4\loch\f4 p into more than one piece.\par \hich\af4\dbch\af4\loch\f4 Most programmers find that they write the same sorts of programs over and over.  Some people like to write games, others use their computers for engineering calculations, and some write programs to work on data from their busine\hich\af4\dbch\af4\loch\f4 ss.  In any case, as you start to write more and more programs, you may find that you are using a few subroutines in several programs.  You can, of course, cut the subroutines from one program file and paste it into the new one.  There is another alternat\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ve, though, that you should consider.  You can create a library of your commonly used subroutines, and compile it once.  From that point on, to use your subroutines in a new program, you simply need to place a }{\fs18 \hich\af2\dbch\af4\loch\f2 #include}{\hich\af4\dbch\af4\loch\f4  directive at the top of your program.\hich\af4\dbch\af4\loch\f4   This cuts down on the amount of disk space you need for your program, since each program's source file is shorter.  It also cuts down on compile times, since the compiler doesn't need to recompile the subroutine each time you change your program.\par \hich\af4\dbch\af4\loch\f4 Splitti\hich\af4\dbch\af4\loch\f4 ng a program up into a number of small sections, each with subroutines that perform similar functions, is a popular way to organize a large program to make it easier to understand.  This cuts down on the size of each individual file the compiler needs to \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ompile, reducing the time required to recompile a program.  It also reduces the amount of memory needed to compile a large program.\par \hich\af4\dbch\af4\loch\f4 To get a firm grasp on separate compilation, we will create a library of trigonometric functions, something that would be us\hich\af4\dbch\af4\loch\f4 eful for an engineering student.  We will implement three trig functions:  cosecant, secant, and cotangent.  These functions are the inverses of the common trig functions sine, cosine and tangent.  The three functions will appear in a separately compiled \hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 odule.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 input}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 output}}}{\hich\af4\dbch\af4\loch\f4 A separately compiled module has many similarities to a program, but there are some important differences, too.  The most important is that a separately compiled module does not have a function called }{\fs18 \hich\af2\dbch\af4\loch\f2 main}{\hich\af4\dbch\af4\loch\f4 .  In any C pro\hich\af4\dbch\af4\loch\f4 gram, }{\fs18 \hich\af2\dbch\af4\loch\f2 main}{\hich\af4\dbch\af4\loch\f4  is the first function called.  A separately compiled module is called from another module or from a C program, so it should not have a function by that name.\par \hich\af4\dbch\af4\loch\f4 When you write a module, you need to write two separate source files.  The first part i\hich\af4\dbch\af4\loch\f4 s the header.  It is used by other modules and programs, and tells them what functions and variables exist within the module.  By convention, we generally name the header file with a .h at the end of the file name.  In our trig example, we will name the i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 terface file Trig.h.  The header file, shown below, has one definition for each of the three functions we will create.  Also, note how the __TRIG__ macro is defined:  it causes the definitions to be skipped if they have already been defined.  That helps i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  cases where you may use your module both from another interface file and from the main program.  By automatically skipping the definitions if they have already been defined, you avoid duplicate definition errors.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #ifndef __TRIG__\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 #define __TRIG__\par \par \hich\af2\dbch\af4\loch\f2 extern\hich\af2\dbch\af4\loch\f2  double secant(double r);\par \hich\af2\dbch\af4\loch\f2 /* compute the secant of the argument */\par \hich\af2\dbch\af4\loch\f2 extern double cosecant(double r);\par \hich\af2\dbch\af4\loch\f2 /* compute the cosecant of the argument */\par \hich\af2\dbch\af4\loch\f2 extern double cotangent(double r);\par \hich\af2\dbch\af4\loch\f2 /* compute the cotangent of the argument */\par \par \hich\af2\dbch\af4\loch\f2 #endif\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If you have never used A\hich\af4\dbch\af4\loch\f4 NSI C, it may seem a bit odd to see the type of the parameter in the argument list.  This is a new feature in ANSI C called function prototypes.  It allows the compiler to check to make sure that when you call one of these functions you pass the correct n\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 mber and type of parameters.  Using function prototypes in all of your interface files can cut your debugging time enormously, since the compiler can catch errors that cause crashes in programs compiled with older compilers.  We highly recommend their use\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  but ANSI C does not require the use of function prototypes.\par \hich\af4\dbch\af4\loch\f4 The second part of a separately compiled module is the actual executable code and variables.  It looks just like a program, but it doesn't have a function called }{\fs18 \hich\af2\dbch\af4\loch\f2 main}{\hich\af4\dbch\af4\loch\f4 .  By careful use of the stor\hich\af4\dbch\af4\loch\f4 age class static (explained fully in Chapter 15), you can create functions and variables that can only be used from within the module, and that won't conflict with anything from another module by the same name.  While it is not strictly required by C, we \hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ecommend that you always hide any function or global variable that does not appear in the interface file.\par \hich\af4\dbch\af4\loch\f4 The example below shows the implementation part of the trig module.  Go ahead and type it in, and save it using the file name Trig.cc.  While you can \hich\af4\dbch\af4\loch\f4 choose your own names, just as with a program, the examples in the rest of this section assume you have used the file names Trig.cc and Trig.h.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par \par \hich\af2\dbch\af4\loch\f2 double secant(double r)\par \hich\af2\dbch\af4\loch\f2 /*compute the secant of the argument*/\par \par \{\par \hich\af2\dbch\af4\loch\f2 return 1.0/cos(r);\par \}\par \par \hich\af2\dbch\af4\loch\f2 doub\hich\af2\dbch\af4\loch\f2 le cosecant(double r)\par \hich\af2\dbch\af4\loch\f2 /*compute the cosecant of the argument*/\par \par \{\par \hich\af2\dbch\af4\loch\f2 return 1.0/sin(r);\par \}\par \par \hich\af2\dbch\af4\loch\f2 double cotangent(double r)\par \hich\af2\dbch\af4\loch\f2 /*compute the cotangent of the argument*/\par \par \{\par \hich\af2\dbch\af4\loch\f2 return 1.0/tan(r);\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 Compiling a module is a little trickier than compilin\hich\af4\dbch\af4\loch\f4 g a program.  First, modules must be compiled to disk \endash  you will need to link the object module into you program, so you must ask the compiler to save the object module to disk.  Second, modules are not programs, so you cannot link or execute them.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 ebugger\:libraries}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to disk command}}}{\hich\af4\dbch\af4\loch\f4 The first step in compiling the module is to pull down the Run menu and select the Compile command.  When the compile dialog appears, turn off the Link after compiling option by cl\hich\af4\dbch\af4\loch\f4 icking on the box to the left of the option name.  There shouldn't be an X in the box when you're done.  You can leave the debug option on if you like, but if you are creating a library, you should probably turn debugging off after the library has been de\hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 ugged.  Now click on the Set Options button.  To compile the unit, use the Compile to Disk command from the Run menu \endash  Compile to Memory should not be used with modules.\par \hich\af4\dbch\af4\loch\f4 The last step is to delete the .root file created by the compiler.  If you forget this\hich\af4\dbch\af4\loch\f4  step, the program will still work, but it will be a bit larger than it needs to be.  In our example, the .root file is called Trig.root.  Use the Delete command from the Finder or the ORCA shell to delete this file.  You could also use the noroot pragma,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 described in Chapter 12, to avoid creating a root file in the first place.\par \hich\af4\dbch\af4\loch\f4 Eventually, we will make a library from this module, but for now, let's treat the module as a part of a separately compiled program, just to see how that is done.  Start by opening \hich\af4\dbch\af4\loch\f4 a new window and typing in the program shown below.  Be sure to check to make sure the language is CC.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par \hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 #include "trig.h"\par \par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 #define pi 3.14159265358979323846\par \par \hich\af2\dbch\af4\loch\f2 int main (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 double angle;\par \par \hich\af2\dbch\af4\loch\f2 angle = pi/20.0;\par \hich\af2\dbch\af4\loch\f2 printf("%2\hich\af2\dbch\af4\loch\f2 5s%25s%25s\\n", "secant", "cosecant", "cotangent");\par \hich\af2\dbch\af4\loch\f2 while (angle < pi/2.0) \{\par \hich\af2\dbch\af4\loch\f2    printf("%25e%25e%25e\\n", secant(angle), cosecant(angle), \par \hich\af2\dbch\af4\loch\f2       cotangent(angle));\par \hich\af2\dbch\af4\loch\f2    angle += pi/20.0;\par \hich\af2\dbch\af4\loch\f2    \}\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to disk command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link c\hich\af4\dbch\af4\loch\f4 ommand}}}{\hich\af4\dbch\af4\loch\f4 Save the file as Table.cc.  Go ahead and compile this program, too.  As before, you should use the Compile to Disk command, and you should not link after compiling.  Once compiled, you will need to link the two pieces together.  To do this, pull d\hich\af4\dbch\af4\loch\f4 own the Run menu and use the Link command.  Type the names of the two files into the Object File line; the names used in our example would be "table trig".  It is important to place the name of the program first, and to separate the names with a space.  I\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  addition, you must place the name of the output file \endash  TABLE in this example \endash  in the Keep Name line.  The completed dialog looks like the one below.  Once the file names have been typed in, click on the Link button to link the programs together.  Once t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e program has been linked, it will execute automatically.\par {\shp{\*\shpinst\shpleft1584\shptop250\shpright6480\shpbottom2919\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz2\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex48\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw510\pich278\picwgoal10200\pichgoal5560\macpict\bliptag2096632452\blipupi72{\*\blipuid 7cf81284b6ada90767c57fcc190e8d22}14a200150025012b0223001102ff0c00ffffffff002500000015000002230000012b00000000000000a0008200a0303900a0008e001e0001000a0000000002e70252009a000000ff8814001500250033022a000000040000000000480000004800000010002000030008000000000000000000000000001500250033022300150025003302230000001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff00608100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff00608100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff00608100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff00608100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff00bd8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff00bd8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff00f68100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff00f68100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff00ed8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff00ed8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff01028100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff01028100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff00c98100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff00c98100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff00278100830001ffff81008300faff8100830001ffff81008300faff8100830001ffff81008300faff00278100830001ffff81008300faff8100830001ffff81008300faff8100830001ffff81008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff009a000000ff8814003300250051022a000000040000000000480000004800000010002000030008000000000000000000000000003300250051022300330025005102230000003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff00c3010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff00c3010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff00d8010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff00d8010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff0162010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff0162010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff01bf010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff01bf010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff0192010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff0192010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff01aa010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff01aa010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff015f010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff015f010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff0060010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff0060010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff009a000000ff881400510025006f022a00000004000000000048000000480000001000200003000800000000000000000000000000510025006f022300510025006f02230000003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff009c010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff009c010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff00ab010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff00ab010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff0111010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff0111010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff0165010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff0165010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff014d010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff014d010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff015c010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff015c010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff0129010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff0129010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff0057010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff0057010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff009a000000ff8814006f0025008d022a000000040000000000480000004800000010002000030008000000000000000000000000006f0025008d0223006f0025008d02230000003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff0141010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff0141010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff01c2010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff01c2010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff0279010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff0279010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff020a010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff020a010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff0216010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff0216010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff0255010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff0255010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff0243010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff0243010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff0054010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff0054010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff009a000000ff8814008d002500ab022a000000040000000000480000004800000010002000030008000000000000000000000000008d002500ab0223008d002500ab02230000003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff00db010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff00db010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff0114010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff0114010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff02b8010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff02b8010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff0375010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0375010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0318010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0318010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0351010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff0351010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff02ac010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff02ac010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff005a010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff005a010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff009a000000ff881400ab002500c9022a00000004000000000048000000480000001000200003000800000000000000000000000000ab002500c9022300ab002500c9022300000111010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff0111010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff017a010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff017a010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff02e2010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff02e2010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff03e4010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff03e4010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff0369010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff0369010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff03c0010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff03c0010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff02b2010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff02b2010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff004e010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff004e010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff0135010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff0135010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff009a000000ff881400c9002500e7022a00000004000000000048000000480000001000200003000800000000000000000000000000c9002500e7022300c9002500e70223000001aa010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff01aa010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff0180010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff0180010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff01b9010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff01b9010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0150010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff0150010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff004e010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff004e010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff0108010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff0108010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff01ad010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff01ad010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff02af010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff02af010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff0339010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff0339010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff009a000000ff881400e700250105022a00000004000000000048000000480000001000200003000800000000000000000000000000e700250105022300e7002501050223000002e5010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff02e5010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff032a010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff032a010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff027c010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff027c010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff007b010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff007b010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff0132010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff0132010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff009a000000ff8814010500250123022a00000004000000000048000000480000001000200003000800000000000000000000000001050025012302230105002501230223000001a4010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff01a4010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff025b010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff025b010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff0303010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff0303010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff02bb010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff02bb010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff031b010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff031b010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff0249010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff0249010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff00a5010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff00a5010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff009a000000ff881401230025012b022a00000004000000000048000000480000001000200003000800000000000000000000000001230025012b022301230025012b02230000003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff00a0008f00a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx1583\posy249\absh2669\absw4896\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex48\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw510\pich278\picwgoal10200\pichgoal5560\macpict\bliptag2096632452\blipupi72{\*\blipuid 7cf81284b6ada90767c57fcc190e8d22}14a200150025012b0223001102ff0c00ffffffff002500000015000002230000012b00000000000000a0008200a0303900a0008e001e0001000a0000000002e70252009a000000ff8814001500250033022a000000040000000000480000004800000010002000030008000000000000000000000000001500250033022300150025003302230000001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff00608100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff00608100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff8100ad0001fffffa0001fffff60001fffff600fdffed0001ffff81009400faff00608100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff00608100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff8100ad0001ffffed0001fffff70005ffff0000fffff60001ffff81008c00faff00bd8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff00bd8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff8100ad0001fffffb00fefffe00fcfffe0005ffff0000fffffb0007ffff0000ffff0000fcfffe00fcfffe00fefffd00fdfffe00fcfffd00fdff8100ac00faff00f68100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff00f68100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe0011ffff0000ffff0000ffff0000ffff0000ffff8100a900faff00ed8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff00ed8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff8100ad0001fffffa0001fffffe0007ffff0000ffff0000fdfff9000dffff0000ffff0000ffff0000fffffe0001fffffb0001fffffe000dffff0000ffff0000ffff0000fffffe00fdff8100ac00faff01028100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff01028100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff8100ad0001fffffa0001fffffe000cffff0000ffff0000ffff00fffffa000dffff0000ffff0000ffff0000fffffe0004ffff00fffffe0001fffffe000dffff0000ffff0000ffff0000fffffb0001ffff8100ad00faff00c98100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff00c98100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff8100ad00fbff010000fdff0f0000ffff0000ffff0000ffff0000fffffa00fdfffe00fcfffc00fefffe00fdfffe00fdfffe0005ffff0000fffffe00fdff8100ac00faff00278100830001ffff81008300faff8100830001ffff81008300faff8100830001ffff81008300faff00278100830001ffff81008300faff8100830001ffff81008300faff8100830001ffff81008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff009a000000ff8814003300250051022a000000040000000000480000004800000010002000030008000000000000000000000000003300250051022300330025005102230000003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff00c3010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff00c3010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff010000edfffd00feff010000f8ff010000e3fffc00feff010000fdfffe00d7ff010000ecff010000fafffe00e1ff01000081ff81ffe1ff010000efff010000faff00d8010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff00d8010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff010000eeff090000ffff0000ffff0000e3ff010000f8ff010000f4ff010000d7ff010000fbff010000f4ff010000f9ff010000f0ff01000081ff81ffd2ff010000efff010000faff0162010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff0162010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff010000eeff070000ffff0000fffffc00fcfffe00fefffd00fdfffd00fefffc00faff010000fcfffe00fcff010000fcfffd00feff010000e5ff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc00feff060000ff0000fffffe00fdfffc0081ff81ffeaff010000efff010000faff01bf010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff01bf010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff110000ffff0000ffff0000ffff0000ffff0000feff010000f8fffd00fdff010000fcff010000fdff050000ffff0000e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcfffe00fcff010000feff050000ffff000081ff81ffeaff010000efff010000faff0192010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff0192010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff030000fffffb0003ffff0000faff010000f8ff010000fbff010000fcff010000fdfffb00e1ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fbff010000feff050000ffff000081ff81ffeaff010000efff010000faff01aa010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff01aa010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff010000eeff0d0000ffff0000ffff0000ffff0000fcff050000ffff0000fbff050000ffff0000feff040000ff0000fbff010000fbff010000fcff010000fdff010000ddff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff080000ff0000ffff0000fbff010000fdfffc0081ff81ffeaff010000efff010000faff015f010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff015f010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff010000edfffd00fefffc00feff040000ff0000fefffd00fdfffd00fcfffe00faff010000fcfffd00fefffd00fdfffd00feff010000e5ff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd00f8fffe00feff010000fcfffd0002ffff00feff01000081ff81ffeaff010000efff010000faff0060010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff0060010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff010000ddfffe00a7ff010000bafffd0081ff81ffe9ff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff009a000000ff881400510025006f022a00000004000000000048000000480000001000200003000800000000000000000000000000510025006f022300510025006f02230000003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff009c010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff009c010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff010000eeff010000feff010000e3ff0000feff010000beff010000ecff010000fafffe0081ff81ffbfff010000efff010000faff00ab010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff00ab010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff010000eeff050000ffff0000e2ff050000ffff0000beff010000fbff010000f4ff010000f9ff01000081ff81ffbfff010000efff010000faff0111010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff0111010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff010000eeff040000ff0000fcfffd00fdfffd00fefffc00fafffe0002ff0000fefffc0000fffa00fdfffd00feff010000dbff010000fcfffc00fdfffc0001fffffc00fcff010000fcfffd0081ff81ffc8ff010000efff010000faff0165010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff0165010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff010000eefffd00fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbfffb0018ffff0000ffff0000ff0000ff0000ff0000ffff0000ffff0000d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff000081ff81ffc9ff010000efff010000faff014d010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff014d010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff010000eeff040000ff0000fdfffb0001fffffb0007ffff0000ffff0000fbff020000fffe0012ffff0000ffff0000ff0000ff0000ff0000fffffb00d7ff010000fbff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb0081ff81ffc9ff010000efff010000faff015c010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff015c010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff010000eeff050000ffff0000feff010000fbff010000fbff050000ffff0000fbff1a0000ffff0000ffff0000ffff0000ff0000ff0000ff0000ffff0000d3ff010000fbff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff01000081ff81ffc5ff010000efff010000faff0129010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff0129010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff010000eeff010000feff010000fefffd00fdfffd00fefffc00faff010000feff0000fefffc0008ff0000ff0000ff0000fefffd00feff010000dbff010000fafffe00fdfffc0001fffffc00fdfffd00fdfffd0081ff81ffc8ff010000efff010000faff0057010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff0057010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff010000d5ff010000aeff01000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff009a000000ff8814006f0025008d022a000000040000000000480000004800000010002000030008000000000000000000000000006f0025008d0223006f0025008d02230000003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff0141010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff0141010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff010000d9fffc00edfffe00feff010000ecff010000f7fffd00fefffc00fdfffd00fdfffd00f9fffd00faff010000fafffd00fefffc00fefffc00fdfffd00fefffc00fdfffd00fefffc00fefffd0081ff9bff010000efff010000faff01c2010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff01c2010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000f5ff010000d9ff050000ffff0000efff010000e5ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff0279010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff0279010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff010000eeff010000fbfffe00fefffc00feff040000ff0000fefffc000effff0000ff0000ffff0000ffff0000fbff0c0000ffff0000ffff0000ff0000fefffd00fefffc0001fffffe00feff090000ffff0000ffff0000f9ff010000fcff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000fbff050000ffff0000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff010000fbff01000081ffa0ff010000efff010000faff020a010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff020a010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff010000eeff010000faff010000feff070000ffff0000fffffe00fdff070000ffff0000fffffe00fdff050000ffff0000fbfffc00fefffe00fdff050000ffff0000feff010000fcff010000fdfffd00f4ff010000f8ff070000ffff0000fffffc00feff010000fbff050000ffff0000fbff010000f7ff010000f9ff010000fdfffc00fefffc00feff070000ffff0000fffffc00fcff010000fdfffd00fdfffd0081ff9bff010000efff010000faff0216010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff0216010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fcff020000fffe00fbff010000fbff010000fcfffb00feff010000fcff010000fcff010000f3ff010000f8ff0c0000ffff0000ffff0000ff0000feff010000fbfffb00fbff010000f7ff010000f9ff010000fdff0c0000ffff0000ffff0000ff0000fefffb0006ffff0000ff0000fcff010000fdff010000f8ff01000081ff9cff010000efff010000faff0255010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff0255010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff010000eeff010000faff010000feff090000ffff0000ffff0000fcff090000ffff0000ffff0000fbff040000ff0000fbff010000fbff010000fcff010000faff010000fcff010000fdfffd00f4ff010000f8ff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fbff050000ffff0000fbff010000f9ff010000fdff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000fcff050000ffff000081ff9cff010000efff010000faff0243010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff0243010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff010000eefffb0001fffffd0001fffffc00feff010000fbfffc0003ffff0000fcff0000feff010000fbff010000fbff010000fbfffd00fdff010000fdfffd000bffff0000ffff0000ffff0000f9ff010000fcff010000fefffd00feff050000ffff0000fefffd00feff090000ffff0000ffff0000fefffd00feff030000fffffb00fefffd00fefffc00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000fefffd00fefffc00fefffd00feff01000081ffa0ff010000efff010000faff0054010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff0054010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff010000c1fffd00c4ff01000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff004b01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff01000081ff02ff000081ff81ff9eff010000efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003c01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff01000081ff00ff810081009a00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff009a000000ff8814008d002500ab022a000000040000000000480000004800000010002000030008000000000000000000000000008d002500ab0223008d002500ab02230000003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff00db010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff00db010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff010000efff010000eeff010000fbfffd0093fffe00fcff010000edff010000c5fffd00f2fffd00fcfffc00c1fffe00e3fffe00fcff010000f6ff010000faff010000a6ff010000faff0114010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff0114010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000afff010000eeff010000bdff030000fffffe00f8fffe0003ffff0000fcff010000dbff010000e7ff010000fcff010000e7ff010000efff0100009dff010000faff02b8010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff02b8010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00fdfffd00feff0c0000ffff0000ffff0000ff0000fefffd00fdfffd00f8ff010000fdfffe00fdfffd00fefffc00fefffe00fefffc00fdfffc00d6ff010000fcfffe00fefffe00fcff010000fcff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00f9fffc0001fffffc0001fffffc00fdfffd00feff040000ff0000f9ff010000fdfffe00fefffc00feff070000ffff0000fffffe00fefffc00fdfffc00b7ff010000faff0375010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0375010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff0f0000ffff0000ffff0000ffff0000fffffe00fdff0d0000ffff0000ffff0000ffff0000f9ff010000fcff010000feff010000faff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000f9fffe00f9ff010000fcfffd00fdfffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000feff010000fcff010000fcff070000ffff0000fffffe00f7ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0318010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0318010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff110000ffff0000ffff0000ffff0000ffff0000fcff010000fbfffb00f9ff010000fcff010000fdfffd00fdff010000fbff010000feff0d0000ffff0000ffff0000ffff0000d6ff010000fcfffe00fefffe00fcff010000fcff010000faff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcfffb00fbff050000ffff0000feff010000fcff010000fcfffb0003ffff0000f6ff010000fcff010000feff070000ffff0000fffffd00fcff010000feff0d0000ffff0000ffff0000ffff0000b7ff010000faff0351010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff0351010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff150000ffff0000ffff0000ffff0000ffff0000ffff0000fcff090000ffff0000ffff0000f5ff010000fcff010000faff010000feff040000ff0000feff010000feff050000ffff0000fefffc00d6ff030000fffffe00f8fffe0003ffff0000fcff010000fbfffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000feff010000fcff080000ff0000ffff0000fbff010000f6ff010000fcff010000feff0c0000ffff0000ffff0000ff0000fdff010000feff050000ffff0000fefffc00b7ff010000faff02ac010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff02ac010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00fdfffd00fdfffc0003ffff0000fbfffd00fdfffd00f9fffd00fefffd00fefffd00fcfffe00fefffd000affff0000ffff0000ffff00feff050000ffff0000dafffd00f2fffd00fcfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffd00f9fffc00feff010000fbfffe00fdfffd00feff010000f7fffd00fefffd0011ffff0000ffff0000ffff0000ffff0000fffffd000affff0000ffff0000ffff00feff050000ffff0000bbff010000faff005a010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff005a010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff010000efffea0081ffddfffd00d5ffea0081ffeafffd00b6ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff0042010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff010000efffea0081ffadffea0081ff9bff010000faff009a000000ff881400ab002500c9022a00000004000000000048000000480000001000200003000800000000000000000000000000ab002500c9022300ab002500c9022300000111010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff0111010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff010000efff010000eeff010000fbfffd00aeff010000f2fffe00e9ff010000fafffe00c2fffd00f2fffd00fbfffd00a9ff010000fafffe00effffe00feff010000fdfffe00d9ff010000feff010000f6ff010000e6ff010000faff017a010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff017a010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff010000efff010000eeff010000fcff050000ffff0000e7ff010000cbff010000f1ff010000f8ff010000f4ff010000f9ff010000c2ff030000fffffe00f8fffe0003ffff0000fcff050000ffff0000b9ff010000f4ff010000f9ff010000f0ff010000f5ff010000f0ff010000ecff010000f1ff010000e6ff010000faff02e2010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff02e2010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff010000efff010000eeff010000fcff010000fbff040000ff0000fefffd00fdfffc0001fffffc00fdfffd00f9fffc00fafffd00feff060000ffff0000fffa00fefffc00fdfffd00fcff010000f9fffc00fdfffc0001fffffc00fcff010000fcfffd00cbff010000fcfffe00fefffe00fcff010000fcff010000fafffc0003ffff0000feff010000fefffd00f9fffd00feff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffc0001fffffc00fcff010000fcfffd00fafffc0001fffffe00fcff010000fcfffd00fafffc00fdfffd00f9fffc0001fffffe00fdfffd00feff050000ffff0000eaff010000faff03e4010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff03e4010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff010000efff010000eeff010000fcff010000fbfffe00fdff0d0000ffff0000ffff0000ffff0000feff010000fcff050000ffff0000fbff050000ffff0000fbff010000fbff1e0000ffff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000ccff010000f9fffe00f9ff010000fbfffd00feff090000ffff0000ffff0000feff090000ffff0000ffff0000fbff050000ffff0000fefffd00feff150000ffff0000ffff0000ffff0000ffff0000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdff050000ffff0000faff010000fcff010000fcff010000fdff050000ffff0000faff010000fcff050000ffff0000fbff050000ffff0000feff010000feff010000fbff040000ff0000e9ff010000faff0369010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff0369010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff010000efff010000eeff010000fcff010000fbff010000fcfffb0007ffff0000ffff0000feff010000fcfffb00fbff050000ffff0000fafffd00feff020000fffe0018ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00ccff010000fcfffe00fefffe00fcff010000f8ff090000ffff0000ffff0000feff040000ff0000fefffb00fbfffb00fdff010000fdfffb0003ffff0000fbff050000ffff0000feff010000fcff0d0000ffff0000ffff0000ffff0000fdff010000fdfffb00faff010000fcff010000fcff010000fdfffb00faff010000fcff050000ffff0000fbff050000ffff0000feff010000fdfffd00fefffd00e8ff010000faff03c0010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff03c0010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff010000efff010000eeff010000fcff090000ffff0000ffff0000fcff010000fbff050000ffff0000feff080000ff0000ffff0000f7ff050000ffff0000f7ff010000feff1d0000ff0000ff0000ff0000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000f8ff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000c8ff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000f7ff010000fafffd00feff010000fbff0d0000ffff0000ffff0000ffff0000feff140000ff0000ffff0000ffff0000ffff0000ffff0000fdff010000fdff010000f6ff010000fcff010000fcff010000fdff010000f6ff0c0000ff0000ffff0000ffff0000fbff050000ffff0000feff010000faff080000ffff0000ff0000e9ff010000faff02b2010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff02b2010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff010000efff010000eeff010000fbfffd00feff010000fbfffd00fdfffc00fdfffe00fdfffd00f9fffc00fafffd00feff0000feff0c0000ff0000ff0000ff0000fffffc00fdfffd00fdfffd00f8fffe00fdfffc0001fffffc00fdfffd00fdfffd00feff010000d0fffd00f2fffd00fbfffd00fdfffc00fdfffe00fcfffd00f9fffd00feff050000ffff0000fefffd00fdfffd00fdfffc00fdfffe00fdfffc0001fffffc00fdfffd00fdfffd00f9ff010000fdfffd00fefffd00fdfffd00f8fffe00fdfffd00f9fffc0001fffffd00fefffd00feff090000ffff0000ffff0000eeff010000faff004e010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff004e010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff010000efffea00b4fffd0081fffeffea0081ff9bff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff0135010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff0135010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fcff010000fcfffd00e2fffe00f8fffe00f8fffd00fefffc00fdfffd00e2fffe00f8fffe00f9ff0000feff030000fffffc00fdfffd0081ffa9ff010000faff009a000000ff881400c9002500e7022a00000004000000000048000000480000001000200003000800000000000000000000000000c9002500e7022300c9002500e70223000001aa010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff01aa010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff070000ffff0000fffffd00fdff010000e1ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000fcff010000f9ff010000fdfffc00e5ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffe0012ff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff0186010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000efff030000fffff40003ffff0000fcfffd00fcff010000fdfffd00e3ff010000f0ff010000fbfffd00fcff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff0d0000ffff0000ffff0000ffff0000e6ff010000f0ff010000fcfffb000fffff0000ffff0000ffff0000ffff000081ffaaff010000faff0180010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff0180010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff010000efff010000fefff600feff010000fcff010000fbfffd00feff010000e1ff010000f0ff010000f8ff010000fdff010000fdff050000ffff0000e6ff010000f0ff010000fcff010000fbff070000ffff0000fffffb00e6ff010000f0ff010000fcff020000fffe0009ffff0000ffff0000fffffb0081ffaaff010000faff01b9010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff01b9010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff010000eeff010000fdfffa00fdff010000fbff010000fcff090000ffff0000ffff0000e0ff010000f2ff010000fbff050000ffff0000fdff010000fdff050000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000e5ff010000f2ff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff000081ffaaff010000faff0150010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff0150010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff010000ecfffe00f8fffe00f9fffc0009ffff0000ffff0000fffffc00e1fffe00f8fffe00f8fffd00fefffb00fefffd00e2fffe00f8fffe00f8fffd00fefffc00feff050000ffff0000e3fffe00f8fffe00f9ff010000feff0200fffffc00feff050000ffff000081ffaaff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff0054010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff010000e9fff800bffff800bffff800bffff80081ff89ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff004e010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff004e010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff010000efffea0082ffea0081ffeeffea0081fff0ff010000faff0108010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff0108010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff010000effffd00f2fffd00fbfffd00fdfffd00faff010000fefffd00fdfffd00f9fffd00b8ff010000eeff010000fcff0000fcff0000cafffd00b5ff010000eeff010000fcfffc00eeff010000defffd00b6ff010000faff01ad010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff01ad010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff0d0000ffff0000ffff0000ffff0000fcff010000feff0d0000ffff0000ffff0000ffff0000fbff050000ffff0000b9ff010000eeff010000fcff010000feff010000cbff050000ffff0000b6ff010000eeff010000fcff050000ffff0000efff010000faff010000e8ff050000ffff0000b7ff010000faff02af010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff02af010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff010000fbff010000f9ff010000fdff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d8ff010000eeff010000fcfffe0000fffe00fefffd00fdfffd00fdfffd00fdfffc00fefffc00fefffd00faff080000ffff0000ff0000fdff010000fefffc0006ffff0000ff0000fefffd00d5ff010000eeff010000fcff050000ffff0000fefffd00fdfffd00feff070000ffff0000fffffc00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00c6ff010000faff0339010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff0339010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000f9fffe00f9ff010000fcff020000fffe00fefffd00fdff010000fcff050000ffff0000fefffd00faff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d9ff010000eeff010000fcfffa000bffff0000ffff0000ffff0000fbff010000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000fbff180000ffff0000ff0000ff0000ff0000ffff0000ffff0000fffffe00fdff050000ffff0000d6ff010000eeff010000fcff110000ffff0000ffff0000ffff0000ffff0000fbff040000ff0000fdff010000fcff0d0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff009a000000ff881400e700250105022a00000004000000000048000000480000001000200003000800000000000000000000000000e700250105022300e7002501050223000002e5010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff02e5010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff010000fcfffe00fefffe00fcff010000fcff050000ffff0000fbff050000ffff0000fbff050000ffff0000fbff010000fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d9ff010000eeff010000fcff080000ff00ff0000fffffb00fefffd00fdfffd00feff0f0000ffff0000ffff0000ffff0000fffffb00fbfffb0014ff0000ff0000ff0000ffff0000ffff0000ffff0000fcfffb00d6ff010000eeff010000fcff070000ffff0000fffffb00fefffd00fefffd00fcff010000fcff0d0000ffff0000ffff0000ffff0000fbfffb000fffff0000ffff0000ffff0000ffff0000c7ff010000faff032a010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff032a010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff010000efff030000fffffe00f8fffe0003ffff0000fcff100000ffff0000ffff0000ffff0000ff0000faff0d0000ffff0000ffff0000ffff0000fbff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d5ff010000eeff010000fcff010000feff050000ffff0000f7ff010000fbff090000ffff0000ffff0000fefffc0003ffff0000f7ff0d0000ffff0000ffff0000ffff0000feff090000ffff0000ffff0000fcff010000d2ff010000eeff010000fcff090000ffff0000ffff0000f7ff080000ffff0000ff0000fdff140000ff0000ffff0000ffff0000ffff0000ffff0000fbff150000ffff0000ffff0000ffff0000ffff0000ffff0000c7ff010000faff027c010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff027c010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff010000effffd00f2fffd00fbfffd00fdfffd0002ffff00f8fffd00fdfffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d8ff010000eeff010000fcff010000feff010000fefffd00fdfffd00fdfffd00fdfffc0002ffff00feff010000fefffd00faff0d0000ffff0000ffff0000ffff0000fdfffc0003ffff0000fbfffd00d5ff010000eeff010000fcfffc00fdfffd00fdfffd00feff050000ffff0000fdfffe00fdfffd00fefffc00faff070000ffff0000fffffc00fefffc00feff010000cbff010000faff007b010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff007b010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff010000efffea0082ffea00d2fffd00a1ffea00ccff010000efff010000fbff010000c3ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003c010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff010000efff810081008100ab00efff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff0132010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff0132010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000f6ff010000f0fffe00ebfffe0000fffe00f3fffd00e9fffd00edff010000dbfffe0000fffe00f3fffe00f3fffd00ddfffe00f2fffe00f5fffe00f3fffd00eafffc00f4fffe00eefffe00e2fffe00c8ff010000faff009a000000ff8814010500250123022a00000004000000000048000000480000001000200003000800000000000000000000000001050025012302230105002501230223000001a4010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff01a4010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff010000ebfffe00f4ff010000edff010000f0fffe00ebfffe0000fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000d3fffe0000fffe00f3fffe00f4ff050000ffff0000ddff010000f2fffe00f5fffe00f4ff050000ffff0000f6ff010000f8ff050000ffff0000f6ff010000ebff010000fcff010000e9fffe00c8ff010000faff025b010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff025b010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000fbfffe00fefffc00feff050000ffff0000f4fffe00ebfffe0000fffe00f4ff010000fafffd00fefffc00faff070000ffff0000fffffc00fefffc00fefffe00fdfffd00fefffc00fdfffd00f3fffe0000fffe00f3fffe00f4ff010000fafffc0001fffffc00fdfffd00fdfffd00fcff010000f2fffe00f5fffe00f4ff010000fafffd00fefffc00faff050000ffff0000fefffd00fefffc00fefffc0007ffff0000ffff0000fdff010000fdfffc00fdfffd00f3fffe00c8ff010000faff0303010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff0303010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff110000ffff0000ffff0000ffff0000ffff0000f0fffe0000fffe00f3fffe00f4ff010000fbff1d0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fdff010000f2fffe00f5fffe00f3fffd00feff050000ffff0000feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fcff010000f0fffe00c8ff010000faff02bb010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff02bb010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff070000ffff0000fffffd00f2fffe00ebfffe0000fffe00f0ff030000fffffb00feff010000f8ff0d0000ffff0000ffff0000ffff0000feff010000fbff010000feff0d0000ffff0000ffff0000ffff0000fefffd00f3fffe0000fffe00f3fffe00f4ff010000fbff110000ffff0000ffff0000ffff0000ffff0000fbfffb00fdff010000f2fffe00f5fffe00f0ff030000fffffb00feff010000f8ff070000ffff0000fffffb00feff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff010000fbfffd00f3fffe00c8ff010000faff031b010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff031b010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff010000ebfffe00f4ff010000faff010000feff0c0000ffff0000ffff0000ff0000f3fffe00ebfffe0000fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff0d0000ffff0000ffff0000ffff0000feff040000ff0000feff010000feff0d0000ffff0000ffff0000ffff0000fbff010000f4fffe0000fffe00f3fffe00f4ff210000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f9ff010000f2fffe00f5fffe00f4ff090000ffff0000ffff0000faff040000ff0000fbff090000ffff0000ffff0000faff010000fdff0d0000ffff0000ffff0000ffff0000fdff010000fcff040000ff0000fbff010000f4fffe00c8ff010000faff0249010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff0249010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff010000ebfffe00f4fffb0001fffffd000fffff0000ffff0000ffff0000ffff0000f4fffe00ebfffe0000fffe00f3fffd00fdfffd00fcfffe00f9fffd00fefffc00fcfffe00fefffd00fefffd00feff050000ffff0000fefffd00f3fffe0000fffe00f3fffe00f3fffd00fdfffc0007ffff0000ffff0000fefffd00fdfffd00fdfffd00f3fffe00f5fffe00f3fffd00fdfffd00fcfffe00fafffc00fdfffd00fdff010000fcfffc00fefffc00fefffd00fcfffe00fdfffd00f3fffe00c8ff010000faff00a5010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff00a5010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff010000ebfffe00cbfffe00ebfffe0000fffe00d0ff010000cafffe0000fffe00f3fffe00b9fffe00f5fffe008efffe00c8ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff0096010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff010000eafffe00cdfffe00e9fffe0000fffe0099fffe0000fffe00f1fffe00bbfffe00f3fffe0090fffe00c7ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff009c010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff010000e8fffd00d3fffd00e6fffe0001fffffd009ffffd0001fffffe00eefffd00c1fffd00effffd0096fffd00c5ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff0066010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff010000e5ffd100e2fffd00feff9d00fefffd00eaffbf00e9ff9400c2ff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff004201000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff01000093fffc009ffffc0081ff81ffe1ff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff00360100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff0100008eff9f0081ff81ffdcff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff009a000000ff881401230025012b022a00000004000000000048000000480000001000200003000800000000000000000000000001230025012b022301230025012b02230000003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff003001000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff01000081ff81ff81ff87ff010000faff001e8100810081008300faff8100810081008300faff8100810081008300faff001e8100810081008300faff8100810081008300faff8100810081008300faff00a0008f00a0008300ff}\par}}\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 makelib command}}}{\hich\af4\dbch\af4\loch\f4 As you can see, separate compilation isn't nearly as easy as writing a program in one piece.  There is an easier way to handle separate compilation, but it requires learni\hich\af4\dbch\af4\loch\f4 ng to use the shell.  The shell is covered in Chapters 6 and 8.  It's also easier to use a library from a program, although there is still a bit of work involved in setting the library up.  To turn TRIG into a library, we will start by using the MAKELIB u\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ility.  The MAKELIB utility is used to create a library from one or more object files.  It could, for example, combine two units into a single library.  In this section, we will only cover creating a new library.  See the description of the MAKELIB utilit\hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4  in Chapter 8 for details on how to use the other capabilities of the utility.\par \hich\af4\dbch\af4\loch\f4 So far, we haven't used any utilities, so let's cover that first.  Utilities are text based programs that are executed by typing their name in the shell window.  To use the MAKE\hich\af4\dbch\af4\loch\f4 LIB utility, start by selecting the shell window.  Now type\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 makelib triglib +trig.a\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 and press the return key.  Be sure to type the line with spaces between the three names, but don't put a space between the + character and TRIG.A.  You can use uppercase \hich\af4\dbch\af4\loch\f4 or lowercase letters.  This will create a library file called TRIGLIB on your disk.\par \hich\af4\dbch\af4\loch\f4 The next step is to install this library in the library prefix.  The order that libraries appear in the library prefix is important, so the way you copy your new library in\hich\af4\dbch\af4\loch\f4 to the library prefix is also important.  Basically, your library should come before the libraries already in the library prefix.  To accomplish this, you need to copy all of the library files in the library prefix to another prefix, then delete them from\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the library prefix.  Next, you will copy your library into the library prefix.  Finally, you will copy all of the old libraries back into the library prefix, and delete them from the work prefix.  You do not have to copy the ORCACDefs folder \endash  its order i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  relation to the libraries is unimportant.  Once you have done this, the linker will automatically scan the TRIGLIB file when it links your programs, pulling any subroutines needed from the library.  In addition, you need to copy the file TRIG.H into the \hich\af4\dbch\af4\loch\f4 O\hich\af4\dbch\af4\loch\f4 RCACDefs folder.  With the TRIG.H file in the ORCACDefs folder, you can use the <> characters around the file name, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 #include <trig.h>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 When you use the <> characters, the compiler always looks in the ORCACDefs folder for the interface file, allowin\hich\af4\dbch\af4\loch\f4 g you to use the interface file no matter which directory or disk your source program is on.  If you use the "" characters around the file name, as we did in the example above, the compiler looks in the current directory for the interface file.\par \hich\af4\dbch\af4\loch\f4 If you are \hich\af4\dbch\af4\loch\f4 familiar with text shells, you can do all of this copying from the shell window itself.  If not, leave the ORCA environment and move back to the Finder, doing the copying from the Finder.\par \hich\af4\dbch\af4\loch\f4 If you run out of disk space during these operations, move the sampl\hich\af4\dbch\af4\loch\f4 es folder from the source disk to your program disk, and delete it from the ORCA/C program disk.\par \hich\af4\dbch\af4\loch\f4 While the steps involved in creating the library are involved, using a library is very easy.  The sample program you entered a few minutes ago needs one small \hich\af4\dbch\af4\loch\f4 change:  replace the "" characters around the file name trig.h with <> characters.  Now you can turn Link after compile back on in the Compile dialog, and use the Compile to Memory command again.  You can also use the trig library from any other program y\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 u write in the future, without recompiling the trig library.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}{\rxe libraries}}}{{\*\bkmkend libraries}\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318100}\hich\af4\dbch\af4\loch\f4 Stand-Alone Programs{\*\bkmkend _Toc495318100}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types\:EXE}}}{\hich\af4\dbch\af4\loch\f4 So far, all of the programs you have created have an executable file type of EXE.  EXE files are special in the sense \hich\af4\dbch\af4\loch\f4 that the program environment knows it does not have to shut itself down to run the program.  EXE files can also have embedded debug code, and do not have to start the tools for themselves.  Unfortunately, they cannot be executed from the Finder.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file\hich\af4\dbch\af4\loch\f4  types\:S16}}}{\hich\af4\dbch\af4\loch\f4 There are two changes you need to make before any of the text programs you have created so far can run from the Finder.  The first is to turn off debug code, which you can do by disabling the "Generate debug code" check box in the Compile dial\hich\af4\dbch\af4\loch\f4 og.  The other change you must make is to change the file type to S16 in the Link dialog; you do this by selecting the S16 radio button.  In general, you should also turn off the "Execute after linking" option in the Link dialog, since it's a pretty slow \hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 rocess to run an S16 program directly from PRIZM.\par \hich\af4\dbch\af4\loch\f4 With these changes made, recompile one of your text programs and leave the ORCA environment.  From the Finder, you will now see the hand-in-a-diamond program icon, which tells you you can run the program fr\hich\af4\dbch\af4\loch\f4 om the Finder.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318101}\hich\af4\dbch\af4\loch\f4 Graphics Programs{\*\bkmkend _Toc495318101}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A large subset of programs need to display graphics information of some kind, but aren't necessarily worth the effort of writing a complete desktop program.  These include simple fractal programs, programs to display graphs\hich\af4\dbch\af4\loch\f4 , slide show programs, and so forth.  In this book, these programs are called graphics programs.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318102}\hich\af4\dbch\af4\loch\f4 Your First Graphics Program{\*\bkmkend _Toc495318102}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics environment}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics window}}}{\hich\af4\dbch\af4\loch\f4 Writing a graphics program with ORCA/C is really quite easy.  In general, all \hich\af4\dbch\af4\loch\f4 you have to do is issue QuickDraw II}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 QuickDraw II}}}{\hich\af4\dbch\af4\loch\f4  commands, and be sure the Graphics window is positioned properly before you run your program.  QuickDraw II is the largest and most commonly used tool in the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\hich\af4\dbch\af4\loch\f4 , so i\hich\af4\dbch\af4\loch\f4 t's also a good place to get started along the road to writing desktop programs.\par \hich\af4\dbch\af4\loch\f4 To learn about QuickDraw II, you will need a copy of the }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Toolbox Reference , Volume 2}{\hich\af4\dbch\af4\loch\f4 .  This book was written by Apple Computer, and is published by Addison Wesley.\hich\af4\dbch\af4\loch\f4   While the toolbox reference manual is a reference, and thus not an easy book to read, it is essential that you have a copy to answer your specific questions about the toolbox.  This section shows a couple of examples so you know how to create graphics p\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ograms using ORCA/C, but there is a lot more to QuickDraw II than you see here.\par \hich\af4\dbch\af4\loch\f4 To get access to QuickDraw II}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 QuickDraw II}}}{\hich\af4\dbch\af4\loch\f4 , you must include the statement\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <quickdraw.h>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 in your program.  You may have noticed this statement in the first s\hich\af4\dbch\af4\loch\f4 ample we ran, the bull's eye program.  The bull's eye program also showed how to use the QuickDraw II command DrawOval to draw ovals on the screen.  Our next QuickDraw II sample, which draws spirals on the graphics screen, shows the commands MoveTo, which\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 initializes the place where QuickDraw II will start drawing from (called the pen location), and LineTo, which draws a line from the current pen location to the specified spot, moving the pen location in the process.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <quickdraw.h>\par \hich\af2\dbch\af4\loch\f2 #include <math.h\hich\af2\dbch\af4\loch\f2 >\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 int main (void)\par \par \{\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 float r, theta;\par \par \hich\af2\dbch\af4\loch\f2 theta = 0.0;\par \hich\af2\dbch\af4\loch\f2 r = 40.0;\par \hich\af2\dbch\af4\loch\f2 SetPenSize(2, 1);\par \hich\af2\dbch\af4\loch\f2 MoveTo(280, 40);\par \hich\af2\dbch\af4\loch\f2 while (r > 0.0) \{\par \hich\af2\dbch\af4\loch\f2    theta += 3.1415926535/20.0;\par \hich\af2\dbch\af4\loch\f2    LineTo((int) (cos(theta)*r*3) + 160, (int) (sin(theta)*r) + 40);\par \hich\af2\dbch\af4\loch\f2    r -= 0.15;\par \hich\af2\dbch\af4\loch\f2    \}\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Save the program as \hich\af4\dbch\af4\loch\f4 Spiral.cc.  As with the bull's eye program, reduce the width of your source code window to about half the screen width and open the graphics window before executing the program.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318103}\hich\af4\dbch\af4\loch\f4 Stand-Alone Programs{\*\bkmkend _Toc495318103}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Any program that uses any of the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox must \hich\af4\dbch\af4\loch\f4 initialize the tools it uses.  ORCA/C automatically initializes several tools, and opens the .CONSOLE device used for text input and output.  Graphics programs, though, are using QuickDraw II, and ORCA/C does not automatically start this tool.  Before you\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 can run a graphics program from outside of PRIZM, you will have to learn to start and shut down QuickDraw II.\par \hich\af4\dbch\af4\loch\f4 In the case of simple graphics programs, the easiest way to start QuickDraw II is to use the library function startgraph}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 startgraph}}}{\hich\af4\dbch\af4\loch\f4 .  The \hich\af4\dbch\af4\loch\f4 startgraph function uses a single integer parameter to determine the size of screen to use.  This parameter should be either a 320 or a 640.  If you want the program to produce pictures that look the same as they do in the graphics window}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics win\hich\af4\dbch\af4\loch\f4 dow}}}{\hich\af4\dbch\af4\loch\f4 , use 640.  At the end of your program, you also need to use the library function endgraph}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 endgraph}}}{\hich\af4\dbch\af4\loch\f4  to shut down the graphics environment.  Finally, you must include orca.h in your program.  This is the interface file that we use for the libr\hich\af4\dbch\af4\loch\f4 ary functions we have added to ORCA/C that are not a part of the tools or of ANSI C.  The spiral program is shown below, changed to meed these requirements.  The changes are shown in bold-face.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <quickdraw.h>\par \hich\af2\dbch\af4\loch\f2 #include <math.h>\par }{\b \hich\af2\dbch\af4\loch\f2 #include <orca.h>\par }{\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 i\hich\af2\dbch\af4\loch\f2 nt main (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 float r, theta;\par \par }{\b \hich\af2\dbch\af4\loch\f2 startgraph(640);\par }{\hich\af2\dbch\af4\loch\f2 theta = 0.0;\par \hich\af2\dbch\af4\loch\f2 r = 40.0;\par \hich\af2\dbch\af4\loch\f2 SetPenSize(2, 1);\par \hich\af2\dbch\af4\loch\f2 MoveTo(280, 40);\par \hich\af2\dbch\af4\loch\f2 while (r > 0.0) \{\par \hich\af2\dbch\af4\loch\f2    theta += 3.1415926535/20.0;\par \hich\af2\dbch\af4\loch\f2    LineTo((int) (cos(theta)*r*3) + 160, (int) (sin(theta)*r) + 40);\par \hich\af2\dbch\af4\loch\f2    r -= 0.15;\par \hich\af2\dbch\af4\loch\f2    \}\par }{\b \hich\af2\dbch\af4\loch\f2 endgraph()\hich\af2\dbch\af4\loch\f2 ;\par }{\}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger\:menu bar while debugging}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4 You can still run this program from the desktop development environment.  The only change you will see is that the menu bar will vanish while the program is executing.  This happens any time y\hich\af4\dbch\af4\loch\f4 ou start a tool; the system is allowing your program to draw its own menu bar.  To switch back to the debugger's menu bar while your program is running, click on the double-arrow icon that appears at the right-hand side of your menu bar.\par \hich\af4\dbch\af4\loch\f4 As with a stand-al\hich\af4\dbch\af4\loch\f4 one text program, you must remember to turn off debug code and to change the file type to S16.  With these changes in place, you can compile the program, creating an executable file that will run from the Finder.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318104}\hich\af4\dbch\af4\loch\f4 Programming on the Desktop{\*\bkmkend _Toc495318104}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart desktopEnvironment}\hich\af4\dbch\af4\loch\f4 Most people we t\hich\af4\dbch\af4\loch\f4 alk to want to write programs that use Apple's desktop interface.  These programs are the ones with }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4 menu bars, multiple windows}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 windows}}}{\hich\af4\dbch\af4\loch\f4 , and the friendly user interface popularized by the Macintosh computer.  If you fall into that \hich\af4\dbch\af4\loch\f4 group of people, this section will help you get started.  Before diving in, though, we want to let you know what you will need to do to write this kind of program.\par \hich\af4\dbch\af4\loch\f4 Anyone who tells you that writing desktop programs is easy, or can be learned by reading a f\hich\af4\dbch\af4\loch\f4 ew short paragraphs, or even a chapter or two of a book is probably a descendent of someone who sold snake oil to your grandmother to cure her arthritis.  It just isn't so.  Learning the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox well enough to write commercial-quality programs i\hich\af4\dbch\af4\loch\f4 s every bit as hard as learning a new programming language.  In effect, that's exactly what you will be doing.  The Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  ToolBox Reference Manuals come in four large volumes.  Most of the pages are devoted to brief descriptions of the tool calls \endash  ab\hich\af4\dbch\af4\loch\f4 out one call per page.  It takes time to learn about all of those calls.  Fortunately, you don't have to know about each and every call to write desktop programs.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318105}\hich\af4\dbch\af4\loch\f4 Learning the Toolbox{\*\bkmkend _Toc495318105}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox\:learning}}}{\hich\af4\dbch\af4\loch\f4 As we mentioned, learning to write desktop prog\hich\af4\dbch\af4\loch\f4 rams takes about the same amount of time and effort as learning to program in C.  If you don't already know how to program in C, }{\i \hich\af4\dbch\af4\loch\f4 learn C first!}{\hich\af4\dbch\af4\loch\f4   Concentrate on text and graphics programs until you have mastered the language, and only then move on to deskto\hich\af4\dbch\af4\loch\f4 p programming.\par \hich\af4\dbch\af4\loch\f4 This doesn't mean that you need to know everything there is to know about C, but you should feel comfortable writing programs that are a few hundred lines long, and you should understand how to use structures and pointers, since the toolbox \hich\af4\dbch\af4\loch\f4 makes heavy use of these features.\par \hich\af4\dbch\af4\loch\f4 The toolbox itself is very large.  The }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Toolbox Reference Manual}{\hich\af4\dbch\af4\loch\f4  is a three volume set that is basically a catalog of the hundreds of tool calls available to you.  These three volumes cover the tools up through \hich\af4\dbch\af4\loch\f4 System 5.0; the additions in System 6.0 are covered in }{\ul \hich\af4\dbch\af4\loch\f4 Programmer's Reference for System 6.0}{\hich\af4\dbch\af4\loch\f4 .  This four-volume set is an essential reference when you are writing your own toolbox programs.  A lot of people have tried to write toolbox programs without thes\hich\af4\dbch\af4\loch\f4 e manuals.  I can't name a single one that succeeded.\par \hich\af4\dbch\af4\loch\f4 A lot of people have been critical of the toolbox reference manuals because they do not teach you to write toolbox programs, but that's a lot like being critical of the Oxford English Dictionary because\hich\af4\dbch\af4\loch\f4  it doesn't teach you to write a book.  The toolbox reference manuals are a detailed, technical description of the toolbox, not a course teaching you how to use the tools.  }{\ul \hich\af4\dbch\af4\loch\f4 Toolbox Programming in C}{\hich\af4\dbch\af4\loch\f4  does teach you the toolbox, though.  This self-paced cours\hich\af4\dbch\af4\loch\f4 e also includes an abridged toolbox reference manual, so you can learn to use the toolbox before you spend a lot of money buying the four volume toolbox reference manual.\par \hich\af4\dbch\af4\loch\f4 All of this is not meant to frighten you away.  Anyone who can learn a programming la\hich\af4\dbch\af4\loch\f4 nguage can learn to write desktop programs.  Unfortunately, too many people approach desktop programming with the attitude, fostered by some books and magazine articles, that they can learn to write desktop programs in an evening, or at most a weekend.  T\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 is leads to frustration and usually failure.  If you approach desktop programming knowing it will take some time, but willing to invest that time, you will succeed.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318106}\hich\af4\dbch\af4\loch\f4 Hardware Requirements{\*\bkmkend _Toc495318106}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Toolbox programs are big, and they bring in over a dozen very large h\hich\af4\dbch\af4\loch\f4 eader files, too.  While ORCA/C can be used to write programs on a fairly small Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , you cannot write toolbox programs with the minimal system.\par \hich\af4\dbch\af4\loch\f4 The first thing you need is more disk space.  To write toolbox programs, you will need access to more hea\hich\af4\dbch\af4\loch\f4 der files than will fit on a floppy disk with the rest of the ORCA system.  You will also need to use Apple's Rez resource compiler, which is fairly large in it's own right.  Because of the amount of disk space you need, the only practical solution is a h\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 rd disk.\par \hich\af4\dbch\af4\loch\f4 The other thing you will need to write any large program is more than 1.25M of memory.  You can squeak by with 1.75M of memory, although you may have to reboot fairly often, break your program up into lots of pieces, or even switch to the text env\hich\af4\dbch\af4\loch\f4 ironment.  We recommend 2M or more of memory for toolbox programming.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318107}\hich\af4\dbch\af4\loch\f4 Toolbox Header Files{\*\bkmkend _Toc495318107}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 As you look through the toolbox reference manuals, you will see that the toolbox is divided into a set of tools, each with its own name.  There is a .h header file f\hich\af4\dbch\af4\loch\f4 or each of these tools; it contains definitions for all of the tool calls and data structures used by the tools.  In some cases, a data structure might be shared by more than one tool; in that case, the tool header file will include other tool header file\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  to get the additional declarations.\par \hich\af4\dbch\af4\loch\f4 There are actually two different versions of the tool header files.  One version, which you can find on the More Extras disk at the path :MoreExtras:Apple:Libraries:APWCInclude, was created by Apple Computer for the APW\hich\af4\dbch\af4\loch\f4  C compiler, which is an older, pre-ANSI C compiler.  We've included these headers in case you need them for compatibility with some older programs.  The headers you will normally use with ORCA/C will be installed for you when you install ORCA/C on a hard\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 disk.  These headers are derived from Apple's but they are prototyped, so ORCA/C can check to make sure you are passing the correct number and kind of parameters.\par \hich\af4\dbch\af4\loch\f4 Here's a list of the current toolbox header files and the tool they define.  A few, like GSOS\hich\af4\dbch\af4\loch\f4 .H and FINDER.H, don't technically document the tools, but they are included here for completeness.\par \par }\pard\plain \s31\qj\li990\ri1620\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx3510\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s31\qj\li990\ri1620\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx3510\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox\:interface files}}}{\hich\af4\dbch\af4\loch\f4 Interface File Name\tab Tool\par }\pard\plain \s16\qj\li990\ri1620\sl223\slmult1\widctlpar\tx3510\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ACE.H\tab Audio Compression/Expansion\par \hich\af4\dbch\af4\loch\f4 ADB.H\tab Apple Desktop Bus\par \hich\af4\dbch\af4\loch\f4 APPLESHARE.H\tab AppleShare Tools\par \hich\af4\dbch\af4\loch\f4 APPLETALK.\hich\af4\dbch\af4\loch\f4 H\tab AppleTalk Tools\par \hich\af4\dbch\af4\loch\f4 CONTROL.H\tab Control Manager\par \hich\af4\dbch\af4\loch\f4 DESK.H\tab Desk Manager\par \hich\af4\dbch\af4\loch\f4 DIALOG.H\tab Dialog Manager\par \hich\af4\dbch\af4\loch\f4 EVENT.H\tab Event Manager\par \hich\af4\dbch\af4\loch\f4 FINDER.H\tab Finder Interface\par \hich\af4\dbch\af4\loch\f4 FONT.H\tab Font Manager\par \hich\af4\dbch\af4\loch\f4 GSBUG.H\tab GSBug Interface\par \hich\af4\dbch\af4\loch\f4 GSOS.H\tab GS/OS Disk File Manager\par \hich\af4\dbch\af4\loch\f4 HYPERSTUDIO.H\tab HyperStudio Interface\par \hich\af4\dbch\af4\loch\f4 HYPERXCMD\hich\af4\dbch\af4\loch\f4 .H\tab HyperCard Interface\par \hich\af4\dbch\af4\loch\f4 INTMATH.H\tab Integer Math Tool Set\par \hich\af4\dbch\af4\loch\f4 LINEEDIT.H\tab Line Edit Tool Set\par \hich\af4\dbch\af4\loch\f4 LIST.H\tab List Manager\par \hich\af4\dbch\af4\loch\f4 LOADER.H\tab Program Loader\par \hich\af4\dbch\af4\loch\f4 LOCATOR.H\tab Tool Locater\par \hich\af4\dbch\af4\loch\f4 MEDIACONTROL.H\tab Media Control Tool Set\par \hich\af4\dbch\af4\loch\f4 MEMORY.H\tab Memory Manager\par \hich\af4\dbch\af4\loch\f4 MENU.H\tab Menu Manager\par \hich\af4\dbch\af4\loch\f4 MIDI.H\tab MIDI Sound Tool\hich\af4\dbch\af4\loch\f4 s\par \hich\af4\dbch\af4\loch\f4 MIDISYNTH.H\tab MIDISynth Tool Set\par \hich\af4\dbch\af4\loch\f4 MISCTOOL.H\tab Miscellaneous Tool Set\par \hich\af4\dbch\af4\loch\f4 NOTESEQ.H\tab Note Sequencer\par \hich\af4\dbch\af4\loch\f4 NOTESYN.H\tab Note Synthesizer\par \hich\af4\dbch\af4\loch\f4 PRINT.H\tab Print Manager\par \hich\af4\dbch\af4\loch\f4 PRODOS.H\tab ProDOS Disk File Manager\par \hich\af4\dbch\af4\loch\f4 QDAUX.H\tab QuickDraw Auxiliary\par \hich\af4\dbch\af4\loch\f4 QUICKDRAW.H\tab QuickDraw II\par \hich\af4\dbch\af4\loch\f4 RESOURCES.H\tab Resource Manager\par \hich\af4\dbch\af4\loch\f4 SANE.H\tab SANE Floating-Point Tools\par \hich\af4\dbch\af4\loch\f4 SCHEDULER.H\tab Scheduler\par \hich\af4\dbch\af4\loch\f4 SCRAP.H\tab Scrap Manager\par \hich\af4\dbch\af4\loch\f4 SHELL.H\tab ORCA Shell Interface\par \hich\af4\dbch\af4\loch\f4 SOUND.H\tab Sound Manager\par \hich\af4\dbch\af4\loch\f4 STDFILE.H\tab Standard File Operations Tool Set\par \hich\af4\dbch\af4\loch\f4 TEXTEDIT.H\tab Text Edit Tool Set\par \hich\af4\dbch\af4\loch\f4 TEXTTOOL.H\tab Text Tool Set\par \hich\af4\dbch\af4\loch\f4 TYPES.H\tab types and constants\par \hich\af4\dbch\af4\loch\f4 VIDEO.H\tab Video Tools\par \hich\af4\dbch\af4\loch\f4 WINDOW.H\tab Window Manager\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 4.1:  Summary of Interface Tool Files\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318108}\hich\af4\dbch\af4\loch\f4 Debugging a Desktop Program{\*\bkmkend _Toc495318108}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 desktop programs}}}{\hich\af4\dbch\af4\loch\f4 Debugging a desktop program is not much more difficult than debugging a text or graphics program, but there are a \hich\af4\dbch\af4\loch\f4 few points you need to keep in mind.  These arise from the fact that both the high level language debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 high level language debugger}}}{\hich\af4\dbch\af4\loch\f4  and your program need the mouse, keyboard, and menu bar}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4  to function.\par \hich\af4\dbch\af4\loch\f4 As soon as the high level \hich\af4\dbch\af4\loch\f4 language debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 high level language debugger}}}{\hich\af4\dbch\af4\loch\f4  decides that your program is a desktop program, you will see your menu bar}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4  replace the desktop menu bar.  The debugger makes this decision based on tool startup calls.  If you initiali\hich\af4\dbch\af4\loch\f4 ze any tool in Table 4.2 except SANE, the debugger treats your program like a desktop program.  ORCA's windows are still visible, but you can no longer select them.  At the far right of your menu bar, you will see two special icons, created by the debugge\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 .  The first is a footprint and the second is a combined left and right arrow.  The footprint is used to step through your program, one line at a time, without having to return to the desktop.  The arrows are used to return to the desktop to issue some ot\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 er debugging command.   If you switch to the desktop while you are debugging your program, you will see that the special icons are also in the Desktop's menu bar.  You can select the arrows icon to return to your program.\par \hich\af4\dbch\af4\loch\f4 You }{\i \hich\af4\dbch\af4\loch\f4 should not}{\hich\af4\dbch\af4\loch\f4  switch menu bars wh\hich\af4\dbch\af4\loch\f4 ile your program is creating its menu bar}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4 .  From the time you issue the first Insert Menu tool call until you draw the menu bar, your menu bar is incomplete.  This restriction should not pose any special problems if you are building standa\hich\af4\dbch\af4\loch\f4 rd menus, but could be troublesome in the case where you are defining your own menus.  To debug your menu bar routine, then, you will need to limit your debugging activities to clicking on the step icon.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step command}}}{\hich\af4\dbch\af4\loch\f4 A second source of potential tr\hich\af4\dbch\af4\loch\f4 ouble lies in trying to debug your window update routine.  Again, you should not switch to the desktop during your update routine, since the debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4  might need to use your routine to repaint your windows.  You should use the footprint ico\hich\af4\dbch\af4\loch\f4 n to invoke the Step command to debug your update routine.\par \hich\af4\dbch\af4\loch\f4 A third problem area regards your program stack.  The debugger will be using your stack, so you need to be sure that you do not use coding tricks that depend on the values below the stack pointer r\hich\af4\dbch\af4\loch\f4 emaining unchanged.  You also need to make sure that there are at least 256 bytes of free stack space at all times.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stop command}}}{\hich\af4\dbch\af4\loch\f4 The fourth point is that you should not issue a Stop command in the middle of debugging, but instead let your program c\hich\af4\dbch\af4\loch\f4 ontinue to execute until it reaches its natural conclusion.  This restriction applies to the case where you have started tools that were not started by the desktop, and a premature abort from your program will leave these tools open.  It is assumed that y\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ur program shuts down any tools it starts; the debugger looks over your shoulder and prevents startup calls for tools already initialized, and also prevents shutting down tools it needs.  The debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4  does not shut down any extra tools you\hich\af4\dbch\af4\loch\f4  have initialized.  The desktop starts up the following tools:\par \par }\pard \s16\qj\fi360\li2880\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 Control Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Desk Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Dialog Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Event Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Font Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Line Edit Tool\par \bullet \tab \hich\af4\dbch\af4\loch\f4 List Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Memory Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Menu Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Print Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Quick Draw Aux\par \bullet \tab \hich\af4\dbch\af4\loch\f4 QuickDraw II\par \bullet \tab \hich\af4\dbch\af4\loch\f4 SANE\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Scrap Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Standard File Manager\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Tool Locator\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Window Manager\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 4.2 \endash  Tools started by ORCA/Desktop\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Keep in mind that since these tools are already active when your program executes, debugging may not reveal errors associated with f\hich\af4\dbch\af4\loch\f4 ailure to load and start these tools.\par \hich\af4\dbch\af4\loch\f4 A fifth area of trouble is switching to the desktop between paired events in your program.  For example, the code which handles mouse-down events and mouse-up events is usually closely connected.  A switch to the debug\hich\af4\dbch\af4\loch\f4 ger causes a flush of the event queue.  If you switch to the desktop after detecting one kind of event, then return to your program where you await that event's paired ending, your program may go into a state of suspended animation.  You can avoid this pr\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 blem by carefully considering where switches to the desktop are not dangerous.  Don't switch menu bars if you are in doubt!\par \hich\af4\dbch\af4\loch\f4 There are two restrictions on the kind of desktop programs you can debug.  The desktop handles 640 mode only; you should use 640 mod\hich\af4\dbch\af4\loch\f4 e while you are debugging your program.  The second is that the file type of your program can only be EXE or NDA (GS/OS executable file or new desk accessory, respectively).  You should change your program's file type to one of these during debugging, and\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 then change it back to whatever you want after you have the program running.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 new desk accessories}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318109}\hich\af4\dbch\af4\loch\f4 Writing New Desk Accessories{\*\bkmkend _Toc495318109}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 new desk accessories}}}{\hich\af4\dbch\af4\loch\f4 New desk accessories are those programs which can be selected from the apple menu}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 apple\hich\af4\dbch\af4\loch\f4  menu}}}{\hich\af4\dbch\af4\loch\f4  of a desktop program.  The principal advantage of a desk accessory is that it can be used from any desktop program which follows Apple's guidelines.  Writing a desk accessory is not hard, but it does require the compiler to generate special code, \hich\af4\dbch\af4\loch\f4 so you must write a desk accessory in a special way.  For the most part, though, writing a desk accessory uses the same tools and techniques you use to write desktop programs.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #pragma\:nda}}}{\hich\af4\dbch\af4\loch\f4 Your desk accessory starts with the nda directive.  This dir\hich\af4\dbch\af4\loch\f4 ective has seven parameters.  The first four are the names of four functions in your program that have special meaning in a desk accessory.  The next two are the update period and event mask.  The last is the name of your desk accessory, as it will appear\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 in the Apple menu.  The format is:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma nda }{\i \hich\af2\dbch\af4\loch\f2 open close action init period eventMask menuLine}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 open\tab This parameter is an identifier that specifies the name of the function that is called when someone selects your desk accessory from the Apple Menu.  It \hich\af4\dbch\af4\loch\f4 must return a pointer to the window that it opens.\par \par \hich\af4\dbch\af4\loch\f4 close\tab This parameter is an identifier that specifies the name of the function to call when the user wants to close your desk accessory.  It must be possible to call this function even if open has not been\hich\af4\dbch\af4\loch\f4  called.  The function does not return a value.\par \par \hich\af4\dbch\af4\loch\f4 action\tab The action parameter is the name of a function that is called whenever the desk accessory must perform some action.  It must declare a long parameter whose type varies based on the action type, follow\hich\af4\dbch\af4\loch\f4 ed by an integer parameter which defines the action that the function should take.  See page 5-7 of the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  Toolbox Reference Manual for a list of the actions that will result in a call to this function.  The function returns a boolean indicating if\hich\af4\dbch\af4\loch\f4  the action was handled.\par \par \hich\af4\dbch\af4\loch\f4 init\tab The init parameter is the name of a function that is called at start up and shut down time.  This gives your desk accessory a chance to do time consuming start up tasks or to shut down any tools it initialized.  This function\hich\af4\dbch\af4\loch\f4  must define a single integer parameter.  The function will be zero for a shut down call, and non-zero for a start up call.  The function does not return a value.\par \par \hich\af4\dbch\af4\loch\f4 period\tab This parameter tells the Desk Manager how often it should call your desk accessory fo\hich\af4\dbch\af4\loch\f4 r routine updates, such as changing the time on a clock desk accessory.  A value of -1 tells the Desk Manager to call you only if there is a reason, like a mouse down in your window; 0 indicates that you should be called as often as possible; and any othe\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  value tells how many 60ths of a second to wait between calls.\par \par \hich\af4\dbch\af4\loch\f4 eventMask\tab This value tells the Desk Manager which events your desk accessory can handle.  You are only called for events allowed by this mask.  It works the same way as the event masks we used\hich\af4\dbch\af4\loch\f4  in the Frame sample program.\par \par \hich\af4\dbch\af4\loch\f4 menuLine\tab The last parameter is a string.  It tells the Desk Manager the name of your desk accessory.  The name must be preceded by two spaces.  After the name, you should always include the characters \\H**.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 In other C progra\hich\af4\dbch\af4\loch\f4 ms, the program always starts executing at the function main.  This is not true in desk accessories.  So, unlike other C programs, desk accessories do not have to have a function called main.\par \hich\af4\dbch\af4\loch\f4 The format for a sample desk accessory, then, is:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma nda S\hich\af2\dbch\af4\loch\f2 tartUp ShutDown Action Init 60 1023 "  Sample\\\\H**"\par \par \hich\af2\dbch\af4\loch\f2 #include <window.h>\par \par \hich\af2\dbch\af4\loch\f2 GrafPortPtr StartUp(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 <<<open the window and assign the pointer>>>\par \}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 void ShutDown(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 <<<close the window>>>\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par \hich\af2\dbch\af4\loch\f2 int Action (long param, int code)\par \par \{\par \hich\af2\dbch\af4\loch\f2 <<<handle events>\hich\af2\dbch\af4\loch\f2 >>\par \}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 void Init(int code)\par \par \{\par \hich\af2\dbch\af4\loch\f2 if (code)\par \hich\af2\dbch\af4\loch\f2    <<<startup code>>>;\par \hich\af2\dbch\af4\loch\f2 else\par \hich\af2\dbch\af4\loch\f2    <<<shutdown code>>>;\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 new desk accessories}}}{\hich\af4\dbch\af4\loch\f4 Once you have written a desk accessory, you must install it.  For the Desk Manager to find your desk accessory, it must be located o\hich\af4\dbch\af4\loch\f4 n the boot volume in a directory called SYSTEM/DESK.ACCS.  It also has a special file type, called NDA}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types\:NDA}}}{\hich\af4\dbch\af4\loch\f4 .  To create the desk accessory, select the NDA file type from the Link dialog that appears when you use the Link command from the \hich\af4\dbch\af4\loch\f4 Run menu.  Be sure to turn debugging off for your final compile!\par \hich\af4\dbch\af4\loch\f4 For a sample desk accessory that illustrates these principles, see the CLOCK program in the DESKTOP.SAMPLES folder of the samples disk.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318110}\hich\af4\dbch\af4\loch\f4 Debugging NDAs{\*\bkmkend _Toc495318110}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 new desk accessories}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug\hich\af4\dbch\af4\loch\f4 ger\:new desk accessories}}}{\hich\af4\dbch\af4\loch\f4 Normally, to run a new desk accessory, you install it in the desk accessories folder.  From that time on, the desk accessory is available to any desktop program that supports desk accessories.  When you are developing a desk acce\hich\af4\dbch\af4\loch\f4 ssory, though, you don't want to reboot every time you change the program.  Instead, the desktop development environment allows you to execute a new desk accessory just like any other program.  Be sure and use the Link dialog box in the Run menu to change\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the file type of the file to NDA, though.  If the file type is not set to NDA, the desktop development environment does not know that the file is a desk accessory, and the program will almost certainly crash when you try to execute it.  When you are devel\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ping the desk accessory, you do not have to move it to the desk accessories folder, nor do you have to execute it from the Apple menu.  You can also leave the debug code}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug code}}}{\hich\af4\dbch\af4\loch\f4  turned on, and debug the desk accessory just like any other desktop\hich\af4\dbch\af4\loch\f4  program.  When you execute the desk accessory this way, the development environment simulates the same conditions that the desk accessory will face when it is executed from the Apple menu.\par \hich\af4\dbch\af4\loch\f4 Once the program is finished, you can turn off debugging and move \hich\af4\dbch\af4\loch\f4 the program to the desk accessories folder.{\*\bkmkend desktopEnvironment}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 desktop environment}{\rxe desktopEnvironment}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318111}\hich\af4\dbch\af4\loch\f4 Classic Desk Accessories{\*\bkmkend _Toc495318111}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #pragma\:cda}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 classic desk accessories}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text environment}}}{\hich\af4\dbch\af4\loch\f4 Classic desk accessories are the utility programs that yo\hich\af4\dbch\af4\loch\f4 u can run by holding down the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  and control keys while you press the esc key.  Classic desk accessories are really just a special form of text programs.  Like text programs, they use the text screen for input and output.  The advantage of a desk accessory \hich\af4\dbch\af4\loch\f4 is that it can be used from virtually any program, even programs like the text version of AppleWorks that don't even know they exist.  (If you want to create a desk accessory that will be used from ProDOS 8 programs, though, you must not use C's standard \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 isk I/O routines.)\par \hich\af4\dbch\af4\loch\f4 Classic desk accessories have a special header.  You tell the compiler to create a classic desk accessory using the }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v\fs18 \hich\af2\dbch\af4\loch\f2 #pragma\:cda}}}{\fs18 \hich\af2\dbch\af4\loch\f2 #pragma cda}{\hich\af4\dbch\af4\loch\f4  directive.  This directive has a series of three parameters which tell the compiler how t\hich\af4\dbch\af4\loch\f4 o build the special header required by the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  These parameters, in the order in which they appear in the directive, are:\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 name\tab A string giving the name of the desk accessory.  This name will appear in the menu when you press }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl \hich\af4\dbch\af4\loch\f4 -control-esc}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 start\tab \hich\af4\dbch\af4\loch\f4 Start is the name of the function that is called when your program is selected from the list of available classic desk accessories.  The start function serves the same purpose as the function main in a normal C program.\par \hich\af4\dbch\af4\loch\f4 shut down\tab Shut down is a function re\hich\af4\dbch\af4\loch\f4 turning void that is called when a program stops, or just before the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  switches operating systems.  It gives your program a chance to clean up after itself, in case your program started some background task.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 classic desk accessories}}}{\hich\af4\dbch\af4\loch\f4 The e\hich\af4\dbch\af4\loch\f4 cho program from the CDA.SAMPLES folder of the samples disk shows a very simple classic desk accessory.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma cda "Echo from C" Start ShutDown\par \par \hich\af2\dbch\af4\loch\f2 /****************************************************************\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  Echo\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  This is about the simplest a\hich\af2\dbch\af4\loch\f2  classic desk accessory can be,\par \hich\af2\dbch\af4\loch\f2 *  providing a quick framework for developing your own.  It\par \hich\af2\dbch\af4\loch\f2 *  simply reads strings typed from the keyboard and echos\par \hich\af2\dbch\af4\loch\f2 *  them back to the screen.\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  Mike Westerfield\par \hich\af2\dbch\af4\loch\f2 *\par \hich\af2\dbch\af4\loch\f2 *  Copyright 1989\par \hich\af2\dbch\af4\loch\f2 *  Byte Works, Inc.\par \hich\af2\dbch\af4\loch\f2 *\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 **************\hich\af2\dbch\af4\loch\f2 **************************************************/\par \par \hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \par \hich\af2\dbch\af4\loch\f2 char str[256];\par \par \hich\af2\dbch\af4\loch\f2 void Start(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("This program echoes the strings you "\par \hich\af2\dbch\af4\loch\f2        "type from the keyboard.  To\\n");\par \hich\af2\dbch\af4\loch\f2 printf("quit, hit the RETURN key at the beginning of a line.\\\hich\af2\dbch\af4\loch\f2 n\\n");\par \par \hich\af2\dbch\af4\loch\f2 do \{\par \hich\af2\dbch\af4\loch\f2    fgets(str, 256, stdin);             /* read a string */\par \hich\af2\dbch\af4\loch\f2    printf("%s\\n", str);                /* write the same string */\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 while (strlen(str) > 1);            /* quit if the string is empty */\par \}\par \par \par \hich\af2\dbch\af4\loch\f2 void ShutDown(void)\par \par \{\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As you can \hich\af4\dbch\af4\loch\f4 see, the directive should appear right at the top of the program.  The Start and ShutDown parameters are the actual names of the functions that will be called; you can use any legal C function names you like.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 classic desk accessories}}}{\hich\af4\dbch\af4\loch\f4 Once you write\hich\af4\dbch\af4\loch\f4  a classic desk accessory, there are several things you must do to make it available to your programs.  First, be sure to turn off the debug flag, so no debug code}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug code}}}{\hich\af4\dbch\af4\loch\f4  is generated.  If you miss this step, your program will crash when you tr\hich\af4\dbch\af4\loch\f4 y to execute it.  Next, bring up the Link dialog using the Link command from the Run menu.  You will see a series of four buttons, one for each file type supported by the desktop development environment.  One of these, }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types\:CDA}}}{\hich\af4\dbch\af4\loch\f4 CDA, tells the\hich\af4\dbch\af4\loch\f4  system that the executable file type must be CDA.  Select this button.  In addition, deselect the "Execute after link" option; you cannot execute a classic desk accessory directly from the desktop.  At this point, you are ready to compile the program.  O\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 ce the program is compiled, copy it to the DESK.ACCS folder of the SYSTEM directory.  The next time you boot your computer, the classic desk accessory will appear in the desk accessories menu.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318112}\hich\af4\dbch\af4\loch\f4 Debugging Classic Desk Accessories{\*\bkmkend _Toc495318112}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 classic desk accessori\hich\af4\dbch\af4\loch\f4 es}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger\:classic desk accessories}}}{\hich\af4\dbch\af4\loch\f4 Since classic desk accessories use the text screen, they cannot be debugged from the desktop debugger.  You can however, make a very slight change to any classic desk accessory, and debug the resulting "normal\hich\af4\dbch\af4\loch\f4 " program.  To do this, comment out the }{\fs18 \hich\af2\dbch\af4\loch\f2 #pragma cda}{\hich\af4\dbch\af4\loch\f4  directive, and then create a main function with two statements, one to call the Start function, and a second to call the ShutDown function.  The function main for the echo sample, shown above, would be\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 m\hich\af2\dbch\af4\loch\f2 ain()\par \par \{\par \hich\af2\dbch\af4\loch\f2 Start();\par \hich\af2\dbch\af4\loch\f2 ShutDown();\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 After the program is debugged, remove main and the CDA directive and proceed with installing the desk accessory as you normally would.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318113}\hich\af4\dbch\af4\loch\f4 Inits{\*\bkmkend _Toc495318113}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #pragma\:rtl}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 inits}}}{\hich\af4\dbch\af4\loch\f4 Initialization programs are a special kind of pr\hich\af4\dbch\af4\loch\f4 ogram that is executed as your computer boots.  There are a number of special requirements for Inits, but only two effect the way you use ORCA/C.\par \hich\af4\dbch\af4\loch\f4 When most C programs are complete, ORCA/C makes sure a GS/OS Quit call is executed; this shuts down the progra\hich\af4\dbch\af4\loch\f4 m and returns control to the Finder (or whatever program launcher was used).  Initialization programs must exit with an RTL instruction, instead.  To accomplish this, place an rtl pragma at the start of the program.  The rtl pragma has no parameters.  As \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ith other C programs, your program starts executing at the function }{\fs18 \hich\af2\dbch\af4\loch\f2 main}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 The other special requirement is to set the file type to either PIF (for a permanent initialization program) or TIF (for a temporary initialization program).  In practice, you will a\hich\af4\dbch\af4\loch\f4 lso need to use the Rez compiler to create the icon that shows up when the program starts.  Since this means you have at least three steps \endash  compiling the C program, compiling the resources, and setting the file type \endash  in practice initialization files are\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 almost always built with script files.\par \hich\af4\dbch\af4\loch\f4 For an example of a very simple TIF, see the Samples disk.  For more information about the shell and script files, see Chapter 6 and Chapter 8.  The resource compiler is covered in Chapter 10.  For information about w\hich\af4\dbch\af4\loch\f4 riting initialization programs that is not ORCA/C-specific, see the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  File Type Notes for file types $B6 (PIF) and $B7 (TIF).\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318114}\hich\af4\dbch\af4\loch\f4 HyperStudio NBAs{\*\bkmkend _Toc495318114}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #pragma\:nba}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HyperStudio}}}{\hich\af4\dbch\af4\loch\f4 You can write HyperStudio New Button Actions (NBAs) with ORCA/C \hich\af4\dbch\af4\loch\f4 with the aid of the nba pragma and the HyperStudio.h header file.  The format for the nba pragma is:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma nba}{\i \hich\af2\dbch\af4\loch\f2  main}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 main\tab This parameter is an identifier that specifies the name of the function that is called when HyperStudio calls the NBA.  This functi\hich\af4\dbch\af4\loch\f4 on accepts one parameter of type HSParamPtr.  The function returns void.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The parameter that is passed to the function is a pointer to the HyperStudio parameters, contained in a struct.  The structure itself is defined in HyperStudio.h.\par \hich\af4\dbch\af4\loch\f4 HyperStudio support\hich\af4\dbch\af4\loch\f4 s a wide range of callbacks, which are calls you can make from the NBA back to HyperStudio to perform some action.  These are called via the __NBACALLBACK function, which takes two parameters.  (Note: there are two _ characters at the start of the name, n\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 t one!)  The first is the callback number, while the second parameter is a pointer to a parameter record.\par \hich\af4\dbch\af4\loch\f4 You will find a constant defined for each of the callbacks in the HyperStudio.h header file.  Roger Wagner Publishing distributes technical informatio\hich\af4\dbch\af4\loch\f4 n about the callbacks themselves.\par \hich\af4\dbch\af4\loch\f4 The parameter record can be, and usually is, the same one that is passed to the NBA when it is called.  If you decide to create copies of the parameter structure, be sure you actually copy the original structure into the c\hich\af4\dbch\af4\loch\f4 opy.  There are several internal fields, notably the callback address, which must be set before you make the callback.\par \hich\af4\dbch\af4\loch\f4 For an example of a simple NBA, see the Samples disk.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318115}\hich\af4\dbch\af4\loch\f4 HyperCard XCMDs{\*\bkmkend _Toc495318115}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #pragma\:xcmd}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HyperCard}}}{\hich\af4\dbch\af4\loch\f4 You can write HyperCard XCMD\hich\af4\dbch\af4\loch\f4 s and XCFNs with ORCA/C with the aid of the xcmd pragma and the HyperXCMD.h header file.  The format for the xcmd pragma is:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma xcmd }{\i \hich\af2\dbch\af4\loch\f2 main}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 main\tab This parameter is an identifier that specifies the name of the function that is called when HyperCard call\hich\af4\dbch\af4\loch\f4 s the XCMD.  This function accepts one parameter of type XCMDPtr.  The function returns void.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The parameter that is passed to the function is a pointer to the HyperCard parameters, contained in a struct.  The structure itself is defined in HyperXCMD.h.\par \hich\af4\dbch\af4\loch\f4 Hy\hich\af4\dbch\af4\loch\f4 perCard supports a wide range of callbacks, which are calls you can make from the XCMD back to HyperCard to perform some action.  HyperCard callbacks work like tool calls, although technically they have a unique entry point, and are not tools.  HyperXCMD.\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4  has a complete set of function declarations for the HyperCard callbacks.\par \hich\af4\dbch\af4\loch\f4 HyperCard XCMDs and XCFNs are documented on the System 6.0 CD ROM.\par \hich\af4\dbch\af4\loch\f4 For an example of a simple XCMD, see the Samples disk.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318116}\hich\af4\dbch\af4\loch\f4 Control Panel Devices (CDevs){\*\bkmkend _Toc495318116}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #pragma\:cdev}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Con\hich\af4\dbch\af4\loch\f4 trol Panel}}}{\hich\af4\dbch\af4\loch\f4 You can write Control Panel CDevs with ORCA/C with the aid of the cdev pragma.  The format for the cdev pragma is:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma cdev }{\i \hich\af2\dbch\af4\loch\f2 main}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 main\tab This parameter is an identifier that specifies the name of the function that is called when the Control\hich\af4\dbch\af4\loch\f4  Panel calls the CDev.  This function accepts two long integer parameters and an integer parameter, in that order, and returns a long integer.  The parameters and return value are explained in the references mentioned below.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 For a description of the param\hich\af4\dbch\af4\loch\f4 eters and the value returned by the function, along with the other information you need to write CDevs, see the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  File Type Notes for file type $C7 (CDV).\par \hich\af4\dbch\af4\loch\f4 For an example of a simple CDev, see the Samples disk.\par \sect }\sectd \sbkcol\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 5 \endash  Writing Assembly Language Subroutines\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318117}\hich\af4\dbch\af4\loch\f4 Chapter 5 \endash  Writing Assembly Languag\hich\af4\dbch\af4\loch\f4 e Subroutines{\*\bkmkend _Toc495318117}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318118}\hich\af4\dbch\af4\loch\f4 Introduction{\*\bkmkend _Toc495318118}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart assemblyLanguage}\hich\af4\dbch\af4\loch\f4 There are two ways to mix assembly language with ORCA/C.  One way is to use the built-in mini-assembler that is a part of ORCA/C.  The mini-assembler is suitable for tasks where a few lines of assembly are needed in a program tha\hich\af4\dbch\af4\loch\f4 t is mostly C.  When several dozen lines or several subroutines must be coded in assembly language, you can also choose either the ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  macro assembler, which offer more power larger assembly language tasks.  This chapter deals with using \hich\af4\dbch\af4\loch\f4 the ORCA/M macro assembler to write entire functions or libraries in assembly language.  Chapter 18 gives details on using the asm statement to embed assembly language code in a C program.\par \hich\af4\dbch\af4\loch\f4 To understand all of the information in this chapter, you must alre\hich\af4\dbch\af4\loch\f4 ady know assembly language.  You will also need to know how to use the assembler itself, and you must install the assembler in your C development system.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318119}\hich\af4\dbch\af4\loch\f4 The Basics{\*\bkmkend _Toc495318119}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Calling an assembly language subroutine from C is actually quite easy.  For our first examp\hich\af4\dbch\af4\loch\f4 le, we will take the simplest case:  a function returning void defined in assembly language that has no parameters and does not use any global variables from C.\par \hich\af4\dbch\af4\loch\f4 We will define a small function to clear the keyboard strobe.  This is one of those tasks that \hich\af4\dbch\af4\loch\f4 is difficult to do from C, yet takes only four lines of assembly language.  You might want to call this function from a real program \endash  the effect is to erase any character that the user has typed, but that has not yet been processed by a scan library call\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 The C program must declare the function as }{\fs18 \hich\af2\dbch\af4\loch\f2 extern}{\hich\af4\dbch\af4\loch\f4 .  This is how you tell the compiler that the function appears outside of the C part of the program.  A program that simply calls the subroutine would look like this:\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs20 \par }{\tab \hich\af2\dbch\af4\loch\f2 extern void Clear(void);\par \par \tab \hich\af2\dbch\af4\loch\f2 int main(v\hich\af2\dbch\af4\loch\f2 oid)\par \tab \{\par \tab \hich\af2\dbch\af4\loch\f2 Clear();\par \tab \}\par \par \tab \hich\af2\dbch\af4\loch\f2 #append "myprog.asm"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Once you have typed the program in, save it as }{\fs18 \hich\af2\dbch\af4\loch\f2 MYPROG.CC}{\hich\af4\dbch\af4\loch\f4 .  Be sure the language stamp is CC.  You can check this by pulling down the languages menu.\par \hich\af4\dbch\af4\loch\f4 The append directive at the end of the program is appending as\hich\af4\dbch\af4\loch\f4 sembly language code to the end of a C program.  The compiler is smart enough to look ahead at the language type stamped on the file being appended.  If it is an assembly language file, the compiler calls the assembler to process it.  This is one of the t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 ings that makes multi-lingual programming so easy with the ORCA development system.  If you are more familiar with separate compilation, you can, of course, use that method.\par \hich\af4\dbch\af4\loch\f4 It is also possible to separately assembly the assembly language file and use the \hich\af4\dbch\af4\loch\f4 linker to compile the assembly language and C portions of the program, much as we did in the last chapter, when the trig example was used to show how a program made up of two or more C source files could be linked into a single executable program.  From t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e desktop development environment, it is easier to use the method we are describing here.  If you prefer to use separate compilation, use the same methods discussed in the last chapter.\par \hich\af4\dbch\af4\loch\f4 At this point we need to add the assembly language function.  Create a\hich\af4\dbch\af4\loch\f4  new window, then pull down the Languages menu and select ASM65816 to change the language stamp of the window to assembly language.  With that accomplished, type in the function shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 case\tab on\par \hich\af2\dbch\af4\loch\f2 ; \par \hich\af2\dbch\af4\loch\f2 ;  Clear the keyboard strobe\par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 Clear\tab start\par \tab \hich\af2\dbch\af4\loch\f2 sep\tab #$20\par \tab \hich\af2\dbch\af4\loch\f2 sta\tab >$C010\par \tab \hich\af2\dbch\af4\loch\f2 rep\tab #$20\par \tab \hich\af2\dbch\af4\loch\f2 rtl\par \tab \hich\af2\dbch\af4\loch\f2 end\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 An important point to remember is that C is one of the few case sensitive languages ever written.  Like most languages, assembly language is normally case insensitive.  The case on directive at the start of the assembly la\hich\af4\dbch\af4\loch\f4 nguage program makes the assembler case sensitive, like C.  If you leave this directive out, you must always use uppercase characters when referring to the function from C; you must also use uppercase letters when referring to a function written in anothe\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  high-level language, like Pascal or BASIC.\par \hich\af4\dbch\af4\loch\f4 Save the file as MYPROG.ASM, the same name that appeared in the append directive at the end of the C program.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to memory command}}}{\hich\af4\dbch\af4\loch\f4 Now for the fun part.  Select the MYPROG.CC window, and then use the\hich\af4\dbch\af4\loch\f4  Compile to Disk command, as if the program is written entirely in C.  It doesn't matter if the assembly language source file is open on the desktop or not.  What happens is this:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab ORCA looks at the file MYPROG.CC.  Since it is a C file, the C compiler \hich\af4\dbch\af4\loch\f4 is called to compile the program.\par \hich\af4\dbch\af4\loch\f4 2.\tab When the compiler gets to the append directive, it looks at the file named in the operand.  Since it is not a C program, control is returned to the desktop development environment.\par \hich\af4\dbch\af4\loch\f4 3.\tab The development environment sees th\hich\af4\dbch\af4\loch\f4 at there are more source files to process.  The file is an assembly language file, so the assembler is called.  The assembler assembles the subroutine.\par \hich\af4\dbch\af4\loch\f4 4.\tab The linker is called.  It links the C and assembly language parts into one program and writes an exec\hich\af4\dbch\af4\loch\f4 utable file called MYPROG to the current directory.\par \hich\af4\dbch\af4\loch\f4 5.\tab The program is executed.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to memory command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4 It is easy to gloss over one detail in this process and end up making a mistake.  When you are compiling a program that is m\hich\af4\dbch\af4\loch\f4 ade up of more than one language, you must compile to disk, not to memory.  It is very important that you use the Compile to Disk command to compile and execute this program, and not the Compile to Memory command.  If you use one of the debugger commands \hich\af4\dbch\af4\loch\f4 (\hich\af4\dbch\af4\loch\f4 e.g. Step) before a program has been compiled, or after making a change, the program is compiled before the debugger takes over \endash  and it is compiled with a Compile to Memory command.  For this reason, it is also important for you to remember to compile yo\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 r multi-lingual programs before you use one of the debugger commands.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318120}\hich\af4\dbch\af4\loch\f4 Returning Function Values From Assembly Language Subroutines{\*\bkmkend _Toc495318120}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language\:returning function values}}}{\hich\af4\dbch\af4\loch\f4 Function values are returned in the registers.  This means that within yo\hich\af4\dbch\af4\loch\f4 ur assembly language subroutine you would load the registers with the values that you want to return to your C program.  Char, int and unsigned int values are returned in the accumulator as two-byte quantities.  Long integers and pointers are returned in \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he X and A registers, with the most significant word in X and the least significant word in A.  Real numbers, both single and double precision, are returned as pointers to floating-point values which have been stored in SANE's extended format.  This forma\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  is described in }{\ul \hich\af4\dbch\af4\loch\f4 Apple Numerics Manual}{\hich\af4\dbch\af4\loch\f4 .  Structures, unions and arrays are returned as a pointer to the first byte of the object.  As with other types of pointers, the most significant word should be placed in X and the least significant word should be sto\hich\af4\dbch\af4\loch\f4 red in A. \par \hich\af4\dbch\af4\loch\f4 Please note that characters only require one byte of storage, but are returned in a two-byte register.  Be sure to zero the most significant byte of the value that you return.\par \hich\af4\dbch\af4\loch\f4 For a complete discussion of the internal formats of numbers, see Cha\hich\af4\dbch\af4\loch\f4 pters 13 and 15.  Basically, though, they correspond to what you are used to in assembly language.\par \hich\af4\dbch\af4\loch\f4 Our next example program illustrates how to implement an assembly language function from C.  The C program stays in a tight loop, repeatedly calling an assem\hich\af4\dbch\af4\loch\f4 bly language subroutine, named Keypress, to see if a key has been pressed.  Once a key has been pressed, it calls another assembly language subroutine, named Clear, to clear the strobe.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern void Clear(void);\par \par \hich\af2\dbch\af4\loch\f2 extern int Keypress(void);\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 while (! Keypress()) ;\par \hich\af2\dbch\af4\loch\f2 Clear();\par \}\par \par \hich\af2\dbch\af4\loch\f2 #append "myprog.asm"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Once this file is entered, check to be sure its language stamp is CC, and save it as MYPROG.CC.  Next, type in the following assembly language file, make sure it is stamped as ASM65816, and save i\hich\af4\dbch\af4\loch\f4 t as MYPROG.ASM.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 case\tab on\par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 ;  Return the status of the keyboard strobe\par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 Keypress start\par \hich\af2\dbch\af4\loch\f2         sep     #$20\par \hich\af2\dbch\af4\loch\f2         lda     >$C000                  get keyboard key\par \hich\af2\dbch\af4\loch\f2         asl     A                       roll high bit to A\par \hich\af2\dbch\af4\loch\f2         rep     #$20\par \hich\af2\dbch\af4\loch\f2         \hich\af2\dbch\af4\loch\f2 lda     #0\par \hich\af2\dbch\af4\loch\f2         rol     A\par \hich\af2\dbch\af4\loch\f2         rtl\par \hich\af2\dbch\af4\loch\f2         end\par \par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 ;  Clear the keyboard strobe\par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 Clear   start\par \hich\af2\dbch\af4\loch\f2         sep     #$20\par \hich\af2\dbch\af4\loch\f2         sta     >$C010\par \hich\af2\dbch\af4\loch\f2         rep     #$20\par \hich\af2\dbch\af4\loch\f2         rtl\par \hich\af2\dbch\af4\loch\f2         end\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318121}\hich\af4\dbch\af4\loch\f4 Passing Parameters to Assembly Language Subroutines{\*\bkmkend _Toc495318121}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 paramete\hich\af4\dbch\af4\loch\f4 rs\:}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters\:passing}}}{{\*\bkmkstart assemblyLanguageParameters}\hich\af4\dbch\af4\loch\f4 To better understand the interaction between C and assembly language in the ORCA environment, we will look at how parameters are passed from a C program to an assembly language subroutine.  ORCA/C places the parameters whic\hich\af4\dbch\af4\loch\f4 h appear in a subroutine call on the stack, in the opposite of the order that they appear in the parameter list.  It then issues a JSL to your subroutine.\par \hich\af4\dbch\af4\loch\f4 The value that is on the stack depends on the type of the value being passed.  Int, unsigned int, lon\hich\af4\dbch\af4\loch\f4 g, unsigned long, characters, enumerations, structures, unions and pointers appear on the stack as actual values.  The normal unary conversions are performed before the value is placed on the stack.  Basically, that means that character values are expande\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  to two bytes before they are pushed, while two-byte and four-byte values are pushed on the stack as is.  Structures and unions are placed on the stack in the same format that they are stored in memory, while floating-point values are pushed on the stack \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 s extended format SANE numbers.  Arrays and string parameters (which are actually just a special form of an array) are passed as an address that points to the first byte of the value.\par \hich\af4\dbch\af4\loch\f4 Consider the C program fragment below:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ...\par \par \hich\af2\dbch\af4\loch\f2 void doSomething(z, ch, i);\par \par \hich\af2\dbch\af4\loch\f2 int i;\par \hich\af2\dbch\af4\loch\f2 char ch;\par \hich\af2\dbch\af4\loch\f2 float *z;\par \par \hich\af2\dbch\af4\loch\f2 ...\par \par \hich\af2\dbch\af4\loch\f2 i = 3;\par \hich\af2\dbch\af4\loch\f2 ch = 'a';\par \hich\af2\dbch\af4\loch\f2 *z = 5.6;\par \hich\af2\dbch\af4\loch\f2 doSomething (&z, ch, i);\par \par \hich\af2\dbch\af4\loch\f2 ...\par \par \hich\af2\dbch\af4\loch\f2 When doSomething is called, the stack will look like this:\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\shp{\*\shpinst\shpleft1440\shptop166\shpright6460\shpbottom3706\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz3\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw251\pich177\picwgoal5020\pichgoal3540\macpict\bliptag622385636\blipupi72{\*\blipuid 2518d9e4bf43e2f87bacbf8b62b9a196}088c0000000000b100fb001102ff0c00ffffffff000000000000000000fb000000b100000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff037804e600a00082001e0001000a0000000000b100fb002200010037006c00220001000e006c00220021000e290000220006000e290000a10096000c0100000002000000000000000001000a000900010013000b0003364f000d000c002e00040000ff000010265426644ca84c990015b332002b010f0320313100a0009700a10096000c0100000002000000000000000001000a00160001001e000f00152358002a0c032031300000a0009700a10096000c0100000002000000000000000001000a00250005002e000e0015c6ad002b040f013900a000970001000a0000000000b100fb0022003b000e290000220072000e290000220013000e050000220013003205000022002e000e05000022002e00320500002200490032050000220056003205000022007f000e050000220064000e050000220056000e0500002200490013fb0000a10096000c0100000002000000000000000001000a000a0020001300290015b3130028000f0020013000a0009700a10096000c0100000002000000000000000001000a00170020002100290015b6d2002a0e01330000a0009700a10096000c0100000002000000000000000001000a00250020002e00290015ba92002a0d01300000a0009700a10096000c0100000002000000000000000001000a0032001e003b00270015be5400280038001e0327612700a0009700a10096000c0100000002000000000000000001000a00320005003b000e0015baa2002800380005013800a0009700a10096000c0100000002000000000000000001000a00250040003400f3001557c10028002a00403a546865207365636f6e6420706172616d657465722069732061206368617261637465722e20204974732076616c7565206973207061737365642000001533b5002a08386f6e2074686520737461636b20616e6420616c736f2072657175697265732074776f206279746573206f6620737461636b2073706163652e00a0009700a10096000c0100000002000000000000000001000a003f00050049000e001599b1002800450005013700a0009700a10096000c0100000002000000000000000001000a004d00050056000e00159d71002a0e01360000a000970001000a0000000000b100fb0022005b000e00550022005b0037005500a10096000c0100000002000000000000000001000a005b00050064000e0015b32e002a0d01350000a0009700a10096000c0100000002000000000000000001000a006800050072000e0015b6ed002a0e01340000a000970001000a0000000000b100fb0022009a000e2900002200a7000e290000a10096000c0100000002000000000000000001000a00760005007f000e0015b32e002a0d01330000a0009700a10096000c0100000002000000000000000001000a00830005008c000e0015b6ed002a0e01320000a0009700a10096000c0100000002000000000000000001000a00900005009a000e0015baad002a0d01310000a0009700a10096000c0100000002000000000000000001000a009e000500a7000e0015be6d002a0e01300000a000970001000a0000000000b100fb0022008f000e05000022007f00320500002200640032050000a10096000c0100000002000000000000000001000a003f0040005700f200154c8d0028004500403554686520746869726420706172616d6574657220697320612063616c6c206279207265666572656e6365206f662061207265616c0d00153cea002a08316e756d6265722e202048657265206120706f696e74657220746f20746865206e756d626572206973207061737365642e0d0000156502002a082b506f696e74657273207265717569726520666f7572206279746573206f6620737461636b2073706163652e0000a0009700a10096000c0100000002000000000000000001000a003f001b0047003200152f3500280045001b07706f696e74657200a0009700a10096000c0100000002000000000000000001000a004d001f0057002700150dfc002b040e02746f0000a0009700a10096000c0100000002000000000000000001000a00590020006300290015c66c002b010c017a00a0009700a10096000c0100000002000000000000000001000a0076001b007e00350015b51d0028007b001b0672657475726e0000a0009700a10096000c0100000002000000000000000001000a0085001a008c0033001520b80028008a001a076164647265737300a000970001000a0000000000b100fb0022008f0032050000a10096000c0100000002000000000000000001000a000a0040001a00fa00154c8d0028000f00403b54686520666972737420706172616d6574657220697320616e20696e74656765722e20204974732076616c756520697320706173736564206f6e0d00153fdd002a083074686520737461636b20616e642072657175697265732074776f206279746573206f6620737461636b2073706163652e00a0009700a10096000c0100000002000000000000000001000a00760041008d00f300153341002b01643a46696e616c6c792c207765206172652063616c6c656420776974682061204a534c2c20736f207468652072657475726e2076616c75652069730d0000153728002a083661742074686520746f70206f662074686520737461636b20616e642075736573207468726565206279746573206f6620737461636b0d00155267002a080673706163652e00a000970001000a0000000000b100fb0071001e00a1004100a4004700a3004100a1004700a3004700a4004700a30041002200a30047060000a10096000c0100000002000000000000000001000a009f005400a7009a0015e612002b131a0d537461636b20706f696e74657200a0009700a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx1439\posy165\absh3540\absw5020\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw251\pich177\picwgoal5020\pichgoal3540\macpict\bliptag622385636\blipupi72{\*\blipuid 2518d9e4bf43e2f87bacbf8b62b9a196}088c0000000000b100fb001102ff0c00ffffffff000000000000000000fb000000b100000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff037804e600a00082001e0001000a0000000000b100fb002200010037006c00220001000e006c00220021000e290000220006000e290000a10096000c0100000002000000000000000001000a000900010013000b0003364f000d000c002e00040000ff000010265426644ca84c990015b332002b010f0320313100a0009700a10096000c0100000002000000000000000001000a00160001001e000f00152358002a0c032031300000a0009700a10096000c0100000002000000000000000001000a00250005002e000e0015c6ad002b040f013900a000970001000a0000000000b100fb0022003b000e290000220072000e290000220013000e050000220013003205000022002e000e05000022002e00320500002200490032050000220056003205000022007f000e050000220064000e050000220056000e0500002200490013fb0000a10096000c0100000002000000000000000001000a000a0020001300290015b3130028000f0020013000a0009700a10096000c0100000002000000000000000001000a00170020002100290015b6d2002a0e01330000a0009700a10096000c0100000002000000000000000001000a00250020002e00290015ba92002a0d01300000a0009700a10096000c0100000002000000000000000001000a0032001e003b00270015be5400280038001e0327612700a0009700a10096000c0100000002000000000000000001000a00320005003b000e0015baa2002800380005013800a0009700a10096000c0100000002000000000000000001000a00250040003400f3001557c10028002a00403a546865207365636f6e6420706172616d657465722069732061206368617261637465722e20204974732076616c7565206973207061737365642000001533b5002a08386f6e2074686520737461636b20616e6420616c736f2072657175697265732074776f206279746573206f6620737461636b2073706163652e00a0009700a10096000c0100000002000000000000000001000a003f00050049000e001599b1002800450005013700a0009700a10096000c0100000002000000000000000001000a004d00050056000e00159d71002a0e01360000a000970001000a0000000000b100fb0022005b000e00550022005b0037005500a10096000c0100000002000000000000000001000a005b00050064000e0015b32e002a0d01350000a0009700a10096000c0100000002000000000000000001000a006800050072000e0015b6ed002a0e01340000a000970001000a0000000000b100fb0022009a000e2900002200a7000e290000a10096000c0100000002000000000000000001000a00760005007f000e0015b32e002a0d01330000a0009700a10096000c0100000002000000000000000001000a00830005008c000e0015b6ed002a0e01320000a0009700a10096000c0100000002000000000000000001000a00900005009a000e0015baad002a0d01310000a0009700a10096000c0100000002000000000000000001000a009e000500a7000e0015be6d002a0e01300000a000970001000a0000000000b100fb0022008f000e05000022007f00320500002200640032050000a10096000c0100000002000000000000000001000a003f0040005700f200154c8d0028004500403554686520746869726420706172616d6574657220697320612063616c6c206279207265666572656e6365206f662061207265616c0d00153cea002a08316e756d6265722e202048657265206120706f696e74657220746f20746865206e756d626572206973207061737365642e0d0000156502002a082b506f696e74657273207265717569726520666f7572206279746573206f6620737461636b2073706163652e0000a0009700a10096000c0100000002000000000000000001000a003f001b0047003200152f3500280045001b07706f696e74657200a0009700a10096000c0100000002000000000000000001000a004d001f0057002700150dfc002b040e02746f0000a0009700a10096000c0100000002000000000000000001000a00590020006300290015c66c002b010c017a00a0009700a10096000c0100000002000000000000000001000a0076001b007e00350015b51d0028007b001b0672657475726e0000a0009700a10096000c0100000002000000000000000001000a0085001a008c0033001520b80028008a001a076164647265737300a000970001000a0000000000b100fb0022008f0032050000a10096000c0100000002000000000000000001000a000a0040001a00fa00154c8d0028000f00403b54686520666972737420706172616d6574657220697320616e20696e74656765722e20204974732076616c756520697320706173736564206f6e0d00153fdd002a083074686520737461636b20616e642072657175697265732074776f206279746573206f6620737461636b2073706163652e00a0009700a10096000c0100000002000000000000000001000a00760041008d00f300153341002b01643a46696e616c6c792c207765206172652063616c6c656420776974682061204a534c2c20736f207468652072657475726e2076616c75652069730d0000153728002a083661742074686520746f70206f662074686520737461636b20616e642075736573207468726565206279746573206f6620737461636b0d00155267002a080673706163652e00a000970001000a0000000000b100fb0071001e00a1004100a4004700a3004100a1004700a3004700a4004700a30041002200a30047060000a10096000c0100000002000000000000000001000a009f005400a7009a0015e612002b131a0d537461636b20706f696e74657200a0009700a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language\:direct page}}}{\hich\af4\dbch\af4\loch\f4 In order to access the passed parameters in our assembly language\hich\af4\dbch\af4\loch\f4  subroutine, we first need to set up a local direct page, using the stack.  }{\i \hich\af4\dbch\af4\loch\f4 Be very careful to save and restore the direct page register!  Upon entry to the subroutine, we do not know where the direct page register points \endash  failure to restore it could lead\hich\af4\dbch\af4\loch\f4  to disastrous results!}{\par \hich\af4\dbch\af4\loch\f4 One of the simplest ways to set the direct page register equal to the stack pointer is to transfer the stack register contents to the accumulator, save the current direct-page register by pushing it onto the stack, and then set the \hich\af4\dbch\af4\loch\f4 new direct-page register by transferring the contents of the accumulator to the direct-page register:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 tsc\par \tab \hich\af2\dbch\af4\loch\f2 phd\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\tab \hich\af2\dbch\af4\loch\f2 tcd\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Before leaving the subroutine, we can restore the old value of the direct-page register by pulling it from the stack:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 pld\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 We are now i\hich\af4\dbch\af4\loch\f4 n a position to access the passed parameters as direct page locations.  Referring to the stack diagram given above, we can code a series of equates, setting the positions in the stack to local labels:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 i\tab equ\tab 10\par \hich\af2\dbch\af4\loch\f2 ch\tab equ\tab 8\par \hich\af2\dbch\af4\loch\f2 z\tab equ\tab 4\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 After setting up a direct p\hich\af4\dbch\af4\loch\f4 age from the stack, i and ch can now be accessed as simple direct-page values, as in \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 lda\tab i\par \tab \hich\af2\dbch\af4\loch\f2 lda\tab ch\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 while z, since it is a pointer, requires long indirect addressing:\par \par \tab \hich\af4\dbch\af4\loch\f4 lda\tab [z]\par \par \hich\af4\dbch\af4\loch\f4 Since we know the location of the return address (it is at direct page loca\hich\af4\dbch\af4\loch\f4 tion 1 in our example), we can pop the parameters from the stack by moving the return address to the last three bytes of the parameter area and then removing bytes from the stack.  Putting this all together, the C program below shows how to implement an a\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 sembly language function.  The program does little more than define an integer and then call a function to reverse the bits in the integer.  If you are not sure how the assembly language program works, make yourself a stack diagram.  If this still seems l\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ke magic, do not lose heart.  The next section covers two assembly-language macros provided with ORCA/C to alleviate the burden of manipulating the stack frame from assembly language.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Demonstrate calling assembly language functions from C. */\par \par \hich\af2\dbch\af4\loch\f2 extern i\hich\af2\dbch\af4\loch\f2 nt reverse(int parm);\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("%d %d\\n", 6, reverse(6));\par \}\par \par \hich\af2\dbch\af4\loch\f2 #append "reverse.asm"\par \par \hich\af2\dbch\af4\loch\f2          case  on\par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 ;  Reverse the bits in an integer\par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 reverse  start\par \hich\af2\dbch\af4\loch\f2 parm     equ   4                        passed parameter\par \hich\af2\dbch\af4\loch\f2 ret      equ   1           \hich\af2\dbch\af4\loch\f2              return address\par \par \hich\af2\dbch\af4\loch\f2          tsc                            record current stack pointer\par \hich\af2\dbch\af4\loch\f2          phd                            save old DP\par \hich\af2\dbch\af4\loch\f2          tcd                            set new DP to stack pointer\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2          ldx   #16                   \hich\af2\dbch\af4\loch\f2    place result in A\par \hich\af2\dbch\af4\loch\f2 lb1      asl   parm\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2          ror   A\par \hich\af2\dbch\af4\loch\f2          dex\par \hich\af2\dbch\af4\loch\f2          bne   lb1\par \hich\af2\dbch\af4\loch\f2          tax                            save result in X\par \hich\af2\dbch\af4\loch\f2          lda   ret+1                    set up stack for return from\par \hich\af2\dbch\af4\loch\f2          sta   parm                     \hich\af2\dbch\af4\loch\f2  subroutine\par \hich\af2\dbch\af4\loch\f2          lda   ret-1\par \hich\af2\dbch\af4\loch\f2          sta   ret+1\par \hich\af2\dbch\af4\loch\f2          pld                            restore old DP\par \hich\af2\dbch\af4\loch\f2          pla                            set stack ptr for return\par \hich\af2\dbch\af4\loch\f2          txa                            put the function result in A\par \hich\af2\dbch\af4\loch\f2          rtl\par \hich\af2\dbch\af4\loch\f2          end\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318122}\hich\af4\dbch\af4\loch\f4 The Macro Solution{\*\bkmkend _Toc495318122}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 For most purposes, dealing directly with the stack to examine and remove parameters, return function values, and so on, can be tedious and error prone.  To make things easier, there are two macros on the distribution disk th\hich\af4\dbch\af4\loch\f4 at help you in passing parameters, returning function values, and setting up direct page work space.  The macros are called CSUBROUTINE and CRETURN, and are located in a file called M16.CC.  You can find this file on the extras disk in the Libraries:AIncl\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 de folder.\par \hich\af4\dbch\af4\loch\f4 CSUBROUTINE is designed to be used right after the START directive of an assembly language subroutine.  It has two operands:  the first is a parameter list, and the second is the number of bytes of direct page work space you want for your own us\hich\af4\dbch\af4\loch\f4 e.  If your assembly language subroutine is expecting more than one parameter, then you need to enclose the parameter list in parentheses. Each of the parameters starts with a number indicating how long the parameter is in bytes, and is followed by a colo\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  and the name of the parameter.  The parameters are specified in the same order in which they are given in the call statement of the C function.  The work space parameter is a number, specifying the number of bytes of work space you need.  The work space \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 tarts at direct page location one.\par \hich\af4\dbch\af4\loch\f4 For example, let's assume that you have defined an assembly language subroutine named Sample, with pass parameters as indicated below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void Sample (int *i, float r, char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 We will also assume that the assembly languag\hich\af4\dbch\af4\loch\f4 e subroutine needs four bytes of direct page work space for a pointer, which we will name PTR.  Then the following equate and macro call would set things up for the assembly-language subroutine:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Sample\tab start\par \hich\af2\dbch\af4\loch\f2 ptr\tab equ\tab 1\tab work pointer\par \par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\tab \hich\af2\dbch\af4\loch\f2 csubroutine (4:i,4:r,2\hich\af2\dbch\af4\loch\f2 :c),4\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Notice that i is a pointer to an integer, so you pass a pointer, not an integer.  Pointers are four bytes long.  The parameter r is described to the CSUBROUTINE macro as being four bytes long.  When we are returning real values from a function, we p\hich\af4\dbch\af4\loch\f4 ass a pointer to a ten-byte SANE extended format number.  When we are passing a real or double number as a parameter, however, we pass the ten-byte value itself on the stack.  Finally, character values require two bytes.\par \hich\af4\dbch\af4\loch\f4 The CRETURN macro has a similar pro\hich\af4\dbch\af4\loch\f4 tocol.  If you are writing a function returning void, don't code anything in the operand field.  If you will be returning a value, code the number of bytes being returned (this should be two for boolean, integer and character values, and four for longint \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 nd pointers), followed by a colon, and the name of the area where the value is stored.  The value must be in a your direct page area or in a variable that can be accessed with absolute addressing.  For example, to return a pointer called PTR, code\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 cretur\hich\af2\dbch\af4\loch\f2 n 4:ptr\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If a function is returning a floating-point value, return a pointer to a SANE extended format number.  If the function returns a structure or union, return a pointer to the first byte of the structure or union.{\*\bkmkend assemblyLanguageParameters}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language\:passing param\hich\af4\dbch\af4\loch\f4 eters}{\rxe assemblyLanguageParameters}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318123}\hich\af4\dbch\af4\loch\f4 Accessing C Variables from Assembly Language{\*\bkmkend _Toc495318123}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language\:accessing global variables}}}{\hich\af4\dbch\af4\loch\f4 All global variables which can be accessed from outside of a C source file by another C function are available from a\hich\af4\dbch\af4\loch\f4 ssembly language.  In addition, if an assembly language file is appended to the end of a C source file using the append directive, all global variables within the C source file, even if they are private to the file, can be accessed from the assembly langu\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ge subroutines appended to the file.  If you are using the small memory model, all C variables are accessed using absolute addressing.  In the large memory model all variables must be accessed using long addressing.\par \hich\af4\dbch\af4\loch\f4 It is also possible to define variables \hich\af4\dbch\af4\loch\f4 in assembly language that can be accessed from C.  To do that, define the variable as external in the C program, just as you would if the variable was in a separately compiled C function.  Then define the variable in assembly language.  The assembly langu\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ge variable must be defined globally; that is, it must be the name of a code segment, or it must be declared as global via the entry directive.\par \hich\af4\dbch\af4\loch\f4 The C language uses case sensitive variable names.  The assembler defaults to case insensitive variables, passin\hich\af4\dbch\af4\loch\f4 g all variable names to the linker as uppercase strings.  To make the assembler case sensitive, use the assembler's case directive.\par \hich\af4\dbch\af4\loch\f4 For details on how the variables are stored in memory, see Chapters 13 and 15.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318124}\hich\af4\dbch\af4\loch\f4 Calling C Procedures and Functions from Assem\hich\af4\dbch\af4\loch\f4 bly Language{\*\bkmkend _Toc495318124}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language\:calling C procedures and functions}}}{\hich\af4\dbch\af4\loch\f4 Calling a C function from assembly language is extremely straightforward.  You simply push any required parameters onto the stack and issue a JSL to the function you want to call.  T\hich\af4\dbch\af4\loch\f4 he one trick is that you must push the parameters on the stack staring with the last parameter, and working toward the first.  Two-byte values are returned to you in the accumulator, four-byte values are returned with the least significant word in the acc\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 mulator and the most significant word in the X register, and real and double values are returned as pointers to ten-byte SANE extended format numbers.  Note that real numbers should be passed as ten-byte SANE extended format numbers.  Structures, arrays a\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 d unions are also returned as a pointer to the first byte of the object.\par \hich\af4\dbch\af4\loch\f4 For example, to call the C function\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int cfunc(myStruct *ptr, int i);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 that takes a pointer and integer as input and returns an integer result, you could use the ph2 macro (supplied w\hich\af4\dbch\af4\loch\f4 ith ORCA/M) to push the integer variable, the ph4 macro to push the pointer onto the stack, and then call the function, as follows:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 ph2\tab i\tab push the integer\par \tab \hich\af2\dbch\af4\loch\f2 ph4\tab #parm\tab push the address of the structure\par \tab \hich\af2\dbch\af4\loch\f2 jsl\tab cfunc\tab call the function\par \tab \hich\af2\dbch\af4\loch\f2 sta\tab result\tab save the inte\hich\af2\dbch\af4\loch\f2 ger result{\*\bkmkend assemblyLanguage}}{\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 assembly language}{\rxe assemblyLanguage}}}{\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 6 \endash  Using the Shell\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318125}\hich\af4\dbch\af4\loch\f4 Chapter 6 \endash  Using the Shell{\*\bkmkend _Toc495318125}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318126}\hich\af4\dbch\af4\loch\f4 Another Look at the Shell Window{\*\bkmkend _Toc495318126}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window}}}{{\*\bkmkstart shell}\hich\af4\dbch\af4\loch\f4 The desktop development environment we have dealt with so far in this manual is very easy to use.  You have probab\hich\af4\dbch\af4\loch\f4 ly either used or heard of some of the text based programming environments like UNIX, MS-DOS, or even the text based version of ORCA (which is included in this package).  Ease of use is, of course, the biggest advantage of the desktop development environm\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 nt over the text environment.  There are several other advantages, at least with the current software.  The text environment does not support the source level debugger.  Its editor can only show you one file at a time, and each file is limited to 64K byte\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 .  In addition, you cannot split the screen, looking at two parts of the file at the same time.\par \hich\af4\dbch\af4\loch\f4 On the other hand, the text environment has several advantages over the desktop environment, too.  The text environment takes less time to boot, and requires le\hich\af4\dbch\af4\loch\f4 ss memory.  It is easy to make coding errors in C that will crash the system; if you find this is true in your own programs, the shorter boot time could be significant.  The shell also provides a very powerful programming tool.  The shell gives you dozens\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 of built-in commands, and even lets you add your own.  You get more control over the process of compiling and linking a program with the shell, and you can even write programs, called exec files}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files}}}{\hich\af4\dbch\af4\loch\f4 , that execute shell commands.\par \hich\af4\dbch\af4\loch\f4 As it turns \hich\af4\dbch\af4\loch\f4 out, you aren't forced to choose between the desktop programming environment and the shell.  You can actually use all of the features of the shell right from the desktop by simply clicking on the shell window, and typing the shell commands!\par \hich\af4\dbch\af4\loch\f4 If the programs\hich\af4\dbch\af4\loch\f4  you write are generally in a single source file, you don't build libraries}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4  often, and you are not mixing C with assembly language}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language}}}{\hich\af4\dbch\af4\loch\f4 , it may not be worth your effort to learn to use the shell and the shell window. \hich\af4\dbch\af4\loch\f4  If, however, your programs fall into any of these categories, or if you would like to use the shell's impressive abilities to manage files, it would be time well spent to learn about the shell.  This chapter introduces the shell, as used from the shell w\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ndow in the desktop development environment.  All of the topics covered, however, apply equally well to using the shell in the text environment.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318127}\hich\af4\dbch\af4\loch\f4 Getting Into Text{\*\bkmkend _Toc495318127}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 While you can use the shell commands from a window on the desktop, you may want to make use o\hich\af4\dbch\af4\loch\f4 f the text environment for any number of reasons.  There are basically two ways to get into the text environment.  The first is to set up a separate, text-based copy of ORCA/C, something you can do with an installer script; see Appendix B for details if y\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 u are interested in doing this.\par \hich\af4\dbch\af4\loch\f4 The other thing you can do is to set up ORCA/C so you can switch between the text and desktop environment.  The only change you have to make to let you switch between the two environments is to remove one line from the LOGIN\hich\af4\dbch\af4\loch\f4  file; you can find this file in the Shell folder of the ORCA/C Program Disk and load it with the desktop editor.  At the end of the file you will find two lines:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 prizm\par \hich\af2\dbch\af4\loch\f2 quit\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The LOGIN file is a script file that is executed when you start up the ORCA syst\hich\af4\dbch\af4\loch\f4 em.  The line "prizm" is a shell command that actually runs the desktop development system you have used up to this point.  When you quit from PRIZM using the Quit command, you don't go right back to the Finder; instead, the shell executes the next line o\hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4  the LOGIN file.  In the LOGIN file that we ship with ORCA/C, the next line tells the shell to quit back to the Finder.  If you remove the last line, quitting from PRIZM will put you into the text shell.  From there, typing quit will return you to the Fin\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 er, while typing prizm will put you back into the desktop programming environment.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 After changing the LOGIN file, you will have to reboot before the shell realizes the change has been made.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318128}\hich\af4\dbch\af4\loch\f4 How Shell Commands Work{\*\bkmkend _Toc495318128}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The shell is really an interpreter, just l\hich\af4\dbch\af4\loch\f4 ike AppleSoft BASIC.  Like AppleSoft, the shell has variables, loops, and an if statement.  You can even pass variables to programs written using the shell.  Unlike AppleSoft, the shell's commands are not intended for general programming.  Instead, the sh\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ll has commands like catalog, which produces a detailed list of the files on a disk.  The shell can manipulate files with copy (copies files or disks), move (moves files), delete (deletes files), and create (creates directories).  You can see all or part \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 f a file using type.  You can also compile and link programs with a variety of commands.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell\:commands}}}{\hich\af4\dbch\af4\loch\f4 You can execute shell commands from any window on the desktop.  If the window you select is a shell window}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window}}}{\hich\af4\dbch\af4\loch\f4  (that is, if the\hich\af4\dbch\af4\loch\f4  language shown in the Languages menu is Shell), you execute a command by typing the command and pressing return.  In any other window, you use enter.\par \hich\af4\dbch\af4\loch\f4 You can also execute groups of shell commands.  To execute more than one shell command at a time, simply \hich\af4\dbch\af4\loch\f4 select the block of text containing the shell commands, then press return if you are in a shell window, or enter if you are in any other kind of window.  The commands will be executed, one after the other, until all commands have executed or an error occu\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 s.\par \hich\af4\dbch\af4\loch\f4 Many shell commands write output to the screen.  The "screen" is a somewhat vague term.  For a variety of reasons, we usually say the output is written to "standard output}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\hich\af4\dbch\af4\loch\f4 ."  In the text environment, standard out is the text scre\hich\af4\dbch\af4\loch\f4 en.  When you are using the shell from the desktop environment, standard out is whatever window the shell command is issued from.  Later in this chapter, you will learn how to change standard out, so that the output of a program can be sent to a disk file\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 or printer.\par \hich\af4\dbch\af4\loch\f4 Some shell commands are interactive, requiring input from the keyboard.  When this happens, a cursor will appear in the window.  The cursor is an inverse space.  You can type in the response, and then press the return key.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318129}\hich\af4\dbch\af4\loch\f4 File Names{\*\bkmkend _Toc495318129}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fold\hich\af4\dbch\af4\loch\f4 ers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 folders}{\txe see also directories}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 directories{\txe See also folders}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 path names}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 file names}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 file names{\txe see also path names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 path names{\txe see also file names}}}{\hich\af4\dbch\af4\loch\f4 When you use the desktop, you open and c\hich\af4\dbch\af4\loch\f4 reate files using dialogs that show you the files in a particular folder.  When you are using the shell, you must type the names of files instead of using these dialogs.  In all cases, the name of the file itself is the same in the shell and from the dial\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 gs.  Under the ProDOS FST, which is the one you are probably using, file names are limited to fifteen characters.  Each name must start with an alphabetic character (one of the letters 'A' through 'Z'), and can contain alphabetic characters, numeric digit\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 , or the period character in the remaining characters.  You can use either uppercase or lowercase letters interchangeably.\par \hich\af4\dbch\af4\loch\f4 To find a file, you need more than just the file name.  Just as with the dialogs, you need to know what disk the file is on, and what\hich\af4\dbch\af4\loch\f4  folder it is in.  (Folders are called directories in the text environment.)  The names of disks and directories follow the same conventions as file names.  The colon (or slash) character is used before the name of a disk, and between the names of disks, \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 irectories and files to separate the names from one another.  Spaces are not allowed.  For example, to specify the file MYFILE, located on a disk called MYDISK and in a directory called MYFOLDER, you would type\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 :mydisk:myfolder:myfile\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 It would get tiring\hich\af4\dbch\af4\loch\f4  in a hurry if you were forced to specify the name of the disk, any directories, and the file every time you wanted to refer to a disk file.  Fortunately, there is a shortcut.  The shell remembers the location of the directory you are currently using.  If\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 you want a file from the current directory, you only have to type the name of the file to specify the file.  For example, if the current directory is :mydisk:myfolder, you only have to type }{\b\fs18 \hich\af2\dbch\af4\loch\f2 myfile}{\hich\af4\dbch\af4\loch\f4  to get at the same file we referenced a moment ago.  If the\hich\af4\dbch\af4\loch\f4  current folder is :mydisk, you would type }{\b\fs18 \hich\af2\dbch\af4\loch\f2 myfolder:myfile}{\hich\af4\dbch\af4\loch\f4 .  When you type the entire path for the file, as in :mydisk:myfolder:myfile, it is called the file's path name, or sometimes its full path name.  When you use the }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 directories}}}{\hich\af4\dbch\af4\loch\f4 current direct\hich\af4\dbch\af4\loch\f4 ory to avoid typing the full path name, as in myfolder/myfile, it is called a partial path name or, if no directories need to be specified at all, the file name.\par \hich\af4\dbch\af4\loch\f4 You can set the current directory at any time using the prefix command.  Type the name of the \hich\af4\dbch\af4\loch\f4 directory you want to become the current directory right after the name of the command.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 prefix :mydisk:myfolder\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 sets the current prefix.  Now that we are in the same directory as the file myfile (from our previous example), we can access th\hich\af4\dbch\af4\loch\f4 e file by simply typing }{\b\fs18 \hich\af2\dbch\af4\loch\f2 myfile}{\hich\af4\dbch\af4\loch\f4 .  The same concept applies to directory names.  Instead of using a single prefix command to set the default prefix, we could first set the prefix to the disk :mydisk, and then change the default prefix to the directory myfold\hich\af4\dbch\af4\loch\f4 er on that disk with the commands\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 prefix :mydisk\par \hich\af2\dbch\af4\loch\f2 prefix myfolder\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 In this case, the first prefix command changed the prefix to the disk mydisk \endash  the leading colon tells the shell that the name is the name of a disk.  The second prefix command changes the \hich\af4\dbch\af4\loch\f4 prefix to the current prefix plus the folder myfolder.  The shell knows that the second command is changing the default prefix to a directory in the current default prefix because the name given does not start with a colon.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The current prefix is shared bet\hich\af4\dbch\af4\loch\f4 ween the shell and the desktop.  You may have noticed that when you use any of the file dialogs from the desktop, they always come up showing the folder where the last file command was executed.  The desktop uses the current prefix to do this.  If you use\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 one of the file dialogs from the desktop, you can change the current prefix, and changing the current prefix from the shell will change the folder that is shown the next time you use a file dialog.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318130}\hich\af4\dbch\af4\loch\f4 Directory Walking{\*\bkmkend _Toc495318130}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 directories}}}{\hich\af4\dbch\af4\loch\f4 Sometimes it is usef\hich\af4\dbch\af4\loch\f4 ul to go back a directory.  The symbol .. (two periods) means go back (or up) one directory.  Suppose that you have the directory structure shown below.\par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\li450\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex64\picscaley62\piccropl0\piccropr0\piccropt0\piccropb0\picw244\pich117\picwgoal4880\pichgoal2340\macpict\bliptag-1587465063\blipupi72{\*\blipuid a1613499b37e637377f33d9b18a457fc}018000070007007c00fb1101a00082a100960006050000000274a1009a0008fffd0000001d0000a0009801000a00070007007c00fb0300150d000a2b6e13084f55525354554646a00099a00097a100960006050000000274a1009a0008fffd0000001b0000a00098280052004a074d5950524f4753a00099a00097a100960006050000000274a1009a0008fffd000000220000a00098295a09594f555250524f4753a00099a00097220019007fee2d220019007f362da100960006050000000274a1009a0008fffd000000130000a00098280076000b0550524f4731a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829360550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829900550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009828007600a40550524f4731a00099a000972200560067c8152200560066f21422005500c5f11522005600c51914a00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Assume that the current prefix is /ourstuff/myprogs.  If you want to access prog1 in the yourprogs \hich\af4\dbch\af4\loch\f4 directory, you can use the partial path\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 ..:yourprogs:prog1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 to get to it.  The partial path name given tells the shell to move up one directory level, from :ourstuff:myprogs to :ourstuff, and then move down the directory tree to yourprogs:prog1.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318131}\hich\af4\dbch\af4\loch\f4 Device Na\hich\af4\dbch\af4\loch\f4 mes{\*\bkmkend _Toc495318131}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 device names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\hich\af4\dbch\af4\loch\f4 GS/OS assigns a device name to each I/O device currently on line.  These device names can be used as part of the path name.  Let's check to see what assignments have been made.  Enter the command:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 show units\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Th\hich\af4\dbch\af4\loch\f4 is command will display a table showing the device names associated with the devices on line.  For an example, suppose you have a hard disk, a floppy disk, and a RAM disk installed in your computer.  When you issue the show units command, you will see som\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 thing like \par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Units Currently On Line:\par \par \hich\af2\dbch\af4\loch\f2     Number  Device              Name\par \par \hich\af2\dbch\af4\loch\f2     .D1     .APPLESCSI.HD01.00  :HARD.DISK\par \hich\af2\dbch\af4\loch\f2     .D4     .CONSOLE            <Character Device>\par \hich\af2\dbch\af4\loch\f2     .D6     .NULL               <Character Device>\par \hich\af2\dbch\af4\loch\f2     .D7     .PRINTER            <C\hich\af2\dbch\af4\loch\f2 haracter Device>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 You can substitute a device name or a device number anywhere you would have used a volume name.  Thus,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 catalog .d1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 will have the same effect as\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 catalog :hard.disk\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Incidentally, the catalog command is a good one to know about.  The cat\hich\af4\dbch\af4\loch\f4 alog command lists all of the files in a directory, along with a great deal of information about each file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318132}\hich\af4\dbch\af4\loch\f4 Standard Prefixes{\*\bkmkend _Toc495318132}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 prefixes}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\hich\af4\dbch\af4\loch\f4 The shell provides prefixes which can be substituted for path names.  We've already looked at \hich\af4\dbch\af4\loch\f4 one of these, the default prefix.  There are a total of 31 of these prefixes.  You can obtain a listing of the standard prefixes for your system by typing the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 show prefix\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 ORCA will respond by printing a list similar to the one below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 System Pref\hich\af2\dbch\af4\loch\f2 ix:\par \par \hich\af2\dbch\af4\loch\f2 Number\tab Name\par \par \hich\af2\dbch\af4\loch\f2 *\tab :ORCA.C:\par \hich\af2\dbch\af4\loch\f2 @\tab :ORCA.C:\par \hich\af2\dbch\af4\loch\f2 8\tab :ORCA.C:\par \hich\af2\dbch\af4\loch\f2 9\tab :ORCA.C:\par \hich\af2\dbch\af4\loch\f2 10\tab .CONSOLE:\par \hich\af2\dbch\af4\loch\f2 11\tab .CONSOLE:\par \hich\af2\dbch\af4\loch\f2 12\tab .CONSOLE:\par \hich\af2\dbch\af4\loch\f2 13\tab :ORCA.C:LIBRARIES:\par \hich\af2\dbch\af4\loch\f2 14\tab :ORCA.C:\par \hich\af2\dbch\af4\loch\f2 15\tab :ORCA.C:SYSTEM:\par \hich\af2\dbch\af4\loch\f2 16\tab :ORCA.C:LANGUAGES:\par \hich\af2\dbch\af4\loch\f2 17\tab :ORCA.C:UTILITIES:\par \hich\af2\dbch\af4\loch\f2 18\tab :ORCA.C:\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The left-hand column of the listing is the pr\hich\af4\dbch\af4\loch\f4 efix number.  The right-hand column is a path name.  The purpose of the prefix numbers is to provide you with a typing short-cut when you use path names.  For example, suppose you have a program with the file name myprog located in :ORCA.C.  You could use\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the path name\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 18:myprog\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 and it would have the same effect as\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 :orca.c:myprog\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Notice that we have used the prefix command two ways.  If you supply a prefix number followed by a path name, the prefix command changes the prefix number you give.  If you typ\hich\af4\dbch\af4\loch\f4 e a prefix name with no prefix number, the prefix command sets the default prefix (prefix 8).\par \hich\af4\dbch\af4\loch\f4 While you can modify prefix seven to suit your needs, the other prefixes have special, predefined uses.  For example, if you kept your programs in a directory cal\hich\af4\dbch\af4\loch\f4 led MYSTUFF, you could rename prefix 18 to correspond to :ORCA:MYSTUFF using the command:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 prefix 18 :orca:mystuff:\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Now, when you want to access the program myprog, instead of using the path name\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 :orca:mystuff:myprog\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 you can use the path name\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 18:myprog\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As we mentioned a moment ago, many of these prefixes have predefined, standard uses, such as defining the location of the languages prefix, or telling the linker where to look for libraries.  The predefined uses are:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 *\tab The asterisk indicates the boot pr\hich\af4\dbch\af4\loch\f4 efix.  The boot prefix is the name of the disk that GS/OS executed from.\par \par \hich\af4\dbch\af4\loch\f4 @\tab This prefix is a special prefix used by programs that need to access user-specific information in a networked environment.\par \par \hich\af4\dbch\af4\loch\f4 0-7\tab These seven prefixes are obsolete.  They can only ho\hich\af4\dbch\af4\loch\f4 ld path names up to 64 characters.  They should not be set while using ORCA/C.\par \par \hich\af4\dbch\af4\loch\f4 8\tab This is the default (or current) prefix.  Whenever you supply a partial path name to the shell, or directly to GS/OS via a program that makes GS/OS calls, the partial path na\hich\af4\dbch\af4\loch\f4 me is appended to the default prefix.\par \par \hich\af4\dbch\af4\loch\f4 9\tab Prefix 9 is the program's prefix.  Whenever a program is executed, prefix 9 is set to the directory where the program was found.\par \par \hich\af4\dbch\af4\loch\f4 10\tab Prefix 10 is the device or file from which standard input characters are read.\par \par \hich\af4\dbch\af4\loch\f4 11\tab \hich\af4\dbch\af4\loch\f4 Prefix 11 is the device or file to which standard output characters are written.\par \par \hich\af4\dbch\af4\loch\f4 12\tab Prefix 12 is the device or file to which error output characters are written.\par \par \hich\af4\dbch\af4\loch\f4 13\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4 Prefix 13 is the library prefix.  The ORCA linker searches the library\hich\af4\dbch\af4\loch\f4  prefix for libraries when unresolved references occur in a program.  The C compiler looks in this folder for another folder called ORCACDefs to resolve include statements.\par \par \hich\af4\dbch\af4\loch\f4 14\tab Prefix 14 is the work prefix.  This is the location used by various programs wh\hich\af4\dbch\af4\loch\f4 en an intermediate work file is created.  If a RAM disk is available, this prefix should point to it.\par \par \hich\af4\dbch\af4\loch\f4 15\tab Prefix 15 is the shell prefix.  The command processor looks here for the LOGIN file and command table (SYSCMND) at boot time.  If you use the text bas\hich\af4\dbch\af4\loch\f4 ed editor, it also looks here for the editor, which in turn looks for its macro file (SYSEMAC), tab file (SYSTABS) and, if present, editor command table (SYSECMD).  The desktop development system also uses the SYSTABS file, but does not make use of the SY\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 EMAC file or the SYSECMD file.\par \par \hich\af4\dbch\af4\loch\f4 16\tab Prefix 16 is the languages prefix.  The shell looks here for the linker, assembler, and compilers.\par \par \hich\af4\dbch\af4\loch\f4 17\tab Prefix 17 is the utilities prefix.  When a utility is executed, the command processor looks here for the utility.  Hel\hich\af4\dbch\af4\loch\f4 p files are contained in the subdirectory HELP.\par \par \hich\af4\dbch\af4\loch\f4 18-31\tab These prefixes do not have a predefined use.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318133}\hich\af4\dbch\af4\loch\f4 Using Wild Cards{\*\bkmkend _Toc495318133}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\hich\af4\dbch\af4\loch\f4 One of the built-in features that works with almost every command in ORCA is wild cards in file names.\hich\af4\dbch\af4\loch\f4   Wild cards let you select several files from a directory by specifying some of the letters in the file name, and a wild card which will match the other characters.  Two kinds of wild cards are recognized, the = character and the ? character.  Using the \hich\af4\dbch\af4\loch\f4 ?\hich\af4\dbch\af4\loch\f4  wild card character causes the system to confirm each file name before taking action, while the = wild card character simply takes action on all matching file names.\par \hich\af4\dbch\af4\loch\f4 To get a firm grasp on wild cards, we will use the enable and disable commands.  These co\hich\af4\dbch\af4\loch\f4 mmands turn the file privilege flags on and off, something that is very much like locking and unlocking files in BASIC, but with more flexibility. The privilege flags can be examined in the catalog command display.  The flags are represented by characters\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 under the access attribute.  First, disable delete privileges for all files on the :ORCA.C directory.  To do this, type\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 disable d =\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Cataloging :ORCA.C should show that the D is missing from the access column of each directory entry.  This means that you \hich\af4\dbch\af4\loch\f4 can no longer delete the files. Now, enable the delete privilege for the ORCA.Sys16 file.  Since the ORCA.Sys16 file is the only one that starts with the character O, you can do this by typing\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 enable d O=\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The wild card matches all of the characters after\hich\af4\dbch\af4\loch\f4  O. \par \hich\af4\dbch\af4\loch\f4 What if you want to specify the last few characters instead of the first few?  The wild card works equally well that way, too.  To disable delete privileges for the ORCA.Sys16, you can specify the file as =Sys16.  It is even possible to use more than \hich\af4\dbch\af4\loch\f4 one wild card.  You can use =.= to specify all files that contain a period somewhere in the file name.  Or, you could try M=.=S to get all files that start with an M, end in an S, and contain a period in between.  As you can see, wild cards can be quite f\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 exible and useful.\par \hich\af4\dbch\af4\loch\f4 To return the :ORCA.C disk to its original state, use the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ENABLE D ?\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 This time, something new happens.  The system stops and prints each file name on the screen, followed by a cursor.  It is waiting for a Y, N or Q. Y will enab\hich\af4\dbch\af4\loch\f4 le the D flag, N will skip this file, and Q will stop, not searching the rest of the files.  Give it a try! \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RUN command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDIT command}}}{\hich\af4\dbch\af4\loch\f4 Four minor points about wild cards should be pointed out befo\hich\af4\dbch\af4\loch\f4 re you move on.  First, not all commands support wild cards every place that a file name is accepted.  The compile, link and run commands don't allow them at all, and rename and copy commands allow them only in the first file name. Secondly, wild cards ar\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  only allowed in the file name portion, and not in the subdirectory part of a full or partial path name.  For example, :=:STUFF is not a legal use of a wild card.  The next point is that not all commands respect the prompting of the ? wild card.  Catalog \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 oes not, and new commands added to the system by separate products may not.  Finally, some commands allow wild cards, but will only work on one file.  The edit command is a good example.  You can use wild cards to specify the file to edit, but only the fi\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 st file that matches the wild card file name is used.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318134}\hich\af4\dbch\af4\loch\f4 Required and Optional Parameters{\*\bkmkend _Toc495318134}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There are two kinds of parameters used in shell commands, required and optional.  If you leave out an optional parameter, the system takes some default action.  For exam\hich\af4\dbch\af4\loch\f4 ple, if you use the catalog command without specifying a path name, the default prefix is cataloged.  An example of a required parameter is the file name in the edit command:  the system really needs to have a file name, since there is no system default. \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 For all required parameters, if you leave it out, the system will prompt for it.  This lets you explore commands, or use commands without needing to look them up, even if you cannot remember the exact order of all of the required parameters.\par \hich\af4\dbch\af4\loch\f4 At first glanc\hich\af4\dbch\af4\loch\f4 e, it may seem strange to have an edit command}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDIT command}}}{\hich\af4\dbch\af4\loch\f4  in the shell.  Its original use was to start the text editor, back in the days when the desktop development environment did not exist.  You can still use it for that in the text environmen\hich\af4\dbch\af4\loch\f4 t, but there is also another use.  If you use edit from a shell window, the file is loaded into a new window.  If the file was already on the desktop, it is brought to the front.  This can have several uses, especially in script files.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318135}\hich\af4\dbch\af4\loch\f4 Redirecting Input an\hich\af4\dbch\af4\loch\f4 d Output{\*\bkmkend _Toc495318135}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard input}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 input redirection}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 output redirection}}}{\hich\af4\dbch\af4\loch\f4 The Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  supports two character-output devices and one character-input device.  Input redirection lets you tell ORCA to \hich\af4\dbch\af4\loch\f4 take the characters from a file instead of the .CONSOLE device (which is, basically, the text screen and keyboard).  When you write a character, you have a choice of two devices:  standard output or standard error output.  Normally, both send the characte\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 s to the screen.  ORCA lets you redirect these devices separately to either a disk file or a printer.\par \hich\af4\dbch\af4\loch\f4 For example, when you specify a help command, the output is printed on the screen.  Using redirection, the output can be moved, or redirected, somewhere e\hich\af4\dbch\af4\loch\f4 lse.  There are two devices that come with ORCA/C that you might want to use for redirected output, or you can redirect output to any file.  The first device is }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printer device}}}{\hich\af4\dbch\af4\loch\f4 .PRINTER}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers}}}{\hich\af4\dbch\af4\loch\f4 , a character device driver that comes with ORC\hich\af4\dbch\af4\loch\f4 A/C that can be installed in your system folder using the Installer.  Once installed, your C programs can redirect output to .PRINTER to print files, or even open .PRINTER as a file from within a C program to print simple text streams to your printer.  Th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  other driver is .NULL, which accepts input and does nothing; you can redirect output to .NULL if you want to execute a command, but don't want to see the output.\par \hich\af4\dbch\af4\loch\f4 If you have a printer connected and turned on, and you have installed the .PRINTER driver, yo\hich\af4\dbch\af4\loch\f4 u can try a simple redirection:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 help delete >.printer\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If you do not have a printer connected, the system will hang, waiting for a response from the printer.\par \hich\af4\dbch\af4\loch\f4 There are five types of redirect commands available on the command line.\par \par }\pard \s16\qj\li360\sl223\slmult1\widctlpar\tx1080\adjustright {\hich\af4\dbch\af4\loch\f4 <\tab Redirect input.\par \hich\af4\dbch\af4\loch\f4 >\tab Red\hich\af4\dbch\af4\loch\f4 irect output.\par \hich\af4\dbch\af4\loch\f4 >&\tab Redirect error output.\par \hich\af4\dbch\af4\loch\f4 >>\tab Redirect output and append it to the contents of an existing file.\par \hich\af4\dbch\af4\loch\f4 >>&\tab Append error output to an existing file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318136}\hich\af4\dbch\af4\loch\f4 Pipelines{\*\bkmkend _Toc495318136}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard input}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pipes}}}{\hich\af4\dbch\af4\loch\f4 Pipelines let you "pipe" the o\hich\af4\dbch\af4\loch\f4 utput from one process into the input for another process.  The symbol for the pipeline is a vertical bar (|).  For example, you might have two programs.  The first program will determine the students' scores for the year.  The second program will use the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 end-of-year scores to compute class statistics.  You could use the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 prog1|prog2\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 instead of the series of commands\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 prog1 >data\par \hich\af2\dbch\af4\loch\f2 prog2 <data\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As another example, assume you have a program called UPPER which reads characters from the keyboard, conver\hich\af4\dbch\af4\loch\f4 ts them to uppercase, and writes them to the screen.  Then\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 catalog | upper\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would catalog your disk in uppercase.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Unlike pipelines on multitasking systems, pipelines on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  execute sequentially.  Each program runs to completion, sending its out\hich\af4\dbch\af4\loch\f4 put to a temporary file on the work prefix.  The next program uses that file as its input, sending its output (if it is piped) to another temporary file.  The files are called SYSPIPE0, SYSPIPE1, and so on.  They are not deleted after the commands execute\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  so you can edit the files when debugging programs.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318137}\hich\af4\dbch\af4\loch\f4 Writing Your Own Utilities{\*\bkmkend _Toc495318137}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 utilities}}}{\hich\af4\dbch\af4\loch\f4 One of the powerful features of the shell is that you can add new commands.  To do this, you simply write a normal program, then follow a few simple steps to m\hich\af4\dbch\af4\loch\f4 ake the shell aware of it.  The program then becomes a utility.  There are a variety of things that you need to know about programs that are designed to run from the shell which can help you write standard types of utilities that end up looking like they \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ere always a part of the system.  This section covers those facts, as well as stepping you through the installation of a simple utility.\par \hich\af4\dbch\af4\loch\f4 Any program launcher that is capable of launching an EXE file (one kind of executable file the shell can run) is requir\hich\af4\dbch\af4\loch\f4 ed to do some things for you.  It sets up a text device for input and output, gets a user ID number for memory management calls, and if the program launcher is a shell, like ORCA or APW}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW}}}{\hich\af4\dbch\af4\loch\f4 , it can pass the command line to you.\par \hich\af4\dbch\af4\loch\f4 If you are initializ\hich\af4\dbch\af4\loch\f4 ing tools, you will notice that many of them ask you to reserve memory for them, usually in bank zero.  When you do this, you should always use the user ID number returned by the ORCA/C userid function.  This library function returns an integer, and requi\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 es no parameters.  This function works from all environments, regardless of which program launcher executed your program.  It also works for S16 files (described later).  It is very important that you use this user ID number, since failure to do so can re\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ult in memory not being deleted properly when your program has finished executing.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell\:identifier}}}{\hich\af4\dbch\af4\loch\f4 Many program launchers, including ORCA and APW, provide an eight-character shell identifier to tell you what shell you are running under.  For both \hich\af4\dbch\af4\loch\f4 ORCA and APW, the shell identifier is BYTEWRKS.  You can read the shell identifier using the library function shellid, which returns a pointer to a null-terminated string.  If the program launcher does not provide a shell identifier, the function returns \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4  NULL pointer.  You can use this string to see what program launcher launched you.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line\:reading}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\hich\af4\dbch\af4\loch\f4 The last piece of information passed to you by a shell is the one most commonly used by a text-based application.  When you\hich\af4\dbch\af4\loch\f4  execute a program from ORCA, you type the program name, followed by some parameters.  This command line, with any input and output redirection removed, is passed to you.  You can read the information using the library function commandline, which returns \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4  pointer to a null-terminated string containing the character in the command line.  If the program launcher did not provide a command line, the commandline function returns NULL.\par \hich\af4\dbch\af4\loch\f4 The C language provides another mechanism for reading the command line, via t\hich\af4\dbch\af4\loch\f4 he arguments argv and argc to the main function.  You can use this feature in your program.  The principal difference between using argc and argv verses using the commandline function is that argc and argv break the command line up into words, while the c\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 mmandline function gives you the command line exactly as it was typed.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell\:errors}}}{\hich\af4\dbch\af4\loch\f4 When you detect a run-time error in your program, you should report the error by returning a value from main, which is the error code to be returned to the shell.  \hich\af4\dbch\af4\loch\f4  The error code is used by the shell to determine what steps need to be taken, if any, because of the error.  For example, the shell might need to stop execution of an EXEC file.  If a system error occurred, return the error number reported by the toolbox\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4   If an internal error was detected by your program, then you should return the value -1.  You should always return a value from main when you are writing shell utilities, returning 0 if there was no error.  \par \hich\af4\dbch\af4\loch\f4 You can find a small sample program that shows \hich\af4\dbch\af4\loch\f4 these ideas at work on your Samples disk; the path is :CC.Samples:Text.Samples:CLine.cc.  It prints the user ID number, shell identifier and command line passed to it when it executes.  It then sends a zero to indicate that no error has occurred and retur\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 s.  Try running the program with a variety of things typed after the command name, especially input and output redirection.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318138}\hich\af4\dbch\af4\loch\f4 Installing a New Utility{\*\bkmkend _Toc495318138}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 utilities}}}{\hich\af4\dbch\af4\loch\f4 Once you have an executable file that runs under the ORCA shell, you may want to install \hich\af4\dbch\af4\loch\f4 it as a utility.  The advantages of doing so are that the program can be executed from any directory without typing a full path name, and the utility shows up in the command table.  Once it is in the command table, you can use }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\hich\af4\dbch\af4\loch\f4  expansion to abbr\hich\af4\dbch\af4\loch\f4 eviate the command (from the text environment only), and the help command}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HELP command}}}{\hich\af4\dbch\af4\loch\f4  will list it.\par \hich\af4\dbch\af4\loch\f4 Installing the program as a utility is really quite simple.  To do so:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab Place the program (the executable image) in the utility prefix.  As ship\hich\af4\dbch\af4\loch\f4 ped, this is the :ORCA.C:Utilities prefix, but you may have moved it to your hard disk, if you are using one.\par \par \hich\af4\dbch\af4\loch\f4 2.\tab Add the program name to the command table.  The command table is in the SYSTEM folder.  It is called SYSCMND.  The command table is a text fil\hich\af4\dbch\af4\loch\f4 e, and can be changed with the editor.  Simply edit it, and add the name of your program to the list of commands you see.  Be sure the name of your command is the same as the file name you used for the executable file, and that the command name starts in \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 olumn 1.  After at least one space, type a U, which indicates that the command is a utility.\par \par \tab \hich\af4\dbch\af4\loch\f4 Be sure to put the command in the correct location.  The order that commands appear in the command table determines how }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\hich\af4\dbch\af4\loch\f4  expansion works from the text\hich\af4\dbch\af4\loch\f4  based shell.  The shell expands the first command that matches all letters typed.  In general, the commands should be listed alphabetically.\par \par \tab \hich\af4\dbch\af4\loch\f4 The new command will not be in the command table until you use the COMMANDS command to reread the command table,\hich\af4\dbch\af4\loch\f4  or reboot.\par \par \hich\af4\dbch\af4\loch\f4 3.\tab If you would like to have on-line help for the command, add a text file to the Utilities:Help folder.  The name of the file must be the same as the name of the utility.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318139}\hich\af4\dbch\af4\loch\f4 Learning More About the Shell{\*\bkmkend _Toc495318139}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 While this chapter has introduced the bas\hich\af4\dbch\af4\loch\f4 ic concepts needed to deal with the shell, we have really only scratched the surface of what the shell can do for you.  After you get a little experience with shell commands and file names, you should browse through Chapter 8, which covers the shell in de\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ail.  There you will find out many more things about the shell, like how to write shell programs, and how to control the process of compiling programs more closely.{\*\bkmkend shell}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}{\rxe shell}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 text environment{\rxe shell}}}{\par \sect }\sectd \sbkcol\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerl \pard\plain \s25\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Environment Reference Manual\par }}{\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 7 \endash  Desktop Reference\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318140}\hich\af4\dbch\af4\loch\f4 Chapter 7 \endash  Desktop Reference{\*\bkmkend _Toc495318140}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318141}\hich\af4\dbch\af4\loch\f4 Basic Operations{\*\bkmkend _Toc495318141}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart desktopDevelopmentEnvironment}\hich\af4\dbch\af4\loch\f4 The desktop development environment is a standard implementation of a desktop program, as recommended by Apple Computer.  All of the basic operations that you have come to expect on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  and Macintosh computers are supported.  R\hich\af4\dbch\af4\loch\f4 efer to the introductory manuals that came with your computer for information about the standard desktop interface.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318142}\hich\af4\dbch\af4\loch\f4 The Cursor{\*\bkmkend _Toc495318142}\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318143}\hich\af4\dbch\af4\loch\f4 The Insertion Point{\*\bkmkend _Toc495318143}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The main purpose of the mouse is to position the cursor.  Use the mouse to move the cursor around on the scre\hich\af4\dbch\af4\loch\f4 en, and notice how the cursor changes in different regions.  When it is within the confines of the text portion of the window (called the content region of the window), the cursor looks like a cross-hair.  This shape allows you to use the mouse to pinpoin\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  the location of the cursor. The selected place is called the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  \endash  any typing you now do will appear before the insertion point.  Notice that the insertion point is marked with a flashing vertical bar.\par \hich\af4\dbch\af4\loch\f4 For example, if t\hich\af4\dbch\af4\loch\f4 he line\par }\pard\plain \qj\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex74\picscaley75\piccropl0\piccropr0\piccropt0\piccropb0\picw123\pich24\picwgoal2460\pichgoal480\macpict\bliptag-1550471424\blipupi72{\*\blipuid a395af0063573a9dcd5e0f294ada7929}0159000000000018007b1101a00082a0008e01000a0000000002d002409800100000000000180080000000000018007b000000000018007b000102f10002f10002f10002f100100c04300000018000018800018180fe00100c04300000018000018800018180fe000d010630fc00040188000180fd000d010630fc00040188000180fd00110f0733e6300383f007ebe007e38633e000110f0733e6300383f007ebe007e38633e000110f07f63630018600018e30018187763000110f07f63630018600018e30018187763000110f067636b00183e0018ff0018186b7f000110f067636b00183e0018ff0018186b7f000110d0636377001803001be0001b18636ff00110d0636377001803001be0001b18636ff00110f0613e63003c7e000ebf000e3c633f000110f0613e63003c7e000ebf000e3c633f00006f9000008fa0006f9000008fa0002f10002f10002f10002f100a0008fa00083ff}}{\fs18 \tab \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 is on the screen, you would first set the insertion point}{\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  to the position shown by moving the mouse until the cursor is positioned between the 't' and 'e,' and then click the mouse.  When you type a character, the text \hich\af4\dbch\af4\loch\f4 on the screen will be moved apart to make room for the new character, and the character that you typed will be placed in the space.  Typing an 'h' would change the line to be\par }\pard\plain \qj\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex75\picscaley73\piccropl0\piccropr0\piccropt0\piccropb0\picw128\pich23\picwgoal2560\pichgoal460\macpict\bliptag1673867555\blipupi72{\*\blipuid 63c531232f1185fa7ebd79f6ab0e8e25}015600000000001700801101a00082a0008e01000a0000000002d00240980010000000000017008000000000001700800000000000170080000102f10002f10002f10002f100100c08600000030000030c10000303fe00100c08600000030000030c10000303fe000d010c60fc0004030c100003fd000d010c60fc0004030c100003fd00110f0e67cc600707e00fcfd7c00fc70c67c0110f0e67cc600707e00fcfd7c00fc70c67c0110f0fec6c60030c00030c7c6003030eec60110f0fec6c60030c00030c7c6003030eec60110f0cec6d600307c0030c7fe003030d6fe0110f0cec6d600307c0030c7fe003030d6fe0110f0c6c6ee0030060036c7c0003630c6c00110f0c6c6ee0030060036c7c0003630c6c00110f0c27cc60078fc001cc77e001c78c67e0110f0c27cc60078fc001cc77e001c78c67e006f8000010fb0006f8000010fb0002f10002f10002f100a0008fa00083ff}}{\fs18 \tab \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Notice how the insertion point is now between the 'h' and 'e.'\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318144}\hich\af4\dbch\af4\loch\f4 Over Strike M\hich\af4\dbch\af4\loch\f4 ode{\*\bkmkend _Toc495318144}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extras menu}}}{\hich\af4\dbch\af4\loch\f4 What we have been discussing is how text is inserted into a file.  The editor is normally in insert mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 , but you can change this to over strike mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike mode}}}{\hich\af4\dbch\af4\loch\f4 .  When yo\hich\af4\dbch\af4\loch\f4 u are using the over strike mode, new characters replace the character the cursor is on, rather than moving old text over to make room for new characters.  You can switch between the insert and over strike modes by using the Over Strike command in the Ext\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 as menu.  When you are in the over strike mode, the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  will change to a line that appears under the character that will be replaced.  Like the vertical bar, this line flashes.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318145}\hich\af4\dbch\af4\loch\f4 Selecting Text{\*\bkmkend _Toc495318145}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Another important use of the\hich\af4\dbch\af4\loch\f4  mouse is to select text}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 selecting text}}}{\hich\af4\dbch\af4\loch\f4 .  There are a variety of reasons to select text, including:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 clear command}}}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 undo command}}}{\hich\af4\dbch\af4\loch\f4 Selected text can be deleted using the delete key}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 delete key}}}{\hich\af4\dbch\af4\loch\f4  or the Clear command.  (You can r\hich\af4\dbch\af4\loch\f4 etrieve the last text that you deleted by issuing the Undo command, located in the Edit menu.)\par \bullet \tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 paste command}}}{\hich\af4\dbch\af4\loch\f4 Selected text is replaced when you type a character from the keyboard, or when you paste text from the clipboard using the Paste command.\par \bullet \tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 print command}}}{\hich\af4\dbch\af4\loch\f4 If any text is selected when you use the Print command, only the selected text is printed.  This lets you print part of a text window without the need to copy the part you want to print to a separate window.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 If any text is select\hich\af4\dbch\af4\loch\f4 ed when you use the enter key}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 enter key}}}{\hich\af4\dbch\af4\loch\f4  from a text window, or the return key from a shell window, the selected text is executed.  Without this ability, you would be limited to executing single-line shell}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4  commands.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318146}\hich\af4\dbch\af4\loch\f4 Selection By Draggi\hich\af4\dbch\af4\loch\f4 ng{\*\bkmkend _Toc495318146}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Your }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Owner's Manual}{\hich\af4\dbch\af4\loch\f4  described text selection by the clicking and dragging method.  (That is, you click the mouse where you want to start selecting, and then drag the mouse until you have finished selecting.  If you move the mouse off of the t\hich\af4\dbch\af4\loch\f4 ext in any direction, the page will start to scroll.  This allows you to select more text than you can see in the window at any one time.)  ORCA/Desktop supports this method of text selection, and also provides some short-hand ways to choose text blocks. \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 A selection can be cancelled with a single click of the mouse.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318147}\hich\af4\dbch\af4\loch\f4 Selecting Lines{\*\bkmkend _Toc495318147}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 selecting lines}}}{\hich\af4\dbch\af4\loch\f4 When you are typing in a program, one of the most important shortcuts is selecting a line.  To select a line, start by moving the mouse to the left edge \hich\af4\dbch\af4\loch\f4 of the window.  When you have moved the mouse to the left of all of the text, but while it is still on the window, you will see the cursor change to an arrow.  Unlike the arrow that you see when you are selecting menu commands, this one points up and to t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e right.  This special arrow tells you that you are in the correct place to select a line.\par \hich\af4\dbch\af4\loch\f4 To actually select the line, move the mouse so it is to the left of the line you want to select, and click.  The entire line appears highlighted in inverse video.\par \hich\af4\dbch\af4\loch\f4 Yo\hich\af4\dbch\af4\loch\f4 u can also select more than one line using this basic method.  To select more than one line, start as you did before, by moving the mouse to the left of the first line you want to select.  This time, though, hold the mouse button down and drag the mouse u\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4  or down.  As you drag the mouse, all of the lines between the original line and the line you are on will be selected.  As with dragging the mouse over characters, you let up on the mouse button to complete the selection.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318148}\hich\af4\dbch\af4\loch\f4 Selecting the Entire Document{\*\bkmkend _Toc495318148}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 selecting a document}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 select all command}}}{\hich\af4\dbch\af4\loch\f4 There are two ways to select all of the text in a file.  The first, and simplest, is to use the Select All command, located in the Edit menu.\par \hich\af4\dbch\af4\loch\f4 The second method is closely related to selecting lines.  As w\hich\af4\dbch\af4\loch\f4 ith line selections, you start by moving the cursor to the left of the text, but keeping it in the window.  The special right-arrow cursor lets you know you are in the correct place.  Now, hold down the command key (the one with the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  on it) and click the mouse.  All of the text in the document is selected.  Note that it doesn't matter what line you started on.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318149}\hich\af4\dbch\af4\loch\f4 Selecting Words{\*\bkmkend _Toc495318149}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 selecting words}}}{\hich\af4\dbch\af4\loch\f4 Word selection allows you to quickly isolate a single word.  To do this, move the cur\hich\af4\dbch\af4\loch\f4 sor so that it is on the word you want to select, and click the mouse rapidly two times.  This is called double-clicking.  The word that the mouse was on is selected.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318150}\hich\af4\dbch\af4\loch\f4 Extending a Selection{\*\bkmkend _Toc495318150}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extending a selection}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 goto command}}}{\hich\af4\dbch\af4\loch\f4 Extending a sele\hich\af4\dbch\af4\loch\f4 ction is a method that is generally used to select large pieces of text, although it can also be used to change the amount of text already selected.  The basic idea is fairly simple.  You place the cursor at one end of the text you want to select, or you \hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 se one of the existing selection methods to select some text.  Now move the mouse to the point in the text where the selection is to end.  (You can use scrolling or the Goto command, located in the Find menu.)  Hold down the shift key, and click the mouse\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 or continue selecting text.  All of the text, from the original insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  to the new position, is selected.\par \hich\af4\dbch\af4\loch\f4 This method of selecting text is very useful when copying or deleting subroutines from a program.  While you can easil\hich\af4\dbch\af4\loch\f4 y drag the selection region to select the subroutine, it can take a fair amount of time to scroll the screen on a large subroutine.  Instead, you can start by placing the cursor at the beginning of the subroutine, or perhaps by selecting the first line.  \hich\af4\dbch\af4\loch\f4 N\hich\af4\dbch\af4\loch\f4 ow move to the end using whatever method is appropriate.  Holding down the shift key, select the last line in the subroutine.  All lines from the first to the last are also selected, and you can easily copy or cut the subroutine from the file.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318151}\hich\af4\dbch\af4\loch\f4 Split Screen{\*\bkmkend _Toc495318151}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\shp{\*\shpinst\shpleft4176\shptop31\shpright7956\shpbottom2731\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz4\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw189\pich135\picwgoal3780\pichgoal2700\macpict\bliptag756515956\blipupi72{\*\blipuid 2d17847411805c7224394555644f2dc8}139800000000008700bd001102ff0c00ffffffff000000000000000000bd0000008700000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff02a803b200a0008200a0008e001e0001000a00000000008700bd0098002800000000004d014000000000004d013c00000000002e00bd000102d90006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e0090060de00037fffffe0090060de00037fffffe00b02600380e00003600000600b02600380e00003600000600a016006df0003600600600a016006df0003600600600a016006df0003601980600a016006df0003601980600701600cdf00fd600701600cdf00fd600a016006df0003618018600a016006df0003618018600a016006df000367e07e600a016006df000367e07e600802600380e000fd600802600380e000fd60060060de00fd60060060de00fd60110060fe000006fd0003c000000eea00fd60110060fe000006fd0003c000000eea00fd60100060f90003c0000006ea0003607fe060100060f90003c0000006ea0003607fe060180f6018df8fce0f9f8f8fc00fcf860f9780ed000360000060180f6018df8fce0f9f8f8fc00fcf860f9780ed00036000006018056018d8d80618fed806c01818c618d8c6ed00037fffffe018056018d8d80618fed806c01818c618d8c6ed00037fffffe0160e6018d8cf8618d8dfd8c01818c618d8ec00fe660060160e6018d8cf8618d8dfd8c01818c618d8ec00fe660060180f6018d8c0c60fd8d818c01818c618d806ed00037fffffe0180f6018d8c0c60fd8d818c01818c618d806ed00037fffffe0180f600f98df8f00d8cfcfc00fcf8f0f9806ed0003780001e0180f600f98df8f00d8cfcfc00fcf8f0f9806ed0003780001e0120060fd00010f80f900000ced0003780001e0120060fd00010f80f900000ced0003780001e0150060fe000006fd0000c0fe0000c6eb0003780001e0150060fe000006fd0000c0fe0000c6eb0003780001e0110060f90000c0fe0000c0eb0003780001e0110060f90000c0fe0000c0eb0003780001e019106018df8fce0f9f8f8fc0178f8fce18cfc0ee0003780001e019106018df8fce0f9f8f8fc0178f8fce18cfc0ee0003780001e019056018d8d80618fed807c018c0d8c618d806ee0003780001e019056018d8d80618fed807c018c0d8c618d806ee0003780001e019106018d8cf8618d8dfd8c0180fd8c618cf80ee00037fffffe019106018d8cf8618d8dfd8c0180fd8c618cf80ee00037fffffe019106018d8c0c60fd8d818c01818d8c618c0c6ee0003799999e019106018d8c0c60fd8d818c01818d8c618c0c6ee0003799999e01810600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fe6600601810600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fe660060120060fd00010f80f800000cee0003799999e0120060fd00010f80f800000cee0003799999e00c0060fe000006e200fe6600600c0060fe000006e200fe6600600000980028004d0000009a0140004d0000009a013c002e0000005b00bd00010d0060fe000006e20003799999e00d0060fe000006e20003799999e0100760178f8fdf801780e500037fffffe0100760178f8fdf801780e500037fffffe010076018d8d8060018c6e500036000006010076018d8d8060018c6e50003600000600f0660181fd8060018e40003607fe0600f0660181fd8060018e40003607fe0600d0060fe180306c01806e500fd600d0060fe180306c01806e500fd600d0760180fcfc3801806e500fd600d0760180fcfc3801806e500fd600a0060fb00000ce500fd600a0060fb00000ce500fd60090060de000367e07e60090060de000367e07e60090060de000361801860090060de000361801860060060de00fd60060060de00fd60090060de000360198060090060de000360198060090060de000360060060090060de000360060060090060de000360000060090060de000360000060090060de00037fffffe0090060de00037fffffe0090060de00037fffffe0090060de00037fffffe0090060de00037fffffe0090060de00037fffffe006007fdbff00e006007fdbff00e0090060de00037fffffe0090060de00037fffffe02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb00037fffffe02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb00037fffffe02305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb0003600000602305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb000360000060291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8060060060291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8060060060290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c060198060290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c060198060271d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0002180fc0fd60271d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0002180fc0fd60291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c061801860291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c061801860291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc067e07e60291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc067e07e600e0060f100000cf600000cfb00fd600e0060f100000cf600000cfb00fd601d176000000f80060f800e0600df80001f80060300000e000006f500fd601d176000000f80060f800e0600df80001f80060300000e000006f500fd601d176000001840061840060000d8c00018c00606000006000003f500fd601d176000001840061840060000d8c00018c00606000006000003f500fd602118600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f60003607fe0602118600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f60003607fe06021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f600036000006021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f6000360000060210060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600037fffffe0210060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600037fffffe0201860000010d806d0d8c60618d81818d818c6c61818c618d80306f600fe660060201860000010d806d0d8c60618d81818d818c6c61818c618d80306f600fe66006021056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f60003799999e021056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f60003799999e00c0060ea00000cf600fe6600600c0060ea00000cf600fe660060180060fd00000efa00000efe000306001fc0f20003799999e0180060fd00000efa00000efe000306001fc0f20003799999e0170060fd000006fa000006fe00030f0000c0f200fe660060170060fd000006fa000006fe00030f0000c0f200fe6600601d146000000fcf860f97800f800fcf860f978019800180f200037fffffe01d146000000fcf860f97800f800fcf860f978019800180f200037fffffe01d146000001818c618d8c000001818c618d8c000000306f20003780001e01d146000001818c618d8c000001818c618d8c000000306f20003780001e01d0f6000001818c618d8000f801818c618d8fe00010180f20003780001e000980028009a000000e40140009a000000e4013c005b0000008700bd00011d0f6000001818c618d8000f801818c618d8fe00010180f20003780001e01d076000001818c618d8fe00041818c618d8fe000118c6f20003780001e01d076000001818c618d8fe00041818c618d8fe000118c6f20003780001e01d076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f20003780001e01d076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f20003780001e00d0060ee00000cf20003780001e00d0060ee00000cf20003780001e01e0060fd00011806fe000306078fc0fe0005c60000021fc0f40003780001e01e0060fd00011806fe000306078fc0fe0005c60000021fc0f40003780001e01d0060fd0001180efe00030e0c18c0fe0004c000001ad8f300037fffffe01d0060fd0001180efe00030e0c18c0fe0004c000001ad8f300037fffffe01e1560000017801f86000f80061819c0178f8fce18cfcf9ef30003799999e01e1560000017801f86000f80061819c0178f8fce18cfcf9ef30003799999e01e0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f400fe6600601e0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f400fe6600601f16600000180018c6000f800618dcc0180fd8c618cf8f80c0f40003799999e01f16600000180018c6000f800618dcc0180fd8c618cf8f80c0f40003799999e01e06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f400fe6600601e06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f400fe6600601f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f40003799999e01f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f40003799999e00d0060ec00000cf400037fffffe00d0060ec00000cf400037fffffe01e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003600000601e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003600000601d0060fd00081818c000000e0c18c6fe0004c000001ad8f30003607fe0601d0060fd00081818c000000e0c18c6fe0004c000001ad8f30003607fe0601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601c16600000180018c6000f800618dcc6180fd8c618cf8f80c0f400fd601c16600000180018c6000f800618dcc6180fd8c618cf8f80c0f400fd601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f4000367e07e601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f4000367e07e601f16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f40003618018601f16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f40003618018600a0060ec00000cf400fd600a0060ec00000cf400fd60090060de000360198060090060de000360198060090060de000360060060090060de000360060060090060de000360000060090060de00036000006006007fdbff00e006007fdbff00e013036000003ffeff00f9e89906c000006000006013036000003ffeff00f9e89906c000006000006014036007003efe000036e9660767c01c0067fe006014036007003efe000036e9660767c01c0067fe00601303601b003efe000039e89906c01b00660600601303601b003efe000039e89906c01b006606006014036063fe3efe000036e9660767cff8c06607fe6014036063fe3efe000036e9660767cff8c06607fe6013036180063efe000039e89906cc00306606066013036180063efe000039e89906cc00306606066014036600063efe000036e9660767cc000c67fe066014036600063efe000036e9660767cc000c67fe066013036180063efe000039e89906cc003060c0066013036180063efe000039e89906cc003060c0066014036063fe3efe000036e9660767cff8c060c0066014036063fe3efe000036e9660767cff8c060c006601303601b003efe000039e89906c01b0060c006601303601b003efe000039e89906c01b0060c0066014036007003efe000036e9660767c01c0060fffe6014036007003efe000036e9660767c01c0060fffe6013036000003efe000039e89906c000006000006013036000003efe000039e89906c000006000006014036000003ffeff00f6e9660767c000006000006014036000003ffeff00f6e9660767c000006000006006007fdbff00e006007fdbff00e002d9000000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx4175\posy30\absh2700\absw3780\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw189\pich135\picwgoal3780\pichgoal2700\macpict\bliptag756515956\blipupi72{\*\blipuid 2d17847411805c7224394555644f2dc8}139800000000008700bd001102ff0c00ffffffff000000000000000000bd0000008700000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff02a803b200a0008200a0008e001e0001000a00000000008700bd0098002800000000004d014000000000004d013c00000000002e00bd000102d90006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e0090060de00037fffffe0090060de00037fffffe00b02600380e00003600000600b02600380e00003600000600a016006df0003600600600a016006df0003600600600a016006df0003601980600a016006df0003601980600701600cdf00fd600701600cdf00fd600a016006df0003618018600a016006df0003618018600a016006df000367e07e600a016006df000367e07e600802600380e000fd600802600380e000fd60060060de00fd60060060de00fd60110060fe000006fd0003c000000eea00fd60110060fe000006fd0003c000000eea00fd60100060f90003c0000006ea0003607fe060100060f90003c0000006ea0003607fe060180f6018df8fce0f9f8f8fc00fcf860f9780ed000360000060180f6018df8fce0f9f8f8fc00fcf860f9780ed00036000006018056018d8d80618fed806c01818c618d8c6ed00037fffffe018056018d8d80618fed806c01818c618d8c6ed00037fffffe0160e6018d8cf8618d8dfd8c01818c618d8ec00fe660060160e6018d8cf8618d8dfd8c01818c618d8ec00fe660060180f6018d8c0c60fd8d818c01818c618d806ed00037fffffe0180f6018d8c0c60fd8d818c01818c618d806ed00037fffffe0180f600f98df8f00d8cfcfc00fcf8f0f9806ed0003780001e0180f600f98df8f00d8cfcfc00fcf8f0f9806ed0003780001e0120060fd00010f80f900000ced0003780001e0120060fd00010f80f900000ced0003780001e0150060fe000006fd0000c0fe0000c6eb0003780001e0150060fe000006fd0000c0fe0000c6eb0003780001e0110060f90000c0fe0000c0eb0003780001e0110060f90000c0fe0000c0eb0003780001e019106018df8fce0f9f8f8fc0178f8fce18cfc0ee0003780001e019106018df8fce0f9f8f8fc0178f8fce18cfc0ee0003780001e019056018d8d80618fed807c018c0d8c618d806ee0003780001e019056018d8d80618fed807c018c0d8c618d806ee0003780001e019106018d8cf8618d8dfd8c0180fd8c618cf80ee00037fffffe019106018d8cf8618d8dfd8c0180fd8c618cf80ee00037fffffe019106018d8c0c60fd8d818c01818d8c618c0c6ee0003799999e019106018d8c0c60fd8d818c01818d8c618c0c6ee0003799999e01810600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fe6600601810600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fe660060120060fd00010f80f800000cee0003799999e0120060fd00010f80f800000cee0003799999e00c0060fe000006e200fe6600600c0060fe000006e200fe6600600000980028004d0000009a0140004d0000009a013c002e0000005b00bd00010d0060fe000006e20003799999e00d0060fe000006e20003799999e0100760178f8fdf801780e500037fffffe0100760178f8fdf801780e500037fffffe010076018d8d8060018c6e500036000006010076018d8d8060018c6e50003600000600f0660181fd8060018e40003607fe0600f0660181fd8060018e40003607fe0600d0060fe180306c01806e500fd600d0060fe180306c01806e500fd600d0760180fcfc3801806e500fd600d0760180fcfc3801806e500fd600a0060fb00000ce500fd600a0060fb00000ce500fd60090060de000367e07e60090060de000367e07e60090060de000361801860090060de000361801860060060de00fd60060060de00fd60090060de000360198060090060de000360198060090060de000360060060090060de000360060060090060de000360000060090060de000360000060090060de00037fffffe0090060de00037fffffe0090060de00037fffffe0090060de00037fffffe0090060de00037fffffe0090060de00037fffffe006007fdbff00e006007fdbff00e0090060de00037fffffe0090060de00037fffffe02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb00037fffffe02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb00037fffffe02305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb0003600000602305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb000360000060291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8060060060291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f8060060060290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c060198060290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c060198060271d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0002180fc0fd60271d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0002180fc0fd60291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c061801860291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c061801860291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc067e07e60291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0006180fc067e07e600e0060f100000cf600000cfb00fd600e0060f100000cf600000cfb00fd601d176000000f80060f800e0600df80001f80060300000e000006f500fd601d176000000f80060f800e0600df80001f80060300000e000006f500fd601d176000001840061840060000d8c00018c00606000006000003f500fd601d176000001840061840060000d8c00018c00606000006000003f500fd602118600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f60003607fe0602118600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f60003607fe06021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f600036000006021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f6000360000060210060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600037fffffe0210060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600037fffffe0201860000010d806d0d8c60618d81818d818c6c61818c618d80306f600fe660060201860000010d806d0d8c60618d81818d818c6c61818c618d80306f600fe66006021056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f60003799999e021056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f60003799999e00c0060ea00000cf600fe6600600c0060ea00000cf600fe660060180060fd00000efa00000efe000306001fc0f20003799999e0180060fd00000efa00000efe000306001fc0f20003799999e0170060fd000006fa000006fe00030f0000c0f200fe660060170060fd000006fa000006fe00030f0000c0f200fe6600601d146000000fcf860f97800f800fcf860f978019800180f200037fffffe01d146000000fcf860f97800f800fcf860f978019800180f200037fffffe01d146000001818c618d8c000001818c618d8c000000306f20003780001e01d146000001818c618d8c000001818c618d8c000000306f20003780001e01d0f6000001818c618d8000f801818c618d8fe00010180f20003780001e000980028009a000000e40140009a000000e4013c005b0000008700bd00011d0f6000001818c618d8000f801818c618d8fe00010180f20003780001e01d076000001818c618d8fe00041818c618d8fe000118c6f20003780001e01d076000001818c618d8fe00041818c618d8fe000118c6f20003780001e01d076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f20003780001e01d076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f20003780001e00d0060ee00000cf20003780001e00d0060ee00000cf20003780001e01e0060fd00011806fe000306078fc0fe0005c60000021fc0f40003780001e01e0060fd00011806fe000306078fc0fe0005c60000021fc0f40003780001e01d0060fd0001180efe00030e0c18c0fe0004c000001ad8f300037fffffe01d0060fd0001180efe00030e0c18c0fe0004c000001ad8f300037fffffe01e1560000017801f86000f80061819c0178f8fce18cfcf9ef30003799999e01e1560000017801f86000f80061819c0178f8fce18cfcf9ef30003799999e01e0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f400fe6600601e0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f400fe6600601f16600000180018c6000f800618dcc0180fd8c618cf8f80c0f40003799999e01f16600000180018c6000f800618dcc0180fd8c618cf8f80c0f40003799999e01e06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f400fe6600601e06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f400fe6600601f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f40003799999e01f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f40003799999e00d0060ec00000cf400037fffffe00d0060ec00000cf400037fffffe01e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003600000601e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003600000601d0060fd00081818c000000e0c18c6fe0004c000001ad8f30003607fe0601d0060fd00081818c000000e0c18c6fe0004c000001ad8f30003607fe0601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601c16600000180018c6000f800618dcc6180fd8c618cf8f80c0f400fd601c16600000180018c6000f800618dcc6180fd8c618cf8f80c0f400fd601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f4000367e07e601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f4000367e07e601f16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f40003618018601f16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f40003618018600a0060ec00000cf400fd600a0060ec00000cf400fd60090060de000360198060090060de000360198060090060de000360060060090060de000360060060090060de000360000060090060de00036000006006007fdbff00e006007fdbff00e013036000003ffeff00f9e89906c000006000006013036000003ffeff00f9e89906c000006000006014036007003efe000036e9660767c01c0067fe006014036007003efe000036e9660767c01c0067fe00601303601b003efe000039e89906c01b00660600601303601b003efe000039e89906c01b006606006014036063fe3efe000036e9660767cff8c06607fe6014036063fe3efe000036e9660767cff8c06607fe6013036180063efe000039e89906cc00306606066013036180063efe000039e89906cc00306606066014036600063efe000036e9660767cc000c67fe066014036600063efe000036e9660767cc000c67fe066013036180063efe000039e89906cc003060c0066013036180063efe000039e89906cc003060c0066014036063fe3efe000036e9660767cff8c060c0066014036063fe3efe000036e9660767cff8c060c006601303601b003efe000039e89906c01b0060c006601303601b003efe000039e89906c01b0060c0066014036007003efe000036e9660767c01c0060fffe6014036007003efe000036e9660767c01c0060fffe6013036000003efe000039e89906c000006000006013036000003efe000039e89906c000006000006014036000003ffeff00f6e9660767c000006000006014036000003ffeff00f6e9660767c000006000006006007fdbff00e006007fdbff00e002d9000000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 split screen\bxe }}}{\hich\af4\dbch\af4\loch\f4 How many times have you been typing in a program, and wanted to refer back to an earlier subroutine or data declaration?  Split screen is a feature designed to help you do that.  When you split the screen, you can look at two diff\hich\af4\dbch\af4\loch\f4 erent parts of a file at the same time.\par \hich\af4\dbch\af4\loch\f4 Splitting the screen is very simple.  The screen splitting control is the small black box that appears just above the vertical scroll bar.  Move the cursor to this box, and drag it about halfway down the page.  When \hich\af4\dbch\af4\loch\f4 you release the mouse button, the screen will split.\par \hich\af4\dbch\af4\loch\f4 You can edit in either half of the window.  Simply use the cursor to position the insertion point, or scroll using either vertical scroll bar.  The active half of the screen will change automatically.  \par \hich\af4\dbch\af4\loch\f4 There is one limitation on split screens.  In order to show a complete scroll bar, you must have at least five lines of text in both the top and bottom half of the screen.  If you try to make either part of the screen smaller, the split will be moved to g\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ve the appropriate number of lines.  If the window isn't large enough to split it with five lines on both the top and bottom, the split screen control will vanish.  With this restriction in mind, you can split the screen between any two lines.\par \hich\af4\dbch\af4\loch\f4 Removing the\hich\af4\dbch\af4\loch\f4  split screen is just as easy as splitting it.  Simply drag the split screen control to the top of the window and release it.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318152}\hich\af4\dbch\af4\loch\f4 Entering Text{\*\bkmkend _Toc495318152}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Whenever a text window is the front (active) window, and a dialog box is not active, any text you type from the keyb\hich\af4\dbch\af4\loch\f4 oard will appear in the window.  In insert mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 , the text always appears before the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4 .  In over strike mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike mode}}}{\hich\af4\dbch\af4\loch\f4 , the character that is underlined is replaced.\par \hich\af4\dbch\af4\loch\f4 If you select some\hich\af4\dbch\af4\loch\f4  text, and then begin typing, the selected text is deleted, and the new characters appear where the selected text was located.\par \hich\af4\dbch\af4\loch\f4 If the insertion point is not on the screen when you start typing, the screen will scroll to show the insertion point, and then t\hich\af4\dbch\af4\loch\f4 he characters are inserted.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318153}\hich\af4\dbch\af4\loch\f4 Special Keys{\*\bkmkend _Toc495318153}\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318154}\hich\af4\dbch\af4\loch\f4 The Return Key{\*\bkmkend _Toc495318154}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 For any text window that is not a shell window, the return key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return key}}}{\hich\af4\dbch\af4\loch\f4  breaks a line at the point where the return key is pressed, moving all of the text from the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 inser\hich\af4\dbch\af4\loch\f4 tion point}}}{\hich\af4\dbch\af4\loch\f4  to the end of the line to a new line.  If you are at the end of a line when you type the return key, a new, blank line is created.  There are, however, many variations on this basic theme.  If you are in over strike mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike mode}}}{\hich\af4\dbch\af4\loch\f4 , the behavior of the return key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return key}}}{\hich\af4\dbch\af4\loch\f4  changes.  Instead of breaking the line or creating a new line, the return key functions simply as a cursor movement command \endash  the insertion point is moved to the start of the next line in the file.  On\hich\af4\dbch\af4\loch\f4 ly if you are at the end of the file does the return key create a new line.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 indenting}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extras menu}}}{\hich\af4\dbch\af4\loch\f4 In block-structured languages like C}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 C}}}{\hich\af4\dbch\af4\loch\f4  and Pascal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}}}{\hich\af4\dbch\af4\loch\f4 , indenting is often used to show the structure of a program.  The maj\hich\af4\dbch\af4\loch\f4 or problem with indenting is moving the cursor to the correct spot in the line before starting to type in text.  The way the return key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return key}}}{\hich\af4\dbch\af4\loch\f4  works can be changed to make this process easier.  Once changed, pressing return causes the insertion\hich\af4\dbch\af4\loch\f4  point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  to automatically space over, following the indentation of the line above the current line.  If the current line is blank, the cursor is moved to line up with the first line above the current line that is not blank.  This is c\hich\af4\dbch\af4\loch\f4 alled the Auto-Indent mode.  To activate auto-indent mode, select Auto Indent from the Extras menu.  Auto indent is turned off by selecting it a second time.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318155}\hich\af4\dbch\af4\loch\f4 Delete Key{\*\bkmkend _Toc495318155}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 clear command}}}{\hich\af4\dbch\af4\loch\f4 If you have selected any text, the delete key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 delete key\bxe }}}{\hich\af4\dbch\af4\loch\f4  works exactly like the Clear command:  it removes the selected text from the file.  If no text is selected, the delete key deletes the character to the left of the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4 .  If the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is at the start of a line, the remainder of the line is appended to the end of the line above.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318156}\hich\af4\dbch\af4\loch\f4 Tab Key{\*\bkmkend _Toc495318156}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If you are in insert mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 , the tab key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab key\bxe }}}{\hich\af4\dbch\af4\loch\f4  inserts spaces until the insertion point reaches the next tab stop}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab\hich\af4\dbch\af4\loch\f4  stop}}}{\hich\af4\dbch\af4\loch\f4 .  In over strike mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike mode}}}{\hich\af4\dbch\af4\loch\f4 , the tab key simply moves the insertion point forward to the next tab stop.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318157}\hich\af4\dbch\af4\loch\f4 The Arrow Keys{\*\bkmkend _Toc495318157}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The four arrow keys}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrow keys\bxe }}}{\hich\af4\dbch\af4\loch\f4  can be used to move the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4 .  U\hich\af4\dbch\af4\loch\f4 sing the arrow keys will deselect any previously selected text without removing it from the file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318158}\hich\af4\dbch\af4\loch\f4 Screen Moves{\*\bkmkend _Toc495318158}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Holding down the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  key while typing the }{\outl \hich\af4\dbch\af4\loch\f4 UP-ARROW}{\hich\af4\dbch\af4\loch\f4  key will cause the selection point to move to the top of the window.  If the insertion point is \hich\af4\dbch\af4\loch\f4 already at the top of the window, the window will scroll up by one screen.\par \hich\af4\dbch\af4\loch\f4 Likewise, holding down the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  key while typing the }{\outl \hich\af4\dbch\af4\loch\f4 DOWN-ARROW}{\hich\af4\dbch\af4\loch\f4  key will move the selection point to the bottom of the window.  Again, if you are already at the bottom of the window, t\hich\af4\dbch\af4\loch\f4 he display scrolls down one screen full toward the end of the file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318159}\hich\af4\dbch\af4\loch\f4 Word Tabbing{\*\bkmkend _Toc495318159}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 You can move to the start of the next word or previous word in the file using word tabbing}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 word tabbing\bxe }}}{\hich\af4\dbch\af4\loch\f4 .  A word is defined as any sequence of characters other than\hich\af4\dbch\af4\loch\f4  spaces and end-of-line markers.  To move to the next word in the file, hold down the option key and type the }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\hich\af4\dbch\af4\loch\f4  key.  Using the }{\outl \hich\af4\dbch\af4\loch\f4 LEFT-ARROW}{\hich\af4\dbch\af4\loch\f4  key instead of the }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\hich\af4\dbch\af4\loch\f4  key will move to the beginning of the previous word.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318160}\hich\af4\dbch\af4\loch\f4 Moving to the Start or \hich\af4\dbch\af4\loch\f4 End of a Line{\*\bkmkend _Toc495318160}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 You can move to the start of a line by holding down the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  key and typing the }{\outl \hich\af4\dbch\af4\loch\f4 LEFT-ARROW}{\hich\af4\dbch\af4\loch\f4  key.  This moves to the first column in the line, regardless of the current auto-indent mode.  To move to the end of the line, hold down the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  key and typ\hich\af4\dbch\af4\loch\f4 e the }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\hich\af4\dbch\af4\loch\f4  key.  This moves to the column immediately after the last non-blank character in the line.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318161}\hich\af4\dbch\af4\loch\f4 Moving Within the File{\*\bkmkend _Toc495318161}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Typing one of the digit keys (1 to 9) while holding down the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  key will move the display to one of nine evenly spaced interv\hich\af4\dbch\af4\loch\f4 als in the file.  }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 1 moves to the start of the file, while }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 9 moves to the end of the file.  The other keys each move to a location one-eighth of the way through the file from the previous key.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {\page {\*\bkmkstart _Toc495318162}\hich\af4\dbch\af4\loch\f4 The Ruler{\*\bkmkend _Toc495318162}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\shp{\*\shpinst\shpleft4176\shptop63\shpright7956\shpbottom2763\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz5\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw189\pich135\picwgoal3780\pichgoal2700\macpict\bliptag1835828058\blipupi72{\*\blipuid 6d6c835af932f7cb5dea8c11faebbd52}148800000000008700bd001102ff0c00ffffffff000000000000000000bd0000008700000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff02a803b200a0008200a0008e001e0001000a00000000008700bd0098002800000000004d014000000000004d013c00000000002e00bd000102d90006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e0060060db000060060060db000060130060f8000001f8000003f800010780fa000060130060f8000001f8000003f800010780fa000060230060fd000001fd000001fd000001fd00010480fe000001fd000001fd000001fe000060230060fd000001fd000001fd000001fd00010480fe000001fd000001fd000001fe000060220060fd000001fd000001fd000001fd000001fd000001fd000003fd000001fe000060220060fd000001fd000001fd000001fd000001fd000001fd000003fd000001fe000060230060fd030001fd030001fd030001fd030002fd030001fd03010083fe030001fe000060230060fd030001fd030001fd030001fd030002fd030001fd03010083fe030001fe000060210060fd030000fd030001fd030000fd03010783fe030000fd030007fd03fd000060210060fd030000fd030001fd030000fd03010783fe030000fd030007fd03fd000060160060f9000003fa000003fa000003fa000003fc000060160060f9000003fa000003fa000003fa000003fc0000601a0060f900010780fb00010780fb00010780fb00010780fd0000601a0060f900010780fb00010780fb00010780fb00010780fd0000601a0060f900010fc0fb00010fc0fb00010fc0fb00010fc0fd0000601a0060f900010fc0fb00010fc0fb00010fc0fb00010fc0fd000060060060db000060060060db00006006007fdbff00e006007fdbff00e0090060de00037fffffe0090060de00037fffffe0150060fe000006fd0000c0fe0000c6eb000360000060150060fe000006fd0000c0fe0000c6eb000360000060110060f90000c0fe0000c0eb000360060060110060f90000c0fe0000c0eb00036006006019106018df8fce0f9f8f8fc0178f8fce18cfc0ee00036019806019106018df8fce0f9f8f8fc0178f8fce18cfc0ee00036019806016056018d8d80618fed807c018c0d8c618d806ee00fd6016056018d8d80618fed807c018c0d8c618d806ee00fd6019106018d8cf8618d8dfd8c0180fd8c618cf80ee00036180186019106018d8cf8618d8dfd8c0180fd8c618cf80ee00036180186019106018d8c0c60fd8d818c01818d8c618c0c6ee000367e07e6019106018d8c0c60fd8d818c01818d8c618c0c6ee000367e07e601610600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fd601610600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fd600f0060fd00010f80f800000cee00fd600f0060fd00010f80f800000cee00fd600a0060fe000006e200fd600a0060fe000006e200fd600d0060fe000006e20003607fe0600d0060fe000006e20003607fe060100760178f8fdf801780e5000360000060100760178f8fdf801780e500036000006010076018d8d8060018c6e500037fffffe010076018d8d8060018c6e500037fffffe00e0660181fd8060018e400fe6600600e0660181fd8060018e400fe6600600000980028004d0000009a0140004d0000009a013c002e0000005b00bd0001100060fe180306c01806e50003799999e0100060fe180306c01806e50003799999e00f0760180fcfc3801806e500fe6600600f0760180fcfc3801806e500fe6600600d0060fb00000ce50003799999e00d0060fb00000ce50003799999e0080060de00fe660060080060de00fe660060090060de0003799999e0090060de0003799999e0080060de00fe660060080060de00fe660060090060de0003799999e0090060de0003799999e0080060de00fe660060080060de00fe660060090060de0003799999e0090060de0003799999e0090060de00037fffffe0090060de00037fffffe0090060de0003780001e0090060de0003780001e010036000000efc000006e70003780001e010036000000efc000006e70003780001e0100360000006fc00000ee70003780001e0100360000006fc00000ee70003780001e01209600fcf860f97800f8006e70003780001e01209600fcf860f97800f8006e70003780001e0130a601818c618d8c000000606e80003780001e0130a601818c618d8c000000606e80003780001e01209601818c618d8000f8006e70003780001e01209601818c618d8000f8006e70003780001e01305601818c618d8fe00010606e80003780001e01305601818c618d8fe00010606e80003780001e01305600fcf8f0f98fe00010f06e80003780001e01305600fcf8f0f98fe00010f06e80003780001e00d0060f800000ce80003780001e00d0060f800000ce80003780001e02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb0003780001e02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb0003780001e02305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb0003780001e02305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb0003780001e0291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f80780001e0291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f80780001e0290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c0780001e0290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c0780001e0291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc07fffffe0291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc07fffffe0291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c0799999e0291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c0799999e0291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0002180fc0fe660060291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0002180fc0fe660060110060f100000cf600000cfb0003799999e0110060f100000cf600000cfb0003799999e01f176000000f80060f800e0600df80001f80060300000e000006f500fe6600601f176000000f80060f800e0600df80001f80060300000e000006f500fe66006020176000001840061840060000d8c00018c00606000006000003f50003799999e020176000001840061840060000d8c00018c00606000006000003f50003799999e02018600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f600fe6600602018600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f600fe66006021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f60003799999e021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f60003799999e0200060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600fe660060200060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600fe660060211860000010d806d0d8c60618d81818d818c6c61818c618d80306f60003799999e0211860000010d806d0d8c60618d81818d818c6c61818c618d80306f60003799999e020056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f600fe66006020056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f600fe6600600d0060ea00000cf60003799999e00d0060ea00000cf60003799999e0170060fd00000efa00000efe000306001fc0f200fe660060170060fd00000efa00000efe000306001fc0f200fe660060180060fd000006fa000006fe00030f0000c0f20003799999e0180060fd000006fa000006fe00030f0000c0f20003799999e01c146000000fcf860f97800f800fcf860f978019800180f200fe6600601c146000000fcf860f97800f800fcf860f978019800180f200fe6600601d146000001818c618d8c000001818c618d8c000000306f20003799999e000980028009a000000e40140009a000000e4013c005b0000008700bd00011d146000001818c618d8c000001818c618d8c000000306f20003799999e01c0f6000001818c618d8000f801818c618d8fe00010180f200fe6600601c0f6000001818c618d8000f801818c618d8fe00010180f200fe6600601d076000001818c618d8fe00041818c618d8fe000118c6f20003799999e01d076000001818c618d8fe00041818c618d8fe000118c6f20003799999e01c076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f200fe6600601c076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f200fe6600600d0060ee00000cf20003799999e00d0060ee00000cf20003799999e01d0060fd00011806fe000306078fc0fe0005c60000021fc0f400fe6600601d0060fd00011806fe000306078fc0fe0005c60000021fc0f400fe6600601d0060fd0001180efe00030e0c18c0fe0004c000001ad8f30003799999e01d0060fd0001180efe00030e0c18c0fe0004c000001ad8f30003799999e01d1560000017801f86000f80061819c0178f8fce18cfcf9ef300fe6600601d1560000017801f86000f80061819c0178f8fce18cfcf9ef300fe6600601f0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f40003799999e01f0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f40003799999e01e16600000180018c6000f800618dcc0180fd8c618cf8f80c0f400fe6600601e16600000180018c6000f800618dcc0180fd8c618cf8f80c0f400fe6600601f06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f40003799999e01f06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f40003799999e01f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f400037fffffe01f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f400037fffffe00d0060ec00000cf40003600000600d0060ec00000cf40003600000601e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003607fe0601e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003607fe0601a0060fd00081818c000000e0c18c6fe0004c000001ad8f300fd601a0060fd00081818c000000e0c18c6fe0004c000001ad8f300fd601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601f16600000180018c6000f800618dcc6180fd8c618cf8f80c0f4000367e07e601f16600000180018c6000f800618dcc6180fd8c618cf8f80c0f4000367e07e601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f40003618018601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f40003618018601c16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f400fd601c16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f400fd600d0060ec00000cf40003601980600d0060ec00000cf4000360198060090060de000360060060090060de000360060060090060de000360000060090060de00036000006006007fdbff00e006007fdbff00e013036000003ffeff00f9e89906c000006000006013036000003ffeff00f9e89906c000006000006014036007003efe000036e9660767c01c0067fe006014036007003efe000036e9660767c01c0067fe00601303601b003efe000039e89906c01b00660600601303601b003efe000039e89906c01b006606006014036063fe3efe000036e9660767cff8c06607fe6014036063fe3efe000036e9660767cff8c06607fe6013036180063efe000039e89906cc00306606066013036180063efe000039e89906cc00306606066014036600063efe000036e9660767cc000c67fe066014036600063efe000036e9660767cc000c67fe066013036180063efe000039e89906cc003060c0066013036180063efe000039e89906cc003060c0066014036063fe3efe000036e9660767cff8c060c0066014036063fe3efe000036e9660767cff8c060c006601303601b003efe000039e89906c01b0060c006601303601b003efe000039e89906c01b0060c0066014036007003efe000036e9660767c01c0060fffe6014036007003efe000036e9660767c01c0060fffe6013036000003efe000039e89906c000006000006013036000003efe000039e89906c000006000006014036000003ffeff00f6e9660767c000006000006014036000003ffeff00f6e9660767c000006000006006007fdbff00e006007fdbff00e002d9000000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx4175\posy62\absh2700\absw3780\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw189\pich135\picwgoal3780\pichgoal2700\macpict\bliptag1835828058\blipupi72{\*\blipuid 6d6c835af932f7cb5dea8c11faebbd52}148800000000008700bd001102ff0c00ffffffff000000000000000000bd0000008700000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff02a803b200a0008200a0008e001e0001000a00000000008700bd0098002800000000004d014000000000004d013c00000000002e00bd000102d90006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff8000ff7ff0afc1cccfcfe1c19983f8787f6ff030001ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff0afcccccfcfcccf999ff3333f6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff02fcccccfefc04f999ff3f3ff6ff033e79ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afc1cccfcfe1c3c387f3f3ff6ff030079ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcffccfe79ff3f3ff6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff9ffcff7ff0afcccccfcfcccfe79ff3333f6ff033ff9ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe01a037ff8000ff7ff0afc1e1c0c0e1c1e78338787f6ff030001ffe006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e006007fdbff00e0060060db000060060060db000060130060f8000001f8000003f800010780fa000060130060f8000001f8000003f800010780fa000060230060fd000001fd000001fd000001fd00010480fe000001fd000001fd000001fe000060230060fd000001fd000001fd000001fd00010480fe000001fd000001fd000001fe000060220060fd000001fd000001fd000001fd000001fd000001fd000003fd000001fe000060220060fd000001fd000001fd000001fd000001fd000001fd000003fd000001fe000060230060fd030001fd030001fd030001fd030002fd030001fd03010083fe030001fe000060230060fd030001fd030001fd030001fd030002fd030001fd03010083fe030001fe000060210060fd030000fd030001fd030000fd03010783fe030000fd030007fd03fd000060210060fd030000fd030001fd030000fd03010783fe030000fd030007fd03fd000060160060f9000003fa000003fa000003fa000003fc000060160060f9000003fa000003fa000003fa000003fc0000601a0060f900010780fb00010780fb00010780fb00010780fd0000601a0060f900010780fb00010780fb00010780fb00010780fd0000601a0060f900010fc0fb00010fc0fb00010fc0fb00010fc0fd0000601a0060f900010fc0fb00010fc0fb00010fc0fb00010fc0fd000060060060db000060060060db00006006007fdbff00e006007fdbff00e0090060de00037fffffe0090060de00037fffffe0150060fe000006fd0000c0fe0000c6eb000360000060150060fe000006fd0000c0fe0000c6eb000360000060110060f90000c0fe0000c0eb000360060060110060f90000c0fe0000c0eb00036006006019106018df8fce0f9f8f8fc0178f8fce18cfc0ee00036019806019106018df8fce0f9f8f8fc0178f8fce18cfc0ee00036019806016056018d8d80618fed807c018c0d8c618d806ee00fd6016056018d8d80618fed807c018c0d8c618d806ee00fd6019106018d8cf8618d8dfd8c0180fd8c618cf80ee00036180186019106018d8cf8618d8dfd8c0180fd8c618cf80ee00036180186019106018d8c0c60fd8d818c01818d8c618c0c6ee000367e07e6019106018d8c0c60fd8d818c01818d8c618c0c6ee000367e07e601610600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fd601610600f98df8f00d8cfcfc0180fcfcf0f9f86ee00fd600f0060fd00010f80f800000cee00fd600f0060fd00010f80f800000cee00fd600a0060fe000006e200fd600a0060fe000006e200fd600d0060fe000006e20003607fe0600d0060fe000006e20003607fe060100760178f8fdf801780e5000360000060100760178f8fdf801780e500036000006010076018d8d8060018c6e500037fffffe010076018d8d8060018c6e500037fffffe00e0660181fd8060018e400fe6600600e0660181fd8060018e400fe6600600000980028004d0000009a0140004d0000009a013c002e0000005b00bd0001100060fe180306c01806e50003799999e0100060fe180306c01806e50003799999e00f0760180fcfc3801806e500fe6600600f0760180fcfc3801806e500fe6600600d0060fb00000ce50003799999e00d0060fb00000ce50003799999e0080060de00fe660060080060de00fe660060090060de0003799999e0090060de0003799999e0080060de00fe660060080060de00fe660060090060de0003799999e0090060de0003799999e0080060de00fe660060080060de00fe660060090060de0003799999e0090060de0003799999e0090060de00037fffffe0090060de00037fffffe0090060de0003780001e0090060de0003780001e010036000000efc000006e70003780001e010036000000efc000006e70003780001e0100360000006fc00000ee70003780001e0100360000006fc00000ee70003780001e01209600fcf860f97800f8006e70003780001e01209600fcf860f97800f8006e70003780001e0130a601818c618d8c000000606e80003780001e0130a601818c618d8c000000606e80003780001e01209601818c618d8000f8006e70003780001e01209601818c618d8000f8006e70003780001e01305601818c618d8fe00010606e80003780001e01305601818c618d8fe00010606e80003780001e01305600fcf8f0f98fe00010f06e80003780001e01305600fcf8f0f98fe00010f06e80003780001e00d0060f800000ce80003780001e00d0060f800000ce80003780001e02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb0003780001e02305600780000003fe0000c6fc00020f8fc0fd0000c6fe00030c000fc0fb0003780001e02305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb0003780001e02305600cc0000006fe0000c0fc000218d8c0fd0000c0fe0003060018c0fb0003780001e0291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f80780001e0291d600c0f97800c178f8fce18cfc00f8000d9c000178f8fce18cfc0030019c0fe0006178f80780001e0290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c0780001e0290b601f18d8c00c18c0d8c618d8fe0018019ac60018c0d8c618d80001801ac6001fdfd8c0c0780001e0291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc07fffffe0291d600c18d8000c180fd8c618cf800f80061cc000180fd8c618cf8003001cc0fe0006180fc07fffffe0291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c0799999e0291d600c18d800061818d8c618c0c000001818c6001818d8c618c0c0060018c6fe00061818c0799999e0291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0002180fc0fe660060291d600c0f980003180fcfcf0f9f8000001fdf8600180fcfcf0f9f800c001f86fe0002180fc0fe660060110060f100000cf600000cfb0003799999e0110060f100000cf600000cfb0003799999e01f176000000f80060f800e0600df80001f80060300000e000006f500fe6600601f176000000f80060f800e0600df80001f80060300000e000006f500fe66006020176000001840061840060000d8c00018c00606000006000003f50003799999e020176000001840061840060000d8c00018c00606000006000003f50003799999e02018600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f600fe6600602018600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f600fe66006021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f60003799999e021186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f60003799999e0200060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600fe660060200060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f600fe660060211860000010d806d0d8c60618d81818d818c6c61818c618d80306f60003799999e0211860000010d806d0d8c60618d81818d818c6c61818c618d80306f60003799999e020056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f600fe66006020056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f600fe6600600d0060ea00000cf60003799999e00d0060ea00000cf60003799999e0170060fd00000efa00000efe000306001fc0f200fe660060170060fd00000efa00000efe000306001fc0f200fe660060180060fd000006fa000006fe00030f0000c0f20003799999e0180060fd000006fa000006fe00030f0000c0f20003799999e01c146000000fcf860f97800f800fcf860f978019800180f200fe6600601c146000000fcf860f97800f800fcf860f978019800180f200fe6600601d146000001818c618d8c000001818c618d8c000000306f20003799999e000980028009a000000e40140009a000000e4013c005b0000008700bd00011d146000001818c618d8c000001818c618d8c000000306f20003799999e01c0f6000001818c618d8000f801818c618d8fe00010180f200fe6600601c0f6000001818c618d8000f801818c618d8fe00010180f200fe6600601d076000001818c618d8fe00041818c618d8fe000118c6f20003799999e01d076000001818c618d8fe00041818c618d8fe000118c6f20003799999e01c076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f200fe6600601c076000000fcf8f0f98fe00040fcf8f0f98fe00010f86f200fe6600600d0060ee00000cf20003799999e00d0060ee00000cf20003799999e01d0060fd00011806fe000306078fc0fe0005c60000021fc0f400fe6600601d0060fd00011806fe000306078fc0fe0005c60000021fc0f400fe6600601d0060fd0001180efe00030e0c18c0fe0004c000001ad8f30003799999e01d0060fd0001180efe00030e0c18c0fe0004c000001ad8f30003799999e01d1560000017801f86000f80061819c0178f8fce18cfcf9ef300fe6600601d1560000017801f86000f80061819c0178f8fce18cfcf9ef300fe6600601f0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f40003799999e01f0660000018c018c6fe000c061f9adfd8c0d8c618d8070186f40003799999e01e16600000180018c6000f800618dcc0180fd8c618cf8f80c0f400fe6600601e16600000180018c6000f800618dcc0180fd8c618cf8f80c0f400fe6600601f06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f40003799999e01f06600000180018c6fe000c0618d8c01818d8c618c0dad8c6f40003799999e01f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f400037fffffe01f06600000180318cffe000c0f0f9f80180fcfcf0f9f820f86f400037fffffe00d0060ec00000cf40003600000600d0060ec00000cf40003600000601e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003607fe0601e0060fd0008180f80000006078fc0fe0005c60000021fc0f40003607fe0601a0060fd00081818c000000e0c18c6fe0004c000001ad8f300fd601a0060fd00081818c000000e0c18c6fe0004c000001ad8f300fd601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601b1560000017801f80c00f80061819c6178f8fce18cfcf9ef300fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601c1660000018c018c1800000061f9adf98c0d8c618d8070186f400fd601f16600000180018c6000f800618dcc6180fd8c618cf8f80c0f4000367e07e601f16600000180018c6000f800618dcc6180fd8c618cf8f80c0f4000367e07e601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f40003618018601f06600000180018d8fe000c0618d8c61818d8c618c0dad8c6f40003618018601c16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f400fd601c16600000180318dfc000000f0f9f80180fcfcf0f9f820f86f400fd600d0060ec00000cf40003601980600d0060ec00000cf4000360198060090060de000360060060090060de000360060060090060de000360000060090060de00036000006006007fdbff00e006007fdbff00e013036000003ffeff00f9e89906c000006000006013036000003ffeff00f9e89906c000006000006014036007003efe000036e9660767c01c0067fe006014036007003efe000036e9660767c01c0067fe00601303601b003efe000039e89906c01b00660600601303601b003efe000039e89906c01b006606006014036063fe3efe000036e9660767cff8c06607fe6014036063fe3efe000036e9660767cff8c06607fe6013036180063efe000039e89906cc00306606066013036180063efe000039e89906cc00306606066014036600063efe000036e9660767cc000c67fe066014036600063efe000036e9660767cc000c67fe066013036180063efe000039e89906cc003060c0066013036180063efe000039e89906cc003060c0066014036063fe3efe000036e9660767cff8c060c0066014036063fe3efe000036e9660767cff8c060c006601303601b003efe000039e89906c01b0060c006601303601b003efe000039e89906c01b0060c0066014036007003efe000036e9660767c01c0060fffe6014036007003efe000036e9660767c01c0060fffe6013036000003efe000039e89906c000006000006013036000003efe000039e89906c000006000006014036000003ffeff00f6e9660767c000006000006014036000003ffeff00f6e9660767c000006000006006007fdbff00e006007fdbff00e002d9000000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ruler}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 show ruler command}}}{\hich\af4\dbch\af4\loch\f4 You can s\hich\af4\dbch\af4\loch\f4 ee where the current tab stops are, and change them, by using the ruler.  To make the ruler visible, use the Show Ruler command in the Extras menu.  Select the same command a second time to make the ruler disappear.\par \hich\af4\dbch\af4\loch\f4 With the ruler visible, your edit window\hich\af4\dbch\af4\loch\f4  will look like the one shown on the right.\par \hich\af4\dbch\af4\loch\f4 The numbers, dots, and vertical bars across the top indicate the columns in the document.  Every ten columns, a number appears.  The twentieth column, for example, is marked with the number 2.  Halfway between ea\hich\af4\dbch\af4\loch\f4 ch numbered column is a vertical bar.  The remaining columns are marked with a dot.\par \hich\af4\dbch\af4\loch\f4 Under some of the columns you will see an inverted triangle pointing at the column marker.  This inverted triangle is a tab stop}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab stop\bxe }}}{\hich\af4\dbch\af4\loch\f4 .  When you use the tab \hich\af4\dbch\af4\loch\f4 key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab key}}}{\hich\af4\dbch\af4\loch\f4 , it moves the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  to the next tab stop, inserting a tab character if you are in insert mode or past the end of the line in overstrike mode.\par \hich\af4\dbch\af4\loch\f4 To remove an existing tab stop, move the cursor so that the \hich\af4\dbch\af4\loch\f4 arrow points at the tab stop, and click.  To create a tab stop where none exists, move the cursor to the column on the ruler where you want a tab stop, and click.\par \hich\af4\dbch\af4\loch\f4 Moving a tab stop, then, is a two-step process.  First, remove the old tab stop, and then pla\hich\af4\dbch\af4\loch\f4 ce a new tab stop in the proper column.  Of course, the order of these steps can be changed.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318163}\hich\af4\dbch\af4\loch\f4 Default tab stops{\*\bkmkend _Toc495318163}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab stop}}}{\hich\af4\dbch\af4\loch\f4 All of the ORCA language development environments are multi-lingual; the same environment can be used with more than one languag\hich\af4\dbch\af4\loch\f4 e.  Tab stops that are reasonable for assembly language, however, may not be the best choice for C.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 C}}}{\hich\af4\dbch\af4\loch\f4   The same is true for virtually any pair of languages you might pick.\par \hich\af4\dbch\af4\loch\f4 As a result, each language has a different default tab line.  When you open \hich\af4\dbch\af4\loch\f4 a new window, the tab line is set to the default tab stops for the language assigned to the new window.  If you change the language stamp, a dialog will appear that gives you the choice of changing to the new language's default tabs or sticking with the o\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 es that are already in use.\par \hich\af4\dbch\af4\loch\f4 The default tab line is changed by making changes in the SYSTABS file}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\hich\af4\dbch\af4\loch\f4 .  This is described in detail later in this chapter.  For now, the important point is that changing the tab stops with the ruler does not\hich\af4\dbch\af4\loch\f4  change the default tabs.  The next time you load the file from disk, the original tab stops will again be used.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318164}\hich\af4\dbch\af4\loch\f4 The File Menu{\*\bkmkend _Toc495318164}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart fileMenu}{\shp{\*\shpinst\shpleft6480\shptop107\shpright7920\shpbottom2587\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz6\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw72\pich124\picwgoal1440\pichgoal2480\macpict\bliptag287012091\blipupi72{\*\blipuid 111b74fbc04eeb3dd5ec90819e7cf3af}0d3a00000000007c0048001102ff0c00ffffffff000000000000000000480000007c00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff026d016900a0008200a0008e001e0001000a00000000007c0048009800140000000000f800980000000000f8009200000000007c0048000102ed0008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30009057fc1cf1ffffcf30009057fc1cf1ffffcf30009057fcfff9ffffcf30009057fcfff9ffffcf30009057fcf8f9f0ffcf30009057fcf8f9f0ffcf30009057fc3cf9e67fcf30009057fc3cf9e67fcf30009057fcfcf9e07fcf30009057fcfcf9e07fcf30009057fcfcf9e7ffcf30009057fcfcf9e7ffcf30009057fcf870f0ffcf30009057fcf870f0ffcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ff1ff02f8000008007ff1ff02f80000080060f10002180000080060f10002180000080060f10002180000080060f100021800000c02600046f500040c231800000c02600046f500040c231800000c02600066f5000408331f80000c02600066f5000408331f80000e046000763cc3f70004363b1f80000e046000763cc3f70004363b1f80000e0460007e66dbf70004433f1f80000e0460007e66dbf70004433f1f80000e0460006e7edbf7000442371f80000e0460006e7edbf7000442371f80000e046000666066f700044b331f80000e046000666066f700044b331f80000e046000623c66f7000436311f80000e046000623c66f7000436311f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000667c3c7cf8000436331f80000f056000667c3c7cf8000436331f80000d016000fd66f8000443331f80000d016000fd66f8000443331f80000f05600066667e66f8000442331f80000f05600066667e66f8000442331f80000f05600066666066f800044b331f80000f05600066666066f800044b331f8000110760003c7c3c666660fa0004361e1f8000110760003c7c3c666660fa0004361e1f80000b0360000060f400021f80000b0360000060f400021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000d0360003c38f600040c619f80000d0360003c38f600040c619f80000d0360006618f6000408619f80000d0360006618f6000408619f80000f0360006018fe3cf90004366d9f80000f0360006018fe3cf90004366d9f8000100660006018666066f90004436d9f8000100660006018666066f90004436d9f8000100660006018663c7ef90004426d9f8000100660006018663c7ef90004426d9f8000100660006618660660f900044b331f8000100660006618660660f900044b331f80000d016000fc3cf9000436331f80000d016000fc3cf9000436331f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000603e631ef8000436301f80000f056000603e631ef8000436301f80000f0560003c666333f80004431e1f80000f0560003c666333f80004431e1f80000f0560000666363ff8000442031f80000f0560000666363ff8000442031f80000f05600066663630f800044b331f80000f05600066663630f800044b331f80000f0560003c3e1c1ef80004361e1f80000f0560003c3e1c1ef80004361e1f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260003cfe000101e0f800021f80000f0260003cfe000101e0f800021f80000f02600066fe00010330f800021f80000f02600066fe00010330f800021f800010086000603e631e0331e0f900021f800010086000603e631e0331e0f900021f80000f0760003c6663330333f800021f80000f0760003c6663330333f800021f8000100860000666363f03f1e0f900021f8000100860000666363f03f1e0f900021f80001008600066663630033030f900021f80001008600066663630033030f900021f8000110960003c3e1c1e0331e333fa00021f8000110960003c3e1c1e0331e333fa00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000130260007cfc000307e0003cfe000403001f8000130260007cfc000307e0003cfe000403001f80001402600066fd00043001800066fe000403001f80001402600066fd00043001800066fe000403001f800015136000663c631e367c0183c0603e631e1f001f800015136000663c631e367c0183c0603e631e1f001f8000151360007c66633338300186603c66633333001f8000151360007c66633338300186603c66633333001f8000151360006c7e363f30300186600666363f33001f8000151360006c7e363f30300186600666363f33001f8000151360006660363030360186606666363033001f8000151360006660363030360186606666363033001f800015136000663c1c1e301c0183c03c3e1c1e1f001f800015136000663c1c1e301c0183c03c3e1c1e1f001f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260007cfe000103c0f800021f80000f0260007cfe000103c0f800021f80001002600066fe0002066003f900021f80001002600066fe0002066003f900021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130260007cfe660503c663066660fc00021f8000130260007cfe660503c663066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b600060663e60066603666660fc00021f8000130b600060663e60066603666660fc00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000100060fe00003cfc000006fb00021f8000100060fe00003cfc000006fb00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460007c0060f700040c3e1f80000e0460007c0060f700040c3e1f8000100660006600000180f9000408331f8000100660006600000180f9000408331f800010066000666ce3e3e0f9000436331f800010066000666ce3e3e0f9000436331f8000100660007c70633180f90004433e1f8000100660007c70633180f90004433e1f8000100660006060633180f9000442301f8000100660006060633180f9000442301f80001006600060606331b0f900044b301f80001006600060606331b0f900044b301f8000110760006060f330e333fa000436301f8000110760006060f330e333fa000436301f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460003c0030f700040c1e1f80000e0460003c0030f700040c1e1f80000f056000660000c0f8000408331f80000f056000660000c0f8000408331f80000f056000666671f0f8000436331f80000f056000666671f0f8000436331f80000f056000666630c0f8000443331f80000f056000666630c0f8000443331f80000f056000666630c0f8000442331f80000f056000666630c0f8000442331f80000f056000666630d8f800044b331f80000f056000666630d8f800044b331f80000f0560003c3e7870f80004361e1f80000f0560003c3e7870f80004361e1f80000b02600006f40003031f80000b02600006f40003031f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000070003f0ff018000070003f0ff01800002ed0000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx6479\posy106\absh2480\absw1440\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw72\pich124\picwgoal1440\pichgoal2480\macpict\bliptag287012091\blipupi72{\*\blipuid 111b74fbc04eeb3dd5ec90819e7cf3af}0d3a00000000007c0048001102ff0c00ffffffff000000000000000000480000007c00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff026d016900a0008200a0008e001e0001000a00000000007c0048009800140000000000f800980000000000f8009200000000007c0048000102ed0008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30009057fc1cf1ffffcf30009057fc1cf1ffffcf30009057fcfff9ffffcf30009057fcfff9ffffcf30009057fcf8f9f0ffcf30009057fcf8f9f0ffcf30009057fc3cf9e67fcf30009057fc3cf9e67fcf30009057fcfcf9e07fcf30009057fcfcf9e07fcf30009057fcfcf9e7ffcf30009057fcfcf9e7ffcf30009057fcf870f0ffcf30009057fcf870f0ffcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ff1ff02f8000008007ff1ff02f80000080060f10002180000080060f10002180000080060f10002180000080060f100021800000c02600046f500040c231800000c02600046f500040c231800000c02600066f5000408331f80000c02600066f5000408331f80000e046000763cc3f70004363b1f80000e046000763cc3f70004363b1f80000e0460007e66dbf70004433f1f80000e0460007e66dbf70004433f1f80000e0460006e7edbf7000442371f80000e0460006e7edbf7000442371f80000e046000666066f700044b331f80000e046000666066f700044b331f80000e046000623c66f7000436311f80000e046000623c66f7000436311f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000667c3c7cf8000436331f80000f056000667c3c7cf8000436331f80000d016000fd66f8000443331f80000d016000fd66f8000443331f80000f05600066667e66f8000442331f80000f05600066667e66f8000442331f80000f05600066666066f800044b331f80000f05600066666066f800044b331f8000110760003c7c3c666660fa0004361e1f8000110760003c7c3c666660fa0004361e1f80000b0360000060f400021f80000b0360000060f400021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000d0360003c38f600040c619f80000d0360003c38f600040c619f80000d0360006618f6000408619f80000d0360006618f6000408619f80000f0360006018fe3cf90004366d9f80000f0360006018fe3cf90004366d9f8000100660006018666066f90004436d9f8000100660006018666066f90004436d9f8000100660006018663c7ef90004426d9f8000100660006018663c7ef90004426d9f8000100660006618660660f900044b331f8000100660006618660660f900044b331f80000d016000fc3cf9000436331f80000d016000fc3cf9000436331f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000603e631ef8000436301f80000f056000603e631ef8000436301f80000f0560003c666333f80004431e1f80000f0560003c666333f80004431e1f80000f0560000666363ff8000442031f80000f0560000666363ff8000442031f80000f05600066663630f800044b331f80000f05600066663630f800044b331f80000f0560003c3e1c1ef80004361e1f80000f0560003c3e1c1ef80004361e1f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260003cfe000101e0f800021f80000f0260003cfe000101e0f800021f80000f02600066fe00010330f800021f80000f02600066fe00010330f800021f800010086000603e631e0331e0f900021f800010086000603e631e0331e0f900021f80000f0760003c6663330333f800021f80000f0760003c6663330333f800021f8000100860000666363f03f1e0f900021f8000100860000666363f03f1e0f900021f80001008600066663630033030f900021f80001008600066663630033030f900021f8000110960003c3e1c1e0331e333fa00021f8000110960003c3e1c1e0331e333fa00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000130260007cfc000307e0003cfe000403001f8000130260007cfc000307e0003cfe000403001f80001402600066fd00043001800066fe000403001f80001402600066fd00043001800066fe000403001f800015136000663c631e367c0183c0603e631e1f001f800015136000663c631e367c0183c0603e631e1f001f8000151360007c66633338300186603c66633333001f8000151360007c66633338300186603c66633333001f8000151360006c7e363f30300186600666363f33001f8000151360006c7e363f30300186600666363f33001f8000151360006660363030360186606666363033001f8000151360006660363030360186606666363033001f800015136000663c1c1e301c0183c03c3e1c1e1f001f800015136000663c1c1e301c0183c03c3e1c1e1f001f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260007cfe000103c0f800021f80000f0260007cfe000103c0f800021f80001002600066fe0002066003f900021f80001002600066fe0002066003f900021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130260007cfe660503c663066660fc00021f8000130260007cfe660503c663066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b600060663e60066603666660fc00021f8000130b600060663e60066603666660fc00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000100060fe00003cfc000006fb00021f8000100060fe00003cfc000006fb00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460007c0060f700040c3e1f80000e0460007c0060f700040c3e1f8000100660006600000180f9000408331f8000100660006600000180f9000408331f800010066000666ce3e3e0f9000436331f800010066000666ce3e3e0f9000436331f8000100660007c70633180f90004433e1f8000100660007c70633180f90004433e1f8000100660006060633180f9000442301f8000100660006060633180f9000442301f80001006600060606331b0f900044b301f80001006600060606331b0f900044b301f8000110760006060f330e333fa000436301f8000110760006060f330e333fa000436301f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460003c0030f700040c1e1f80000e0460003c0030f700040c1e1f80000f056000660000c0f8000408331f80000f056000660000c0f8000408331f80000f056000666671f0f8000436331f80000f056000666671f0f8000436331f80000f056000666630c0f8000443331f80000f056000666630c0f8000443331f80000f056000666630c0f8000442331f80000f056000666630c0f8000442331f80000f056000666630d8f800044b331f80000f056000666630d8f800044b331f80000f0560003c3e7870f80004361e1f80000f0560003c3e7870f80004361e1f80000b02600006f40003031f80000b02600006f40003031f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000070003f0ff018000070003f0ff01800002ed0000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\hich\af4\dbch\af4\loch\f4 The File menu is used to open files, save files to disk that have been created or changed with the editor, quit the program, and\hich\af4\dbch\af4\loch\f4  for various disk-based housekeeping functions.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318165}\hich\af4\dbch\af4\loch\f4 New{\*\bkmkend _Toc495318165}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 new command}}}{\hich\af4\dbch\af4\loch\f4 The New command opens a new window.  Until it is saved for the first time, the window will be called "Untitled X," where X is a number.  The first new window opened will be assigned a \hich\af4\dbch\af4\loch\f4 number of 1, and subsequent windows will increment the value.  You would use the New command to create new programs.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318166}\hich\af4\dbch\af4\loch\f4 Open{\*\bkmkend _Toc495318166}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 open command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Open command is used to open a text file that already exists on a disk.  After choosing the file from the \hich\af4\dbch\af4\loch\f4 Open command's file list, it will be opened and placed in a new window.  Like all windows newly created on the desktop, this window will be as large as the screen.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318167}\hich\af4\dbch\af4\loch\f4 Close{\*\bkmkend _Toc495318167}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 close command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Close command closes the front window.  The front window \hich\af4\dbch\af4\loch\f4 is the window that is currently highlighted.  If the file has changed since the last time it was saved, a dialog box appears before the window is closed.  The dialog box gives you a chance to save the changes to the file, or to cancel the close operation.\par \hich\af4\dbch\af4\loch\f4 This menu item will be dimmed if there are no windows open on the desktop.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318168}\hich\af4\dbch\af4\loch\f4 Save{\*\bkmkend _Toc495318168}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 save command\bxe }}}{\hich\af4\dbch\af4\loch\f4 If the front window was loaded from disk, or if it has already been saved at least one time, then ORCA knows which disk file is associated with the wind\hich\af4\dbch\af4\loch\f4 ow.  In that case, this command causes the contents of the window to be written to the disk.  After the write operation is complete, the desktop returns to its original state \endash  the file is still on the desktop, and all characteristics of the file have bee\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  preserved.\par \hich\af4\dbch\af4\loch\f4 If you use the Save command on an untitled window, it will function as though you had selected the Save As command.  The Save As command is discussed below.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318169}\hich\af4\dbch\af4\loch\f4 Save As{\*\bkmkend _Toc495318169}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 save command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 open command}}}{\hich\af4\dbch\af4\loch\f4 The Save As command is used to wri\hich\af4\dbch\af4\loch\f4 te the contents of a window to a file that is different from the original text file, or to save a new, untitled window to a file for the first time.  The Save As... dialog is the standard file save dialog, described in the manuals that come with your comp\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 ter.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318170}\hich\af4\dbch\af4\loch\f4 Revert To Saved{\*\bkmkend _Toc495318170}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 revert to saved command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The contents of the window are replaced by a copy of the file read from disk.  The cursor is moved to the first character of the first line of the file, but all other options (such as over strike or a\hich\af4\dbch\af4\loch\f4 uto indent) remain the same.\par \hich\af4\dbch\af4\loch\f4 This menu will be dimmed if there have been no changes to the file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318171}\hich\af4\dbch\af4\loch\f4 Page Setup{\*\bkmkend _Toc495318171}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 page setup command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Page Setup command is used when you are ready to print the contents of one of your open windows.  The actual dialo\hich\af4\dbch\af4\loch\f4 g depends on the printer driver you have selected from the chooser.  For detailed information about the Page Setup dialog, see the documentation that comes with your computer.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318172}\hich\af4\dbch\af4\loch\f4 Print{\*\bkmkend _Toc495318172}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 print command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printing files}}}{\hich\af4\dbch\af4\loch\f4 The Print command sends th\hich\af4\dbch\af4\loch\f4 e contents of the front window to your printer.  You can select only a portion of your document to be printed, or, if no text has been selected when you issue the Print command, then the entire file will be printed.\par \hich\af4\dbch\af4\loch\f4 The Print command brings up a standard d\hich\af4\dbch\af4\loch\f4 ialog to control the printing process.  This dialog is documented in the manuals that came with your computer.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318173}\hich\af4\dbch\af4\loch\f4 Quit{\*\bkmkend _Toc495318173}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 quit command\bxe }}}{\hich\af4\dbch\af4\loch\f4 All windows on the desktop are closed.  If any of the files have changed since the last time they were saved, you ar\hich\af4\dbch\af4\loch\f4 e presented with a dialog box that gives you a chance to save the file or cancel the Quit command.  If you cancel the Quit command, all windows that have already been closed stay closed.  Once all windows are closed, the program returns control to the tex\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  programming environment.  From there, you can use the shell's quit command to return to the program launcher that you used to start ORCA/C.{\*\bkmkend fileMenu}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file menu}{\rxe fileMenu}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318174}\hich\af4\dbch\af4\loch\f4 The Edit Menu{\*\bkmkend _Toc495318174}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart editMenu}{\shp{\*\shpinst\shpleft6624\shptop107\shpright7884\shpbottom1867\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz7\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw63\pich88\picwgoal1260\pichgoal1760\macpict\bliptag-721672765\blipupi72{\*\blipuid d4fc25c308ac2b67a0a298e8d3db0f85}0842000000000058003f001102ff0c00ffffffff0000000000000000003f0000005800000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff01b9013c00a0008200a0008e001e0001000a000000000058003f009800100000000000af00800000000000af007e000000000058003f000102f10008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008047c1f9cfffcf60008047c1f9cfffcf60008047cff9ff3fcf60008047cff9ff3fcf60008047cfc18e0fcf60008047cfc18e0fcf60008047c399cf3fcf60008047c399cf3fcf60008047cf99cf3fcf60008047cf99cf3fcf60008047cf99cf27cf60008047cf99cf27cf60008047c1c1878fcf60008047c1c1878fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60006007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80c046001100010f900024151f80c046001100010f900024151f80c046002200020f900028021f80c046002200020f900028021f80e05600111415140fb0003014041f80e05600111415140fb0003014041f80d016002fe220020fa00022081f80d016002fe220020fa00022081f80e016001fe110010fb0003040101f80e016001fe110010fb0003040101f80d016002fe220020fa0002a201f80d016002fe220020fa0002a201f80e05600141115140fb0003014151f80e05600141115140fb0003014151f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80c046002200080f900028221f80c046002200080f900028221f80d046001011140fa0003014141f80d046001011140fa0003014141f80c046002022080f900022081f80c046002022080f900022081f80c0360010111f90003040141f80c0360010111f90003040141f80c0460022220a0f90002a221f80c0460022220a0f90002a221f80d046001415040fa0003014111f80d046001415040fa0003014111f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024141f80a02600140f700024141f80a02600220f700028221f80a02600220f700028221f80e05600101414110fb0003014101f80e05600101414110fb0003014101f80d05600202222220fa00022201f80d05600202222220fa00022201f80e05600101111150fb0003040101f80e05600101111150fb0003040101f80d056002222220a0fa0002a221f80d056002222220a0fa0002a221f80e05600141414010fb0003014141f80e05600141414010fb0003014141f80c056000000200a0f9000101f80c056000000200a0f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80d05600220000080fa00028209f80d05600220000080fa00028209f80f0660011151414140fc0003014111f80f0660011151414140fc0003014111f80e066002a222008220fb000220a1f80e066002a222008220fb000220a1f80f0660010111410150fc0003040111f80f0660010111410150fc0003040111f80d056002022020a2fa0002a0a1f80d056002022020a2fa0002a0a1f80f0660010151404140fc0003014041f80f0660010151404140fc0003014041f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a0360014140f7000101f80a0360014140f7000101f80a0360022080f7000101f80a0360022080f7000101f80d0660010041415140fa000101f80d0660010041415140fa000101f80d0660020082222280fa000101f80d0660020082222280fa000101f80c05600100415111f9000101f80c05600100415111f9000101f80c05600220820222f9000101f80c05600220820222f9000101f80c016001fe410051f9000101f80c016001fe410051f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8110f6001e001c0000001e1c1c00000c1e1f8110f6001e001c0000001e1c1c00000c1e1f8110f60033000c000018330c0c000008331f8110f60033000c000018330c0c000008331f8110f600301e0c1e1e3e330c0c000036331f8110f600301e0c1e1e3e330c0c000036331f8110f6001e330c333318330c0c000043331f8110f6001e330c333318330c0c000043331f8110f600033f0c3f30183f0c0c0000423f1f8110f600033f0c3f30183f0c0c0000423f1f8110f60033300c30331b330c0c00004b331f8110f60033300c30331b330c0c00004b331f810016001fde109e0e331e1e000036331f810016001fde109e0e331e1e000036331f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8060001f3ff00f8060001f3ff00f80000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx6623\posy106\absh1760\absw1260\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw63\pich88\picwgoal1260\pichgoal1760\macpict\bliptag-721672765\blipupi72{\*\blipuid d4fc25c308ac2b67a0a298e8d3db0f85}0842000000000058003f001102ff0c00ffffffff0000000000000000003f0000005800000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff01b9013c00a0008200a0008e001e0001000a000000000058003f009800100000000000af00800000000000af007e000000000058003f000102f10008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008047c1f9cfffcf60008047c1f9cfffcf60008047cff9ff3fcf60008047cff9ff3fcf60008047cfc18e0fcf60008047cfc18e0fcf60008047c399cf3fcf60008047c399cf3fcf60008047cf99cf3fcf60008047cf99cf3fcf60008047cf99cf27cf60008047cf99cf27cf60008047c1c1878fcf60008047c1c1878fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60006007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80c046001100010f900024151f80c046001100010f900024151f80c046002200020f900028021f80c046002200020f900028021f80e05600111415140fb0003014041f80e05600111415140fb0003014041f80d016002fe220020fa00022081f80d016002fe220020fa00022081f80e016001fe110010fb0003040101f80e016001fe110010fb0003040101f80d016002fe220020fa0002a201f80d016002fe220020fa0002a201f80e05600141115140fb0003014151f80e05600141115140fb0003014151f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80c046002200080f900028221f80c046002200080f900028221f80d046001011140fa0003014141f80d046001011140fa0003014141f80c046002022080f900022081f80c046002022080f900022081f80c0360010111f90003040141f80c0360010111f90003040141f80c0460022220a0f90002a221f80c0460022220a0f90002a221f80d046001415040fa0003014111f80d046001415040fa0003014111f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024141f80a02600140f700024141f80a02600220f700028221f80a02600220f700028221f80e05600101414110fb0003014101f80e05600101414110fb0003014101f80d05600202222220fa00022201f80d05600202222220fa00022201f80e05600101111150fb0003040101f80e05600101111150fb0003040101f80d056002222220a0fa0002a221f80d056002222220a0fa0002a221f80e05600141414010fb0003014141f80e05600141414010fb0003014141f80c056000000200a0f9000101f80c056000000200a0f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80d05600220000080fa00028209f80d05600220000080fa00028209f80f0660011151414140fc0003014111f80f0660011151414140fc0003014111f80e066002a222008220fb000220a1f80e066002a222008220fb000220a1f80f0660010111410150fc0003040111f80f0660010111410150fc0003040111f80d056002022020a2fa0002a0a1f80d056002022020a2fa0002a0a1f80f0660010151404140fc0003014041f80f0660010151404140fc0003014041f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a0360014140f7000101f80a0360014140f7000101f80a0360022080f7000101f80a0360022080f7000101f80d0660010041415140fa000101f80d0660010041415140fa000101f80d0660020082222280fa000101f80d0660020082222280fa000101f80c05600100415111f9000101f80c05600100415111f9000101f80c05600220820222f9000101f80c05600220820222f9000101f80c016001fe410051f9000101f80c016001fe410051f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8110f6001e001c0000001e1c1c00000c1e1f8110f6001e001c0000001e1c1c00000c1e1f8110f60033000c000018330c0c000008331f8110f60033000c000018330c0c000008331f8110f600301e0c1e1e3e330c0c000036331f8110f600301e0c1e1e3e330c0c000036331f8110f6001e330c333318330c0c000043331f8110f6001e330c333318330c0c000043331f8110f600033f0c3f30183f0c0c0000423f1f8110f600033f0c3f30183f0c0c0000423f1f8110f60033300c30331b330c0c00004b331f8110f60033300c30331b330c0c00004b331f810016001fde109e0e331e1e000036331f810016001fde109e0e331e1e000036331f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8060001f3ff00f8060001f3ff00f80000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\hich\af4\dbch\af4\loch\f4 The Edit menu provides the standard editing capabilities common t\hich\af4\dbch\af4\loch\f4 o virtually all desktop programs.  You can select all of the text in the document; cut, copy or clear selected text; paste text from the current scrap; or undo changes to the file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318175}\hich\af4\dbch\af4\loch\f4 Undo{\*\bkmkend _Toc495318175}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 undo command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Undo command changes the file back to the \hich\af4\dbch\af4\loch\f4 state it was in before the last command that changed the file was executed.  For example, if you use the delete key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 delete key}}}{\hich\af4\dbch\af4\loch\f4  to delete several characters of text, then use the Undo command, the deleted characters will reappear in the file.\par \hich\af4\dbch\af4\loch\f4 If you\hich\af4\dbch\af4\loch\f4  have enough memory to hold all of the changes, repeated use of the Undo command will eventually return the file to the same condition it was in when it was originally loaded from disk.  If memory starts to run short, all but the most recent changes may b\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  lost.  In general, you should not depend on being able to undo more than one command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318176}\hich\af4\dbch\af4\loch\f4 Cut{\*\bkmkend _Toc495318176}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 cut command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 paste command}}}{\hich\af4\dbch\af4\loch\f4 The selected text is removed from the file and placed in the clipboard.  You can paste this text anywhere in a window wi\hich\af4\dbch\af4\loch\f4 th the Paste command, described below.  The clipboard holds only one block of text at at time.  The next Cut or Copy command will cause the contents of the clipboard to be replaced by the new selection.\par \hich\af4\dbch\af4\loch\f4 This menu item is disabled if no text has been select\hich\af4\dbch\af4\loch\f4 ed.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318177}\hich\af4\dbch\af4\loch\f4 Copy{\*\bkmkend _Toc495318177}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 copy command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The selected text is copied to the clipboard, replacing the previous contents of the clipboard.  The file being edited is not affected.\par \hich\af4\dbch\af4\loch\f4 This menu item is disabled if no text has been selected.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318178}\hich\af4\dbch\af4\loch\f4 Paste{\*\bkmkend _Toc495318178}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 paste command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The contents of the clipboard are copied into the file at the current insertion point.  If any text was selected when the Paste command was issued, the selected text is cleared before the Paste is performed.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318179}\hich\af4\dbch\af4\loch\f4 Clear{\*\bkmkend _Toc495318179}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 clear command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The selected tex\hich\af4\dbch\af4\loch\f4 t is removed from the file.\par \hich\af4\dbch\af4\loch\f4 Assuming that some text has been selected, this command is equivalent to using the delete key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 delete key}}}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 This menu item is disabled if no text has been selected.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318180}\hich\af4\dbch\af4\loch\f4 Select All{\*\bkmkend _Toc495318180}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 select all command\bxe }}}{\hich\af4\dbch\af4\loch\f4 All of the text \hich\af4\dbch\af4\loch\f4 in the file is selected.\par \hich\af4\dbch\af4\loch\f4 You can also select all of the text in the file by moving the mouse to the left of the text, holding down the command (}{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 ) key, and clicking the mouse.{\*\bkmkend editMenu}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 edit menu}{\rxe editMenu}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318181}\hich\af4\dbch\af4\loch\f4 The Windows Menu{\*\bkmkend _Toc495318181}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart windowsMenu}{\shp{\*\shpinst\shpleft6336\shptop133\shpright7896\shpbottom1653\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz8\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw78\pich76\picwgoal1560\pichgoal1520\macpict\bliptag1940984408\blipupi72{\*\blipuid 73b112589098b3e4f4dc56cdb67c5635}086c00000000004c004e001102ff0c00ffffffff0000000000000000004e0000004c00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff017d018700a0008200a0008e001e0001000a00000000004c004e0098001400000000009800a0000000000098009c00000000004c004e000102ed0008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f7000c047f9e73fff9fdff0080f7000c047f9e73fff9fdff0080f7000c047f9e7ffff9fdff0080f7000c047f9e7ffff9fdff0080f7000d097f926383c1c33ce1ff80f7000d097f926383c1c33ce1ff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324e1ff80f7000d027f9273fe990324e1ff80f7000c027fccf3fd9902fcff80f7000c027fccf3fd9902fcff80f7000d097fcce199c1c399e1ff80f7000d097fcce199c1c399e1ff80f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70007007ff0ff01fe0007007ff0ff01fe00070060f000010e00070060f000010e00070060f000010e00070060f000010e000b0460002a20a0f400010e000b0460002a20a0f400010e000b046000100040f400010fe00b046000100040f400010fe00c056000082020a0f500010fe00c056000082020a0f500010fe00c05600010104110f500010fe00c05600010104110f500010fe00c056000082020a8f500010fe00c056000082020a8f500010fe00b046000101041f400010fe00b046000101041f400010fe00c0560000828a0a0f500010fe00c0560000828a0a0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe00d02600028fe000020f600010fe00d02600028fe000020f600010fe00d0660004410000040f600010fe00d0660004410000040f600010fe00d06600020282a2822f600010fe00d06600020282a2822f600010fe00c0360001410fe44f600010fe00c0360001410fe44f600010fe00d0660000220222028f600010fe00d0660000220222028f600010fe00c0360004414fe44f600010fe00c0360004414fe44f600010fe00d06600028082a2822f600010fe00d06600028082a2822f600010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0120b60003c600038380c318000c0fb00010fe0120b60003c600038380c318000c0fb00010fe0120b600066600018180c300000c0fb00010fe0120b600066600018180c300000c0fb00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe014096000666660181806618cfecc00c0fd00010fe014096000666660181806618cfecc00c0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0140260003cfe0007c0600000618c0006fd00010fe0140260003cfe0007c0600000618c0006fd00010fe01402600066fe0000c0fe000361800006fd00010fe01402600066fe0000c0fe000361800006fd00010fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0140360006660fecc04633030330cfd660300000fe0140360006660fecc04633030330cfd660300000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe00b0060fd0000c0f500010fe00b0060fd0000c0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0150e6000630000300180e0000030c60003fe00010fe0150e6000630000300180e0000030c60003fe00010fe01502600063fe0008018060000030c00003fe00010fe01502600063fe0008018060000030c00003fe00010fe015136000631f3670f9f060f0f036ce3e1f1e61800fe015136000631f3670f9f060f0f036ce3e1f1e61800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0140c60001c33303199986180181986fd3302000fe0140c60001c33303199986180181986fd3302000fe0140660001c1f3078f9fdf008198f331f1e33000fe0140660001c1f3078f9fdf008198f331f1e33000fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e006007fefff00e006007fefff00e0060003efff00e0060003efff00e002ed0000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx6335\posy132\absh1520\absw1560\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw78\pich76\picwgoal1560\pichgoal1520\macpict\bliptag1940984408\blipupi72{\*\blipuid 73b112589098b3e4f4dc56cdb67c5635}086c00000000004c004e001102ff0c00ffffffff0000000000000000004e0000004c00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff017d018700a0008200a0008e001e0001000a00000000004c004e0098001400000000009800a0000000000098009c00000000004c004e000102ed0008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f7000c047f9e73fff9fdff0080f7000c047f9e73fff9fdff0080f7000c047f9e7ffff9fdff0080f7000c047f9e7ffff9fdff0080f7000d097f926383c1c33ce1ff80f7000d097f926383c1c33ce1ff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324e1ff80f7000d027f9273fe990324e1ff80f7000c027fccf3fd9902fcff80f7000c027fccf3fd9902fcff80f7000d097fcce199c1c399e1ff80f7000d097fcce199c1c399e1ff80f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70007007ff0ff01fe0007007ff0ff01fe00070060f000010e00070060f000010e00070060f000010e00070060f000010e000b0460002a20a0f400010e000b0460002a20a0f400010e000b046000100040f400010fe00b046000100040f400010fe00c056000082020a0f500010fe00c056000082020a0f500010fe00c05600010104110f500010fe00c05600010104110f500010fe00c056000082020a8f500010fe00c056000082020a8f500010fe00b046000101041f400010fe00b046000101041f400010fe00c0560000828a0a0f500010fe00c0560000828a0a0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe00d02600028fe000020f600010fe00d02600028fe000020f600010fe00d0660004410000040f600010fe00d0660004410000040f600010fe00d06600020282a2822f600010fe00d06600020282a2822f600010fe00c0360001410fe44f600010fe00c0360001410fe44f600010fe00d0660000220222028f600010fe00d0660000220222028f600010fe00c0360004414fe44f600010fe00c0360004414fe44f600010fe00d06600028082a2822f600010fe00d06600028082a2822f600010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0120b60003c600038380c318000c0fb00010fe0120b60003c600038380c318000c0fb00010fe0120b600066600018180c300000c0fb00010fe0120b600066600018180c300000c0fb00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe014096000666660181806618cfecc00c0fd00010fe014096000666660181806618cfecc00c0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0140260003cfe0007c0600000618c0006fd00010fe0140260003cfe0007c0600000618c0006fd00010fe01402600066fe0000c0fe000361800006fd00010fe01402600066fe0000c0fe000361800006fd00010fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0140360006660fecc04633030330cfd660300000fe0140360006660fecc04633030330cfd660300000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe00b0060fd0000c0f500010fe00b0060fd0000c0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0150e6000630000300180e0000030c60003fe00010fe0150e6000630000300180e0000030c60003fe00010fe01502600063fe0008018060000030c00003fe00010fe01502600063fe0008018060000030c00003fe00010fe015136000631f3670f9f060f0f036ce3e1f1e61800fe015136000631f3670f9f060f0f036ce3e1f1e61800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0140c60001c33303199986180181986fd3302000fe0140c60001c33303199986180181986fd3302000fe0140660001c1f3078f9fdf008198f331f1e33000fe0140660001c1f3078f9fdf008198f331f1e33000fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e006007fefff00e006007fefff00e0060003efff00e0060003efff00e002ed0000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\hich\af4\dbch\af4\loch\f4 The Windows menu gives you control over how the windows are displayed, and helps you find windows on a cluttered desktop.  The Tile and Stack commands sort the files on th\hich\af4\dbch\af4\loch\f4 e desktop into two different pictorial formats.  The names of all windows currently open are also shown in this menu.  The front window's name is marked with a check.  You can bring any window to front by selecting its name from the window list.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318182}\hich\af4\dbch\af4\loch\f4 Tile{\*\bkmkend _Toc495318182}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tile command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Tile command changes all of the windows on the desktop to the same size, then places them so that none overlap.  The name comes from the fact that the windows are placed next to one another, much as tiles are laid down on a floor.\par \hich\af4\dbch\af4\loch\f4 Ti\hich\af4\dbch\af4\loch\f4 ling the windows is a quick way to organize your desktop.  Once the windows are tiled, it is fairly easy to find a particular window.  On the other hand, if you have a lot windows open, they generally become too small to be useful.  That is when the zoom \hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 ox, located at the top right of the window's title bar, becomes handy.  When you click this box, the window grows to take up the entire desktop.  Once you have finished with the window, and would like to select another, click the zoom box again.  The wind\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 w returns to its original size and location, and you can see all of the tiled windows again.\par \hich\af4\dbch\af4\loch\f4 If there are nine windows on the desktop, the Tile command will create three rows; each row will have three windows.  If more than nine windows are on the desktop,\hich\af4\dbch\af4\loch\f4  the extras are laid on top of the first nine.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318183}\hich\af4\dbch\af4\loch\f4 Stack{\*\bkmkend _Toc495318183}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Stack command stacks the windows on the desktop. Each window is moved a little to the right of the window it covers, and it is also moved far enough down so that the window's\hich\af4\dbch\af4\loch\f4  name can be read.\par \hich\af4\dbch\af4\loch\f4 If there are more than seven windows open, the extra windows are stacked on top of the first seven windows.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318184}\hich\af4\dbch\af4\loch\f4 Shell Window{\*\bkmkend _Toc495318184}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Shell Window command opens the shell window.  The shell window is basically an u\hich\af4\dbch\af4\loch\f4 ntitled window with a few special characteristics.  The special characteristics are:  the shell window has the name Shell, rather than a name that starts with Untitled; it shows up in the top right corner of the screen; and the shell window always starts \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ith a language stamp of Shell.\par \hich\af4\dbch\af4\loch\f4 This window will be opened automatically before any EXE program, including the compiler, is executed.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318185}\hich\af4\dbch\af4\loch\f4 Graphics Window{\*\bkmkend _Toc495318185}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics window\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Graphics Window command brings up a special window where the output from gra\hich\af4\dbch\af4\loch\f4 phics programs}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics programs}}}{\hich\af4\dbch\af4\loch\f4  can be written without leaving the programming environment.  Whenever you write a graphics program, use this command to open the window before running your program.  If you forget to open the graphics window, the pr\hich\af4\dbch\af4\loch\f4 ogram will still run, but the graphics output will be lost.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318186}\hich\af4\dbch\af4\loch\f4 Variables Window{\*\bkmkend _Toc495318186}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\shp{\*\shpinst\shpleft5184\shptop30\shpright7884\shpbottom1510\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz9\shplid1037{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw135\pich74\picwgoal2700\pichgoal1480\macpict\bliptag693922378\blipupi72{\*\blipuid 295c6a4ae1e31115f3660f5e4116fd1b}07de00000000004a0087001102ff0c00ffffffff000000000000000000870000004a00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff017302a400a0008200a0008e001e0001000a00000000004a0087009800220000000000980110000000000098010e00000000004a0087000102df0006007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f80b056000c0018003e60000180b056000c0018003e60000180e086020c0818183000006e90000180e086020c0818183000006e90000180b056060c26183c3e60000180b056060c26183c3e60000180f096020ca899ffb3f87ce3eea0000180f096020ca899ffb3f87ce3eea0000180f096060c0418ff336ccc633ea0000180f096060c0418ff336ccc633ea0000180f096222c081866336ccc633ea0000180f096222c081866336ccc633ea0000180f096264c04187e336ccc633ea0000180f096264c04187e336ccc633ea0000180f0960a0c0818ff336c7cf33ea0000180f0960a0c0818ff336c7cf33ea0000180b056060c0418e73e60000180b056060c0418e73e60000180b056000c0018003e60000180b056000c0018003e600001806007fe1ff00f806007fe1ff00f8090060e400031ffffff8090060e400031ffffff811036003cc0ff80001c1e0f200031800001811036003cc0ff80001c1e0f2000318000018110360030cc3f9000103c3f1000318018018110360030cc3f9000103c3f1000318018018110361f30cc3f80001c3e0f2000318066018110361f30cc3f80001c3e0f20003180660180e0363330cc3f80001c330f200fd180e0363330cc3f80001c330f200fd18110363330fc3f80001c330f2000318600618110363330fc3f80001c330f20003186006181103633300c3f80001c330f2000319f81f981103633300c3f80001c330f2000319f81f980f0361f300c3f9000203f1e0f200fd180f0361f300c3f9000203f1e0f200fd1809036003c00fe700fd1809036003c00fe700fd18060060e400fd18060060e400fd180f016180f7000103e0f10003181ff8180f016180f7000103e0f10003181ff8180d0060f6000003f00003180000180d0060f6000003f00003180000180f016380f7000103e0f100031ffffff80f016380f7000103e0f100031ffffff80e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180f016180f700010330f10003180000180f016180f700010330f10003180000180f0163c0f7000101e0f10003180000180f0163c0f7000101e0f1000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e40003181ff818090060e40003181ff818060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18090060e4000319f81f98090060e4000319f81f98090060e4000318600618090060e4000318600618060060e400fd18060060e400fd18090060e4000318066018090060e4000318066018090060e4000318018018090060e4000318018018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e4000319ff8018090060e4000319ff8018090060e4000319818018090060e4000319818018090060e400031981ff98090060e400031981ff98090060e4000319818198090060e4000319818198090060e4000319ff8198090060e4000319ff8198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e40003183fff98090060e40003183fff98090060e4000318000018090060e4000318000018090060e4000318000018090060e400031800001806007fe1ff00f806007fe1ff00f802df0000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx5183\posy29\absh1480\absw2700\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw135\pich74\picwgoal2700\pichgoal1480\macpict\bliptag693922378\blipupi72{\*\blipuid 295c6a4ae1e31115f3660f5e4116fd1b}07de00000000004a0087001102ff0c00ffffffff000000000000000000870000004a00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff017302a400a0008200a0008e001e0001000a00000000004a0087009800220000000000980110000000000098010e00000000004a0087000102df0006007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f80b056000c0018003e60000180b056000c0018003e60000180e086020c0818183000006e90000180e086020c0818183000006e90000180b056060c26183c3e60000180b056060c26183c3e60000180f096020ca899ffb3f87ce3eea0000180f096020ca899ffb3f87ce3eea0000180f096060c0418ff336ccc633ea0000180f096060c0418ff336ccc633ea0000180f096222c081866336ccc633ea0000180f096222c081866336ccc633ea0000180f096264c04187e336ccc633ea0000180f096264c04187e336ccc633ea0000180f0960a0c0818ff336c7cf33ea0000180f0960a0c0818ff336c7cf33ea0000180b056060c0418e73e60000180b056060c0418e73e60000180b056000c0018003e60000180b056000c0018003e600001806007fe1ff00f806007fe1ff00f8090060e400031ffffff8090060e400031ffffff811036003cc0ff80001c1e0f200031800001811036003cc0ff80001c1e0f2000318000018110360030cc3f9000103c3f1000318018018110360030cc3f9000103c3f1000318018018110361f30cc3f80001c3e0f2000318066018110361f30cc3f80001c3e0f20003180660180e0363330cc3f80001c330f200fd180e0363330cc3f80001c330f200fd18110363330fc3f80001c330f2000318600618110363330fc3f80001c330f20003186006181103633300c3f80001c330f2000319f81f981103633300c3f80001c330f2000319f81f980f0361f300c3f9000203f1e0f200fd180f0361f300c3f9000203f1e0f200fd1809036003c00fe700fd1809036003c00fe700fd18060060e400fd18060060e400fd180f016180f7000103e0f10003181ff8180f016180f7000103e0f10003181ff8180d0060f6000003f00003180000180d0060f6000003f00003180000180f016380f7000103e0f100031ffffff80f016380f7000103e0f100031ffffff80e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180f016180f700010330f10003180000180f016180f700010330f10003180000180f0163c0f7000101e0f10003180000180f0163c0f7000101e0f1000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e40003181ff818090060e40003181ff818060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18090060e4000319f81f98090060e4000319f81f98090060e4000318600618090060e4000318600618060060e400fd18060060e400fd18090060e4000318066018090060e4000318066018090060e4000318018018090060e4000318018018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e4000319ff8018090060e4000319ff8018090060e4000319818018090060e4000319818018090060e400031981ff98090060e400031981ff98090060e4000319818198090060e4000319818198090060e4000319ff8198090060e4000319ff8198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e40003183fff98090060e40003183fff98090060e4000318000018090060e4000318000018090060e4000318000018090060e400031800001806007fe1ff00f806007fe1ff00f802df0000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trace command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window}}}{\hich\af4\dbch\af4\loch\f4 The Variables Window command brings up another special window.  You can enter the names of variables f\hich\af4\dbch\af4\loch\f4 rom your program, and the variable and its current value will show up in the window, updating as you step through your program.  When debugging a program, you would normally select the Variables command, and then select one of the debugging commands such \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 s Step, Trace, or Go.  You cannot enter a variable name until the program begins execution, since variables are undefined until run-time.  Also, the variable names that you type into the Variables window can only be entered when the program is executing i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  the subroutine for which these variables are defined.\par \hich\af4\dbch\af4\loch\f4 The Variables window above is typical.  Under the window's title bar are an up-arrow, a down-arrow, star, and the name of the currently executing subroutine or main program.  Beneath the arrows is a li\hich\af4\dbch\af4\loch\f4 st of variable names and their current values.  Along the right side of the window is a scroll bar, used to scroll through the variables list.\par \hich\af4\dbch\af4\loch\f4 The arrows next to the current subroutine's name can be used to move through the local variables in the various s\hich\af4\dbch\af4\loch\f4 ubroutines; they are not selectable unless your program is executing at a point where a function call has been detected by the debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4 .  For example, once you enter a subroutine from the function main, the window display changes to show t\hich\af4\dbch\af4\loch\f4 he variables in the subroutine.  The up-arrow darkens, indicating that you may click on it to change the display to that of the function main.  If you select the up-arrow, you will see the variables display that you created for main, and the down-arrow wi\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 l now be selectable so that you may return to the subroutine's variables display.\par \hich\af4\dbch\af4\loch\f4 The star button is a short-cut that displays all of the simple variables available from the current subroutine.  Simple variables are any variable that does not need to be de\hich\af4\dbch\af4\loch\f4 referenced with an array subscript, pointer operator, or field name.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window}}}{\hich\af4\dbch\af4\loch\f4 You can enter variable names by clicking anywhere in the content region of the Variables window.  After clicking, a line-edit box appears under the subroutine-nam\hich\af4\dbch\af4\loch\f4 e box.  You can enter the name of one variable in the box, using any of the line-edit tools to type the name.  Press the return key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return key}}}{\hich\af4\dbch\af4\loch\f4  after entering the name, and the variable's current value will be immediately displayed to the right of t\hich\af4\dbch\af4\loch\f4 he name.  If you decide later that you need to edit or delete the variable name, then click on the name and use any line-edit tools you need to accomplish the task.  \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 scalars}}}{\hich\af4\dbch\af4\loch\f4 Only the names of specific values may be entered into the Variables windo\hich\af4\dbch\af4\loch\f4 w; you cannot view the contents of structures or entire arrays.  It is possible to see the value of any array declared as an array of characters, however.  In that case, the debugger expects a null-terminated string.\par \hich\af4\dbch\af4\loch\f4 When you display a pointer, you will se\hich\af4\dbch\af4\loch\f4 e its value printed in hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  format.  You can also look at the value if the object pointed to by the pointer.  To do this, place a ^ character after the pointer's name.\par \hich\af4\dbch\af4\loch\f4 The contents of individual array elements can be seen in the \hich\af4\dbch\af4\loch\f4 Variables window, provided that the array elements are scalar types.  You must enter all of the indices associated with an array element (i.e. an element in a four-dimensional array requires four indices).  An array element is specified by first entering \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he name of the array, and then the indices enclosed in either parentheses or square brackets.  While the desktop will recognize both parentheses and square brackets, the opening and ending punctuation must match.  (i.e. use '(' with ')' and '[' with ']').\par \hich\af4\dbch\af4\loch\f4 You can look at any field within a structure or union by typing the structure or union name, a dot, and the name of the field.\par \hich\af4\dbch\af4\loch\f4 If a pointer points to a structure or union, you can look at a field in the structure or union by typing the name of the pointer,\hich\af4\dbch\af4\loch\f4  then either ^. or ->, and finally the field name.\par \hich\af4\dbch\af4\loch\f4 These dereference operators can be used in combination.  For example, it is possible to look at an element of an array that is in a structure pointed at by a pointer with a sequence like this one:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ptr->ar\hich\af2\dbch\af4\loch\f2 r[4];\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window}}}{\hich\af4\dbch\af4\loch\f4 The names entered into the variables window are case insensitive \endash  leNGTh and LEngth would be the same variable name, for example.\par \hich\af4\dbch\af4\loch\f4 Any spaces you type are left in the string for display purposes, but are otherwise ignored, e\hich\af4\dbch\af4\loch\f4 ven if they appear in an identifier.\par \hich\af4\dbch\af4\loch\f4 The debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4  can display variables which are stored internally in any of the following formats:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\keepn\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 1-, 2-, and 4-byte integers  (C supports one byte integers, but displays them as characters.  Enumerati\hich\af4\dbch\af4\loch\f4 ons are displayed as 2-byte integers.)\par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 4-, 8-, and 10-byte reals\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Pascal style strings and null terminated strings\par \bullet \tab \hich\af4\dbch\af4\loch\f4 booleans\tab (Boolean variables are not used by C.  In Pascal, their value will be printed as either true or false.  The debugger only looks\hich\af4\dbch\af4\loch\f4  at the first byte of a boolean \endash  a zero is regarded as false, while any other quantity is regarded as true.)\par \bullet \tab \hich\af4\dbch\af4\loch\f4 characters (As with booleans, only the first byte of the character is examined.  Nonprinting characters are output as blanks.)\par \bullet \tab \hich\af4\dbch\af4\loch\f4 pointers (These\hich\af4\dbch\af4\loch\f4  print as hexadecimal values.)\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 7.1:  Variable formats\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The variables window is updated after each command is executed by a Step or Trace command.  It is also updated when a break-point is encountered.  The variables window is not updated if the Go c\hich\af4\dbch\af4\loch\f4 ommand is used, or during the execution of a Step Through or Go To Next Return command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318187}\hich\af4\dbch\af4\loch\f4 List of Window Names{\*\bkmkend _Toc495318187}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 As you open windows, their names appear after the Stack command in the Windows menu.  When you pull down the Windows menu, you can see a list of al\hich\af4\dbch\af4\loch\f4 l of the windows on the desktop, by name.  The window that you are using when you pull the menu down is checked.\par \hich\af4\dbch\af4\loch\f4 If you would like to use a different window, you can select it from the windows list.  The window you select is placed on top of all of the oth\hich\af4\dbch\af4\loch\f4 er windows on the desktop, and becomes the active window.\par \hich\af4\dbch\af4\loch\f4 There is only room for eleven window names in the Windows menu.  If there are more than eleven windows on the desktop, the extra names will not be displayed in the windows list.{\*\bkmkend windowsMenu}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 windows menu}{\rxe \hich\af4\dbch\af4\loch\f4 windowsMenu}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318188}{\shp{\*\shpinst\shpleft6048\shptop942\shpright7868\shpbottom2662\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz10\shplid1039{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw91\pich86\picwgoal1820\pichgoal1720\macpict\bliptag-865326182\blipupi72{\*\blipuid cc6c2b9a7c435a0a8e55f0368e6e18e9}0a2e000000000056005b001102ff0c00ffffffff0000000000000000005b0000005600000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff01af01c800a0008200a0008e001e0001000a000000000056005b0098001800000000008700b800000000008700b6000000000042005b000102e90008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008047c1cfffe7cee0008047c1cfffe7cee0008047cfffffe7cee0008047cfffffe7cee0008047cf8e0f07cee0008047cf8e0f07cee0008047c3ce6667cee0008047c3ce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cf866707cee0008047cf866707cee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0007007fecff01800007007fecff018000080060ed0002018000080060ed0002018000080060ed0002018000080060ed00020180000e056003e3000180f30003c3e180000e056003e3000180f30003c3e180000e05600300000180f300038301f8000e05600300000180f300038301f8000f056003071f0f80f40004036301f8000f056003071f0f80f40004036301f8000f056003c3199980f400040433c1f8000f056003c3199980f400040433c1f8000f05600303199980f40004042301f8000f05600303199980f40004042301f8000f05600303199980f4000404b301f8000f05600303199980f4000404b301f8001006600307998f9998f50004036301f8001006600307998f9998f50004036301f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000f066002a2000080a0f4000380a1f8000f066002a2000080a0f4000380a1f8000f0660010000010110f400030111f8000f0660010000010110f400030111f80013096002020a0a8080aaa828f80004022201f80013096002020a0a8080aaa828f80004022201f800130960014111110051114444f80004041151f800130960014111110051114444f80004041151f8001209600202088880088a28a8f700032221f8001209600202088880088a28a8f700032221f800130960010111110111114440f80004041111f800130960010111110111114440f80004041111f8001309600202888a80a0aa2828f800040220a1f8001309600202888a80a0aa2828f800040220a1f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80018056003e1800007fe0002780070fe000060fd0003c3e1f80018056003e1800007fe0002780070fe000060fd0003c3e1f8001705600330000003fe0005cc0030000060fc00038331f8001705600330000003fe0005cc0030000060fc00038331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f80019176003318c0cc30cccc078cc30cccc6063333000043331f80019176003318c0cc30cccc078cc30cccc6063333000043331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f80017086003e3c78f8787c8c0fc780938f1e330000363e1f80017086003e3c78f8787c8c0fc780938f1e330000363e1f800100060fe00040c00000780f5000201f800100060fe00040c00000780f5000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000e056003e00001c0f30003c3e1f8000e056003e00001c0f30003c3e1f8000e056003300000c0f300038331f8000e056003300000c0f300038331f8001208600331e3e0c1f1e1e0f70004036331f8001208600331e3e0c1f1e1e0f70004036331f80012086003e33330c3333330f700040433e1f80012086003e33330c3333330f700040433e1f8001208600363f330c33303f0f70004042361f8001208600363f330c33303f0f70004042361f80011076003330330c33333f6000404b331f80011076003330330c33333f6000404b331f8001309600331e3e1e1f1e1e333f80004036331f8001309600331e3e1e1f1e1e333f80004036331f8000b0360000003f0000201f8000b0360000003f0000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80012056002a0000080fe00000af7000382a1f80012056002a0000080fe00000af7000382a1f8001105600110000040fe000011f6000241f8001105600110000040fe000011f6000241f8001605600220a2a080fea003200a2a0afb0004022081f8001605600220a2a080fea003200a2a0afb0004022081f800160c60014111104111111014114511fb0004041041f800160c60014111104111111014114511fb0004041041f80000009800180087000000b000b80087000000b000b6004200000056005b0001160d600222a220822202a00222288a80fb00032081f800160d600222a220822202a00222288a80fb00032081f800160c60011101104111110011114510fb0004041041f800160c60011101104111110011114510fb0004041041f8001403600220a2fca0030a0a288afb0004022081f8001403600220a2fca0030a0a288afb0004022081f8000b0360000001f0000201f8000b0360000001f0000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000a026001e0ef000201f8000a026001e0ef000201f8000c046003300180f1000201f8000c046003300180f1000201f8000d05600301e3e1e0f2000201f8000d05600301e3e1e0f2000201f8000d05600373318330f2000201f8000d05600373318330f2000201f8000d05600333318330f2000201f8000d05600333318330f2000201f8000d0560033331b330f2000201f8000d0560033331b330f2000201f8000e066001e1e0e1e333f3000201f8000e066001e1e0e1e333f3000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800070001ecff01f800070001ecff01f80002e9000000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx6047\posy941\absh1720\absw1820\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw91\pich86\picwgoal1820\pichgoal1720\macpict\bliptag-865326182\blipupi72{\*\blipuid cc6c2b9a7c435a0a8e55f0368e6e18e9}0a2e000000000056005b001102ff0c00ffffffff0000000000000000005b0000005600000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff01af01c800a0008200a0008e001e0001000a000000000056005b0098001800000000008700b800000000008700b6000000000042005b000102e90008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008047c1cfffe7cee0008047c1cfffe7cee0008047cfffffe7cee0008047cfffffe7cee0008047cf8e0f07cee0008047cf8e0f07cee0008047c3ce6667cee0008047c3ce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cf866707cee0008047cf866707cee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0007007fecff01800007007fecff018000080060ed0002018000080060ed0002018000080060ed0002018000080060ed00020180000e056003e3000180f30003c3e180000e056003e3000180f30003c3e180000e05600300000180f300038301f8000e05600300000180f300038301f8000f056003071f0f80f40004036301f8000f056003071f0f80f40004036301f8000f056003c3199980f400040433c1f8000f056003c3199980f400040433c1f8000f05600303199980f40004042301f8000f05600303199980f40004042301f8000f05600303199980f4000404b301f8000f05600303199980f4000404b301f8001006600307998f9998f50004036301f8001006600307998f9998f50004036301f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000f066002a2000080a0f4000380a1f8000f066002a2000080a0f4000380a1f8000f0660010000010110f400030111f8000f0660010000010110f400030111f80013096002020a0a8080aaa828f80004022201f80013096002020a0a8080aaa828f80004022201f800130960014111110051114444f80004041151f800130960014111110051114444f80004041151f8001209600202088880088a28a8f700032221f8001209600202088880088a28a8f700032221f800130960010111110111114440f80004041111f800130960010111110111114440f80004041111f8001309600202888a80a0aa2828f800040220a1f8001309600202888a80a0aa2828f800040220a1f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80018056003e1800007fe0002780070fe000060fd0003c3e1f80018056003e1800007fe0002780070fe000060fd0003c3e1f8001705600330000003fe0005cc0030000060fc00038331f8001705600330000003fe0005cc0030000060fc00038331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f80019176003318c0cc30cccc078cc30cccc6063333000043331f80019176003318c0cc30cccc078cc30cccc6063333000043331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f80017086003e3c78f8787c8c0fc780938f1e330000363e1f80017086003e3c78f8787c8c0fc780938f1e330000363e1f800100060fe00040c00000780f5000201f800100060fe00040c00000780f5000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000e056003e00001c0f30003c3e1f8000e056003e00001c0f30003c3e1f8000e056003300000c0f300038331f8000e056003300000c0f300038331f8001208600331e3e0c1f1e1e0f70004036331f8001208600331e3e0c1f1e1e0f70004036331f80012086003e33330c3333330f700040433e1f80012086003e33330c3333330f700040433e1f8001208600363f330c33303f0f70004042361f8001208600363f330c33303f0f70004042361f80011076003330330c33333f6000404b331f80011076003330330c33333f6000404b331f8001309600331e3e1e1f1e1e333f80004036331f8001309600331e3e1e1f1e1e333f80004036331f8000b0360000003f0000201f8000b0360000003f0000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80012056002a0000080fe00000af7000382a1f80012056002a0000080fe00000af7000382a1f8001105600110000040fe000011f6000241f8001105600110000040fe000011f6000241f8001605600220a2a080fea003200a2a0afb0004022081f8001605600220a2a080fea003200a2a0afb0004022081f800160c60014111104111111014114511fb0004041041f800160c60014111104111111014114511fb0004041041f80000009800180087000000b000b80087000000b000b6004200000056005b0001160d600222a220822202a00222288a80fb00032081f800160d600222a220822202a00222288a80fb00032081f800160c60011101104111110011114510fb0004041041f800160c60011101104111110011114510fb0004041041f8001403600220a2fca0030a0a288afb0004022081f8001403600220a2fca0030a0a288afb0004022081f8000b0360000001f0000201f8000b0360000001f0000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000a026001e0ef000201f8000a026001e0ef000201f8000c046003300180f1000201f8000c046003300180f1000201f8000d05600301e3e1e0f2000201f8000d05600301e3e1e0f2000201f8000d05600373318330f2000201f8000d05600373318330f2000201f8000d05600333318330f2000201f8000d05600333318330f2000201f8000d0560033331b330f2000201f8000d0560033331b330f2000201f8000e066001e1e0e1e333f3000201f8000e066001e1e0e1e333f3000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800070001ecff01f800070001ecff01f80002e9000000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\hich\af4\dbch\af4\loch\f4 The Find Menu{\*\bkmkend _Toc495318188}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart findMenu}\hich\af4\dbch\af4\loch\f4 The Find menu helps you locate strings in a window, replace occurrences of a string with another string, find the cursor, or move to a particular line by line number.\par \hich\af4\dbch\af4\loch\f4 The Find menu does not appear on the menu bar}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 me\hich\af4\dbch\af4\loch\f4 nu bar}}}{\hich\af4\dbch\af4\loch\f4  unless there is a file open on the desktop.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\page {\*\bkmkstart _Toc495318189}\hich\af4\dbch\af4\loch\f4 Find{\*\bkmkend _Toc495318189}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart findCommand}\hich\af4\dbch\af4\loch\f4 The Find command is used to find a sequence of characters in the current window.\par }\pard\plain \qj\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw342\pich194\picwgoal6840\pichgoal3880\macpict\bliptag-1735962566\blipupi72{\*\blipuid 9887503af6f6fa50ec479808ae78daea}0e230000000000c201561101a00082a0008e01000a000000000308028098002c0000000000c201580000000000c201560000000000c20156000102d50007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f8000e007fefff03f839fffceeff01f8000e007fefff03f839fffceeff01f8000e007fefff03f9fffffceeff01f8000e007fefff03f9fffffceeff01f8000e007fefff03f9f1c1e0eeff01f8000e007fefff03f9f1c1e0eeff01f8000e007fefff03f879cccceeff01f8000e007fefff03f879cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f0cce0eeff01f8000e007fefff03f9f0cce0eeff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f800070060d800011800070060d800011800070060d800011800070060d800011800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000e0160f8fc00007fe1ff03807c18000e0160f8fc00007fe1ff03807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c1800110760f803e300018060e2000401807c1800110760f803e300018060e2000401807c1800110760f8030000018060e2000401807c1800110760f8030000018060e2000401807c1800110760f803071f0f9860e2000401807c1800110760f803071f0f9860e2000401807c1800110760f803c319998060e2000401807c1800110760f803c319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f80307998f9860e2000401807c1800110760f80307998f9860e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000e0160f8fc00007fe1ff03807c18000e0160f8fc00007fe1ff03807c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800150960f806000030c330001cfc000030e800027c1800150960f806000030c330001cfc000030e800027c1800150960f806000030c330000cfc000030e800027c1800150960f806000030c330000cfc000030e800027c1800170f60f806000030db3e1e0c1e0618f1b1f0e800027c1800170f60f806000030db3e1e0c1e0618f1b1f0e800027c1800170f60f806000030db33330c3306d999c330e800027c1800170f60f806000030db33330c3306d999c330e800027c1800170f60f806000030db33330c3f06d9998330e800027c1800170f60f806000030db33330c3f06d9998330e800027c1800170f60f8060000306633330c300331998330e800027c1800170f60f8060000306633330c300331998330e800027c1800170760f8060000306633fe1e040330f181f3e800027c1800170760f8060000306633fe1e040330f181f3e800027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800180660f8060000303cfe000603c0000003000ce900027c1800180660f8060000303cfe000603c0000003000ce900027c1800170660f80600003066fe00010660fe00000ce800027c1800170660f80600003066fe00010660fe00000ce800027c18001a1260f806000030603e3c3c0603c7c3c71f1c631eeb00027c18001a1260f806000030603e3c3c0603c7c3c71f1c631eeb00027c18001a1260f8060000306066606603c66666030c0c6333eb00027c18001a1260f8060000306066606603c66666030c0c6333eb00027c18001a1260f80600003060663c7e0067e663c30c0c363feb00027c18001a1260f80600003060663c7e0067e663c30c0c363feb00027c18001a1260f8060000306666066006660660630d8c3630eb00027c18001a1260f8060000306666066006660660630d8c3630eb00027c18001b1360f8060000303c3e3c3c03c3c663c7871e1c1e30ec00027c18001b1360f8060000303c3e3c3c03c3c663c7871e1c1e30ec00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800150960f806000030c3301870ee000070f600027c1800150960f806000030c3301870ee000070f600027c1800150960f806000030c3300030ee000030f600027c1800150960f806000030c3300030ee000030f600027c1800251d60f806000030db3e38307878f87c787807879fc7c3e6c78780787ccc7c30f600027c1800251d60f806000030db3e38307878f87c787807879fc7c3e6c78780787ccc7c30f600027c1800230b60f806000030db331830ccc0fdcc080cccdb6666670ccc00fdcc0030f600027c1800230b60f806000030db331830ccc0fdcc080cccdb6666670ccc00fdcc0030f600027c1800251260f806000030db331830fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030f600027c1800251260f806000030db331830fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030f600027c1800250b60f80600003066331830c00cfecc03c00cccdbfe66030c00c0c0fecc0030f600027c1800250b60f80600003066331830c00cfecc03c00cccdbfe66030c00c0c0fecc0030f600027c1800260860f80600003066333cfe780df87c787807879b67c3e607878078fe7c0178c0f700027c1800260860f80600003066333cfe780df87c787807879b67c3e607878078fe7c0178c0f700027c1800190560f807fffff0fb0000c0fb000006fb00000cf300027c1800190560f807fffff0fb0000c0fb000006fb00000cf300027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000f0360f80000f7ff0080e700027c18000f0360f80000f7ff0080e700027c18000f0360f8001ff700007ce700027c18000f0360f8001ff700007ce700027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800220960f80770007c60003023fd00010770fd000270003cfd000238000ef600027c1800220960f80770007c60003023fd00010770fd000270003cfd000238000ef600027c1800230f60f80770006000003033000018000770fd0002700066fd000218000ef600027c1800230f60f80770006000003033000018000770fd0002700066fd000218000ef600027c1800240f60f807700060e3e1f03b1e333e000770fd00097000603e7c3c3c18000ef600027c1800240f60f807700060e3e1f03b1e333e000770fd00097000603e7c3c3c18000ef600027c1800230f60f8077000786333303f331e18000770fd0002700060fd660218000ef600027c1800230f60f8077000786333303f331e18000770fd0002700060fd660218000ef600027c1800240f60f807700060633330373f0c18000770fd00097000606666607e18000ef600027c1800240f60f807700060633330373f0c18000770fd00097000606666607e18000ef600027c1800230f60f80770006063333033301e1b000770fd00017000fd66036018000ef600027c1800230f60f80770006063333033301e1b000770fd00017000fd66036018000ef600027c1800240f60f807700060f331f0311e330e000770fd000470003c3e66fe3c01000ef600027c1800240f60f807700060f331f0311e330e000770fd000470003c3e66fe3c01000ef600027c1800180360f80770f700010770fd000070f900000ef600027c1800180360f80770f700010770fd000070f900000ef600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c18000f0360f8001ff700007ce700027c18000f0360f8001ff700007ce700027c18000f0360f80000f7ff0080e700027c18000f0360f80000f7ff0080e700027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800070060d800011800070060d800011800070060d800011800070060d80001180007007fd8ff01f80007007fd8ff01f80002d500a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 When you select the Find command, a dialog like the one above appears on your screen.  The Find dialog is a mod\hich\af4\dbch\af4\loch\f4 al dialog that stays in place until one of the buttons is selected.  To find a string of text, enter the text in the line-edit box next to Find: and click on the Find Next button (or press the return key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return key}}}{\hich\af4\dbch\af4\loch\f4 ).  The window display will change\hich\af4\dbch\af4\loch\f4  as necessary to show the first occurrence of the string after the current insertion point, and the string will be selected.\par \hich\af4\dbch\af4\loch\f4 You can continue searching for the same string by continuing to click on the Find Same command.  If the end of the program is reach\hich\af4\dbch\af4\loch\f4 ed, the search starts over at the beginning of the file.  The only time the search will fail is if there are no occurrences of the search string in the entire document.\par \hich\af4\dbch\af4\loch\f4 There are three options that affect the way searching is conducted.  These appear as ch\hich\af4\dbch\af4\loch\f4 eck boxes in the Find window.   The first is Whole Word.  When selected, this option will only find strings that are preceded by a non-alphanumeric character or occur at the beginning of a line, and that end in a non-alphanumeric character or the end-of-l\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ne marker.  For example, searching for the word "int" with Whole Word enabled would find a match in both of these lines:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int i;\par \hich\af2\dbch\af4\loch\f2 /*i is int*/\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The characters "int" in this line, though, would not be found:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*print this line*/\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The Case Sensitive option ma\hich\af4\dbch\af4\loch\f4 kes the search case sensitive.  That is, searching for INT would not find the word int.\par \hich\af4\dbch\af4\loch\f4 In many situations, especially when programming in assembly language, you want to find two words separated by some spaces.  For example, if you want to find the line\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \tab \hich\af2\dbch\af4\loch\f2 lda   #2\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 you really don't care if there are two or three spaces between the two words \endash  you just want to find all of the places where the accumulator is loaded with the constant 2.  In this case, you would want to use the White Space Compares Equal optio\hich\af4\dbch\af4\loch\f4 n.  When selected, all runs of spaces and tabs are treated as if they were a single space.{\*\bkmkend findCommand}}{\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 find command}{\rxe findCommand}\bxe }}{\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318190}\hich\af4\dbch\af4\loch\f4 Find Same{\*\bkmkend _Toc495318190}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 find same command\bxe }}}{\hich\af4\dbch\af4\loch\f4 If you have already entered a search string using the Find command, you can search fo\hich\af4\dbch\af4\loch\f4 r the next occurrence of the same string using the Find Same command.  This allows you to avoid using the Find dialog, and enables searching by simply using the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 G keyboard equivalent.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318191}\hich\af4\dbch\af4\loch\f4 Display Selection{\*\bkmkend _Toc495318191}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 display selection command\bxe }}}{\hich\af4\dbch\af4\loch\f4 If the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  (or selected text) is visible on the screen, this command does nothing.  If you have used the scroll bars to move the display so t\hich\af4\dbch\af4\loch\f4 hat the insertion point does not appear on the screen, the Display Selection command moves the display so that you can see the insertion point.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318192}\hich\af4\dbch\af4\loch\f4 Replace{\*\bkmkend _Toc495318192}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 replace command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Replace command brings up a dialog like the one shown below.  All of the \hich\af4\dbch\af4\loch\f4 buttons, check boxes, and line-edit box from the Find command are present, and are used the same way.  In addition, there are two new buttons and one new text box:\par }\pard\plain \qj\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw514\pich210\picwgoal10280\pichgoal4200\macpict\bliptag901944050\blipupi72{\*\blipuid 35c292f205259ad1e3e9468584616b59}122d0000000000d202021101a00082a0008e01000a0000000002d0024098004200000000002f020800000000002f020200000000002f0202000102bf0007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800012037ff8000fe9ff04fc1ffffe3fe2ff01800012037ff8000fe9ff04fc1ffffe3fe2ff01800012037ff9ffcfe9ff04fccfffff3fe2ff01800012037ff9ffcfe9ff04fccfffff3fe2ff01800015037ff9ffcfe9ff07fcce1c1f3e0e1e1fe5ff01800015037ff9ffcfe9ff07fcce1c1f3e0e1e1fe5ff01800015037ff9ffcfe9ff07fc1ccccf3ccccccfe5ff01800015037ff9ffcfe9ff07fc1ccccf3ccccccfe5ff01800015037ff9ffcfe9ff07fc9c0ccf3cccfc0fe5ff01800015037ff9ffcfe9ff07fc9c0ccf3cccfc0fe5ff01800014037ff9ffcfe9ff06fcccfccf3ccccce4ff01800014037ff9ffcfe9ff06fcccfccf3ccccce4ff01800015037ff8000fe9ff07fcce1c1e1e0e1e1fe5ff01800015037ff8000fe9ff07fcce1c1e1e0e1e1fe5ff0180000b007fe4ff00fce0ff0180000b007fe4ff00fce0ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000d0060f800000fceff03f80180000d0060f800000fceff03f80180000e0060f800010c20cf0003180180000e0060f800010c20cf00031801800013056003e3000180fd00010c20cf00031801800013056003e3000180fd00010c20cf0003180180001305600300000180fd00010c20cf0003180180001305600300000180fd00010c20cf00031801800013056003071f0f98fd00010c20cf00031801800013056003071f0f98fd00010c20cf00031801800013056003c3199980fd00010c20cf00031801800013056003c3199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf000318018000980042002f0000005e0208002f0000005e0202002f0000005e020200011305600307998f98fd00010c20cf0003180180001305600307998f98fd00010c20cf0003180180000e0060f800010c20cf0003180180000e0060f800010c20cf0003180180000d0060f800000cce0003180180000d0060f800000cce0003180180000d0060f800000fceff03f80180000d0060f800000fceff03f8018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000d0060f800000fceff03f80180000d0060f800000fceff03f80180000d0060f800000cce0003180180000d0060f800000cce00031801800012056003e00001c0fd00000cce00031801800012056003e00001c0fd00000cce00031801800012056003300000c0fd00000cce00031801800012056003300000c0fd00000cce000318018000130a600331e3e0c1f1e1e3000cce000318018000130a600331e3e0c1f1e1e3000cce000318018000130a6003e33330c3333330000cce000318018000130a6003e33330c3333330000cce000318018000130a600363f330c33303f0000cce000318018000130a600363f330c33303f0000cce000318018000130a6003330330c3333300000cce000318018000130a6003330330c3333300000cce000318018000130a600331e3e1e1f1e1e3000cce000318018000130a600331e3e1e1f1e1e3000cce000318018000100360000003fb00000cce000318018000100360000003fb00000cce0003180180000d0060f800000cce0003180180000d0060f800000cce0003180180000d0060f800000fceff03f80180000d0060f800000fceff03f8018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c7000201800014086006000030c330001cfc000030d1000201800014086006000030c330001cfc000030d1000201800014086006000030c330000cfc000030d10002018000980042005e0000008d0208005e0000008d0202005e0000008d0202000114086006000030c330000cfc000030d10002018000160e6006000030db3e1e0c1e0618f1b1f0d10002018000160e6006000030db3e1e0c1e0618f1b1f0d10002018000160e6006000030db33330c3306d999c330d10002018000160e6006000030db33330c3306d999c330d10002018000160e6006000030db33330c3f06d9998330d10002018000160e6006000030db33330c3f06d9998330d10002018000160e60060000306633330c300331998330d10002018000160e60060000306633330c300331998330d10002018000160660060000306633fe1e040330f181f3d10002018000160660060000306633fe1e040330f181f3d100020180000c046007fffff0c700020180000c046007fffff0c70002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c70002018000130560060000303cfa000203000cd20002018000130560060000303cfa000203000cd200020180001105600600003066f900000cd100020180001105600600003066f900000cd1000201800019116006000030603e3c3c03c3c7c3c71f1c631ed4000201800019116006000030603e3c3c03c3c7c3c71f1c631ed40002018000191160060000306066606606066666030c0c6333d40002018000191160060000306066606606066666030c0c6333d400020180001911600600003060663c7e03c7e663c30c0c363fd400020180001911600600003060663c7e03c7e663c30c0c363fd40002018000191160060000306666066000660660630d8c3630d40002018000191160060000306666066000660660630d8c3630d400020180001a1260060000303c3e3c3c03c3c663c7871e1c1e30d500020180001a1260060000303c3e3c3c03c3c663c7871e1c1e30d500020180000c046007fffff0c700020180000c046007fffff0c70002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c7000201800013076006000030c33018ed000070df000201800013076006000030c33018ed000070df0002018000980042008d000000bc0208008d000000bc0202008d000000bc0202000114086006000030c3300060ee000030df000201800014086006000030c3300060ee000030df0002018000241c6006000030db3e38f87878f87c787807879fc7c3e6c78780787ccc7c30df0002018000241c6006000030db3e38f87878f87c787807879fc7c3e6c78780787ccc7c30df0002018000220a6006000030db331860ccc0fdcc080cccdb6666670ccc00fdcc0030df0002018000220a6006000030db331860ccc0fdcc080cccdb6666670ccc00fdcc0030df000201800024116006000030db331860fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030df000201800024116006000030db331860fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030df0002018000240a60060000306633186cc00cfecc03c00cccdbfe66030c00c0c0fecc0030df0002018000240a60060000306633186cc00cfecc03c00cccdbfe66030c00c0c0fecc0030df00020180002518600600003066333c387878f87c787807879b67c3e607878078fe7c0178c0e000020180002518600600003066333c387878f87c787807879b67c3e607878078fe7c0178c0e0000201800018046007fffff0fb0000c0fb000006fb00000cdc000201800018046007fffff0fb0000c0fb000006fb00000cdc0002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000e02600000efff00c0d800020180000e02600000efff00c0d800020180000e0260001fef00003ed800020180000e0260001fef00003ed8000201800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c00180004007600770007c000038fc001130000003e300018003b801c001f18000c08cfd00071c0070007c000038fe000903c3838000e0070003c0fe0006038000e00180004007600770007c000038fc001130000003e300018003b801c001f18000c08cfd00071c0070007c000038fe000903c3838000e0070003c0fe0006038000e001800042076007700066000018fd001e18300000030000018003b801c001800000c0cc000060001c00700066000018fe00090661818000e007000660fe0006018000e001800042076007700066000018fd001e18300000030000018003b801c001800000c0cc000060001c00700066000018fe00090661818000e007000660fe0006018000e0018000434160077000663c7c183e3c3c003e3e1e3e03071f0f8003b801c001838f87c0ec78ccf8001c007000663c7c183e3c3c0661818000e007000603e7c3c3c18000e0018000434160077000663c7c183e3c3c003e3e1e3e03071f0f8003b801c001838f87c0ec78ccf8001c007000663c7c183e3c3c0661818000e007000603e7c3c3c18000e00180004307600770007c666618fe66010018fe331a03c319998003b801c001e18cccc0fccc7860001c0070007c666618fe66090661818000e007000606fe6606618000e00180004307600770007c666618fe66010018fe331a03c319998003b801c001e18cccc0fccc7860001c0070007c666618fe66090661818000e007000606fe6606618000e00180004341600770006c7e661866607e0018333f33030319998003b801c001818cccc0dcfc3060001c0070006c7e661866607e07e1818000e007000606666607e18000e00180004341600770006c7e661866607e0018333f33030319998003b801c001818cccc0dcfc3060001c0070006c7e661866607e07e1818000e007000606666607e18000e001800042366007700066606618666660001b333033030319998003b801c001818cccc0ccc0786c001c007000666066186666600661818000e0070006fd6606018000e001800042366007700066606618666660001b333033030319998003b801c001818cccc0ccc0786c001c007000666066186666600661818000e0070006fd6606018000e0018000434160077000663c7c3c3e3c3c300e331e330307998f8003b801c00183ccc7c0c478cc38001c007000663c7c3c3e3c3c0663c3c000e0070003c3e663c3c3c000e0018000434160077000663c7c3c3e3c3c300e331e330307998f8003b801c00183ccc7c0c478cc38001c007000663c7c3c3e3c3c0663c3c000e0070003c3e663c3c3c000e00180002902600770fe000060fd000060f8000303b801c0f700021c0070fe000060f80001e007f80003e001800098004200bc000000d2020800bc000000d2020200bc000000d2020200012902600770fe000060fd000060f8000303b801c0f700021c0070fe000060f80001e007f80003e001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f8000180000e0260001fef00003ed800020180000e0260001fef00003ed800020180000e02600000efff00c0d800020180000e02600000efff00c0d80002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c3000201800007007fc2ff01800007007fc2ff01800002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 find command}}}{\hich\af4\dbch\af4\loch\f4 To use the Replace command, you enter a search string exactly as yo\hich\af4\dbch\af4\loch\f4 u would with the Find command.  In fact, if you have already used the Find command, the search string you had entered will appear in the Replace window, and the state of the check boxes will also be the same.  Enter a replacement string in the Replace: bo\hich\af4\dbch\af4\loch\f4 x\hich\af4\dbch\af4\loch\f4 .  You can move to this box with the cursor or with the tab key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab key}}}{\hich\af4\dbch\af4\loch\f4 .  Set the options you want with the check boxes.\par \hich\af4\dbch\af4\loch\f4 If you would like to replace all occurrences of the search string with the replacement string, you can click on the Replace All\hich\af4\dbch\af4\loch\f4  button.  To examine the target strings before deciding whether to replace them, use the Find Next button.  If you decide that you do want to change the current target string, then click the Replace, then Find button.  This button will also cause the sear\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 h to continue after replacement. \par \hich\af4\dbch\af4\loch\f4 After you have found and/or replaced a string, you might want to continue editing your document.  To return to your document window, you must either close the Replace window or bring your program window to front.  To use t\hich\af4\dbch\af4\loch\f4 he Replace command again, you can make it the active window by clicking anywhere on the Replace window (assuming this window is visible), or you can reissue the Replace command. \par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318193}\hich\af4\dbch\af4\loch\f4 Replace Same{\*\bkmkend _Toc495318193}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 replace same command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 replace command}}}{\hich\af4\dbch\af4\loch\f4 Once you\hich\af4\dbch\af4\loch\f4  have entered Find and Replace strings with the Replace command, you can use the Replace Same command to replace a single occurrence of the target string.  The Replace Same command is equivalent to the Replace then Find button in the Replace dialog.  This\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 avoids use of the Replace window, and allows you to replace strings with a single keystroke (this command's keyboard equivalent is }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 T).  In conjunction with the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 G keyboard equivalent for Find, you can quickly scan through a program, replacing any occurren\hich\af4\dbch\af4\loch\f4 ces of a string.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318194}\hich\af4\dbch\af4\loch\f4 Goto{\*\bkmkend _Toc495318194}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 goto command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line numbers}}}{\hich\af4\dbch\af4\loch\f4 The Goto command lets you move to any line in the open file by specifying a line number.  The line number is entered as a decimal value in the Goto window's line-edit box.  Clicking on the \hich\af4\dbch\af4\loch\f4 Goto button causes the desired line to appear at the top of the window, with the insertion point}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4  changed to the beginning of this line.  The Cancel button just causes the Goto window to vanish.\par \hich\af4\dbch\af4\loch\f4 Goto is very useful when you are looki\hich\af4\dbch\af4\loch\f4 ng through a list of errors written to the shell window by a compiler or assembler.  Most of these listings show line numbers along with the line where the error occurred.{\*\bkmkend findMenu}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 find menu}{\rxe findMenu}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318195}\hich\af4\dbch\af4\loch\f4 The Extras Menu{\*\bkmkend _Toc495318195}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart extrasMenu}{\shp{\*\shpinst\shpleft5904\shptop139\shpright7924\shpbottom2859\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz11\shplid1040{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw101\pich136\picwgoal2020\pichgoal2720\macpict\bliptag1648600533\blipupi72{\*\blipuid 6243a5d5dc5932add84d52b0d3f95744}10180000000000880065001102ff0c00ffffffff000000000000000000650000008800000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff02a901fa00a0008200a0008e001e0001000a00000000008800650098001a00000000007a00d000000000007a00c900000000003d0065000102e70008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0009017c1ffdff00feee0009017c1ffdff00feee000a027cfffcfeff00feee000a027cfffcfeff00feee000a067cf9983938387eee000a067cf9983938387eee000a067c3c3cf8f333feee000a067c3c3cf8f333feee000a067cfe7cf9f3387eee000a067cfe7cf9f3387eee000a067cfc3c99f33f3eee000a067cfc3c99f33f3eee000a067c199e39f8387eee000a067c199e39f8387eee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0007007feaff01fc0007007feaff01fc00070060ea00011c00070060ea00011c00070060ea00011c00070060ea00011c00120960014101010001000050f5000304041c00120960014101010001000050f5000304041c00130a6002220002080080008080f6000308081f80130a6002220002080080008080f6000308081f80130a6001014105150100515140f6000314101f80130a6001014105150100515140f6000314101f80130a6000a22082080080888080f6000302201f80130a6000a22082080080888080f6000302201f80120960001111040401015041f5000340101f80120960001111040401015041f5000340101f801205600222208208fd8000a0f600030a081f801205600222208208fd8000a0f600030a081f80130a6001411144050150504040f6000314041f80130a6001411144050150504040f6000314041f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80120960014101010001504004f5000304101f80120960014101010001504004f5000304101f80130a6002220002080088000202f6000308081f80130a6002220002080088000202f6000308081f80140b600101410515011141454540f7000314041f80140b600101410515011141454540f7000314041f80130a6000a220820800a0822222f6000302021f80130a6000a220820800a0822222f6000302021f80130a6000111104040110444441f6000340041f80130a6000111104040110444441f6000340041f80140b600222208208808882a22220f700030a081f80140b600222208208808882a22220f700030a081f80140b600141114405011144444140f7000314101f80140b600141114405011144444140f7000314101f800c0060fa00010280f300011f800c0060fa00010280f300011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8018046003e001c0fc000703e00060001c0c06fd00030c331f8018046003e001c0fc000703e00060001c0c06fd00030c331f80191060033000c001800018000300006000300cfc000308331f80191060033000c001800018000300006000300cfc000308331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b1960033330c3318330183303c6666066300c0633330000431e1f801b1960033330c3318330183303c6666066300c0633330000431e1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f801007600030018000c060f300030c031f801007600030018000c060f300030c031f800f02600030fe0000c0f2000308031f800f02600030fe0000c0f2000308031f80130a600031e38f80c0e3e1e1e0f6000336031f80130a600031e38f80c0e3e1e1e0f6000336031f801209600033318cc0c0633333f5000343031f801209600033318cc0c0633333f5000343031f80130a600033318cc0c06333f1e0f6000342031f80130a600033318cc0c06333f1e0f6000342031f80130a600333318cc0c063330030f600034b331f80130a600333318cc0c063330030f600034b331f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80000098001a007a000000f400d0007a000000f400c9003d0000007a00650001070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8010026001e0fc00016030f500030c1e1f8010026001e0fc00016030f500030c1e1f8011026000c0fe0002030060f40003080c1f8011026000c0fe0002030060f40003080c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3330333830060319998f70003430c1f80140b6000c3330333830060319998f70003430c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c3303303036060319980f700034b0c1f80140b6000c3303303036060319980f700034b0c1f80140b6001e331e1e301c07e7998f0f70003361e1f80140b6001e331e1e301c07e7998f0f70003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8012046003e001c0fe00013018f500030c3e1f8012046003e001c0fe00013018f500030c3e1f80110860033000c001800030f4000308331f80110860033000c001800030f4000308331f80140b600331e0c1e3e1e03038f878f7000336331f80140b600331e0c1e3e1e03038f878f7000336331f80140b60033330c33183303018ccccf70003433e1f80140b60033330c33183303018ccccf70003433e1f80140b600333f0c3f183f03018ccfcf7000342331f80140b600333f0c3f183f03018ccfcf7000342331f80140b60033300c301b3003018ccc0f700034b331f80140b60033300c301b3003018ccc0f700034b331f8014016003fee106e0e1e03f3ccc78f70003363e1f8014016003fee106e0e1e03f3ccc78f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e0fe00021e0003f200011f800f026001e0fe00021e0003f200011f80120b6003300180000c0003000018f500011f80120b6003300180000c0003000018f500011f80120b60033333e1e00c3e1f1e3e3ef500011f80120b60033333e1e00c3e1f1e3e3ef500011f8011066003333183300cfd330018f500011f8011066003333183300cfd330018f500011f80120b6003f33183300c33333f3318f500011f80120b6003f33183300c33333f3318f500011f80120b60033331b3300c333330331bf500011f80120b60033331b3300c333330331bf500011f80120b600331f0e1e01e331f1e330ef500011f80120b600331f0e1e01e331f1e330ef500011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8013026001e0fe00041e00003180f600030c3e1f8013026001e0fe00041e00003180f600030c3e1f801302600330fe00043318000180f6000308301f801302600330fe00043318000180f6000308301f80140b60033318f1b0303e367198f0f7000336301f80140b60033318f1b0303e367198f0f7000336301f80140b6003331999c01e183831b198f70003433c1f80140b6003331999c01e183831b198f70003433c1f80140b600331b1f98003183031e1f8f7000342301f80140b600331b1f98003183031e1f8f7000342301f80140b600331b18180331b3031b180f700034b301f80140b600331b18180331b3031b180f700034b301f80140b6001e0e0f1801e0e307998f0f70003363e1f80140b6001e0e0f1801e0e307998f0f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e3fe00021f000ef200011f800f026001e3fe00021f000ef200011f800f02600333fe0002198006f200011f800f02600333fe0002198006f200011f80110a603303e1e6181999860f1bf400011f80110a603303e1e6181999860f1bf400011f80110a6061e33336d81f1986199cf400011f80110a6061e33336d81f1986199cf400011f80110a64c0333336d81b19861f98f400011f80110a64c0333336d81b19861f98f400011f8011016383fe3305301999861818f400011f8011016383fe3305301999861818f400011f80110a6101e331e330198f8f0f18f400011f80110a6101e331e330198f8f0f18f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800098001a00f40000010f00d000f40000010f00c9007a0000008800650001070060ea00011f80070060ea00011f80070060ea00011f800e026001e0fe000101e0f100011f800e026001e0fe000101e0f100011f800e076003300180000330f100011f800e076003300180000330f100011f80110a60033333e1e00301f318f0f400011f80110a60033333e1e00301f318f0f400011f80110a600333318333f1e3331998f400011f80110a600333318333f1e3331998f400011f80110a6003f3318330003331b1f8f400011f80110a6003f3318330003331b1f8f400011f80110a60033331b330033331b180f400011f80110a60033331b330033331b180f400011f80110a600331f0e1e001e1f0e0f0f400011f80110a600331f0e1e001e1f0e0f0f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080060001e9ff0080060001e9ff008000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx5903\posy138\absh2720\absw2020\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw101\pich136\picwgoal2020\pichgoal2720\macpict\bliptag1648600533\blipupi72{\*\blipuid 6243a5d5dc5932add84d52b0d3f95744}10180000000000880065001102ff0c00ffffffff000000000000000000650000008800000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff02a901fa00a0008200a0008e001e0001000a00000000008800650098001a00000000007a00d000000000007a00c900000000003d0065000102e70008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0009017c1ffdff00feee0009017c1ffdff00feee000a027cfffcfeff00feee000a027cfffcfeff00feee000a067cf9983938387eee000a067cf9983938387eee000a067c3c3cf8f333feee000a067c3c3cf8f333feee000a067cfe7cf9f3387eee000a067cfe7cf9f3387eee000a067cfc3c99f33f3eee000a067cfc3c99f33f3eee000a067c199e39f8387eee000a067c199e39f8387eee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0007007feaff01fc0007007feaff01fc00070060ea00011c00070060ea00011c00070060ea00011c00070060ea00011c00120960014101010001000050f5000304041c00120960014101010001000050f5000304041c00130a6002220002080080008080f6000308081f80130a6002220002080080008080f6000308081f80130a6001014105150100515140f6000314101f80130a6001014105150100515140f6000314101f80130a6000a22082080080888080f6000302201f80130a6000a22082080080888080f6000302201f80120960001111040401015041f5000340101f80120960001111040401015041f5000340101f801205600222208208fd8000a0f600030a081f801205600222208208fd8000a0f600030a081f80130a6001411144050150504040f6000314041f80130a6001411144050150504040f6000314041f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80120960014101010001504004f5000304101f80120960014101010001504004f5000304101f80130a6002220002080088000202f6000308081f80130a6002220002080088000202f6000308081f80140b600101410515011141454540f7000314041f80140b600101410515011141454540f7000314041f80130a6000a220820800a0822222f6000302021f80130a6000a220820800a0822222f6000302021f80130a6000111104040110444441f6000340041f80130a6000111104040110444441f6000340041f80140b600222208208808882a22220f700030a081f80140b600222208208808882a22220f700030a081f80140b600141114405011144444140f7000314101f80140b600141114405011144444140f7000314101f800c0060fa00010280f300011f800c0060fa00010280f300011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8018046003e001c0fc000703e00060001c0c06fd00030c331f8018046003e001c0fc000703e00060001c0c06fd00030c331f80191060033000c001800018000300006000300cfc000308331f80191060033000c001800018000300006000300cfc000308331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b1960033330c3318330183303c6666066300c0633330000431e1f801b1960033330c3318330183303c6666066300c0633330000431e1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f801007600030018000c060f300030c031f801007600030018000c060f300030c031f800f02600030fe0000c0f2000308031f800f02600030fe0000c0f2000308031f80130a600031e38f80c0e3e1e1e0f6000336031f80130a600031e38f80c0e3e1e1e0f6000336031f801209600033318cc0c0633333f5000343031f801209600033318cc0c0633333f5000343031f80130a600033318cc0c06333f1e0f6000342031f80130a600033318cc0c06333f1e0f6000342031f80130a600333318cc0c063330030f600034b331f80130a600333318cc0c063330030f600034b331f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80000098001a007a000000f400d0007a000000f400c9003d0000007a00650001070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8010026001e0fc00016030f500030c1e1f8010026001e0fc00016030f500030c1e1f8011026000c0fe0002030060f40003080c1f8011026000c0fe0002030060f40003080c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3330333830060319998f70003430c1f80140b6000c3330333830060319998f70003430c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c3303303036060319980f700034b0c1f80140b6000c3303303036060319980f700034b0c1f80140b6001e331e1e301c07e7998f0f70003361e1f80140b6001e331e1e301c07e7998f0f70003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8012046003e001c0fe00013018f500030c3e1f8012046003e001c0fe00013018f500030c3e1f80110860033000c001800030f4000308331f80110860033000c001800030f4000308331f80140b600331e0c1e3e1e03038f878f7000336331f80140b600331e0c1e3e1e03038f878f7000336331f80140b60033330c33183303018ccccf70003433e1f80140b60033330c33183303018ccccf70003433e1f80140b600333f0c3f183f03018ccfcf7000342331f80140b600333f0c3f183f03018ccfcf7000342331f80140b60033300c301b3003018ccc0f700034b331f80140b60033300c301b3003018ccc0f700034b331f8014016003fee106e0e1e03f3ccc78f70003363e1f8014016003fee106e0e1e03f3ccc78f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e0fe00021e0003f200011f800f026001e0fe00021e0003f200011f80120b6003300180000c0003000018f500011f80120b6003300180000c0003000018f500011f80120b60033333e1e00c3e1f1e3e3ef500011f80120b60033333e1e00c3e1f1e3e3ef500011f8011066003333183300cfd330018f500011f8011066003333183300cfd330018f500011f80120b6003f33183300c33333f3318f500011f80120b6003f33183300c33333f3318f500011f80120b60033331b3300c333330331bf500011f80120b60033331b3300c333330331bf500011f80120b600331f0e1e01e331f1e330ef500011f80120b600331f0e1e01e331f1e330ef500011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8013026001e0fe00041e00003180f600030c3e1f8013026001e0fe00041e00003180f600030c3e1f801302600330fe00043318000180f6000308301f801302600330fe00043318000180f6000308301f80140b60033318f1b0303e367198f0f7000336301f80140b60033318f1b0303e367198f0f7000336301f80140b6003331999c01e183831b198f70003433c1f80140b6003331999c01e183831b198f70003433c1f80140b600331b1f98003183031e1f8f7000342301f80140b600331b1f98003183031e1f8f7000342301f80140b600331b18180331b3031b180f700034b301f80140b600331b18180331b3031b180f700034b301f80140b6001e0e0f1801e0e307998f0f70003363e1f80140b6001e0e0f1801e0e307998f0f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e3fe00021f000ef200011f800f026001e3fe00021f000ef200011f800f02600333fe0002198006f200011f800f02600333fe0002198006f200011f80110a603303e1e6181999860f1bf400011f80110a603303e1e6181999860f1bf400011f80110a6061e33336d81f1986199cf400011f80110a6061e33336d81f1986199cf400011f80110a64c0333336d81b19861f98f400011f80110a64c0333336d81b19861f98f400011f8011016383fe3305301999861818f400011f8011016383fe3305301999861818f400011f80110a6101e331e330198f8f0f18f400011f80110a6101e331e330198f8f0f18f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800098001a00f40000010f00d000f40000010f00c9007a0000008800650001070060ea00011f80070060ea00011f80070060ea00011f800e026001e0fe000101e0f100011f800e026001e0fe000101e0f100011f800e076003300180000330f100011f800e076003300180000330f100011f80110a60033333e1e00301f318f0f400011f80110a60033333e1e00301f318f0f400011f80110a600333318333f1e3331998f400011f80110a600333318333f1e3331998f400011f80110a6003f3318330003331b1f8f400011f80110a6003f3318330003331b1f8f400011f80110a60033331b330033331b180f400011f80110a60033331b330033331b180f400011f80110a600331f0e1e001e1f0e0f0f400011f80110a600331f0e1e001e1f0e0f0f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080060001e9ff0080060001e9ff008000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\hich\af4\dbch\af4\loch\f4 The Extras menu has several edit\hich\af4\dbch\af4\loch\f4 ing commands not found in the standard Edit menu.  These commands allow you to shift blocks of text from a block-structured program to the left and right, perform several complex editing operations (like deleting all characters from the cursor to the end \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 f the line), and set several editing options.\par \hich\af4\dbch\af4\loch\f4 The Extras menu does not appear on the menu bar}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4  unless there is a file open on the desktop.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318196}\hich\af4\dbch\af4\loch\f4 Shift Left{\*\bkmkend _Toc495318196}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shift left command\bxe }}}{\hich\af4\dbch\af4\loch\f4 When you are programming in a block-structured language, lik\hich\af4\dbch\af4\loch\f4 e C}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 C}}}{\hich\af4\dbch\af4\loch\f4  or Pascal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}}}{\hich\af4\dbch\af4\loch\f4 , indentation is usually used to show the structure of the program at a glance.  If the structure changes, you may want to change the indentation of large blocks of text.  The Shift Left command, along with the Shift R\hich\af4\dbch\af4\loch\f4 ight command described below, can help.\par \hich\af4\dbch\af4\loch\f4 The Shift Left command is only available if you have selected some text.  Regardless of whether you selected entire lines or not, the Shift Left command works on whole lines, not on characters.  It scans all of the l\hich\af4\dbch\af4\loch\f4 ines that have at least one character selected, and deletes one space from the beginning of the line.  The effect is to move a block of selected text left by one column.  Only spaces are deleted \endash  if a line has already been shifted as far to the left as p\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ssible, it is left untouched.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318197}\hich\af4\dbch\af4\loch\f4 Shift Right{\*\bkmkend _Toc495318197}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shift right command\bxe }}}{\hich\af4\dbch\af4\loch\f4 Like the Shift Left command, described above, Shift Right is used to move blocks of text.  The Shift Right command is only available if you have selected some text.  All of the lines \hich\af4\dbch\af4\loch\f4 in the file that have at least one character selected are moved to the right by inserting a space before the first character in the line.\par \hich\af4\dbch\af4\loch\f4 If any of the lines are 255 characters long before this command is used, the last character on each of the long lines \hich\af4\dbch\af4\loch\f4 will be lost.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318198}\hich\af4\dbch\af4\loch\f4 Delete to End of Line{\*\bkmkend _Toc495318198}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If any text is selected, it is cleared from the file.  Next, all of the characters from the insertion point to the end of the line are deleted.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 delete to end of line command\bxe }}}{\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318199}\hich\af4\dbch\af4\loch\f4 Join Lines{\*\bkmkend _Toc495318199}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 join lines command\bxe }}}{\hich\af4\dbch\af4\loch\f4 If any text is selected, it is cleared from the file.  The line after the one the cursor is on is then removed from the file, and appended to the end of the line containing the cursor.  The insertion point is placed between the two joined lines.\par \hich\af4\dbch\af4\loch\f4 If t\hich\af4\dbch\af4\loch\f4 he combined line has more than 255 characters, all of the characters past the 255th character are lost.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318200}\hich\af4\dbch\af4\loch\f4 Insert Line{\*\bkmkend _Toc495318200}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert line command\bxe }}}{\hich\af4\dbch\af4\loch\f4 If any text has been selected, it is cleared.  Next, a new, blank line is inserted in the file beneath the li\hich\af4\dbch\af4\loch\f4 ne containing the current insertion point.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318201}\hich\af4\dbch\af4\loch\f4 Delete Line{\*\bkmkend _Toc495318201}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 delete line command\bxe }}}{\hich\af4\dbch\af4\loch\f4 If any text has been selected, it is cleared.  Next, the line containing the current insertion point is deleted from the file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318202}\hich\af4\dbch\af4\loch\f4 Auto Indent{\*\bkmkend _Toc495318202}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 auto indent command\bxe }}}{\hich\af4\dbch\af4\loch\f4 When you are writing programs in a block-structured language, like C}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 C}}}{\hich\af4\dbch\af4\loch\f4  or Pascal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}}}{\hich\af4\dbch\af4\loch\f4 , indentation is often used to show program structure.  The Auto Indent option can help you indent your programs.\par \hich\af4\dbch\af4\loch\f4 If the auto indent mode has not been se\hich\af4\dbch\af4\loch\f4 lected, pressing the return key}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return key}}}{\hich\af4\dbch\af4\loch\f4  causes the insertion point to move to the beginning of the next line.  If you are in over strike mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike mode}}}{\hich\af4\dbch\af4\loch\f4 , hitting the return key will not affect the current line; the insertion point \hich\af4\dbch\af4\loch\f4 simply moves to the start of the next line in the file.  If you are in insert mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 , the current line is split, and the cursor moves to the start of a new line.  This function is provided for assembly language and other line-oriented lan\hich\af4\dbch\af4\loch\f4 guages.\par \hich\af4\dbch\af4\loch\f4 When you select the Auto Indent option, the return key works a little differently.  Instead of moving to the first column of a line, it spaces over to match the current indentation.  If over strike has also been selected, the cursor moves to the fi\hich\af4\dbch\af4\loch\f4 rst non-blank character in the next line.  If the line is blank, the cursor is aligned with the first non-blank character in the line above.\par \hich\af4\dbch\af4\loch\f4 With the over strike option turned off, but with auto indent turned on, the cursor still moves so that it is under \hich\af4\dbch\af4\loch\f4 the first non-blank character in the line above.  If a line has been split, blanks are inserted to move the insertion point to the proper column.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318203}\hich\af4\dbch\af4\loch\f4 Over Strike{\*\bkmkend _Toc495318203}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insertion point}}}{\hich\af4\dbch\af4\loch\f4 The editor is capable of operating in one o\hich\af4\dbch\af4\loch\f4 f two modes, insert or over strike.  Insert mode is the most common mode for desktop programs, so it is the default mode.  In insert mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 , all characters typed are inserted into the window by first inserting a new space to the left of t\hich\af4\dbch\af4\loch\f4 he insertion point, then placing the new character in the space.\par \hich\af4\dbch\af4\loch\f4 Text-based editors generally use over strike mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike mode}}}{\hich\af4\dbch\af4\loch\f4 .  In over strike mode, any character typed replaces the character that the cursor is on.\par \hich\af4\dbch\af4\loch\f4 You can tell which mode you\hich\af4\dbch\af4\loch\f4  are in by pulling down the Extras menu.  If the over strike option has a check mark next to it, you are in the over strike mode.  If there is no check mark, you are in insert mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 .  You can also tell which mode you are in by looking at\hich\af4\dbch\af4\loch\f4  the insertion point.  If the insertion point marker is a flashing vertical bar, you are in the insert mode.  If it is a flashing horizontal line, you are in over strike mode.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318204}\hich\af4\dbch\af4\loch\f4 Show Ruler{\*\bkmkend _Toc495318204}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 show ruler command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ruler}}}{\hich\af4\dbch\af4\loch\f4 When you select the Show \hich\af4\dbch\af4\loch\f4 Ruler command, a ruler appears in an information bar at the top of the front window.  The ruler has markings which show the column numbers.  Below these, any tab stops}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab stop}}}{\hich\af4\dbch\af4\loch\f4  appear as inverted triangles.  Selecting Show Ruler a second time will \hich\af4\dbch\af4\loch\f4 remove the ruler display.\par \hich\af4\dbch\af4\loch\f4 The description of the ruler, earlier in this chapter, gives more details on how to use the ruler once it is visible.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318205}\hich\af4\dbch\af4\loch\f4 Auto Save{\*\bkmkend _Toc495318205}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 auto save command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Auto Save option is a safety measure.  If you execute a program, and \hich\af4\dbch\af4\loch\f4 the program crashes, you cannot return to the desktop to save your files.  Any changes that have been made to the files since the last time they were saved to the disk are lost.\par \hich\af4\dbch\af4\loch\f4 The Auto Save command can prevent this kind of catastrophe.  Before executing \hich\af4\dbch\af4\loch\f4 any program, any file on the desktop that has been changed is saved to disk.  This takes time \endash  with floppy disks, the time can be considerable.  For that reason, this feature is an option.  Whether you select it or not should depend on how often you save\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 your files, and how likely you think it is that your program will crash.\par \hich\af4\dbch\af4\loch\f4 Keep in mind that what we mean by a crash is a catastrophic failure, where you actually end up in the monitor, or where you have to reset the computer.  Normal run-time errors in comp\hich\af4\dbch\af4\loch\f4 iled programs are trapped.  These present you with an error message, but do not endanger any files on the desktop.\par \hich\af4\dbch\af4\loch\f4 One other note of caution.  Saving your files to a RAM}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RAM disks}}}{\hich\af4\dbch\af4\loch\f4  disk provides very little protection from a nasty crash.  Often, a c\hich\af4\dbch\af4\loch\f4 rash is due to a program writing to memory that it has not reserved.  This kind of bug is very common in programs that use the toolbox or that make use of C's malloc and free functions.  It can also happen if you are using arrays and index past the end of\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the array.  If a program is doing this, your RAM disks}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RAM disks}}}{\hich\af4\dbch\af4\loch\f4  is no safer than files on the desktop.  If you want to be sure that your files will not be lost, save them to a floppy disk or hard disk.{\*\bkmkend extrasMenu}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extras menu}{\rxe extrasMenu}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318206}\hich\af4\dbch\af4\loch\f4 The Ru\hich\af4\dbch\af4\loch\f4 n Menu{\*\bkmkend _Toc495318206}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart runMenu}{\shp{\*\shpinst\shpleft6048\shptop36\shpright7848\shpbottom2036\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz12\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw90\pich100\picwgoal1800\pichgoal2000\macpict\bliptag-151698223\blipupi72{\*\blipuid f6f544d19b7ef22dc2acd2f0353267cb}0bc2000000000064005a001102ff0c00ffffffff0000000000000000005a0000006400000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff01f501c300a0008200a0008e001e0001000a000000000064005a009800180000000000c800b80000000000c800b7000000000064005a000102e90008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0009017fc1feff0080ef0009017fc1feff0080ef0009017fccfeff0080ef0009017fccfeff0080ef0009057fccccc1ff80ef0009057fccccc1ff80ef0009057fc1ccccff80ef0009057fc1ccccff80ef0009057fc9ccccff80ef0009057fc9ccccff80ef0009007ffecc01ff80ef0009007ffecc01ff80ef0009057fcce0ccff80ef0009057fcce0ccff80ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0007007fecff01c00007007fecff01c000070060ec0001c000070060ec0001c000070060ec0001c000070060ec0001c000140260003cfe00011870fd000082fa00036104fc00140260003cfe00011870fd000082fa00036104fc001402600066fd00053000060000c6fa0003418cfc001402600066fd00053000060000c6fa0003418cfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc000f0060fd000030f600003cfd0001fc000f0060fd000030f600003cfd0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00160260003cfe00011870fd0002f86003fc0003618cfc00160260003cfe00011870fd0002f86003fc0003618cfc001602600066fd00073000060000cc0003fc00034198fc001602600066fd00073000060000cc0003fc00034198fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00140b60003c6000006001c00001f0f900036180fc00140b60003c6000006001c00001f0f900036180fc00140b600066600000600300000180f900034180fc00140b600066600000600300000180f900034180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc001902600060fe66096c030cce01e3870cce18fe0004021980fc001902600060fe66096c030cce01e3870cce18fe0004021980fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc0019176000666660666c030ccc0183060ccc01800000025980fc0019176000666660666c030ccc0183060ccc01800000025980fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000e0260003cfe00011870f30001fc000e0260003cfe00011870f30001fc000d02600066fd000030f30001fc000d02600066fd000030f30001fc000f086000603cfe3e383078f40001fc000f086000603cfe3e383078f40001fc000f0860006066db331830ccf40001fc000f0860006066db331830ccf40001fc000f0860006066db331830fcf40001fc000f0860006066db331830fcf40001fc000f0860006666db331830c0f40001fc000f0860006666db331830c0f40001fc00110a60003c3cdb3e3c7878ccc0f60001fc00110a60003c3cdb3e3c7878ccc0f60001fc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000c05600060300180f10001fc000c05600060300180f10001fc000c05600060000180f10001fc000c05600060000180f10001fc000c0560006071f198f10001fc000c0560006071f198f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000c056000603199e0f10001fc000c056000603199e0f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000e0360007e79fe990080f30001fc000e0360007e79fe990080f30001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00090260007cee0001fc00090260007cee0001fc000d02600060fd000060f30001fc000d02600060fd000060f30001fc000f08600060cc7878ccf878f40001fc000f08600060cc7878ccf878f40001fc000f0360007878fecc0160ccf40001fc000f0360007878fecc0160ccf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006078c0cccc6cc0f40001fc000f0860006078c0cccc6cc0f40001fc00110a60007ccc78787c3878ccc0f60001fc00110a60007ccc78787c3878ccc0f60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00100260007cfb000307800006f80001fc00100260007cfb000307800006f80001fc001102600060fd000460000cc006f70001fc001102600060fd000460000cc006f70001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc000b0060f800000cf60001fc000b0060f800000cf60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070003ecff01fc00070003ecff01fc0002e90000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx6047\posy35\absh2000\absw1800\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw90\pich100\picwgoal1800\pichgoal2000\macpict\bliptag-151698223\blipupi72{\*\blipuid f6f544d19b7ef22dc2acd2f0353267cb}0bc2000000000064005a001102ff0c00ffffffff0000000000000000005a0000006400000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff01f501c300a0008200a0008e001e0001000a000000000064005a009800180000000000c800b80000000000c800b7000000000064005a000102e90008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0009017fc1feff0080ef0009017fc1feff0080ef0009017fccfeff0080ef0009017fccfeff0080ef0009057fccccc1ff80ef0009057fccccc1ff80ef0009057fc1ccccff80ef0009057fc1ccccff80ef0009057fc9ccccff80ef0009057fc9ccccff80ef0009007ffecc01ff80ef0009007ffecc01ff80ef0009057fcce0ccff80ef0009057fcce0ccff80ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0007007fecff01c00007007fecff01c000070060ec0001c000070060ec0001c000070060ec0001c000070060ec0001c000140260003cfe00011870fd000082fa00036104fc00140260003cfe00011870fd000082fa00036104fc001402600066fd00053000060000c6fa0003418cfc001402600066fd00053000060000c6fa0003418cfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc000f0060fd000030f600003cfd0001fc000f0060fd000030f600003cfd0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00160260003cfe00011870fd0002f86003fc0003618cfc00160260003cfe00011870fd0002f86003fc0003618cfc001602600066fd00073000060000cc0003fc00034198fc001602600066fd00073000060000cc0003fc00034198fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00140b60003c6000006001c00001f0f900036180fc00140b60003c6000006001c00001f0f900036180fc00140b600066600000600300000180f900034180fc00140b600066600000600300000180f900034180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc001902600060fe66096c030cce01e3870cce18fe0004021980fc001902600060fe66096c030cce01e3870cce18fe0004021980fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc0019176000666660666c030ccc0183060ccc01800000025980fc0019176000666660666c030ccc0183060ccc01800000025980fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000e0260003cfe00011870f30001fc000e0260003cfe00011870f30001fc000d02600066fd000030f30001fc000d02600066fd000030f30001fc000f086000603cfe3e383078f40001fc000f086000603cfe3e383078f40001fc000f0860006066db331830ccf40001fc000f0860006066db331830ccf40001fc000f0860006066db331830fcf40001fc000f0860006066db331830fcf40001fc000f0860006666db331830c0f40001fc000f0860006666db331830c0f40001fc00110a60003c3cdb3e3c7878ccc0f60001fc00110a60003c3cdb3e3c7878ccc0f60001fc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000c05600060300180f10001fc000c05600060300180f10001fc000c05600060000180f10001fc000c05600060000180f10001fc000c0560006071f198f10001fc000c0560006071f198f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000c056000603199e0f10001fc000c056000603199e0f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000e0360007e79fe990080f30001fc000e0360007e79fe990080f30001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00090260007cee0001fc00090260007cee0001fc000d02600060fd000060f30001fc000d02600060fd000060f30001fc000f08600060cc7878ccf878f40001fc000f08600060cc7878ccf878f40001fc000f0360007878fecc0160ccf40001fc000f0360007878fecc0160ccf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006078c0cccc6cc0f40001fc000f0860006078c0cccc6cc0f40001fc00110a60007ccc78787c3878ccc0f60001fc00110a60007ccc78787c3878ccc0f60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00100260007cfb000307800006f80001fc00100260007cfb000307800006f80001fc001102600060fd000460000cc006f70001fc001102600060fd000460000cc006f70001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc000b0060f800000cf60001fc000b0060f800000cf60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070003ecff01fc00070003ecff01fc0002e90000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\hich\af4\dbch\af4\loch\f4 The Run menu contains the commands that allow you to compile a program.  There are a variety of ways to compile a program, reflecting options suited to different sizes of programs and differing personal taste.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318207}\hich\af4\dbch\af4\loch\f4 Compile to Memory{\*\bkmkend _Toc495318207}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to mem\hich\af4\dbch\af4\loch\f4 ory command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The Compile To Memory command compiles, links and executes the program in the front window.  Object modules are not saved to disk, but the executable file is written to disk.  This command will probably be the one you \hich\af4\dbch\af4\loch\f4 will use most to compile your programs \endash  it gives the fastest turn-around time since writing the object modules to disk is avoided.  \par \hich\af4\dbch\af4\loch\f4 You should not use this command if your program is split across multiple source files, and you need the object modules to \hich\af4\dbch\af4\loch\f4 combine with other }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 object files to form the final executable file.  (This is called separate compilation.)  You should also not use this option if your program is made up of more than one language.  For example, if you use the append d\hich\af4\dbch\af4\loch\f4 irective to append an assembly language file to the end of a C program, do not use this command to compile the program.  In either of these cases, use Compile to Disk.\par \hich\af4\dbch\af4\loch\f4 There are some compilers that do not support Compile to Memory.  In these cases, you mus\hich\af4\dbch\af4\loch\f4 t use the Compile to Disk command, or you will get linker errors.  ORCA/C supports Compile to Memory.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file menu}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 languages menu}}}{\hich\af4\dbch\af4\loch\f4 Whenever you compile a program, information about the compilation is written to a special window called the shell}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4  window.  You can create this window yourself, by selecting New from the File menu and then giving it a language stamp of shell.  (See the description of the Languages menu below for more information about the language stamp.)  If you have no\hich\af4\dbch\af4\loch\f4 t created a shell window, the desktop will do so automatically when you compile a program for the first time.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318208}\hich\af4\dbch\af4\loch\f4 Compile to Disk{\*\bkmkend _Toc495318208}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to disk command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command compiles, links, and executes your program.  Unlike Compile to Memory, the program\hich\af4\dbch\af4\loch\f4 's object files are written to disk.  With that exception, it works just like the Compile To Memory command.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile to memory command}}}{\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 ORCA creates object files as a result of compiling or assembling source files; it creates ex\hich\af4\dbch\af4\loch\f4 ecutable files as the output from linking object files.  The number of object files created is typically two, while there is one executable module.  The first object file contains some compiler initialization code; ORCA attaches the suffix }{\i \hich\af4\dbch\af4\loch\f4 .root}{\hich\af4\dbch\af4\loch\f4  to the nam\hich\af4\dbch\af4\loch\f4 e it uses for this module.  The second object file contains the rest of the generated intermediate code; ORCA attaches the suffix .a to its name.  If any other object files are created, the next successive alphabetic character is appended to the file name\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 (i.e. .b, .c, ... , .z).  Multiple object modules could be created by performing some series of partial and/or separate compilations of various source files.  \par \hich\af4\dbch\af4\loch\f4 If your source file contains a keep directive, ORCA will use the keep name in creating the objec\hich\af4\dbch\af4\loch\f4 t and executable files associated with compiling your program.  For example, if your keep name is OUT, then the }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 object files will be named OUT.ROOT and OUT.A. \par \hich\af4\dbch\af4\loch\f4 For programs which do not use a keep directive, ORCA uses default names for\hich\af4\dbch\af4\loch\f4  the object and executable files created as a result of compiling and linking your program; the names are derived from the name of your source file.  If your source file's name contains a suffix (i.e. a period within the name, followed by one or more char\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 cters), then the system calls the first object file }{\i \hich\af4\dbch\af4\loch\f4 sourcefile.}{\hich\af4\dbch\af4\loch\f4 root, where }{\i \hich\af4\dbch\af4\loch\f4 sourcefile}{\hich\af4\dbch\af4\loch\f4  is the name of your source file, with the suffix stripped.  The second object file is named }{\i \hich\af4\dbch\af4\loch\f4 sourcefile}{\hich\af4\dbch\af4\loch\f4 .a.  The executable file is named }{\i \hich\af4\dbch\af4\loch\f4 sourcefile}{\hich\af4\dbch\af4\loch\f4 .  If your source file's\hich\af4\dbch\af4\loch\f4  name does not contain a suffix, then ORCA appends the four-character suffix .}{\i \hich\af4\dbch\af4\loch\f4 obj}{\hich\af4\dbch\af4\loch\f4  to the output files.  The first object file will have .}{\i \hich\af4\dbch\af4\loch\f4 root}{\hich\af4\dbch\af4\loch\f4  appended to the .}{\i \hich\af4\dbch\af4\loch\f4 obj}{\hich\af4\dbch\af4\loch\f4 , and the second will have .}{\i \hich\af4\dbch\af4\loch\f4 a }{\hich\af4\dbch\af4\loch\f4 appended to the .}{\i \hich\af4\dbch\af4\loch\f4 obj}{\hich\af4\dbch\af4\loch\f4 .  For example, if your source file was name\hich\af4\dbch\af4\loch\f4 d FILE1, then the object files would be named FILE1.OBJ.ROOT and FILE1.OBJ.A, while the executable file would be called FILE1.OBJ.\par \hich\af4\dbch\af4\loch\f4 A word of caution:  using the ProDOS FST, GS/OS restricts file names to 15 characters.  If you will be using the default name\hich\af4\dbch\af4\loch\f4 s assigned by the desktop, you need to ensure that your source file's name is not too long when the suffixes are attached to form the object and executable files' names.\par \hich\af4\dbch\af4\loch\f4 Programmers typically assign suffixes to their file names to remind them of the file's\hich\af4\dbch\af4\loch\f4  language type.  We recommend the following suffixes:\par \par }\pard\plain \s31\qj\li360\ri5040\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2160\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Language\tab Suffix\par }\pard\plain \s16\qj\fi360\ri5040\sl223\slmult1\widctlpar\tx2160\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Pascal}{\pard\plain \s16\qj\fi360\ri5040\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}}}{\tab \hich\af4\dbch\af4\loch\f4 .PAS\par \hich\af4\dbch\af4\loch\f4 assembly}{\pard\plain \s16\qj\fi360\ri5040\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language}}}{\tab \hich\af4\dbch\af4\loch\f4 .ASM\par \hich\af4\dbch\af4\loch\f4 BASIC}{\pard\plain \s16\qj\fi360\ri5040\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 BASIC}}}{\tab \hich\af4\dbch\af4\loch\f4 .BAS\par \hich\af4\dbch\af4\loch\f4 C}{\pard\plain \s16\qj\fi360\ri5040\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 C}}}{\tab \hich\af4\dbch\af4\loch\f4 .CC\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 We strongly recommend that you not use single-character suffixes, since thes\hich\af4\dbch\af4\loch\f4 e can interfere with partial compiles and multi-lingual compiles.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318209}\hich\af4\dbch\af4\loch\f4 Check for Errors{\*\bkmkend _Toc495318209}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 check for errors command}}}{\hich\af4\dbch\af4\loch\f4 The Check For Errors command compiles your program, but does not save the result of the compile.  This allows the compiler to scan your prog\hich\af4\dbch\af4\loch\f4 ram quickly for errors.  Most compilers can scan for errors about twice as fast as they can compile a program.  Once all errors have been removed, you can use one of the compile commands to compile the program.\par \hich\af4\dbch\af4\loch\f4 If you use a keep directive in your program, \hich\af4\dbch\af4\loch\f4 this command will compile your program instead of just scanning for errors.  To make effective use of this command, be sure to remove any keep directives.  Note that removal of keep directives allow you to use the automatic naming for object and executabl\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  files discussed above.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318210}\hich\af4\dbch\af4\loch\f4 Compile{\*\bkmkend _Toc495318210}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile command}}}{\hich\af4\dbch\af4\loch\f4 The purpose of this command is to set the default options for compilation, or to compile a program without linking.   Note that the options you choose affect all compile commands selected to compile t\hich\af4\dbch\af4\loch\f4 he front window.\par \hich\af4\dbch\af4\loch\f4 Below is a picture of the dialog box brought up by the Compile command.\par }\pard\plain \qj\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw512\pich330\picwgoal10240\pichgoal6600\macpict\bliptag1053564528\blipupi72{\*\blipuid 3ecc1e70ce59bdaec441964701b6389d}1cd300000000014a02001101a00082a0008e01000a00000000030802809800400000000000a002000000000000a002000000000000a00200000102c10006007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe14007fe9ff0087feff06cf1ffff0fffff3e6ff00fe14007fe9ff0087feff06cf1ffff0fffff3e6ff00fe12007fe9ff0033fdff049fffe67ff3e5ff00fe12007fe9ff0033fdff049fffe67ff3e5ff00fe17007fe9ff0d3f8603838f9f0fe660e0e3c383c3e9ff00fe17007fe9ff0d3f8603838f9f0fe660e0e3c383c3e9ff00fe17007fe9ff0d3f324999cf9e67e66673f399999fe9ff00fe17007fe9ff0d3f324999cf9e67e66673f399999fe9ff00fe17007fe9ff0d3f324999cf9e07e66673f39999c3e9ff00fe17007fe9ff0d3f324999cf9e07e66673f39999c3e9ff00fe17007fe9ff0d33324999cf9e7fe66672739999f9e9ff00fe17007fe9ff0d33324999cf9e7fe66672739999f9e9ff00fe17007fe9ff0d87864983870f0ff0e0f8e1c399c3e9ff00fe17007fe9ff0d87864983870f0ff0e0f8e1c399c3e9ff00fe0e007fe6ff009ffdff00e7e4ff00fe0e007fe6ff009ffdff00e7e4ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe060060c3000006060060c3000006060060c3000006060060c3000006060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060e0160f8f200010308d70002601f060e0160f8f200010308d70002601f06160360f801e0fc00027c61c0fc00010308d70002601f06160360f801e0fc00027c61c0fc00010308d70002601f06160360f80330fc00026000c0fc00010308d70002601f06160360f80330fc00026000c0fc00010308d70002601f06190c60f80301e33363c3c060e0c1e3fd00010308d70002601f06190c60f80301e33363c3c060e0c1e3fd00010308d70002601f06190c60f801e333338666607860c330fd00010308d70002601f06190c60f801e333338666607860c330fd00010308d70002601f06190260f800fe33060607e06060c3f0fd00010308d70002601f06190260f800fe33060607e06060c3f0fd00010308d70002601f06180260f803fe33050666006060c3fc00010308d70002601f06180260f803fe33050666006060c3fc00010308d70002601f06190c60f801e1e1f303c3c060f1e1e3fd00010308d70002601f06190c60f801e1e1f303c3c060f1e1e3fd00010308d70002601f060e0160f8f200010308d70002601f060e0160f8f200010308d70002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06140360f80318fe00011180f9000003d60002601f06140360f80318fe00011180f9000003d60002601f06140360f80330fe00011980f9000003d60002601f06140360f80330fe00011980f9000003d60002601f06170b60f80360f0f1f01d8fbf878cfc000003d60002601f06170b60f80360f0f1f01d8fbf878cfc000003d60002601f06170b60f803c19999981f99b6ccc0fc000003d60002601f06170b60f803c19999981f99b6ccc0fc000003d60002601f06170b60f80361f9f9981b99b6cfc0fc000003d60002601f06170b60f80361f9f9981b99b6cfc0fc000003d60002601f06160a60f803318181981999b6ccfb000003d60002601f06160a60f803318181981999b6ccfb000003d60002601f06170b60f80318f0f1f0188fb6c78cfc000003d60002601f06170b60f80318f0f1f0188fb6c78cfc000003d60002601f06120160f8fe00010180f7000003d60002601f06120160f8fe00010180f7000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06140460f801e003fd000003fa000003d60002601f06140460f801e003fd000003fa000003d60002601f06140460f8033003fe000003f9000003d60002601f06140460f8033003fe000003f9000003d60002601f06190d60f8030333e363c667c71f0f0f18fe000003d60002601f06190d60f8030333e363c667c71f0f0f18fe000003d60002601f06180c60f801e3333386666303199998fd000003d60002601f06180c60f801e3333386666303199998fd000003d60002601f06180260f800fe330606666303199f8ffd000003d60002601f06180260f800fe330606666303199f8ffd000003d60002601f06190260f803fe33070666636319980180fe000003d60002601f06190260f803fe33070666636319980180fe000003d60002601f06190d60f801e1f3e303c3e1c7998f0f18fe000003d60002601f06190d60f801e1f3e303c3e1c7998f0f18fe000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06120260f803f900003efc000003d60002601f06120260f803f900003efc000003d60002601f06120260f803f9000033fc000003d60002601f06120260f803f9000033fc000003d60002601f06191160f80301f3e1f331f1f1e0331f36fe1e3003d60002601f06191160f80301f3e1f331f1f1e0331f36fe1e3003d60002601f06160360f80303fb3307303e3338db300003d60002601f06160360f80303fb3307303e3338db300003d60002601f06160360f80303fb3307f0303330db1e0003d60002601f06160360f80303fb3307f0303330db1e0003d60002601f06191160f803033331f33331f300303330db030003d60002601f06191160f803033331f33331f300303330db030003d60002601f06191160f803f1f33231f1f231e0301f30db1e3003d60002601f06191160f803f1f33231f1f231e0301f30db1e3003d60002601f06150160f8fe000401e00001e0fa000003d60002601f06150160f8fe000401e00001e0fa000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06270260f803f900193e00001c60000300600603c7c3c3c03c0603c463c663c3c7c780e90002601f06270260f803f900193e00001c60000300600603c7c3c3c03c0603c463c663c3c7c780e90002601f06240260f803f9000a3300003000000300600606fe660360660606fb66010cc0e90002601f06240260f803f9000a3300003000000300600606fe660360660606fb66010cc0e90002601f062c1460f80301f3e1f331f1f1e033363c7ce33303067c3efe660c06600666066766066666060c0ce90002601f062c1460f80301f3e1f331f1f1e033363c7ce33303067c3efe660c06600666066766066666060c0ce90002601f06290360f80303fb331a303e38663061e0030066660667c606600c060667e6e66666e78780e90002601f06290360f80303fb331a303e38663061e0030066660667c606600c060667e6e66666e78780e90002601f06290360f80303fb331af030307e3060c0030066660666c607e0180607e6e66667e66600c0e90002601f06290360f80303fb331af030307e3060c0030066660666c607e0180607e6e66667e66600c0e90002601f06291560f803033331f33331f3003030603061e00300666606fe660360300606fb66010cc0e90002601f06291560f803033331f33331f3003030603061e00300666606fe660360300606fb66010cc0e90002601f062c2460f803f1f33231f1f231e030303c30f3330306663e63c663c6667e67e66623c3c663c7c78ce90002601f0698004000a000000140020000a000000140020000a000000140020000012c2460f803f1f33231f1f231e030303c30f3330306663e63c663c6667e67e66623c3c663c7c78ce90002601f06150160f8fe000401e00001e0fa000003d60002601f06150160f8fe000401e00001e0fa000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06150660f8060000303cf400040e0c000030dc00011f06150660f8060000303cf400040e0c000030dc00011f06180660f80600003066fe000060f8000306000030db00011f06180660f80600003066fe000060f8000306000030db00011f06211a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8de00011f06211a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8de00011f06211a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998de00011f06211a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998de00011f06211a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998de00011f06211a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998de00011f06211a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8de00011f06211a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8de00011f06221b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980df00011f06221b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980df00011f06100560f807fffff0ed0000f0de00011f06100560f807fffff0ed0000f0de00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06180660f8060000303cf700076000380000060380dc00011f06180660f8060000303cf700076000380000060380dc00011f061c0660f80600003066fe000060fb00076000180300060180dc00011f061c0660f80600003066fe000060fb00076000180300060180dc00011f06201960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0dd00011f06201960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0dd00011f06201960f8060000306070cccc60cc0cc0c0cdb6666618030666618660dd00011f06201960f8060000306070cccc60cc0cc0c0cdb6666618030666618660dd00011f06201960f8060000306060fccc60fc0cc078ddb66666180306666187e0dd00011f06201960f8060000306060fccc60fc0cc078ddb66666180306666187e0dd00011f061f1860f8060000306660c0cc6cc00cc00c6db66666180366666186dc00011f061f1860f8060000306660c0cc6cc00cc00c6db66666180366666186dc00011f06201960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6dd00011f06201960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6dd00011f06100560f807fffff0f8000078d300011f06100560f807fffff0f8000078d300011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06160660f8078000f03cf90001c00cfc00000cda00011f06160660f8078000f03cf90001c00cfc00000cda00011f06190660f80670073066fc0004600000c00cfc00000cda00011f06190660f80670073066fc0004600000c00cfc00000cda00011f061e1760f8060e3830603c7c3c6c7cf87807c78f8cc7c078787c78db00011f061e1760f8060e3830603c7c3c6c7cf87807c78f8cc7c078787c78db00011f061b0660f80601c0306efe660470cc60cc0cfdcc00c0fdccdb00011f061b0660f80601c0306efe660470cc60cc0cfdcc00c0fdccdb00011f061e0f60f8060e3830667e667e60cc60fc0ccffecc04c0c0ccccfcdb00011f061e0f60f8060e3830667e667e60cc60fc0ccffecc04c0c0ccccfcdb00011f061e1360f8067007306660666060cc6cc00ccc0cccc7c0fecc00c0db00011f061e1360f8067007306660666060cc6cc00ccc0cccc7c0fecc00c0db00011f061f1860f8078000f03c3c663c607c387807c78f87c8c078787c78c0dc00011f061f1860f8078000f03c3c663c607c387807c78f87c8c078787c78c0dc00011f06110560f807fffff0f500010780d700011f06110560f807fffff0f500010780d700011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06180b60f8078000f0603001800007fa0002018706d900011f06180b60f8078000f0603001800007fa0002018706d900011f06170c60f80670073060000180000c18fa000003d800011f06170c60f80670073060000180000c18fa000003d800011f061e1760f8060e38306071f1980f9f3e1e3603c3cfe3e3830e3e1fdb00011f061e1760f8060e38306071f1980f9f3e1e3603c3cfe3e3830e3e1fdb00011f061e1760f80601c030603199b0198c18333806666db33183063333db00011f061e1760f80601c030603199b0198c18333806666db33183063333db00011f061e1760f8060e3830603199e0198c183f3006066db33183063333db00011f061e1760f8060e3830603199e0198c183f3006066db33183063333db00011f061e1760f806700730603199b0198c1b303006666db3318306331fdb00011f061e1760f806700730603199b0198c1b303006666db3318306331fdb00011f061f1860f8078000f07e7999980f8c0e1e3003c3cdb3e3c78f332330dc00011f061f1860f8078000f07e7999980f8c0e1e3003c3cdb3e3c78f332330dc00011f06140560f807fffff0f5000003fd00001edb00011f06140560f807fffff0f5000003fd00001edb00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06100160f8f200003ff6ff00f0e100011f06100160f8f200003ff6ff00f0e100011f06120160f8f3000107c0f600010f80e200011f06120160f8f3000107c0f600010f80e200011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06400560f80070003cfe0009187000001c0001dc000ffe0003f00000c0fd0005ee00070003c0fe000f038000e001c000f000001f000700001cfe000007fe00011f06400560f80070003cfe0009187000001c0001dc000ffe0003f00000c0fd0005ee00070003c0fe000f038000e001c000f000001f000700001cfe000007fe00011f063e0560f800700066fd000e3000001c0001dc0019800c019800c0fc0005ee0007000660fe0013018000e001c0019800c019800c00000c18000007fe00011f063e0560f800700066fd000e3000001c0001dc0019800c019800c0fc0005ee0007000660fe0013018000e001c0019800c019800c00000c18000007fe00011f06413a60f8007000603cfe3e383078001c0001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e0007fe00011f06413a60f8007000603cfe3e383078001c0001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e0007fe00011f06412360f80070006066db331830cc001c0001dc000f198c019998c0c666660000ee0007000606fe6613618000e001c000f198c019998c33330c18300007fe00011f06412360f80070006066db331830cc001c0001dc000f198c019998c0c666660000ee0007000606fe6613618000e001c000f198c019998c33330c18300007fe00011f06413a60f80070006066db331830fc001c0001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e0007fe00011f06413a60f80070006066db331830fc001c0001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e0007fe00011f06402260f80070006666db331830c0001c0001dc0019980d819998d8c666606000ee00070006fd6613018000e001c0019980d819980c33330c1b030007fe00011f06402260f80070006666db331830c0001c0001dc0019980d819998d8c666606000ee00070006fd6613018000e001c0019980d819980c33330c1b030007fe00011f06413a60f80070003c3cdb3e3c7878001c0001dc000f0f0700f1f071e3c663c000ee00070003c3e663c3c3c000e001c000f0f0701f0f0c1f1f1e0e1e0007fe00011f06413a60f80070003c3cdb3e3c7878001c0001dc000f0f0700f1f071e3c663c000ee00070003c3e663c3c3c000e001c000f0f0701f0f0c1f1f1e0e1e0007fe00011f062a0360f80070fd000030fd00031c0001dcfc00010180fb0002ee0007f80002e001c0f4000007fe00011f062a0360f80070fd000030fd00031c0001dcfc00010180fb0002ee0007f80002e001c0f4000007fe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06120160f8f3000107c0f600010f80e200011f06120160f8f3000107c0f600010f80e200011f06100160f8f200003ff6ff00f0e100011f06100160f8f200003ff6ff00f0e100011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06060060c3ff000698004001400000014a020001400000014a020001400000014a02000001060060c3ff0006060060c3ff0006060060c3ff0006060060c3000006060060c3000006060060c3000006060060c300000606007fc3ff00fe06007fc3ff00fe02c100a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The rectangular boxes next to the first five items in the Compile window are line-edit boxes.  In the Source File: box, you can enter the name of the source progra\hich\af4\dbch\af4\loch\f4 m that you want to compile.  A complete or partial path name may be entered here.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The Keep Name: box is where you enter the name of the object module produced by compiling the source file; again, this can be either a full or partial pa\hich\af4\dbch\af4\loch\f4 th name.  Any name supplied here takes precedence over KEEP names supplied in your source file, or over the default naming of object files described earlier in this section.  Make sure the keep name is different from the source file name to prevent linker\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 errors when the linker tries to overwrite the source file with the object module.  \par \hich\af4\dbch\af4\loch\f4 The Subroutines: box is used for }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 partial compilation}}}{\hich\af4\dbch\af4\loch\f4 partial compilation.  Under ORCA, once you have compiled a complete program, you can individually compile selec\hich\af4\dbch\af4\loch\f4 ted subroutines.  This can be very useful when you have a long program made up of several subroutines.  If you find you have made a mistake in only a few of the subroutines, then you are not forced to recompile the entire program to correct these few mist\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 kes.  To perform a partial compile, enter the names of the subroutines needing to be recompiled, separated by a space. Not all compilers support partial compilation.  Please refer to Chapter 8 for more information about partial compilation.\par \hich\af4\dbch\af4\loch\f4 The Language Pa\hich\af4\dbch\af4\loch\f4 rms: box is used to tell the system about any special parameters your compiler needs.  ORCA/C does not use these fields.  If you are using another compiler, your compiler reference manual will tell you if you need these options.\par \hich\af4\dbch\af4\loch\f4 The Language Prefix: box is\hich\af4\dbch\af4\loch\f4  used to tell the system that you have installed your compilers in some }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 directories}}}{\hich\af4\dbch\af4\loch\f4 directory other than the default Languages prefix.  The default prefix is the subdirectory named Languages contained in the directory where you installed your deskt\hich\af4\dbch\af4\loch\f4 op system.  If you are using the full ORCA shell}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4  or more than one compiler, setting up a special directory to hold your compilers, assemblers, and linker is a good idea.  You should enter either a full or partial path name here.\par \hich\af4\dbch\af4\loch\f4 The next four\hich\af4\dbch\af4\loch\f4  boxes are check boxes.  To select any or all of the options, move the cursor over the box and click once with the mouse.  To deselect an option, click on the box a second time.\par \hich\af4\dbch\af4\loch\f4 Checking the Create a source listing box causes the compiler to produce a list\hich\af4\dbch\af4\loch\f4 ing of your source file as it compiles your program, and checking the Create a symbol table box causes the compiler to produce a symbol table.  A symbol table is a summary of the all of the functions and variables detected in the program.  ORCA/C does not\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 produce a symbol table.  Generate debug code calls for the compiler to produce special code that will be used by the desktop in running the source-level debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4 .  The debug box should be checked while you are in the process of debugging y\hich\af4\dbch\af4\loch\f4 our program, and then deactivated after your program is working properly so that the code produced by the compiler is more compact.  Link after compiling causes the desktop to invoke the linker after successful compilation of your program.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug code}}}{\hich\af4\dbch\af4\loch\f4  \par \hich\af4\dbch\af4\loch\f4 The four buttons in the bottom of the Compile window cause the desktop to take action based on the button chosen.  Clicking the Compile button starts the compilation of your source file.  Clicking the Set Options button causes the desktop to record inf\hich\af4\dbch\af4\loch\f4 ormation about future compilations based on the choices you have made in this window.  Cancel returns you to where you were before selecting the Compile command; no system action is taken.  The Set Defaults button causes the desktop to record the informat\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 on you have given in this dialog.  Then, whenever you launch the desktop, the compilation options specified here will be automatically applied to the program being compiled.  See "Setting up Defaults," later in this chapter, for further information about \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 etting system defaults.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318211}\hich\af4\dbch\af4\loch\f4 Link{\*\bkmkend _Toc495318211}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The purpose of the Link command is to set default options to be used when linking the front window, or to manually link object modules.\par \hich\af4\dbch\af4\loch\f4 The linker can be regarded as an advanced feat\hich\af4\dbch\af4\loch\f4 ure.  You do not need to understand the function of a linker to effectively use the desktop, since the compile commands are set up to automatically call the linker.\par }\pard\plain \qj\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex44\picscaley45\piccropl0\piccropr0\piccropt0\piccropb0\picw512\pich280\picwgoal10240\pichgoal5600\macpict\bliptag-1585933941\blipupi72{\*\blipuid a178918b2b029059f4b61865186d765d}1e6000000000011802001101a00082a0008e01000a00000000030802809800400000000000a002000000000000a002000000000000a00200000102c10006007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe12007fe8ff08f9fcffe7ff0fffff3fe5ff00fe12007fe8ff08f9fcffe7ff0fffff3fe5ff00fe11007fe8ff07f9ffffe7fe67ff3fe4ff00fe11007fe8ff07f9ffffe7fe67ff3fe4ff00fe15007fe8ff0bf9f8e0e67e660e0e3c383c3fe8ff00fe15007fe8ff0bf9f8e0e67e660e0e3c383c3fe8ff00fe14007fe8ff0af9fce664fe66673f399999e7ff00fe14007fe8ff0af9fce664fe66673f399999e7ff00fe15007fe8ff0bf9fce661fe66673f39999c3fe8ff00fe15007fe8ff0bf9fce661fe66673f39999c3fe8ff00fe15007fe8ff0bf9fce664fe66672739999f9fe8ff00fe15007fe8ff0bf9fce664fe66672739999f9fe8ff00fe15007fe8ff0bf81866667f0e0f8e1c399c3fe8ff00fe15007fe8ff0bf81866667f0e0f8e1c399c3fe8ff00fe0b007fe3ff01fe7fe3ff00fe0b007fe3ff01fe7fe3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe060060c3000006060060c3000006060060c3000006060060c3000006060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06170560f801e30060fe00027c61c0fd00000cd50002601f06170560f801e30060fe00027c61c0fd00000cd50002601f06170360f80333fe000403006000c0fd00000cd50002601f06170360f80333fe000403006000c0fd00000cd50002601f06180c60f80333e0e3c3c7c060e0c1e3fe00000cd50002601f06180c60f80333e0e3c3c7c060e0c1e3fe00000cd50002601f06180c60f8033330666663007860c330fe00000cd50002601f06180c60f8033330666663007860c330fe00000cd50002601f06180c60f803333067e603006060c3f0fe00000cd50002601f06180c60f803333067e603006060c3f0fe00000cd50002601f06170760f8033330660663fe6000c3fd00000cd50002601f06170760f8033330660663fe6000c3fd00000cd50002601f06180c60f801e3e363c3c1c060f1e1e3fe00000cd50002601f06180c60f801e3e363c3c1c060f1e1e3fe00000cd50002601f06110560f8000001c0f700000cd50002601f06110560f8000001c0f700000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06140360f80318fe00011180fa00000cd50002601f06140360f80318fe00011180fa00000cd50002601f06140360f80330fe00011980fa00000cd50002601f06140360f80330fe00011980fa00000cd50002601f06170b60f80360f0f1f01d8fbf878cfd00000cd50002601f06170b60f80360f0f1f01d8fbf878cfd00000cd50002601f06170b60f803c19999981f99b6ccc0fd00000cd50002601f06170b60f803c19999981f99b6ccc0fd00000cd50002601f06170b60f80361f9f9981b99b6cfc0fd00000cd50002601f06170b60f80361f9f9981b99b6cfc0fd00000cd50002601f06160a60f803318181981999b6ccfc00000cd50002601f06160a60f803318181981999b6ccfc00000cd50002601f06170b60f80318f0f1f0188fb6c78cfd00000cd50002601f06170b60f80318f0f1f0188fb6c78cfd00000cd50002601f06120160f8fe00010180f800000cd50002601f06120160f8fe00010180f800000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06270460f803018cfd000903e00001c600000c00f1fef00a0f0180f1f1f0f1f0f1f1e0e50002601f06270460f803018cfd000903e00001c600000c00f1fef00a0f0180f1f1f0f1f0f1f1e0e50002601f06270460f803000cfd000303300003fe00010c01fe99049819818061fe990398618330e50002601f06270460f803000cfd000303300003fe00010c01fe99049819818061fe990398618330e50002601f06281960f803038f8d8f9b33033363c7ce33300c199999819818198061fe990398618303e50002601f06281960f803038f8d8f9b33033363c7ce33300c199999819818198061fe990398618303e50002601f06282060f803018cce199c3303e38663061e000c0199f1819818018061f1f199f061e1e0e50002601f06282060f803018cce199c3303e38663061e000c0199f1819818018061f1f199f061e1e0e50002601f06282060f803018ccc199837030307e3060c000c0199b181f81801806199b1f9b0618030e50002601f06282060f803018ccc199837030307e3060c000c0199b181f81801806199b1f9b0618030e50002601f06281160f803018ccc19981b03030603061e000c01fe99049819818061fe990398618330e50002601f06281160f803018ccc19981b03030603061e000c01fe99049819818061fe990398618330e50002601f06280860f803f3cf8c0f9823fe0314c30f33300c18f198f1998f19f8f1f1999998f1f1e3e50002601f06280860f803f3cf8c0f9823fe0314c30f33300c18f198f1998f19f8f1f1999998f1f1e3e50002601f06110160f8fb00001efa00000cd50002601f06110160f8fb00001efa00000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06120560f807fffff0e70002fffffee600011f06120560f807fffff0e70002fffffee600011f06290660f8060000303cf400040e0c000030fa0004f0001e0f80fa000070fe000438300180c0f800011f06290660f8060000303cf400040e0c000030fa0004f0001e0f80fa000070fe000438300180c0f800011f062e0660f80600003066fe000060f8000306000030f90003ce00e60cfd00000cfe0007c180000018000180f700011f062e0660f80600003066fe000060f8000306000030f90003ce00e60cfd00000cfe0007c180000018000180f700011f063b1a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8fc0016c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0fa00011f063b1a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8fc0016c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0fa00011f063b1a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998fc0016c038060f0f1999998c198198c1833380183199b0c66660fa00011f063b1a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998fc0016c038060f0f1999998c198198c1833380183199b0c66660fa00011f063b1a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998fc0016c1c7060c061f98198c1f8198c183f300183199e0c66660fa00011f063b1a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998fc0016c1c7060c061f98198c1f8198c183f300183199e0c66660fa00011f063b1a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8fc0016ce00e60c0f1819998d980198c1b30300183199b0c663e0fa00011f063b1a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8fc0016ce00e60c0f1819998d980198c1b30300183199b0c663e0fa00011f063c1b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980fd0016f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466fa00011f063c1b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980fd0016f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466fa00011f061b0560f807fffff0ed0000f0fc0002fffffeef000103c0fa00011f061b0560f807fffff0ed0000f0fc0002fffffeef000103c0fa00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06120560f807fffff0e70002fffffee600011f06120560f807fffff0e70002fffffee600011f062e0660f8060000303cf700076000380000060380fa0004f0001e0780f7000560380001c61cfd0006031800c0001f062e0660f8060000303cf700076000380000060380fa0004f0001e0780f7000560380001c61cfd0006031800c0001f06350660f80600003066fe000060fb00076000180300060180fa0004ce00e60cc0f90012300060180003000c00018000030000c0001f06350660f80600003066fe000060fb00076000180300060180fa0004ce00e60cc0f90012300060180003000c00018000030000c0001f063e1960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0fb001fc1c7060c07cc63c03c663c3c667c3e7c183c07ce0c1e03e1e01f3878cc001f063e1960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0fb001fc1c7060c07cc63c03c663c3c667c3e7c183c07ce0c1e03e1e01f3878cc001f063e1960f8060000306070cccc60cc0cc0c0cdb6666618030666618660fb0009c03806078ccc6660663cfe6612306666186603060c330183303318c0d8001f063e1960f8060000306070cccc60cc0cc0c0cdb6666618030666618660fb0009c03806078ccc6660663cfe6612306666186603060c330183303318c0d8001f063e1960f8060000306060fccc60fc0cc078ddb66666180306666187e0fb001fc1c70600ccc6c7e07e187e6066306666187e03060c3f018330331878f0001f0698004000a000000118020000a000000118020000a000000118020000013e1960f8060000306060fccc60fc0cc078ddb66666180306666187e0fb001fc1c70600ccc6c7e07e187e6066306666187e03060c3f018330331878f0001f063d1860f8060000306660c0cc6cc00cc00c6db66666180366666186fa001fce00e60cccc6c600603c606666366666186003060c3001b33033180cd8001f063d1860f8060000306660c0cc6cc00cc00c6db66666180366666186fa001fce00e60cccc6c600603c606666366666186003060c3001b33033180cd8001f063e1960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6fb001ff0001e0787c383c03c663c3c3e1c3e7c3c3c030f1e1e00e1e01f3c78ccc01f063e1960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6fb001ff0001e0787c383c03c663c3c3e1c3e7c3c3c030f1e1e00e1e01f3c78ccc01f06160560f807fffff0f8000078f10002fffffee600011f06160560f807fffff0f8000078f10002fffffee600011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f062b0860f800e00e01f333e0fe00051c01c01e0c1efe000603803803c7c3c0fe00057007008cf878e800011f062b0860f800e00e01f333e0fe00051c01c01e0c1efe000603803803c7c3c0fe00057007008cf878e800011f06290760f8030fe1818333fd0005600030333c30fe000c0c0006066666600000018000c0fecce800011f06290760f8030fe1818333fd0005600030333c30fe000c0c0006066666600000018000c0fecce800011f062a0760f8063ff8c181e3fd0005c00018300c3efe000f18000306066660000003000060eccccce800011f062a0760f8063ff8c181e3fd0005c00018300c3efe000f18000306066660000003000060eccccce800011f062b0860f8067ffcc1e0c3c0fe0005c000181e0c33fe000f18000306066660000003000060fccccce800011f062b0860f8067ffcc1e0c3c0fe0005c000181e0c33fe000f18000306066660000003000060fccccce800011f062a0760f8063ff8c181e3fd0005c00018030c33fe000f180003060667e0000003000060dcccfce800011f062a0760f8063ff8c181e3fd0005c00018030c33fe000f180003060667e0000003000060dcccfce800011f06290760f8030fe1818333fd0005600030330c33fe000c0c0006066666600000018000c0fecce800011f06290760f8030fe1818333fd0005600030330c33fe000c0c0006066666600000018000c0fecce800011f062b0860f800e00e01f333e0fe00051c01c01e3f1efe000603803803c7c660fe0005700700c4f8cce800011f062b0860f800e00e01f333e0fe00051c01c01e3f1efe000603803803c7c660fe0005700700c4f8cce800011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f061a0560f807fffff0f200031fffffc0f0000307fffff0f100011f061a0560f807fffff0f200031fffffc0f0000307fffff0f100011f06300c60f8078000f03c3c063c3c03c0f90004180000c104fb00010780f90007060000307c000060fe000103c0fa00011f06300c60f8078000f03c3c063c3c03c0f90004180000c104fb00010780f90007060000307c000060fe000103c0fa00011f06300c60f80670073066660c66660660f90004180000c18cfb00010cc0f9000c06000030660000603000000660fa00011f06300c60f80670073066660c66660660f90004180000c18cfb00010cc0f9000c06000030660000603000000660fa00011f063d1060f8060e38306060186660066c31f363c0fd0004180000c1dcfe78087c7c780cd863e6c780fd000e06000030663c3c667c3c7c0667c7c0fc00011f063d1060f8060e38306060186660066c31f363c0fd0004180000c1dcfe78087c7c780cd863e6c780fd000e06000030663c3c667c3c7c0667c7c0fc00011f063d1060f80601c0306e3c30663c066db3338660fd0007180000c1fcccc0c0fecc050cdb66670cc0fd000e060000306666606c30666606666660fc00011f063d1060f80601c0306e3c30663c066db3338660fd0007180000c1fcccc0c0fecc050cdb66670cc0fd000e060000306666606c30666606666660fc00011f063d1060f8060e3830660660660607edb33307e0fd0010180000c1acfc7878ccccfc0fdb66660fc0fd000e06000030667e3c7830666607e66660fc00011f063d1060f8060e3830660660660607edb33307e0fd0010180000c1acfc7878ccccfc0fdb66660fc0fd000e06000030667e3c7830666607e66660fc00011f063b0f60f8067007306666c066660666633306fc000f180000c18cc00c0ccc7cc00cccc6660cfc000e060000306660066c36666606666660fc00011f063b0f60f8067007306666c066660666633306fc000f180000c18cc00c0ccc7cc00cccc6660cfc000e060000306660066c36666606666660fc00011f063d1060f8078000f03c3c803c3c066661f303c0fd0004180000c18cfe78087c8c780cccc3e60780fd000e060000307c3c3c661c3c7c0667c7c6fc00011f063d1060f8078000f03c3c803c3c066661f303c0fd0004180000c18cfe78087c8c780cccc3e60780fd000e060000307c3c3c661c3c7c0667c7c6fc00011f06250560f807fffff0f200031fffffc0fc000078f6000307fffff0fb000360000606fb00011f06250560f807fffff0f200031fffffc0fc000078f6000307fffff0fb000360000606fb00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060e0160f8f5000003f5ffde00011f060e0160f8f5000003f5ffde00011f06100160f8f500007cf50000f8df00011f06100160f8f500007cf50000f8df00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f063d1660f800700060300180003800001dc000f000000f00000cfd00050ee00070003cfd000f38000e001c000f000001f000700001c0fe000070fc00011f063d1660f800700060300180003800001dc000f000000f00000cfd00050ee00070003cfd000f38000e001c000f000001f000700001c0fe000070fc00011f063c1560f800700060000180003800001dc0019800c019800cfc00050ee000700066fd001318000e001c0019800c019800c00000c180000070fc00011f063c1560f800700060000180003800001dc0019800c019800cfc00050ee000700066fd001318000e001c0019800c019800c00000c180000070fc00011f063f3860f80070006071f198003800001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e00070fc00011f063f3860f80070006071f198003800001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e00070fc00011f063e2060f8007000603199b0003800001dc000f198c019998c0c666660000ee000700060fd661318000e001c000f198c019998c33330c183000070fc00011f063e2060f8007000603199b0003800001dc000f198c019998c0c666660000ee000700060fd661318000e001c000f198c019998c33330c183000070fc00011f063f3860f8007000603199e0003800001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e00070fc00011f063f3860f8007000603199e0003800001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e00070fc00011f063e1f60f8007000603199b0003800001dc0019980d819998d8c666606000ee0007000fd66146018000e001c0019980d819980c33330c1b0300070fc00011f063e1f60f8007000603199b0003800001dc0019980d819998d8c666606000ee0007000fd66146018000e001c0019980d819980c33330c1b0300070fc00011f063f2260f80070007e799998003800001dc000f0f0700f1f071e3c663c000ee00070003c3e66fe3c12000e001c000f0f0701f0f0c1f1f1e0e1e00070fc00011f063f2260f80070007e799998003800001dc000f0f0700f1f071e3c663c000ee00070003c3e66fe3c12000e001c000f0f0701f0f0c1f1f1e0e1e00070fc00011f06270360f80070fb00043800001dc0fc000018fb00030ee00070f900020e001cf3000070fc00011f06270360f80070fb00043800001dc0fc000018fb00030ee00070f900020e001cf3000070fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06100160f8f500007cf50000f8df00011f06100160f8f500007cf50000f8df00011f060e0160f8f5000003f5ffde00011f060e0160f8f5000003f5ffde00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006060060c3000006060060c3000006060060c3000006060060c300000606007fc3ff00fe06007fc3ff00fe02c100a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The line-edit box following Object File: is where you enter the ba\hich\af4\dbch\af4\loch\f4 se name of the object files you wish to be linked.  The object file's name should not include any system-added file name extensions.  For example, if you had compiled a program named BULLSEYE.CC, using a keep name of BULLSEYE, then the system would have c\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 eated object modules named BULLSEYE.ROOT and BULLSEYE.A.  To link these two object modules, you would enter BULLSEYE as the name of the Object File.  Default object file names are discussed above with the Compile command.\par \hich\af4\dbch\af4\loch\f4 The Object File box can also be us\hich\af4\dbch\af4\loch\f4 ed to perform separate compilation}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 separate compilation}}}{\hich\af4\dbch\af4\loch\f4 .  The first object file name you enter should contain the main program; the other names can be specified in any order.  Enter only the base names of the }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 object files, as e\hich\af4\dbch\af4\loch\f4 xplained in the preceding paragraph.  The linker will automatically load all of the object modules produced from compiling a single source file.  See Chapter 8 for more information about separate compilation.\par \hich\af4\dbch\af4\loch\f4 The line-edit box following Keep Name: is where\hich\af4\dbch\af4\loch\f4  you enter the name of the executable file that the system will create upon successful linking of the object modules.  It is customary, but not required, to use the same name as that given in the Object File box; the system knows which files are object mo\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 ules and which are executable images because the object module names always contain system-added extensions.  Using the bull's eye example above, then, we would enter BULLSEYE for the object file and BULLSEYE for the Keep Name.  The object modules would b\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  called BULLSEYE.ROOT and BULLSEYE.A, while the executable file would be named BULLSEYE.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4 The Library Prefix: box is used to tell the system that you have installed the libraries you and your compilers use in some }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 directories}}}{\hich\af4\dbch\af4\loch\f4 direc\hich\af4\dbch\af4\loch\f4 tory other than the default libraries prefix.  The default prefix is the subdirectory named LIBRARIES contained in the directory where you installed your desktop system.  You must enter a full path name here.\par \hich\af4\dbch\af4\loch\f4 As with the Compile window, the next four boxes\hich\af4\dbch\af4\loch\f4  are check boxes.  The first box gives you the option of producing a listing of the link.  The second box is used to specify whether a symbol table is to be generated during linking.  The third box lets you specify whether execution of the program should \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 mmediately occur after successful linking of the object modules.  The fourth box tells the system whether or not to save the executable image to disk.  This last option is for future expansion; currently, the linker saves the file to disk if there is a ke\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 p name, and does not save the file if there is no keep name.\par \hich\af4\dbch\af4\loch\f4 The radio buttons below the check boxes allow you to set the file type of the executable image.  Different file types are used depending upon the function of the program.  If you want to execute \hich\af4\dbch\af4\loch\f4 the program without leaving the development environment, use a file type of EXE.  You must use EXE to use the debugger}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\hich\af4\dbch\af4\loch\f4 , shell}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4  window, or graphics window}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 graphics window}}}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 If you wish to create a stand-alone program tha\hich\af4\dbch\af4\loch\f4 t can be launched from the Finder, change the file type to S16, turn debugging off, and compile your program.  S16 programs can be executed by the development environment, but the desktop shuts down before executing your program.  S16 programs can also be\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 executed from the Finder; EXE programs cannot.\par \hich\af4\dbch\af4\loch\f4 Classic }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 classic desk accessories}}}{\hich\af4\dbch\af4\loch\f4  have a file type of CDA, while new desk accessories have a file type of NDA.  You can execute a new desk accessory from the desktop as if it were an EXE program, but y\hich\af4\dbch\af4\loch\f4 ou must still set the file type to NDA.  Once the desk accessory is debugged, copy the executable image to the DESK.ACCS subdirectory of the SYSTEM }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 directories}}}{\hich\af4\dbch\af4\loch\f4 directory.  Remember to turn debugging off before the final compilation!  After the desk\hich\af4\dbch\af4\loch\f4  accessory has been installed into the SYSTEM/DESK.ACCS directory, you can access it from the Apple menu of any desktop program.\par \hich\af4\dbch\af4\loch\f4 Classic desk accessories}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 desk accessories}}}{\hich\af4\dbch\af4\loch\f4  cannot be debugged directly from the desktop.  To debug a classic desk access\hich\af4\dbch\af4\loch\f4 ory, compile it as an EXE program with a main program that calls the initialization and action functions.  Once debugged, remove the main program from the source code, turn off debugging, change the file type to CDA, and then recompile your program.  You \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 an then copy the finished executable program to the SYSTEM/DESK.ACCS directory, where it can be accessed by using the three-key command sequence }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl \hich\af4\dbch\af4\loch\f4 -control-esc}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 The three check boxes below the radio buttons are used to set bits in the auxiliary file type; t\hich\af4\dbch\af4\loch\f4 hese are used by various program launchers to decide how to execute your program.  The complete description for these options is in Apple's File Type Notes for file type $B3 (S16) or $B5 (EXE).  Briefly, "GS/OS Aware" tells the program launcher that your \hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 rogram is a modern one that knows about the longer prefixes, and will use prefix 8 for the default prefix.  The ORCA/C libraries assume you are using the new prefixes, so this option should be checked.  "Message Aware" tells the Finder that your program u\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 es messages passed by the message center.  This would be true of most desktop programs.  "Desktop App." tells the Finder that the program is a desktop application.  In this case, the Finder shuts down the tools in a special way so the text screen doesn't \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 lash on the screen as your program starts.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 cancel button}}}{\hich\af4\dbch\af4\loch\f4 Clicking the Link button causes the system to begin linking the object modules named in the Object File: box.  Selecting Set Options causes the information entered in the dialog to replace th\hich\af4\dbch\af4\loch\f4 e previous linker defaults.  The Cancel button closes the dialog without saving the changes.  The Set Defaults button causes the desktop to record the information you have given in this dialog.  Then, whenever you launch the desktop, the linker options sp\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 cified here will be automatically applied to the program being linked.  See "Setting up Defaults," later in this chapter, for further information about setting system defaults.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318212}\hich\af4\dbch\af4\loch\f4 Execute{\*\bkmkend _Toc495318212}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 execute command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Execute command allows you to run an exe\hich\af4\dbch\af4\loch\f4 cutable program.  The program's file type must be EXE, S16, or SYS.  The dialog box brought up by this command is shown below:\par }\pard\plain \qj\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw426\pich250\picwgoal8520\pichgoal5000\macpict\bliptag-2064906402\blipupi72{\*\blipuid 84ec075e10059aaf74eecdb95e561f7d}18d50000000000fa01aa1101a00082a0008e01000a0000000002d0024098003600000000003901b000000000003901aa00000000003901aa000102cb0006007fcdff008006007fcdff0080070060ce00010180070060ce00010180070060ce00010180070060ce00010180070060ceff01c180070060ceff01c180070060ceff01c180070060ceff01c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180120460f80007c0fa00020f8c38dd000207c180120460f80007c0fa00020f8c38dd000207c180150360f80006fd000006fe00020c0018dd000207c180150360f80006fd000006fe00020c0018dd000207c180170f60f800060cc7878ccf87807c0c1c183cde000207c180170f60f800060cc7878ccf87807c0c1c183cde000207c180170f60f80007878cccccc60cc0cc0f0c1866de000207c180170f60f80007878cccccc60cc0cc0f0c1866de000207c180170f60f80006030fcc0cc60fc0cc0c0c187ede000207c180170f60f80006030fcc0cc60fc0cc0c0c187ede000207c180170f60f80006078c0cccc6cc00cc0c0c1860de000207c180170f60f80006078c0cccc6cc00cc0c0c1860de000207c180170f60f80007ccc78787c387807c0c1e3c3cde000207c180170f60f80007ccc78787c387807c0c1e3c3cde000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180230160f8fb000f0c7800078000000380000067c0000006fe000306000060ed000207c180230160f8fb000f0c7800078000000380000067c0000006fe000306000060ed000207c180261760f800000ff0000018cc000cc0000001800000c660000006fe0003060000c0ed000207c180261760f800000ff0000018cc000cc0000001800000c660000006fe0003060000c0ed000207c180261e60f80000300ffc0030c0780c07dfc7c183c3c18663c7c3c7cfe1f36663c180ed000207c180261e60f80000300ffc0030c0780c07dfc7c183c3c18663c7c3c7cfe1f36663c180ed000207c180251460f800003000030060c0cc078cdb666186660307c6fe66056db33386c603ec000207c180251460f800003000030060c0cc078cdb666186660307c6fe66056db33386c603ec000207c180250760f8000fffffc300fec01200ccdb666187e3c60667e666066db3330783c6ec000207c180250760f8000fffffc300fec01200ccdb666187e3c60667e666066db3330783c6ec000207c180251d60f800030000330180cccc0cccdb666186006c06660666666db33306c06cec000207c180251d60f800030000330180cccc0cccdb666186006c06660666666db33306c06cec000207c180250e60f80000c0000f01007878c787db67fec30bc807c3c663c66db1f30663c8ec000207c180250e60f80000c0000f01007878c787db67fec30bc807c3c663c66db1f30663c8ec000207c180120660f800003ffffffa000006dd000207c180120660f800003ffffffa000006dd000207c18098003600390000007201b000390000007201aa00390000007201aa0001090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c180230660f8000800ffc0ec000718030030000001c0fe000301f0c006fc0005e0000007c180230660f8000800ffc0ec000718030030000001c0fe000301f0c006fc0005e0000007c180260960f8000800c03c00f8c6ef0007180cc03000000380fe000301980006fc000570000007c180260960f8000800c03c00f8c6ef0007180cc03000000380fe000301980006fc000570000007c180270960f8000800c03f00c006ef000018fe300300000380fe00040199c3c660fd000570000007c180270960f8000800c03f00c006ef000018fe300300000380fe00040199c3c660fd000570000007c180280a60f8000800c00300c1c7c0f0000718c00c3000000380fe00040198c606c0fd000570000007c180280a60f8000800c00300c1c7c0f0000718c00c3000000380fe00040198c606c0fd000570000007c180280a60f8000800c00300f0c660f000071bf03f3000000380fe00040198c3c780fd000570000007c180280a60f8000800c00300f0c660f000071bf03f3000000380fe00040198c3c780fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe00040198c066c0fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe00040198c066c0fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe000401f1e3c660fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe000401f1e3c660fd000570000007c180200a60f8000800ffff00c1e7c0f0000018fe3003000001c0f50005e0000007c180200a60f8000800ffff00c1e7c0f0000018fe3003000001c0f50005e0000007c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c180150660f8000800ffc0ec00031ffffff0ee000207c180150660f8000800ffc0ec00031ffffff0ee000207c1801b0860f8000800c03c0078fe000060f2000318000030ee000207c1801b0860f8000800c03c0078fe000060f2000318000030ee000207c1801b0c60f8000800c03f003000003060f2000318000030ee000207c1801b0c60f8000800c03f003000003060f2000318000030ee000207c1801b0c60f8000800c0030031fc3e7c7cf2000318000030ee000207c1801b0c60f8000800c0030031fc3e7c7cf2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663666f2000318000030ee000207c1801b0c60f8000800c0030031b6663666f2000318000030ee000207c1801b0c60f8000800ffff0079b63e1c66f2000318000030ee000207c1801b0c60f8000800ffff0079b63e1c66f2000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f8000fe9ff03f8000030ee000207c180120360f8000fe9ff03f8000030ee000207c180150660f8000fff003fecff03f8000030ee000207c180150660f8000fff003fecff03f8000030ee000207c180190a60f8000fff3fc3ff07ff3ff0ff03f8000030ee000207c1809800360072000000ab01b00072000000ab01aa0072000000ab01aa0001190a60f8000fff3fc3ff07ff3ff0ff03f8000030ee000207c1801f0860f8000fff3fc0ff33eeff03f8000030fe000007f6ff00f8fe000207c1801f0860f8000fff3fc0ff33eeff03f8000030fe000007f6ff00f8fe000207c180230c60f8000fff3ffcff3326301e1ff2ff03f8000030fe0000f8f6000607c0000007c180230c60f8000fff3ffcff3326301e1ff2ff03f8000030fe0000f8f6000607c0000007c180230c60f8000fff3ffcff071f324ccff2ff07f80000300000078ff6ff06fc78000007c180230c60f8000fff3ffcff071f324ccff2ff07f80000300000078ff6ff06fc78000007c180230c60f8000fff3ffcff3f3f324c0ff2ff07f800003000000e78f60006079c000007c180230c60f8000fff3ffcff3f3f324c0ff2ff07f800003000000e78f60006079c000007c180260b60f8000fff3ffcff3f3f324cf1ff07f800003000001dc0fe000101e0fa0005ee000007c180260b60f8000fff3ffcff3f3f324cf1ff07f800003000001dc0fe000101e0fa0005ee000007c180270c60f8000fff0000ff3f3e124e1ff2ff07f800003000003b80fe00010330fa000577000007c180270c60f8000fff0000ff3f3e124e1ff2ff07f800003000003b80fe00010330fa000577000007c180210360f8000fe9ff07f800003000003b80fe00040333e1e3e0fd000577000007c180210360f8000fe9ff07f800003000003b80fe00040333e1e3e0fd000577000007c180210360f80008e900071800003000003b80fe000003fe330030fd000577000007c180210360f80008e900071800003000003b80fe000003fe330030fd000577000007c180240660f8000800ffc0ec00071800003000003b80fe0004033333f330fd000577000007c180240660f8000800ffc0ec00071800003000003b80fe0004033333f330fd000577000007c180260860f8000800c03c0078ee00071800003000003b80fe00040333330330fd000577000007c180260860f8000800c03c0078ee00071800003000003b80fe00040333330330fd000577000007c180260860f8000800c03f00ccee00071800003000003b80fe000401e3e1e330fd000577000007c180260860f8000800c03f00ccee00071800003000003b80fe000401e3e1e330fd000577000007c180270d60f8000800c00300c07cc63e3e3cf300071800003000001dc0fd000003fa0005ee000007c180270d60f8000800c00300c07cc63e3e3cf300071800003000001dc0fd000003fa0005ee000007c180230a60f8000800c0030078ccc6fe66f300071800003000000e78f60006079c000007c180230a60f8000800c0030078ccc6fe66f300071800003000000e78f60006079c000007c180240d60f8000800c003000ccc6c66667ef30007180000300000078ff6ff06fc78000007c180240d60f8000800c003000ccc6c66667ef30007180000300000078ff6ff06fc78000007c180240d60f8000800c00300cccc6c663e60f3000318000030fe0000f8f6000607c0000007c180240d60f8000800c00300cccc6c663e60f3000318000030fe0000f8f6000607c0000007c180240d60f8000800ffff00787c383e463cf3000318000030fe000007f6ff00f8fe000207c180240d60f8000800ffff00787c383e463cf3000318000030fe000007f6ff00f8fe000207c180160360f80008f900003cf2000318000030ee000207c180160360f80008f900003cf2000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801e0360f80008e9000718000030000001c0fe00011e1cfa0005e0000007c1801e0360f80008e9000718000030000001c0fe00011e1cfa0005e0000007c1801e0360f80008e900071800003000000380fe0001330cfa000570000007c1801e0360f80008e900071800003000000380fe0001330cfa000570000007c180200360f80008e900071800003000000380fe0001300cfe1efd000570000007c180200360f80008e900071800003000000380fe0001300cfe1efd000570000007c180210360f80008e900071800003000000380fe0004300c333033fd000570000007c180210360f80008e900071800003000000380fe0004300c333033fd000570000007c180210360f80008e900071800003000000380fe0004300c331e3ffd000570000007c180210360f80008e900071800003000000380fe0004300c331e3ffd000570000007c180210360f80008e900071800003000000380fe0004330c330330fd000570000007c180210360f80008e900071800003000000380fe0004330c330330fd000570000007c18098003600ab000000e401b000ab000000e401aa00ab000000e401aa00011d0360f80008e900071800003000000380fe00fc1efd000570000007c1801d0360f80008e900071800003000000380fe00fc1efd000570000007c180190360f80008e9000718000030000001c0f50005e0000007c180190360f80008e9000718000030000001c0f50005e0000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e900031ffffff0ee000207c180120360f80008e900031ffffff0ee000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e90003183ff030fe000078f600060780000007c180220360f80008e9000018fe3007000001c0000001e0fe000101c0fe0005e0000007c180220360f80008e9000018fe3007000001c0000001e0fe000101c0fe0005e0000007c180210360f80008e9000018fe30070000038000000330fd0000c0fe000570000007c180210360f80008e9000018fe30070000038000000330fd0000c0fe000570000007c180220360f80008e9000018fe300c0000038000000301f3e1e1e0c0fe000570000007c180220360f80008e9000018fe300c0000038000000301f3e1e1e0c0fe000570000007c180220360f80008e9000b1bf03f300000038000000303fe330130c0fe000570000007c180220360f80008e9000b1bf03f300000038000000303fe330130c0fe000570000007c180220360f80008e9001018c00c300000038000000303333303f0c0fe000570000007c180220360f80008e9001018c00c300000038000000303333303f0c0fe000570000007c180210360f80008e9000018fe300600000380000003fd330100c0fe000570000007c180210360f80008e9000018fe300600000380000003fd330100c0fe000570000007c180220360f80008e90010180cc03000000380000001e1f331e1e1e0fe000570000007c180220360f80008e90010180cc03000000380000001e1f331e1e1e0fe000570000007c180190360f80008e9000718030030000001c0f50005e0000007c180190360f80008e9000718030030000001c0f50005e0000007c1801a0360f80008e9000318000030fe000078f600060780000007c18098003600e4000000fa01b000e4000000fa01aa00e4000000fa01aa00011a0360f80008e9000318000030fe000078f600060780000007c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180070060ceff01c180070060ceff01c180070060ceff01c180070060ceff01c180070060ce00010180070060ce00010180070060ce00010180070060ce0001018006007fcdff008006007fcdff008002cb00a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 To execute a file, simply open it.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318213}\hich\af4\dbch\af4\loch\f4 Execute Options...{\*\bkmkend _Toc495318213}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 execute options command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Execute Options command allows y\hich\af4\dbch\af4\loch\f4 ou to set certain characteristics that effect the Execute command and programs with debug code that are executed from the shell window.\par }\pard\plain \qj\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw550\pich228\picwgoal11000\pichgoal4560\macpict\bliptag1419490931\blipupi72{\*\blipuid 549bb67394fb45731626b32c5d7f3e5b}0fa20000000000e402261101a00082a0008e01000a0000000003080280980046000000000094022800000000009402260000000000940226000102bb0007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80018007febff01f07ffbff000ffcff04f9fc3ffffce7ff01f80018007febff01f07ffbff000ffcff04f9fc3ffffce7ff01f80019007febff00f3fdff03f3fffe67fcff03f9f99ffce6ff01f80019007febff00f3fdff03f3fffe67fcff03f9f99ffce6ff01f80020007febff15f3e670f0e660f0fe7f0c0603c183c1f9983838f0e0f0eaff01f80020007febff15f3e670f0e660f0fe7f0c0603c183c1f9983838f0e0f0eaff01f80020007febff0bf0f0e6666673e67e7e649249fe9906f9999cfce66667eaff01f80020007febff0bf0f0e6666673e67e7e649249fe9906f9999cfce66667eaff01f80020007febff0bf3f9e067e673e07e7e649249fe9906f9999cfce66670eaff01f80020007febff0bf3f9e067e673e07e7e649249fe9906f9999cfce66670eaff01f80021007febff0bf3f0e7e6667267fe66649249fe9907f9999c9ce6667e7febff01f80021007febff0bf3f0e7e6667267fe66649249fe9907f9999c9ce6667e7febff01f80020007febff15f06670f0f078f0ff0f0c9249c199c1fc383e3870e670eaff01f80020007febff15f06670f0f078f0ff0f0c9249c199c1fc383e3870e670eaff01f8000b007fdbff00f9e5ff01f8000b007fdbff00f9e5ff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f800070060be00011800070060be00011800070060be00011800070060be00011800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800110360f801e0fc00020c0c06ca00027c1800110360f801e0fc00020c0c06ca00027c1800100360f80330fc00010c0cc900027c1800100360f80330fc00010c0cc900027c1800160e60f80301e7f3f87cf87c0c0e3e1e30cd00027c1800160e60f80301e7f3f87cf87c0c0e3e1e30cd00027c1800150660f8030336db6cfecc030c063333cc00027c1800150660f8030336db6cfecc030c063333cc00027c1800150660f8030336db6cfecc030c06333fcc00027c1800150660f8030336db6cfecc030c06333fcc00027c1800150660f8033336db6cfecc030c063330cc00027c1800150660f8033336db6cfecc030c063330cc00027c1800160e60f801e1e6db6c7ccc7c0fcf331e30cd00027c1800160e60f801e1e6db6c7ccc7c0fcf331e30cd00027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f83fc2ff03f07c18000b0260f83fc2ff03f07c18000b0260f830c20003307c18000b0260f830c20003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000b0260f830c20003307c18000b0260f830c20003307c18000b0260f83fc2ff03f07c18000b0260f83fc2ff03f07c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f807c2ff03807c18000b0260f807c2ff03807c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800180160f8f300011ff0fa000101fff60001ff80e600027c1800180160f8f300011ff0fa000101fff60001ff80e600027c1800200160f8f30003e00e00f0fc00040e00e01f80fa00040700700780e800027c1800200160f8f30003e00e00f0fc00040e00e01f80fa00040700700780e800027c18002a0460f803e003fe000320800180fe0004030fe18198fc000330001806f9000418000c0cc6e800027c18002a0460f803e003fe000320800180fe0004030fe18198fc000330001806f9000418000c0cc6e800027c1800320460f8033003fe000331800180fe0005063ff8c180f0fd000760000c061b1f1e1efd00073000060c0f878f80eb00027c1800320460f8033003fe000331800180fe0005063ff8c180f0fd000760000c061b1f1e1efd00073000060c0f878f80eb00027c1800311460f80331e3e331f03b8f0f8f180000067ffcc1b998fd000460000c061cfe33fd000730000607860cccc0eb00027c1800311460f80331e3e331f03b8f0f8f180000067ffcc1b998fd000460000c061cfe33fd000730000607860cccc0eb00027c1800310260f803fd3301303ffe9908800000063ff8c19998fd000760000c061833303ffd000730000600c60fccc0eb00027c1800310260f803fd3301303ffe9908800000063ff8c19998fd000760000c061833303ffd000730000600c60fccc0eb00027c1800321460f80333f33333303599999f800000030fe1819998fd00073000180618333330fd000718000c0cc6cc0cc0eb00027c1800321460f80333f33333303599999f800000030fe1819998fd00073000180618333330fd000718000c0cc6cc0cc0eb00027c1800310b60f80333033331f031999998fd0004e00e00f0f0fd00070e00e006181f1e1efd00070700700783878f80eb00027c1800310b60f80333033331f031999998fd0004e00e00f0f0fd00070e00e006181f1e1efd00070700700783878f80eb00027c1800270c60f803e1e3e1f230318f0f8f18fe00011ff0fa000101fff60001ff80fe00000cea00027c1800270c60f803e1e3e1f230318f0f8f18fe00011ff0fa000101fff60001ff80fe00000cea00027c18000e0160f8fd000101e0c600027c18000e0160f8fd000101e0c600027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18009800460094000000e402280094000000e402260094000000e402260001090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f807c2ff03807c18000b0260f807c2ff03807c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000f0360f80000fdff0080c700027c18000f0360f80000fdff0080c700027c18000f0360f8001ffd00007cc700027c18000f0360f8001ffd00007cc700027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c18001d0960f80770003c63000770fe000270003cfd000238000ed500027c18001d0960f80770003c63000770fe000270003cfd000238000ed500027c18001d0960f80770006666000770fe0002700066fd000218000ed500027c18001d0960f80770006666000770fe0002700066fd000218000ed500027c18001e0960f8077000666c000770fe00097000603e7c3c3c18000ed500027c18001e0960f8077000666c000770fe00097000603e7c3c3c18000ed500027c18001d0960f80770006678000770fe0002700060fd660218000ed500027c18001d0960f80770006678000770fe0002700060fd660218000ed500027c18001e0960f8077000666c000770fe00097000606666607e18000ed500027c18001e0960f8077000666c000770fe00097000606666607e18000ed500027c18001d0960f80770006666000770fe00017000fd66036018000ed500027c18001d0960f80770006666000770fe00017000fd66036018000ed500027c18001e0960f80770003c63000770fe000470003c3e66fe3c01000ed500027c18001e0960f80770003c63000770fe000470003c3e66fe3c01000ed500027c1800180360f80770fd00010770fe000070f900000ed500027c1800180360f80770fd00010770fe000070f900000ed500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c18000f0360f8001ffd00007cc700027c18000f0360f8001ffd00007cc700027c18000f0360f80000fdff0080c700027c18000f0360f80000fdff0080c700027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800070060be00011800070060be00011800070060be00011800070060be0001180007007fbeff01f80007007fbeff01f80002bb00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The command line is passed to the program as if it were typed from the shell window.  Be sure and include the name o\hich\af4\dbch\af4\loch\f4 f the program, since the program will expect to find the name.  Do not use I/O redirection, piping, or multiple commands on one line.\par \hich\af4\dbch\af4\loch\f4 The "Debug Mode" radio buttons tell the debugger how to execute the program.  The three starting modes start the program a\hich\af4\dbch\af4\loch\f4 t full speed ("Go"), in trace mode ("Trace") or in single-step mode ("Step").  If the program was compiled with debug code off, the setting of these buttons is ignored.{\*\bkmkend runMenu}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 run menu}{\rxe runMenu}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318214}\hich\af4\dbch\af4\loch\f4 The Debug Menu{\*\bkmkend _Toc495318214}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart debugMenu}{\shp{\*\shpinst\shpleft5760\shptop147\shpright7880\shpbottom2627\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz13\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw106\pich124\picwgoal2120\pichgoal2480\macpict\bliptag1534972958\blipupi72{\*\blipuid 5b7dd41ec969a4662db73bc7e2a7a096}0f2000000000007c006a001102ff0c00ffffffff0000000000000000006a0000007c00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff026d021300a0008200a0008e001e0001000a00000000007c006a0098001c0000000000f800d80000000000f800d300000000007c006a000102e50008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed000b037fc1ffcffeff0080ed000b037fc1ffcffeff0080ed000b037fccffcffeff0080ed000b037fccffcffeff0080ed000b077fcce1c1cce0ff80ed000b077fcce1c1cce0ff80ed0009007ffccc01ff80ed0009007ffccc01ff80ed000b027fccc0fecc01ff80ed000b027fccc0fecc01ff80ed000b077fcccfcccce0ff80ed000b077fcccfcccce0ff80ed000b077fc1e1c1e0dcff80ed000b077fc1e1c1e0dcff80ed000a007ffdff02e1ff80ed000a007ffdff02e1ff80ed0008007ffbff0080ed0008007ffbff0080ed0008007fe9ff02fc000008007fe9ff02fc0000080060e900020c0000080060e900020c0000080060e900020c0000080060e900020c00000c0260003ced0004061e0fc0000c0260003ced0004061e0fc0000d0360006630ee000404180fc0000d0360006630ee000404180fc0000f056000607c3c7cf000041b180fc0000f056000607c3c7cf000041b180fc0000f0560003c306666f0000421980fc0000f0560003c306666f0000421980fc0000f05600006307e66f0000421180fc0000f05600006307e66f0000421180fc0000f05600066366066f0000425980fc0000f05600066366066f0000425980fc0000f0560003c1c3c7cf000041b180fc0000f0560003c1c3c7cf000041b180fc0000d0060fd000060ef00031e0fc0000d0060fd000060ef00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fe00010544fd000004f7000404000fc0001502600014fe00010544fd000004f7000404000fc000130360002220fe000082fd000008f500020fc000130360002220fe000082fd000008f500020fc000160c60004054145401054445044545f7000411000fc000160c60004054145401054445044545f7000411000fc000170960002820222200822208fe880080f80004208a8fc000170960002820222200822208fe880080f80004208a8fc000170960000410544401044404fe440040f8000401000fc000170960000410544401044404fe440040f8000401000fc000170d6000222220220082220888828880f8000420800fc000170d6000222220220082220888828880f8000420800fc00017016000fe1408540104440505404440f8000411000fc00017016000fe1408540104440505404440f8000411000fc000110060fd000020fc00010280f500020fc000110060fd000020fc00010280f500020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260007eed0004061e0fc0000c0260007eed0004061e0fc0000c02600018ed000404060fc0000c02600018ed000404060fc00010066000186c7c7878f100041b060fc00010066000186c7c7878f100041b060fc0000f0360001870feccf1000421860fc0000f0360001870feccf1000421860fc000100660001860ccc0fcf1000421060fc000100660001860ccc0fcf1000421060fc000100660001860ccccc0f1000425860fc000100660001860ccccc0f1000425860fc0001006600018607c7878f100041b060fc0001006600018607c7878f100041b060fc000090060ea00031e0fc000090060ea00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260003ced0004060c0fc0000c0260003ced0004060c0fc0000c02600066ed0004040c0fc0000c02600066ed0004040c0fc0000d036000603cee00041b0c0fc0000d036000603cee00041b0c0fc0000d0360006e66ee000421800fc0000d0360006e66ee000421800fc0000d0360006666ee000421000fc0000d0360006666ee000421000fc0000d0360006666ee000425800fc0000d0360006666ee000425800fc0000d0360003c3cee00041b000fc0000d0360003c3cee00041b000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fd000044fe00010540f7000404000fc0001502600014fd000044fe00010540f7000404000fc000150d6000220002000022000020022002f600020fc000150d6000220002000022000020022002f600020fc0001a106000401405414054144454044145444445fb000411150fc0001a106000401405414054144454044145444445fb000411150fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600022220222202220282202220222220880fc000420800fc0001b11600022220222202220282202220222220880fc000420800fc0001b0b600014140141404014441404fe4102440440fc000411000fc0001b0b600014140141404014441404fe4102440440fc000411000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000a02600014eb00020fc0000a02600014eb00020fc0000b0360002220ec00020fc0000b0360002220ec00020fc0000d05600040541454ee00020fc0000d05600040541454ee00020fc0000d05600028202222ee00020fc0000d05600028202222ee00020fc0000d05600004104444ee00020fc0000d05600004104444ee00020fc0000b016000fd22ee00020fc0000b016000fd22ee00020fc0000d016000fe140054ee00020fc0000d016000fe140054ee00020fc0000c0060fd000020ee00020fc0000c0060fd000020ee00020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000f0760007c000038c380f000020fc0000f0760007c000038c380f000020fc0000f076000660000600180f000020fc0000f076000660000600180f000020fc00010086000666c78f9c183c0f100020fc00010086000666c78f9c183c0f100020fc000100860007c70cc60c18660f100020fc000100860007c70cc60c18660f100020fc000100860006060cc60c187e0f100020fc000100860006060cc60c187e0f100020fc0000f0760006060cc60c186f000020fc0000f0760006060cc60c186f000020fc0001008600060607861e3c3c0f100020fc0001008600060607861e3c3c0f100020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000070003e8ff01c000070003e8ff01c00002e50000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx5759\posy146\absh2480\absw2120\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw106\pich124\picwgoal2120\pichgoal2480\macpict\bliptag1534972958\blipupi72{\*\blipuid 5b7dd41ec969a4662db73bc7e2a7a096}0f2000000000007c006a001102ff0c00ffffffff0000000000000000006a0000007c00000000000000a101f200044d53574400a10096000604000000000000a0009700a1008c0008ffffffff026d021300a0008200a0008e001e0001000a00000000007c006a0098001c0000000000f800d80000000000f800d300000000007c006a000102e50008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed000b037fc1ffcffeff0080ed000b037fc1ffcffeff0080ed000b037fccffcffeff0080ed000b037fccffcffeff0080ed000b077fcce1c1cce0ff80ed000b077fcce1c1cce0ff80ed0009007ffccc01ff80ed0009007ffccc01ff80ed000b027fccc0fecc01ff80ed000b027fccc0fecc01ff80ed000b077fcccfcccce0ff80ed000b077fcccfcccce0ff80ed000b077fc1e1c1e0dcff80ed000b077fc1e1c1e0dcff80ed000a007ffdff02e1ff80ed000a007ffdff02e1ff80ed0008007ffbff0080ed0008007ffbff0080ed0008007fe9ff02fc000008007fe9ff02fc0000080060e900020c0000080060e900020c0000080060e900020c0000080060e900020c00000c0260003ced0004061e0fc0000c0260003ced0004061e0fc0000d0360006630ee000404180fc0000d0360006630ee000404180fc0000f056000607c3c7cf000041b180fc0000f056000607c3c7cf000041b180fc0000f0560003c306666f0000421980fc0000f0560003c306666f0000421980fc0000f05600006307e66f0000421180fc0000f05600006307e66f0000421180fc0000f05600066366066f0000425980fc0000f05600066366066f0000425980fc0000f0560003c1c3c7cf000041b180fc0000f0560003c1c3c7cf000041b180fc0000d0060fd000060ef00031e0fc0000d0060fd000060ef00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fe00010544fd000004f7000404000fc0001502600014fe00010544fd000004f7000404000fc000130360002220fe000082fd000008f500020fc000130360002220fe000082fd000008f500020fc000160c60004054145401054445044545f7000411000fc000160c60004054145401054445044545f7000411000fc000170960002820222200822208fe880080f80004208a8fc000170960002820222200822208fe880080f80004208a8fc000170960000410544401044404fe440040f8000401000fc000170960000410544401044404fe440040f8000401000fc000170d6000222220220082220888828880f8000420800fc000170d6000222220220082220888828880f8000420800fc00017016000fe1408540104440505404440f8000411000fc00017016000fe1408540104440505404440f8000411000fc000110060fd000020fc00010280f500020fc000110060fd000020fc00010280f500020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260007eed0004061e0fc0000c0260007eed0004061e0fc0000c02600018ed000404060fc0000c02600018ed000404060fc00010066000186c7c7878f100041b060fc00010066000186c7c7878f100041b060fc0000f0360001870feccf1000421860fc0000f0360001870feccf1000421860fc000100660001860ccc0fcf1000421060fc000100660001860ccc0fcf1000421060fc000100660001860ccccc0f1000425860fc000100660001860ccccc0f1000425860fc0001006600018607c7878f100041b060fc0001006600018607c7878f100041b060fc000090060ea00031e0fc000090060ea00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260003ced0004060c0fc0000c0260003ced0004060c0fc0000c02600066ed0004040c0fc0000c02600066ed0004040c0fc0000d036000603cee00041b0c0fc0000d036000603cee00041b0c0fc0000d0360006e66ee000421800fc0000d0360006e66ee000421800fc0000d0360006666ee000421000fc0000d0360006666ee000421000fc0000d0360006666ee000425800fc0000d0360006666ee000425800fc0000d0360003c3cee00041b000fc0000d0360003c3cee00041b000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fd000044fe00010540f7000404000fc0001502600014fd000044fe00010540f7000404000fc000150d6000220002000022000020022002f600020fc000150d6000220002000022000020022002f600020fc0001a106000401405414054144454044145444445fb000411150fc0001a106000401405414054144454044145444445fb000411150fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600022220222202220282202220222220880fc000420800fc0001b11600022220222202220282202220222220880fc000420800fc0001b0b600014140141404014441404fe4102440440fc000411000fc0001b0b600014140141404014441404fe4102440440fc000411000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000a02600014eb00020fc0000a02600014eb00020fc0000b0360002220ec00020fc0000b0360002220ec00020fc0000d05600040541454ee00020fc0000d05600040541454ee00020fc0000d05600028202222ee00020fc0000d05600028202222ee00020fc0000d05600004104444ee00020fc0000d05600004104444ee00020fc0000b016000fd22ee00020fc0000b016000fd22ee00020fc0000d016000fe140054ee00020fc0000d016000fe140054ee00020fc0000c0060fd000020ee00020fc0000c0060fd000020ee00020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000f0760007c000038c380f000020fc0000f0760007c000038c380f000020fc0000f076000660000600180f000020fc0000f076000660000600180f000020fc00010086000666c78f9c183c0f100020fc00010086000666c78f9c183c0f100020fc000100860007c70cc60c18660f100020fc000100860007c70cc60c18660f100020fc000100860006060cc60c187e0f100020fc000100860006060cc60c187e0f100020fc0000f0760006060cc60c186f000020fc0000f0760006060cc60c186f000020fc0001008600060607861e3c3c0f100020fc0001008600060607861e3c3c0f100020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000070003e8ff01c000070003e8ff01c00002e50000a0008f00a0008300a0008d00a10096000604000000000000a0009700ff}\par}}\hich\af4\dbch\af4\loch\f4 The Debug menu contains commands that \hich\af4\dbch\af4\loch\f4 allow you to operate the source-level debugger.  All of the source-level debug options require the compiler to generate special debug code}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug code}}}{\hich\af4\dbch\af4\loch\f4 .  Many compilers support the +d flag to generate this debug code.  If they do not, these debugging\hich\af4\dbch\af4\loch\f4  options cannot be used.  Chapter 4 has information about debugging desktop programs, as well as a tutorial on the debugger itself.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318215}\hich\af4\dbch\af4\loch\f4 Step{\*\bkmkend _Toc495318215}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step command\bxe }}}{\hich\af4\dbch\af4\loch\f4 When you select Step, Trace, or Go, the first thing that happens is the system checks to see if\hich\af4\dbch\af4\loch\f4  the program in the front window has been compiled.  If not, the front window is compiled to memory, and then executed in the selected debug mode.  If the program has already been compiled, the disk copy of the program is loaded and executed.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step co\hich\af4\dbch\af4\loch\f4 mmand}}}{\hich\af4\dbch\af4\loch\f4 When you select the Step command, your program starts executing, but stops when it gets to the first executable line.  A small arrow appears in the source window, pointing to the line that will be executed next.  At this point, you can use any of t\hich\af4\dbch\af4\loch\f4 he debugging commands.\par \hich\af4\dbch\af4\loch\f4 Repeated use of the Step command steps through your program, one line at a time.  As this happens, the arrow pointing to the current line will be updated.  Using this method, you can actually watch your program execute, quickly locat\hich\af4\dbch\af4\loch\f4 ing problem spots.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window\bxe }}}{\hich\af4\dbch\af4\loch\f4 If you are using a Variables window, all variable values in the window are updated after each Step command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318216}\hich\af4\dbch\af4\loch\f4 Step Through{\*\bkmkend _Toc495318216}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step through command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step command}}}{\hich\af4\dbch\af4\loch\f4 If you encounter a function call wh\hich\af4\dbch\af4\loch\f4 ile you are stepping through a program using the Step command, you will step right into the function, executing its commands one by one until it returns to the subroutine which called it.  Many times, you do not want to step through each line of the subro\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 tine.  Instead, you would rather concentrate on one function, assuming that the subroutines called work correctly.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stop command}}}{\hich\af4\dbch\af4\loch\f4 The Step Through command helps you do this.  It works exactly like the Step command until you come to a line with a func\hich\af4\dbch\af4\loch\f4 tion call.  On those lines, the function is executed at full speed.  Execution of the stepped-through subroutine will be terminated if a run-time error is detected, a break point is encountered, or the Stop command is selected from the Debug menu.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318217}\hich\af4\dbch\af4\loch\f4 Trace{\*\bkmkend _Toc495318217}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables window}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 step command}}}{\hich\af4\dbch\af4\loch\f4 When you use the Trace command, the program starts stepping automatically.  The Variables window still gets updated after each line is executed, and you can still watch the flow of the program as the arrow moves \hich\af4\dbch\af4\loch\f4 through each line that is executed.  At any time, you can use the Step command to stop the trace.  That does not stop the execution of the program; it only pauses, waiting for the next debug command.  Step, Step Through, Trace, Go, Go to Next Return, and \hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 top can all be used.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trace command\bxe }}}{\par \hich\af4\dbch\af4\loch\f4 If you want to pause during a trace, move the cursor to the right side of the menu bar}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 menu bar}}}{\hich\af4\dbch\af4\loch\f4  and hold the mouse button down.  Program execution will cease until you let up on the mouse button.  As so\hich\af4\dbch\af4\loch\f4 on as you release the mouse button, the trace will resume.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318218}\hich\af4\dbch\af4\loch\f4 Go{\*\bkmkend _Toc495318218}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 go command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stop command}}}{\hich\af4\dbch\af4\loch\f4 When you select the Go command, your program starts executing at full speed.  It will continue executing until it is finished, a break point is reached\hich\af4\dbch\af4\loch\f4 , or the Stop command is issued.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318219}\hich\af4\dbch\af4\loch\f4 Go to Next Return{\*\bkmkend _Toc495318219}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This command is used to allow a subroutine to run to completion.  If you have been stepping or tracing through a subroutine, and you get to a point where you do not need to watch the remainder of the subro\hich\af4\dbch\af4\loch\f4 utine execute, simply use the Go to Next Return command.  The program will execute at full speed until the end of the subroutine.  You will end up in step mode, with the debugging arrow pointing to the line in the source window which comes after the line \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 hich called the subroutine.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 goto next return command\bxe }}}{\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318220}\hich\af4\dbch\af4\loch\f4 Stop{\*\bkmkend _Toc495318220}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stop command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Stop command terminates execution of the program.  Any program that was compiled with debugging turned on can be stopped this way, whether or not it was starte\hich\af4\dbch\af4\loch\f4 d using the debug commands.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318221}\hich\af4\dbch\af4\loch\f4 Profile{\*\bkmkend _Toc495318221}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 profile command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The Profile command helps you find the functions where your program is spending the most time.  It returns the following three statistics about the execution of your program:  the number of tim\hich\af4\dbch\af4\loch\f4 es each subroutine and main program was called; the number of heartbeats that occurred during each subroutine and main program; the percent of heartbeats for each subroutine and main program as a function of the total number of heartbeats generated during\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the entire execution.\par \hich\af4\dbch\af4\loch\f4 The Profiler is a routine which is installed into the heart-beat interrupt handler of the computer.  It maintains a stack of pointers to profiling information.  Upon entry to a new subroutine, the subroutine's name is added to the sta\hich\af4\dbch\af4\loch\f4 ck, and profiling counters are incremented.  When entering a subroutine which is already included in the stack, the pointer to the subroutine's information is accessed and the appropriate counters are incremented.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 profiler}}}{\hich\af4\dbch\af4\loch\f4 The information returned \hich\af4\dbch\af4\loch\f4 by Profile can be quite accurate for some programs, but be somewhat misleading for others.  The Profiler works by counting heartbeats.  A heartbeat occurs 60 times each second.  Each time a heartbeat occurs, the heartbeat counter for the current subroutin\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  is incremented.  If the subroutines in your program are very short, they may not take enough CPU time for a heartbeat to occur.  If the program runs for a long time, the impact of this problem is reduced.  Counting heartbeats is, after all, a statistical\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 process.  The larger your sample, the better the results will be.\par \hich\af4\dbch\af4\loch\f4 Another potential problem area is disabling interrupts.  Heartbeats are interrupts \endash  disabling interrupts stops the process of counting heartbeats.  The most common culprit is GS/OS, which d\hich\af4\dbch\af4\loch\f4 isables interrupts while reading and writing to the disk.\par \hich\af4\dbch\af4\loch\f4 To obtain the best results from the Profiler, then, use it on a long execution.  Be suspicious of statistics for programs that have very short, fast subroutines, or that perform lots of disk I/O.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318222}\hich\af4\dbch\af4\loch\f4 Se\hich\af4\dbch\af4\loch\f4 t/Clear Break Points{\*\bkmkend _Toc495318222}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 set/clear break points command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 break points}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trace command}}}{\hich\af4\dbch\af4\loch\f4 Break points are used when you want to execute up to some predetermined place in your program, then pause.  For example, if you know that the first 50\hich\af4\dbch\af4\loch\f4 0 lines of your program are working correctly, but you need to step through the 20 lines after that, it would take a great deal of time to get to the suspected bug using the Step or Trace commands.  You can, however, set a break point.  You would start by\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 setting a break point at line 500, then execute the program using one of the Compile commands.  When your program reached line 500, execution would stop, and the arrow marker would point to line 500.  You could then use the debug commands to examine the a\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ea of interest.\par \hich\af4\dbch\af4\loch\f4 There is no limit to the number of break points that can be placed in a compiled program.\par \hich\af4\dbch\af4\loch\f4 To set a break point in a compiled program, start by selecting the line or lines in the source window where a break point is to occur.  With the lines\hich\af4\dbch\af4\loch\f4  selected, apply the Set/Clear Break Point command.  A purple X will appear to the left of the line, indicating that the line has a break point.\par \hich\af4\dbch\af4\loch\f4 To remove an existing break point, select the line and use the Set/Clear Break Point command again.  The X that\hich\af4\dbch\af4\loch\f4  indicates a break point will vanish.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318223}\hich\af4\dbch\af4\loch\f4 Set/Clear Auto-Go{\*\bkmkend _Toc495318223}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There may be places in your program that you always want the Step and Trace commands to skip.  That is where the Set/Clear Auto-Go command is used.  Any lines that have been set for auto-go will execu\hich\af4\dbch\af4\loch\f4 te at full speed, even if you are using the Step and Trace commands.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 auto-go command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trace command}}}{\par \hich\af4\dbch\af4\loch\f4 To mark lines for auto-go, select the lines and then invoke this command.  A green spot will appear to the left of the selected lines.  To\hich\af4\dbch\af4\loch\f4  clear auto-go, select the lines and apply the command again.\par \hich\af4\dbch\af4\loch\f4 A line cannot be marked for both auto-go and as a break point.  If you select a line for auto-go, any existing break point is removed.  Similarly, marking a line for a break point will remove it\hich\af4\dbch\af4\loch\f4 s auto-go status.{\*\bkmkend debugMenu}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug menu}{\rxe debugMenu}\bxe }}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 debugger{\rxe debugMenu}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318224}\hich\af4\dbch\af4\loch\f4 The Languages Menu{\*\bkmkend _Toc495318224}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\shp{\*\shpinst\shpleft6912\shptop67\shpright7852\shpbottom2527\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz14\shplid1043{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw47\pich123\picwgoal940\pichgoal2460\macpict\bliptag-458826097\blipupi72{\*\blipuid e4a6de8f9dee94e69be433c11cda83a3}4eac010c012901870158001102ff0c00ffffffff01290000010c000001580000018700000000000000a0008200a10064000a53504e5403e80001000000a10064000e53504e540cd0010c012901870158001e0001000a0000000002e7025200220001ff9dffff00a100c00702252050322d763136202d20436f7079726967687420313939312053696c69636f6e20426561636820536f6674776172652c20496e632e0d75736572646963742f6d64206b6e6f776e7b63757272656e7464696374206d642065717d7b66616c73657d6966656c73657b62757d69662063757272656e74646963742f50325f64206b6e6f776e206e6f747b2f50325f627b50325f640d626567696e7d62696e64206465662f50325f642033332064696374206465662075736572646963742f6d64206b6e6f776e7b63757272656e7464696374206d642065717d7b66616c73657d6966656c73652050325f6220647570206475700d2f6d6b2065786368206465667b6d642f706174206b6e6f776e206d642f7367206b6e6f776e206d642f6772206b6e6f776e20616e6420616e647d7b66616c73657d6966656c73652f706b2065786368206465667b6d640d2f73657454784d6f6465206b6e6f776e7d7b66616c73657d6966656c73652f736b206578636820646566206d6b7b6d642f786c206b6e6f776e7d7b66616c73657d6966656c73652f786b2065786368206465662f627b62696e64206465667d62696e64206465662f73617b6d61747269782063757272656e746d61747269782050325f74700d636f6e63617420616c6f616420706f707d622f73627b6d61747269782063757272656e746d6174726978206578636820636f6e6361742050325f7470206d617472697820696e766572746d617472697820636f6e63617420616c6f61640d706f707d622f73657b6d6174726978206173746f7265207365746d61747269787d622f62627b67736176652050325f747020636f6e636174206e657770617468206d6f7665746f7d622f62637b6375727665746f7d622f626c0d7b6c696e65746f7d622f62787b636c6f7365706174687d622f62707b677361766520656f66696c6c2067726573746f72657d622f62667b7363616c652031207365746c696e657769647468207374726f6b657d622f62650d7b67726573746f72657d622f707b2f67662066616c7365206465667d6220702f677b2f67662074727565206465667d6220706b7b2f5f7061742f706174206c6f6164206465662f5f67722f6772206c6f6164206465667d7b2f5f67720d7b36342e302064697620736574677261797d627d6966656c736520736b7b2f5f73544d2f73657454784d6f6465206c6f6164206465667d69662f67787b2f74672065786368206465667d6220302067782f78367b6d6b7b61762036382067740d7b66616c73657d69667d69667d622f627073203820737472696e67206465662f62706d5b38203020302038203020305d6465662f6270707b6270737d6465662f6f62707b677361766520736574726762636f6c6f722062707320636f707920706f700d64757020302067657420382064697620666c6f6f72206376692038206d756c203120696e64657820322067657420382064697620666c6f6f72206376692038206d756c203220696e64657820312067657420382064697620666c6f6f72206376692038206d756c200d38203420696e64657820332067657420382064697620666c6f6f72206376692038206d756c7b3220696e6465782038203320696e6465787b3120696e646578206773617665207472616e736c61746520382038207363616c65203820382066616c73652062706d2f6270700d6c6f616420696d6167656d61736b2067726573746f72657d666f7220706f707d666f7220706f7020706f7020706f702067726573746f72657d6220656e642050325f6220706b20656e647b2f7061747b50325f622067667b656e6420706f702073670d50325f62206d6b20656e647b61762036382067747b706f707d69667d69667d7b2f5f706174206c6f616420656e6420657865637d6966656c73657d62696e64206465667d7b2f7061747b50325f6220706f70205f677220656e647d62696e640d6465667d6966656c73652050325f6220736b20656e647b2f73657454784d6f64657b50325f622f5f73544d206c6f616420656e6420657865632050325f622074672064757020302067657b2f5f6772206c6f616420656e6420657865637d0d7b706f7020656e647d6966656c73657d62696e64206465667d7b2f73657454784d6f64657b706f702050325f622074672064757020302067657b2f5f6772206c6f616420656e6420657865637d7b706f7020656e647d6966656c73657d62696e640d6465667d6966656c73652050325f6220786b20656e647b50325f642f5f786c2f786c206c6f6164207075742f786c7b50325f62203220636f70792050325f7470203420676574206164642050325f747020342033202d3120726f6c6c207075740d50325f7470203520676574206164642050325f747020352033202d3120726f6c6c207075742f5f786c206c6f616420656e6420657865637d62696e64206465667d69667d69660d00a100c0212b25205033202d20763120436f7079726967687420313939312053696c69636f6e20426561636820536f6674776172652c20696e632e0d75736572646963742f50335f64206b6e6f776e206e6f747b757365726469637420626567696e2f50335f64203135302064696374206465662050335f6420626567696e2073797374656d646963742f63757272656e747061636b696e670d6b6e6f776e206475707b63757272656e747061636b696e6720657863682074727565207365747061636b696e677d69662f617b62696e64206465667d62696e64206465662f627b65786368206465667d612f647b30206465667d610d2f61537b66616c7365206465667d612f637b6e756c6c206465667d612f657b757365726469637420626567696e2050335f6420656e6420626567696e2f6620622f67206220636f756e7464696374737461636b0d736176652066203220616464203220726f6c6c20636f756e742066207375622f6820622f67206c6f616420656e647b657865637d73746f7070656420757365726469637420626567696e2050335f6420656e6420626567696e2f6920620d636f756e742068207375627b706f707d72657065617420692033203120726f6c6c20726573746f726520636f756e7464696374737461636b2065786368207375627b656e647d72657065617420656e647d612f727b2f6a20622f6b20620d2f6c20622f6d2061532f6e20632f71206c6f616420656e647b657865637d73746f7070656420757365726469637420626567696e2050335f6420656e6420626567696e7b636c6561722f6d2061537d6966206d206a20726573746f72650d7d612f737b2f74206b206465662f75206c206465662f76206d206465662f77206e206465662f6b20622f6c20622f6d2061532f6e20632f71206c6f616420656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e0d2f6b2074206465662f6c2075206465662f6d2076206465662f6e2077206465667d612f6f7b2f6a20622f6b20622f6c20622f6d2061532f6e20637b63757272656e7466696c6520746f6b656e206e6f747b66616c736520657869747d69660d6475702064757020747970652f6e616d657479706520657120657863682078636865636b20616e647b656e64206c6f616420757365726469637420626567696e2050335f6420656e6420626567696e7d69662f71206c6f616420656e640d7b657865637d73746f7070656420757365726469637420626567696e2050335f6420656e6420626567696e7b66616c736520657869747d6966206d7b7472756520657869747d69667d6c6f6f702063757272656e74726762636f6c6f722063757272656e746c696e657769647468206a20726573746f72650d7365746c696e65776964746820736574726762636f6c6f727d612f78203130206172726179206465662f7920642f7a7b6475702f726573746f7265206c6f61642065717b706f7020706f707d7b6475702f73617665206c6f61642065717b706f70206e756c6c7d7b6475702064757020647570206475702f666f720d6c6f616420657120657863682f666f72616c6c206c6f6164206571206f7220657863682f726570656174206c6f6164206571206f7220657863682f6c6f6f70206c6f6164206571206f727b2f412062207820792f6e206c6f6164207075740d2f792079203120616464206465662f6e20627b427d412f792079203120737562206465662f6e2078207920676574206465667d7b6475702f65786563206c6f61642065717b706f702f71206c6f616420656e6420657865632075736572646963740d626567696e2050335f6420656e6420626567696e7d7b6475702f6966656c7365206c6f61642065717b706f702f4320622f4420627b2f447d7b2f437d6966656c7365206c6f61642f71206c6f616420656e6420657865632075736572646963740d626567696e2050335f6420656e6420626567696e7d7b6475702f6966206c6f61642065717b706f702f4420627b2f44206c6f61642f71206c6f616420656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d69667d7b2f4520640d6c7b6475702073797374656d646963742065786368206b6e6f776e7b6c6f6164203120696e6465782065717b706f70206b20452067657420657865632f6d20747275652064656620657869747d69667d7b706f707d6966656c73652f452045203120616464206465667d666f72616c6c206c206c656e67746820452065710d7b656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d69667d6966656c73657d6966656c73657d6966656c73657d6966656c73657d6966656c73657d6966656c73657d612f427b2f6e206c6f61642f71206c6f61640d656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d612f717b6475702078636865636b7b6475702064757020747970652f617272617974797065206571206578636820747970652f7061636b6564617272617974797065206571206f720d7b7b6475702078636865636b7b64757020747970652f6e616d65747970652065717b6c6f616420747275657d7b66616c73657d6966656c736520757365726469637420626567696e2050335f6420656e6420626567696e2f462062206475702064757020747970650d2f617272617974797065206571206578636820747970652f7061636b6564617272617974797065206571206f727b467b2f71206c6f616420656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d69667d7b64757020747970650d2f6f70657261746f72747970652065717b7a7d7b656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d6966656c73657d6966656c736520656e647d69667d666f72616c6c7d7b64757020747970652f6f70657261746f72747970652065710d7b757365726469637420626567696e2050335f6420656e6420626567696e207a20656e647d7b657865637d6966656c73657d6966656c73657d69667d612f705b2f696d6167652f636f6c6f72696d6167652f696d6167656d61736b5d6465660d2f61465b7b61477d7b61487d7b696d6167656d61736b7d62696e645d6465662f63696d7b757365726469637420626567696e2050335f6420656e6420626567696e20702061462073617665206f20706f7020656e647d612f61497b614a7b67736176650d614b20614c203320696e6465782069647472616e73666f726d207472616e736c61746520614d2031203420696e646578203420696e6465787b614e7d696d6167652067726573746f72652f614f20642f614d20642f614a2061537d69660d7d612f61477b3220696e6465782038206e657b696d6167657d7b3420696e6465782063766920737472696e672f614e20622f6150203020737472696e67206465662f615120642f614a2061532f614f20642f614d2064203020310d3520696e6465782031207375627b2f614c206220302031203620696e6465782031207375627b6151206150206c656e6774682067657b3120696e6465782064757020747970652f737472696e6774797065206e657b657865637d69660d2f615020622f615120647d6966206150206151206765742f61512061512031206164642064656620647570203235352065717b706f7020706f702061497d7b614e20614f2033202d3120726f6c6c207075742f614f20614f20310d616464206465662f614d20614d2031206164642064656620614a206e6f747b2f614b20622f614d2031206465662f614a2074727565206465667d7b706f707d6966656c73657d6966656c73657d666f722061497d666f7220706f700d347b706f707d7265706561747d6966656c73657d612f61527b614a7b677361766520614b20614c203520696e6465782069647472616e73666f726d207472616e736c61746520614d2031203620696e646578203620696e6465780d7b614e7d66616c7365203620696e64657820636f6c6f72696d6167652067726573746f72652f614f20642f614d20642f614a2061537d69667d612f61487b3420696e6465782038206e65203220696e646578206f727b636f6c6f72696d6167650d7d7b64757020312065717b706f7020706f702061477d7b64757020332065717b3620696e646578206376692033206d756c20737472696e672f614e20622f6150203020737472696e67206465662f615120642f614a2061532f614f20640d2f614d206420302031203720696e6465782031207375627b2f614c206220302031203820696e6465782031207375627b6151206150206c656e6774682067657b3320696e6465782064757020747970652f737472696e6774797065206e650d7b657865637d69662f615020622f615120647d6966206150206151206765742f615120615120312061646420646566206150206151206765742f615120615120312061646420646566206150206151206765742f6151206151203120616464206465660d64757020323535206571203220696e6465782032353520657120616e64203320696e6465782032353520657120616e647b347b706f707d7265706561742061527d7b614e20614f2035202d3120726f6c6c207075742f614f20614f0d31206164642064656620614e20614f2034202d3120726f6c6c207075742f614f20614f2031206164642064656620614e20614f2033202d3120726f6c6c207075742f614f20614f203120616464206465662f614d20614d203120616464206465660d614a206e6f747b2f614b20622f614d2031206465662f614a2074727565206465667d7b706f707d6966656c73657d6966656c73657d666f722061527d666f7220377b706f707d7265706561747d7b0d64757020342065717b3620696e646578206376692034206d756c20737472696e672f614e20622f6150203020737472696e67206465662f615120642f614a2061532f614f20642f614d206420302031203720696e6465782031207375620d7b2f614c206220302031203820696e6465782031207375627b6151206150206c656e6774682067657b3320696e6465782064757020747970652f737472696e6774797065206e657b657865637d69662f615020622f615120647d69660d6150206151206765742f615120615120312061646420646566206150206151206765742f615120615120312061646420646566206150206151206765742f615120615120312061646420646566206150206151206765742f6151206151203120616464206465660d64757020323535206571203220696e6465782032353520657120616e64203320696e6465782032353520657120616e64203420696e6465782032353520657120616e647b357b706f707d7265706561742061527d7b614e0d614f2036202d3120726f6c6c207075742f614f20614f2031206164642064656620614e20614f2035202d3120726f6c6c207075742f614f20614f2031206164642064656620614e20614f2034202d3120726f6c6c207075742f614f20614f0d31206164642064656620614e20614f2033202d3120726f6c6c207075742f614f20614f203120616464206465662f614d20614d2031206164642064656620614a206e6f747b2f614b20622f614d2031206465662f614a2074727565206465660d7d7b706f707d6966656c73657d6966656c73657d666f722061527d666f7220377b706f707d7265706561747d7b636f6c6f72696d6167657d6966656c73657d6966656c73657d6966656c73657d6966656c73650d7d612f475b2f73686f772f6173686f772f776964746873686f772f61776964746873686f772f6b73686f775d6465662f485b7b497d7b30203020302036203320726f6c6c204a7d62696e647b3020302033202d3120726f6c6c204a7d0d62696e647b4a7d7b65786368202f4b206220497d62696e645d6465662f6674707b2f4c20622f4d20622f4e20622f4b20632f4f204d7b327d7b317d6966656c736520646566204720482034202d3120726f6c6c207220706f707d0d612f497b357b307d7265706561742036202d3120726f6c6c204a7d612f505b2f73686f772f73657463616368656465766963652f7365746368617277696474685d6465662f515b7b757365726469637420626567696e2050335f640d656e6420626567696e2f522052203120616464206465662f532063757272656e74666f6e74206465662063757272656e74706f696e74207472616e73666f726d2f5420622f5520622052204f2065717b2f562063757272656e74666f6e740d6465662f572055206465662f582054206465662f592074727565206465667d696620656e6420706f707d62696e647b367b706f707d7265706561747d62696e647b706f7020706f707d62696e645d6465662f5a2820296465660d2f61757b6d6f7665746f7b616720736574666f6e74205a20656e642067736176652030207365746772617920737472696e6777696474682067726573746f726520757365726469637420626567696e2050335f6420656e6420626567696e20726d6f7665746f2f4b206c6f6164206e756c6c206e650d7b2f616820616820312061646420646566206168206161206c656e677468206c657b616920616120616820676574204b7d69667d7b616320616220726d6f7665746f2061692061642065717b616620616520726d6f7665746f0d7d69667d6966656c73657d73746f707065642063757272656e746469637420757365726469637420626567696e2050335f64206e657b50335f6420656e6420626567696e7d7b656e647d6966656c73657d612f5f646f546578747572655061742061530d2f4a7b2f616120622f616220622f616320622f616420622f616520622f616620622067736176652063757272656e74666f6e74206475702f5620622f616720622f592061532f5320632f5720642f5820642f50335f64780d642f50335f6479206420616720626567696e20466f6e7454797065203320657120656e64204d204e206f7220616e647b67736176652063757272656e74706f696e74206e65777061746820313030302064757020647570206475700d6d6f7665746f206c696e65746f20636c6f73657061746820636c6970206d6f7665746f2f52206420616720626567696e20466f6e744d617472697820636f6e63617420302030207472616e73666f726d206e65672065786368206e65670d657863682069647472616e73666f726d207472616e736c6174652061672036352f4275696c6443686172206c6f616420656e647b657865637d50205120732067726573746f726520597b52204d7b367d7b357d6966656c73652065717b2f560d53206465662f572055206465662f582054206465667d69662052204d7b337d7b327d6966656c7365206e657b2f5320637d69662f50335f64782057206465662f50335f6479205820646566205720582069647472616e73666f726d2f580d622f5720622f56205620616720626567696e20466f6e744d617472697820656e64206d616b65666f6e74206465662053206e756c6c206e657b2f53205320616720626567696e20466f6e744d617472697820656e64206d616b65666f6e740d6465667d69667d7b2f5320637d6966656c73657d6966205f646f546578747572655061747b73797374656d646963742f6d616b657061747465726e206b6e6f776e7d7b66616c73657d6966656c73657b6d61747269782063757272656e746d61747269780d50335f746d207365746d617472697820572058207472616e736c6174652031202d31207363616c652030207068207472616e736c61746520747220616c6f616420706f7020706f7020706f70206e65672065786368206e65672065786368207472616e736c6174650d73657474657874757265706174207365746d617472697820572058207472616e736c6174652057205820726d6f7665746f2f616820642061617b2f61692062205a203020616920707574205620736574666f6e742063757272656e74706f696e74205a2073686f772061757b657869747d69667d666f72616c6c0d7d7b3130207365746c696e6577696474682f616820642063757272656e74706f696e74206e65777061746820302030206d6f7665746f20302030206c696e65746f20636c6f736570617468206d6f7665746f2061617b2f61692062205a20300d6169207075742063757272656e74706f696e74205620736574666f6e742057205820726d6f7665746f20636f756e7420312061646420647570203120726f6c6c205a20747275657b63686172706174687d73746f7070656420636f756e740d636f756e74202d3120726f6c6c207375627b706f707d7265706561742063757272656e74706f696e747b4c7d30206520706f70206e6577706174682030206475702064757020647570206d6f7665746f206c696e65746f0d636c6f736570617468206d6f7665746f2061757b657869747d69667d666f72616c6c7d6966656c73652067726573746f72652053206e756c6c206e657b67736176652057205820726d6f7665746f203020736574677261792f616820640d61617b2f61692062205a203020616920707574205320736574666f6e742063757272656e74706f696e74205a2073686f772061757b657869747d69667d666f72616c6c2067726573746f72657d69662f4b20632f5f646f546578747572655061742061537d612f61787b3520696e64657820340d696e646578206774203820696e646578203320696e646578206c74203620696e646578203520696e646578206774203920696e646578203420696e646578206c7420616e6420616e6420616e645b3130203220726f6c6c20636c656172746f6d61726b0d7d612f66707b74707b616c6f616420706f7020312031203420696e6465787b677361766520706f70203320696e64657820616c6f616420706f70207472616e736c61746520747220616c6f616420706f707b636c6970706174687d73746f707065647b2d31303030302064757020647570206475707d0d7b7061746862626f787d6966656c73652061787b6673617b657865637d666f72616c6c7d6966203320696e64657820616c6f616420706f70203220696e646578206164642065786368203320696e646578206164642065786368203520696e6465780d6173746f726520706f702067726573746f72657d666f7220347b706f707d7265706561747d666f72616c6c7d612f61457b73797374656d646963742f766d7265636c61696d206b6e6f776e7b3120766d7265636c61696d7d696620766d737461747573206578636820737562206578636820706f702065786368203130303030206164640d6c747b747872457272537472203d20666c7573682073746f707d69667d612f6469617b75736572646963742f50335f642067657420626567696e7b7b72656164737472696e677d7d7b7b72656164686578737472696e677d7d6966656c73652f615920620d2f617920622f61722061797b387d7b657863687d6966656c7365206465662f617320622f617420622f61542061742061797b35206d756c7d7b617220312065717b3820646976206365696c696e677d69667d6966656c736520726f756e6420637669206465660d2f62612073797374656d646963742f636f6c6f72696d616765206b6e6f776e206465662f62622061797b62617b2e387d7b2e327d6966656c73657d7b317d6966656c7365206465662061797b2f62632061742034206d756c20726f756e6420637669206465660d2f626420626320737472696e67206465662f626520617420726f756e6420637669206465662f626620626520737472696e67206465667d69662f617a206154206173206d756c20726f756e64206376692064656620617a206262206d756c2061450d2f6155203330303030206262206469762061542064697620666c6f6f72206154206d756c20726f756e6420637669206465662f696120617a20615520646976206365696c696e6720637669206172726179206465662f6961692030206465660d7b2f614120617a206155206c657b617a7d7b61557d6966656c736520646566206961206961692061797b2f6267203020646566206141206262206d756c20726f756e642063766920737472696e672061412061542064697620726f756e64206376697b62610d7b6475702062672063757272656e7466696c6520626420615920706f7020707574696e74657276616c2f626720626720626320616464206465662063757272656e7466696c6520626620615920706f7020706f707d7b0d63757272656e7466696c6520626420615920706f7020706f70206475702062672063757272656e7466696c6520626620615920706f7020707574696e74657276616c2f626720626720626520616464206465667d6966656c73650d7d7265706561747d7b63757272656e7466696c6520614120737472696e6720615920706f707d6966656c7365207075742f69616920696169203120616464206465662f617a20617a206141207375622064656620617a2030206c657b657869747d69660d7d6c6f6f7020656e647d612f61447b696120696169206765742f69616920696169203120616464206465667d612f61567b6961206961692067657420615720617420676574696e74657276616c2f615720615720617420616464206465667d610d2f615a7b69612069616920676574206c656e677468206157206c657b2f69616920696169203120616464206465662f61572030206465667d69667d612f696d7b75736572646963742f50335f642067657420626567696e0d2f6961692030206465662f61572030206465662061797b73797374656d646963742f636f6c6f72696d616765206b6e6f776e7b7b61567d7b61567d7b61567d7b615620615a7d74727565203420636f6c6f72696d6167650d7d7b7b61447d696d6167657d6966656c73657d7b7b61447d696d6167657d6966656c736520656e647d612f736574746578747572657061747b3820646963742064757020626567696e2f5061747465726e547970652031206465660d2f5061696e74547970652031206465662f54696c696e67547970652031206465662f42426f78207472206465662f58537465702042426f782032206765742042426f7820302067657420737562206465662f59537465702042426f780d33206765742042426f7820312067657420737562206465662f5061696e7450726f637b706f702073617665206673617b657865637d666f72616c6c20726573746f72657d64656620656e64206d617472697820677361766520747020302067657420302067657420616c6f61640d706f70207472616e736c617465206d616b657061747465726e2067726573746f7265207365747061747465726e7d612f676f66696c6c69747b73797374656d646963742f6d616b657061747465726e206b6e6f776e7b736574746578747572657061740d7b656f66696c6c7d7b66696c6c7d6966656c73657d7b7b656f636c69707d7b636c69707d6966656c73652066707d6966656c73657d617b7365747061636b696e677d696620656e6420656e647d69660d0000a100c00081757365726469637420626567696e2050335f6420626567696e2f74787245727253747228412074657874757265207573656420696e2053757065725061696e7427732064726177206c6179657220697320746f6f206c6172676520746f207072696e74206f6e2074686973207072696e7465722e2964656620656e6420656e640d000007000000000022010d012affff00a100c0006832393720323638203120696e646578206e6567203120696e646578206e6567206d6174726978207472616e736c6174652033203120726f6c6c0d63757272656e74706f696e74203220636f7079206d6174726978207472616e736c6174652036203120726f6c6c0d002201860157010100a100c00084333434203339312063757272656e74706f696e74203120696e646578203620696e64657820737562203420696e646578203920696e64657820737562206469760d3120696e646578203620696e64657820737562203420696e646578203920696e64657820737562206469760d6d6174726978207363616c65203131203120726f6c6c0d00a100c0007e5b2039203120726f6c6c20636c656172746f6d61726b0d33203220726f6c6c206d617472697820636f6e6361746d61747269780d65786368206d617472697820636f6e6361746d61747269780d2f50325f74702065786368206465660d50325f62202d3120677820656e640d50325f62206d6b20656e647b626e7d69660d00a100c0003e6d61747269782063757272656e746d617472697820616c6f616420706f7020636f756e74203620726f6c6c0d50325f62206d6b20656e647b62757d69660d00a100c00046757365726469637420626567696e2050335f6420626567696e0d636f756e74202d3620726f6c6c0d6d6174726978206173746f7265202f50335f746d2065786368206465660d00a100c0001a656e6420656e642050325f62206d6b20656e647b626e7d69660d00070001000100220001ff9dffff00a10064000a53504e540bb8000a000000a10064001253504e540c30009000900013005a010900b700a10064000a53504e540c940001000100a0008e00a100c00031757365726469637420626567696e2050335f6420626567696e202f63696d206c6f616420656e6420656e6420657865630d00009880600013005a010900ba00000000000000000048000000480000000000080001000800000000032a8f2c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000013005a010900b8010c012901870158002404b1fff10004b1fff10004b1fff10004b1fff10004b1fff10004b1fff10009fcff010000b8fff10009fcff010000b8fff10009fcff010000b8fff10009fcff010000b8fff1002ffcff010000fafffc0001fffffc00fdfffc0007ffff0000ffff0000fefffc00fefffc00fefffd00fdfffd00fbfff1002ffcff010000fafffc0001fffffc00fdfffc0007ffff0000ffff0000fefffc00fefffc00fefffd00fdfffd00fbfff10046fcff010000fbff390000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f8fff10046fcff010000fbff390000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f8fff10042fcff010000fbff2f0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffb00fefffd00fbfff10042fcff010000fbff2f0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffb00fefffd00fbfff1003dfcff010000fbff0d0000ffff0000ffff0000ffff0000fefffc000fffff0000ffff0000ffff0000ffff0000fefffc0003ffff0000f7ff010000fcfff1003dfcff010000fbff0d0000ffff0000ffff0000ffff0000fefffc000fffff0000ffff0000ffff0000ffff0000fefffc0003ffff0000f7ff010000fcfff10036fcfffb00fefffc000affff0000ffff0000ffff00feff010000fefffc00fefffc0002ffff00feff010000fefffd00fdfffd00fbfff10036fcfffb00fefffc000affff0000ffff0000ffff00feff010000fefffc00fefffc0002ffff00feff010000fefffd00fdfffd00fbfff1000ce3fffd00edfffd00ebfff1000ce3fffd00edfffd00ebfff10004b1fff10004b1fff10004a8fffa0004a8fffa000a01ffffac0001fffffa000a01ffffac0001fffffa000a01ffffac0001fffffa000a01ffffac0001fffffa001b01fffff500fdfffe0001fffff200fefffc00feffdb0001fffffa001b01fffff500fdfffe0001fffff200fefffc00feffdb0001fffffa002001fffff60009ffff0000ffff0000fffff10001fffffb0001ffffdb00fbfffe002001fffff60009ffff0000ffff0000fffff10001fffffb0001ffffdb00fbfffe002001fffff60001fffffb00fcfffd00fdfffc0001fffffb0001ffffdb00fbfffe002001fffff60001fffffb00fcfffd00fdfffc0001fffffb0001ffffdb00fbfffe002801fffff500fdfffe000dffff0000ffff0000ffff0000fffffd0001fffffb0001ffffdb00fbfffe002801fffff500fdfffe000dffff0000ffff0000ffff0000fffffd0001fffffb0001ffffdb00fbfffe002401fffff2000bffff0000ffff0000ffff0000fbfffd0001fffffb0001ffffdb00fbfffe002401fffff2000bffff0000ffff0000ffff0000fbfffd0001fffffb0001ffffdb00fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffb0001ffffdb00fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffb0001ffffdb00fbfffe002201fffff500fdfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe002201fffff500fdfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe0004a4fffe0004a4fffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002e01fffff500fdfffd00fdfffe0000fffc0000fffe00fdfffe00fcfffd00fdfffc0001fffffc00fdfff500fbfffe002e01fffff500fdfffd00fdfffe0000fffc0000fffe00fdfffe00fcfffd00fdfffc0001fffffc00fdfff500fbfffe003e01fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0005ffff0000fffffb0001fffffb0007ffff0000ffff0000fdfffd0001fffff200fbfffe003e01fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0005ffff0000fffffb0001fffffb0007ffff0000ffff0000fdfffd0001fffff200fbfffe003901fffff60009ffff0000ffff0000fffffb00feff0000feff010000fcfffe00fcfffe0005ffff0000fffffd0001fffffd00fcfff500fbfffe003901fffff60009ffff0000ffff0000fffffb00feff0000feff010000fcfffe00fcfffe0005ffff0000fffffd0001fffffd00fcfff500fbfffe003a01fffff60005ffff0000fffffe00fdfffe00faff070000ffff0000fffffb0001fffffe00fdfffc0001fffffd0005ffff0000fffff600fbfffe003a01fffff60005ffff0000fffffe00fdfffe00faff070000ffff0000fffffb0001fffffe00fdfffc0001fffffd0005ffff0000fffff600fbfffe003e01fffff600fbfffb0012ffff0000ffff00ff00ffff0000ffff0000fffffb0009ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe003e01fffff600fbfffb0012ffff0000ffff00ff00ffff0000ffff0000fffffb0009ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe004901fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0019ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe004901fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0019ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe003401fffff60005ffff0000fffffe00fdfffe0001fffffe0001fffffe00fdfffd00fdfffd00fdfffe00fbfffe00fdfff500fbfffe003401fffff60005ffff0000fffffe00fdfffe0001fffffe0001fffffe00fdfffd00fdfffd00fdfffe00fbfffe00fdfff500fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001101fffff500fdfffd00fdffc400fbfffe001101fffff500fdfffd00fdffc400fbfffe001a01fffff6000dffff0000ffff0000ffff0000ffffc500fbfffe001a01fffff6000dffff0000ffff0000ffff0000ffffc500fbfffe001701fffffa0005ffff0000fffffb0001ffffc100fbfffe001701fffffa0005ffff0000fffffb0001ffffc100fbfffe001801fffffb0001fffffe0001fffffb0001ffffc100fbfffe001801fffffb0001fffffe0001fffffb0001ffffc100fbfffe001a08ffff0000ff0000fffffd0001fffffb0001ffffc100fbfffe001a08ffff0000ff0000fffffd0001fffffb0001ffffc100fbfffe001e01fffffe00fefffc000dffff0000ffff0000ffff0000ffffc500fbfffe001e01fffffe00fefffc000dffff0000ffff0000ffff0000ffffc500fbfffe001501fffffd0000fffa00fdfffd00fdffc400fbfffe001501fffffd0000fffa00fdfffd00fdffc400fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001d01fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdffdc00fbfffe001d01fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdffdc00fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffd0001ffffd900fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffd0001ffffd900fbfffe002401fffff600fcfffe0005ffff0000fffffe00fdfffc0001fffffd0001ffffd900fbfffe002401fffff600fcfffe0005ffff0000fffffe00fdfffc0001fffffd0001ffffd900fbfffe002501fffff60007ffff0000ffff0000fbfffb0001fffffd0001fffffd0001ffffd900fbfffe002501fffff60007ffff0000ffff0000fbfffb0001fffffd0001fffffd0001ffffd900fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe002201fffff600fcfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe002201fffff600fcfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002201fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdfffe0001ffffe100fbfffe002201fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdfffe0001ffffe100fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003001fffff60011ffff0000ffff0000ffff0000ffff0000fffffb0001fffffb0009ffff0000ffff0000ffffe100fbfffe003001fffff60011ffff0000ffff0000ffff0000ffff0000fffffb0001fffffb0009ffff0000ffff0000ffffe100fbfffe002c01fffff600fcfffe0005ffff0000fffffe00fdfffe0001fffffb0009ffff0000ffff0000ffffe100fbfffe002c01fffff600fcfffe0005ffff0000fffffe00fdfffe0001fffffb0009ffff0000ffff0000ffffe100fbfffe002401fffff60001fffffb00fbfffb0005ffff0000fffffb00fbff030000ffffe100fbfffe002401fffff60001fffffb00fbfffb0005ffff0000fffffb00fbff030000ffffe100fbfffe003301fffff60001fffffb0021ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003301fffff60001fffffb0021ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe002c01fffff60001fffffb0005ffff0000fffffe00fdfffd00fdfffe0007ffff0000ffff0000fbffe500fbfffe002c01fffff60001fffffb0005ffff0000fffffe00fdfffd00fdfffe0007ffff0000ffff0000fbffe500fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002d01fffff60001fffffa00fdfffe0000fffe0005ffff0000fffffe0003ffff0000fcff010000fcffe400fbfffe002d01fffff60001fffffa00fdfffe0000fffe0005ffff0000fffffe0003ffff0000fcff010000fcffe400fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe003001fffff60001fffff90001fffffd00feff0900ffff0000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe003001fffff60001fffff90001fffffd00feff0900ffff0000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe002901fffff60001fffff90001fffffd00fbff010000fdfffc00fdfffe0005ffff0000ffffe500fbfffe002901fffff60001fffff90001fffffd00fbff010000fdfffc00fdfffe0005ffff0000ffffe500fbfffe003101fffff60001fffff90001fffffd0002ffff00feff060000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe003101fffff60001fffff90001fffffd0002ffff00feff060000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe002c01fffff600fbfffe00fdfffe0001fffffe0004ff0000fffffe0003ffff0000fcff010000fcffe400fbfffe002c01fffff600fbfffe00fdfffe0001fffffe0004ff0000fffffe0003ffff0000fcff010000fcffe400fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002101fffff600fcfffe00fcfffd00fdfffe00fcfffd00fdfffd00fdffe400fbfffe002101fffff600fcfffe00fcfffd00fdfffe00fcfffd00fdfffd00fdffe400fbfffe003a01fffff6002dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe003a01fffff6002dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe002e01fffff600fcfffe00fcfffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffe00fdffe400fbfffe002e01fffff600fcfffe00fcfffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffe00fdffe400fbfffe003401fffff60001fffffb0004ffff00fffffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffb0001ffffe500fbfffe003401fffff60001fffffb0004ffff00fffffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffb0001ffffe500fbfffe003701fffff60001fffffb0025ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe003701fffff60001fffffb0025ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe002701fffff60001fffffb0005ffff0000fffffe00fdfffe00fcfffd00fdfffd00fdffe400fbfffe002701fffff60001fffffb0005ffff0000fffffe00fdfffe00fcfffd00fdfffd00fdffe400fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001f01fffff600fbff010000fcff090000ffff0000ffff0000fbffd400fbfffe001f01fffff600fbff010000fcff090000ffff0000ffff0000fbffd400fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe001c01fffff40001fffffd00fdfffc0001fffffb0001ffffd200fbfffe001c01fffff40001fffffd00fdfffc0001fffffb0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe002001fffff40001fffffd00fcff070000ffff0000fffffd0001ffffd200fbfffe002001fffff40001fffffd00fcff070000ffff0000fffffd0001ffffd200fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe001b01fffff600fdfffc0001fffffd00fdfffe0001ffffcf00fbfffe001b01fffff600fdfffc0001fffffd00fdfffe0001ffffcf00fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe0004a4fffe0004a4fffe0006fb00aafffe0006fb00aafffe0000a0008f00a10064000653504e5403e900a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx6911\posy66\absh2460\absw940\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw47\pich123\picwgoal940\pichgoal2460\macpict\bliptag-458826097\blipupi72{\*\blipuid e4a6de8f9dee94e69be433c11cda83a3}4eac010c012901870158001102ff0c00ffffffff01290000010c000001580000018700000000000000a0008200a10064000a53504e5403e80001000000a10064000e53504e540cd0010c012901870158001e0001000a0000000002e7025200220001ff9dffff00a100c00702252050322d763136202d20436f7079726967687420313939312053696c69636f6e20426561636820536f6674776172652c20496e632e0d75736572646963742f6d64206b6e6f776e7b63757272656e7464696374206d642065717d7b66616c73657d6966656c73657b62757d69662063757272656e74646963742f50325f64206b6e6f776e206e6f747b2f50325f627b50325f640d626567696e7d62696e64206465662f50325f642033332064696374206465662075736572646963742f6d64206b6e6f776e7b63757272656e7464696374206d642065717d7b66616c73657d6966656c73652050325f6220647570206475700d2f6d6b2065786368206465667b6d642f706174206b6e6f776e206d642f7367206b6e6f776e206d642f6772206b6e6f776e20616e6420616e647d7b66616c73657d6966656c73652f706b2065786368206465667b6d640d2f73657454784d6f6465206b6e6f776e7d7b66616c73657d6966656c73652f736b206578636820646566206d6b7b6d642f786c206b6e6f776e7d7b66616c73657d6966656c73652f786b2065786368206465662f627b62696e64206465667d62696e64206465662f73617b6d61747269782063757272656e746d61747269782050325f74700d636f6e63617420616c6f616420706f707d622f73627b6d61747269782063757272656e746d6174726978206578636820636f6e6361742050325f7470206d617472697820696e766572746d617472697820636f6e63617420616c6f61640d706f707d622f73657b6d6174726978206173746f7265207365746d61747269787d622f62627b67736176652050325f747020636f6e636174206e657770617468206d6f7665746f7d622f62637b6375727665746f7d622f626c0d7b6c696e65746f7d622f62787b636c6f7365706174687d622f62707b677361766520656f66696c6c2067726573746f72657d622f62667b7363616c652031207365746c696e657769647468207374726f6b657d622f62650d7b67726573746f72657d622f707b2f67662066616c7365206465667d6220702f677b2f67662074727565206465667d6220706b7b2f5f7061742f706174206c6f6164206465662f5f67722f6772206c6f6164206465667d7b2f5f67720d7b36342e302064697620736574677261797d627d6966656c736520736b7b2f5f73544d2f73657454784d6f6465206c6f6164206465667d69662f67787b2f74672065786368206465667d6220302067782f78367b6d6b7b61762036382067740d7b66616c73657d69667d69667d622f627073203820737472696e67206465662f62706d5b38203020302038203020305d6465662f6270707b6270737d6465662f6f62707b677361766520736574726762636f6c6f722062707320636f707920706f700d64757020302067657420382064697620666c6f6f72206376692038206d756c203120696e64657820322067657420382064697620666c6f6f72206376692038206d756c203220696e64657820312067657420382064697620666c6f6f72206376692038206d756c200d38203420696e64657820332067657420382064697620666c6f6f72206376692038206d756c7b3220696e6465782038203320696e6465787b3120696e646578206773617665207472616e736c61746520382038207363616c65203820382066616c73652062706d2f6270700d6c6f616420696d6167656d61736b2067726573746f72657d666f7220706f707d666f7220706f7020706f7020706f702067726573746f72657d6220656e642050325f6220706b20656e647b2f7061747b50325f622067667b656e6420706f702073670d50325f62206d6b20656e647b61762036382067747b706f707d69667d69667d7b2f5f706174206c6f616420656e6420657865637d6966656c73657d62696e64206465667d7b2f7061747b50325f6220706f70205f677220656e647d62696e640d6465667d6966656c73652050325f6220736b20656e647b2f73657454784d6f64657b50325f622f5f73544d206c6f616420656e6420657865632050325f622074672064757020302067657b2f5f6772206c6f616420656e6420657865637d0d7b706f7020656e647d6966656c73657d62696e64206465667d7b2f73657454784d6f64657b706f702050325f622074672064757020302067657b2f5f6772206c6f616420656e6420657865637d7b706f7020656e647d6966656c73657d62696e640d6465667d6966656c73652050325f6220786b20656e647b50325f642f5f786c2f786c206c6f6164207075742f786c7b50325f62203220636f70792050325f7470203420676574206164642050325f747020342033202d3120726f6c6c207075740d50325f7470203520676574206164642050325f747020352033202d3120726f6c6c207075742f5f786c206c6f616420656e6420657865637d62696e64206465667d69667d69660d00a100c0212b25205033202d20763120436f7079726967687420313939312053696c69636f6e20426561636820536f6674776172652c20696e632e0d75736572646963742f50335f64206b6e6f776e206e6f747b757365726469637420626567696e2f50335f64203135302064696374206465662050335f6420626567696e2073797374656d646963742f63757272656e747061636b696e670d6b6e6f776e206475707b63757272656e747061636b696e6720657863682074727565207365747061636b696e677d69662f617b62696e64206465667d62696e64206465662f627b65786368206465667d612f647b30206465667d610d2f61537b66616c7365206465667d612f637b6e756c6c206465667d612f657b757365726469637420626567696e2050335f6420656e6420626567696e2f6620622f67206220636f756e7464696374737461636b0d736176652066203220616464203220726f6c6c20636f756e742066207375622f6820622f67206c6f616420656e647b657865637d73746f7070656420757365726469637420626567696e2050335f6420656e6420626567696e2f6920620d636f756e742068207375627b706f707d72657065617420692033203120726f6c6c20726573746f726520636f756e7464696374737461636b2065786368207375627b656e647d72657065617420656e647d612f727b2f6a20622f6b20620d2f6c20622f6d2061532f6e20632f71206c6f616420656e647b657865637d73746f7070656420757365726469637420626567696e2050335f6420656e6420626567696e7b636c6561722f6d2061537d6966206d206a20726573746f72650d7d612f737b2f74206b206465662f75206c206465662f76206d206465662f77206e206465662f6b20622f6c20622f6d2061532f6e20632f71206c6f616420656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e0d2f6b2074206465662f6c2075206465662f6d2076206465662f6e2077206465667d612f6f7b2f6a20622f6b20622f6c20622f6d2061532f6e20637b63757272656e7466696c6520746f6b656e206e6f747b66616c736520657869747d69660d6475702064757020747970652f6e616d657479706520657120657863682078636865636b20616e647b656e64206c6f616420757365726469637420626567696e2050335f6420656e6420626567696e7d69662f71206c6f616420656e640d7b657865637d73746f7070656420757365726469637420626567696e2050335f6420656e6420626567696e7b66616c736520657869747d6966206d7b7472756520657869747d69667d6c6f6f702063757272656e74726762636f6c6f722063757272656e746c696e657769647468206a20726573746f72650d7365746c696e65776964746820736574726762636f6c6f727d612f78203130206172726179206465662f7920642f7a7b6475702f726573746f7265206c6f61642065717b706f7020706f707d7b6475702f73617665206c6f61642065717b706f70206e756c6c7d7b6475702064757020647570206475702f666f720d6c6f616420657120657863682f666f72616c6c206c6f6164206571206f7220657863682f726570656174206c6f6164206571206f7220657863682f6c6f6f70206c6f6164206571206f727b2f412062207820792f6e206c6f6164207075740d2f792079203120616464206465662f6e20627b427d412f792079203120737562206465662f6e2078207920676574206465667d7b6475702f65786563206c6f61642065717b706f702f71206c6f616420656e6420657865632075736572646963740d626567696e2050335f6420656e6420626567696e7d7b6475702f6966656c7365206c6f61642065717b706f702f4320622f4420627b2f447d7b2f437d6966656c7365206c6f61642f71206c6f616420656e6420657865632075736572646963740d626567696e2050335f6420656e6420626567696e7d7b6475702f6966206c6f61642065717b706f702f4420627b2f44206c6f61642f71206c6f616420656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d69667d7b2f4520640d6c7b6475702073797374656d646963742065786368206b6e6f776e7b6c6f6164203120696e6465782065717b706f70206b20452067657420657865632f6d20747275652064656620657869747d69667d7b706f707d6966656c73652f452045203120616464206465667d666f72616c6c206c206c656e67746820452065710d7b656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d69667d6966656c73657d6966656c73657d6966656c73657d6966656c73657d6966656c73657d6966656c73657d612f427b2f6e206c6f61642f71206c6f61640d656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d612f717b6475702078636865636b7b6475702064757020747970652f617272617974797065206571206578636820747970652f7061636b6564617272617974797065206571206f720d7b7b6475702078636865636b7b64757020747970652f6e616d65747970652065717b6c6f616420747275657d7b66616c73657d6966656c736520757365726469637420626567696e2050335f6420656e6420626567696e2f462062206475702064757020747970650d2f617272617974797065206571206578636820747970652f7061636b6564617272617974797065206571206f727b467b2f71206c6f616420656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d69667d7b64757020747970650d2f6f70657261746f72747970652065717b7a7d7b656e64206578656320757365726469637420626567696e2050335f6420656e6420626567696e7d6966656c73657d6966656c736520656e647d69667d666f72616c6c7d7b64757020747970652f6f70657261746f72747970652065710d7b757365726469637420626567696e2050335f6420656e6420626567696e207a20656e647d7b657865637d6966656c73657d6966656c73657d69667d612f705b2f696d6167652f636f6c6f72696d6167652f696d6167656d61736b5d6465660d2f61465b7b61477d7b61487d7b696d6167656d61736b7d62696e645d6465662f63696d7b757365726469637420626567696e2050335f6420656e6420626567696e20702061462073617665206f20706f7020656e647d612f61497b614a7b67736176650d614b20614c203320696e6465782069647472616e73666f726d207472616e736c61746520614d2031203420696e646578203420696e6465787b614e7d696d6167652067726573746f72652f614f20642f614d20642f614a2061537d69660d7d612f61477b3220696e6465782038206e657b696d6167657d7b3420696e6465782063766920737472696e672f614e20622f6150203020737472696e67206465662f615120642f614a2061532f614f20642f614d2064203020310d3520696e6465782031207375627b2f614c206220302031203620696e6465782031207375627b6151206150206c656e6774682067657b3120696e6465782064757020747970652f737472696e6774797065206e657b657865637d69660d2f615020622f615120647d6966206150206151206765742f61512061512031206164642064656620647570203235352065717b706f7020706f702061497d7b614e20614f2033202d3120726f6c6c207075742f614f20614f20310d616464206465662f614d20614d2031206164642064656620614a206e6f747b2f614b20622f614d2031206465662f614a2074727565206465667d7b706f707d6966656c73657d6966656c73657d666f722061497d666f7220706f700d347b706f707d7265706561747d6966656c73657d612f61527b614a7b677361766520614b20614c203520696e6465782069647472616e73666f726d207472616e736c61746520614d2031203620696e646578203620696e6465780d7b614e7d66616c7365203620696e64657820636f6c6f72696d6167652067726573746f72652f614f20642f614d20642f614a2061537d69667d612f61487b3420696e6465782038206e65203220696e646578206f727b636f6c6f72696d6167650d7d7b64757020312065717b706f7020706f702061477d7b64757020332065717b3620696e646578206376692033206d756c20737472696e672f614e20622f6150203020737472696e67206465662f615120642f614a2061532f614f20640d2f614d206420302031203720696e6465782031207375627b2f614c206220302031203820696e6465782031207375627b6151206150206c656e6774682067657b3320696e6465782064757020747970652f737472696e6774797065206e650d7b657865637d69662f615020622f615120647d6966206150206151206765742f615120615120312061646420646566206150206151206765742f615120615120312061646420646566206150206151206765742f6151206151203120616464206465660d64757020323535206571203220696e6465782032353520657120616e64203320696e6465782032353520657120616e647b347b706f707d7265706561742061527d7b614e20614f2035202d3120726f6c6c207075742f614f20614f0d31206164642064656620614e20614f2034202d3120726f6c6c207075742f614f20614f2031206164642064656620614e20614f2033202d3120726f6c6c207075742f614f20614f203120616464206465662f614d20614d203120616464206465660d614a206e6f747b2f614b20622f614d2031206465662f614a2074727565206465667d7b706f707d6966656c73657d6966656c73657d666f722061527d666f7220377b706f707d7265706561747d7b0d64757020342065717b3620696e646578206376692034206d756c20737472696e672f614e20622f6150203020737472696e67206465662f615120642f614a2061532f614f20642f614d206420302031203720696e6465782031207375620d7b2f614c206220302031203820696e6465782031207375627b6151206150206c656e6774682067657b3320696e6465782064757020747970652f737472696e6774797065206e657b657865637d69662f615020622f615120647d69660d6150206151206765742f615120615120312061646420646566206150206151206765742f615120615120312061646420646566206150206151206765742f615120615120312061646420646566206150206151206765742f6151206151203120616464206465660d64757020323535206571203220696e6465782032353520657120616e64203320696e6465782032353520657120616e64203420696e6465782032353520657120616e647b357b706f707d7265706561742061527d7b614e0d614f2036202d3120726f6c6c207075742f614f20614f2031206164642064656620614e20614f2035202d3120726f6c6c207075742f614f20614f2031206164642064656620614e20614f2034202d3120726f6c6c207075742f614f20614f0d31206164642064656620614e20614f2033202d3120726f6c6c207075742f614f20614f203120616464206465662f614d20614d2031206164642064656620614a206e6f747b2f614b20622f614d2031206465662f614a2074727565206465660d7d7b706f707d6966656c73657d6966656c73657d666f722061527d666f7220377b706f707d7265706561747d7b636f6c6f72696d6167657d6966656c73657d6966656c73657d6966656c73657d6966656c73650d7d612f475b2f73686f772f6173686f772f776964746873686f772f61776964746873686f772f6b73686f775d6465662f485b7b497d7b30203020302036203320726f6c6c204a7d62696e647b3020302033202d3120726f6c6c204a7d0d62696e647b4a7d7b65786368202f4b206220497d62696e645d6465662f6674707b2f4c20622f4d20622f4e20622f4b20632f4f204d7b327d7b317d6966656c736520646566204720482034202d3120726f6c6c207220706f707d0d612f497b357b307d7265706561742036202d3120726f6c6c204a7d612f505b2f73686f772f73657463616368656465766963652f7365746368617277696474685d6465662f515b7b757365726469637420626567696e2050335f640d656e6420626567696e2f522052203120616464206465662f532063757272656e74666f6e74206465662063757272656e74706f696e74207472616e73666f726d2f5420622f5520622052204f2065717b2f562063757272656e74666f6e740d6465662f572055206465662f582054206465662f592074727565206465667d696620656e6420706f707d62696e647b367b706f707d7265706561747d62696e647b706f7020706f707d62696e645d6465662f5a2820296465660d2f61757b6d6f7665746f7b616720736574666f6e74205a20656e642067736176652030207365746772617920737472696e6777696474682067726573746f726520757365726469637420626567696e2050335f6420656e6420626567696e20726d6f7665746f2f4b206c6f6164206e756c6c206e650d7b2f616820616820312061646420646566206168206161206c656e677468206c657b616920616120616820676574204b7d69667d7b616320616220726d6f7665746f2061692061642065717b616620616520726d6f7665746f0d7d69667d6966656c73657d73746f707065642063757272656e746469637420757365726469637420626567696e2050335f64206e657b50335f6420656e6420626567696e7d7b656e647d6966656c73657d612f5f646f546578747572655061742061530d2f4a7b2f616120622f616220622f616320622f616420622f616520622f616620622067736176652063757272656e74666f6e74206475702f5620622f616720622f592061532f5320632f5720642f5820642f50335f64780d642f50335f6479206420616720626567696e20466f6e7454797065203320657120656e64204d204e206f7220616e647b67736176652063757272656e74706f696e74206e65777061746820313030302064757020647570206475700d6d6f7665746f206c696e65746f20636c6f73657061746820636c6970206d6f7665746f2f52206420616720626567696e20466f6e744d617472697820636f6e63617420302030207472616e73666f726d206e65672065786368206e65670d657863682069647472616e73666f726d207472616e736c6174652061672036352f4275696c6443686172206c6f616420656e647b657865637d50205120732067726573746f726520597b52204d7b367d7b357d6966656c73652065717b2f560d53206465662f572055206465662f582054206465667d69662052204d7b337d7b327d6966656c7365206e657b2f5320637d69662f50335f64782057206465662f50335f6479205820646566205720582069647472616e73666f726d2f580d622f5720622f56205620616720626567696e20466f6e744d617472697820656e64206d616b65666f6e74206465662053206e756c6c206e657b2f53205320616720626567696e20466f6e744d617472697820656e64206d616b65666f6e740d6465667d69667d7b2f5320637d6966656c73657d6966205f646f546578747572655061747b73797374656d646963742f6d616b657061747465726e206b6e6f776e7d7b66616c73657d6966656c73657b6d61747269782063757272656e746d61747269780d50335f746d207365746d617472697820572058207472616e736c6174652031202d31207363616c652030207068207472616e736c61746520747220616c6f616420706f7020706f7020706f70206e65672065786368206e65672065786368207472616e736c6174650d73657474657874757265706174207365746d617472697820572058207472616e736c6174652057205820726d6f7665746f2f616820642061617b2f61692062205a203020616920707574205620736574666f6e742063757272656e74706f696e74205a2073686f772061757b657869747d69667d666f72616c6c0d7d7b3130207365746c696e6577696474682f616820642063757272656e74706f696e74206e65777061746820302030206d6f7665746f20302030206c696e65746f20636c6f736570617468206d6f7665746f2061617b2f61692062205a20300d6169207075742063757272656e74706f696e74205620736574666f6e742057205820726d6f7665746f20636f756e7420312061646420647570203120726f6c6c205a20747275657b63686172706174687d73746f7070656420636f756e740d636f756e74202d3120726f6c6c207375627b706f707d7265706561742063757272656e74706f696e747b4c7d30206520706f70206e6577706174682030206475702064757020647570206d6f7665746f206c696e65746f0d636c6f736570617468206d6f7665746f2061757b657869747d69667d666f72616c6c7d6966656c73652067726573746f72652053206e756c6c206e657b67736176652057205820726d6f7665746f203020736574677261792f616820640d61617b2f61692062205a203020616920707574205320736574666f6e742063757272656e74706f696e74205a2073686f772061757b657869747d69667d666f72616c6c2067726573746f72657d69662f4b20632f5f646f546578747572655061742061537d612f61787b3520696e64657820340d696e646578206774203820696e646578203320696e646578206c74203620696e646578203520696e646578206774203920696e646578203420696e646578206c7420616e6420616e6420616e645b3130203220726f6c6c20636c656172746f6d61726b0d7d612f66707b74707b616c6f616420706f7020312031203420696e6465787b677361766520706f70203320696e64657820616c6f616420706f70207472616e736c61746520747220616c6f616420706f707b636c6970706174687d73746f707065647b2d31303030302064757020647570206475707d0d7b7061746862626f787d6966656c73652061787b6673617b657865637d666f72616c6c7d6966203320696e64657820616c6f616420706f70203220696e646578206164642065786368203320696e646578206164642065786368203520696e6465780d6173746f726520706f702067726573746f72657d666f7220347b706f707d7265706561747d666f72616c6c7d612f61457b73797374656d646963742f766d7265636c61696d206b6e6f776e7b3120766d7265636c61696d7d696620766d737461747573206578636820737562206578636820706f702065786368203130303030206164640d6c747b747872457272537472203d20666c7573682073746f707d69667d612f6469617b75736572646963742f50335f642067657420626567696e7b7b72656164737472696e677d7d7b7b72656164686578737472696e677d7d6966656c73652f615920620d2f617920622f61722061797b387d7b657863687d6966656c7365206465662f617320622f617420622f61542061742061797b35206d756c7d7b617220312065717b3820646976206365696c696e677d69667d6966656c736520726f756e6420637669206465660d2f62612073797374656d646963742f636f6c6f72696d616765206b6e6f776e206465662f62622061797b62617b2e387d7b2e327d6966656c73657d7b317d6966656c7365206465662061797b2f62632061742034206d756c20726f756e6420637669206465660d2f626420626320737472696e67206465662f626520617420726f756e6420637669206465662f626620626520737472696e67206465667d69662f617a206154206173206d756c20726f756e64206376692064656620617a206262206d756c2061450d2f6155203330303030206262206469762061542064697620666c6f6f72206154206d756c20726f756e6420637669206465662f696120617a20615520646976206365696c696e6720637669206172726179206465662f6961692030206465660d7b2f614120617a206155206c657b617a7d7b61557d6966656c736520646566206961206961692061797b2f6267203020646566206141206262206d756c20726f756e642063766920737472696e672061412061542064697620726f756e64206376697b62610d7b6475702062672063757272656e7466696c6520626420615920706f7020707574696e74657276616c2f626720626720626320616464206465662063757272656e7466696c6520626620615920706f7020706f707d7b0d63757272656e7466696c6520626420615920706f7020706f70206475702062672063757272656e7466696c6520626620615920706f7020707574696e74657276616c2f626720626720626520616464206465667d6966656c73650d7d7265706561747d7b63757272656e7466696c6520614120737472696e6720615920706f707d6966656c7365207075742f69616920696169203120616464206465662f617a20617a206141207375622064656620617a2030206c657b657869747d69660d7d6c6f6f7020656e647d612f61447b696120696169206765742f69616920696169203120616464206465667d612f61567b6961206961692067657420615720617420676574696e74657276616c2f615720615720617420616464206465667d610d2f615a7b69612069616920676574206c656e677468206157206c657b2f69616920696169203120616464206465662f61572030206465667d69667d612f696d7b75736572646963742f50335f642067657420626567696e0d2f6961692030206465662f61572030206465662061797b73797374656d646963742f636f6c6f72696d616765206b6e6f776e7b7b61567d7b61567d7b61567d7b615620615a7d74727565203420636f6c6f72696d6167650d7d7b7b61447d696d6167657d6966656c73657d7b7b61447d696d6167657d6966656c736520656e647d612f736574746578747572657061747b3820646963742064757020626567696e2f5061747465726e547970652031206465660d2f5061696e74547970652031206465662f54696c696e67547970652031206465662f42426f78207472206465662f58537465702042426f782032206765742042426f7820302067657420737562206465662f59537465702042426f780d33206765742042426f7820312067657420737562206465662f5061696e7450726f637b706f702073617665206673617b657865637d666f72616c6c20726573746f72657d64656620656e64206d617472697820677361766520747020302067657420302067657420616c6f61640d706f70207472616e736c617465206d616b657061747465726e2067726573746f7265207365747061747465726e7d612f676f66696c6c69747b73797374656d646963742f6d616b657061747465726e206b6e6f776e7b736574746578747572657061740d7b656f66696c6c7d7b66696c6c7d6966656c73657d7b7b656f636c69707d7b636c69707d6966656c73652066707d6966656c73657d617b7365747061636b696e677d696620656e6420656e647d69660d0000a100c00081757365726469637420626567696e2050335f6420626567696e2f74787245727253747228412074657874757265207573656420696e2053757065725061696e7427732064726177206c6179657220697320746f6f206c6172676520746f207072696e74206f6e2074686973207072696e7465722e2964656620656e6420656e640d000007000000000022010d012affff00a100c0006832393720323638203120696e646578206e6567203120696e646578206e6567206d6174726978207472616e736c6174652033203120726f6c6c0d63757272656e74706f696e74203220636f7079206d6174726978207472616e736c6174652036203120726f6c6c0d002201860157010100a100c00084333434203339312063757272656e74706f696e74203120696e646578203620696e64657820737562203420696e646578203920696e64657820737562206469760d3120696e646578203620696e64657820737562203420696e646578203920696e64657820737562206469760d6d6174726978207363616c65203131203120726f6c6c0d00a100c0007e5b2039203120726f6c6c20636c656172746f6d61726b0d33203220726f6c6c206d617472697820636f6e6361746d61747269780d65786368206d617472697820636f6e6361746d61747269780d2f50325f74702065786368206465660d50325f62202d3120677820656e640d50325f62206d6b20656e647b626e7d69660d00a100c0003e6d61747269782063757272656e746d617472697820616c6f616420706f7020636f756e74203620726f6c6c0d50325f62206d6b20656e647b62757d69660d00a100c00046757365726469637420626567696e2050335f6420626567696e0d636f756e74202d3620726f6c6c0d6d6174726978206173746f7265202f50335f746d2065786368206465660d00a100c0001a656e6420656e642050325f62206d6b20656e647b626e7d69660d00070001000100220001ff9dffff00a10064000a53504e540bb8000a000000a10064001253504e540c30009000900013005a010900b700a10064000a53504e540c940001000100a0008e00a100c00031757365726469637420626567696e2050335f6420626567696e202f63696d206c6f616420656e6420656e6420657865630d00009880600013005a010900ba00000000000000000048000000480000000000080001000800000000032a8f2c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000013005a010900b8010c012901870158002404b1fff10004b1fff10004b1fff10004b1fff10004b1fff10004b1fff10009fcff010000b8fff10009fcff010000b8fff10009fcff010000b8fff10009fcff010000b8fff1002ffcff010000fafffc0001fffffc00fdfffc0007ffff0000ffff0000fefffc00fefffc00fefffd00fdfffd00fbfff1002ffcff010000fafffc0001fffffc00fdfffc0007ffff0000ffff0000fefffc00fefffc00fefffd00fdfffd00fbfff10046fcff010000fbff390000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f8fff10046fcff010000fbff390000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000f8fff10042fcff010000fbff2f0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffb00fefffd00fbfff10042fcff010000fbff2f0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffb00fefffd00fbfff1003dfcff010000fbff0d0000ffff0000ffff0000ffff0000fefffc000fffff0000ffff0000ffff0000ffff0000fefffc0003ffff0000f7ff010000fcfff1003dfcff010000fbff0d0000ffff0000ffff0000ffff0000fefffc000fffff0000ffff0000ffff0000ffff0000fefffc0003ffff0000f7ff010000fcfff10036fcfffb00fefffc000affff0000ffff0000ffff00feff010000fefffc00fefffc0002ffff00feff010000fefffd00fdfffd00fbfff10036fcfffb00fefffc000affff0000ffff0000ffff00feff010000fefffc00fefffc0002ffff00feff010000fefffd00fdfffd00fbfff1000ce3fffd00edfffd00ebfff1000ce3fffd00edfffd00ebfff10004b1fff10004b1fff10004a8fffa0004a8fffa000a01ffffac0001fffffa000a01ffffac0001fffffa000a01ffffac0001fffffa000a01ffffac0001fffffa001b01fffff500fdfffe0001fffff200fefffc00feffdb0001fffffa001b01fffff500fdfffe0001fffff200fefffc00feffdb0001fffffa002001fffff60009ffff0000ffff0000fffff10001fffffb0001ffffdb00fbfffe002001fffff60009ffff0000ffff0000fffff10001fffffb0001ffffdb00fbfffe002001fffff60001fffffb00fcfffd00fdfffc0001fffffb0001ffffdb00fbfffe002001fffff60001fffffb00fcfffd00fdfffc0001fffffb0001ffffdb00fbfffe002801fffff500fdfffe000dffff0000ffff0000ffff0000fffffd0001fffffb0001ffffdb00fbfffe002801fffff500fdfffe000dffff0000ffff0000ffff0000fffffd0001fffffb0001ffffdb00fbfffe002401fffff2000bffff0000ffff0000ffff0000fbfffd0001fffffb0001ffffdb00fbfffe002401fffff2000bffff0000ffff0000ffff0000fbfffd0001fffffb0001ffffdb00fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffb0001ffffdb00fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffb0001ffffdb00fbfffe002201fffff500fdfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe002201fffff500fdfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe0004a4fffe0004a4fffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002e01fffff500fdfffd00fdfffe0000fffc0000fffe00fdfffe00fcfffd00fdfffc0001fffffc00fdfff500fbfffe002e01fffff500fdfffd00fdfffe0000fffc0000fffe00fdfffe00fcfffd00fdfffc0001fffffc00fdfff500fbfffe003e01fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0005ffff0000fffffb0001fffffb0007ffff0000ffff0000fdfffd0001fffff200fbfffe003e01fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0005ffff0000fffffb0001fffffb0007ffff0000ffff0000fdfffd0001fffff200fbfffe003901fffff60009ffff0000ffff0000fffffb00feff0000feff010000fcfffe00fcfffe0005ffff0000fffffd0001fffffd00fcfff500fbfffe003901fffff60009ffff0000ffff0000fffffb00feff0000feff010000fcfffe00fcfffe0005ffff0000fffffd0001fffffd00fcfff500fbfffe003a01fffff60005ffff0000fffffe00fdfffe00faff070000ffff0000fffffb0001fffffe00fdfffc0001fffffd0005ffff0000fffff600fbfffe003a01fffff60005ffff0000fffffe00fdfffe00faff070000ffff0000fffffb0001fffffe00fdfffc0001fffffd0005ffff0000fffff600fbfffe003e01fffff600fbfffb0012ffff0000ffff00ff00ffff0000ffff0000fffffb0009ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe003e01fffff600fbfffb0012ffff0000ffff00ff00ffff0000ffff0000fffffb0009ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe004901fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0019ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe004901fffff60011ffff0000ffff0000ffff0000ffff0000fffffe0019ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000fffff600fbfffe003401fffff60005ffff0000fffffe00fdfffe0001fffffe0001fffffe00fdfffd00fdfffd00fdfffe00fbfffe00fdfff500fbfffe003401fffff60005ffff0000fffffe00fdfffe0001fffffe0001fffffe00fdfffd00fdfffd00fdfffe00fbfffe00fdfff500fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001101fffff500fdfffd00fdffc400fbfffe001101fffff500fdfffd00fdffc400fbfffe001a01fffff6000dffff0000ffff0000ffff0000ffffc500fbfffe001a01fffff6000dffff0000ffff0000ffff0000ffffc500fbfffe001701fffffa0005ffff0000fffffb0001ffffc100fbfffe001701fffffa0005ffff0000fffffb0001ffffc100fbfffe001801fffffb0001fffffe0001fffffb0001ffffc100fbfffe001801fffffb0001fffffe0001fffffb0001ffffc100fbfffe001a08ffff0000ff0000fffffd0001fffffb0001ffffc100fbfffe001a08ffff0000ff0000fffffd0001fffffb0001ffffc100fbfffe001e01fffffe00fefffc000dffff0000ffff0000ffff0000ffffc500fbfffe001e01fffffe00fefffc000dffff0000ffff0000ffff0000ffffc500fbfffe001501fffffd0000fffa00fdfffd00fdffc400fbfffe001501fffffd0000fffa00fdfffd00fdffc400fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001d01fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdffdc00fbfffe001d01fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdffdc00fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffd0001ffffd900fbfffe002801fffff60011ffff0000ffff0000ffff0000ffff0000fffff90001fffffd0001ffffd900fbfffe002401fffff600fcfffe0005ffff0000fffffe00fdfffc0001fffffd0001ffffd900fbfffe002401fffff600fcfffe0005ffff0000fffffe00fdfffc0001fffffd0001ffffd900fbfffe002501fffff60007ffff0000ffff0000fbfffb0001fffffd0001fffffd0001ffffd900fbfffe002501fffff60007ffff0000ffff0000fbfffb0001fffffd0001fffffd0001ffffd900fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe003001fffff60015ffff0000ffff0000ffff0000ffff0000ffff0000fffffd0001fffffd0005ffff0000ffffdd00fbfffe002201fffff600fcfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe002201fffff600fcfffe0005ffff0000fffffe00fdfffd00fdfffd00fdffdc00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002201fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdfffe0001ffffe100fbfffe002201fffff600fcfffd00fdfffd00fdfffd00fdfffd00fdfffe0001ffffe100fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003001fffff60011ffff0000ffff0000ffff0000ffff0000fffffb0001fffffb0009ffff0000ffff0000ffffe100fbfffe003001fffff60011ffff0000ffff0000ffff0000ffff0000fffffb0001fffffb0009ffff0000ffff0000ffffe100fbfffe002c01fffff600fcfffe0005ffff0000fffffe00fdfffe0001fffffb0009ffff0000ffff0000ffffe100fbfffe002c01fffff600fcfffe0005ffff0000fffffe00fdfffe0001fffffb0009ffff0000ffff0000ffffe100fbfffe002401fffff60001fffffb00fbfffb0005ffff0000fffffb00fbff030000ffffe100fbfffe002401fffff60001fffffb00fbfffb0005ffff0000fffffb00fbff030000ffffe100fbfffe003301fffff60001fffffb0021ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003301fffff60001fffffb0021ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe002c01fffff60001fffffb0005ffff0000fffffe00fdfffd00fdfffe0007ffff0000ffff0000fbffe500fbfffe002c01fffff60001fffffb0005ffff0000fffffe00fdfffd00fdfffe0007ffff0000ffff0000fbffe500fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002d01fffff60001fffffa00fdfffe0000fffe0005ffff0000fffffe0003ffff0000fcff010000fcffe400fbfffe002d01fffff60001fffffa00fdfffe0000fffe0005ffff0000fffffe0003ffff0000fcff010000fcffe400fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe003001fffff60001fffff90001fffffd00feff0900ffff0000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe003001fffff60001fffff90001fffffd00feff0900ffff0000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe002901fffff60001fffff90001fffffd00fbff010000fdfffc00fdfffe0005ffff0000ffffe500fbfffe002901fffff60001fffff90001fffffd00fbff010000fdfffc00fdfffe0005ffff0000ffffe500fbfffe003101fffff60001fffff90001fffffd0002ffff00feff060000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe003101fffff60001fffff90001fffffd0002ffff00feff060000ffff00fffffd0001fffffc0005ffff0000ffffe500fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe003201fffff60001fffff90001fffffd000dffff0000ffff0000ffff0000fffffe0001fffffc0005ffff0000ffffe500fbfffe002c01fffff600fbfffe00fdfffe0001fffffe0004ff0000fffffe0003ffff0000fcff010000fcffe400fbfffe002c01fffff600fbfffe00fdfffe0001fffffe0004ff0000fffffe0003ffff0000fcff010000fcffe400fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe002101fffff600fcfffe00fcfffd00fdfffe00fcfffd00fdfffd00fdffe400fbfffe002101fffff600fcfffe00fcfffd00fdfffe00fcfffd00fdfffd00fdffe400fbfffe003a01fffff6002dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe003a01fffff6002dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe003601fffff60029ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe100fbfffe002e01fffff600fcfffe00fcfffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffe00fdffe400fbfffe002e01fffff600fcfffe00fcfffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffe00fdffe400fbfffe003401fffff60001fffffb0004ffff00fffffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffb0001ffffe500fbfffe003401fffff60001fffffb0004ffff00fffffe0015ffff0000ffff0000ffff0000ffff0000ffff0000fffffb0001ffffe500fbfffe003701fffff60001fffffb0025ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe003701fffff60001fffffb0025ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffffe500fbfffe002701fffff60001fffffb0005ffff0000fffffe00fdfffe00fcfffd00fdfffd00fdffe400fbfffe002701fffff60001fffffb0005ffff0000fffffe00fdfffe00fcfffd00fdfffd00fdffe400fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001f01fffff600fbff010000fcff090000ffff0000ffff0000fbffd400fbfffe001f01fffff600fbff010000fcff090000ffff0000ffff0000fbffd400fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe001c01fffff40001fffffd00fdfffc0001fffffb0001ffffd200fbfffe001c01fffff40001fffffd00fdfffc0001fffffb0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe001c01fffff40001fffffd0001fffffb00fdfffc0001ffffd200fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe002101fffff40001fffffd0001fffffc0005ffff0000fffffd0001ffffd200fbfffe002001fffff40001fffffd00fcff070000ffff0000fffffd0001ffffd200fbfffe002001fffff40001fffffd00fcff070000ffff0000fffffd0001ffffd200fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe001b01fffff600fdfffc0001fffffd00fdfffe0001ffffcf00fbfffe001b01fffff600fdfffc0001fffffd00fdfffe0001ffffcf00fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe001c01fffff60001fffffb00fdfffe0001fffffc0001ffffcf00fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe002401fffff60001fffffc0009ffff0000ffff0000fffffc0005ffff0000ffffd300fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe001e01fffff600fcff090000ffff0000ffff0000fcfffe00fdffd200fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe000901ffffac00fbfffe0004a4fffe0004a4fffe0006fb00aafffe0006fb00aafffe0000a0008f00a10064000653504e5403e900a0008300ff}\par}}\hich\af4\dbch\af4\loch\f4 The Languages menu shows all of the languages installed on your system.  It changes when you install or delete a programming language.  You can use t\hich\af4\dbch\af4\loch\f4 his menu to find out what language is associated with a particular file, or to change the language.\par \hich\af4\dbch\af4\loch\f4 Under ORCA, all source and data files are associated with a language.  The system uses the underlying language stamp to call the appropriate compiler or ass\hich\af4\dbch\af4\loch\f4 embler when you issue a compile command for a source file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318225}\hich\af4\dbch\af4\loch\f4 Shell{\*\bkmkend _Toc495318225}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4 Shell is a special entry, and so is set off from the other names in the Languages menu.  The desktop maintains a window called the shell window, whose c\hich\af4\dbch\af4\loch\f4 orresponding language is the Shell.  You can create a window yourself, by first selecting the New command located in the File menu, and then selecting Shell from the Languages menu.  If you do not create a Shell window, the desktop will create one for you\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the first time that you compile a program.\par \hich\af4\dbch\af4\loch\f4 The desktop uses the Shell window to display information about what it is doing.  For example, when you compile a program, the results of compilation are shown in the Shell window.\par \hich\af4\dbch\af4\loch\f4 You can also use the Shell windo\hich\af4\dbch\af4\loch\f4 w to communicate with the ORCA shell.  You can enter any available shell commands, and then press return.  The shell will execute the commands and then return to the desktop, displaying any text output in the shell window, as well as using the shell windo\hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4  for prompts and to echo text responses.  See Chapter 8 for a detailed description of the shell.  Chapter 6 has a brief introduction to the shell, describing in more detail how to use the shell from the desktop development environment.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318226}\hich\af4\dbch\af4\loch\f4 Installed Languages{\*\bkmkend _Toc495318226}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 languages menu}}}{\hich\af4\dbch\af4\loch\f4 Below the name Shell in the Languages menu is a list of the names of the compilers and assemblers that are currently installed in your desktop system, as well as some names used for other ASCII file types.  Each text window in the de\hich\af4\dbch\af4\loch\f4 sktop will have a language stamp associated with it.  You can pull down the Languages menu to see what language stamp the front window has, or you can select a different language for the front window by selecting the appropriate language from this menu.  \hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 he language associated with the front window will be checked.\par \hich\af4\dbch\af4\loch\f4 There is always one language which is the current language; it is the same as the language of the front window.  When you change the language stamp of the front window, you also change the curre\hich\af4\dbch\af4\loch\f4 nt system language.  New windows are stamped with the current system language.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4 The languages ProDOS, Text, and Exec are special.  A file whose language stamp is ProDOS means that the file contains only ASCII text.  Data files read by a progra\hich\af4\dbch\af4\loch\f4 m are typically stamped as ProDOS.  The language Text is reserved for use by text editors.  The language Exec is given to shell script files.  See Chapter 8 for more information about Exec files.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318227}\hich\af4\dbch\af4\loch\f4 The SYSTABS File{\*\bkmkend _Toc495318227}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The SYSTABS file}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\hich\af4\dbch\af4\loch\f4  is lo\hich\af4\dbch\af4\loch\f4 cated in the SYSTEM prefix of the program disk disk.  It contains the default settings for tab stops, auto-indent mode, and cursor mode.  It is an ASCII text file that can be opened under the desktop and edited to change the default settings.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tab stop}}}{\par \hich\af4\dbch\af4\loch\f4 Each language recognized by ORCA is assigned a language number.  The SYSTABS file has three kinds of lines associated with each language:\par \par \hich\af4\dbch\af4\loch\f4 1.\tab The language number.\par \hich\af4\dbch\af4\loch\f4 2.\tab The default settings for the different editing modes. \par \hich\af4\dbch\af4\loch\f4 3.\tab The default tab and end-of-l\hich\af4\dbch\af4\loch\f4 ine-mark settings.\par \par \hich\af4\dbch\af4\loch\f4 The first line of each set of lines in the SYSTABS file specifies the language that the next two lines apply to.  ORCA languages can have numbers from 0 to 32767 (decimal).  The language number must start in the first column; leading ze\hich\af4\dbch\af4\loch\f4 ros are permitted and are not significant, but leading spaces are not allowed.\par \hich\af4\dbch\af4\loch\f4 The second line of each set of lines in the SYSTABS file}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\hich\af4\dbch\af4\loch\f4  sets the defaults for various editor modes, as follows:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab If the first column contains a zero, pr\hich\af4\dbch\af4\loch\f4 essing return causes the insertion point to be placed in column one in the next line.  If column one (in the SYSTABS file) contains a one, then pressing return aligns the insertion point with the first nonspace character in the next line.  If the line is \hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 lank, then the insertion point is aligned with the first nonspace character in the line above.\par \hich\af4\dbch\af4\loch\f4 2.\tab The second column is used by the text-based editor to indicate the selection mode.  It is not used by the desktop editor.  It can be either a zero or one.\par \hich\af4\dbch\af4\loch\f4 3.\tab \hich\af4\dbch\af4\loch\f4 The next character indicates the wrap mode.  It is not used by the desktop editor.\par \hich\af4\dbch\af4\loch\f4 4.\tab The fourth character is used to set the default cursor mode.  A zero will cause the editor to start out in over strike mode}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 over strike mode}}}{\hich\af4\dbch\af4\loch\f4 .  A one will cause it\hich\af4\dbch\af4\loch\f4  to start in insert mode}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 5.\tab The fifth character is reserved for future enhancements.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The third line of each set of lines in the SYSTABS file sets default tab stops.  There are 255 zeros and ones, representing the length of lines under\hich\af4\dbch\af4\loch\f4  the desktop.  The ones indicate the positions of the tab stops.  A two in any column sets the end of the line.  The column containing the two then replaces column 255 as the default right margin when the editor is set to that language.\par \hich\af4\dbch\af4\loch\f4 For example, the fo\hich\af4\dbch\af4\loch\f4 llowing lines define the defaults for ORCA/C.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 C}}}{\hich\af4\dbch\af4\loch\f4   Note that only the first few characters of the tab line are shown; the tab line actually contains 255 characters.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 8\par \hich\af2\dbch\af4\loch\f2 100101\par \hich\af2\dbch\af4\loch\f2 0000000010000000010000000010000000010000000010\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If no defaults are specifie\hich\af4\dbch\af4\loch\f4 d for a language (that is, there are no lines in the SYSTABS file}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\hich\af4\dbch\af4\loch\f4  for that language), then the editor assumes the following defaults:\par \par \bullet \tab }{\outl \hich\af4\dbch\af4\loch\f4 return}{\hich\af4\dbch\af4\loch\f4  sends the cursor to column one.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The editor starts in insert mode}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 insert mode}}}{\hich\af4\dbch\af4\loch\f4 .\par \bullet \tab \hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 here is a tab stop every eighth column.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The end of the line is at column 255.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318228}\hich\af4\dbch\af4\loch\f4 Setting up Defaults{\*\bkmkend _Toc495318228}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 defaults for PRIZM}}}{\hich\af4\dbch\af4\loch\f4 You can tailor your environment on the desktop by setting various options, and saving them.  Then, whenever you run the desktop, \hich\af4\dbch\af4\loch\f4 your defaults will be automatically loaded, and your desktop will look the same from session to session.\par \hich\af4\dbch\af4\loch\f4 ORCA always saves information about your environment before it executes an S16 program, to ensure that everything will be as it was after execution.  T\hich\af4\dbch\af4\loch\f4 his allows the environment to be purged while your program executes, then have everything return to its original state when your program finishes.  Automatic rebuilding of your environment saves you time, since you do not have to reopen various files and \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 indows, size them correctly, etc.  It also allows you to quickly remember what you were doing before you left the desktop.\par \hich\af4\dbch\af4\loch\f4 ORCA records the following information about your current desktop, in a file named PRIZM.TEMP, located in the same prefix as PRIZM:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 The path name of the file displayed in the front window, and that window's size and location on the screen.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The setting of the Auto-save flag.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Where prefixes 8, 13, and 16 are located.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The settings of the compile flags for source listing, symbol ta\hich\af4\dbch\af4\loch\f4 ble, generation of debug code}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debug code}}}{\hich\af4\dbch\af4\loch\f4 , and link after compile.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The settings of the link flags for source listing, symbol table, saving of the executable file, and file type of the executable file.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The setting of the Profile flag.}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 profil\hich\af4\dbch\af4\loch\f4 er}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The current language.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Permanent default information is stored in the file named PRIZM.CONFIG, located in the same folder as PRIZM.  The same information listed above is saved.  To set these defaults, use the Save Defaults button from the Compile o\hich\af4\dbch\af4\loch\f4 r Link dialogs.  To return to the system defaults, simply delete the PRIZM.CONFIG file.{\*\bkmkend desktopDevelopmentEnvironment}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 desktop development environment}{\rxe desktopDevelopmentEnvironment}}}{\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 8 \endash  The Command Processor\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318229}\hich\af4\dbch\af4\loch\f4 Chapter 8 - The Command Processor{\*\bkmkend _Toc495318229}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par {\*\bkmkstart shell2}\hich\af4\dbch\af4\loch\f4 This chapter will cover the operation of the ORCA Comman\hich\af4\dbch\af4\loch\f4 d Processor.  A command processor is an interface between you and the operating system of a computer.  You enter a command on the command line.  The command processor will interpret your command and take some specific action corresponding to your command.\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4  The command processor for ORCA is very powerful.  The features available to you and discussed in this chapter are:\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 The line editor.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Command types.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Standard prefixes and file names.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 EXEC files.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Input and output redirection.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Pipelines.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Comman\hich\af4\dbch\af4\loch\f4 d table.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Command reference.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318230}\hich\af4\dbch\af4\loch\f4 The Line Editor{\*\bkmkend _Toc495318230}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart lineEditor}\hich\af4\dbch\af4\loch\f4 When commands are issued to the shell, they are typed onto the command line using the line editor.  The line editor allows you to:\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 Expand command names.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Make corrections.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Recall the twenty most recently \hich\af4\dbch\af4\loch\f4 issued commands.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Enter multiple commands.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Use wildcards in file names.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318231}\hich\af4\dbch\af4\loch\f4 Command Name Expansion{\*\bkmkend _Toc495318231}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:command expansion}}}{\hich\af4\dbch\af4\loch\f4 It is not necessary to enter the full command name on the command line.  Type in the first few letters of a command (\hich\af4\dbch\af4\loch\f4 don't use }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 ) and press the }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\hich\af4\dbch\af4\loch\f4  key.  It will compare each of the commands in the command table with the letters typed so far.  The first command found that matches all of the characters typed is expanded in the command line.  For example, if y\hich\af4\dbch\af4\loch\f4 ou typed:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 CO}{\b\outl \hich\af2\dbch\af4\loch\f2 RIGHT-ARROW}{\b \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 ORCA would match this with the command COMMANDS, and would complete the command like this:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 COMMANDS\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Editing A Command On The Command Line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The available line-editing commands available are listed in the table below:\par \par }\pard\plain \s31\qj\fi-2520\li2880\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 command\tab comma\hich\af4\dbch\af4\loch\f4 nd name and effect\par }\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 LEFT-ARROW}{\tab }{\b \hich\af4\dbch\af4\loch\f4 cursor left}{\hich\af4\dbch\af4\loch\f4  - }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:cursor-left command}}}{\hich\af4\dbch\af4\loch\f4 The cursor will move to the left on the command line.\par \par }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 RIGHT-ARROW}{\tab }{\b \hich\af4\dbch\af4\loch\f4 cursor right}{\hich\af4\dbch\af4\loch\f4  - }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:cursor-right command}}}{\hich\af4\dbch\af4\loch\f4 The cursor will move to the right.  If the curso\hich\af4\dbch\af4\loch\f4 r is at the end of a sequence of characters which begin the first command on the line, the shell will try to expand the command.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 LEFT-ARROW}{\tab }{\b \hich\af4\dbch\af4\loch\f4 word left}{\hich\af4\dbch\af4\loch\f4  - The cursor will move to the start of the previous word.  If the cursor is already on the first charac\hich\af4\dbch\af4\loch\f4 ter of a word, it moves to the first character of the previous word.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 RIGHT-ARROW}{\tab }{\b \hich\af4\dbch\af4\loch\f4 word right}{\hich\af4\dbch\af4\loch\f4  - The cursor will move to the end of the current word.  If the cursor is already on the last character in a word, it moves to the last character in the next word\hich\af4\dbch\af4\loch\f4 .\par \par }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 UP-ARROW}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 DOWN-ARROW}{\tab }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \b\v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\b\v \hich\af4\dbch\af4\loch\f4 shell commands\:command list}}}{\b \hich\af4\dbch\af4\loch\f4 edit command}{\hich\af4\dbch\af4\loch\f4  - The up and down arrows are used to scroll through the 20 most recently executed commands.  These commands can be executed again, or edited and executed.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2 >}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 .\tab }{\b \hich\af4\dbch\af4\loch\f4 end of line}{\hich\af4\dbch\af4\loch\f4  -  }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:end-of-line command}}}{\hich\af4\dbch\af4\loch\f4 The cursor will move to the right-hand end of the command line.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2 <}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 ,\tab }{\b \hich\af4\dbch\af4\loch\f4 start of line}{\hich\af4\dbch\af4\loch\f4  - }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:start-of-line command}}}{\hich\af4\dbch\af4\loch\f4 The cursor will move to the left-hand end of the command line.\par \par }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 DELETE}{\tab }{\b \hich\af4\dbch\af4\loch\f4 delete charact\hich\af4\dbch\af4\loch\f4 er left}{\hich\af4\dbch\af4\loch\f4  - }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:delete-character-left command}}}{\hich\af4\dbch\af4\loch\f4 Deletes the character to the left of the cursor, moving the cursor left.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2 F}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 CTRL}{\fs18 \hich\af2\dbch\af4\loch\f2 F}{\tab }{\b \hich\af4\dbch\af4\loch\f4 delete character right}{\hich\af4\dbch\af4\loch\f4  - Deletes the character that the cursor is covering, moving characters from the right t\hich\af4\dbch\af4\loch\f4 o fill in the vacated character position.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2 Y}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 CTRL}{\fs18 \hich\af2\dbch\af4\loch\f2 Y}{\tab }{\b \hich\af4\dbch\af4\loch\f4 delete to end of line}{\hich\af4\dbch\af4\loch\f4  - }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:delete-to-end-of-line command}}}{\hich\af4\dbch\af4\loch\f4 Deletes characters from the cursor to the the end of the line.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2 E}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 CTRL}{\fs18 \hich\af2\dbch\af4\loch\f2 E}{\tab }{\b \hich\af4\dbch\af4\loch\f4 toggle insert mode}{\hich\af4\dbch\af4\loch\f4  - }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:insert mode}}}{\hich\af4\dbch\af4\loch\f4 Allows characters to be inserted into the command line.\par \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2 Z}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 CTRL}{\fs18 \hich\af2\dbch\af4\loch\f2 Z}{\tab }{\b \hich\af4\dbch\af4\loch\f4 undo}{\hich\af4\dbch\af4\loch\f4  - Resets the command line to the starting string.  If you are typing in a new command, this erases all characters.  If you are editing an old command, this resets the command line \hich\af4\dbch\af4\loch\f4 to the original command string.\par \par }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 ESC}{\fs18 \hich\af2\dbch\af4\loch\f2 X}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 CLEAR}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 CTRL}{\fs18 \hich\af2\dbch\af4\loch\f2 X}{\tab }{\b \hich\af4\dbch\af4\loch\f4 clear command line }{\hich\af4\dbch\af4\loch\f4 - }{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:clear-line command}}}{\hich\af4\dbch\af4\loch\f4 Removes all characters from the command line.\par \par }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 RETURN}{\hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 ENTER}{\tab }{\b \hich\af4\dbch\af4\loch\f4 execute command}{\hich\af4\dbch\af4\loch\f4  - Issue a command to the shell, and append the command to the\hich\af4\dbch\af4\loch\f4  list of the most recent twenty commands.}{\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor\:execute command}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 8.1  Line-Editing Commands\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The shell normally starts in over strike mode; see the description of the \{Insert\} shell variable to change this default.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell prompt}}}{\hich\af4\dbch\af4\loch\f4 The shell's command line editor prints a # character as a prompt before it accepts input.  See the description of the \{Prompt\} shell variable for a way to change this default.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318232}\hich\af4\dbch\af4\loch\f4 Multiple Commands{\*\bkmkend _Toc495318232}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:multiple commands}}}{\hich\af4\dbch\af4\loch\f4 Several commands can \hich\af4\dbch\af4\loch\f4 be entered on one line using a semicolon to separate the individual commands.  For example,}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RENAME command}}}{\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 RENAME WHITE BLACK;EDIT BLACK\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would first change the name of the file WHITE to BLACK, and then invoke the editor to edit the file named BLA\hich\af4\dbch\af4\loch\f4 CK.  If any error occurs, commands that have not been executed yet are cancelled.  In the example above, if there was an error renaming the file WHITE, the shell would not try to edit the file BLACK.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318233}\hich\af4\dbch\af4\loch\f4 Scrolling Through Commands{\*\bkmkend _Toc495318233}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:command \hich\af4\dbch\af4\loch\f4 list}}}{\hich\af4\dbch\af4\loch\f4 Using the }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 UP-ARROW}{\hich\af4\dbch\af4\loch\f4  and }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 DOWN-ARROW}{\hich\af4\dbch\af4\loch\f4  keys, it is possible to scroll through the twenty most recent commands.  You can then modify a previous command using the line-editing features described above and execute the edited command.{\*\bkmkend lineEditor}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line editor}{\rxe l\hich\af4\dbch\af4\loch\f4 ineEditor}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318234}\hich\af4\dbch\af4\loch\f4 Command Types{\*\bkmkend _Toc495318234}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:command types\bxe }}}{\hich\af4\dbch\af4\loch\f4 Commands in ORCA can be subdivided into three major groups:  built-in commands, utilities, and language names.  All are entered from the keyboard the same way. \par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318235}\hich\af4\dbch\af4\loch\f4 Built-in Commands{\*\bkmkend _Toc495318235}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 hell commands\:built-in commands}}}{\hich\af4\dbch\af4\loch\f4 Built-in commands can be executed as soon as the command is typed and the }{\outl\fs18 \hich\af2\dbch\af4\loch\f2 RETURN}{\hich\af4\dbch\af4\loch\f4  key is hit, since the code needed to execute the command is contained in the command processor itself.  Apple DOS and Apple ProDOS are exampl\hich\af4\dbch\af4\loch\f4 es of operating systems that have only built-in commands.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318236}\hich\af4\dbch\af4\loch\f4 Utilities{\*\bkmkend _Toc495318236}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:utilities}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CRUNCH utility}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Utilities prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 restartable programs}}}{\hich\af4\dbch\af4\loch\f4 ORCA supports commands that are not built into the command processor.  An exam\hich\af4\dbch\af4\loch\f4 ple of this type of command is CRUNCH, which is a separate program under ORCA.  The programs to perform these commands are contained on a special directory known as the }{\i \hich\af4\dbch\af4\loch\f4 utilities}{\hich\af4\dbch\af4\loch\f4  directory.  The command processor must first load the program that will perfo\hich\af4\dbch\af4\loch\f4 rm the required function, so the }{\i \hich\af4\dbch\af4\loch\f4 utilities}{\hich\af4\dbch\af4\loch\f4  directory must be on line when the command is entered.  The command will also take longer to execute, since the operating system must load the utility program.  Most utilities are restartable, which means that the\hich\af4\dbch\af4\loch\f4 y are left in memory after they have been used the first time.  If the memory has not been reused for some other purpose, the next time the command is used, there is no delay while the file is loaded from disk.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 executable files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 redirection}}}{\hich\af4\dbch\af4\loch\f4 The utilities themselves must all reside in the same subdirectory so that the command processor can locate them.  The name of the utility is the same as the name of the command used to execute it; the utility itself can be any file that can be executed fr\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 m the shell, including script files.  Utilities are responsible for parsing all of the input line which appears after the command itself, except for input and output redirection.  The }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\hich\af4\dbch\af4\loch\f4 command line is passed to a utility the same way it\hich\af4\dbch\af4\loch\f4  is passed to any other program.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318237}\hich\af4\dbch\af4\loch\f4 Language Names{\*\bkmkend _Toc495318237}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:language names\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language stamp}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASM65816 language}}}{\hich\af4\dbch\af4\loch\f4 The last type of command is the language name.  All source files are stamped with a language, which can be seen when t\hich\af4\dbch\af4\loch\f4 he file is cataloged under ORCA.  There is always a single system language active at any time when using ORCA.\par \hich\af4\dbch\af4\loch\f4 The system language will change for either of two reasons.  The first is if a file is edited, in which case the system language is changed to mat\hich\af4\dbch\af4\loch\f4 ch the language of the edited file.  The second is if the name of a language is entered as a command. \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HELP command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PRODOS command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PRODOS language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text files}}}{\hich\af4\dbch\af4\loch\f4 Table 8.2 shows a partial list of the lang\hich\af4\dbch\af4\loch\f4 uages and language numbers that are currently assigned.  CATALOG and HELP will automatically recognize a language if it is properly included in the command table.  ProDOS has a special status:  it is not truly a language, but indicates to the editor that \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he file should be saved as a standard GS/OS TXT file. Language numbers are used internally by the system, and are generally only important when adding languages to ORCA.  They are assigned by Apple Computer, Inc.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language numbers\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 TEXT langu\hich\af4\dbch\af4\loch\f4 age}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASM6502 language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/Pascal language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/C language}}}{\par \par }\pard\plain \s31\qj\li2520\ri2880\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 language\tab number\par }\pard\plain \s16\qj\fi360\li2520\ri2880\sl223\slmult1\widctlpar\tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\li2520\ri2880\sl223\slmult1\widctlpar\tx4320\adjustright {\hich\af4\dbch\af4\loch\f4 ProDOS\tab 0\par \hich\af4\dbch\af4\loch\f4 TEXT\tab 1\par \hich\af4\dbch\af4\loch\f4 ASM6502\tab 2\par \hich\af4\dbch\af4\loch\f4 ASM65816\tab 3\par \hich\af4\dbch\af4\loch\f4 ORCA/Pascal\tab 5\par \hich\af4\dbch\af4\loch\f4 EXEC\tab 6\par \hich\af4\dbch\af4\loch\f4 ORCA/C\tab 8\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Table 8.2 A Partial list of the Languages and Language Numbers\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 C}}}{\hich\af4\dbch\af4\loch\f4 You can see the list of languages currently installed in your system using the SHOW LANGUAGES command.  While all of the languages from the above table are listed, the compiler needed to compile Pascal programs and the assembler needed to assemble ASM6\hich\af4\dbch\af4\loch\f4 5816 programs are sold separately.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318238}\hich\af4\dbch\af4\loch\f4 Program Names{\*\bkmkend _Toc495318238}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 executable files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 S16 files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTEM files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ProDOS 8}}}{\hich\af4\dbch\af4\loch\f4 Anything which cannot be found in the command table is treated as a path name, and the s\hich\af4\dbch\af4\loch\f4 ystem tries to find a file that matches the path name.  If an executable file is found, that file is loaded and executed.  If a source file with a language name of EXEC is encountered, it is treated as a file of commands, and each command is executed, in \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 urn.  Note that S16 files can be executed directly from ORCA.  ProDOS 8 SYSTEM files can also be executed, provided ProDOS 8 (contained in the file P8) is installed in the system directory of your boot disk.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318239}\hich\af4\dbch\af4\loch\f4 Standard Prefixes{\*\bkmkend _Toc495318239}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard prefixes\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 prefixes\:numbers\bxe }}}{\hich\af4\dbch\af4\loch\f4 When you specify a file on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , as when indicating which file to edit or utility to execute, you must specify the file name as discussed in the section \ldblquote File Names\rdblquote  in this chapter.  GS/OS provides 3\hich\af4\dbch\af4\loch\f4 2 prefix numbers that can be used in the place of prefixes in path names.  This section describes the ORCA default prefix assignments for these GS/OS prefixes.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PREFIX command}}}{\hich\af4\dbch\af4\loch\f4 ORCA uses six of the GS/OS prefixes (8 and 13 through 17) to determine wh\hich\af4\dbch\af4\loch\f4 ere to search for certain files.  When you start ORCA, these prefixes are set to the default values shown in the table below.  You can change any of the GS/OS prefixes with the shell PREFIX command, as described in this chapter.\par \hich\af4\dbch\af4\loch\f4 GS/OS also makes use of som\hich\af4\dbch\af4\loch\f4 e of these numbered prefixes, as does the Standard File Manager from the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.  Prefixes 8 through 12 are used for special purposes by GS/OS or Standard File.  Prefix 8 is used by GS/OS and Standard File to indicate the default prefix; that's\hich\af4\dbch\af4\loch\f4  the same reason ORCA uses prefix 8.  Prefix 9 is set by any program launcher (including GS/OS, ORCA, and Apple's Finder) to the directory containing the executable file.  Prefixes 10, 11 and 12 are the path names for standard input, standard output, and \hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 rror output, respectively.  Use of these prefixes is covered in more detail later in this chapter.\par \par }\pard\plain \s31\qj\li720\ri1800\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2340\tx4140\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Prefix Number\tab Use\tab Default\par }\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 @\tab User's folder\tab Boot prefix\par \hich\af4\dbch\af4\loch\f4 *\tab Boot prefix\tab Boot prefix}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 boot prefix}}}{\par \hich\af4\dbch\af4\loch\f4 8\tab Current prefix\tab Boot prefix\par \hich\af4\dbch\af4\loch\f4 9\tab Application\tab Prefix of OR\hich\af4\dbch\af4\loch\f4 CA.Sys16}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 program launchers}}}{\par \hich\af4\dbch\af4\loch\f4 10\tab Standard Input\tab .CONSOLE}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard input}}}{\par \hich\af4\dbch\af4\loch\f4 11\tab Standard Output\tab .CONSOLE}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\par \hich\af4\dbch\af4\loch\f4 12\tab Error Output\tab .CONSOLE}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error output}}}{\par \hich\af4\dbch\af4\loch\f4 13\tab ORCA library\tab 9:LIBRARIES:}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Libraries prefix}}}{\par \hich\af4\dbch\af4\loch\f4 14\tab ORCA work\tab 9:}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 work prefix}}}{\par \hich\af4\dbch\af4\loch\f4 15\tab ORCA shell\tab 9:SHELL:}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell prefix}}}{\par \hich\af4\dbch\af4\loch\f4 16\tab ORCA language\tab 9:LANGUAGES:}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Languages prefix}}}{\par \hich\af4\dbch\af4\loch\f4 17\tab ORCA utility\tab 9:UTILITIES:}{\pard\plain \s16\qj\li720\ri1800\sl223\slmult1\widctlpar\tx2340\tx4140\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Utilities prefix}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 8.3  Standard Prefixes\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The prefix numbers can be used in path names.  For exam\hich\af4\dbch\af4\loch\f4 ple, to edit the system tab file, you could type either of the following commands:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 EDIT :ORCA:SHELL:SYSTABS\par \hich\af2\dbch\af4\loch\f2 EDIT 15:SYSTABS\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDIT command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 boot prefix}}}{\hich\af4\dbch\af4\loch\f4 Each time you restart your Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , GS/OS retains the volume name\hich\af4\dbch\af4\loch\f4  of the boot disk.  You can use an asterisk (*) in a path name to specify the boot prefix.  You cannot change the volume name assigned to the boot prefix except by rebooting the system.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 networks}}}{\hich\af4\dbch\af4\loch\f4 The @ prefix is useful when you are running ORCA from\hich\af4\dbch\af4\loch\f4  a network.  If you are using ORCA from a hard disk or from floppy disks, prefix @ is set just like prefix 9, defaulting to the prefix when you have installed ORCA.Sys16.  If you are using ORCA from a network, though, prefix @ is set to your network work \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 older.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 current prefix}}}{\hich\af4\dbch\af4\loch\f4 The current prefix (also called the default prefix) is the one that is assumed when you use a partial path name.  If you are using ORCA on a self-booting 3.5 inch disk, for example, prefix 8 and prefix 9 are both normally :ORC\hich\af4\dbch\af4\loch\f4 A:.  If you boot your Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  from a 3.5-inch :ORCA disk, but run the ORCA.Sys16 file in the ORCA: subdirectory on a hard disk named HARDISK, prefix 8 would still be :ORCA: but prefix 9 would be :HARDISK:ORCA:.\par \hich\af4\dbch\af4\loch\f4 The following paragraphs describe ORCA\rquote s u\hich\af4\dbch\af4\loch\f4 se of the standard prefixes.\par \hich\af4\dbch\af4\loch\f4 ORCA looks in the current prefix (prefix 8) when you use a partial path name for a file.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Libraries prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 MAKELIB utility}}}{\hich\af4\dbch\af4\loch\f4 The linker searches the files in the ORCA library prefix\hich\af4\dbch\af4\loch\f4  (prefix 13) to resolve any references not found in the program being linked.  ORCA comes with a library file that supports the standard C library; you can also create your own library files.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:include statement}}}{\hich\af4\dbch\af4\loch\f4 The resource compiler and the DeRe\hich\af4\dbch\af4\loch\f4 z utility both look for a folder called RInclude in the library prefix when they process partial path names in include and append statements.  The path searched is 13:RInclude.  See the description of the resource compiler for details.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #include}}}{\hich\af4\dbch\af4\loch\f4 The\hich\af4\dbch\af4\loch\f4  C compiler looks for a folder called ORCACDefs in the library prefix when <> characters are used around a file name in a #include statement.  The path searched is 13:ORCACDefs.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 work prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pipes}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RAM}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PREFIX command}}}{\hich\af4\dbch\af4\loch\f4 The work \hich\af4\dbch\af4\loch\f4 prefix (prefix 14) is used by some ORCA programs for temporary files.  For example, when you pipeline two or more programs so that the output of one program becomes the input to the next, ORCA creates temporary files in the work prefix for the intermediat\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  results (pipelines are described in the section \ldblquote Pipelines\rdblquote  in this chapter).  Commands that use the work prefix operate faster if you set the work prefix to a RAM disk, since I/O is faster to and from memory than to and from a disk.  If you have enough \hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 emory in your system to do so, use the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  control panel to set up a RAM disk (be sure to leave at least 1.25M for the system), then use the PREFIX command to change the work prefix.  To change prefix 14 to a RAM disk named :RAM5, for example, use t\hich\af4\dbch\af4\loch\f4 he following command:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 PREFIX 14 :RAM5\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 You won't want to do this every time you boot.  You can put this command in the LOGIN file, which you will find in the shell prefix.  The LOGIN file contains commands that are executed every time you start the ORCA s\hich\af4\dbch\af4\loch\f4 hell.\par \hich\af4\dbch\af4\loch\f4 ORCA looks in the ORCA shell prefix (prefix 15) for the following files:\par \par \hich\af4\dbch\af4\loch\f4 EDITOR}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDITOR file}}}{\par \hich\af4\dbch\af4\loch\f4 SYSTABS}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\par \hich\af4\dbch\af4\loch\f4 SYSEMAC}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSEMAC file}}}{\par \hich\af4\dbch\af4\loch\f4 SYSCMND}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSCMND file}}}{\par \hich\af4\dbch\af4\loch\f4 LOGIN}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOGIN file}}}{\par \par \hich\af4\dbch\af4\loch\f4 As we mentioned a moment ago, the LO\hich\af4\dbch\af4\loch\f4 GIN file is an EXEC file that is executed automatically at load time, if it is present.  The LOGIN file allows automatic execution of commands that should be executed each time ORCA is booted.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Languages prefix}}}{\hich\af4\dbch\af4\loch\f4 ORCA looks in the language prefix (pre\hich\af4\dbch\af4\loch\f4 fix 16) for the ORCA linker, the ORCA/C compiler, and any other assemblers, compilers, and text formatters that you have installed.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Utilities prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HELP command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CRUNCH utility}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 INIT utility}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 MAKELIB utility}}}{\hich\af4\dbch\af4\loch\f4 ORCA looks\hich\af4\dbch\af4\loch\f4  in the utility prefix (prefix 17) for all of the ORCA utility programs except for the editor, assembler, and compilers.  Prefix 17 includes the programs that execute utility commands, such as CRUNCH and MAKELIB.  The utility prefix also contains the HELP\hich\af4\dbch\af4\loch\f4 :\hich\af4\dbch\af4\loch\f4  subdirectory, which contains the text files used by the HELP command.  Command types are described in the the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318240}\hich\af4\dbch\af4\loch\f4 Prefixes 0 to 7{\*\bkmkend _Toc495318240}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard prefixes}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 prefixes\:0-7}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 prefixes\:numb\hich\af4\dbch\af4\loch\f4 ers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 GS/OS aware}}}{\hich\af4\dbch\af4\loch\f4 The original Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  operating system, ProDOS 16, had a total of eight numbered prefixes that worked a lot like the 32 numbered prefixes in GS/OS.  In fact, the original eight prefixes, numbered 0 to 7, are still in GS/OS, and \hich\af4\dbch\af4\loch\f4 are now used to support old programs that may not be able to handle the longer path names supported by GS/OS.\par \hich\af4\dbch\af4\loch\f4 When the programmers at Apple wrote GS/OS, one of the main limitations from ProDOS that they wanted to get rid of was the limit of 64 characters i\hich\af4\dbch\af4\loch\f4 n a path name.  GS/OS has a theoretical limit of 32K characters for the length of a path name, and in practice supports path names up to 8K characters.  This presented a problem: existing programs would not be able to work with the longer path names, sinc\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  they only expected 64 characters to be returned by calls that returned a path name.  Apple solved this problem by creating two classes of programs: GS/OS aware programs, and older programs.  When a program launcher, like Apple's Finder or the ORCA shell,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 launches a GS/OS aware program, prefixes 0 to 7 are cleared (if they had anything in them to start with).  The program launcher expects the program to use prefixes 8 and above.  When an old program is executed, prefixes are mapped as follows:\par \par }\pard\plain \s31\qj\li2160\ri2160\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx4140\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 GS/OS prefix\tab \hich\af4\dbch\af4\loch\f4 old ProDOS prefix\par }\pard\plain \s16\qj\li2160\ri2160\sl223\slmult1\widctlpar\tx4140\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 8\tab 0\par \hich\af4\dbch\af4\loch\f4 9\tab 1\par \hich\af4\dbch\af4\loch\f4 13\tab 2\par \hich\af4\dbch\af4\loch\f4 14\tab 3\par \hich\af4\dbch\af4\loch\f4 15\tab 4\par \hich\af4\dbch\af4\loch\f4 16\tab 5\par \hich\af4\dbch\af4\loch\f4 17\tab 6\par \hich\af4\dbch\af4\loch\f4 18\tab 7\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 In each case, the new, GS/OS prefix is copied into the older ProDOS prefix.  If any of the GS/OS prefixes are too long to fit in the older, 64 character prefixes, the program launcher refuses to run\hich\af4\dbch\af4\loch\f4  the old application, returning an error instead.  Assuming the old application is executed successfully, when it returns, the old ProDOS prefixes are copied into their corresponding GS/OS prefixes, and the ProDOS prefixes are again cleared.\par \hich\af4\dbch\af4\loch\f4 The ORCA shell\hich\af4\dbch\af4\loch\f4  fully supports this new prefix numbering scheme.  When you are working in the ORCA shell, and use a prefix numbered 0 to 7, the ORCA shell automatically maps the prefix into the correct GS/OS prefix.  The shell checks for the GS/OS aware flag before runn\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng any application, and maps the prefixes if the application needs the older prefix numbers.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318241}\hich\af4\dbch\af4\loch\f4 File Names{\*\bkmkend _Toc495318241}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file names\bxe }}}{\hich\af4\dbch\af4\loch\f4 File name designation in ORCA follows standard GS/OS conventions.  There are some special symbols used in conjunction with file na\hich\af4\dbch\af4\loch\f4 mes:\par \par }\pard\plain \s31\qj\fi-1080\li1440\sl223\slmult1\keep\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 symbol\tab meaning}{\pard\plain \s31\qj\fi-1080\li1440\sl223\slmult1\keep\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 device names\bxe }}}{\pard\plain \s31\qj\fi-1080\li1440\sl223\slmult1\keep\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 device numbers}}}{\pard\plain \s31\qj\fi-1080\li1440\sl223\slmult1\keep\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SHOW command}}}{\par }\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 .Dx\tab This indicates a device name formed by concatenating a device number and the characters '.D'.  Use the command:\par \par }\pard\plain \s26\qj\li1440\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \tab \tab \hich\af2\dbch\af4\loch\f2 SHOW UNITS\par }\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\tab \par \tab \hich\af4\dbch\af4\loch\f4 to display current assignment of \hich\af4\dbch\af4\loch\f4 device numbers.  Since device numbers can change dynamically with some kinds of devices (e.g. CD ROM drives) it is a good idea to check device numbers before using them.}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 prefixes\:numbers}}}{\par \par \hich\af4\dbch\af4\loch\f4 .name\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices\:.PRINTER}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices\:.CONSOLE}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volume names}}}{\hich\af4\dbch\af4\loch\f4 This indicates a device name.  As with device numbers, the "show units" command can be used to display a current list of device names.  The two most common device names that you will use are .CONSOLE and .PRINTER, although each device conn\hich\af4\dbch\af4\loch\f4 ected to your computer has a device name.  .CONSOLE is the keyboard and display screen, while .PRINTER is a device added to GS/OS by the Byte Works to make it easy for text programs to use the printer.\par \par \hich\af4\dbch\af4\loch\f4 x\tab Prefix number.  }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 prefixes\:numbers}}}{\hich\af4\dbch\af4\loch\f4 One of the\hich\af4\dbch\af4\loch\f4  32 numbered prefixes supported by GS/OS.  See the previous section for a description of their use.  You may use a prefix number in place of a volume name.}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\keep\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 directory walking\bxe }}}{\par \par \hich\af4\dbch\af4\loch\f4 ..\tab When this is placed at the start of a path name, it indicates that \hich\af4\dbch\af4\loch\f4 the reference is back (or up) one directory level.\par \par \hich\af4\dbch\af4\loch\f4 :\tab This symbol, when inserted in a path name, refers to a directory.  You can also use /, so long as you do not mix : characters and / characters in the same path name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 ORCA allows the use of a physical d\hich\af4\dbch\af4\loch\f4 evice number in full path names.  For example, if the SHOW UNITS command indicates that the drive with the disk named :ORCA is .D1, the following file names are equivalent.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 :ORCA:MONITOR\tab .D1:MONITOR\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Here are some examples of legal path names:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 :ORCA:SYST\hich\af2\dbch\af4\loch\f2 EM:SYSTABS\par \hich\af2\dbch\af4\loch\f2 ..:SYSTEM\par \hich\af2\dbch\af4\loch\f2 15:SYSCMND\par \hich\af2\dbch\af4\loch\f2 .D1\par \hich\af2\dbch\af4\loch\f2 .D3:LANGUAGES:ASM65816\par \hich\af2\dbch\af4\loch\f2 14:\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318242}\hich\af4\dbch\af4\loch\f4 Wildcards{\*\bkmkend _Toc495318242}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards\bxe }}}{\hich\af4\dbch\af4\loch\f4 Wildcards may be used on any command that requires a file name.  Two forms of the wildcard are allowed, the = character and the ? character.  Both can substitute \hich\af4\dbch\af4\loch\f4 for any number of characters.  The difference is that use of the ? wildcard will result in prompting, while the = character will not. Wildcards cannot be used in the subdirectory portion of a path name.  For example,}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DELETE command}}}{\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 DELETE MY=\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 wou\hich\af4\dbch\af4\loch\f4 ld delete all files that begin with MY.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The command,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 DELETE MY?\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would delete files that begin with MY after you responded yes to the prompt for each file.  The wildcards can be used anywhere in the file name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 There are limitations on the use of wildcards\hich\af4\dbch\af4\loch\f4 .  Some commands don't accept wildcards in the second file name.  These commands are:\par \par \hich\af4\dbch\af4\loch\f4 COPY}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COPY command}}}{\par \hich\af4\dbch\af4\loch\f4 MOVE}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 MOVE command}}}{\par \hich\af4\dbch\af4\loch\f4 RENAME}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RENAME command}}}{\par \par \hich\af4\dbch\af4\loch\f4 There are some commands that only work on one file.  As a result, they will only use t\hich\af4\dbch\af4\loch\f4 he first matching file name.  These commands are:\par \par \hich\af4\dbch\af4\loch\f4 ASML}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASML command}}}{\par \hich\af4\dbch\af4\loch\f4 CMPL}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPL command}}}{\par \hich\af4\dbch\af4\loch\f4 CMPLG}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPLG command}}}{\par \hich\af4\dbch\af4\loch\f4 COMPILE}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile command}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318243}\hich\af4\dbch\af4\loch\f4 Types of Text Files{\*\bkmkend _Toc495318243}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text files\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASCII character set}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language stamp}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types\:TXT}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types\:SRC}}}{\hich\af4\dbch\af4\loch\f4 GS/OS defines and uses ASCII format files with a TXT designator.  ORCA fully supports this file type with its system editor, but requires a language stamp for files that will be assembled or \hich\af4\dbch\af4\loch\f4 compiled, since the assembler or compiler is selected automatically by the system.  As a result, a new ASCII format file is supported by ORCA.  This file is physically identical to TXT files; only the file header in the directory has been changed.  The fi\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 st byte of the AUX field in the file header is now used to hold the language number, and the file type is $B0, which is listed as SRC when cataloged from ORCA. }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 TEXT language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PRODOS language}}}{\hich\af4\dbch\af4\loch\f4 TYPE command;\par \hich\af4\dbch\af4\loch\f4 One of the language names supported \hich\af4\dbch\af4\loch\f4 by ORCA SRC files is TEXT.  TEXT files are used as inputs to a text formatter.  In addition, PRODOS can be used as if it were an ORCA language name, resulting in a GS/OS TXT file.  TXT files are also sent to the formatter if an ASSEMBLE, COMPILE, or TYPE \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ommand is issued.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318244}\hich\af4\dbch\af4\loch\f4 EXEC Files{\*\bkmkend _Toc495318244}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\hich\af4\dbch\af4\loch\f4 You can execute one or more ORCA shell commands from a command file.  To create a command file, set the system language to EXEC and open a ne\hich\af4\dbch\af4\loch\f4 w file with the editor.  Any of the commands described in this chapter can be included in an EXEC file.  The commands are executed in sequence, as if you had typed them from the keyboard.  To execute an EXEC file, type the full path name or partial path n\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 me (including the file name) of the EXEC file and press }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 long command lines}}}{\hich\af4\dbch\af4\loch\f4 There is one major advantage to using an EXEC file over typing in a command from the command line.  The command line editor used by the shell re\hich\af4\dbch\af4\loch\f4 stricts your input to 255 characters.  With EXEC files, you can enter individual command lines that are up to 64K characters in length.  Since it probably isn't practical or useful to type individual command lines that are quite a bit wider than what you \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 an see on your computer screen, you can also use continuation lines.  In any EXEC file, if the shell finds a line that ends with a backslash (\\) character (possibly followed by spaces or tabs), the line is concatenated with the line that follows, and the \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 wo lines are treated as a single line.  The command is treated exactly as if the backslash character and the end of line character were replaced by spaces.  For example, the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 link command}}}{\hich\af2\dbch\af4\loch\f2 link file1 file2 file3 keep=myfile\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 could be typed i\hich\af4\dbch\af4\loch\f4 nto an EXEC file as\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 link             \\\par \hich\af2\dbch\af4\loch\f2    file1         \\\par \hich\af2\dbch\af4\loch\f2    file2         \\\par \hich\af2\dbch\af4\loch\f2    file3         \\\par \hich\af2\dbch\af4\loch\f2    keep=myfile\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The two versions of the command would do exactly the same thing.\par \hich\af4\dbch\af4\loch\f4 If you execute an interactive utility, such as the ORCA Editor, from an EXEC f\hich\af4\dbch\af4\loch\f4 ile, the utility operates normally, accepting input from the keyboard.  If the utility name was not the last command in the EXEC file, then you are returned to the EXEC file when you quit the utility.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 branching\:EXEC files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files\:parameter\hich\af4\dbch\af4\loch\f4  passing}}}{\hich\af4\dbch\af4\loch\f4 EXEC files are programmable; that is, ORCA includes several commands designed to be used within EXEC files that permit conditional execution and branching.  You can also pass parameters into EXEC files by including them on the command line.  The\hich\af4\dbch\af4\loch\f4 se features are described in the following sections.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\hich\af4\dbch\af4\loch\f4 EXEC files can call other EXEC files.  The level to which EXEC files can be nested and the number of variables that can be defined at each level depend on the available memory.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:multiple commands}}}{\hich\af4\dbch\af4\loch\f4 You can put more than one command on a single line of an EXEC file; to do so, separate the commands with semicolons (;).\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318245}\hich\af4\dbch\af4\loch\f4 Passing Parameters Into EXEC Files{\*\bkmkend _Toc495318245}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files\:parameter passing\bxe }}}{\hich\af4\dbch\af4\loch\f4 When you execute an EXEC\hich\af4\dbch\af4\loch\f4  file, you can include the values of as many parameters as you wish by listing them after the path name of the EXEC file on the command line.  Separate the parameters with spaces or tab characters; to specify a parameter value that has embedded spaces or \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 abs, enclose the value in quotes.  Quote marks embedded in a parameter string must be doubled.\par \hich\af4\dbch\af4\loch\f4 For example, suppose you want to execute an EXEC file named FARM, and you want to pass the following parameters to the file:\par \par \hich\af4\dbch\af4\loch\f4 cow\par \hich\af4\dbch\af4\loch\f4 chicken\par \hich\af4\dbch\af4\loch\f4 one egg\par \hich\af4\dbch\af4\loch\f4 tom's cat\par \par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 In t\hich\af4\dbch\af4\loch\f4 his case, you would enter the following command on the command line:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 FARM cow chicken "one egg" "tom's cat"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Parameters are assigned to variables inside the EXEC file as described in the next section.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318246}\hich\af4\dbch\af4\loch\f4 Programming EXEC Files{\*\bkmkend _Toc495318246}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 In addition to being able to ex\hich\af4\dbch\af4\loch\f4 ecute any of the shell commands discussed in the command descriptions section of this chapter, EXEC files can use several special commands that permit conditional execution and branching.  This section discusses the use of variables in EXEC files, the ope\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ators used to form boolean (logical) expressions, and the EXEC command language.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Variables\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:assigning values to}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 case sensitivity\:shell}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FOR command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SET command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNSET command}}}{\hich\af4\dbch\af4\loch\f4 A\hich\af4\dbch\af4\loch\f4 ny alphanumeric string up to 255 characters long can be used as a variable name in an EXEC file.  (If you use more than 255 characters, only the first 255 are significant.)  All variable values and parameters are ASCII strings of 65535 or fewer characters\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4   Variable names are not case sensitive, but the values assigned to the variables are case sensitive.  To define values for variables, you can pass them into the EXEC file as parameters, or include them in a FOR command or a SET command as described in th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  section \ldblquote EXEC File Command Descriptions.\rdblquote   To assign a null value to a variable (a string of zero length), use the UNSET command.  Variable names are always enclosed in curly brackets (\{\}), except when being defined in the SET, UNSET and FOR commands.\par \hich\af4\dbch\af4\loch\f4 Var\hich\af4\dbch\af4\loch\f4 iables can be defined within an EXEC file, or on the shell command line before an EXEC file is executed, by using the SET command.  Variables included in an EXPORT command on the shell command line can be used within any EXEC file called from the command \hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 ine.  Variables included in an EXPORT command within an EXEC file are valid in any EXEC files called by that file; they can be redefined locally, however.  Variables redefined within an EXEC file revert to their original values when that EXEC file is term\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 nated, except if the EXEC file was run using the EXECUTE command.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXECUTE command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:scope}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXPORT command}}}{\hich\af4\dbch\af4\loch\f4 The following variable names are reserved.  Several of these variables may have number va\hich\af4\dbch\af4\loch\f4 lues; keep in mind that these values are literal ASCII strings.  A null value (a string of zero length) is considered undefined.  Use the UNSET command to set a variable to a null value.  Several of the predefined variables are used for special purposes w\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 thin the shell.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASCII character set}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNSET command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 0\} shell variable\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 1\}, \{2\}, ... shell variables\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 CaseSensitive\} shell variable\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Command\} shell variable\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Echo\} shell variable\bxe }}}{\par \par }\pard \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright {\{\hich\af4\dbch\af4\loch\f4 0\}\tab The\hich\af4\dbch\af4\loch\f4  name of the EXEC file being executed.\par \par \{\hich\af4\dbch\af4\loch\f4 1\}, \{2\}, ...\tab Parameters from the command line.  Parameters are numbered sequentially in the sequence in which they are entered.\par \par \{\hich\af4\dbch\af4\loch\f4 #\}\tab The number of parameters passed.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 AuxType\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file t\hich\af4\dbch\af4\loch\f4 ypes}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 auxiliary file type}}}{\{\hich\af4\dbch\af4\loch\f4 AuxType\}\tab Provides automatic auxiliary file type specification.  The variable contains a single value, specified as a hex or decimal integer.  The AuxType string sets the auxiliary file type for the executable file produc\hich\af4\dbch\af4\loch\f4 ed by the linker.  Any value from 0 to 65535 ($FFFF) can be used.\par \par \{\hich\af4\dbch\af4\loch\f4 CaseSensitive\}\tab }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 case sensitivity\:shell}}}{\hich\af4\dbch\af4\loch\f4 If you set this variable to any non-null value, then string comparisons are case sensitive.  The default value is null.\par \par \{\hich\af4\dbch\af4\loch\f4 Command\}\tab The name of\hich\af4\dbch\af4\loch\f4  the last command executed, exactly as entered, excluding any command parameters.  For example, if the command was :ORCA:MYPROG, then \{Command\} equals :ORCA:MYPROG; if the command was EXECUTE :ORCA:MYEXEC, then \{Command\} equals EXECUTE.  The \{Parameters\} \hich\af4\dbch\af4\loch\f4 v\hich\af4\dbch\af4\loch\f4 ariable is set to the value of the entire parameters list.\par \par \{\hich\af4\dbch\af4\loch\f4 Echo\}\tab If you set this variable to a non-null value, then commands within the EXEC file are printed to the screen before being executed.  The default value for Echo is null (undefined).\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Ex\hich\af4\dbch\af4\loch\f4 it\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error reporting\:shell}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNSET command}}}{\{\hich\af4\dbch\af4\loch\f4 Exit\}\tab If you set this variable to any non-null value, and if any command or nested EXEC file returns a non-zero error status, then execution of the EXEC file is terminated.  The d\hich\af4\dbch\af4\loch\f4 efault value for \{Exit\} is non-null (it is the ASCII string true).  Use the UNSET command to set \{Exit\} to a null value (that is, to delete its definition).\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Insert\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\{\hich\af4\dbch\af4\loch\f4 Insert\}\tab When you are using the shell's li\hich\af4\dbch\af4\loch\f4 ne editor, you start off in over strike mode.  If the \{Insert\} shell variable is set to any value, the shell's line editor defaults to over strike mode.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 KeepName\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 KEEP directive}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 KEEP parameter}}}{\{\hich\af4\dbch\af4\loch\f4 KeepName\}\tab Provides an automatic output file name for compilers and assemblers, avoiding the KEEP parameter on the command line and the KEEP directive in the language.  If there is no keep name specified on the command line, and there is a non-null \{Keep\hich\af4\dbch\af4\loch\f4 Name\} variable, the shell will build a keep name using this variable.\par \tab \tab }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASML command}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASMLG command}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RUN command}}}{\hich\af4\dbch\af4\loch\f4 This keep name will be applied to all object modules produced by an assembler or compiler.  On the\hich\af4\dbch\af4\loch\f4  ASML, ASMLG and RUN commands, if no \{LinkName\} variable is used, the output name from the assemble or compile will also determine the name for the executable file.  See \{LinkName\} for a way to override this.}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 executable files}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:m\hich\af4\dbch\af4\loch\f4 etacharacters}}}{\par \tab \tab \hich\af4\dbch\af4\loch\f4 There are two special characters used in this variable that affect the automatic naming: % and $.  Using the % will cause the shell to substitute the source file name.  Using $ expands to the file name with the last extension removed (th\hich\af4\dbch\af4\loch\f4 e last period (.) and trailing characters).\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 KeepType\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types}}}{\{\hich\af4\dbch\af4\loch\f4 KeepType\}\tab Provides automatic file type specification.  The variable contains a single value, specified as a hex or decimal integer, or a three-letter GS/O\hich\af4\dbch\af4\loch\f4 S file type.  The KeepType string sets the file type for the executable file produced by the linker.  Legal file types are $B3 to $BF.  Legal file descriptors are: EXE, S16, RTL, STR, NDA, LDA, TOL, etc.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Libraries\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\{\hich\af4\dbch\af4\loch\f4 Libraries\}\tab When the linker finishes linking all of the files you specify explicitly, it checks to see if there are any unresolved references in your program.  If so, it searches various libraries to try and resolve the references.  If \hich\af4\dbch\af4\loch\f4 this variable is not set, the linker will search all of the files in prefix 13 that have a file type of LIB.  If this variable is set, the linker searches all of the files listed by this shell variable, and does not search the standard libraries folder.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 LinkName\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASML command}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASMLG command}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RUN command}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LINK command}}}{\{\hich\af4\dbch\af4\loch\f4 LinkName\}\tab Provides an automatic output name for the executable file created by the link editor.  The % and $ metacharacters described f\hich\af4\dbch\af4\loch\f4 or \{KeepName\} work with this variable, too.  When an ASML, ASMLG or RUN command is used, this variable determines the name of the executable file, while \{KeepName\} specifies the object file name.  This variable is also used to set the default file name fo\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  the LINK command.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Parameters\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXECUTE command}}}{\{\hich\af4\dbch\af4\loch\f4 Parameters\}\tab The parameters of the last command executed, exactly as entered, excluding the command name.  For example, if the command was  EXECUTE :ORCA:MYEXEC, then \{Param\hich\af4\dbch\af4\loch\f4 eters\} equals :ORCA:MYEXEC.  The \{Command\} variable is set to the value of the command name.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell prompt}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Prompt\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line\:prompt}}}{\{\hich\af4\dbch\af4\loch\f4 Prompt\}\tab When the shell's command line editor is ready for a command line, it \hich\af4\dbch\af4\loch\f4 prints a # character as a prompt.  If the \{Prompt\} shell variable is set to any value except the # character, the shell will print the value of the \{Prompt\} shell variable instead of the # character.  If the \{Prompt\} shell variable is set to #, the shell \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 oes not print a prompt at all.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Separator\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 GS/OS}}}{\{\hich\af4\dbch\af4\loch\f4 Separator\}\tab Under ProDOS, full path names started with the / character, and directories within path names were separated from each other, from volume nam\hich\af4\dbch\af4\loch\f4 es, and from file names by the / character.  In GS/OS, both the / character and the : character can be used as a separator when you enter a path name, but the : character is universally used when writing a path name.  If you set the Separator shell variab\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e to a single character, that character will be used as a separator whenever the shell writes a path name.  Note that, while many utilities make shell calls to print path names, not all do, and if the utility does not use the shell or check the \{Separator\}\hich\af4\dbch\af4\loch\f4  shell variable, the path names will not be consistent.\par \par }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Status\} shell variable\bxe }}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error reporting\:shell}}}{\{\hich\af4\dbch\af4\loch\f4 Status\}\tab The error status returned by the last command or EXEC file executed.  This variable is the ASCII character 0 ($30) if the com\hich\af4\dbch\af4\loch\f4 mand completed successfully.  For most commands, if an error occurred, the error value returned by the command is the ASCII string 65535 (representing the error code $FFFF).\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Logical Operators\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 expressions\:shell\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 case sensitivity\:shell}}}{\hich\af4\dbch\af4\loch\f4 ORCA\hich\af4\dbch\af4\loch\f4  includes two operators that you can use to form boolean (logical) expressions.  String comparisons are case sensitive if \{CaseSensitive\} is not null (the default is for string comparisons to not be case sensitive).  If an expression result is true, then \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he expression returns the character 1.  If an expression result is not true, then the expression returns the character 0.  There must be one or more spaces before and after the comparison operator.\par \par }\pard \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 str1 == str2}{\tab \hich\af4\dbch\af4\loch\f4 String comparison:  true if string }{\i \hich\af4\dbch\af4\loch\f4 str1}{\hich\af4\dbch\af4\loch\f4  and \hich\af4\dbch\af4\loch\f4 string }{\i \hich\af4\dbch\af4\loch\f4 str2}{\hich\af4\dbch\af4\loch\f4  are identical; false if not.\par }{\i \hich\af4\dbch\af4\loch\f4 str1 != str2}{\tab \hich\af4\dbch\af4\loch\f4 String comparison:  false if string }{\i \hich\af4\dbch\af4\loch\f4 str1}{\hich\af4\dbch\af4\loch\f4  and string }{\i \hich\af4\dbch\af4\loch\f4 str2}{\hich\af4\dbch\af4\loch\f4  are identical; true if not.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Operations can be grouped with parentheses.  For example, the following expression is true if one of the expressions\hich\af4\dbch\af4\loch\f4  in parentheses is false and one is true; the expression is false if both expressions in parentheses are true or if both are false:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 IF ( COWS == KINE ) != ( CATS == DOGS )\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Every symbol or string in a logical expression must be separated from every other \hich\af4\dbch\af4\loch\f4 by at least one space.  In the preceding expression, for example, there is a space between the string comparison operator != and the left parentheses, and another space between the left parentheses and the string CATS.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Entering Comments\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 comments\:EXEC\hich\af4\dbch\af4\loch\f4  files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMMENT command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 redirection}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printing files}}}{\hich\af4\dbch\af4\loch\f4 To enter a comment into an EXEC file, start the line with an asterisk (*).  The asterisk is actually a command that does nothing, so you must follow the ast\hich\af4\dbch\af4\loch\f4 erisk by at least one space.  For example, the following EXEC file sends a catalog listing to the printer:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CATALOG >.PRINTER\par \hich\af2\dbch\af4\loch\f2 * Send a catalog listing to the printer\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Use a semicolon followed by an asterisk to put a comment on the same line as a command:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CATALOG >.PRINTER  ;* Send a catalog listing to the printer\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318247}\hich\af4\dbch\af4\loch\f4 Redirecting Input and Output{\*\bkmkend _Toc495318247}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard input}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 appending to the end of a file\bxe }}}{\hich\af4\dbch\af4\loch\f4 Standard input is usually through the keyboard, although it can also be from a\hich\af4\dbch\af4\loch\f4  text file or the output of a program; standard output is usually to the screen, though it can be redirected to a printer or another program or disk file.  You can redirect standard input and output for any command by using the following conventions on th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  command line:\par \par \tab \hich\af4\dbch\af4\loch\f4 <inputdevice\tab Redirect input to be from inputdevice.\par \tab \hich\af4\dbch\af4\loch\f4 >outputdevice\tab Redirect output to go to outputdevice.\par \tab \hich\af4\dbch\af4\loch\f4 >>outputdevice\tab Append output to the current contents of outputdevice.\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices\:.PRINTER}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices\:.CONSOLE}}}{\hich\af4\dbch\af4\loch\f4 The input d\hich\af4\dbch\af4\loch\f4 evice can be the keyboard or any text or source file.  To redirect input from the keyboard, use the device name .CONSOLE.\par \hich\af4\dbch\af4\loch\f4 The output device can be the screen, the printer, or any file.  If the file named does not exist, ORCA opens a file with that name.  T\hich\af4\dbch\af4\loch\f4 o redirect output to the screen, use the device name .CONSOLE; to redirect output to the printer, use .PRINTER.  .PRINTER is a RAM based device driver; see the section describing .PRINTER, later in this chapter, for details on when .PRINTER can be used, h\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 w it is installed, and how you can configure it.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SHOW command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language names}}}{\hich\af4\dbch\af4\loch\f4 Both input and output redirection can be used on the same command line.  The input and output redirection instructions can appear in any position on the command li\hich\af4\dbch\af4\loch\f4 ne.  }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 redirection}}}{\hich\af4\dbch\af4\loch\f4 For example, to redirect output from a compile of the program MYPROG to the printer, you could use either of the following commands:}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers\:redirecting output}}}{\par \par \hich\af4\dbch\af4\loch\f4 COMPILE MYPROG >.PRINTER\par \hich\af4\dbch\af4\loch\f4 COMPILE >.PRINT\hich\af4\dbch\af4\loch\f4 ER MYPROG\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 appending to the end of a file}}}{\hich\af4\dbch\af4\loch\f4 To redirect output from the CATALOG command to be appended to the data already in a disk file named CATSN.DOGS, use the following command:\par \par \hich\af4\dbch\af4\loch\f4 CATALOG >>CATSN.DOGS\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files\:redirection}}}{\hich\af4\dbch\af4\loch\f4 Input and out\hich\af4\dbch\af4\loch\f4 put redirection can be used in EXEC files.  When output is redirected when the EXEC file is executed, input and output can still be redirected from individual commands in the EXEC file.\par \hich\af4\dbch\af4\loch\f4 The output of programs that do not use standard output, and the input \hich\af4\dbch\af4\loch\f4 of programs that do not use standard input, cannot be redirected.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error reporting\:shell}}}{\hich\af4\dbch\af4\loch\f4 Error messages also normally go to the screen.  They can be redirected independently of standard output.  To redirect error output, use the\hich\af4\dbch\af4\loch\f4  following conventions on the command line:\par \par }\pard \s16\qj\li360\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 >&}{\i \hich\af4\dbch\af4\loch\f4 outputdevice}{\tab \hich\af4\dbch\af4\loch\f4 Redirect error output to go to }{\i \hich\af4\dbch\af4\loch\f4 outputdevice}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 >>&}{\i \hich\af4\dbch\af4\loch\f4 outputdevice}{\tab \hich\af4\dbch\af4\loch\f4 Append error output to the current contents of }{\i \hich\af4\dbch\af4\loch\f4 outputdevice}{\hich\af4\dbch\af4\loch\f4 .\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Error output devices follow the same conventions as those described above\hich\af4\dbch\af4\loch\f4  for standard output.  Error output redirection can be used in EXEC files.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318248}\hich\af4\dbch\af4\loch\f4 The .PRINTER Driver{\*\bkmkend _Toc495318248}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices\:.PRINTER}}}{{\*\bkmkstart printers}\hich\af4\dbch\af4\loch\f4 The operating system on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  gives you a number of ways to write to a printer, but none of them can be used with input and out\hich\af4\dbch\af4\loch\f4 put redirection, nor can they be used with standard file write commands, which is the way you would write text to a printer on many other computers.  On the other hand, GS/OS does allow the installation of custom drivers, and these custom drivers can, in \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 act, be used with I/O redirection, and you can use GS/OS file output commands to write to a custom driver.  Our solution to the problem of providing easy to use text output to a printer is to add a custom driver called .PRINTER.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers\:redirecting \hich\af4\dbch\af4\loch\f4 output}}}{\hich\af4\dbch\af4\loch\f4 As described in the last section, you can redirect either standard out or error out to your printer by using the name .PRINTER as the destination file, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 TYPE MyFile >.Printer\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 You can also open a file, using .PRINTER as the file name, u\hich\af4\dbch\af4\loch\f4 sing standard GS/OS calls.  When you write to this file, the characters appear on your printer, rather than being written to disk.  In short, as far as your programs are concerned, .PRINTER is just a write-only file.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers\:configuration}}}{\hich\af4\dbch\af4\loch\f4 The only\hich\af4\dbch\af4\loch\f4  thing you have to watch out for is that, since .PRINTER is a RAM based driver, it must be installed on your boot disk before you can use the driver.  If you are running from the system disk we sent with ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4 , the .PRINTER driver is alread\hich\af4\dbch\af4\loch\f4 y installed, and you can use it right away.  If you are booting from some other disk, you will need to install the .PRINTER driver on that disk.  There is an installer script that will move the correct file for you, or you can simply copy the files ORCA.P\hich\af4\dbch\af4\loch\f4 R\hich\af4\dbch\af4\loch\f4 INTER and PRINTER.CONFIG from the SYSTEM:DRIVERS folder of the ORCA/C system disk to the SYSTEM:DRIVERS folder of your system disk.\par \hich\af4\dbch\af4\loch\f4 All printers are not created equal, so any printer driver must come with some method to configure the driver.  By default, o\hich\af4\dbch\af4\loch\f4 ur printer driver is designed to handle a serial printer installed in slot 1.  It prints a maximum of 80 characters on one line, after which it will force a new line, and put any remaining characters on the new line.  After printing 60 lines, a form feed \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 s issued to advance the paper to the start of a new page.  When a new line is needed, the driver prints a single carriage return character ($0D).  If any of these options are unsuitable for your printer, you can change them using either a CDev or a CDA.  \hich\af4\dbch\af4\loch\f4 B\hich\af4\dbch\af4\loch\f4 oth of these programs produce a configuration file called PInit.Options, which will be placed in your System folder, so you need to be sure your boot disk is in a drive and not write protected when you configure your printer.  This file is read by an init\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 called TextPrinterInit at boot time to configure the text printer driver, which is itself a GS/OS driver called TextPrinter.\par \hich\af4\dbch\af4\loch\f4 Figure 8.4 shows the screens you will see when you use the CDev from Apple's Control panel or when you select the CDA from the CDA \hich\af4\dbch\af4\loch\f4 menu.  The options that you can select are the same for both configuration programs; these are described in Table 8.5.\par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw326\pich380\picwgoal6520\pichgoal7600\macpict\bliptag1776081729\blipupi72{\*\blipuid 69dcdb41b16dd6ebf27523eee4ea197c}275200000000017c01461101a00082a0008e01000a0000000002d0024098002a00000000004b014800000000004b014600000000004b0146000102d70007007fdaff01f80007007fdaff01f800070060da00011800070060da00011800070060da00011800070060da00011800190367e7fff3f8ff01f81efc00063807c000000380f4ff019800190367e7fff3f8ff01f81efc00063807c000000380f4ff0198001a0360060030f7000c33000018000018066000000180f4000118001a0360060030f7000c33000018000018066000000180f4000118001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001a0360060030f7000c3033331838661807c666666180f4000118001a0360060030f7000c3033331838661807c666666180f4000118001b0367e60033f8ff0df83033331830661806066667e180f4ff0198001b0367e60033f8ff0df83033331830661806066667e180f4ff019800190360060030f700fe33091b306618060666660180f400011800190360060030f700fe33091b306618060666660180f4000118001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff0198001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff019800070060da00011800070060da00011800070060da00011800070060da0001180007007fdaff01f80007007fdaff01f8000e0070f6000360060060e9000118000e0070f6000360060060e900011800150070f6000360198060fd00030ffffffef100011800150070f6000360198060fd00030ffffffef100011800180370000007fbff018000fd60fd00030c000006f100011800180370000007fbff018000fd60fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f200011800160b70000007bbe0667e66600000fe660060e900011800160b70000007bbe0667e66600000fe660060e900011800160f70000006eee6667e66600000799999e0e900011800160f70000006eee6667e66600000799999e0e900011800160570000007bbe0fe0002600000fe660060e900011800160570000007bbe0fe0002600000fe660060e900011800140370000007fcff06e00000799999e0e900011800140370000007fcff06e00000799999e0e9000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc00011800180070f60004799999e060f50005030602600006fc00011800180070f60004799999e060f50005030602600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc0001180098002a004b000000960148004b000000960146004b0000009601460001280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc00011800150070fe00030199998cfd0003799999e0e900011800150070fe00030199998cfd0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001d0570000006aae0fe0006600000799999e0f1000030fd000460000018001d0570000006aae0fe0006600000799999e0f1000030fd00046000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd000930007800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd0009300078000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e00006000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd00046000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd000460000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e0000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e000001800160f70000006eee79879e6600000799999e0e900011800160f70000006eee79879e6600000799999e0e900011800160b70000007bbe00001e6600000fe660060e900011800160b70000007bbe00001e6600000fe660060e900011800160f70000006eee6667806600000799999e0e900011800160f70000006eee6667806600000799999e0e9000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c00000180098002a0096000000e101480096000000e101460096000000e1014600011c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c000001800140070fe00fef00170f0fe00fe660060e900011800140070fe00fef00170f0fe00fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e900011800150070f600fe660060fc000001f6ff00f8fb00011800150070f600fe660060fc000001f6ff00f8fb00011800170070f60003799999e0fc00010180f7000018fb00011800170070f60003799999e0fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc00011800160b700000180606040000800000fe660060e900011800160b700000180606040000800000fe660060e900011800160f70000007fe06040000800000799999e0e900011800160f70000007fe06040000800000799999e0e9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa00011800140370000001fd990098fe00fe660060e900011800140370000001fd990098fe00fe660060e900011800160070fe0004f0f0f998f8fe0003799999e0e900011800160070fe0004f0f0f998f8fe0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e900011800130070f60003799999e0f600003ff6ff02fc1800130070f60003799999e0f600003ff6ff02fc180098002a00e10000012c014800e10000012c014600e10000012c01460001140070f600037fffffe0f600013080f700020c1800140070f600037fffffe0f600013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc1800160070fe00041f98186780fe0003780001e0e900011800160070fe00041f98186780fe0003780001e0e900011800150070fe00001ffeff0080fe0002780001e8ff01f800150070fe00001ffeff0080fe0002780001e8ff01f800160070fe00041f80060780fe0003780001e2e922013800160070fe00041f80060780fe0003780001e2e922013800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00041f81860780fe0003780001e2e922013800160070fe00041f81860780fe0003780001e2e9220138001604700000079ffeff009efe0003780001e8e9880198001604700000079ffeff009efe0003780001e8e98801980016047000000780fe00071e600000780001e2e92201380016047000000780fe00071e600000780001e2e922013800150370000007fdff07fe600000780001e8e988019800150370000007fdff07fe600000780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e98801980016017607feff02e0ffe7feff04fe780001e2e92201380016017607feff02e0ffe7feff04fe780001e2e922013800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779f0e660fe664c707078726780001e2e922013800160f779f0e660fe664c707078726780001e2e922013800160f779e670f3fe0e3e7339f331e780001e8e988019800160f779e670f3fe0e3e7339f331e780001e8e9880198001604779e079f3ffee707339f033e780001e2e9220138001604779e079f3ffee707339f033e780001e2e9220138001604779e7f0f27fee70733933f3e780001e8e9880198001604779e7f0f27fee70733933f3e780001e8e988019800160f779f0e678fe7e7c333c7873e780001e2e922013800160f779f0e678fe7e7c333c7873e780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e922013800140070fd000201ff80fd0003780001e8e988019800140070fd000201ff80fd0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800160070fe000407800001e0fe0003780001e8e98801980098002a012c000001770148012c000001770146012c0000017701460001160070fe000407800001e0fe0003780001e8e988019800160070fe00041800180018fe0003780001e2e922013800160070fe00041800180018fe0003780001e2e922013800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e2e922013800160070fe00046000180006fe0003780001e2e922013800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e2e922013800160f700000018000180001800000780001e2e922013800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e2e922013800160f700000060000180000600000780001e2e922013800160f700000060000060000600000780001e8e988019800160f700000060000060000600000780001e8e988019800160f700000018000018001800000780001e2e922013800160f700000018000018001800000780001e2e922013800160f700000018000006001800000780001e8e988019800160f700000018000006001800000780001e8e988019800160070fe00046000001806fe0003780001e2e922013800160070fe00046000001806fe0003780001e2e922013800160070fe00046000000606fe0003780001e8e988019800160070fe00046000000606fe0003780001e8e988019800160070fe000018fe000018fe0003780001e2e922013800160070fe000018fe000018fe0003780001e2e922013800160070fe000407800001e0fe0003780001e8e988019800160070fe000407800001e0fe0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800140070fd000201ff80fd00037fffffe8e988019800140070fd000201ff80fd00037fffffe8e9880198000e0070f600037fffffe2e9220138000e0070f600037fffffe2e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000e0070f60003607fe062e9220138000e0070f60003607fe062e922013800120070fe00010fc6fb00fe600068e988019800120070fe00010fc6fb00fe600068e988019800110070fe000003fa00fe600062e922013800110070fe000003fa00fe600062e922013800140070fe0003030e7f0ffd00fe600068e988019800140070fe0003030e7f0ffd00fe600068e988019800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9f80fe000361801868e988019800160070fe000403066d9f80fe000361801868e988019800140070fe000303066d98fd00fe600062e922013800140070fe000303066d98fd00fe600062e922013800150070fe0003030f6d8ffd000360198068e988019800150070fe0003030f6d8ffd000360198068e9880198000e0070f6000360060062e9220138000e0070f6000360060062e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000b007ff3ff00e2e9220138000b007ff3ff00e2e9220138000f0070fd0000f0f80000e8e9880198000f0070fd0000f0f80000e8e988019800150a70001801e0f0000019800efd0000e2e922013800150a70001801e0f0000019800efd0000e2e922013800150a7000780260f00000198006fd0000e8e988019800150a7000780260f00000198006fd0000e8e988019800160b70c6180660f00000198f061ffe0000e2e922013800160b70c6180660f00000198f061ffe0000e2e922013800160f70c6180660f000001f998619800000e8e988019800160f70c6180660f000001f998619800000e8e988019800160f706c180660f00000199f8619800000e2e922013800160f706c180660f00000199f8619800000e2e922013800160f706c180640f0000019980619800000e8e988019800160f706c180640f0000019980619800000e8e988019800160b70387e6780f00000198f0f1ffe0000e2e922013800160b70387e6780f00000198f0f1ffe0000e2e92201380098002a01770000017c014801770000017c014601770000017c01460001130070fd0000f0fc000018fe0000e8e988019800130070fd0000f0fc000018fe0000e8e98801980007007fdaff01f80007007fdaff01f80002d700a0008fa00083ff}}{\tab }{{\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw387\pich378\picwgoal7740\pichgoal7560\macpict\bliptag3408740\blipupi72{\*\blipuid 00340364c76202c5ae82cc2c87d7c6bf}18e500000000017a01831101a00082a0008e01000a0000000002d0024098003200000000003f018800000000003f018300000000003f0183000105d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c0000b00c0ec00001fe80001c0000b00c0ec00001fe80001c00005d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0001009c0018060f1ffe7ffc006db0001c0001009c0018060f1ffe7ffc006db0001c0001009c001804e79ffe7ffc00edb0001c0001009c001804e79ffe7ffc00edb0001c0001009c003004ff9e0c0f9c006db0001c0001009c003004ff9e0c0f9c006db0001c0001009c0330060f9ce67ffc006db0001c0001009c0330060f9ce67ffc006db0001c0001009c01e007e79ce67f9c006db0001c0001009c01e007e79ce67f9c006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c0060f0e0f0ffc00fdb0001c0001009c00c0060f0e0f0ffc00fdb0001c0000e03c000007ffdff00c0da0001c0000e03c000007ffdff00c0da0001c0001004c001803006f30001079fe60001c0001004c001803006f30001079fe60001c0001003c0018030f200021c3180e70001c0001003c0018030f200021c3180e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c00c00300631b001803f3030003f319fb0000031b180e70001c000980032003f0000007e0188003f0000007e0183003f0000007e018300011c15c00c00300631b001803f3030003f319fb0000031b180e70001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001100c0f9000030fe000230001fe10001c0001100c0f9000030fe000230001fe10001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0000b00c0f7000030dd0001c0000b00c0f7000030dd0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c003f1f8f1f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c000312ac00c003f1f001f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c0000700c0d20001c0000700c0d20001c0000d06c001800e018180d80001c000280cc001800e018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c000280cc00300319f9f80303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c0002821c00300319f9f803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b1803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b180303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f80303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f803fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0002500c0fb001a3fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0000700c0d20001c0001104c001803f80fb0002319f3fdf0001c0001504c001803f80fb0006319f3f00003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001811c003000631b7bf001f3f0035b03186003180e30001c0001912c003000631b7bf001f3f0035b03186001b1f1fe40001c0001912c033000631b8318031b180359f3f00001b1f1fe40001c0001912c033000631b8318031b180359f3f00000631b0e40001c0001912c01e000631b0318031b1803181b186000631b0e40001c0001912c01e000631b0318031b1803181b18600063f9fe40001c000980032007e000000bd0188007e000000bd0183007e000000bd018300011912c00c000633b0318031b18031b1b18000063f9fe40001c0001a13c00c000633b0318031b18031b1b1800006300180e50001c0001a13c00c00061db031801f3180319f3f000006300180e50001c0001912c00c00061db031801f3180319f3f0000061f9fe40001c0000d00c0f20002061f9fe40001c0000700c0d20001c000120bc001800f0006180000180006dd0001c0001a0bc001800f0006180000180006fd000003fd000018e70001c0001809c0018006000018000018fb000003fd000018e70001c0001809c0018006000018000018fb000006fd00000ce70001c0001b10c00300063f0e3f001f3f378e3f1f060006fd00000ce70001c0001c15c00300063f0e3f001f3f378e3f1f06000c3f1f3f1f06e70001c0001c15c0330006318618003018380631b180000c3f1f3f1f06e70001c0001c11c0330006318618003018380631b180001831feb10083e70001c0001c11c01e0006318618001f18300631b186001831feb10083e70001c0001c15c01e0006318618001f18300631b186000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f318180000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f3181800003319f319f98e70001c0001300c0f500081f000003319f319f98e70001c0000b00c0f500001fdf0001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200bd000000fc018800bd000000fc018300bd000000fc018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200fc0000013b018800fc0000013b018300fc0000013b018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000c00c0d900010180fc0001c0000c00c0d900010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c000980032013b0000017a0188013b0000017a0183013b0000017a018300013000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0000700c0d20001c0000700c0d20001c00005d1ff01c00005d1ff01c00002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf00a0008fa00083ff}}{\par }\pard \qc\keepn\widctlpar\tqr\tx7920\adjustright {\fs20 \par }\pard\plain \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Figure 8.4:  Text Printer Configuration Screens\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s31\qj\li360\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Option\tab Description\par }\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Slot\tab }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers\:slot}}}{\hich\af4\dbch\af4\loch\f4 This entry is the physical slot whe\hich\af4\dbch\af4\loch\f4 re your printer is located.\par \hich\af4\dbch\af4\loch\f4 Lines per page\tab }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers\:lines per page}}}{\hich\af4\dbch\af4\loch\f4 This entry is a single number, telling the printer driver how many lines appear on a sheet of paper.  Most printers print 66 lines on a normal letter-size sheet of paper; it is trad\hich\af4\dbch\af4\loch\f4 itional to print on 60 of those lines and leave the top and bottom 3 lines blank to form a margin.  When the printer driver finishes printing the number of lines you specify, it issues a form-feed character ($0C), which causes most printers to skip to the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 top of a new page.\par \tab \tab \hich\af4\dbch\af4\loch\f4 If you set this value to 0, the printer driver will never issue a form-feed character.\par \hich\af4\dbch\af4\loch\f4 Columns per line\tab }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers\:characters per line}}}{\hich\af4\dbch\af4\loch\f4 This option is a single number telling the printer driver how many columns are on a sheet of p\hich\af4\dbch\af4\loch\f4 aper.  Most printers print 80 columns on a normal letter-size sheet of paper.  If you use a value of -1, the printer driver will never split a line.  (Using the CDA configuration program, the value before 0 shows up as BRAM default; you can use the normal\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 control panel printer configuration page to set the line length to unlimited.)  What your printer does with a line that is too long is something you would have to determine be trial and error.\par \hich\af4\dbch\af4\loch\f4 Delete LF\tab Some printers need a carriage-return line-feed charac\hich\af4\dbch\af4\loch\f4 ter sequence to get to the start of a new line, while others only need a carriage-return.  Some programs write a carriage-return line-feed combination, while others only write a carriage-return.  This option lets you tell the printer driver to strip a lin\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 -feed character if it comes right after a carriage-return character, blocking extra line-feed characters coming in from programs that print both characters.\par \tab \tab \hich\af4\dbch\af4\loch\f4 You can select three options here:  Yes, No, or BRAM Default.  The Yes option strips extra line-f\hich\af4\dbch\af4\loch\f4 eeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have selected using the printer configuration program in the control panel.\par \hich\af4\dbch\af4\loch\f4 Add LF\tab Some printers ne\hich\af4\dbch\af4\loch\f4 ed a carriage-return line-feed character sequence to get to the start of a new line, while others only need a carriage-return.  This option lets you tell the printer driver to add a line-feed character after any carriage-return character that is printed.\par \tab \tab \hich\af4\dbch\af4\loch\f4 You can select three options here:  Yes, No, or BRAM Default.  The Yes option adds a line-feeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have s\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 lected using the printer configuration program in the control panel.\par \hich\af4\dbch\af4\loch\f4 Turn on MSB\tab This line is a flag indicating whether the printer driver should set the most significant bit when writing characters to the printer.  If this value is Yes the printer driver \hich\af4\dbch\af4\loch\f4 will set the most significant bit on all characters before sending the characters to the printer.  If you code any number other than 0, the most significant bit will be cleared before the character is sent to the printer.\par \hich\af4\dbch\af4\loch\f4 Init string\tab }{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers\:control\hich\af4\dbch\af4\loch\f4  characters}}}{\hich\af4\dbch\af4\loch\f4 This option sets a printer initialization string.  This string is sent to the printer when the driver is used for the first time.  With most printers and interface cards, there is some special code you can use to tell the printer that the cha\hich\af4\dbch\af4\loch\f4 racters that follow are special control codes.  These codes are often used to control the character density, number of lines per page, font, and so forth.  This initialization string, sent to the printer by the .PRINTER driver the first time the printer i\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  used, is the traditional way of setting up your favorite defaults.\par \tab \tab \hich\af4\dbch\af4\loch\f4 You will find many cases when you will need to send a control character to the printer as part of this initialization string.  To do that using the CDev configuration program precede the\hich\af4\dbch\af4\loch\f4  character with a ~ character.  For example, an escape character is actually a control-[, so you could use ~[ to send an escape character to the printer.  The printer driver does not do any error checking when you use the ~ character, it simply subtracts \hich\af4\dbch\af4\loch\f4 $\hich\af4\dbch\af4\loch\f4 40 from the ASCII code for the character that follows the ~ character, and sends the result to the printer.  For example, g is not a control character, but ~g would still send a value, $27, to the printer.  From the CDA configuration program, just type th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  control character in the normal way; it will show up as an inverse character on the display.\par \tab \tab \hich\af4\dbch\af4\loch\f4 That manual that comes with your printer should have a list of the control codes you can use to configure the printer.\par \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 8.5:  Text Printer Configuration O\hich\af4\dbch\af4\loch\f4 ptions\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The .PRINTER driver is a copyrighted program.  If you would like to send it out with your own programs, refer to Appendix D for licensing details.  (Licensing is free, but you need to include our copyright message.){\*\bkmkend printers}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printers}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318249}\hich\af4\dbch\af4\loch\f4 The .NULL Drive\hich\af4\dbch\af4\loch\f4 r{\*\bkmkend _Toc495318249}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices\:.NULL}}}{\hich\af4\dbch\af4\loch\f4 The .NULL driver is a second driver available from GS/OS once it is installed from ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4 .  This driver is primarily used in shell scripts in situations where a shell program or command is writing output you don't wan\hich\af4\dbch\af4\loch\f4 t to see on the screen while the script runs.  In that case, you can redirect the output to .NULL.  The .NULL driver does nothing with the character, so the characters are effectively ignored by the system.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318250}\hich\af4\dbch\af4\loch\f4 Pipelines{\*\bkmkend _Toc495318250}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pipes\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 work prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSPIPEx files}}}{\hich\af4\dbch\af4\loch\f4 ORCA lets you automatically execute two or more programs in sequence, directing the output of one program to the input of the next.  The output of each program but the last is written to a temporary file in the work subdirectory named \hich\af4\dbch\af4\loch\f4 SYSPIPE}{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 , where }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4  is a number assigned by ORCA.  The first temporary file opened is assigned an n of 0; if a second SYSPIPEn file is opened for a given pipeline, then it is named SYSPIPE1, and so forth.\par \hich\af4\dbch\af4\loch\f4 To }{\i \hich\af4\dbch\af4\loch\f4 pipeline}{\hich\af4\dbch\af4\loch\f4 , or sequentially execute programs PROG0, \hich\af4\dbch\af4\loch\f4 PROG1, and PROG2, use the following command:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 PROG0|PROG1|PROG2\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The output of PROG0 is written to SYSPIPE0; the input for PROG1 is taken from SYSPIPE0, and the output is written to SYSPIPE1.  The input for PROG2 is taken from SYSPIPE1, and the output is w\hich\af4\dbch\af4\loch\f4 ritten to standard output.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 SYSPIPE}{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4  files are text files and can be opened by the editor.\par \hich\af4\dbch\af4\loch\f4 For example, if you had a utility program called UPPER that took characters from standard input, converted them to uppercase, and wrote them to standard output, you c\hich\af4\dbch\af4\loch\f4 ould use the following command line to write the contents of the text file MYFILE to the screen as all uppercase characters:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 TYPE MYFILE|UPPER\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 To send the output to the file MYUPFILE rather than to the screen, use the following command line:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 TYPE MYFILE\hich\af2\dbch\af4\loch\f2 |UPPER >MYUPFILE \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The SYSPIPEn files are not deleted by ORCA after the pipeline operation is complete; thus, you can use the editor to examine the intermediate steps of a pipeline as an aid to finding errors.  The next time a pipeline is executed, however\hich\af4\dbch\af4\loch\f4 , any existing SYSPIPE}{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4  files are overwritten.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318251}\hich\af4\dbch\af4\loch\f4 The Command Table{\*\bkmkend _Toc495318251}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command table\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSCMND file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Shell prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 prefixes\:numbers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:command types}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:built-in commands}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:utility commands}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:language names}}}{\hich\af4\dbch\af4\loch\f4 The command table is an ASCII text file, which you can change with the editor, or replace entirely.  It is named SYSCMND, and located in the SHELL prefix of your ORCA program disk.\hich\af4\dbch\af4\loch\f4   The format of the command table is very simple.  Each line is either a comment line or a command definition.  Comment lines are blank lines or lines with a semicolon (;) in column one.  Command lines have four fields: the command name, the command type,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the command or language number, and a comment.  The fields are separated by one or more blanks or tabs.  The first field is the name of the command.  It can be any legal GS/OS file name.  Prefixes are not allowed.  The second field is the command type.  T\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 is can be a C (built-in command), U (utility), or L (language).  The third field of a built-in command definition is the command number; the third field of a language is its language number; utilities do not use the third field.  An optional comment field\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 can follow any command.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ALIAS command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMMANDS command}}}{\hich\af4\dbch\af4\loch\f4 Built-in commands are those that are predefined within the command processor, like the CATALOG command.  Being able to edit the command table means that you can \hich\af4\dbch\af4\loch\f4 change the name of these commands, add aliases for them, or even remove them, but you cannot add a built-in command.  As an example, UNIX fans might like to change the CATALOG command to be LS.  You would do this by editing the command table.  Enter LS as\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the command name, in column one.  Enter a C, for built-in command, in column two.  Enter the command number 4, obtained from looking at the command number for CATALOG in the command table, in column three.  Exit the editor, saving the modified SYSCMND fil\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 .  Reload the new command table by rebooting or by issuing the COMMANDS command.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 executable files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Languages prefix}}}{\hich\af4\dbch\af4\loch\f4 Languages define the languages available on the system.  You might change the language commands by adding a new language, lik\hich\af4\dbch\af4\loch\f4 e ORCA/Pascal.  The first field contains the name of the EXE file stored in the LANGUAGES subdirectory of your ORCA system.  The second field is the letter L, and the third the language number.  The L can be preceded by an asterisk, which indicates that t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e assembler or compiler is restartable.  That is, it need not be reloaded from disk every time it is invoked.  The ORCA/C compiler, linker, and editor are all restartable.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 restartability}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiler}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell co\hich\af4\dbch\af4\loch\f4 mmands\:utility commands}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Utilities prefix}}}{\hich\af4\dbch\af4\loch\f4 The last type of command is the utility.  Utilities are easy to add to the system, and will therefore be the most commonly changed item in the command table.  The first field contains the name of the utili\hich\af4\dbch\af4\loch\f4 ty's EXE file stored in the UTILITIES subdirectory of your ORCA system.  The second field is a U.  The third field is not needed, and is ignored if present.  As with languages, restartable utilities are denoted in the command table by preceding the U with\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 an asterisk.   Restartable programs are left in memory after they have been executed.  If they are called again before the memory they are occupying is needed, the shell does not have to reload the file from disk.  This can dramatically increase the perfo\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 mance of the system.  Keep in mind that not all programs are restartable!  You should not mark a program as restartable unless you are sure that it is, in fact, restartable.\par \hich\af4\dbch\af4\loch\f4 As an example of what has been covered so far, the command table shipped with the \hich\af4\dbch\af4\loch\f4 system is shown in Table 8.6.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1080\tx2160\tx3060\tx3780\tx4320\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs16 \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 ;  ORCA Command Table\par \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 ALIAS\tab \tab C\tab 40\tab \tab alias a command\par \hich\af2\dbch\af4\loch\f2 ASM65816\tab *L\tab 3\tab \tab 65816 assembler\par \hich\af2\dbch\af4\loch\f2 ASML\tab \tab C\tab 1\tab \tab assemble and link\par \hich\af2\dbch\af4\loch\f2 ASMLG\tab \tab C\tab 2\tab \tab assemble, link and execute\par \hich\af2\dbch\af4\loch\f2 ASSEMBLE\tab C\tab 3\tab \tab assemble\par \hich\af2\dbch\af4\loch\f2 BREAK\tab \tab C\tab 25\tab \tab break from loop\par \hich\af2\dbch\af4\loch\f2 CAT\tab \tab C\tab 4\tab \tab catalog\par \hich\af2\dbch\af4\loch\f2 C\hich\af2\dbch\af4\loch\f2 ATALOG\tab \tab C\tab 4\tab \tab catalog\par \hich\af2\dbch\af4\loch\f2 CC\tab \tab *L\tab 8\tab \tab ORCA/C compiler\par \hich\af2\dbch\af4\loch\f2 CHANGE\tab \tab C\tab 20\tab \tab change language stamp\par \hich\af2\dbch\af4\loch\f2 CMPL\tab \tab C\tab 1\tab \tab compile and link\par \hich\af2\dbch\af4\loch\f2 CMPLG\tab \tab C\tab 2\tab \tab compile, link and execute\par \hich\af2\dbch\af4\loch\f2 COMMANDS\tab C\tab 35\tab \tab read command table\par \hich\af2\dbch\af4\loch\f2 COMPACT\tab \tab *U\tab \tab \tab compact OMF files\par \hich\af2\dbch\af4\loch\f2 COMPILE\tab \tab C\tab 3\tab \tab compile\par \hich\af2\dbch\af4\loch\f2 COMPRESS\tab C\tab 32\tab \tab comp\hich\af2\dbch\af4\loch\f2 ress/alphabetize directories\par \hich\af2\dbch\af4\loch\f2 CONTINUE\tab C\tab 26\tab \tab continue a loop\par \hich\af2\dbch\af4\loch\f2 COPY\tab \tab C\tab 5\tab \tab copy files/directories/disks\par \hich\af2\dbch\af4\loch\f2 CREATE\tab \tab C\tab 6\tab \tab create a subdirectory\par \hich\af2\dbch\af4\loch\f2 CRUNCH\tab \tab *U\tab \tab \tab combine object modules\par \hich\af2\dbch\af4\loch\f2 DELETE\tab \tab C\tab 7\tab \tab delete a file\par \hich\af2\dbch\af4\loch\f2 DEREZ\tab \tab *U\tab \tab \tab resource decompiler\par \hich\af2\dbch\af4\loch\f2 DEVICES\tab \tab C\tab 48\tab \tab Show Device\hich\af2\dbch\af4\loch\f2 s\par \hich\af2\dbch\af4\loch\f2 DISABLE\tab \tab C\tab 8\tab \tab disable file attributes\par \hich\af2\dbch\af4\loch\f2 DISKCHECK\tab U\tab \tab \tab check integrity of ProDOS disks\par \hich\af2\dbch\af4\loch\f2 DUMPOBJ\tab \tab U\tab \tab \tab object module dumper\par \hich\af2\dbch\af4\loch\f2 EDIT\tab \tab *C\tab 9\tab \tab edit a file\par \hich\af2\dbch\af4\loch\f2 ECHO\tab \tab C\tab 29\tab \tab print from an exec file\par \hich\af2\dbch\af4\loch\f2 ELSE\tab \tab C\tab 31\tab \tab part of an IF statement\par \hich\af2\dbch\af4\loch\f2 ENABLE\tab \tab C\tab 10\tab \tab enable file attributes\par \hich\af2\dbch\af4\loch\f2 END\tab \tab \hich\af2\dbch\af4\loch\f2 C\tab 23\tab \tab end an IF, FOR, or LOOP\par \hich\af2\dbch\af4\loch\f2 ENTAB\tab \tab *U\tab \tab \tab entab utility\par \hich\af2\dbch\af4\loch\f2 ERASE\tab \tab C\tab 44\tab \tab Erase entire volume.\par \hich\af2\dbch\af4\loch\f2 EXEC\tab \tab L\tab 6\tab \tab EXEC language\par \hich\af2\dbch\af4\loch\f2 EXECUTE\tab \tab C\tab 38\tab \tab EXEC with changes to local variables\par \hich\af2\dbch\af4\loch\f2 EXISTS\tab \tab C\tab 19\tab \tab see if a file exists\par \hich\af2\dbch\af4\loch\f2 EXIT\tab \tab C\tab 27\tab \tab exit a loop\par \hich\af2\dbch\af4\loch\f2 EXPORT\tab \tab C\tab 36\tab \tab export a shell\hich\af2\dbch\af4\loch\f2  variable\par \hich\af2\dbch\af4\loch\f2 EXPRESS\tab \tab U\tab \tab \tab converts files to ExpressLoad format\par \hich\af2\dbch\af4\loch\f2 FILETYPE\tab C\tab 21\tab \tab change the type of a file\par \hich\af2\dbch\af4\loch\f2 FOR\tab \tab C\tab 22\tab \tab for loop\par \hich\af2\dbch\af4\loch\f2 GSBUG\tab \tab U\tab \tab \tab application version of debugger\par \hich\af2\dbch\af4\loch\f2 HELP\tab \tab C\tab 11\tab \tab online help\par \hich\af2\dbch\af4\loch\f2 HISTORY\tab \tab C\tab 39\tab \tab display last 20 commands\par \hich\af2\dbch\af4\loch\f2 HOME\tab \tab C\tab 43\tab \tab clear the screen\hich\af2\dbch\af4\loch\f2  and home the cursor\par \hich\af2\dbch\af4\loch\f2 IF\tab \tab C\tab 30\tab \tab conditional branch\par \hich\af2\dbch\af4\loch\f2 INIT\tab \tab C\tab 45\tab \tab initialize disks\par \hich\af2\dbch\af4\loch\f2 INPUT\tab \tab C\tab 13\tab \tab read a value from the command line\par \hich\af2\dbch\af4\loch\f2 LINK\tab \tab *C\tab 12\tab \tab link\par \hich\af2\dbch\af4\loch\f2 LINKER\tab \tab *L\tab 265\tab \tab command line linker script\par \hich\af2\dbch\af4\loch\f2 LOOP\tab \tab C\tab 24\tab \tab loop statement\par \hich\af2\dbch\af4\loch\f2 MACGEN\tab \tab U\tab \tab \tab generate a macro file\par \hich\af2\dbch\af4\loch\f2 MAKEBIN\tab \tab \hich\af2\dbch\af4\loch\f2 U\tab \tab \tab convert load file to a binary file\par \hich\af2\dbch\af4\loch\f2 MAKELIB\tab \tab U\tab \tab \tab librarian\par \hich\af2\dbch\af4\loch\f2 MOVE\tab \tab C\tab 34\tab \tab move files\par \hich\af2\dbch\af4\loch\f2 PASCAL\tab \tab *L\tab 5\tab \tab Pascal compiler\par \hich\af2\dbch\af4\loch\f2 PREFIX\tab \tab C\tab 14\tab \tab set system prefix\par \hich\af2\dbch\af4\loch\f2 PRIZM\tab \tab U\tab \tab \tab desktop development system\par \hich\af2\dbch\af4\loch\f2 PRODOS\tab \tab L\tab 0\tab \tab ProDOS language\par \hich\af2\dbch\af4\loch\f2 QUIT\tab \tab C\tab 15\tab \tab exit from ORCA\par \hich\af2\dbch\af4\loch\f2 RENAME\tab \tab C\tab 16\tab \tab \hich\af2\dbch\af4\loch\f2 rename files\par \hich\af2\dbch\af4\loch\f2 RESEQUAL\tab *U\tab \tab \tab compares resource forks\par \hich\af2\dbch\af4\loch\f2 REZ\tab \tab *L\tab 21\tab \tab resource compiler\par \hich\af2\dbch\af4\loch\f2 RUN\tab \tab C\tab 2\tab \tab compile, link and execute\par \hich\af2\dbch\af4\loch\f2 SET\tab \tab C\tab 28\tab \tab set a variable\par \hich\af2\dbch\af4\loch\f2 SHOW\tab \tab C\tab 17\tab \tab show system attributes\par \hich\af2\dbch\af4\loch\f2 SHUTDOWN\tab C\tab 47\tab \tab shut down the computer\par \hich\af2\dbch\af4\loch\f2 SWITCH\tab \tab C\tab 33\tab \tab switch order of files\par \hich\af2\dbch\af4\loch\f2 TEX\hich\af2\dbch\af4\loch\f2 T\tab \tab L\tab 1\tab \tab Text file\par \hich\af2\dbch\af4\loch\f2 TOUCH\tab \tab C\tab 46\tab \tab Update date/time\par \hich\af2\dbch\af4\loch\f2 TYPE\tab \tab C\tab 18\tab \tab list a file to standard out\par \hich\af2\dbch\af4\loch\f2 UNALIAS\tab \tab C\tab 41\tab \tab delete an alias\par \hich\af2\dbch\af4\loch\f2 UNSET\tab \tab C\tab 37\tab \tab delete a shell variable\par \hich\af2\dbch\af4\loch\f2 *\tab \tab C\tab 42\tab \tab comment\par \par }\pard\plain \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Table 8.6   System Commands\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318252}\hich\af4\dbch\af4\loch\f4 Command And Utility Reference{\*\bkmkend _Toc495318252}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Each of the commands and\hich\af4\dbch\af4\loch\f4  utilities than ship with ORCA/M are listed in alphabetic order.  The syntax for the command is given, followed by a description and any parameters using the following notation:\par \par }\pard \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\tx2520\adjustright {\b \hich\af4\dbch\af4\loch\f4 UPPERCASE}{\tab \tab \hich\af4\dbch\af4\loch\f4 Uppercase letters indicate a command name or an option that must b\hich\af4\dbch\af4\loch\f4 e spelled exactly as shown.  The shell is not case sensitive; that is, you can enter commands in any combination of uppercase and lowercase letters.\par \par }{\b\i \hich\af4\dbch\af4\loch\f4 italics}{\tab \tab \hich\af4\dbch\af4\loch\f4 Italics indicate a variable, such as a file name or address.\par \par }{\b\i \hich\af4\dbch\af4\loch\f4 directory}{\tab \tab \hich\af4\dbch\af4\loch\f4 This parameter indicates\hich\af4\dbch\af4\loch\f4  any valid directory path name or partial path name.  It does }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  include a file name.  If the volume name is included, }{\i \hich\af4\dbch\af4\loch\f4 directory}{\hich\af4\dbch\af4\loch\f4  must start with a slash (/) or colon (:); if }{\i \hich\af4\dbch\af4\loch\f4 directory}{\hich\af4\dbch\af4\loch\f4  does not start with one of these characters, then the current prefix is\hich\af4\dbch\af4\loch\f4  assumed.  For example, if you are copying a file to the subdirectory SUBDIRECTORY on the volume VOLUME, then the }{\i \hich\af4\dbch\af4\loch\f4 directory}{\hich\af4\dbch\af4\loch\f4  parameter would be:  :VOLUME:SUBDIRECTORY.  If the current prefix were :VOLUME:, then you could use SUBDIRECTORY for }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\hich\af4\dbch\af4\loch\f4 .\par \tab \tab \hich\af4\dbch\af4\loch\f4 The\hich\af4\dbch\af4\loch\f4  device numbers .D1, .D2, ... .D}{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4  can be used for volume names; if you use a device name, do not precede it with a slash.  For example, if the volume VOLUME in the above example were in disk drive .D1, then you could enter the }{\i \hich\af4\dbch\af4\loch\f4 directory}{\hich\af4\dbch\af4\loch\f4  parameter as .D1:SU\hich\af4\dbch\af4\loch\f4 BDIRECTORY.\par \tab \tab \hich\af4\dbch\af4\loch\f4 GS/OS device names can be used for the volume names.  Device names are the names listed by the SHOW UNITS command; they start with a period.  You should not precede a device name with a slash.\par \tab \tab \hich\af4\dbch\af4\loch\f4 GS/OS prefix numbers can be used for directory \hich\af4\dbch\af4\loch\f4 prefixes.  An asterisk (*) can be used to indicate the boot disk.  Two periods (..) can be used to indicate one subdirectory above the current subdirectory.  If you use one of these substitutes for a prefix, do not precede it with a slash.  For example, t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e HELP subdirectory on the ORCA disk can be entered as 6:HELP.\par \par }{\b\i \hich\af4\dbch\af4\loch\f4 filename}{\tab \tab \hich\af4\dbch\af4\loch\f4 This parameter indicates a file name, }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  including the prefix.  The device names .CONSOLE and .PRINTER can be used as file names.  Other character devices can also be used as file n\hich\af4\dbch\af4\loch\f4 ames, but a block device (like the name of a disk drive) cannot be used as a file name.\par \par }{\b\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \tab \hich\af4\dbch\af4\loch\f4 This parameter indicates a full path name, including the prefix and file name, or a partial path name, in which the current prefix is assumed.  For example, \hich\af4\dbch\af4\loch\f4 if a file is named FILE in the subdirectory DIRECTORY on the volume VOLUME, then the }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\hich\af4\dbch\af4\loch\f4  parameter would be:  :VOLUME:DIRECTORY:FILE.  If the current prefix were :VOLUME:, then you could use DIRECTORY:FILE for }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\hich\af4\dbch\af4\loch\f4 .  A full path name (including th\hich\af4\dbch\af4\loch\f4 e volume name) must begin with a slash (/) or colon (:); do not precede }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\hich\af4\dbch\af4\loch\f4  with a slash if you are using a partial path name.\par \tab \tab \hich\af4\dbch\af4\loch\f4 Character device names, like .CONSOLE and .PRINTER, can be used as file names; the device numbers .D1, .D2, ... .Dn can be\hich\af4\dbch\af4\loch\f4  used for volume names; GS/OS device names can be used a volume names; and GS/OS prefix numbers, an asterisk (*), or double periods (..) can be used instead of a prefix.\par \par }{\b \hich\af4\dbch\af4\loch\f4 |}{\tab \tab \hich\af4\dbch\af4\loch\f4 A vertical bar indicates a choice.  For example, +L|-L indicates that the command \hich\af4\dbch\af4\loch\f4 can be entered as either +L or as -L.\par \par }{\b \hich\af4\dbch\af4\loch\f4 A|}{\b\ul \hich\af4\dbch\af4\loch\f4 B}{\tab \tab \hich\af4\dbch\af4\loch\f4 An underlined choice is the default value.\par \par }{\b \hich\af4\dbch\af4\loch\f4 [ ]}{\tab \tab \hich\af4\dbch\af4\loch\f4 Parameters enclosed in square brackets are optional.\par \par \hich\af4\dbch\af4\loch\f4 ...\tab \tab Ellipses indicate that a parameter or sequence of parameters can be repeated as many times as you wish.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318253}\hich\af4\dbch\af4\loch\f4 ALIAS{\*\bkmkend _Toc495318253}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ALIAS [}{\i \hich\af2\dbch\af4\loch\f2 name}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 string}{\hich\af2\dbch\af4\loch\f2 ]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ALIAS command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The ALIAS command allows you to create new commands based on existing ones.  It creates an alias called }{\i \hich\af4\dbch\af4\loch\f4 name}{\hich\af4\dbch\af4\loch\f4 , which can then be typed from the command line as if it were a command.  When you type the nam\hich\af4\dbch\af4\loch\f4 e, the command processor substitutes }{\i \hich\af4\dbch\af4\loch\f4 string}{\hich\af4\dbch\af4\loch\f4  for the name before trying to execute the command.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DUMPOBJ utility}}}{\hich\af4\dbch\af4\loch\f4 For example, let's assume you dump hexadecimal files with the DUMPOBJ file fairly frequently.  Remembering and typing the three flags nec\hich\af4\dbch\af4\loch\f4 essary to do this can be a hassle, so you might use the ALIAS command to define a new command called DUMP.  The command you would use would be\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ALIAS  DUMP  DUMPOBJ -F +X -H\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Now, to dump MYFILE in hexadecimal format, type\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 DUMP MYFILE\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 You can create a si\hich\af4\dbch\af4\loch\f4 ngle alias that executes multiple commands by inclosing string in quotes.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ALIAS GO "CMPL MYFILE.ASM; FILETYPE MYFILE S16; MYFILE"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 creates a new command called GO.  This new command compiles and links a program, changes the file type to S16,\hich\af4\dbch\af4\loch\f4  and then executes the program.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The name and string parameters are optional.  If a name is specified, but the string is omitted, the current alias for that name will be listed.  If both the name and the string are omitted, a list of all current aliases and\hich\af4\dbch\af4\loch\f4  their values is printed.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOGIN file}}}{\hich\af4\dbch\af4\loch\f4 Aliases are automatically exported from the LOGIN file to the command level.  This means that any aliases created in the LOGIN file are available for the remainder of the session, or until you specifically delet\hich\af4\dbch\af4\loch\f4 e or modify the alias.  Aliases created in an EXEC file are available in that EXEC file and any other it calls, but not to the command level.  See the EXECUTE command for a way to override this.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNALIAS command}}}{\hich\af4\dbch\af4\loch\f4 See the UNALIAS command for a way to \hich\af4\dbch\af4\loch\f4 remove an alias.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318254}\hich\af4\dbch\af4\loch\f4 ASM65816{\*\bkmkend _Toc495318254}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ASM65816\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASM65816 command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This language command sets the shell default language to 65816 Assembly Language.\par \hich\af4\dbch\af4\loch\f4 While you can set the language and create assembly language files, you will not be able to assemble them unless\hich\af4\dbch\af4\loch\f4  you purchase the ORCA/M macro assembler and install it with ORCA/C.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318255}\hich\af4\dbch\af4\loch\f4 ASML{\*\bkmkend _Toc495318255}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ASML\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\ul \hich\af2\dbch\af4\loch\f2 -L}{\hich\af2\dbch\af4\loch\f2 ] [+O|}{\ul \hich\af2\dbch\af4\loch\f2 -O}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [-R] [+S|}{\ul \hich\af2\dbch\af4\loch\f2 -S}{\hich\af2\dbch\af4\loch\f2 ] [+T|}{\ul \hich\af2\dbch\af4\loch\f2 -T}{\hich\af2\dbch\af4\loch\f2 ] [+W|}{\ul \hich\af2\dbch\af4\loch\f2 -W}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 sourcefile}{\hich\af2\dbch\af4\loch\f2   [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ] [NAMES=(}{\i \hich\af2\dbch\af4\loch\f2 seg1}{\hich\af2\dbch\af4\loch\f2 [ }{\i \hich\af2\dbch\af4\loch\f2 seg2}{\hich\af2\dbch\af4\loch\f2 [ ...]])] [}{\i \hich\af2\dbch\af4\loch\f2 language1}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) [}{\i \hich\af2\dbch\af4\loch\f2 language2}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 opti\hich\af2\dbch\af4\loch\f2 on}{\hich\af2\dbch\af4\loch\f2  ...) ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiling a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linking a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language stamp}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASML command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command assembles (or compiles) and links a source file.  The ORCA shell checks the language of the source file and calls the a\hich\af4\dbch\af4\loch\f4 ppropriate assembler or compiler.  If the maximum error level returned by the assembler or compiler is less than or equal to the maximum allowed (0 unless you specify otherwise with the MERR directive or its equivalent in the source file), then the result\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng object file is linked.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 MERR directive}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APPEND directive}}}{\hich\af4\dbch\af4\loch\f4 You can use APPEND directives (or the equivalent) to tie together source files written in different computer languages; ORCA compilers and assemblers check the language type of each \hich\af4\dbch\af4\loch\f4 file and return control to the shell when a different language must be called.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:parameters}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASSEMBLE command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASMLG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compile command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPL command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPLG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RUN command}}}{\hich\af4\dbch\af4\loch\f4 Not all c\hich\af4\dbch\af4\loch\f4 ompilers or assemblers make use of all the parameters provided by this command (and the ASSEMBLE, ASMLG, COMPILE, CMPL, CMPLG, and RUN commands, which use the same parameters).  The ORCA/M assembler, for example, includes no language-specific options, and\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 so makes no use of the }{\i \hich\af4\dbch\af4\loch\f4 language}{\hich\af4\dbch\af4\loch\f4 =(}{\i \hich\af4\dbch\af4\loch\f4 option}{\hich\af4\dbch\af4\loch\f4  ...) parameter.  If you include a parameter that a compiler or assembler cannot use, it ignores it; no error is generated.  If you used append statements to tie together source files in more than one language, then a\hich\af4\dbch\af4\loch\f4 ll parameters are passed to every compiler, and each compiler uses those parameters that it recognizes.\par \hich\af4\dbch\af4\loch\f4 Command-line parameters (those described here) override source-code options when there is a conflict.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright {\hich\af4\dbch\af4\loch\f4 +D|-D\tab +D causes debug code to be generated so tha\hich\af4\dbch\af4\loch\f4 t the source-level debugger may be used later when debugging the program.  -D, the default, causes debug code to not be generated.\par \par \hich\af4\dbch\af4\loch\f4 +E|-E\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error reporting\:compiler}}}{\hich\af4\dbch\af4\loch\f4 When a terminal error is encountered during a compile from the command line, the comp\hich\af4\dbch\af4\loch\f4 iler aborts and enters the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.  From an EXEC file, the default is to display the error message and return to the shell.  The +E flag will cause the \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ompiler to abort to the editor, while the -E flag causes the compiler to abort to the shell.\par \par \hich\af4\dbch\af4\loch\f4 -I\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 header files}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 precompiled headers}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sym files}}}{\hich\af4\dbch\af4\loch\f4 When the C compiler compiles a program, it normally creates a .sym file in the same location\hich\af4\dbch\af4\loch\f4  as the original source file.  This flag tells the compiler not to create a .sym file, and to ignore any existing .sym file.  See "Precompiled Headers" in Chapter 12 for a complete description of these files and how they are used.\par \par \hich\af4\dbch\af4\loch\f4 +L|-L\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiler lis\hich\af4\dbch\af4\loch\f4 tings}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LIST directive}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link map}}}{\hich\af4\dbch\af4\loch\f4 If you specify +L, the assembler or compiler generates a source listing; if you specify -L, the listing is not produced.  The L parameter in this command overrides the LIST directive in the source file.  +L w\hich\af4\dbch\af4\loch\f4 ill cause the linker to produce a link map.\par \par \hich\af4\dbch\af4\loch\f4 +M|-M\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\hich\af4\dbch\af4\loch\f4 +M causes any object modules produced by the assembler or compiler to be written to memory, rather than to disk.\par \par \hich\af4\dbch\af4\loch\f4 +O|-O\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 labels\:global}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 symbol tables\:linker}}}{\hich\af4\dbch\af4\loch\f4 END directi\hich\af4\dbch\af4\loch\f4 ve;}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 END directive}}}{\hich\af4\dbch\af4\loch\f4 ORCA/C is an optimizing compiler.  This flag can turn the optimizations on or off from the command line.  Unlike the other parameters, and optimize pragma in the source file will override this flag.\par \par \hich\af4\dbch\af4\loch\f4 +P|-P\tab The compiler, linker, and\hich\af4\dbch\af4\loch\f4  many other languages print progress information as the various subroutines are processed.  The -P flag can be used to suppress this progress information.\par \par \hich\af4\dbch\af4\loch\f4 -R\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 header files}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 precompiled headers}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sym files}}}{\hich\af4\dbch\af4\loch\f4 ORCA/C can detect changes in t\hich\af4\dbch\af4\loch\f4 he source file or object files that would make it necessary to rebuild the .sym file.  This flag bypasses the automatic check, forcing the compiler to rebuild the .sym file.  See "Precompiled Headers" in Chapter 12 for a complete description of these file\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  and how they are used.\par \par \hich\af4\dbch\af4\loch\f4 +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all global references in the object file; the assembler or compiler may also produce a symbol table, although the ORCA/C compiler does not.  If you specify -S,\hich\af4\dbch\af4\loch\f4  these symbol tables are not produced.  The S parameter in this command overrides the SYMBOL directive in the source file.\par \par \hich\af4\dbch\af4\loch\f4 +T|-T\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 terminal errors}}}{\hich\af4\dbch\af4\loch\f4 The +T flag causes all errors to be treated as terminal errors, aborting the compile.  This is normall\hich\af4\dbch\af4\loch\f4 y used in conjunction with +E.  In that case, any error will cause the compiler to abort and enter the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.\par \par \hich\af4\dbch\af4\loch\f4 +W|-W\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:status banner}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wait flag}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 abort command}}}{\hich\af4\dbch\af4\loch\f4 Normally, the compiler continues compiling a program after an error has been found.  If the +W flag is specified, the assembler or compiler will stop after finding an error, and wait for a keypress.  Pressing }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 . will abort the compile, entering the editor with the cursor on the offending line.  Press any other key to continue the compile.\par \par }{\i \hich\af4\dbch\af4\loch\f4 sourcefile}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of the source file.\par \par \hich\af4\dbch\af4\loch\f4 KEEP=}{\i \hich\af4\dbch\af4\loch\f4 outfile}{\hich\af4\dbch\af4\loch\f4   }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 objec\hich\af4\dbch\af4\loch\f4 t modules}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 KEEP parameter}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 partial compilation}}}{\hich\af4\dbch\af4\loch\f4 You can use this parameter to specify the path name or partial path name (including the file name) of the output file.  For a one-segment program, ORCA names the object file }{\i \hich\af4\dbch\af4\loch\f4 outfile}{\hich\af4\dbch\af4\loch\f4 .ROOT.  If t\hich\af4\dbch\af4\loch\f4 he program contains more than one segment, ORCA places the first segment in }{\i \hich\af4\dbch\af4\loch\f4 outfile}{\hich\af4\dbch\af4\loch\f4 .ROOT and the other segments in }{\i \hich\af4\dbch\af4\loch\f4 outfile}{\hich\af4\dbch\af4\loch\f4 .A.  If this is a partial compile (or several source files with different programming languages are being compiled), then other file n\hich\af4\dbch\af4\loch\f4 ame extensions may be used.  If the compilation is followed by a successful link, then the load file is named }{\i \hich\af4\dbch\af4\loch\f4 outfile}{\hich\af4\dbch\af4\loch\f4 .\par \tab \tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 KEEP directive}}}{\hich\af4\dbch\af4\loch\f4 This parameter has the same effect as placing a KEEP pragma in your source file.  If you have a KEEP pragma in t\hich\af4\dbch\af4\loch\f4 he source file and you also use the KEEP parameter, this parameter has precedence.\par \tab \tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:metacharacters}}}{\hich\af4\dbch\af4\loch\f4 When specifying a KEEP parameter, you can use two metacharacters to modify the KEEP name.  If the % character is found in the keep na\hich\af4\dbch\af4\loch\f4 me, the source file name is substituted.  If $ is encountered, the source file name with the last extension removed is substituted.\par \tab \tab \hich\af4\dbch\af4\loch\f4 Note the following about the KEEP parameter:\par \par }\pard \s16\qj\fi-360\li1800\sl223\slmult1\widctlpar\tx1800\adjustright {\bullet \tab }{\pard\plain \s16\qj\fi-360\li1800\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 KeepName\} shell variable}}}{\hich\af4\dbch\af4\loch\f4 If you use neither the KEEP parameter, t\hich\af4\dbch\af4\loch\f4 he \{KeepName\} variable, nor the KEEP directive, then the object files are not saved at all.  In this case, the link cannot be performed, because there is no object file to link.}{\pard\plain \s16\qj\fi-360\li1800\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 The file name you specify in }{\i \hich\af4\dbch\af4\loch\f4 outfile}{\hich\af4\dbch\af4\loch\f4  must not be over 10\hich\af4\dbch\af4\loch\f4  characters long.  This is because the extension .ROOT is appended to the name, and GS/OS does not allow file names longer than 15 characters.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 By default, PRIZM uses $ as the keep name.  When you are using PRIZM, do not specify the keep name any other w\hich\af4\dbch\af4\loch\f4 ay unless in agrees with the keep name PRIZM will generate by default.\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright {\par \hich\af4\dbch\af4\loch\f4 NAMES=(}{\i \hich\af4\dbch\af4\loch\f4 seg1 seg2}{\hich\af4\dbch\af4\loch\f4  ...)  }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 code segment}}}{\hich\af4\dbch\af4\loch\f4 This parameter causes the assembler or compiler to perform a partial assembly or compile; the operands }{\i \hich\af4\dbch\af4\loch\f4 seg1}{\hich\af4\dbch\af4\loch\f4 , }{\i \hich\af4\dbch\af4\loch\f4 seg2}{\hich\af4\dbch\af4\loch\f4 , ... specify the names of \hich\af4\dbch\af4\loch\f4 the segments to be assembled or compiled.  Separate the segment names with one or more spaces.  The ORCA Linker automatically selects the latest version of each segment when the program is linked.\par \tab \tab \hich\af4\dbch\af4\loch\f4 The object file created when you use the NAMES parameter \hich\af4\dbch\af4\loch\f4 contains only the specified functions.}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 code segment}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object segment}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker}}}{\par \tab \tab \hich\af4\dbch\af4\loch\f4 You must use the same output file name for every partial compilation or assembly of a program.  For example, if you specify the output file name as OUTFILE \hich\af4\dbch\af4\loch\f4 for the original compile of a program, then the compiler creates object files named OUTFILE.ROOT and OUTFILE.A.  In this case you must also specify the output file name as OUTFILE for the partial compile.  The new output file is named OUTFILE.B, and conta\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ns only the functions listed with the NAMES parameter.  When you link a program, the linker scans all the files whose file names are identical except for their extensions, and takes the latest version of each segment.\par \tab \tab \hich\af4\dbch\af4\loch\f4 No spaces are permitted immediately \hich\af4\dbch\af4\loch\f4 before or after the equal sign in this parameter.\par \par \hich\af4\dbch\af4\loch\f4 language1=(option ...) ...  This parameter allows you to pass parameters directly to specific compilers and assemblers running under the ORCA shell.  For each compiler or assembler for which you want to sp\hich\af4\dbch\af4\loch\f4 ecify options, type the name of the language (exactly as defined in the command table), an equal sign (=), and the string of options enclosed in parentheses.  The contents and syntax of the options string is specified in the compiler or assembler referenc\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  manual; the ORCA shell does no error checking on this string, but passes it through to the compiler or assembler.  You can include option strings in the command line for as many languages as you wish; if that language compiler is not called, then the str\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng is ignored.\par \tab \tab \hich\af4\dbch\af4\loch\f4 No spaces are permitted immediately before or after the equal sign in this parameter.\par \tab \tab \hich\af4\dbch\af4\loch\f4 The ORCA/C compiler supports the following options:\par \par }\pard \s16\qj\fi-360\li2160\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -d\tab This option defines a single-token macro.  It is followed immediately by the macro name, with n\hich\af4\dbch\af4\loch\f4 o imbedded spaces, an equal sign, and then by a single preprocessor token, or a number with a leading sign.  Multiple macros can be defined.  For example\par \par }\pard\plain \s26\qj\fi360\li2160\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 cc=(-dfoo=-1 -dbar="bar")\par }\pard\plain \s16\qj\fi-360\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 is completely equivalent to starting the source file with\par \par }\pard\plain \s26\qj\fi360\li2160\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s26\qj\fi360\li2160\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #define}}}{\hich\af2\dbch\af4\loch\f2 #define foo -1\par \hich\af2\dbch\af4\loch\f2 #define bar "bar"\par }\pard\plain \s16\qj\fi-360\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 -i\tab This option adds a pathname to the path search sequence.  It is followed by a pathname, given as a string.  Using this option is completely equivalent to placing a path pragma at the start of the program.  For example\par \par }\pard\plain \s26\qj\fi360\li2160\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 cc=(-dfoo=4 -i"..:myheaders:")\par }\pard\plain \s16\qj\fi-360\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 is completely equivalent to starting the source file with\par \par }\pard\plain \s26\qj\fi360\li2160\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define foo 4\par }{\pard\plain \s26\qj\fi360\li2160\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:path}}}{\hich\af2\dbch\af4\loch\f2 #pragma path "..:myheaders:"\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318256}\hich\af4\dbch\af4\loch\f4 ASMLG{\*\bkmkend _Toc495318256}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ASMLG\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\ul \hich\af2\dbch\af4\loch\f2 -L}{\hich\af2\dbch\af4\loch\f2 ] [+O|}{\ul \hich\af2\dbch\af4\loch\f2 -O}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [-R] [+S|}{\ul \hich\af2\dbch\af4\loch\f2 -S}{\hich\af2\dbch\af4\loch\f2 ] [+T|}{\ul \hich\af2\dbch\af4\loch\f2 -T}{\hich\af2\dbch\af4\loch\f2 ] [+W|}{\ul \hich\af2\dbch\af4\loch\f2 -W}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 sour\hich\af2\dbch\af4\loch\f2 cefile}{\hich\af2\dbch\af4\loch\f2   [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ] [NAMES=(}{\i \hich\af2\dbch\af4\loch\f2 seg1}{\hich\af2\dbch\af4\loch\f2 [ }{\i \hich\af2\dbch\af4\loch\f2 seg2}{\hich\af2\dbch\af4\loch\f2 [ ...]])] [}{\i \hich\af2\dbch\af4\loch\f2 language1}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) [}{\i \hich\af2\dbch\af4\loch\f2 language2}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 executing a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiling a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linking a program}}}{\hich\af4\dbch\af4\loch\f4 This internal command assembles (or compiles), links, and runs a sour\hich\af4\dbch\af4\loch\f4 ce file.  Its function is identical to that of the ASML command, except that once the file has been successfully linked, it is executed automatically.  See the ASML command for a description of the parameters.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318257}\hich\af4\dbch\af4\loch\f4 ASSEMBLE{\*\bkmkend _Toc495318257}\par }\pard\plain \s27\fi-1440\li1440\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ASSEMPLE\tab [+D|-D] [+E|-E] [-I] [+M|-M]\hich\af2\dbch\af4\loch\f2  [+L|}{\ul \hich\af2\dbch\af4\loch\f2 -L}{\hich\af2\dbch\af4\loch\f2 ] [+O|}{\ul \hich\af2\dbch\af4\loch\f2 -O}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [-R] [+S|}{\ul \hich\af2\dbch\af4\loch\f2 -S}{\hich\af2\dbch\af4\loch\f2 ] [+T|}{\ul \hich\af2\dbch\af4\loch\f2 -T}{\hich\af2\dbch\af4\loch\f2 ] [+W|}{\ul \hich\af2\dbch\af4\loch\f2 -W}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 sourcefile}{\hich\af2\dbch\af4\loch\f2   [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ]                            [NAMES=(}{\i \hich\af2\dbch\af4\loch\f2 seg1}{\hich\af2\dbch\af4\loch\f2 [ }{\i \hich\af2\dbch\af4\loch\f2 seg2}{\hich\af2\dbch\af4\loch\f2 [ ...]])] [}{\i \hich\af2\dbch\af4\loch\f2 language1}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) [}{\i \hich\af2\dbch\af4\loch\f2 language2}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASML command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiling a program}}}{\hich\af4\dbch\af4\loch\f4 This internal command assembles (or compiles) a source file.  Its function is identical to that of the ASML command, except that the ASSEMBLE command does not call the linker to link the object files it creates; therefore, no loa\hich\af4\dbch\af4\loch\f4 d file is generated.  You can use the LINK command to link the object files created by the ASSEMBLE command.  See the ASML command for a description of the parameters.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318258}\hich\af4\dbch\af4\loch\f4 BREAK{\*\bkmkend _Toc495318258}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 BREAK\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 BREAK command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FOR command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOOP command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC\hich\af4\dbch\af4\loch\f4  files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ECHO command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 END command}}}{\hich\af4\dbch\af4\loch\f4 This command is used to terminate a FOR or LOOP statement.  The next statement executed will be the one immediately after the END statement on the closest nested FOR or LOOP statement.  For example,  the EX\hich\af4\dbch\af4\loch\f4 EC file}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 programming examples}}}{\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FOR I IN 1 2 3\par \hich\af2\dbch\af4\loch\f2   FOR J IN 2 3\par \hich\af2\dbch\af4\loch\f2     IF \{I\} == \{J\}\par \hich\af2\dbch\af4\loch\f2       BREAK\par \hich\af2\dbch\af4\loch\f2     END\par \hich\af2\dbch\af4\loch\f2     ECHO \{I\}\par \hich\af2\dbch\af4\loch\f2   END\par \hich\af2\dbch\af4\loch\f2 END\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would print\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 1\par \hich\af2\dbch\af4\loch\f2 1\par \hich\af2\dbch\af4\loch\f2 3\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 to the screen.  This order results from the fact that BREAK exits from the closest loop, the FOR J IN 2 3,\hich\af4\dbch\af4\loch\f4  not from all loops.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318259}\hich\af4\dbch\af4\loch\f4 CAT{\*\bkmkend _Toc495318259}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CAT \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T]                 [}{\i \hich\af2\dbch\af4\loch\f2 directory1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 directory2}{\hich\af2\dbch\af4\loch\f2  ...]]\par \hich\af2\dbch\af4\loch\f2 CAT \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T]                  [}{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 pathname2}{\hich\af2\dbch\af4\loch\f2  ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command is an alter\hich\af4\dbch\af4\loch\f4 nate name for CATALOG.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318260}\hich\af4\dbch\af4\loch\f4 CATALOG{\*\bkmkend _Toc495318260}\par }\pard\plain \s27\fi-1080\li1080\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T]             [}{\i \hich\af2\dbch\af4\loch\f2 directory1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 directory2}{\hich\af2\dbch\af4\loch\f2  ...]]\par \hich\af2\dbch\af4\loch\f2 CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T]             [}{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 pathname2}{\hich\af2\dbch\af4\loch\f2  ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volume names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 curr\hich\af4\dbch\af4\loch\f4 ent prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command lists to standard output the directory of the volume or subdirectory you specify.  More than one directory or subdirectory can be listed to get more than one catalog from a single command.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -A\tab G\hich\af4\dbch\af4\loch\f4 S/OS supports a status bit called the invisible bit.  Finder droppings files, for example, are normally flagged as invisible so they won't clutter directory listings.  The CATALOG command does not normally display invisible files when you catalog a direct\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ry; if you use the -A flag, the CATALOG command will display invisible files.\par \par \hich\af4\dbch\af4\loch\f4 -D\tab If the -D flag is used, this command does a recursive catalog of directories, showing not only the directory name, but the contents of the directory, and the contents of dire\hich\af4\dbch\af4\loch\f4 ctories contained within the directory.\par \par \hich\af4\dbch\af4\loch\f4 -H\tab When this flag is used, the CATALOG command does not print the header, which shows the path being cataloged, or the trailer, which shows statistics about disk use.\par \par \hich\af4\dbch\af4\loch\f4 -L\tab The standard format for a directory listing \hich\af4\dbch\af4\loch\f4 is a table, with one line per file entry.  When this flag is used, the CATALOG command shows a great deal more information about each file, but the information is shown using several lines.\par \par \hich\af4\dbch\af4\loch\f4 -N\tab This flag causes the CATALOG command to show only the name of \hich\af4\dbch\af4\loch\f4 the file, omitting all other information.  Files are formatted with multiple file names per line, placing the file names on tab stops at 16 character boundaries.  The resulting table is considerably easier to scan when looking for a specific file.\par \par \hich\af4\dbch\af4\loch\f4 -P\tab The \hich\af4\dbch\af4\loch\f4 name of a file is normally displayed as a simple file name.  Use of the -P flag causes the files to be listed as full path names.  This option does make the file names fairly long, so the default tabular format may become cumbersome.  Using this option wi\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 h -L or -N clears up the problem.\par \par \hich\af4\dbch\af4\loch\f4 -T\tab Most file types have a standard 3-letter identifier that is displayed by the catalog command.  For example, an ASCII file has a 3-letter code of TXT.  These 3-letter codes are displayed by the CATALOG command.  If you \hich\af4\dbch\af4\loch\f4 use the -T flag, the CATALOG command displays the hexadecimal}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  file type instead of the 3-letter file type code.\par \tab \tab \hich\af4\dbch\af4\loch\f4 This flag also controls the auxiliary file type field, which is shown as a language name for SRC files.  When the -T flag \hich\af4\dbch\af4\loch\f4 is used, this field, too, is shown as a hexadecimal value for all file types.\par \par }{\i \hich\af4\dbch\af4\loch\f4 directory}{\tab \hich\af4\dbch\af4\loch\f4 The path name or partial path name of the volume, directory, or subdirectory for which you want a directory listing.  If the prefix is omitted, then the contents of th\hich\af4\dbch\af4\loch\f4 e current directory are listed.}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 path names}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of the file for which you want directory information.  You can use wildcard characters in the file name to obta\hich\af4\dbch\af4\loch\f4 in information about only specific files.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\li360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs16 \hich\af2\dbch\af4\loch\f2 :ORCA.DISASM:=\par \par \hich\af2\dbch\af4\loch\f2 Name            Type  Blocks  Modified        Created         Access  Subtype\par \par \hich\af2\dbch\af4\loch\f2 Desktop.DISASM  S16+     230 14 Aug 90       21 May 90        DNBWR   $DB03\par \hich\af2\dbch\af4\loch\f2 DISASM          EXE      101 15 Aug 90    \hich\af2\dbch\af4\loch\f2    15 Aug 90        DNBWR   $0100\par \hich\af2\dbch\af4\loch\f2 DISASM.Config   $5A+       2 17 May 90       30 Apr 90        DNBWR   $800A\par \hich\af2\dbch\af4\loch\f2 DISASM.Data     TXT       95 10 Aug 90       20 Oct 88        DNBWR   $0000\par \hich\af2\dbch\af4\loch\f2 DISASM.Scripts  SRC       94 23 May 90       15 Aug 89        DNBWR   \hich\af2\dbch\af4\loch\f2 $0116\par \hich\af2\dbch\af4\loch\f2 Help            DIR        1 18 Sep 89       14 Sep 89        DNBWR   $0000\par \hich\af2\dbch\af4\loch\f2 Samples         DIR        1 13 Aug 90       14 Sep 89        DNBWR   $0000\par \hich\af2\dbch\af4\loch\f2 Icons           DIR        1 17 Sep 89       14 Sep 89        DNBWR   $0000\par \par \hich\af2\dbch\af4\loch\f2 Blocks Free:   1026  \hich\af2\dbch\af4\loch\f2     Blocks used:    574      Total Blocks:   1600\par }\pard\plain \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 8.7  Sample CATALOG Listing\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Table 8.7 shows the output from cataloging the ORCA/Disassembler 1.2 disk.  This particular disk has a good variety of file types and so forth; we'll use it to see what t\hich\af4\dbch\af4\loch\f4 he CATALOG command can tell us about a disk.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 disassembler}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 disk size}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 blocks}}}{\hich\af4\dbch\af4\loch\f4 The first line shows the path being cataloged; in this case, we are cataloging all files on the disk ORCA.DISASM.  The last line gives more information about\hich\af4\dbch\af4\loch\f4  the disk, including the number of blocks that are not used, the number that are used, and the total number of blocks on the disk.  For ProDOS format disks, a block is 512 bytes, so this disk is an 800K disk.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file names}}}{\hich\af4\dbch\af4\loch\f4 Between these two lines is t\hich\af4\dbch\af4\loch\f4 he information about the files on the disk.  The first column is the file name.  If the file name is too long to fit in the space available, the rest of the information will appear on the line below.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types}}}{\hich\af4\dbch\af4\loch\f4 Next is the type of the file.  Most f\hich\af4\dbch\af4\loch\f4 ile types have a three letter code associated with them, like S16 (System 16) for a file that can be executed from the Finder or the ORCA shell, and DIR (directory) for a folder.  There is no three letter code for a file with a type of $5A, so this file t\hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4 pe is shown as the hexadecimal number for the file type.  If a file is an extended file (i.e., if it has a resource fork), the file type is followed by a + character.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 blocks}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 program size}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sparse files}}}{\hich\af4\dbch\af4\loch\f4 The column labeled "Blocks" show\hich\af4\dbch\af4\loch\f4 s the number of blocks occupied by the file on the disk.  GS/OS is clever about the way it stores files, not using a physical disk block for a file that contains only zeros, for example, and programs are not necessarily loaded all at once, so this block s\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ze does not necessarily correspond to the amount of memory that will be needed to load a file or run a program; it only tells how much space is required on the disk.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 time}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 date}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 creation time}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 modify time}}}{\hich\af4\dbch\af4\loch\f4 The columns labeled "M\hich\af4\dbch\af4\loch\f4 odified" and "Created" give the date and time when the file was last changed and when the file was originally created, respectively.  In this example, the time fields have been artificially set to 00:00 (something the Byte Works does for all of its distri\hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 ution disks).  When the time is set to 00:00, it is not shown.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file access flags}}}{\hich\af4\dbch\af4\loch\f4 The column labeled Access shows the values of six flags that control whether a file can be deleted (D), renamed (N), whether it has been backed up since the last time \hich\af4\dbch\af4\loch\f4 it was modified (B), whether it can be written to (W) or read from (R), and whether it is invisible (I).  In all cases, if the condition is true, the flag is shown as an uppercase letter, and if the condition is false, the flag is not shown at all.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 uxiliary file type}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language stamp}}}{\hich\af4\dbch\af4\loch\f4 The last column, labeled "Subtype", shows the auxiliary file type for the file.  For most files, this is shown as a four-digit hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  number, but for SRC files you \hich\af4\dbch\af4\loch\f4 will see the name of the language.\par \par }\pard\plain \s26\qj\li2520\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Name         : Desktop.DISASM\par \hich\af2\dbch\af4\loch\f2 Storage Type : 5\par \hich\af2\dbch\af4\loch\f2 File Type    : S16       $B3\par \hich\af2\dbch\af4\loch\f2 Aux Type     : $DB03\par \hich\af2\dbch\af4\loch\f2 Access       : DNBWR     $E3\par \hich\af2\dbch\af4\loch\f2 Mod Date     : 14 Aug 90       \par \hich\af2\dbch\af4\loch\f2 Create Date  : 21 May 90       \par \hich\af2\dbch\af4\loch\f2 Blocks Used  : 139\par \hich\af2\dbch\af4\loch\f2 Data EOF   \hich\af2\dbch\af4\loch\f2   : $00011A6B\par \hich\af2\dbch\af4\loch\f2 Res. Blocks  : 91\par \hich\af2\dbch\af4\loch\f2 Res. EOF     : $0000B215\par \par }\pard\plain \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Table 8.8\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EOF}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file length}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resource fork}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 storage type}}}{\hich\af4\dbch\af4\loch\f4 The tabular form used by the CATALOG command to show information about files is compact, but doesn't provide eno\hich\af4\dbch\af4\loch\f4 ugh room to show all of the information about a file that is available from GS/OS.  When the -L flag is used, the CATALOG command uses an expanded form to show more information about the file.  Table 8.8 shows the expanded information for the Desktop.DISA\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 M file.  The name, file type, auxiliary file type, access, modification date and creation date fields are the same as before, although the order has changed and the fields that have a hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  equivalent are shown using both forms.  \hich\af4\dbch\af4\loch\f4 The old block count field has been expended, showing the number of blocks used by the date fork (the Blocks Used field) and the resource fork (labeled Res. Blocks) as two separate values.  In addition, the true size of the file in bytes is shown, again sp\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 it between the data fork and resource fork, as the Date EOF field and the Res. EOF field.  Finally, the internal storage type used by GS/OS is listed.\par \hich\af4\dbch\af4\loch\f4 For a more complete and technical description of the various information returned by the CATALOG command,\hich\af4\dbch\af4\loch\f4  see }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  GS/OS Reference, Volume 1}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318261}\hich\af4\dbch\af4\loch\f4 CC{\*\bkmkend _Toc495318261}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CC\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CC command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This language command sets the shell default language to CC, the language stamp used by the ORCA/C compiler.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318262}\hich\af4\dbch\af4\loch\f4 CHANGE{\*\bkmkend _Toc495318262}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CHANGE [-P] }{\i \hich\af2\dbch\af4\loch\f2 pathname language}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CHANGE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal\hich\af4\dbch\af4\loch\f4  command changes the language type of an existing file.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the\hich\af4\dbch\af4\loch\f4  file name) of the source file whose language type you wish to change.  You can use wildcard characters in the file name.\par \par }{\i \hich\af4\dbch\af4\loch\f4 language}{\tab \hich\af4\dbch\af4\loch\f4 The language type to which you wish to change this file.}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language stamp}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SHOW command}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 In ORCA, each source o\hich\af4\dbch\af4\loch\f4 r text file is assigned the current default language type when it is created.  When you assemble or compile the file, ORCA checks the language type to determine which assembler, compiler, linker, or text formatter to call.  Use the CATALOG command to see \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he language type currently assigned to a file.  Use the CHANGE command to change the language type of any of the languages listed by the SHOW LANGUAGES command.\par \hich\af4\dbch\af4\loch\f4 You can use the CHANGE command to correct the ORCA language type of a file if the editor was se\hich\af4\dbch\af4\loch\f4 t to the wrong language type when you created the file, for example.  Another use of the CHANGE command is to assign the correct ORCA language type to an ASCII text file (GS/OS file type $04) created with another editor.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318263}\hich\af4\dbch\af4\loch\f4 CMPL{\*\bkmkend _Toc495318263}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CMPL\tab [+D|-D] [+E|-E] [-I] [+M|\hich\af2\dbch\af4\loch\f2 -M] [+L|}{\ul \hich\af2\dbch\af4\loch\f2 -L}{\hich\af2\dbch\af4\loch\f2 ] [+O|}{\ul \hich\af2\dbch\af4\loch\f2 -O}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [-R] [+S|}{\ul \hich\af2\dbch\af4\loch\f2 -S}{\hich\af2\dbch\af4\loch\f2 ] [+T|}{\ul \hich\af2\dbch\af4\loch\f2 -T}{\hich\af2\dbch\af4\loch\f2 ] [+W|}{\ul \hich\af2\dbch\af4\loch\f2 -W}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 sourcefile}{\hich\af2\dbch\af4\loch\f2   [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ] [NAMES=(}{\i \hich\af2\dbch\af4\loch\f2 seg1}{\hich\af2\dbch\af4\loch\f2 [ }{\i \hich\af2\dbch\af4\loch\f2 seg2}{\hich\af2\dbch\af4\loch\f2 [ ...]])] [}{\i \hich\af2\dbch\af4\loch\f2 language1}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) [}{\i \hich\af2\dbch\af4\loch\f2 language2}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiling a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linking a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPL command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This interna\hich\af4\dbch\af4\loch\f4 l command compiles (or assembles) and links a source file.  Its function and parameters are identical to those of the ASML command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318264}\hich\af4\dbch\af4\loch\f4 CMPLG{\*\bkmkend _Toc495318264}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CMPLG\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\ul \hich\af2\dbch\af4\loch\f2 -L}{\hich\af2\dbch\af4\loch\f2 ] [+O|}{\ul \hich\af2\dbch\af4\loch\f2 -O}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [-R] [+S|}{\ul \hich\af2\dbch\af4\loch\f2 -S}{\hich\af2\dbch\af4\loch\f2 ] [+T|}{\ul \hich\af2\dbch\af4\loch\f2 -T}{\hich\af2\dbch\af4\loch\f2 ] [+W|}{\ul \hich\af2\dbch\af4\loch\f2 -W}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 sourcefile}{\hich\af2\dbch\af4\loch\f2   [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ] [NA\hich\af2\dbch\af4\loch\f2 MES=(}{\i \hich\af2\dbch\af4\loch\f2 seg1}{\hich\af2\dbch\af4\loch\f2 [ }{\i \hich\af2\dbch\af4\loch\f2 seg2}{\hich\af2\dbch\af4\loch\f2 [ ...]])] [}{\i \hich\af2\dbch\af4\loch\f2 language1}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) [}{\i \hich\af2\dbch\af4\loch\f2 language2}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 executing a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPLG command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command compiles (or assembles), links, and runs a source file.  Its function is identical to that of the ASML\hich\af4\dbch\af4\loch\f4 G command.  See the ASML command for a description of the parameters.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318265}\hich\af4\dbch\af4\loch\f4 COMMANDS{\*\bkmkend _Toc495318265}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 COMMANDS }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command table}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSCMND file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 restartability}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMMANDS command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command causes ORCA to read a \hich\af4\dbch\af4\loch\f4 command table, resetting all the commands to those in the new command table.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of the file containing the command table.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 When you load ORCA, it reads the command-table file named SY\hich\af4\dbch\af4\loch\f4 SCMND in prefix 15.  You can use the COMMANDS command to read in a custom command table at any time.  Command tables are described in the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par \hich\af4\dbch\af4\loch\f4 The COMMANDS command has one other useful side effect. \hich\af4\dbch\af4\loch\f4  Any restartable programs that have been loaded and left in memory will be purged, thus freeing a great deal of memory.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318266}\hich\af4\dbch\af4\loch\f4 COMPACT{\*\bkmkend _Toc495318266}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 COMPACT }{\i \hich\af2\dbch\af4\loch\f2 infile}{\hich\af2\dbch\af4\loch\f2  [-O }{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ] [-P] [-R] [-S]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 OMF}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW C}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMPACT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This external command converts a\hich\af4\dbch\af4\loch\f4  load file from an uncompacted form to a compacted form. \par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 infile}{\tab \hich\af4\dbch\af4\loch\f4 Input load file.  Any OMF format file is acceptable, but the only files that benefit from the COMPACT utility are the executable files, such as EXE and S16.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -O }{\i \hich\af4\dbch\af4\loch\f4 outfile}{\tab \hich\af4\dbch\af4\loch\f4 By default, the input\hich\af4\dbch\af4\loch\f4  file is replaced with the compacted version of the same file.  If you supply an output file name with this option, the file is written to }{\i \hich\af4\dbch\af4\loch\f4 outfile}{\hich\af4\dbch\af4\loch\f4 .\par \par \hich\af4\dbch\af4\loch\f4 -P\tab When the -P flag is used, copyright and progress information is written to standard out.\par \par \hich\af4\dbch\af4\loch\f4 -R\tab The -R opti\hich\af4\dbch\af4\loch\f4 on marks any segment named ~globals or ~arrays as a reload segment.  It also forces the bank size of the ~globals segment to $10000.  These options are generally only used with APW C programs.\par \par \hich\af4\dbch\af4\loch\f4 -S\tab The -S flag causes a summary to be printed to standard out.\hich\af4\dbch\af4\loch\f4   This summary shows the total number of segments in the file, the number of each type of OMF record compacted, copied, and created.  This information gives you some idea of what changes were made to make the object file smaller.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Compacted object files ar\hich\af4\dbch\af4\loch\f4 e smaller and load faster than uncompacted load files.  The reduction in file size is generally about 40%, although the actual number can vary quite a bit in practice.  In addition, if the original file is in OMF 1.0 format, it is converted to OMF 2.0.\par \hich\af4\dbch\af4\loch\f4 Fil\hich\af4\dbch\af4\loch\f4 es created with ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  2.0 are compacted by default.  The main reason for using this utility is to convert any old programs you may obtain to the newer OMF format, and to reduce their file size.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318267}\hich\af4\dbch\af4\loch\f4 COMPILE{\*\bkmkend _Toc495318267}\par }\pard\plain \s27\fi-1440\li1440\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 COMPILE\tab [+D|-D] [+E|-E] [-I] [+M|-M] [\hich\af2\dbch\af4\loch\f2 +L|}{\ul \hich\af2\dbch\af4\loch\f2 -L}{\hich\af2\dbch\af4\loch\f2 ] [+O|}{\ul \hich\af2\dbch\af4\loch\f2 -O}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [-R] [+S|}{\ul \hich\af2\dbch\af4\loch\f2 -S}{\hich\af2\dbch\af4\loch\f2 ] [+T|}{\ul \hich\af2\dbch\af4\loch\f2 -T}{\hich\af2\dbch\af4\loch\f2 ] [+W|}{\ul \hich\af2\dbch\af4\loch\f2 -W}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 sourcefile}{\hich\af2\dbch\af4\loch\f2   [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ]                            [NAMES=(}{\i \hich\af2\dbch\af4\loch\f2 seg1}{\hich\af2\dbch\af4\loch\f2 [ }{\i \hich\af2\dbch\af4\loch\f2 seg2}{\hich\af2\dbch\af4\loch\f2 [ ...]])] [}{\i \hich\af2\dbch\af4\loch\f2 language1}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) [}{\i \hich\af2\dbch\af4\loch\f2 language2}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiling a program}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMPILE com\hich\af4\dbch\af4\loch\f4 mand\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command compiles (or assembles) a source file.  Its function is identical to that of the ASML command, except that it does not call the linker to link the object files it creates; therefore, no load file is generated.  You can use t\hich\af4\dbch\af4\loch\f4 he LINK command to link the object files created by the COMPILE command.  See the ASML command for a description of the parameters.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318268}\hich\af4\dbch\af4\loch\f4 COMPRESS{\*\bkmkend _Toc495318268}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 COMPRESS A | C | A C  [}{\i \hich\af2\dbch\af4\loch\f2 directory1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 directory2}{\hich\af2\dbch\af4\loch\f2  ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 alphabetizing directories}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMPRESS command\bxe }}}{\hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 his internal command compresses and alphabetizes directories.  More than one directory can be specified on a single command line.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 A\tab Use this parameter to alphabetize the file names in a directory.  The file names appear in the new sequence whenever you us\hich\af4\dbch\af4\loch\f4 e the CATALOG command}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command}}}{\hich\af4\dbch\af4\loch\f4 .\par \par \hich\af4\dbch\af4\loch\f4 C\tab Use this parameter to compress a directory.  When you delete a file from a directory, a \ldblquote hole\rdblquote  is left in the directory that GS/OS fills with the file entry for the next file you create.  Use the C paramete\hich\af4\dbch\af4\loch\f4 r to remove these holes from a directory, so that the name of the next file you create is placed at the end of the directory listing instead of in a hole in the middle of the listing.\par \par \hich\af4\dbch\af4\loch\f4 A C\tab You can use both the A and C parameters in one command; if you do s\hich\af4\dbch\af4\loch\f4 o, you must separate them with one or more spaces.\par \par }{\i \hich\af4\dbch\af4\loch\f4 directory}{\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volume names}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 current prefix}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DOS}}}{\hich\af4\dbch\af4\loch\f4 The path name or partial path name of the directory you wish to compress or alphabetize, not including any file name.  If you do not inclu\hich\af4\dbch\af4\loch\f4 de a volume or directory path, then the current directory is acted on.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 This command works only on GS/OS directories, not on other file systems such as DOS or Pascal.  Due to the design of GS/OS, the COMPRESS command will also not work on the disk volume t\hich\af4\dbch\af4\loch\f4 hat you boot from \endash  to modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par \hich\af4\dbch\af4\loch\f4 To interchange the positions of two files in a directory, use the SWITCH command}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SWITCH command}}}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318269}\hich\af4\dbch\af4\loch\f4 CONTINUE{\*\bkmkend _Toc495318269}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CONTINUE\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC f\hich\af4\dbch\af4\loch\f4 iles}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FOR command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 END command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DELETE command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOOP command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CONTINUE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command causes control to skip over the remaining statements in the closest nested FOR or LOOP statement.  For example, the EXEC fil\hich\af4\dbch\af4\loch\f4 e}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 programming examples}}}{\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FOR I\par \hich\af2\dbch\af4\loch\f2   IF \{I\} == IMPORTANT\par \hich\af2\dbch\af4\loch\f2     CONTINUE\par \hich\af2\dbch\af4\loch\f2   END\par \hich\af2\dbch\af4\loch\f2   DELETE \{I\}\par \hich\af2\dbch\af4\loch\f2 END\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would delete all files listed on the command line when the EXEC file is executed except for the file IMPORTANT.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318270}\hich\af4\dbch\af4\loch\f4 COPY{\*\bkmkend _Toc495318270}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 COPY [-C] [-F] [-P] [-R] }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 pathna\hich\af2\dbch\af4\loch\f2 me2}{\hich\af2\dbch\af4\loch\f2 ]\par \hich\af2\dbch\af4\loch\f2 COPY [-C] [-F] [-P] [-R] }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 directory2}{\hich\af2\dbch\af4\loch\f2 ]\par \hich\af2\dbch\af4\loch\f2 COPY }{\i \hich\af2\dbch\af4\loch\f2 directory1 directory2}{\par \hich\af2\dbch\af4\loch\f2 COPY [-D] }{\i \hich\af2\dbch\af4\loch\f2 volume1 volume2}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 disk copying}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volume names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 device names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COPY command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command copies a file to a new \hich\af4\dbch\af4\loch\f4 subdirectory, or to a duplicate file with a different file name.  This command can also be used to copy an entire directory or to perform a block-by-block disk copy.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -C\tab If you specify -C before the first path name, COPY does not prompt you if the target f\hich\af4\dbch\af4\loch\f4 ile name (}{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4 ) already exists.\par \par \hich\af4\dbch\af4\loch\f4 -D\tab If you specify -D before the first path name, both path names are volume names, and both volumes are the same size, then a block-by-block disk copy is performed.  Other flags, while accepted, are ignored when this f\hich\af4\dbch\af4\loch\f4 lag is used.\par \par \hich\af4\dbch\af4\loch\f4 -F\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 data fork}}}{\hich\af4\dbch\af4\loch\f4 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -F flag is used, only the data fork is copied.  If the destination file already exists, it's resource fork is left undisturbe\hich\af4\dbch\af4\loch\f4 d.  By copying the data fork of a file onto an existing file with a resource fork, it is possible to combine the data fork of the original file with the resource fork of the target file.\par \par \hich\af4\dbch\af4\loch\f4 -P\tab The COPY command prints progress information showing what file is\hich\af4\dbch\af4\loch\f4  being copied as it works through a list of files.  The -P flag suppresses this progress information.\par \par \hich\af4\dbch\af4\loch\f4 -R\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resource fork}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resources}}}{\hich\af4\dbch\af4\loch\f4 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -R flag is use\hich\af4\dbch\af4\loch\f4 d, only the resource fork is copied.  If the destination file already exists, it's data fork is left undisturbed.  By copying the resource fork of a file onto an existing file with a data fork, it is possible to add the resource fork of the original file \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 o the data fork of the target file.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4  \tab The full or partial path name (including the file name) of a file to be copied.  Wildcard characters may be used in the file name.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name (including the file name) to be give\hich\af4\dbch\af4\loch\f4 n to the copy of the file.  Wildcard characters can not be used in this file name.  If you leave this parameter out, then the current directory is used and the new file has the same name as the file being copied.\par \par }{\i \hich\af4\dbch\af4\loch\f4 directory1}{\tab \hich\af4\dbch\af4\loch\f4 The path name or partial path n\hich\af4\dbch\af4\loch\f4 ame of a directory that you wish to copy.  The entire directory (including all the files, subdirectories, and files in the subdirectories) is copied.\par \par }{\i \hich\af4\dbch\af4\loch\f4 directory2}{\tab \hich\af4\dbch\af4\loch\f4 The path name or partial path name of the directory to which you wish to copy the file or dire\hich\af4\dbch\af4\loch\f4 ctory.  If }{\i \hich\af4\dbch\af4\loch\f4 directory2}{\hich\af4\dbch\af4\loch\f4  does not exist, it is created (unless }{\i \hich\af4\dbch\af4\loch\f4 directory1}{\hich\af4\dbch\af4\loch\f4  is empty).  If you do not include this parameter, the current directory is used.\par \par }{\i \hich\af4\dbch\af4\loch\f4 volume1}{\tab \hich\af4\dbch\af4\loch\f4 The name of a volume that you want to copy onto another volume.  The entire volume (including a\hich\af4\dbch\af4\loch\f4 ll the files, subdirectories, and files in the subdirectories) is copied.  If both path names are volume names, both volumes are the same size, and you specify the -D parameter, then a block-by-block disk copy is performed.  You can use a device name (suc\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4  as .D1) instead of a volume name.\par \par }{\i \hich\af4\dbch\af4\loch\f4 volume2}{\tab \hich\af4\dbch\af4\loch\f4 The name of the volume that you want to copy onto.  You can use a device name instead of a volume name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If you do not specify }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4 , and a file with the file name specified in }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4  exists in the target \hich\af4\dbch\af4\loch\f4 subdirectory, or if you do specify }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4  and a file named }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4  exists in the target subdirectory, then you are asked if you want to replace the target file.  Type Y and press }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  to replace the file.  Type N and press }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  to copy the file to\hich\af4\dbch\af4\loch\f4  the target prefix with a new file name.  In the latter case, you are prompted for the new file name.  Enter the file name, or press }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  without entering a file name to cancel the copy operation.  If you specify the -C parameter, then the target file is\hich\af4\dbch\af4\loch\f4  replaced without prompting.\par \hich\af4\dbch\af4\loch\f4 If you do not include any parameters after the COPY command, you are prompted for a path name, since ORCA prompts you for any required parameters.  However, since the target prefix and file name are not required parameters, you\hich\af4\dbch\af4\loch\f4  are }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  prompted for them.  Consequently, the current prefix is always used as the target directory in such a case.  To copy a file to any subdirectory }{\i \hich\af4\dbch\af4\loch\f4 other}{\hich\af4\dbch\af4\loch\f4  than the current one, you }{\i \hich\af4\dbch\af4\loch\f4 must}{\hich\af4\dbch\af4\loch\f4  include the target path name as a parameter either in the command \hich\af4\dbch\af4\loch\f4 line or following the path name entered in response to the file name prompt.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 write protect}}}{\hich\af4\dbch\af4\loch\f4 If you use volume names for both the source and target and specify the -D parameter, then the COPY command copies one volume onto another.  In this case, the\hich\af4\dbch\af4\loch\f4  contents of the target disk are destroyed by the copy operation.  The target disk must be initialized (use the INIT command) }{\i \hich\af4\dbch\af4\loch\f4 before}{\hich\af4\dbch\af4\loch\f4  this command is used.  This command performs a block-by-block copy, so it makes an exact duplicate of the disk.  Both disks\hich\af4\dbch\af4\loch\f4  must be the same size and must be formatted using the same FST for this command to work.  You can use device names rather than volume names to perform a disk copy.  To ensure safe volume copies, it is a good idea to write-protect the source disk.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318271}\hich\af4\dbch\af4\loch\f4 CREATE{\*\bkmkend _Toc495318271}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 C\hich\af2\dbch\af4\loch\f2 REATE }{\i \hich\af2\dbch\af4\loch\f2 directory1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 directory2}{\hich\af2\dbch\af4\loch\f2  ...]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CREATE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command creates a new subdirectory.  More than one subdirectory can be created with a single command by separating the new directory names with spaces.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 directory}{\tab \hich\af4\dbch\af4\loch\f4 The path name or pa\hich\af4\dbch\af4\loch\f4 rtial path name of the subdirectory you wish to create.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318272}\hich\af4\dbch\af4\loch\f4 CRUNCH{\*\bkmkend _Toc495318272}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CRUNCH [-P] }{\i \hich\af2\dbch\af4\loch\f2 rootname}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 partial compilation}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CRUNCH utility\bxe }}}{\hich\af4\dbch\af4\loch\f4 This external command combines the object files created by partial assemblies or compiles into \hich\af4\dbch\af4\loch\f4 a single object file.  For example, if a compile and subsequent partial compiles have produced the object files FILE.ROOT, FILE.A, FILE.B, and FILE.C, then the CRUNCH command combines FILE.A, FILE.B, and FILE.C into a new file called FILE.A, deleting the \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ld object files in the process.  The new FILE.A contains only the latest version of each function in the program.  New functions added during partial compiles are placed at the end of the new FILE.A.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab Suppresses the copyright and progress information no\hich\af4\dbch\af4\loch\f4 rmally printed by the CRUNCH utility.\par \par }{\i \hich\af4\dbch\af4\loch\f4 rootname}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name, including the file name but minus any file name extensions, of the object files you wish to compress.  For example, if your object files are named FILE.ROOT, FILE.A, a\hich\af4\dbch\af4\loch\f4 nd FILE.B in subdirectory :HARDISK:MYFILES:, you should then use :HARDISK:MYFILES:FILE for }{\i \hich\af4\dbch\af4\loch\f4 rootname}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318273}\hich\af4\dbch\af4\loch\f4 DELETE{\*\bkmkend _Toc495318273}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 DELETE [-C] [-P] [-W] }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 pathname2}{\hich\af2\dbch\af4\loch\f2  ...]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DELETE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command deletes the file you specify.  You\hich\af4\dbch\af4\loch\f4  can delete more than one file with a single command by separating multiple file names with spaces.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -C\tab If you delete the entire contents of a directory by specifying = for the path name, or if you try to delete a directory, the DELETE command asks for con\hich\af4\dbch\af4\loch\f4 firmation before doing the delete.  If you use the -C flag, the delete command does not ask for confirmation before doing the delete.\par \par \hich\af4\dbch\af4\loch\f4 -P\tab When you delete files using wildcards, or when you delete a directory that contains other files, the delete command li\hich\af4\dbch\af4\loch\f4 sts the files as they are deleted.  To suppress this progress information, use the -P flag.\par \par \hich\af4\dbch\af4\loch\f4 -W\tab When you try to delete a file that does not exist, the DELETE command prints a warning message, but does not flag an error by returning a non-zero status code. \hich\af4\dbch\af4\loch\f4  If you use the -W flag, the warning message will not be printed.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of the file to be deleted.  Wildcard characters may be used in the file name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If the target file of the DELETE co\hich\af4\dbch\af4\loch\f4 mmand is a directory, the directory and all of its contents, including any included directories and their contents, are deleted.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318274}\hich\af4\dbch\af4\loch\f4 DEREZ{\*\bkmkend _Toc495318274}\par }\pard\plain \s27\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 DEREZ\tab [-D[EFINE] }{\i \hich\af2\dbch\af4\loch\f2 macro}{\hich\af2\dbch\af4\loch\f2 [=}{\i \hich\af2\dbch\af4\loch\f2 data}{\hich\af2\dbch\af4\loch\f2 ]] [-E[SCAPE]] [-I }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\hich\af2\dbch\af4\loch\f2 ]\par \tab \hich\af2\dbch\af4\loch\f2 [-M[AXTRINGSIZE] n] [-O }{\i \hich\af2\dbch\af4\loch\f2 filename}{\hich\af2\dbch\af4\loch\f2 ]\par \tab \hich\af2\dbch\af4\loch\f2 [-ONLY }{\i \hich\af2\dbch\af4\loch\f2 typeexpr}{\hich\af2\dbch\af4\loch\f2 [(}{\i \hich\af2\dbch\af4\loch\f2 id1}{\hich\af2\dbch\af4\loch\f2 [:}{\i \hich\af2\dbch\af4\loch\f2 id2}{\hich\af2\dbch\af4\loch\f2 ])]\hich\af2\dbch\af4\loch\f2 ] [-P] [-RD]\par \tab \hich\af2\dbch\af4\loch\f2 [-S[KIP] }{\i \hich\af2\dbch\af4\loch\f2 typeexpr}{\hich\af2\dbch\af4\loch\f2 [(}{\i \hich\af2\dbch\af4\loch\f2 id1}{\hich\af2\dbch\af4\loch\f2 [:}{\i \hich\af2\dbch\af4\loch\f2 id2}{\hich\af2\dbch\af4\loch\f2 ])]] [-U[NDEF] }{\i \hich\af2\dbch\af4\loch\f2 macro}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright {\tab }{\i \hich\af2\dbch\af4\loch\f2 resourceFile}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 resourceDescriptionFile}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resources}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extended files}{\txe see resources}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 Rez}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 DEREZ command\bxe }}{\hich\af4\dbch\af4\loch\f4 This external command reads the resource fork of an exte\hich\af4\dbch\af4\loch\f4 nded file, writing the resources in a text form.  This output is detailed enough that is is possible to edit the output, then recompile it with the Rez compiler to create a new, modified resource fork. \par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright {\hich\af4\dbch\af4\loch\f4 -D[EFINE] }{\i \hich\af4\dbch\af4\loch\f4 macro}{\hich\af4\dbch\af4\loch\f4 [=}{\i \hich\af4\dbch\af4\loch\f4 data}{\hich\af4\dbch\af4\loch\f4 ]   Defines the macro }{\i \hich\af4\dbch\af4\loch\f4 macro}{\hich\af4\dbch\af4\loch\f4  wit\hich\af4\dbch\af4\loch\f4 h the value }{\i \hich\af4\dbch\af4\loch\f4 data}{\hich\af4\dbch\af4\loch\f4 .  This is completely equivalent to placing the statement\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \tab \tab \hich\af2\dbch\af4\loch\f2 #define }{\i \hich\af2\dbch\af4\loch\f2 macro data}{\par }\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 at the start of the first resource description file.\par \tab \tab \hich\af4\dbch\af4\loch\f4 If the optional data field is left off, the macro is defined with a null value.\par \tab \tab \hich\af4\dbch\af4\loch\f4 More than one -d opt\hich\af4\dbch\af4\loch\f4 ion can be used on the command line.\par \par \hich\af4\dbch\af4\loch\f4 -E[SCAPE]\tab Characters outside of the range of the printing ASCII characters are normally printed as escape sequences, like \\0xC1.  If the -e option is used, these characters are sent to standard out unchanged.  Not all \hich\af4\dbch\af4\loch\f4 output devices have a mechanism defined to print these characters, so using this option may give strange or unusable results.\par \par \hich\af4\dbch\af4\loch\f4 -I }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 Lets you specify one or more path names to search for #include files.  This option can be used more than once.  If th\hich\af4\dbch\af4\loch\f4 e option is used more than once, the paths are searched in the order listed.\par \par \hich\af4\dbch\af4\loch\f4 -M[AXTRINGSIZE] }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4    This setting controls the width of the output.  It must be in the range 2 to 120.\par \par \hich\af4\dbch\af4\loch\f4 -O }{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4    This option provides another way of redirectable the output. \hich\af4\dbch\af4\loch\f4  It should not be used if command line output redirection is also used.  With the -O option, the file is created with a file type of SRC and a language type of Rez.\par \par \hich\af4\dbch\af4\loch\f4 -ONLY }{\i \hich\af4\dbch\af4\loch\f4 typeexpr}{\hich\af4\dbch\af4\loch\f4 [(}{\i \hich\af4\dbch\af4\loch\f4 id1}{\hich\af4\dbch\af4\loch\f4 [:}{\i \hich\af4\dbch\af4\loch\f4 id2}{\hich\af4\dbch\af4\loch\f4 ])]   Lists only resources with a resource type of typeexpr, which\hich\af4\dbch\af4\loch\f4  should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is listed.  To list a range of resources, separate the starting and ending resource ID with a\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 colon.\par \par \hich\af4\dbch\af4\loch\f4 -P\tab When this option is used, the copyright, version number, and progress information is written to standard out.\par \par \hich\af4\dbch\af4\loch\f4 -RD\tab Suppresses warning messages if a resource type is redeclared.\par \par \hich\af4\dbch\af4\loch\f4 -S[KIP] }{\i \hich\af4\dbch\af4\loch\f4 typeexpr}{\hich\af4\dbch\af4\loch\f4 [(}{\i \hich\af4\dbch\af4\loch\f4 id1}{\hich\af4\dbch\af4\loch\f4 [:}{\i \hich\af4\dbch\af4\loch\f4 id2}{\hich\af4\dbch\af4\loch\f4 ])]   Lists all but the resources with a \hich\af4\dbch\af4\loch\f4 resource type of typeexpr, which should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is skipped.  To skip a range of resources, separate the start\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ng and ending resource ID with a colon.\par \par \hich\af4\dbch\af4\loch\f4 -U[NDEF] }{\i \hich\af4\dbch\af4\loch\f4 macro}{\hich\af4\dbch\af4\loch\f4    This option can be used to undefine a macro variable.\par \par }{\i \hich\af4\dbch\af4\loch\f4 resourceFile}{\hich\af4\dbch\af4\loch\f4    This is the name of the extended file to process.  The resource fork from this file is converted to text form and written to sta\hich\af4\dbch\af4\loch\f4 ndard out.\par \par }{\i \hich\af4\dbch\af4\loch\f4 resourceDescriptionFile}{\hich\af4\dbch\af4\loch\f4    This file contains a series of declarations in the same format as used by the Rez compiler.  More than one resource description file can be used.  Any include (not #include), read, data, and resource statements are ski\hich\af4\dbch\af4\loch\f4 pped, and the remaining declarations are used as format specifiers, controlling how DeRez writes information about any particular resource type.\par \tab \tab \hich\af4\dbch\af4\loch\f4 If no resource description file is given, or if DeRez encounters a resource type for which none of the resour\hich\af4\dbch\af4\loch\f4 ce description files provide a format, DeRez writes the resource in a hexadecimal}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  format.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The output from DeRez consists of resource and data statements that are acceptable to the Rez resource compiler.  If the output from DeRez is use\hich\af4\dbch\af4\loch\f4 d immediately as the input to the resource compiler, the resulting resource fork is identical to the one processed by DeRez.  In some cases, the reverse is not true; in particular, DeRez may create a data statement for some input resources.\par \hich\af4\dbch\af4\loch\f4 Numeric values,\hich\af4\dbch\af4\loch\f4  such as the argument for the -only option, can be listed as a decimal value, a hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  value with a leading $, as in the ORCA assembler, or a hexadecimal value with a leading 0x, as used by the C language.\par \hich\af4\dbch\af4\loch\f4 For all resource descript\hich\af4\dbch\af4\loch\f4 ion files specified on the source line, the following search rules are applied:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab DeRez tries to open the file as is, by appending the file name given to the current default prefix.\par \hich\af4\dbch\af4\loch\f4 2.\tab If rule 1 fails and the file name contains no colons and does not sta\hich\af4\dbch\af4\loch\f4 rt with a colon (in other words, if the name is truly a file name, and not a path name or partial path name), DeRez appends the file name to each of the path names specified by -i options and tries to open the file.\par \hich\af4\dbch\af4\loch\f4 3.\tab DeRez looks for the file in the folde\hich\af4\dbch\af4\loch\f4 r 13:RInclude.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 For more information about resource compiler source files and type declarations, see Chapter 10.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318275}\hich\af4\dbch\af4\loch\f4 DEVICES{\*\bkmkend _Toc495318275}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 DEVICES [-B] [-D] [-F] [-I] [-L] [-M] [-N] [-S] [-T] [-U] [-V]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DEVICES command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The DEVICES command lists all\hich\af4\dbch\af4\loch\f4  of the devices recognized by GS/OS in a tabular form, showing the device type, device name, and volume name.  Various flags can be used to show other information about the devices in an expanded form.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -B\tab Display the block size for block devices.\par \par \hich\af4\dbch\af4\loch\f4 -D\tab Disp\hich\af4\dbch\af4\loch\f4 lay the version number of the software driver for the device.\par \par \hich\af4\dbch\af4\loch\f4 -F\tab Show the number of free blocks remaining on a block device.\par \par \hich\af4\dbch\af4\loch\f4 -I\tab Display the file system format used by the device.\par \par \hich\af4\dbch\af4\loch\f4 -L\tab Show all available information about each device.  This would be the sa\hich\af4\dbch\af4\loch\f4 me as typing all of the other flags.\par \par \hich\af4\dbch\af4\loch\f4 -M\tab Show the total number of blocks on the device.\par \par \hich\af4\dbch\af4\loch\f4 -N\tab Display the device number.\par \par \hich\af4\dbch\af4\loch\f4 -S\tab Display the slot number of the device.\par \par \hich\af4\dbch\af4\loch\f4 -T\tab Show the type of the device.\par \par \hich\af4\dbch\af4\loch\f4 -U\tab Show the unit number for the device.\par \par \hich\af4\dbch\af4\loch\f4 -V\tab Show the volume \hich\af4\dbch\af4\loch\f4 name for the device.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The name of the device is always displayed, but when you use any flag except -L, the device type and volume name are not shown unless you specifically use the -T and -V flags.\par \hich\af4\dbch\af4\loch\f4 See the GS/OS Technical Reference Manual for a detailed de\hich\af4\dbch\af4\loch\f4 scription of what devices are, and what the various fields mean in relation to any particular device.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318276}\hich\af4\dbch\af4\loch\f4 DISABLE{\*\bkmkend _Toc495318276}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 DISABLE  [-P] D | N | B | W | R | I }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file access flags}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 locking files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DISABLE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command disa\hich\af4\dbch\af4\loch\f4 bles one or more of the access attributes of a GS/OS file.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par \hich\af4\dbch\af4\loch\f4 D\tab \ldblquote Delete\rdblquote  privileges.  If you disable this attribute, the f\hich\af4\dbch\af4\loch\f4 ile cannot be deleted.\par \par \hich\af4\dbch\af4\loch\f4 N\tab \ldblquote Rename\rdblquote  privileges.  If you disable this attribute, the file cannot be renamed.\par \par \hich\af4\dbch\af4\loch\f4 B\tab \ldblquote Backup required\rdblquote  flag.  If you disable this attribute, the file will not be flagged as having been changed since the last time it was backed up.\par \par \hich\af4\dbch\af4\loch\f4 W\tab \ldblquote Write\rdblquote  privileges.  If you disable this attribute, the file cannot be written to.\par \par \hich\af4\dbch\af4\loch\f4 R\tab \ldblquote Read\rdblquote  privileges.  If you disable this attribute, the file cannot be read.\par \par \hich\af4\dbch\af4\loch\f4 I\tab \ldblquote Visible\rdblquote  flag.  If you disable this attribute, the file will be displayed by the CATALO\hich\af4\dbch\af4\loch\f4 G command without using the -A flag.  In other words, invisible files become visible.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of the file whose attributes you wish to disable.  You can use wildcard characters in the file\hich\af4\dbch\af4\loch\f4  name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 You can disable more than one attribute at one time by typing the operands with no intervening spaces.  For example, to \ldblquote lock\rdblquote  the file TEST so that it cannot be written to, deleted, or renamed, use the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 DISABLE DNW TEST\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ENABLE comma\hich\af4\dbch\af4\loch\f4 nd}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command}}}{\hich\af4\dbch\af4\loch\f4 Use the ENABLE command to reenable attributes you disabled with the DISABLE command.\par \hich\af4\dbch\af4\loch\f4 When you use the CATALOG command to list a directory, the attributes that are currently enabled are listed in the access field for each file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318277}\hich\af4\dbch\af4\loch\f4 DISKCHECK{\*\bkmkend _Toc495318277}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 DISKCHECK }{\i \hich\af2\dbch\af4\loch\f2 volume}{\hich\af2\dbch\af4\loch\f2 |}{\i \hich\af2\dbch\af4\loch\f2 device}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DISKCHECK command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This external command scans the disk for active files and lists all block allocations, including both data and resource forks of any extended file types.  It will then notify you of block confl\hich\af4\dbch\af4\loch\f4 icts, where two or more files are claiming the same block(s), and provide an opportunity to list the blocks and files involved.  Finally, it will verify the integrity of the disk's bitmap.  Bitmap errors will be reported and you can choose to repair the b\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 tmap.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright {\i \hich\af4\dbch\af4\loch\f4 volume}{\hich\af4\dbch\af4\loch\f4 |}{\i \hich\af4\dbch\af4\loch\f4 device}{\hich\af4\dbch\af4\loch\f4    The GS/OS volume name or device name of the disk to check.  The volume name can be specified with or without a beginning colon or slash; for example,\par \par }\pard\plain \s26\qj\fi360\li1440\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 DiskCheck :HardDisk\par \hich\af2\dbch\af4\loch\f2 DiskCheck HardDisk\par }\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \tab \hich\af4\dbch\af4\loch\f4 A device name requires a period before t\hich\af4\dbch\af4\loch\f4 he name; for example, .SCSI1.  Volume numbers can also be used, as in .D2.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 DISKCHECK will only verify a ProDOS volume.  It will not work with an HFS volume.\par \hich\af4\dbch\af4\loch\f4 In normal display mode, data scrolls continuously on the screen.  While DISKCHECK is running, pres\hich\af4\dbch\af4\loch\f4 s the space bar to place DISKCHECK in single step mode.  In this mode, block allocations are displayed one at a time, each time the space bar is pressed.  Press return to return to normal display mode.\par \hich\af4\dbch\af4\loch\f4 DISKCHECK will check volumes with up to 65535 blocks o\hich\af4\dbch\af4\loch\f4 f 512 bytes (32M).\par \hich\af4\dbch\af4\loch\f4 DISKCHECK makes the following assumptions:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 Blocks zero and one are always used and contain boot code.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Enough disk integrity exists to make a GetFileInfo call on the volume.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Block two is the beginning of the volume directory and co\hich\af4\dbch\af4\loch\f4 ntains valid information regarding the number of blocks, bitmap locations, entries per block, and entry size.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 All unused bytes at the end of the last bitmap block are truly unused; that is, they will be set to zero whenever the bitmap is repaired.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 DISKC\hich\af4\dbch\af4\loch\f4 HECK may not catch invalid volume header information as an error.  Likewise, DISKCHECK does not check all details of the directory structures.  Therefore, if large quantities of errors are displayed, it is likely that the volume header information or dire\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 tory information is at fault.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318278}\hich\af4\dbch\af4\loch\f4 ECHO{\*\bkmkend _Toc495318278}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ECHO [-N] [-T] }{\i \hich\af2\dbch\af4\loch\f2 string}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ECHO command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command lets you write messages to standard output.  All characters from the first non-blank character to the end of the line a\hich\af4\dbch\af4\loch\f4 re written to standard out.  You can use redirection to write the characters to error out or a disk file.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -N\tab The -N flag suppresses the carriage return normally printed after the string, allowing other output to be written to the same line.  One popular u\hich\af4\dbch\af4\loch\f4 se for this option is to write a prompt using the ECHO command, then use the INPUT command to read a value.  With the -N flag, the input cursor appears on the same line as the prompt.\par \par \hich\af4\dbch\af4\loch\f4 -T\tab By default, and tab characters in the string are converted to an app\hich\af4\dbch\af4\loch\f4 ropriate number of spaces before the string is written.  If the -T flag is used, the tab characters are written as is.\par \par }{\i \hich\af4\dbch\af4\loch\f4 string}{\tab \hich\af4\dbch\af4\loch\f4 The characters to write.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If you want to start your string with a space or a quote mark, enclose the string in quote marks.  Doub\hich\af4\dbch\af4\loch\f4 le the quote marks to imbed a quote in the string.  For example,\par \par }\pard\plain \s26\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs16 \hich\af2\dbch\af4\loch\f2 ECHO "   This string starts with 3 spaces and includes a "" character."\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318279}\hich\af4\dbch\af4\loch\f4 EDIT{\*\bkmkend _Toc495318279}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EDIT }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 pathname2}{\hich\af2\dbch\af4\loch\f2  ...\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language stamp}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CHANGE command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDIT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This external command calls the ORCA editor and opens a file to edit.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 pathname1}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of the file you wish to edit.  If the file named does not exist, a new file with that name is opened.  If\hich\af4\dbch\af4\loch\f4  you use a wildcard character in the file name, the first file matched is opened.  If more than one file name is given, up to ten files are opened at the same time.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The ORCA default language changes to match the language of the open file.  If you open a n\hich\af4\dbch\af4\loch\f4 ew file, that file is assigned the current default language.  Use the CHANGE command to change the language stamp of an existing file.  To change the ORCA default language before opening a new file, type the name of the language you wish to use, and press\hich\af4\dbch\af4\loch\f4  }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 The editor is described in Chapter 9.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318280}\hich\af4\dbch\af4\loch\f4 ELSE{\*\bkmkend _Toc495318280}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ELSE\par \hich\af2\dbch\af4\loch\f2 ELSE IF }{\i \hich\af2\dbch\af4\loch\f2 expression}{\hich\af2\dbch\af4\loch\f2  \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ELSE clause of IF command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command is used as part of an IF command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318281}\hich\af4\dbch\af4\loch\f4 ENABLE{\*\bkmkend _Toc495318281}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ENABLE  [-P] D |  N | B | W | R | I }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file access flags}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DISABLE comm\hich\af4\dbch\af4\loch\f4 and}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unlocking files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ENABLE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command enables one or more of the access attributes of a GS/OS file, as described in the discussion of the DISABLE command.  You can enable more than one attribute at one time by typing\hich\af4\dbch\af4\loch\f4  the operands with no intervening spaces.  For example, to \ldblquote unlock\rdblquote  the file TEST so that it can be written to, deleted, or renamed, use the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 ENABLE DNW TEST\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 When a new file is created, all the access attributes are enabled.  Use the ENABLE comman\hich\af4\dbch\af4\loch\f4 d to reverse the effects of the DISABLE command.  The parameters are the same as those of the DISABLE command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318282}\hich\af4\dbch\af4\loch\f4 ENTAB{\*\bkmkend _Toc495318282}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ENTAB [-L }{\i \hich\af2\dbch\af4\loch\f2 language}{\hich\af2\dbch\af4\loch\f2 ] [}{\i \hich\af2\dbch\af4\loch\f2 file}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tabs\:ENTAB utility}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ENTAB utility\bxe }}}{\hich\af4\dbch\af4\loch\f4 This external command scans a text stream, converting runs o\hich\af4\dbch\af4\loch\f4 f tabs and space characters into the minimum number of tabs and space characters needed to present the same information on the display screen.  Tabs are not used to replace runs of spaces in quoted strings.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -L }{\i \hich\af4\dbch\af4\loch\f4 language}{\tab \hich\af4\dbch\af4\loch\f4 The ENTAB utility checks the languag\hich\af4\dbch\af4\loch\f4 e stamp of the input file and uses the appropriate tab line from the SYSTABS file to determine the location of tab stops.  This flag can be used to override the default language number, forcing the utility to use the tab line for some other language.  You\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 can use either a language number or a language name as the parameter.\par \par }{\i \hich\af4\dbch\af4\loch\f4 file}{\tab \hich\af4\dbch\af4\loch\f4 File to process.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 TYPE command}}}{\hich\af4\dbch\af4\loch\f4 There is no DETAB utility, but the TYPE command can be used to strip tab characters from a file, replacing the tab characters with an appropr\hich\af4\dbch\af4\loch\f4 iate number of space characters.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318283}\hich\af4\dbch\af4\loch\f4 END{\*\bkmkend _Toc495318283}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 END\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FOR command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 IF command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOOP command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 END command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command terminates a FOR, IF, or LOOP command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318284}\hich\af4\dbch\af4\loch\f4 ERASE{\*\bkmkend _Toc495318284}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ERASE [-C] }{\i \hich\af2\dbch\af4\loch\f2 device}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 name}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 formatting disks\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volume names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERASE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command writes the initialization tracks used by GS/OS to a disk that has already been formatted as a GS/OS disk.  In effect, this erases all files on the disk.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -C\tab Normally, the system will ask for permission (check)\hich\af4\dbch\af4\loch\f4  before erasing a disk.  The -C flag disables that check.\par \par }{\i \hich\af4\dbch\af4\loch\f4 device}{\tab \hich\af4\dbch\af4\loch\f4 The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted already has a volume name, you can specify the volume name instead of a d\hich\af4\dbch\af4\loch\f4 evice name.\par \par }{\i \hich\af4\dbch\af4\loch\f4 name}{\tab \hich\af4\dbch\af4\loch\f4 The new volume name for the disk.  If you do not specify }{\i \hich\af4\dbch\af4\loch\f4 name}{\hich\af4\dbch\af4\loch\f4 , then the name :BLANK is used.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 ORCA recognizes the device type of the disk drive specified by }{\i \hich\af4\dbch\af4\loch\f4 device}{\hich\af4\dbch\af4\loch\f4 , and uses the appropriate format.  ERASE works for all disk formats suppor\hich\af4\dbch\af4\loch\f4 ted by GS/OS.\par \hich\af4\dbch\af4\loch\f4 ERASE destroys any files on the disk being formatted.  The effect of the ERASE command is very similar to the effect of the INIT command, but there are some differences.  The INIT command will work on any disk, while the ERASE command can onl\hich\af4\dbch\af4\loch\f4 y be used on a disk that has already been initialized.  The ERASE command works much faster than the INIT command, since the ERASE command does not need to take the time to create each block on the disk.  Finally, when the INIT command is used, each block\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is filled with zeros.  The ERASE command does not write zeros to the existing blocks, so any old information on the disk is not truly destroyed; instead, it is hidden very, very well, just as if all of the files and folders on the disk had been deleted.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318285}\hich\af4\dbch\af4\loch\f4 EX\hich\af4\dbch\af4\loch\f4 EC{\*\bkmkend _Toc495318285}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EXEC\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language stamp}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This language command sets the shell default language to the EXEC command language.  When you type the name of a file that has the EXEC language stamp, the \hich\af4\dbch\af4\loch\f4 shell executes each line of the file as a shell command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318286}\hich\af4\dbch\af4\loch\f4 EXECUTE{\*\bkmkend _Toc495318286}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EXECUTE }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 paramlist}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell commands\:parameters}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXECUTE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal comma\hich\af4\dbch\af4\loch\f4 nd executes an EXEC file.  If this command is executed from the ORCA Shell command line, then the variables and aliases defined in the EXEC file are treated as if they were defined on the command line.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name of an EXEC fil\hich\af4\dbch\af4\loch\f4 e.  This file name cannot include wildcard characters.\par \par }{\i \hich\af4\dbch\af4\loch\f4 paramlist}{\tab \hich\af4\dbch\af4\loch\f4 The list of parameters being sent to the EXEC file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318287}\hich\af4\dbch\af4\loch\f4 EXISTS{\*\bkmkend _Toc495318287}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EXISTS }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXISTS command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command checks to see if a file exists.  If the file exi\hich\af4\dbch\af4\loch\f4 sts, the \{Status\} shell variable is set to 1; if the file does not exist, the \{Status\} shell variable is set to 0.  Several disk related errors can occur, so be sure to check specifically for either a 0 or 1 value.  When using this command in an EXEC file\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  keep in mind that a non-zero value for the \{Status\} variable will cause an EXEC file to abort unless the \{Exit\} shell variable has been cleared with an UNSET EXIT command.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name of a file.  More than one file can be check\hich\af4\dbch\af4\loch\f4 ed at the same time by specifying multiple path names.  In this case, the result is zero only if each and every file exists.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318288}\hich\af4\dbch\af4\loch\f4 EXIT{\*\bkmkend _Toc495318288}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EXIT [}{\i \hich\af2\dbch\af4\loch\f2 number}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\tx3150\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\tx3150\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error reporting\:shell}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\tx3150\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Status\} shell variable}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\tx3150\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXIT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command terminates ex\hich\af4\dbch\af4\loch\f4 ecution of an EXEC file.  If }{\i \hich\af4\dbch\af4\loch\f4 number}{\hich\af4\dbch\af4\loch\f4  is omitted, the \{Status\} variable will be set to 0, indicating a successful completion.  If }{\i \hich\af4\dbch\af4\loch\f4 number}{\hich\af4\dbch\af4\loch\f4  is coded, the \{Status\} variable will be set to the number.  This allows returning error numbers or condition codes to oth\hich\af4\dbch\af4\loch\f4 er EXEC files that may call the one this statement is included in.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 number}{\tab \hich\af4\dbch\af4\loch\f4 Exit error code.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318289}\hich\af4\dbch\af4\loch\f4 EXPORT{\*\bkmkend _Toc495318289}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EXPORT [}{\i \hich\af2\dbch\af4\loch\f2 variable1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 variable2}{\hich\af2\dbch\af4\loch\f2  ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:scope}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOGIN file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXPORT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command makes the\hich\af4\dbch\af4\loch\f4  specified variable available to EXEC files called by the current EXEC file.  When used in the LOGIN file, the variable becomes available at the command level, and in all EXEC files executed from the command level.  More than one variable may be exported \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ith a single command by separating the variable names with spaces.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 variable}{\hich\af4\dbch\af4\loch\f4 n\tab Names of the variables to export.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318290}\hich\af4\dbch\af4\loch\f4 EXPRESS{\*\bkmkend _Toc495318290}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EXPRESS [-P] }{\i \hich\af2\dbch\af4\loch\f2 infile}{\hich\af2\dbch\af4\loch\f2  -O }{\i \hich\af2\dbch\af4\loch\f2 outfile}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXPRESS command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The external command EXPRESS reformats an Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  load file so that it can \hich\af4\dbch\af4\loch\f4 be loaded by the ExpressLoad loader that comes with Apple's system disk, starting with version 5.0 of the system disk.  When loaded with ExpressLoad, the file will load much faster than it would load using the standard loader; however, files reformatted f\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 r use with ExpressLoad can still be loaded by the System Loader.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab If you specify this option, EXPRESS displays progress information.  If you omit it, progress information is not displayed.\par \par }{\i \hich\af4\dbch\af4\loch\f4 infile}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name of a load file.\par \par \hich\af4\dbch\af4\loch\f4 -O }{\i \hich\af4\dbch\af4\loch\f4 outfil\hich\af4\dbch\af4\loch\f4 e}{\tab \hich\af4\dbch\af4\loch\f4 This is the full or partial path name of the file to write.  Unlike many commands, this output file is a required parameter.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ExpressLoad}}}{\hich\af4\dbch\af4\loch\f4 Since the linker that comes with ORCA can automatically generate a file that is expressed, this utility is g\hich\af4\dbch\af4\loch\f4 enerally only used to reformat executable programs you obtain through other sources.\par \hich\af4\dbch\af4\loch\f4 EXPRESS only accepts version 2.0 OMF files as input.  You can check the version number of the OMF file using DUMPOBJ, and convert OMF 1.0 files to OMF 2.0 using COMPACT.\par \hich\af4\dbch\af4\loch\f4 E\hich\af4\dbch\af4\loch\f4 xpressLoad does not support multiple load files; therefore, you cannot use Express with any program that references segments in a run-time library.\par \hich\af4\dbch\af4\loch\f4 The following system loader calls are not supported by ExpressLoad:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 GetLoadSegInfo ($0F)  The internal da\hich\af4\dbch\af4\loch\f4 ta structures of ExpressLoad are not the same as those of the System Loader.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 LoadSegNum ($0B)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by\hich\af4\dbch\af4\loch\f4  the System Loader.  Use the LoadSegName function instead.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 UnloadSegNum ($0C)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by the System Load\hich\af4\dbch\af4\loch\f4 er.  Use the UnloadSeg ($0E) function instead.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318291}\hich\af4\dbch\af4\loch\f4 FILETYPE{\*\bkmkend _Toc495318291}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FILETYPE [-P] }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 filetype}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 auxtype}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 auxiliary file type}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types\:auxtype}{\txe see auxiliary file type}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 FILETYPE command\bxe }}{\hich\af4\dbch\af4\loch\f4 This internal command chang\hich\af4\dbch\af4\loch\f4 es the GS/OS file type, and optionally the auxiliary file type, of a file.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path \hich\af4\dbch\af4\loch\f4 name (including the file name) of the file whose file type you wish to change.\par \par }{\i \hich\af4\dbch\af4\loch\f4 filetype}{\tab \hich\af4\dbch\af4\loch\f4 The GS/OS file type to which you want to change the file.  Use one of the following three formats for }{\i \hich\af4\dbch\af4\loch\f4 filetype}{\hich\af4\dbch\af4\loch\f4 :\par }\pard \s16\qj\fi-360\li2160\sl223\slmult1\widctlpar\adjustright {\par \bullet \tab \hich\af4\dbch\af4\loch\f4 A decimal number 0-255.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 A hexadecimal number $00-\hich\af4\dbch\af4\loch\f4 $FF.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 The three-letter abbreviation for the file type used in disk directories; for example, S16, OBJ, EXE.  A partial list of GS/OS file types is shown in Table 8.13.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 auxtype}{\tab \hich\af4\dbch\af4\loch\f4 The GS/OS auxiliary file type to which you want to change the file.  Use one \hich\af4\dbch\af4\loch\f4 of the following two formats for auxtype:\par \par }\pard \s16\qj\fi-360\li2160\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 A decimal number 0-65535.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 A hexadecimal number $0000-$FFFF.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CATALOG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ENABLE command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file access flags}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ProDOS 8}}}{\hich\af4\dbch\af4\loch\f4 You can change the file type of any file with the FILETYP\hich\af4\dbch\af4\loch\f4 E command; ORCA does not check to make sure that the format of the file is appropriate.  However, the GS/OS call used by the FILETYPE command may disable some of the access attributes of the file.  Use the CATALOG command to check the file type and access\hich\af4\dbch\af4\loch\f4 -\hich\af4\dbch\af4\loch\f4 attribute settings of the file; use the ENABLE command to reenable any attributes that are disabled by GS/OS.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 AuxType\} shell variable}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 KeepType\} shell variable}}}{\hich\af4\dbch\af4\loch\f4 The linker can automatically set the file type and auxiliary file type of a pro\hich\af4\dbch\af4\loch\f4 gram.\par \par }\pard\plain \s31\qj\li360\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1260\tx1980\tx3420\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Decimal\tab Hex\tab Abbreviation\tab File Type\par }\pard\plain \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\tx1260\tx1980\tx3420\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1260\tx1980\tx3420\adjustright {\hich\af4\dbch\af4\loch\f4 001\tab $01\tab BAD\tab Bad blocks file\par \hich\af4\dbch\af4\loch\f4 002\tab $02\tab PCD\tab Pascal code file (SOS)\par \hich\af4\dbch\af4\loch\f4 003\tab $03\tab PTX\tab Pascal text file (SOS)\par \hich\af4\dbch\af4\loch\f4 004\tab $04\tab TXT\tab ASCII text file\par \hich\af4\dbch\af4\loch\f4 005\tab $05\tab PDA\tab Pascal data file (SOS)\par \hich\af4\dbch\af4\loch\f4 006\tab $06\tab BIN\tab ProDOS 8 binary load\par \hich\af4\dbch\af4\loch\f4 007\tab $07\tab FNT\tab Font fi\hich\af4\dbch\af4\loch\f4 le (SOS)\par \hich\af4\dbch\af4\loch\f4 008\tab $08\tab FOT\tab Graphics screen file\par \hich\af4\dbch\af4\loch\f4 009\tab $09\tab BA3\tab Business BASIC program file (SOS)\par \hich\af4\dbch\af4\loch\f4 010\tab $0A\tab DA3\tab Business BASIC data file (SOS)\par \hich\af4\dbch\af4\loch\f4 011\tab $0B\tab WPF\tab Word processor file (SOS)\par \hich\af4\dbch\af4\loch\f4 012\tab $0C\tab SOS\tab SOS system file (SOS)\par \hich\af4\dbch\af4\loch\f4 015\tab $0F\tab DIR\tab Directory\par \hich\af4\dbch\af4\loch\f4 016\tab $10\tab RPD\tab RPS data file (SOS)\par \hich\af4\dbch\af4\loch\f4 017\tab $11\tab RPI\tab RPS index file (SOS)\par \hich\af4\dbch\af4\loch\f4 176\tab $B0\tab SRC\tab Source\par \hich\af4\dbch\af4\loch\f4 177\tab $B1\tab OBJ\tab Object\par \hich\af4\dbch\af4\loch\f4 178\tab $B2\tab LIB\tab Library\par \hich\af4\dbch\af4\loch\f4 179\tab $B3\tab S16\tab GS/OS system file\par \hich\af4\dbch\af4\loch\f4 180\tab $B4\tab RTL\tab Run-time library\par \hich\af4\dbch\af4\loch\f4 181\tab $B5\tab EXE\tab Shell load file\par \hich\af4\dbch\af4\loch\f4 182\tab $B6\tab STR\tab  load file\par \hich\af4\dbch\af4\loch\f4 184\tab $B8\tab NDA\tab New desk accessory\par \hich\af4\dbch\af4\loch\f4 185\tab $B9\tab CDA\tab Classic des\hich\af4\dbch\af4\loch\f4 k accessory\par \hich\af4\dbch\af4\loch\f4 186\tab $BA\tab TOL\tab Tool file\par \hich\af4\dbch\af4\loch\f4 200\tab $C8\tab FNT\tab Font file\par \hich\af4\dbch\af4\loch\f4 226\tab $E2\tab DTS\tab Defile RAM tool patch\par \hich\af4\dbch\af4\loch\f4 240\tab $F0\tab CMD\tab ProDOS CI added command file\par \hich\af4\dbch\af4\loch\f4 249\tab $F9\tab P16\tab ProDOS 16 file\par \hich\af4\dbch\af4\loch\f4 252\tab $FC\tab BAS\tab BASIC file\par \hich\af4\dbch\af4\loch\f4 253\tab $FD\tab VAR\tab EDASM file\par \hich\af4\dbch\af4\loch\f4 254\tab $FE\tab REL\tab REL file\par \hich\af4\dbch\af4\loch\f4 255\tab $FF\tab SYS\tab ProDOS 8 system loa\hich\af4\dbch\af4\loch\f4 d file\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 8.13.  A Partial List of GS/OS File Types\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318292}\hich\af4\dbch\af4\loch\f4 FOR{\*\bkmkend _Toc495318292}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FOR }{\i \hich\af2\dbch\af4\loch\f2 variable}{\hich\af2\dbch\af4\loch\f2  [IN }{\i \hich\af2\dbch\af4\loch\f2 value1}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 value2}{\hich\af2\dbch\af4\loch\f2  ... ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 IN clause of FOR command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files\:parameter passing}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FOR command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command, together with the END statement, creates a loop that\hich\af4\dbch\af4\loch\f4  is executed once for each parameter value listed.  Each of the parameters is separated from the others by at least on space.  To include spaces in a parameter, enclose it in quote marks.  For example, the EXEC file\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FOR I IN GORP STUFF "FOO BAR"\par \hich\af2\dbch\af4\loch\f2    ECHO \{\hich\af2\dbch\af4\loch\f2 I\}\par \hich\af2\dbch\af4\loch\f2 END\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 programming examples}}}{\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ECHO command}}}{\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 END command}}}{\hich\af4\dbch\af4\loch\f4 would print\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 GORP\par \hich\af2\dbch\af4\loch\f2 STUFF\par \hich\af2\dbch\af4\loch\f2 FOO BAR\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 to the screen.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 If the IN keyword and the strings that follow are omitted, the FOR command loops over the command line inputs, skipping the comman\hich\af4\dbch\af4\loch\f4 d itself.  For example, the EXEC file named EXECFILE\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FOR I\par \hich\af2\dbch\af4\loch\f2    ECHO \{I\}\par \hich\af2\dbch\af4\loch\f2 END\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would give the same results as the previous example if you executed it with the command\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 EXECFILE GORP STUFF "FOO BAR"\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318293}\hich\af4\dbch\af4\loch\f4 HELP{\*\bkmkend _Toc495318293}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 HELP [}{\i \hich\af2\dbch\af4\loch\f2 commandname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 commandname2}{\hich\af2\dbch\af4\loch\f2  ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command ta\hich\af4\dbch\af4\loch\f4 ble}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Utilities prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HELP command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command provides on-line help for all the commands in the command table provided with the ORCA development environment.  If you omit commandname, then a list of all the commands in the co\hich\af4\dbch\af4\loch\f4 mmand table are listed on the screen.\par \par }\pard \s16\qj\fi-1080\li1800\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 commandname}{\hich\af4\dbch\af4\loch\f4  \tab The name of the ORCA shell command about which you want information.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 When you specify }{\i \hich\af4\dbch\af4\loch\f4 commandname}{\hich\af4\dbch\af4\loch\f4 , the shell looks for a text file with the specified name in the HELP subdirectory in the UTILITIES prefix\hich\af4\dbch\af4\loch\f4  (prefix 17).  If it finds such a file, the shell prints the contents of the file on the screen.  Help files contain information about the purpose and use of commands, and show the command syntax in the same format as used in this manual.\par \hich\af4\dbch\af4\loch\f4 If you add comman\hich\af4\dbch\af4\loch\f4 ds to the command table, or change the name of a command, you can add, copy, or rename a file in the HELP subdirectory to provide information about the new command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318294}\hich\af4\dbch\af4\loch\f4 HISTORY{\*\bkmkend _Toc495318294}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 HISTORY\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command list}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HISTORY commands\bxe }}}{\hich\af4\dbch\af4\loch\f4 This co\hich\af4\dbch\af4\loch\f4 mmand lists the last twenty commands entered in the command line editor.  Commands executed in EXEC files are not listed.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318295}\hich\af4\dbch\af4\loch\f4 HOME{\*\bkmkend _Toc495318295}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 HOME\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HOME commands\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command sends a $0C character to the standard output device.  The output can be redirected to \hich\af4\dbch\af4\loch\f4 files, printers, or error output using standard output redirection techniques.\par \hich\af4\dbch\af4\loch\f4 When the $0C character is sent to the console output device, the screen is cleared and the cursor is moved to the top left corner of the screen.  When the $0C character is sent \hich\af4\dbch\af4\loch\f4 to most printers, the printer will skip to the top of the next page.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318296}\hich\af4\dbch\af4\loch\f4 IF{\*\bkmkend _Toc495318296}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 IF }{\i \hich\af2\dbch\af4\loch\f2 expression}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ELSE IF clause of IF command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ELSE clause of IF command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 END command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 expressions\:shell}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 IF command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command, together with the\hich\af4\dbch\af4\loch\f4  ELSE IF, ELSE, and END statements provides conditional branching in EXEC files.  The expression is evaluated.  If the resulting string is the character 0, the command interpreter skips to the next ELSE IF, ELSE or END statement, and does not execute the \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ommands in between.  If the string is anything but the character 0, the statements after the IF statement are executed.  In that case, if an ELSE or ELSE IF is encountered, the command skips to the END statement associated with the IF.\par \hich\af4\dbch\af4\loch\f4 The ELSE statement i\hich\af4\dbch\af4\loch\f4 s used to provide an alternate set of statements that will be executed if the main body of the IF is skipped due to an expression that evaluates to 0.  It must appear after all ELSE IF statements.\par \hich\af4\dbch\af4\loch\f4 ELSE IF is used to test a series of possibilities.  Each EL\hich\af4\dbch\af4\loch\f4 SE IF clause is followed by an expression.  If the expression evaluates to 0, the statements following the ELSE IF are skipped; if the expression evaluates to anything but 0, the statements after the ELSE IF are executed.\par \hich\af4\dbch\af4\loch\f4 As an example, the following code \hich\af4\dbch\af4\loch\f4 will translate an Arabic digit (contained in the variable \{I\}) into a Roman numeral.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 programming examples}}}{\hich\af2\dbch\af4\loch\f2 IF \{I\} == 1\par \hich\af2\dbch\af4\loch\f2    ECHO I\par \hich\af2\dbch\af4\loch\f2 ELSE IF \{I\} == 2\par \hich\af2\dbch\af4\loch\f2    ECHO II\par \hich\af2\dbch\af4\loch\f2 ELSE IF \{I\} == 3\par \hich\af2\dbch\af4\loch\f2    ECHO III\par \hich\af2\dbch\af4\loch\f2 ELSE IF \{I\} == 4\par \hich\af2\dbch\af4\loch\f2    ECHO IV\par \hich\af2\dbch\af4\loch\f2 ELSE IF \{I\} == 5\par \hich\af2\dbch\af4\loch\f2    ECHO V\par \hich\af2\dbch\af4\loch\f2 ELSE\par \hich\af2\dbch\af4\loch\f2   \hich\af2\dbch\af4\loch\f2  ECHO The number is too large for this routine.\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 END\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318297}\hich\af4\dbch\af4\loch\f4 INIT{\*\bkmkend _Toc495318297}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 INIT [-C] }{\i \hich\af2\dbch\af4\loch\f2 device}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 fst}{\hich\af2\dbch\af4\loch\f2 ] [}{\i \hich\af2\dbch\af4\loch\f2 name}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 formatting disks\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volume names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 INIT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This external command formats a disk as a GS/OS volume.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -C\tab Disable checking.  If the disk has b\hich\af4\dbch\af4\loch\f4 een previously initialized, the system will ask for permission (check) before starting initialization.  The default is to check.\par \par }{\i \hich\af4\dbch\af4\loch\f4 device}{\tab \hich\af4\dbch\af4\loch\f4 The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted al\hich\af4\dbch\af4\loch\f4 ready has a volume name, you can specify the volume name instead of a device name.\par \par }{\i \hich\af4\dbch\af4\loch\f4 fst}{\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file system translator}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FST}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ProDOS}}}{\hich\af4\dbch\af4\loch\f4 The file system translator number.  The default FST is 1 (ProDOS).\par \par }{\i \hich\af4\dbch\af4\loch\f4 name}{\tab \hich\af4\dbch\af4\loch\f4 The new volume name for the disk.  If\hich\af4\dbch\af4\loch\f4  you do not specify }{\i \hich\af4\dbch\af4\loch\f4 name}{\hich\af4\dbch\af4\loch\f4 , then the name :BLANK is used.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 ORCA recognizes the device type of the disk drive specified by }{\i \hich\af4\dbch\af4\loch\f4 device}{\hich\af4\dbch\af4\loch\f4 , and uses the appropriate format.  INIT works for all disk formats supported by GS/OS.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file system translator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FST}}}{\hich\af4\dbch\af4\loch\f4 GS/OS is capable of supporting a wide variety of physical disk formats and operating system file formats.  The term file system translator, or FST, has been adopted to refer to the various formats.  By default, when you initialize a disk, the INIT command\hich\af4\dbch\af4\loch\f4  uses the physical format and operating system format that has been in use by the ProDOS and GS/OS operating system since ProDOS was introduced for the Apple //e computer.  If you would like to use a different FST, you can specify the FST as a decimal num\hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 er.  Apple has defined a wide variety of numbers for use as FSTs, although there is no reason to expect that all of them will someday be implemented in GS/OS; some of the FST numbers are shown in Table 8.14, and a more complete list can be found in }{\ul \hich\af4\dbch\af4\loch\f4 Apple I\hich\af4\dbch\af4\loch\f4 I}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  GS/OS Reference, Volume 1}{\hich\af4\dbch\af4\loch\f4 .  Not all of these FSTs have been implemented in GS/OS as this manual goes to press.  Even if an FST has been implemented, not all FSTs can be used on all formats of floppy disks.  If you aren't sure if an FST is available, gi\hich\af4\dbch\af4\loch\f4 ve it a try \endash  if not, you will get an error message.\par \hich\af4\dbch\af4\loch\f4 INIT destroys any files on the disk being formatted.\par \par }\pard\plain \s31\qj\li2160\ri1440\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx3600\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s31\qj\li2160\ri1440\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file system translator}}}{\pard\plain \s31\qj\li2160\ri1440\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FST}}}{\hich\af4\dbch\af4\loch\f4 FST Number\tab File System\par }\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 1\tab ProDOS (Apple II, Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 )}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ProDOS}}}{\par \tab \hich\af4\dbch\af4\loch\f4    and SOS (Apple ///)}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SOS}}}{\par \hich\af4\dbch\af4\loch\f4 2\tab DOS 3.3}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DOS (Apple)}}}{\par \hich\af4\dbch\af4\loch\f4 3\tab DOS 3.2\par \hich\af4\dbch\af4\loch\f4 4\tab Apple II Pascal}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}}}{\par \hich\af4\dbch\af4\loch\f4 5\tab Macintosh MFS}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Macintosh}}}{\par \hich\af4\dbch\af4\loch\f4 6\tab Macintosh HFS\par \hich\af4\dbch\af4\loch\f4 7\tab Lisa}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Lisa}}}{\par \hich\af4\dbch\af4\loch\f4 8\tab Apple CP/M}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CPM}}}{\par \hich\af4\dbch\af4\loch\f4 10\tab MS/DOS}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 MS/DOS}}}{\par \hich\af4\dbch\af4\loch\f4 11\tab High Sierra}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 High Sierra}}}{\par \hich\af4\dbch\af4\loch\f4 13\tab AppleShare}{\pard\plain \s16\qj\li2160\ri1440\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 AppleShar\hich\af4\dbch\af4\loch\f4 e}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 8.14  FST Numbers\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318298}\hich\af4\dbch\af4\loch\f4 INPUT{\*\bkmkend _Toc495318298}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 INPUT }{\i \hich\af2\dbch\af4\loch\f2 variable}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 INPUT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command reads a line from standard input, placing all of the characters typed, up to but not including the carriage return that marks the end of the li\hich\af4\dbch\af4\loch\f4 ne, in the shell variable }{\i \hich\af4\dbch\af4\loch\f4 variable}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 variable}{\tab \hich\af4\dbch\af4\loch\f4 Shell variable in which to place the string read from standard in.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318299}\hich\af4\dbch\af4\loch\f4 LINK{\*\bkmkend _Toc495318299}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 LINK\tab [}{\ul \hich\af2\dbch\af4\loch\f2 +B}{\hich\af2\dbch\af4\loch\f2 |-B] [+C|}{\ul \hich\af2\dbch\af4\loch\f2 -C}{\hich\af2\dbch\af4\loch\f2 ] [+L|}{\ul \endash \hich\af2\dbch\af4\loch\f2 L}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [+S|}{\ul \endash \hich\af2\dbch\af4\loch\f2 S}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +X}{\hich\af2\dbch\af4\loch\f2 |-X] }{\i \hich\af2\dbch\af4\loch\f2 objectfile}{\hich\af2\dbch\af4\loch\f2  [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ]\par \hich\af2\dbch\af4\loch\f2 LINK\tab [}{\ul \hich\af2\dbch\af4\loch\f2 +B}{\hich\af2\dbch\af4\loch\f2 |-B] [+C|}{\ul \hich\af2\dbch\af4\loch\f2 -C}{\hich\af2\dbch\af4\loch\f2 ] [+L|}{\ul \endash \hich\af2\dbch\af4\loch\f2 L}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [+S|}{\ul \endash \hich\af2\dbch\af4\loch\f2 S}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +X}{\hich\af2\dbch\af4\loch\f2 |-X] }{\i \hich\af2\dbch\af4\loch\f2 object\hich\af2\dbch\af4\loch\f2 file1}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 objectfile2}{\hich\af2\dbch\af4\loch\f2   ... [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ] \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 load files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 load files}{\txe see also executable files}}}{\hich\af4\dbch\af4\loch\f4 ;}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link map}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object segment}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 symbol tables\:linker}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LINK command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal co\hich\af4\dbch\af4\loch\f4 mmand calls the ORCA linker to link object files to create a load file.  You can use this command to link object files created by assemblers or compilers, and to cause the linker to search library files.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright {\hich\af4\dbch\af4\loch\f4 +B|-B\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 bank relative programs}}}{\hich\af4\dbch\af4\loch\f4 The +B flag te\hich\af4\dbch\af4\loch\f4 lls the linker to create a bank relative program.  Each load segment in a bank relative program must be aligned to a 64K bank boundary by the loader.  When the current version of the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  loader loads a bank relative program, it also purges virtually\hich\af4\dbch\af4\loch\f4  all purgeable memory, which could slow down operations of programs like the ORCA shell, which allows several programs to stay in memory.  Bank relative programs take up less disk space than fully relocatable programs, and they load faster, since all two-\hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 yte relocation information can be resolved at link time, rather than creating relocation records for each relocatable address.\par \par \hich\af4\dbch\af4\loch\f4 +C|-C\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compaction}}}{\hich\af4\dbch\af4\loch\f4 Executable files are normally compacted, which means some relocation information is packed into a compr\hich\af4\dbch\af4\loch\f4 essed form.  Compacted files load faster and use less room on disk than uncompacted files.  To create an executable file that is not compacted, use the -C flag.\par \par \hich\af4\dbch\af4\loch\f4 +L|-L\tab If you specify +L, the linker generates a listing (called a link map) of the segments in\hich\af4\dbch\af4\loch\f4  the object file, including the starting address, the length in bytes (hexadecimal) of each segment, and the segment type.  If you specify -L, the link map is not produced.\par \par \hich\af4\dbch\af4\loch\f4 +P|-P\tab The linker normally prints a series of dots as subroutines are processed on \hich\af4\dbch\af4\loch\f4 pass one and two, followed by the length of the program and the number of executable segments in the program.  The -P flag can be used to suppress this progress information.\par \par \hich\af4\dbch\af4\loch\f4 +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all globa\hich\af4\dbch\af4\loch\f4 l references in the object file (called a symbol table).  If you specify -S, the symbol table is not produced.\par \par \hich\af4\dbch\af4\loch\f4 +X|-X\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 expressed files}}}{\hich\af4\dbch\af4\loch\f4 Executable files are normally expressed, which means they have an added header and some internal fields in the cod\hich\af4\dbch\af4\loch\f4 e image are expanded.  Expressed files load from disk faster than files that are not expressed, but they require more disk space.  You can tell the linker not to express a file by using the -X flag.\par \par }{\i \hich\af4\dbch\af4\loch\f4 objectfile}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name, minus file nam\hich\af4\dbch\af4\loch\f4 e extension, of the object files to be linked.  All files to be linked must have the same file name (except for extensions), and must be in the same subdirectory.  For example, the program TEST might consist of object files named TEST.ROOT, TEST.A, and TE\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 T.B, all located in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST for }{\i \hich\af4\dbch\af4\loch\f4 objectfile}{\hich\af4\dbch\af4\loch\f4 .\par \par }{\i \hich\af4\dbch\af4\loch\f4 objectfile1 objectfile2}{\hich\af4\dbch\af4\loch\f4 ,...  You can link several object files into one load file with a single LINK command.  Enclose in parentheses the full path\hich\af4\dbch\af4\loch\f4  names or partial path names, minus file name extensions, of all the object files to be included; separate the file names with spaces.  Either a .ROOT file or a .A file must be present.  For example, the program TEST might consist of object files named TE\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 T1.ROOT, TEST1.A, TEST1.B, TEST2.A, and TEST2.B, all in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST1 for }{\i \hich\af4\dbch\af4\loch\f4 objectfile}{\hich\af4\dbch\af4\loch\f4  and :ORCA:MYPROG:TEST2 for }{\i \hich\af4\dbch\af4\loch\f4 objectfile1}{\hich\af4\dbch\af4\loch\f4 .}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\par \tab \tab \hich\af4\dbch\af4\loch\f4 You can also use this command to specify one or more\hich\af4\dbch\af4\loch\f4  library files (GS/OS file type $B2) to be searched.  Any library files specified are searched in the order listed.  Only the segments needed to resolve references that haven\rquote t already been resolved are extracted from the standard library files.\par \par \hich\af4\dbch\af4\loch\f4 KEEP=}{\i \hich\af4\dbch\af4\loch\f4 outf\hich\af4\dbch\af4\loch\f4 ile}{\hich\af4\dbch\af4\loch\f4   }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 KEEP parameter}}}{\hich\af4\dbch\af4\loch\f4 Use this parameter to specify the path name or partial path name of the executable load file.\par \tab \tab \hich\af4\dbch\af4\loch\f4 If you do not use the KEEP parameter, then the link is performed, but the load file is not saved.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 LinkName\} shell variable}}}{\hich\af4\dbch\af4\loch\f4 If you do not include any parameters after the LINK command, you are prompted for an input file name, as ORCA prompts you for any required parameters.  However, since the output path name is not a required parameter, you are not prompted for it.  Conseque\hich\af4\dbch\af4\loch\f4 ntly, the link is performed, but the load file is not saved.  To save the results of a link, you }{\i \hich\af4\dbch\af4\loch\f4 must}{\hich\af4\dbch\af4\loch\f4  include the KEEP parameter in the command line or create default names using the \{LinkName\} variable.\par \hich\af4\dbch\af4\loch\f4 The linker can automatically set the file type and a\hich\af4\dbch\af4\loch\f4 uxiliary file type of the executable file it creates.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASML command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASMLG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPL command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 CMPLG command}}}{\hich\af4\dbch\af4\loch\f4 To automatically link a program after assembling or compiling it, use one of the following commands instead of the L\hich\af4\dbch\af4\loch\f4 INK command:  ASML, ASMLG, CMPL, CMPLG.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318300}\hich\af4\dbch\af4\loch\f4 LINKER{\*\bkmkend _Toc495318300}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 LINKER\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker\:script files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 script files\:linker}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LINKER command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This language command sets the shell default language for linker script files.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318301}\hich\af4\dbch\af4\loch\f4 LOOP{\*\bkmkend _Toc495318301}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 LOOP\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 END command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC \hich\af4\dbch\af4\loch\f4 files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 BREAK command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Status\} shell variable}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOOP command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command together with the END statement defines a loop that repeats continuously until a BREAK command is encountered.  This statement is used primarily in EXEC file\hich\af4\dbch\af4\loch\f4 s.  For example, if you have written a program called TIMER that returns a \{Status\} variable value of 1 when a particular time has been reached, and 65535 for an error, you could cause the program SECURITY.CHECK to be executed each time TIMER returned 1, \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 nd exit the EXEC file when TIMER returned 65535.  The EXEC file would be}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNSET command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Exit\} shell variable}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SET command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 IF command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ELSE IF clause of IF command}}}{\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 programming examples}}}{\hich\af2\dbch\af4\loch\f2 UNSET EXIT\par \hich\af2\dbch\af4\loch\f2 LOOP\par \hich\af2\dbch\af4\loch\f2    TIMER\par \hich\af2\dbch\af4\loch\f2    SET STAT \{STATUS\}\par \hich\af2\dbch\af4\loch\f2    IF \{STAT\} == 1\par \hich\af2\dbch\af4\loch\f2       SECURITY.CHECK\par \hich\af2\dbch\af4\loch\f2    ELSE IF \{STAT\} == 65535\par \hich\af2\dbch\af4\loch\f2       BREAK\par \hich\af2\dbch\af4\loch\f2    END\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 END\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318302}\hich\af4\dbch\af4\loch\f4 MAKELIB{\*\bkmkend _Toc495318302}\par }\pard\plain \s27\fi-1080\li1080\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 MAKELIB\tab [-F] [-D] [-P] }{\i \hich\af2\dbch\af4\loch\f2 libfile}{\hich\af2\dbch\af4\loch\f2   [ + | - | ^  }{\i \hich\af2\dbch\af4\loch\f2 objectfile1}{\hich\af2\dbch\af4\loch\f2   \par }\pard \s27\fi-1080\li1080\sa200\sl223\slmult1\keepn\widctlpar\adjustright {\tab \hich\af2\dbch\af4\loch\f2 + | - | ^ }{\i \hich\af2\dbch\af4\loch\f2 objectfile2}{\hich\af2\dbch\af4\loch\f2  ...]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 MAKELIB utility\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4 This \hich\af4\dbch\af4\loch\f4 external command creates a library file.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -F\tab If you specify -F, a list of the file names included in libfile is produced.  If you leave this option out, no file name list is produced.\par \par \hich\af4\dbch\af4\loch\f4 -D\tab If you specify -D, the dictionary of symbols in the library is liste\hich\af4\dbch\af4\loch\f4 d.  Each symbol listed is a global symbol occurring in the library file.  If you leave this option out, no dictionary is produced.\par \par \hich\af4\dbch\af4\loch\f4 -P\tab Suppresses the copyright and progress information normally printed by the MAKELIB utility.\par \par }{\i \hich\af4\dbch\af4\loch\f4 libfile}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or\hich\af4\dbch\af4\loch\f4  partial path name (including the file name) of the library file to be created, read, or modified.\par \par \hich\af4\dbch\af4\loch\f4 +}{\i \hich\af4\dbch\af4\loch\f4 objectfilen}{\hich\af4\dbch\af4\loch\f4   The full path name or partial path name (including the file name) of an object file to be added to the library.  You can specify as many objec\hich\af4\dbch\af4\loch\f4 t files to add as you wish.  Separate object file names with spaces.\par \par \hich\af4\dbch\af4\loch\f4 -}{\i \hich\af4\dbch\af4\loch\f4 objectfilen}{\hich\af4\dbch\af4\loch\f4   The file name of a component file to be removed from the library.  This parameter is a file name only, not a path name.  You can specify as many component files to remove a\hich\af4\dbch\af4\loch\f4 s you wish.  Separate file names with spaces.\par \par \hich\af4\dbch\af4\loch\f4 ^}{\i \hich\af4\dbch\af4\loch\f4 objectfilen}{\hich\af4\dbch\af4\loch\f4   }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object modules}}}{\hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of a component file to be removed from the library  and written out as an object file.  If you include a p\hich\af4\dbch\af4\loch\f4 refix in this path name, the object file is written to that prefix.  You can specify as many files to be written out as object files as you wish.  Separate file names with spaces.}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 An ORCA library file (GS/OS file type $B2) consists of o\hich\af4\dbch\af4\loch\f4 ne or more component files, each containing one or more segments.  Each library file contains a library-dictionary segment that the linker uses to find the segments it needs.\par \hich\af4\dbch\af4\loch\f4 MAKELIB creates a library file from any number of object files.  In addition to i\hich\af4\dbch\af4\loch\f4 ndicating where in the library file each segment is located, the library-dictionary segment indicates which object file each segment came from.  The MAKELIB utility can use that information to remove any component files you specify from a library file; it\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 can even recreate the original object file by extracting the segments that made up that file and writing them out as an object file.  Use the (-F) and (-D) parameters to list the contents of an existing library file.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object module format}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 code\hich\af4\dbch\af4\loch\f4  segment}}}{\hich\af4\dbch\af4\loch\f4 The MAKELIB command is for use only with ORCA object-module-format (OMF) library files used by the linker.  For information on the creation and use of libraries used by language compilers, consult the manuals that came with those compilers.\par \hich\af4\dbch\af4\loch\f4 MAKE\hich\af4\dbch\af4\loch\f4 LIB accepts either OMF 1 or OMF 2 files as input, but always produces OMF 2 files as output.  MAKELIB literally converts OMF 1 files to OMF 2 files before placing them in the library.  Among other things, this gives you one way to convert an OMF 1 file to\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 an OMF 2 file:  first create a library with the OMF 1 file, then extract the file from the library.  The extracted file will be in OMF 2 format.\par \hich\af4\dbch\af4\loch\f4 To create an OMF library file using the ORCA/C compiler, use the following procedure:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab Write one or more sou\hich\af4\dbch\af4\loch\f4 rce files in the normal way, but don't use main as one of the functions.\par \par \hich\af4\dbch\af4\loch\f4 2.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 KEEP parameter}}}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASSEMBLE command}}}{\hich\af4\dbch\af4\loch\f4 Compile the programs.  Each source file is saved as two object files, one with the extension .ROOT, and one with the extension .A.\par \par \hich\af4\dbch\af4\loch\f4 3.\tab Run the MAKELIB utility, specifying each object file to be included in the library file, but ignoring any .ROOT files.  For example, if you compiled two source files, creating the object files LIBOBJ1.ROOT, LIBOBJ1.A, LIBOBJ2.ROOT, LIBOBJ2.A, and your \hich\af4\dbch\af4\loch\f4 library file is named LIBFILE, then your command line should be as follows:\par \par }\pard\plain \s26\qj\fi360\li720\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 MAKELIB LIBFILE +LIBOBJ1.A +LIBOBJ2.A\par }\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 4.\tab Place the new library file in the LIBRARIES: subdirectory.  (You can accomplish this in step 3 by specifying 13:LIBFILE for the library f\hich\af4\dbch\af4\loch\f4 ile, or you can use the MOVE command after the file is created.)}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318303}\hich\af4\dbch\af4\loch\f4 MOVE{\*\bkmkend _Toc495318303}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 MOVE [-C] [-P] }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 pathname2}{\hich\af2\dbch\af4\loch\f2 ]\par \hich\af2\dbch\af4\loch\f2 MOVE [-C] [-P] }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 directory2}{\hich\af2\dbch\af4\loch\f2 ]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 MOVE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command moves a file from one directory to another; it \hich\af4\dbch\af4\loch\f4 can also be used to rename a file.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -C\tab If you specify -C before the first file name, then MOVE does not prompt you if the target file name (filename2) already exists.\par \par \hich\af4\dbch\af4\loch\f4 -P\tab }{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\hich\af4\dbch\af4\loch\f4 The MOVE command prints progress information showing what file is b\hich\af4\dbch\af4\loch\f4 eing moved as it works through a list of files.  The -P flag suppresses this progress information.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) of the file to be moved.  Wildcard characters may be used in this file name.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pa\hich\af4\dbch\af4\loch\f4 thname2}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name of the directory you wish to move the file to.  If you specify a target file name, the file is renamed when it is moved.  Wildcard characters can }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  be used in this path name.  If the prefix of pathname2 is \hich\af4\dbch\af4\loch\f4 the same as that of }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4 , then the file is renamed only.\par \par }{\i \hich\af4\dbch\af4\loch\f4 directory2}{\tab \hich\af4\dbch\af4\loch\f4 The path name or partial path name of the directory you wish to move the file to.  If you do not include a file name in the target path name, then the file is not renamed.  Wildcard \hich\af4\dbch\af4\loch\f4 characters can }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  be used in this path name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4  and the target directory are on the same volume, then ORCA calls GS/OS to move the directory entry (and rename the file, if a target file name is specified).  If the source and destination are on \hich\af4\dbch\af4\loch\f4 different volumes, then the file is copied; if the copy is successful, then the original file is deleted.  If the file specified in }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4  already exists and you complete the move operation, then the old file named }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4  is deleted and replaced by t\hich\af4\dbch\af4\loch\f4 he file that was moved.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318304}\hich\af4\dbch\af4\loch\f4 NEWER{\*\bkmkend _Toc495318304}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 NEWER }{\i \hich\af2\dbch\af4\loch\f2 pathname1 pathname2}{\hich\af2\dbch\af4\loch\f2 ...\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 modification date}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 NEWER command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command checks to see if any file in a list of files has been modified since the first file was modified.  If the first file is newe\hich\af4\dbch\af4\loch\f4 r than, or as new as, all of the other files, the \{Status\} shell variable is set to 0.  If any of the files after the first file is newer than the first file, the \{Status\} shell variable is set to 1.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 pathname1}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name of the file to \hich\af4\dbch\af4\loch\f4 be checked.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4 ...\tab The full or partial path name of the files to compare with the first file.  If any of the files in this list have a modification date after }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4 , \{Status\} is set to 1.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 This command is most commonly used in script files to cr\hich\af4\dbch\af4\loch\f4 eate sophisticated scripts that automatically decide when one of several files in a project need to be recompiled.\par \hich\af4\dbch\af4\loch\f4 The GS/OS operating system records the modification date to the nearest minute.  It is quite possible, unfortunately, to make changes to more\hich\af4\dbch\af4\loch\f4  than one file, then attempt to rebuild a file, in less than one minute.  In this case, the command may miss a file that has been changed.  See the TOUCH command for one way to update the time stamp.\par \hich\af4\dbch\af4\loch\f4 Wildcards may be used in any path name.  If the first fi\hich\af4\dbch\af4\loch\f4 le is specified with a wildcard, only the first matching file is checked.  If wildcards are used in the remaining names, each matching file is checked against the first file.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Status\} shell variable}}}{\hich\af4\dbch\af4\loch\f4 It is possible for the NEWER command to return a \hich\af4\dbch\af4\loch\f4 value other than 0 or 1; this would happen, for example, if a disk is damaged or if one of the files does not exist at all.  For this reason, your script files should check for specific values of 0 or 1.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \{\hich\af4\dbch\af4\loch\f4 Exit\} shell variable}}}{\hich\af4\dbch\af4\loch\f4 A status variable othe\hich\af4\dbch\af4\loch\f4 r than zero generally causes a script file to exit.  To prevent this, be sure and unset the exit shell variable.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318305}\hich\af4\dbch\af4\loch\f4 PASCAL{\*\bkmkend _Toc495318305}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 PASCAL\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PASCAL command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This language command sets the shell default language to PASCAL, the language stamp used by ORCA/Pascal\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 While you can set the language and create Pascal files, you will not be able to compile them unless you purchase the ORCA/Pascal compiler and install it with ORCA/C.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318306}\hich\af4\dbch\af4\loch\f4 PREFIX{\*\bkmkend _Toc495318306}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 PREFIX [-C] [}{\i \hich\af2\dbch\af4\loch\f2 n}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 directory}{\hich\af2\dbch\af4\loch\f2 [:]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard prefixes}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PREFIX command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command sets any of the eight standard GS/OS prefixes to a new subdirectory.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -C\tab The PREFIX command does not normally allow you to set a prefix to a path name that does not exist or is not currently available.  The -C flag overrides this chec\hich\af4\dbch\af4\loch\f4 k, allowing you to set the prefix to any valid GS/OS path name.\par \par }{\i \hich\af4\dbch\af4\loch\f4 n}{\tab \hich\af4\dbch\af4\loch\f4 A number from 0 to 31, indicating the prefix to be changed.  If this parameter is omitted, 8 is used.  This number must be preceded by one or more spaces.\par \par }{\i \hich\af4\dbch\af4\loch\f4 directory}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial pat\hich\af4\dbch\af4\loch\f4 h name of the subdirectory to be assigned to prefix }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 .  If a prefix number is used for this parameter, you must follow the prefix number with the : character.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Prefix 8 is the current prefix; all shell commands that accept a path name use prefix 8 as the d\hich\af4\dbch\af4\loch\f4 efault prefix if you do not include a colon (:) at the beginning of the path name.  Prefixes 9 through 17 are used for specific purposes by ORCA, GS/OS and the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  tools; see the section \ldblquote Standard Prefixes\rdblquote  in this chapter for details.  The default \hich\af4\dbch\af4\loch\f4 settings for the prefixes are shown in Table 8.3.  Prefixes 0 to 7 are obsolete ProDOS prefixes, and should no longer be used.  Use the SHOW PREFIX command to find out what the prefixes are currently set to.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SHOW command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOGIN file}}}{\hich\af4\dbch\af4\loch\f4 The pref\hich\af4\dbch\af4\loch\f4 ix assignments are reset to the defaults each time ORCA is booted.  To use a custom set of prefix assignments every time you start ORCA, put the PREFIX commands in the LOGIN file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318307}\hich\af4\dbch\af4\loch\f4 PRODOS{\*\bkmkend _Toc495318307}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 PRODOS\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PRODOS language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASCII character set}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text\hich\af4\dbch\af4\loch\f4  files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PRODOS command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This language command sets the ORCA shell default language to GS/OS text.  GS/OS text files are standard ASCII files with GS/OS file type $04; these files are recognized by GS/OS as text files.  ORC\hich\af4\dbch\af4\loch\f4 A TEXT files, on the other hand, are standard ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The ORCA language type is not used by GS/OS.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318308}\hich\af4\dbch\af4\loch\f4 QUIT{\*\bkmkend _Toc495318308}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 QUIT\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 QUIT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command terminates the ORCA program and retu\hich\af4\dbch\af4\loch\f4 rns control to GS/OS.  If you called ORCA from another program, GS/OS returns you to that program; if not, GS/OS prompts you for the next program to load.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318309}\hich\af4\dbch\af4\loch\f4 RENAME{\*\bkmkend _Toc495318309}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 RENAME }{\i \hich\af2\dbch\af4\loch\f2 pathname1 pathname2}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RENAME command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command changes the name of\hich\af4\dbch\af4\loch\f4  a file.  You can also use this command to move a file from one subdirectory to another on the same volume.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4  \tab The full path name or partial path name (including the file name) of the file to be renamed or moved.  If you use wildcard characters in\hich\af4\dbch\af4\loch\f4  the file name, the first file name matched is used.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) to which pathname1 is to be changed or moved.  You cannot use wildcard characters in the file name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If you specify a differen\hich\af4\dbch\af4\loch\f4 t subdirectory for }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4  than for }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4 , then the file is moved to the new directory and given the file name specified in }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 The subdirectories specified in }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4  and }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4  must be on the same volume.  To rename a file and move it t\hich\af4\dbch\af4\loch\f4 o another volume, use the MOVE command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318310}\hich\af4\dbch\af4\loch\f4 RESEQUAL{\*\bkmkend _Toc495318310}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 RESEQUAL [-P] }{\i \hich\af2\dbch\af4\loch\f2 pathname1 pathname2}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resources}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RESEQUAL command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The external command RESEQUAL compares the resources in two files and writes their differences to standard out.\par \hich\af4\dbch\af4\loch\f4 RESEQUAL checks\hich\af4\dbch\af4\loch\f4  that each file contains resources of the same type and identifier as the other file; that the size of the resources with the same type and identifier are the same; and that their contents are the same.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab If this flag is used, a copyright message and pro\hich\af4\dbch\af4\loch\f4 gress information is written to error out.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name of one of the two files to compare.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\tab \hich\af4\dbch\af4\loch\f4 The full or partial path name of one of the two files to compare.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If a mismatch is found, the mismatch and the subsequent 15\hich\af4\dbch\af4\loch\f4  bytes are written to standard out.  RESEQUAL then continues the comparison, starting with the byte following the last byte displayed.  The following messages appear when reporting differences:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 In 1 but not in 2\par \par \tab \hich\af4\dbch\af4\loch\f4 The resource type and ID are displayed.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 In 2 but not in 1\par \par \tab \hich\af4\dbch\af4\loch\f4 The resource type and ID are displayed.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 Resources are different sizes\par \par \tab \hich\af4\dbch\af4\loch\f4 The resource type, resource ID, and the size of the resource in each file are displayed.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 Resources have different contents\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\tab \hich\af4\dbch\af4\loch\f4 This message is followed by t\hich\af4\dbch\af4\loch\f4 he resource type and ID, then by the offset in the resource, and 16 bytes of the resource, starting at the byte that differed.  If more than ten differences are found in the same resource, the rest of the resource is skipped and processing continues with \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he next resource.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318311}\hich\af4\dbch\af4\loch\f4 REZ{\*\bkmkend _Toc495318311}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 REZ\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resources}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 REZ command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This language command sets the default language to Rez.  The resource compiler is described in Chapter 10.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318312}\hich\af4\dbch\af4\loch\f4 RUN{\*\bkmkend _Toc495318312}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 RUN\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\ul \hich\af2\dbch\af4\loch\f2 -L}{\hich\af2\dbch\af4\loch\f2 ] [+O|}{\ul \hich\af2\dbch\af4\loch\f2 -O}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +P}{\hich\af2\dbch\af4\loch\f2 |-P] [-R] [+S|}{\ul \hich\af2\dbch\af4\loch\f2 -S}{\hich\af2\dbch\af4\loch\f2 ] [+T|}{\ul \hich\af2\dbch\af4\loch\f2 -T}{\hich\af2\dbch\af4\loch\f2 ] \hich\af2\dbch\af4\loch\f2 [+W|}{\ul \hich\af2\dbch\af4\loch\f2 -W}{\hich\af2\dbch\af4\loch\f2 ] }{\i \hich\af2\dbch\af4\loch\f2 sourcefile}{\hich\af2\dbch\af4\loch\f2   [KEEP=}{\i \hich\af2\dbch\af4\loch\f2 outfile}{\hich\af2\dbch\af4\loch\f2 ] [NAMES=(}{\i \hich\af2\dbch\af4\loch\f2 seg1}{\hich\af2\dbch\af4\loch\f2 [ }{\i \hich\af2\dbch\af4\loch\f2 seg2}{\hich\af2\dbch\af4\loch\f2 [ ...]])] [}{\i \hich\af2\dbch\af4\loch\f2 language1}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) [}{\i \hich\af2\dbch\af4\loch\f2 language2}{\hich\af2\dbch\af4\loch\f2 =(}{\i \hich\af2\dbch\af4\loch\f2 option}{\hich\af2\dbch\af4\loch\f2  ...) ...]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASMLG command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASML command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RUN command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command compiles (or assembles), links, and runs a source f\hich\af4\dbch\af4\loch\f4 ile.  Its function is identical to that of the ASMLG command.  See the ASML command for a description of the parameters.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318313}\hich\af4\dbch\af4\loch\f4 SET{\*\bkmkend _Toc495318313}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 SET [}{\i \hich\af2\dbch\af4\loch\f2 variable}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 value}{\hich\af2\dbch\af4\loch\f2 ]]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:assigning values to}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SET command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command allows you to assign a value to a variable name.  You can also use this command to obtain the value of a variable or a list of all defined variables.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 variable}{\tab \hich\af4\dbch\af4\loch\f4 The variable name you wish to assign a value to.  Variable \hich\af4\dbch\af4\loch\f4 names are not case sensitive, and only the first 255 characters are significant.  If you omit variable, then a list of all defined names and their values is written to standard output.\par \par }{\i \hich\af4\dbch\af4\loch\f4 value}{\tab \hich\af4\dbch\af4\loch\f4 The string that you wish to assign to }{\i \hich\af4\dbch\af4\loch\f4 variable}{\hich\af4\dbch\af4\loch\f4 .  Values are case\hich\af4\dbch\af4\loch\f4  sensitive and are limited to 65536 characters.  All characters, including spaces, starting with the first non-space character after }{\i \hich\af4\dbch\af4\loch\f4 variable}{\hich\af4\dbch\af4\loch\f4  to the end of the line, are included in value.  If you include }{\i \hich\af4\dbch\af4\loch\f4 variable}{\hich\af4\dbch\af4\loch\f4  but omit }{\i \hich\af4\dbch\af4\loch\f4 value}{\hich\af4\dbch\af4\loch\f4 , then the current value of }{\i \hich\af4\dbch\af4\loch\f4 variable}{\hich\af4\dbch\af4\loch\f4   is written to standard output.  Embed spaces within }{\i \hich\af4\dbch\af4\loch\f4 value}{\hich\af4\dbch\af4\loch\f4  by enclosing }{\i \hich\af4\dbch\af4\loch\f4 value}{\hich\af4\dbch\af4\loch\f4  in double quote marks.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 A variable defined with the SET command is normally available only in the EXEC file where it is defined, or if defined on the command line, only \hich\af4\dbch\af4\loch\f4 from the command line.  The variable and its value are not normally passed on to EXEC files, nor are the variables set in an EXEC file available to the caller of the EXEC file.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXPORT command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:scope}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOGIN file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXEC files\:parameter passing}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNSET command}}}{\hich\af4\dbch\af4\loch\f4 To pass a variable and its value on to an EXEC file, you must export the variable using the EXPORT command.  From that time on, any EXEC file will receive a copy of the variable. \hich\af4\dbch\af4\loch\f4  Note that this is a copy: UNSET commands used to destroy the variable, or SET commands used to change it, will not affect the original.  Variables exported from the LOGIN file are exported to the command level.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EXECUTE command}}}{\hich\af4\dbch\af4\loch\f4 You can cause change\hich\af4\dbch\af4\loch\f4 s to variables made in an EXEC file to change local copies.  See the EXECUTE command for details.\par \hich\af4\dbch\af4\loch\f4 Use the UNSET command to delete the definition of a variable.\par \hich\af4\dbch\af4\loch\f4 Certain variable names are reserved; see page 96 for a list of reserved variable names.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318314}\hich\af4\dbch\af4\loch\f4 SHOW{\*\bkmkend _Toc495318314}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 SHO\hich\af2\dbch\af4\loch\f2 W [LANGUAGE] [LANGUAGES] [PREFIX] [TIME] [UNITS]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language numbers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard prefixes}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 device names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volume names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 devices}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SHOW command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command provides information about th\hich\af4\dbch\af4\loch\f4 e system.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\tx1800\adjustright {\hich\af4\dbch\af4\loch\f4 LANGUAGE \tab Shows the current system-default language.\par \par \hich\af4\dbch\af4\loch\f4 LANGUAGES\tab Shows a list of all languages defined in the language table, including their language numbers.\par \par \hich\af4\dbch\af4\loch\f4 PREFIX\tab Shows the current subdirectories to which the GS/OS prefixes are set.  See the\hich\af4\dbch\af4\loch\f4  section \ldblquote Standard Prefixes\rdblquote  in this chapter for a discussion of ORCA prefixes.\par \par \hich\af4\dbch\af4\loch\f4 TIME\tab Shows the current time.\par \par \hich\af4\dbch\af4\loch\f4 UNITS\tab Shows the available units, including device names and volume names.  Only those devices that have formatted GS/OS volumes in them are shown\hich\af4\dbch\af4\loch\f4 .  To see the device names for all of your disk drives, make sure that each drive contains a GS/OS disk.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 More than one parameter can be entered on the command line; to do so, separate the parameters by one or more spaces.  If you enter no parameters, you \hich\af4\dbch\af4\loch\f4 are prompted for them.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318315}\hich\af4\dbch\af4\loch\f4 SHUTDOWN{\*\bkmkend _Toc495318315}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 SHUTDOWN\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SHUTDOWN command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command shuts down the computer, ejecting floppy disks and leaving any RAM disk intact.  A dialog will appear which allows you to restart the computer.\par \hich\af4\dbch\af4\loch\f4 Technically, the comm\hich\af4\dbch\af4\loch\f4 and performs internal clean up of the shell's environment, just as the QUIT command does, ejects all disks, and then does an OSShutDown call with the shut down flags set to 0.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318316}\hich\af4\dbch\af4\loch\f4 SWITCH{\*\bkmkend _Toc495318316}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 SWITCH [-P] }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 pathname2}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SWITCH command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command interchanges two file names in a directory.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab When wildcards are used, the names of the two files switched are written to standard out.  The -P flag suppresses this progress information.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4  \tab The full path name or partial \hich\af4\dbch\af4\loch\f4 path name (including the file name) of the first file name to be moved.  If you use wildcard characters in the file name, the first file name matched is used.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\tab \hich\af4\dbch\af4\loch\f4 The full path name or partial path name (including the file name) to be switched with }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4 .  The prefix in }{\i \hich\af4\dbch\af4\loch\f4 pathname2}{\hich\af4\dbch\af4\loch\f4  must be the same as the prefix in }{\i \hich\af4\dbch\af4\loch\f4 pathname1}{\hich\af4\dbch\af4\loch\f4 .  You cannot use wildcard characters in this file name.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 For example, suppose the directory listing for :ORCA:MYPROGS: is as follows in the figure below:\par \par }\pard\plain \s26\li540\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs16 \hich\af2\dbch\af4\loch\f2 :ORCA:MYPROGS:=}{\pard\plain \s26\li540\sl223\slmult1\widctlpar\adjustright \v\fs16\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v\fs16 \hich\af2\dbch\af4\loch\f2 CATALOG command}}}{\fs16 \par \hich\af2\dbch\af4\loch\f2 Name         Type   Blocks     Modified           Created    Access  Subtype\par \par \hich\af2\dbch\af4\loch\f2 C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par \hich\af2\dbch\af4\loch\f2 COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par \hich\af2\dbch\af4\loch\f2 ABS.OBJECT   \hich\af2\dbch\af4\loch\f2  OBJ     8    12 NOV 86 15:02    4 MAR 86 14:17  NBWR   \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Figure 8.15. CATALOG :ORCA:MYPROGS: command\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 To reverse the positions in the directory of the last two files, use the following command:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \hich\af2\dbch\af4\loch\f2 SWITCH :ORCA:MYPROGS:COMMAND.FILE :ORCA:MYPROGS:ABS.OBJECT\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Now if you list the directory again, it looks like this:\par \par }\pard\plain \s26\qj\li540\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs16 \hich\af2\dbch\af4\loch\f2 :ORCA:MYPROGS:=\par \hich\af2\dbch\af4\loch\f2 Name         Type   Blocks     Modified           Created    Access  Subtype\par \par \hich\af2\dbch\af4\loch\f2 C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par \hich\af2\dbch\af4\loch\f2 ABS.OBJECT    OBJ     8    12 NO\hich\af2\dbch\af4\loch\f2 V 86 15:02    4 MAR 86 14:17   NBWR   \par \hich\af2\dbch\af4\loch\f2 COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Figure 8.16. CATALOG :ORCA:MYPROGS: command\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DOS}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMPRESS command}}}{\hich\af4\dbch\af4\loch\f4 You can alphabetize GS/OS directories with the COMPRESS comm\hich\af4\dbch\af4\loch\f4 and, and list directories with the CATALOG command.  This command works only on GS/OS directories, not on other file systems such as DOS or Pascal.  Due to the design of GS/OS, the SWITCH command will also not work on the disk volume that you boot from \endash  \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 o modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318317}\hich\af4\dbch\af4\loch\f4 TEXT{\*\bkmkend _Toc495318317}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 TEXT\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 TEXT command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file types}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 source files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language names}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PRODOS command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 TEXT langua\hich\af4\dbch\af4\loch\f4 ge}}}{\hich\af4\dbch\af4\loch\f4 This language command sets the ORCA shell default language to ORCA TEXT.  ORCA text files are standard-ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The TEXT file type is provided to support any text formatting programs that\hich\af4\dbch\af4\loch\f4  may be added to ORCA.  TEXT files are shown in a directory listing as SRC files with a subtype of TEXT.\par \hich\af4\dbch\af4\loch\f4 Use the PRODOS command to set the language type to GS/OS text; that is, standard ASCII files with GS/OS file type $04.  PRODOS text files are shown in \hich\af4\dbch\af4\loch\f4 a directory listing as TXT files with no subtype.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318318}\hich\af4\dbch\af4\loch\f4 TOUCH{\*\bkmkend _Toc495318318}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 TOUCH [-P]\tab }{\i \hich\af2\dbch\af4\loch\f2 pathname}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 modification date}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 TOUCH command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command "touches" a file, changing the file's modification date and time stamp to the current date and time, just a\hich\af4\dbch\af4\loch\f4 s if the file had been loaded into the editor and saved again.  The contents of the file are not affected in any way.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -P\tab When wildcards are used, a list of the files touched is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i \hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 athname}{\hich\af4\dbch\af4\loch\f4  \tab The full path name or partial path name (including the file name) of the file to be touched.  You can use wildcard characters in this file name, in which case every matching file is touched.  You can specify more than one path name in the command;\hich\af4\dbch\af4\loch\f4  separate path names with spaces.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318319}\hich\af4\dbch\af4\loch\f4 TYPE{\*\bkmkend _Toc495318319}\par }\pard\plain \s27\fi-720\li720\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 TYPE\tab [+N|}{\ul \hich\af2\dbch\af4\loch\f2 -N}{\hich\af2\dbch\af4\loch\f2 ] [}{\ul \hich\af2\dbch\af4\loch\f2 +T}{\hich\af2\dbch\af4\loch\f2 |-T] }{\i \hich\af2\dbch\af4\loch\f2 pathname1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 startline1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 endline1}{\hich\af2\dbch\af4\loch\f2 ]] [}{\i \hich\af2\dbch\af4\loch\f2 pathname2}{\hich\af2\dbch\af4\loch\f2  \tab [}{\i \hich\af2\dbch\af4\loch\f2 startline2}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 endline2}{\hich\af2\dbch\af4\loch\f2 ]]...]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 wildcards}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 TYPE command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This internal command prints one or more text or source\hich\af4\dbch\af4\loch\f4  files to standard output (usually the screen).\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 +N|-N\tab If you specify +N, the shell precedes each line with a line number.  The default is -N: no line numbers are printed.\par \par \hich\af4\dbch\af4\loch\f4 +T|-T\tab The TYPE command normally expands tabs as a file is printed; using the -T fla\hich\af4\dbch\af4\loch\f4 g causes the TYPE command to send tab characters to the output device unchanged.\par \par }{\i \hich\af4\dbch\af4\loch\f4 pathname}{\hich\af4\dbch\af4\loch\f4  \tab The full path name or partial path name (including the file name) of the file to be printed.  You can use wildcard characters in this file name, in which case every\hich\af4\dbch\af4\loch\f4  text or source file matching the wildcard file name specification is printed.  You can specify more than one path name in the command; separate path names with spaces.\par \par }{\i \hich\af4\dbch\af4\loch\f4 startline}{\hich\af4\dbch\af4\loch\f4 n\tab The line number of the first line of this file to be printed.  If this para\hich\af4\dbch\af4\loch\f4 meter is omitted, then the entire file is printed.\par \par }{\i \hich\af4\dbch\af4\loch\f4 endline}{\hich\af4\dbch\af4\loch\f4 n\tab The line number of the last line of this file to be printed.  If this parameter is omitted, then the file is printed from }{\i \hich\af4\dbch\af4\loch\f4 startline}{\hich\af4\dbch\af4\loch\f4  to the end of the file.}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text files}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printing files}}}{\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 merging files}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 ORCA text files, GS/OS text files, and ORCA source files can be printed with the TYPE command.  Use the TYPE command and output redirection to merge files.  For example, to merge the files FILE1 and FILE2 into the new file FILE3, \hich\af4\dbch\af4\loch\f4 use the command:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\b \tab \hich\af2\dbch\af4\loch\f2 TYPE FILE1 FILE2 > FILE3\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tabs\:removing}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DETAB}}}{\hich\af4\dbch\af4\loch\f4 Normally, the TYPE command functions as a DETAB utility, expanding tabs to an appropriate number of spaces as the file it sent to the output device.  The TYPE command examines\hich\af4\dbch\af4\loch\f4  the language stamp of the file being typed, reading the appropriate tab line from the SYSTABS file to determine where the tab stops are located.\par \hich\af4\dbch\af4\loch\f4 If you are using the type command to append one file to the end of another, you may not want tabs to be expand\hich\af4\dbch\af4\loch\f4 ed.  In That case, the -T flag can be used to suppress tab expansions.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318320}\hich\af4\dbch\af4\loch\f4 UNALIAS{\*\bkmkend _Toc495318320}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 UNALIAS }{\i \hich\af2\dbch\af4\loch\f2 variable1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 variable2}{\hich\af2\dbch\af4\loch\f2  ...]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ALIAS command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNALIAS command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The UNALIAS command deletes an alias created with the ALIAS command.  More than one alias can \hich\af4\dbch\af4\loch\f4 be deleted my listing all of them, separated by spaces.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318321}\hich\af4\dbch\af4\loch\f4 UNSET{\*\bkmkend _Toc495318321}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 UNSET }{\i \hich\af2\dbch\af4\loch\f2 variable1}{\hich\af2\dbch\af4\loch\f2  [}{\i \hich\af2\dbch\af4\loch\f2 variable2}{\hich\af2\dbch\af4\loch\f2 ...]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SET command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell variables\:assigning values to}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 UNSET command\bxe }}}{\hich\af4\dbch\af4\loch\f4 This command deletes the definition of a variable.  More than one variable\hich\af4\dbch\af4\loch\f4  may be deleted by separating the variable names with spaces.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 variable}{\tab \hich\af4\dbch\af4\loch\f4 The name of the variable you wish to delete.  Variable names are not case sensitive, and only the first 255 characters are significant.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Use the SET command to define a variable.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318322}{\*\bkmkend shell2}\hich\af4\dbch\af4\loch\f4 *{\*\bkmkend _Toc495318322}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 * }{\i \hich\af2\dbch\af4\loch\f2 s\hich\af2\dbch\af4\loch\f2 tring}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 COMMENT command\bxe }}}{\hich\af4\dbch\af4\loch\f4 The * command is the comment.  By making the comment a command that does nothing, you are able to rename it to be anything you wish.  Since it is a command, the comment character must be followed by a space.  All characters\hich\af4\dbch\af4\loch\f4  from there to the end of the line, or up to a ; character, which indicates the start of the next command, are ignored.}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}{\rxe shell2}}}{\par }\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 9 \endash  The Text Editor\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318323}\hich\af4\dbch\af4\loch\f4 Chapter 9 \endash  The Text Editor{\*\bkmkend _Toc495318323}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par \hich\af4\dbch\af4\loch\f4 The ORCA editor allows you to write and edit source and text files.  This chap\hich\af4\dbch\af4\loch\f4 ter provides reference material on the editor, including detailed descriptions of all editing commands. \par \hich\af4\dbch\af4\loch\f4 The first section in this chapter, \ldblquote Modes,\rdblquote  describes the different modes in which the editor can operate.  The second section, \ldblquote Macros,\rdblquote  describes how\hich\af4\dbch\af4\loch\f4  to create and use editor macros, which allow you to execute a string of editor commands with a single keystroke.  The third section, "Using Editor Dialogs," gives a general overview of how the mouse and keyboard are used to manipulate dialogs.  The next \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ection, \ldblquote Commands,\rdblquote  describes each editor command and gives the key or key combination assigned to the command.  The last section, \ldblquote Setting Editor Defaults,\rdblquote  describes how to set the defaults for editor modes and tab settings for each language.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318324}\hich\af4\dbch\af4\loch\f4 Modes{\*\bkmkend _Toc495318324}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The b\hich\af4\dbch\af4\loch\f4 ehavior of the ORCA editor depends on the settings of several modes, as follows:\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 Insert.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Escape.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Auto Indent.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Text Selection.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Hidden Characters.\par \par \hich\af4\dbch\af4\loch\f4 Most of these modes has two possible states; you can toggle between the states while in the editor.\hich\af4\dbch\af4\loch\f4   The default for these modes can be changed by changing flags in the SYSTABS file; this is described later in this chapter, in the section "Setting Editor Defaults."  All of these modes are described in this section.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318325}\hich\af4\dbch\af4\loch\f4 Insert{\*\bkmkend _Toc495318325}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:over strike mode\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:insert mode\bxe }}}{\hich\af4\dbch\af4\loch\f4 When you first start the editor, it is in over strike mode; in this mode the characters you type replace any characters the cursor is on.  In insert mode, any characters you type are inserted at the left of the cursor; the\hich\af4\dbch\af4\loch\f4  character the cursor is on and any characters to the right of the cursor are moved to the right.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:line length\bxe }}}{\hich\af4\dbch\af4\loch\f4 The maximum number of characters the ORCA editor will display on a single line is 255 characters, and this length can be reduced\hich\af4\dbch\af4\loch\f4  by appropriate settings in the tab line.  If you insert enough characters to create a line longer than 255 characters, the line is wrapped and displayed as more than one line.  Keep in mind that most languages limit the number of characters on a single s\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 urce line to 255 characters, and may ignore any extra characters or treat them as if they were on a new line.\par \hich\af4\dbch\af4\loch\f4 To enter or leave the insert mode, type }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af2\dbch\af4\loch\f2 E}{\hich\af4\dbch\af4\loch\f4 .  When you are in insert mode, the cursor will be an underscore character that alternates with the character in the file.  In over strike mode, the cursor is a blinking box that changes the underlying character between an inverse character (black on whi\hich\af4\dbch\af4\loch\f4 te) and a normal character (white on black).\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318326}\hich\af4\dbch\af4\loch\f4 Escape{\*\bkmkend _Toc495318326}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:escape mode\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:repeat counts\bxe }}}{\hich\af4\dbch\af4\loch\f4 When you press the }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  key, the editor enters the escape mode.  For the most part, the escape mode works like the normal edit mode.  The princ\hich\af4\dbch\af4\loch\f4 iple difference is that the number keys allows you to enter repeat counts, rather than entering numbers into the file.  After entering a repeat count, a command will execute that number of times.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:insert blank lines command}}}{\hich\af4\dbch\af4\loch\f4 For example, the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 B command inserts a blank line in the file.  If you would like to enter fifty blank lines, you would enter the escape mode, type 50}{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 B, and leave the escape mode by typing the }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  key a second time.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:escape mode}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:open Apple key}}}{\hich\af4\dbch\af4\loch\f4 Earlier, it was mentioned that the number keys were used in escape mode to enter repeat counts.  In the normal editor mode, }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  followed by a number key moves to various places in the file.  In escape mode, the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  key modifier allows you to type numbers.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:control underscore key\bxe }}}{\hich\af4\dbch\af4\loch\f4 The only other difference between the two modes is the way }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4 _ works.  This key is used primarily in macros.  If you are in the editor mode, }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4 _ places you in escape mode.  If you are in escape mode, it does nothing\hich\af4\dbch\af4\loch\f4 .  In edit mode, }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4 _ does nothing; in escape mode, it returns you to edit mode.  This lets you quickly get into the mode you need to be in at the start of an editor macro, regardless of the mode you are in when the macro is executed.\par \hich\af4\dbch\af4\loch\f4 The remainder of this chapter descri\hich\af4\dbch\af4\loch\f4 bes the standard edit mode.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318327}\hich\af4\dbch\af4\loch\f4 Auto Indent{\*\bkmkend _Toc495318327}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:auto-indent mode\bxe }}}{\hich\af4\dbch\af4\loch\f4 You can set the editor so that }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  moves the cursor to the first column of the next line, or so that it follows indentations already set in the text.  If the editor is set to put\hich\af4\dbch\af4\loch\f4  the cursor on column 1 when you press }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 , then changing this mode causes the editor to put the cursor on the first non-space character in the next line; if the line is blank, then the cursor is placed under the first non-space character in the first n\hich\af4\dbch\af4\loch\f4 on-blank line above the cursor.  The first mode is generally best for line-oriented languages, like assembly language or BASIC.  The second is handy for block-structured languages like C or Pascal.\par \hich\af4\dbch\af4\loch\f4 To change the return mode, type }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318328}\hich\af4\dbch\af4\loch\f4 Select Text{\*\bkmkend _Toc495318328}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:select mode\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:select mode\:by character\bxe }}}{\hich\af4\dbch\af4\loch\f4 You can use the mouse or the keyboard to select text in the ORCA editor.  This section deals with the keyboard selection mechanism; see "Using the Mouse," later in this chapter, for inform\hich\af4\dbch\af4\loch\f4 ation about selecting text with the mouse.\par \hich\af4\dbch\af4\loch\f4 The Cut, Copy, Delete and Block Shift commands require that you first select a block of text.  The ORCA editor has two modes for selecting text: line-oriented and character-oriented selects.  As you move the curso\hich\af4\dbch\af4\loch\f4 r in line-oriented select mode, text or code is marked a line at a time.  In the character-oriented select mode, you can start and end the marked block at any character.  Line-oriented select mode is the default for assembly language; for text files and m\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 st high-level languages, character-oriented select mode is the default.\par \hich\af4\dbch\af4\loch\f4 While in either select mode, the following cursor-movement commands are active:\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 bottom of screen}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:bottom of screen command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 top of screen}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:top of screen co\hich\af4\dbch\af4\loch\f4 mmand}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 cursor down}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:cursor down command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 cursor up}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:cursor up command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 start of line}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:start of line command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 screen moves}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:screen move commands}}}{\par \par \hich\af4\dbch\af4\loch\f4 In addition, while in character-oriented select \hich\af4\dbch\af4\loch\f4 mode, the following cursor-movement commands are active:}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:select mode by character}}}{\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 cursor left}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:cursor left command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 cursor right}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:cursor right command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 end of line}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:end of line command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 tab}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:tab command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 tab left}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:tab left command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 word right}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:word right command}}}{\par \bullet \tab \hich\af4\dbch\af4\loch\f4 word left}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:word left command}}}{\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:RETURN key}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:ESCAPE key}}}{\hich\af4\dbch\af4\loch\f4 As you move the cursor, the text between the\hich\af4\dbch\af4\loch\f4  original cursor position and the final cursor position is marked (in inverse characters).  Press }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  to complete the selection of text.  Press }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  to abort the operation, leave select mode, and return to normal editing.\par \hich\af4\dbch\af4\loch\f4 To switch between character- and\hich\af4\dbch\af4\loch\f4  line-oriented selection while in the editor, type }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 x.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318329}\hich\af4\dbch\af4\loch\f4 Hidden Characters{\*\bkmkend _Toc495318329}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:tabs}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:hidden characters}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tabs}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return characters}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hidden characters}}}{\hich\af4\dbch\af4\loch\f4 There are cases where line wrapping or tab fields may be conf\hich\af4\dbch\af4\loch\f4 using.  Is there really a new line, or was the line wrapped?  Do those eight blanks represent eight spaces, a tab, or some combination of spaces and tabs?  To answer these questions, the editor has an alternate display mode that shows hidden characters.  \hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 o enter this mode, type }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 =; you leave the mode the same way.  While you are in the hidden character mode, end of line characters are displayed as the mouse text return character.  Tabs are displayed as a right arrow where the tab character is located, followed by spaces until the\hich\af4\dbch\af4\loch\f4  next tab stop.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318330}\hich\af4\dbch\af4\loch\f4 Macros{\*\bkmkend _Toc495318330}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:macros\bxe }}}{\hich\af4\dbch\af4\loch\f4 You can define up to 26 macros for the ORCA editor, one for each letter on the keyboard.  A macro allows you to substitute a single keystroke for up to 128 predefined keystrokes.  A macro can contain both edi\hich\af4\dbch\af4\loch\f4 tor commands and text, and can call other macros.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:create macros command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:arrow keys}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:end macro definition command}}}{\hich\af4\dbch\af4\loch\f4 To create a macro, press }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4 .  The current macro definitions for A to J appear on the screen.  The }{\outl \hich\af4\dbch\af4\loch\f4 LEFT-ARROW}{\hich\af4\dbch\af4\loch\f4  and }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\hich\af4\dbch\af4\loch\f4  keys can be used to switch between the three pages of macro definitions.  To replace a definition, press the key that corresponds to that macro, then type\hich\af4\dbch\af4\loch\f4  in the new macro definition.  You must be able to see a macro to replace it - use the left and right arrow keys to get the correct page.  Press }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4  }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  to terminate the macro definition.  You can include }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4  combinations, }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4  combinations, }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\i \hich\af4\dbch\af4\loch\f4 k\hich\af4\dbch\af4\loch\f4 ey}{\hich\af4\dbch\af4\loch\f4  combinations, and the }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 , ENTER, }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4 , and arrow keys.  The following conventions are used to display keystrokes in macros:}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:macro keystrokes\bxe }}}{\par \par }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4 key \tab The uppercase character }{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4  is shown in inverse.\par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 key\tab An inverse A followed by }{\i \hich\af4\dbch\af4\loch\f4 ke\hich\af4\dbch\af4\loch\f4 y}{\hich\af4\dbch\af4\loch\f4  (for example, AK)\par }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4 key\tab An inverse B followed by }{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4  (for example, BK)\par }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\tab \hich\af4\dbch\af4\loch\f4 An inverse left bracket (}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  [).\par }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\tab \hich\af4\dbch\af4\loch\f4 An inverse M (}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  M).\par }{\outl \hich\af4\dbch\af4\loch\f4 ENTER}{\tab \hich\af4\dbch\af4\loch\f4 An inverse J (}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  J).\par }{\outl \hich\af4\dbch\af4\loch\f4 UP-ARROW}{\tab \hich\af4\dbch\af4\loch\f4 An inverse K (}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  K).\par }{\outl \hich\af4\dbch\af4\loch\f4 DOWN-ARROW}{\tab \hich\af4\dbch\af4\loch\f4 An inverse J (}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  J).\par }{\outl \hich\af4\dbch\af4\loch\f4 LEFT-ARROW}{\tab \hich\af4\dbch\af4\loch\f4 An in\hich\af4\dbch\af4\loch\f4 verse H (}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  H).\par }{\outl \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\tab \hich\af4\dbch\af4\loch\f4 An inverse U (}{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  U).\par }{\outl \hich\af4\dbch\af4\loch\f4 DELETE}{\tab \hich\af4\dbch\af4\loch\f4 A block\par \par \hich\af4\dbch\af4\loch\f4 Each }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4  combination or }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4  combination counts as two keystrokes in a macro definition.  Although an }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4  combination looks (in the macro definition) like a }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  A followed by }{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4 , and an }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4 key combination looks like a }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  B followed by }{\i \hich\af4\dbch\af4\loch\f4 key}{\hich\af4\dbch\af4\loch\f4 , you can\hich\af4\dbch\af4\loch\f4 not enter }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  A when you want an }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  or }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4  B when you want an }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4  key.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:deleting characters in macros}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:end macro definition command}}}{\hich\af4\dbch\af4\loch\f4 \hich\f4 If you make a mistake typing a macro definition, you can back up with \u-3\'f0}{\outl \hich\af4\dbch\af4\loch\f4 DELETE}{\hich\af4\dbch\af4\loch\f4 .  If you wish \hich\af4\dbch\af4\loch\f4 to retype the macro definition, press }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4  }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  to terminate the definition, press the letter key for the macro you want to define, and begin over.  When you are finished entering macros, press }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4  }{\outl \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  to terminate the last option definition, then pres\hich\af4\dbch\af4\loch\f4 s }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4  to end macro entry.  If you have entered any new macro definitions, a dialog will appear asking if you want to save the macros to disk; select OK to save the new macro definitions, and Cancel to return to the editor.  If you select Cancel, the mac\hich\af4\dbch\af4\loch\f4 ros you have entered will remain in effect until you leave the editor.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:exit macro creation command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSEMAC file}}}{\hich\af4\dbch\af4\loch\f4 Macros are saved on disk in the file SYSEMAC in the ORCA shell prefix.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:executing macros\bxe }}}{\hich\af4\dbch\af4\loch\f4 To execute a ma\hich\af4\dbch\af4\loch\f4 cro, hold down }{\outl \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4  and press the key corresponding to that macro.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318331}\hich\af4\dbch\af4\loch\f4 Using Editor Dialogs{\*\bkmkend _Toc495318331}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The text editor makes use of a number of dialogs for operations like entering search strings, selecting a file to open, and informing you of error conditions.  The wa\hich\af4\dbch\af4\loch\f4 y you select options, enter text, and execute commands in these dialogs is the same for all of them.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:dialogs}}}{\hich\af4\dbch\af4\loch\f4 Figure 9.1 shows the Search and Replace dialog, one of the most comprehensive of all of the editor's dialogs, and one that happens t\hich\af4\dbch\af4\loch\f4 o illustrate many of the controls used in dialogs.\par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 \hich\af4\dbch\af4\loch\f4 Figure 9.1\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:editline items}}}{\hich\af4\dbch\af4\loch\f4 The first item in this dialog is an editline control that lets you enter a string.  When the dialog first appears, the cursor is at the beginning of this line.\hich\af4\dbch\af4\loch\f4   You can use any of the line editing commands from throughout the ORCA programming environment to enter and edit a string in this editline control; these line editing commands are summarized in Table 9.2.\par \par }\pard\plain \s31\qj\fi-1440\li1800\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 command\tab command name and effect}{\pard\plain \s31\qj\fi-1440\li1800\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:editl\hich\af4\dbch\af4\loch\f4 ine controls}}}{\par }\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 LEFT-ARROW}{\fs18 \tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 cursor left}{\fs18 \hich\af4\dbch\af4\loch\f4  - The cursor will move to the left.\par }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW}{\fs18 \tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 cursor right}{\fs18 \hich\af4\dbch\af4\loch\f4  - The cursor will move to the right. \par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af4\dbch\af4\loch\f4 > or }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af4\dbch\af4\loch\f4 .\tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 end of line}{\fs18 \hich\af4\dbch\af4\loch\f4  -  The cursor will move to the right-hand end of the string.\par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af4\dbch\af4\loch\f4 < or }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af4\dbch\af4\loch\f4 ,\tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 start of line}{\fs18 \hich\af4\dbch\af4\loch\f4  - The cursor will move to the left-hand end of the string.\par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af4\dbch\af4\loch\f4 Y or }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 CTRL}{\fs18 \hich\af4\dbch\af4\loch\f4 Y\tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 delete to end of line}{\fs18 \hich\af4\dbch\af4\loch\f4  - Deletes characters from the cursor to the the end of the\hich\af4\dbch\af4\loch\f4  line.\par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af4\dbch\af4\loch\f4 Z or }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 CTRL}{\fs18 \hich\af4\dbch\af4\loch\f4 Z\tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 undo}{\fs18 \hich\af4\dbch\af4\loch\f4  - Resets the string to the starting string.\par }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 ESC}{\fs18 \hich\af4\dbch\af4\loch\f4  or }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 CTRL}{\fs18 \hich\af4\dbch\af4\loch\f4 X\tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 exit}{\fs18 \hich\af4\dbch\af4\loch\f4  - Stops string entry, leaving the dialog without changing the default string or executing the command.\par }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs18 \hich\af4\dbch\af4\loch\f4 E or }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 CTRL}{\fs18 \hich\af4\dbch\af4\loch\f4 E\tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 toggle insert mode}{\fs18 \hich\af4\dbch\af4\loch\f4  - Switches between insert and over s\hich\af4\dbch\af4\loch\f4 trike mode.  The dialog starts out in the same mode as the editor, but switching the mode in the dialog does not change the mode in the editor.\par }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 DELETE}{\fs18 \tab }{\b\fs18 \hich\af4\dbch\af4\loch\f4 delete character left}{\fs18 \hich\af4\dbch\af4\loch\f4  - Deletes the character to the left of the cursor, moving the cursor left.\par }\pard \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 9\hich\af4\dbch\af4\loch\f4 .2  Editline Control Commands\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:tabs}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tabs}}}{\hich\af4\dbch\af4\loch\f4 The Search and Replace dialog has two editline items; you can move between them using the tab key.  You may also need to enter a tab character in a string, either to search specifically for a \hich\af4\dbch\af4\loch\f4 string that contains an imbedded tab character, or to place a tab character in a string that will replace the string once it is found.  To enter a tab character in an editline string, use }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 tab.  While only one space will appear in the editline control, thi\hich\af4\dbch\af4\loch\f4 s space does represent a tab character.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:check boxes}}}{\hich\af4\dbch\af4\loch\f4 Four options appear below the editline controls.  Each of these options is preceded by an }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  character and a number.  Pressing }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 x, where x is the number, selects the option, and causes a che\hich\af4\dbch\af4\loch\f4 ck mark to appear to the left of the option.  Repeating the operation deselects the option, removing the check mark.  You can also select and deselect options by using the mouse to position the cursor over the item, anywhere on the line from the }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  characte\hich\af4\dbch\af4\loch\f4 r to the last character in the label.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:buttons}}}{\hich\af4\dbch\af4\loch\f4 At the bottom of the dialog is a pair of buttons; some dialogs have more than two, while some have only one.  These buttons cause some action to occur.  In general, all but one of these buttons w\hich\af4\dbch\af4\loch\f4 ill have an }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  character and a number to the left of the button.  You can select a button in one of several ways:  by clicking on the button with the mouse, by pressing the }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  key (for the default button, which is the one without an }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4  character), by pressing }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 x, or\hich\af4\dbch\af4\loch\f4  by pressing the first letter of the label on the button.  (For dialogs with an editline item, the last option is not available.)\par \hich\af4\dbch\af4\loch\f4 Once an action is selected by pressing a button, the dialog will vanish and the action will be carried out.\par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1037{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 \hich\af4\dbch\af4\loch\f4 Figure 9.3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:list controls}}}{\hich\af4\dbch\af4\loch\f4 Figure 9.3 shown the Open dialog.  This dialog contains a list control, used to display a list of files and folders.\par \hich\af4\dbch\af4\loch\f4 You can scroll through the list by clicking on the arrows with the mouse, dragging the thumb with the mouse (the\hich\af4\dbch\af4\loch\f4  thumb is the space in the gray area between the up and down arrows), clicking in the gray area above or below the thumb, or by using the up and down arrow keys.\par \hich\af4\dbch\af4\loch\f4 If there are any files in the list, one will always be selected.  For commands line Open that \hich\af4\dbch\af4\loch\f4 require a file name, you will be able to select any file in the list; for commands like New, that present the file list so you know what file names are already in use, only folders can be selected.  You can change which file is selected by clicking on ano\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 her file or by using the up or down arrow keys.  If you click on the selected name while a folder is selected, the folder is opened.  If you click on a selected file name, the file is opened.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318332}\hich\af4\dbch\af4\loch\f4 Using the Mouse{\*\bkmkend _Toc495318332}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:mouse}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 mouse}}}{\hich\af4\dbch\af4\loch\f4 All of the fe\hich\af4\dbch\af4\loch\f4 atures of the editor can be used without a mouse, but the mouse can also be used for a number of functions.  If you prefer not to use a mouse, simply ignore it.  You can even disconnect the mouse, and the ORCA editor will perform perfectly as a text-based\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 editor.\par \hich\af4\dbch\af4\loch\f4 The most common use for the mouse is moving the cursor and selecting text.  To position the cursor anywhere on the screen, move the mouse.  As soon as the mouse is moved, an arrow will appear on the screen; position this arrow where you would like \hich\af4\dbch\af4\loch\f4 to position the cursor and click.\par \hich\af4\dbch\af4\loch\f4 Several editor commands require you to select some text.  With any of these commands, you can select the text before using the command by clicking to start a selection, then dragging the mouse while holding down the button\hich\af4\dbch\af4\loch\f4  while you move to the other end of the selection.  Unlike keyboard selection, mouse selections are always done in character select mode.  You can also select words by double-clicking to start the selection, or lines by triple clicking to start the select\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 on.  Finally, if you drag the mouse off of the screen while selecting text, the editor will start to scroll one line at a time.\par \hich\af4\dbch\af4\loch\f4 The mouse can also be used to select dialog buttons, change dialog options, and scroll list items in a dialog.  See "Using Edito\hich\af4\dbch\af4\loch\f4 r Dialogs" in this chapter for details.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318333}\hich\af4\dbch\af4\loch\f4 Command Descriptions{\*\bkmkend _Toc495318333}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This section describes the functions that can be performed with editor commands.  The key assignments for each command are shown with the command description.\par \hich\af4\dbch\af4\loch\f4 Screen-movement descriptions in this\hich\af4\dbch\af4\loch\f4  manual are based on the direction the display screen moves through the file, not the direction the lines appear to move on the screen.  For example, if a command description says that the screen scrolls down one line, it means that the lines on the scree\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  move up one line, and the next line in the file becomes the bottom line on the screen.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 @\tab }{\b \hich\af4\dbch\af4\loch\f4 About\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 version\:editor}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:about command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:version\bxe }}}{\hich\af4\dbch\af4\loch\f4 Shows the current version number and copyright for the editor.  Press any\hich\af4\dbch\af4\loch\f4  key or click on the mouse to get rid of the About dialog.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 G\tab }{\b \hich\af4\dbch\af4\loch\f4 Beep the Speaker\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:beep the speaker command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The ASCII control character BEL ($07) is sent to the output device.  Normally, this causes the speaker to beep.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 , or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 <\tab }{\b \hich\af4\dbch\af4\loch\f4 Beginning of Line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:beginning of line command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is placed in column one of the current line.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 DOWN-ARROW}{\outl\fs18 \tab }{\b \hich\af4\dbch\af4\loch\f4 Bottom of Screen / Page Down}{\b\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:bottom of screen command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor moves to the last visible l\hich\af4\dbch\af4\loch\f4 ine on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the bottom of the screen, the screen scrolls down twenty-two lines.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 C or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 C\tab }{\b \hich\af4\dbch\af4\loch\f4 Copy\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:copy command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 SYSTEMP file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 work prefix}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:paste command}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 When you execute the Copy command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other commands are ignore\hich\af4\dbch\af4\loch\f4 d), then press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .  The selected text is written to the file SYSTEMP in the work prefix.  (To cancel the Copy operation without writing the block to SYSTEMP, press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 ESC }{\hich\af4\dbch\af4\loch\f4 instead of }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .)  Use the Paste command to place the copied material at another p\hich\af4\dbch\af4\loch\f4 osition in the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 W or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 W\tab }{\b \hich\af4\dbch\af4\loch\f4 Close\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:close command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 Closes the active file.  If the file has been changed since the last update, a dialog will appear, giving you a chance to abort the close, save the changes, or close the file withou\hich\af4\dbch\af4\loch\f4 t saving the changes.  If the active file is the only open file, the editor exits after closing the file; if there are other files, the editor selects the next file to become the active file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 DOWN-ARROW}{\b\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Cursor Down\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:cursor down command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is moved down one line, preserving its horizontal position.  If it is on the last line of the screen, the screen scrolls down one line.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 LEFT-ARROW}{\tab }{\b \hich\af4\dbch\af4\loch\f4 Cursor Left\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:cursor left command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is moved left one column.  If it\hich\af4\dbch\af4\loch\f4  is in column one, the command is ignored.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW\tab }{\b \hich\af4\dbch\af4\loch\f4 Cursor Right\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:cursor right command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is moved right one column.  If it is on the end-of-line marker (usually column 80), the command is ignored.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 UP-ARROW\tab }{\b \hich\af4\dbch\af4\loch\f4 Cursor Up\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:cursor up command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is moved up one line, preserving its horizontal position.  If it is on the first line of the screen, the screen scrolls up one line.  If the cursor is on the first line of the file, the command is ignored.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 X\hich\af4\dbch\af4\loch\f4  or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 X\tab }{\b \hich\af4\dbch\af4\loch\f4 Cut\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:cut command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 When you execute the Cut}{\i \hich\af4\dbch\af4\loch\f4  }{\hich\af4\dbch\af4\loch\f4 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other comman\hich\af4\dbch\af4\loch\f4 ds are ignored), then press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .  The selected text is written to the file SYSTEMP in the work prefix, and deleted from the file.  (To cancel the Cut operation without cutting the block from the file, press  }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  instead of }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 ).  Use the Paste comman\hich\af4\dbch\af4\loch\f4 d to place the cut text at another location in the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 ESC}{\b\scaps\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Define Macros\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:define macros command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The editor enters the macro definition mode.  Press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 OPTION ESC}{\hich\af4\dbch\af4\loch\f4  to terminate a definition, and }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 OPTION}{\hich\af4\dbch\af4\loch\f4  to terminate macro definition mode.  The macro definition process is described in the section\hich\af4\dbch\af4\loch\f4  \ldblquote Macros\rdblquote  in this chapter.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 DELETE}{\b\scaps\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Delete\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 When you execute the delete}{\i \hich\af4\dbch\af4\loch\f4  }{\hich\af4\dbch\af4\loch\f4 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use any of the cursor movement or screen-scroll c\hich\af4\dbch\af4\loch\f4 ommands to mark a block of text (all other commands are ignored), then press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .  The selected text is deleted from the file.  (To cancel the delete operation without deleting the block from the file, press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  instead of }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .)\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 F or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 F\tab }{\b \hich\af4\dbch\af4\loch\f4 Delete C\hich\af4\dbch\af4\loch\f4 haracter\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete character command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:undo delete buffer}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:undo command}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The character that the cursor is on is deleted and put in the Undo buffer (see the description of the Undo command).  Characters to the r\hich\af4\dbch\af4\loch\f4 ight of the cursor are moved one space to the left to fill in the gap.  The last column on the line is replaced by a space.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 DELETE}{\b\fs20 \hich\af4\dbch\af4\loch\f4  or }{\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 D\tab }{\b \hich\af4\dbch\af4\loch\f4 Delete Character Left\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete character left command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The character to the left of the cursor is\hich\af4\dbch\af4\loch\f4  deleted, and the character that the cursor is on, as well as the rest of the line to the right of the cursor, are moved 1 space to the left to fill in the gap.  If the cursor is in column one and the over strike mode is active, no action is taken.  If th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  cursor is in column one and the insert mode is active, then the line the cursor is on is appended to the line above and the cursor remains on the character it was on before the delete.  Deleted characters are put in the undo buffer.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs20 \hich\af4\dbch\af4\loch\f4  }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 T or }{\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 T\tab }{\b \hich\af4\dbch\af4\loch\f4 Delete Line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete line command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The line that the cursor is on is deleted, and the following lines are moved up one line to fill in the space.  The deleted line is put in the Undo buffer (see the description of the Undo com\hich\af4\dbch\af4\loch\f4 mand).\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 Y or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 Y\tab }{\b \hich\af4\dbch\af4\loch\f4 Delete to EOL\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete to end of line command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The character that the cursor is on, and all those to the right of the cursor to the end of the line, are deleted and put in the Undo buffer (see the description of the Un\hich\af4\dbch\af4\loch\f4 do command).\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs20 \hich\af4\dbch\af4\loch\f4  }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 G}{\b\scaps\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Delete Word\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete word command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 When you execute the delete word command, the cursor is moved to the beginning of the word it is on, then delete character}{\i \hich\af4\dbch\af4\loch\f4  }{\hich\af4\dbch\af4\loch\f4 commands are executed for as long as the cursor is on a non-sp\hich\af4\dbch\af4\loch\f4 ace character, then for as long as the cursor is on a space.  This command thus deletes the word plus all spaces up to the beginning of the next word.  If the cursor is on a space, that space and all following spaces are deleted, up to the start of the ne\hich\af4\dbch\af4\loch\f4 x\hich\af4\dbch\af4\loch\f4 t word.  All deleted characters, including spaces, are put in the Undo buffer (see the description of the Undo command).\par \par }\pard\plain \keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 . or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 >\tab }{\b \hich\af4\dbch\af4\loch\f4 End of Line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:end of line command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If the last column on the line is not blank, the cursor moves to the last column.  If the last column is blank, then the cursor moves to the right of the last non-space character in the line.  I\hich\af4\dbch\af4\loch\f4 f the entire line is blank, the cursor is placed in column 1.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 ? or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 /\tab }{\b \hich\af4\dbch\af4\loch\f4 Help}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:help command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 SYSHELP file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 shell prefix}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 Displays the help file, which contains a short summary of editor commands.  Use }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 ESC}{\hich\af4\dbch\af4\loch\f4  to return to the \hich\af4\dbch\af4\loch\f4 file being edited.\par \hich\af4\dbch\af4\loch\f4 The help file is a text file called SYSHELP, found in the shell prefix.  Since it is a text file, you can modify it as desired.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 B or }{\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 B\tab }{\b \hich\af4\dbch\af4\loch\f4 Insert Line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:insert line command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 A blank line is inserted at the cursor posi\hich\af4\dbch\af4\loch\f4 tion, and the line the cursor was on and the lines below it are scrolled down to make room.  The cursor remains in the same horizontal position on the screen.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 SPACEBAR}{\b\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Insert Space\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:insert space command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 A space is inserted at the curs\hich\af4\dbch\af4\loch\f4 or position.  Characters from the cursor to the end of the line are moved right to make room.  Any character in column 255 on the line is lost.  The cursor remains in the same position on the screen.  Note that the Insert Space command can extend a line p\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 st the end-of-line marker.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 N or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 N\tab }{\b \hich\af4\dbch\af4\loch\f4 New\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:new command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 A dialog like the one show below appears.  You need to enter a name for the new file.  After entering a name, the editor will open an empty file using one of the ten available file buffers.  The file's location on di\hich\af4\dbch\af4\loch\f4 sk will be determined by the directory showing in the dialog's list box.\par \hich\af4\dbch\af4\loch\f4 While the New command requires selecting a file name, no file is actually created until you save the file with the Save command.\par \par }\pard\plain \qc\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {{\pict{\*\picprop\shplid1038{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw415\pich262\picwgoal8300\pichgoal5240\macpict\bliptag216033400\blipupi72{\*\blipuid 0ce06878b640b85fd7259633d8998b3d}117200000001010601a01101a00082a03039a0008e01000a0000000002d0024098003400000000003b01a000000001003b01a000000001003b01a0000106001fcfff00fc06001fcfff00fc060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003120c60000630000007f0c1c0000630db000003120c60000630000007f0c1c0000630db000003120c600006300000060000c0000630db000003120c600006300000060000c0000630db000003150f60000733e6300601c0c3e00733e773e0de000003150f60000733e6300601c0c3e00733e773e0de000003150f600007f6363007e0c0c63007f036b630de000003150f600007f6363007e0c0c63007f036b630de000003150f60000677f6300600c0c7f00673f6b7f0de000003150f60000677f6b00600c0c7f00673f6b7f0de000003140e6000063606b00600c0c600063636b6dd000003140e6000063606b00600c0c600063636b6dd000003150f60000633f3e00601e1e3f00633f633f0de000003150f60000633f3e00601e1e3f00633f633f0de000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031610600000063007e0c006000c600fe0038060df0000031610600000063007e0c006000c600fe0038060df0000031610600000077006300006000ee00c00018060df0000031610600000077006300006000ee00c00018060df0000031812600000c6b63631c3e6318d6c6c07c187e7cde0e10000031812600000c6b63631c3e6318d6c6c07c187e7cde0e1000003171160000006b63630c606600d6c6fcc618c6c6ee0000003171160000006b63630c606600d6c6fcc618c6c6ee00000031711600000c6363630c3e7c18c6c6c0c618c6fece0000003980034003b0000007601a0003b0001007601a0003b0001007601a000011711600000c6363630c3e7c18c6c6c0c618c6fece000000317116000000633f630c036600c67ec0c618c6c0ce000000317116000000633f630c036600c67ec0c618c6c0ce00000031711600000063037e1e3e6300c606c07c3c7e7ece00000031711600000063037e1e3e6300c606c07c3c7e7ece0000003100060fe000103e0fc000107c0db000003100060fe000103e0fc000107c0db000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000030c02600007ddff00f8f60000030c02600007ddff00f8f60000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe000507e0c0c630c0e700091cce06118009cf39f998fe0000031e02600018fe000507e0c0c630c0e700091cce04118009cf39f998fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018fe0004080ffe3fcfe6ff01f806f60000031502600018fe0004080ffe3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f60000031102600018fe00000fe2ff01f806f60000031102600018fe00000fe2ff01f806f60000031502600018de00091aae0043e00c1ffffff8fe0000031502600018de00091d560043e00c1ffffff8fe0000031502600018de00091aae00863009cffffff8fe0000031502600018de00091d5600863009cffffff8fe0000039800340076000000b101a00076000100b101a00076000100b101a000011502600018de00091aae03603009c81c1818fe0000031502600018de00091d5603603009c81c1818fe0000031502600018de00051aae0610e009fec900c8fe0000031502600018de00051d560410e009fec900c8fe0000031502600018de00091aae04238009c9c809c8fe0000031502600018de00091d5604238009c9c809c8fe0000031502600018de00091aae04260009c819f9c8fe0000031502600018de00091d5604260009c819f9c8fe0000031502600018de00091aae0297f00c19fc09c8fe0000031502600018de00091d560297f00c19fc09c8fe0000031502600018de00091aae0360000ff9fffff8fe0000031502600018de00091d560360000ff9fffff8fe0000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000031502600018de000d1aae0047f00c1e3ffffff80000031502600018de000d1d560047f00c1e3ffffff80000031502600018de000d1aae00803009cf3ffffff80000031502600018de000d1d5600803009cf3ffffff80000031502600018de000d1aae03606009ff3c1c1c180000031502600018de000d1d5603606009ff3c1c1c180000031502600018de000d1aae0610e009ff39c9f9c80000031502600018de000d1d560410e009ff39c9f9c80000031502600018de000d1aae04203009ff39cc18080000031502600018de000d1d5604203009ff39cc18080000031502600018de000d1aae04263009cf39cfc9f80000031502600018de000d1d5604263009cf39cfc9f80000031502600018de00061aae0293e00c1efe1c03080000031502600018de00061d560293e00c1efe1c03080000031402600018de00051aae0360000ffdff03f80000031402600018de00051d560360000ffdff03f80000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef600000398003400b1000000ec01a000b1000100ec01a000b1000100ec01a000010d02600018de00011d56f60000031402600018de000618c60040e00607fdff021c00031402600018de000618c60040e00607fdff021c00031302600018de000518c60081e004fcff029c00031302600018de000518c60081e004fcff029c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c606166004ffe4e4fce79c00031502600018de000d18c604166004ffe4e4fce79c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1bf6029060060604e606070c00031502600018de000d1bf6029060060604e606070c00031302600018de000518c603600007fcff02fc00031302600018de000518c603600007fcff02fc00030c02600007ddff00f8f60000030c02600007ddff00f8f6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031808600007f0c1c0000630e1000647f00c1ffffff8fe0000031808600007f0c1c0000630e1000647f00c1ffffff8fe00000318086000060000c0000630e10006860009cffffff8fe00000318086000060000c0000630e10006860009cffffff8fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe0000031c0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003160060f7000007e6ff04fc0360000ffeff00f8fe000003160060f7000007e6ff04fc0360000ffeff00f8fe0000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f600000398003400ec0000010601a000ec0001010601a000ec0001010601a000010c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600007ddff00fcf60000030c02600007ddff00fcf6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf00000306001fcfff00fc06001fcfff00fca0008fa00083ff}}{\par }{\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 O or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 O\tab }{\b \hich\af4\dbch\af4\loch\f4 Open\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:open command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:multiple files}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The editor can edit up to ten files at one time.  When the open command is used, the editor moves to the first available file buffer, then brings up the dialog shown in Figure 9.4.  If there are no empty file buffers, the ed\hich\af4\dbch\af4\loch\f4 itor beeps, and the command is aborted.\par \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {{\pict{\*\picprop\shplid1039{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\par \par \hich\af4\dbch\af4\loch\f4 Figure 9.4\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Selecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 file types\:SRC}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 file types\:TXT}}}{\hich\af4\dbch\af4\loch\f4 When you use the open button, if the selected file in the file list is a TXT or SRC file, the file is opened.  If a folder is selected, the folder is opened, and the file list changes to show the files inside the folder.  You can also open\hich\af4\dbch\af4\loch\f4  a file by first selecting a file, then clicking on it with the mouse.\par \hich\af4\dbch\af4\loch\f4 If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the fi\hich\af4\dbch\af4\loch\f4 le list.  If the file list was created from the root volume of a disk, the close button does nothing.\par \hich\af4\dbch\af4\loch\f4 The cancel button leaves the open dialog without opening a file.\par \hich\af4\dbch\af4\loch\f4 For information on how to use the various controls in the dialog, see "Using Editor Dialo\hich\af4\dbch\af4\loch\f4 gs" in this chapter.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 V or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 V\tab }{\b \hich\af4\dbch\af4\loch\f4 Paste\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:paste command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 SYSTEMP file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 work prefix}}}{\v \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:select mode\:by character}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:select mode\:by character}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The contents of the SYSTEMP file are copied to the current cursor position.  If the ed\hich\af4\dbch\af4\loch\f4 itor is in line-oriented select mode, the line the cursor is on and all subsequent lines are moved down to make room for the new material.  If the editor is in character-oriented select mode, the material is copied at the cursor column.  If enough charact\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 rs are inserted to make the line longer than 255 characters, the excess characters are lost.\par \par }\pard\plain \qj\keepn\widctlpar\tx1350\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 Q or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 Q}{\b \tab \hich\af4\dbch\af4\loch\f4 Quit\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:quit command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The quit command leaves the editor.  If any file has been changed since the last time it was saved to disk, each of the files, in turn, will be made the active file, and the following dialog will appear:\par \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {{\pict{\*\picprop\shplid1040{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw231\pich84\picwgoal4620\pichgoal1680\macpict\bliptag1830675910\blipupi72{\*\blipuid 6d1de5c6b9fc7f2c7bf96705af84eab1}052000000000005400e71101a00082a0008e01000a0000000002d0024098001e00000000005400e800000000005400e700000000005400e7000102e30007001fe6ff01f00007001fe6ff01f000070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00140360000f80fe00010f98fc00010f80f500010c00140360000f80fe00010f98fc00010f80f500010c001403600018c0fe000118d8fc000118c0f500010c001403600018c0fe000118d8fc000118c0f500010c00160f6000180f98cf80181f0f9f8000000180f500010c00160a6000180f98cf80181f0f9ffe8f018180f500010c00150e60000f80d8d8c01818c0d8cf8f8f83f400010c00140960000f80d8d8c01818c0fdd80003f400010c001409600000cfd8dfc01818cffdd80003f400010c00150e600000cfd8dfc01818cfd8d8dfcf83f400010c001407600018d8cd980018fdd802dfcf80f400010c001507600018d8cd980018fed803cfd800c0f400010c00150e60000f8fc70fc00f98cfd8cfd800c3f400010c00150e60000f8fc70fc00f98cfd8c0cfcf83f400010c000d0060f60002cfcf80f400010c000c0060f700010f80f200010c000c0060f700010f80f200010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600004fcf393f000000c2300101390000c21c013ff9393f39e7000000c001f1d600004fcf393f00000082300101390000821c013ff9393f39e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c0007001fe6ff01f00007001fe6ff01f00002e300a0008fa00083ff}}{\par \par \hich\af4\dbch\af4\loch\f4 Figure\hich\af4\dbch\af4\loch\f4  9.5\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If you select Yes, the file is saved just as if the Save command had been used.  If you select No, the file is closed without saving any changes that have been made.  Selecting Cancel leaves you in the editor with the active file still open, but if s\hich\af4\dbch\af4\loch\f4 everal files had been opened, some of them may have been closed before the Cancel operation took effect.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs18 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 R or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 R\tab }{\b \hich\af4\dbch\af4\loch\f4 Remove Blanks\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:remove blanks command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If the cursor is on a blank line, that line and all subsequent blank lines up to the next non-blank line are removed.  If the cursor is not on a blank line, the command is ignored.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs20 \hich\af4\dbch\af4\loch\f4 1 to 32767\tab }{\b \hich\af4\dbch\af4\loch\f4 Rep\hich\af4\dbch\af4\loch\f4 eat Count\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:repeat counts\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 When in escape mode, you can enter a }{\i \hich\af4\dbch\af4\loch\f4 repeat count }{\hich\af4\dbch\af4\loch\f4 (any number from 1 to 32767) immediately before a command, and the command is repeated as many times as you specify (or as many times as is possible, whichever c\hich\af4\dbch\af4\loch\f4 omes first).  Escape mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 RETURN\tab }{\b \hich\af4\dbch\af4\loch\f4 Return\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:RETURN key\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:auto-indent mode}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  key works in one of two ways, depending on the setting of the auto-indent mode toggle:\hich\af4\dbch\af4\loch\f4   1) to move the cursor to column one of the next line; or 2) to place the cursor on the first non-space character in the next line, or, if the line is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4   If the cursor is on the last line on the screen, the screen scrolls down one line.\par \hich\af4\dbch\af4\loch\f4 If the editor is in insert mode, the }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  key will also split the line at the cursor position.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 A}{\b\fs18 \hich\af4\dbch\af4\loch\f4  or}{\b\outl\fs18 \hich\af4\dbch\af4\loch\f4 \hich\f4  \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 A\tab }{\b \hich\af4\dbch\af4\loch\f4 Save As\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:save as command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The Save As command lets you change the name of the active file, saving it to a new file name or to the same name in a new file folder.  When you use this command, this dialog will appear:\par \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {{\pict{\*\picprop\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich264\picwgoal8340\pichgoal5280\macpict\bliptag1383067446\blipupi72{\*\blipuid 526fef36b94839b56321b6374aeff36f}132100000000010801a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000b03600003e0d2000003ff000b03600003e0d2000003ff000b0360000630d2000003ff000b0360000630d2000003ff00110960000603e633e003e3e0d8000003ff00110960000603e633e003e3e0d8000003ff001008600003e03636300036d7000003ff001008600003e03636300036d7000003ff00110960000033f637f003f3e0d8000003ff00110960000033f637f003f3e0d8000003ff00110960000636336600063030d8000003ff00110960000636336600063030d8000003ff001109600003e3f1c3f003f3e0d8000003ff001109600003e3f1c3f003f3e0d8000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe000507e0c0c630c0e700091cce06118009cf39f998fe000003ff002002600018fe000507e0c0c630c0e700091cce04118009cf39f998fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff001702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff0098003600ae000000e801a800ae000000e801a100ae000000e801a100010f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff001502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe000003ff001e0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff0098003600e80000010801a800e80000010801a100e80000010801a100010e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600007ddff00fcf6000003ff000e02600007ddff00fcf6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\par \par \hich\af4\dbch\af4\loch\f4 Figure 9.6\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Se\hich\af4\dbch\af4\loch\f4 lecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par \hich\af4\dbch\af4\loch\f4 When you use the Open button, the selected folder is opened.  While using this command, y\hich\af4\dbch\af4\loch\f4 ou cannot select any files from the list; only folders can be selected.\par \hich\af4\dbch\af4\loch\f4 If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the f\hich\af4\dbch\af4\loch\f4 ile list.  If the file list was created from the root volume of a disk, the close button does nothing.\par \hich\af4\dbch\af4\loch\f4 The cancel button leaves the open dialog without opening a file.\par \hich\af4\dbch\af4\loch\f4 The Save button saves the file, using the file name shown in the editline item labeled "\hich\af4\dbch\af4\loch\f4 File Name."  You can also save the file by pressing the RETURN key.\par \hich\af4\dbch\af4\loch\f4 For information on how to use the various controls in the dialog, see "Using Editor Dialogs" in this chapter.\par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 S}{\b\fs18 \hich\af4\dbch\af4\loch\f4  or}{\b\outl\fs18 \hich\af4\dbch\af4\loch\f4 \hich\f4  \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 S\tab }{\b \hich\af4\dbch\af4\loch\f4 Save\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:save command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The active file (the one you can see) is saved to disk.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 -1 to }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 -9\tab }{\b \hich\af4\dbch\af4\loch\f4 Screen Moves\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:moving through a file\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The file is divided by the editor into 8 approximately equal sections.  The screen-move c\hich\af4\dbch\af4\loch\f4 ommands move the file to a boundary between one of these sections.  The command }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 1 jumps to the first character in the file, and }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 9 jumps to the last character in the file.  The other seven }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\i \hich\af4\dbch\af4\loch\f4 n }{\hich\af4\dbch\af4\loch\f4 commands cause screen jumps to evenly spaced intermediate point\hich\af4\dbch\af4\loch\f4 s in the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \}\tab }{\b \hich\af4\dbch\af4\loch\f4 Scroll Down One Line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:scroll down one line command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The editor moves down one line in the file, causing all of the lines on the screen to move up one line.  The cursor remains in the same position on the screen.  Scrol\hich\af4\dbch\af4\loch\f4 ling can continue past the last line in the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 ]\tab }{\b \hich\af4\dbch\af4\loch\f4 Scroll Down One Page\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:scroll down one page command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The screen scrolls down twenty-two lines.  Scrolling can continue past the last line in the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \{\tab }{\b \hich\af4\dbch\af4\loch\f4 Scroll Up One Line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 edi\hich\af4\dbch\af4\loch\f4 tor\:scroll up one line\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The editor moves up one line in the file, causing all of the lines on the screen to move down one line.  The cursor remains in the same position on the screen.  If the first line of the file is already displayed on the screen,\hich\af4\dbch\af4\loch\f4  the command is ignored.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 [\tab }{\b \hich\af4\dbch\af4\loch\f4 Scroll Up One Page\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:scroll up one page command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The screen scrolls up twenty-two lines.  If the top line on the screen is less than one screen\rquote s height from the beginning of the file, the screen scrolls to the beginning of the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 L\tab }{\b \hich\af4\dbch\af4\loch\f4 Search Down\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:search down command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 case sensitivity}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 tabs}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 This command allows you to search through a file for a character or string of characters.  When you execute this command, the prompt }{\fs18 \hich\af2\dbch\af4\loch\f2 Search string:}{\hich\af4\dbch\af4\loch\f4  appears at t\hich\af4\dbch\af4\loch\f4 he bottom of the screen.\par \par }\pard\plain \qc\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {{\pict{\*\picprop\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich174\picwgoal10440\pichgoal3480\macpict\bliptag-998183356\blipupi72{\*\blipuid c480ee441428365ad0fea5b85187189b}0bd80000000000ae020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180120060fd000386300630f9000003d300010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018019066000080f3fffc8fe000343e00c0ffeff01fe38d40001018019066000080f3fffc8fe000343e00c0ffeff01fe38d400010180980042008d000000ae0210008d000000ae020a008d000000ae020a00011702600009feff00c8fe0002863009fcff0038d4000101801702600009feff00c8fe0002863009fcff0038d4000101801912600009fe381c08000003667009fc181c0c1f38d4000101801912600009fe381c08000003667009fc181c0c1f38d40001018019126000083f39c9c800000616b009ffc9c9f9cf38d40001018019126000083f39c9c800000416b009ffc9c9f9cf38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d400010180170260000ffeff06f800000360000ffcff00f8d400010180170260000ffeff06f800000360000ffcff00f8d400010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018007001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 \hich\af4\dbch\af4\loch\f4 Figure 9.7\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If you have previously entered a search string, the previous string appears after the prompt as a default.  Type in the string for which you wish to search, and press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 .  The cursor will be moved to the first c\hich\af4\dbch\af4\loch\f4 haracter of the first occurrence of the search string after the old cursor position.  If there are no occurrences of the search string between the old cursor position and the end of the file, an alert will show up stating that the string was not found; pr\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ssing any key will get rid of the alert.\par \hich\af4\dbch\af4\loch\f4 By default, string searches are case insensitive, must be an exact match in terms of blanks and tabs, and will match any target string in the file, even if it is a subset of a larger word.  All of these defaults can\hich\af4\dbch\af4\loch\f4  be changed, so we will look at what they mean in terms of how changing the defaults effect the way string searches work.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 tabs}}}{\v \par }{\hich\af4\dbch\af4\loch\f4 When you look at a line like\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 lb1\tab lda\tab #4\par }{\par \hich\af4\dbch\af4\loch\f4 without using the hidden characters mode, it is impossible to tell if the spa\hich\af4\dbch\af4\loch\f4 ces between the various fields are caused by a series of space characters, two tabs, or perhaps even a space character or two followed by a tab.  This is an important distinction, since searching for lda<space><space><space>#4 won't find the line if the l\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 a and #4 are actually separated by a tab character, and searching for lda<tab>#4 won't find the line if the fields are separated by three spaces.  If you select the "white space compares equal" option, though, the editor will find any string where lda and\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 #4 are separated by any combination of spaces and tabs, whether you use spaces, tabs, or some combination in the search string you type.\par \hich\af4\dbch\af4\loch\f4 By default, if you search for lda, the editor will also find LDA, since string searches are case insensitive.  In C, wh\hich\af4\dbch\af4\loch\f4 ich is case sensitive, you don't usually want to find MAIN when you type main.  Selecting the "case sensitive" option makes the string search case sensitive, so that the capitalization becomes significant.  With this option turned on, searching for main w\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 uld not find MAIN.\par \hich\af4\dbch\af4\loch\f4 Sometimes when you search for a string, you want to find any occurrence of the string, even if it is imbedded in some larger word.  For example, if you are scanning your program for places where it handles spaces, you might enter a strin\hich\af4\dbch\af4\loch\f4 g like "space".  You would want the editor to find the word whitespace, though, and normally it would.  If you are trying to scan through a source file looking for all of the places where you used the variable i, though, you don't want the editor to stop \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 our times on the word Mississippi.  In that case, you can select the "whole word" option, and the editor will only stop of it finds the letter i, and there is no other letter, number, or underscore character on either side of the letter.  These rules matc\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4  the way languages deal with identifiers, so you can use this option to search for specific variable names \endash  even a short, common one like i.\par \hich\af4\dbch\af4\loch\f4 This command searches from the cursor position towards the end of the file.  For a similar command that searches b\hich\af4\dbch\af4\loch\f4 ack towards the start of the file, see the "Search Up" command.\par \hich\af4\dbch\af4\loch\f4 For a complete description of how to use the mouse or keyboard to set options and move through the dialog, see the section "Using Editor Dialogs" in this chapter.\par \hich\af4\dbch\af4\loch\f4 Once a search string has been\hich\af4\dbch\af4\loch\f4  entered, you may want to search for another occ\hich\af4\dbch\af4\loch\f4 \hich\f4 urrence of the same string.  ORCA ships with two built-in editor macros that can do this with a single keystroke, without bringing up the dialog.  To search forward, use the \u-3\'f0\loch\f4 \hich\f4 L macro; to search back, use the \u-3\'f0\loch\f4 K macro.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 K\tab }{\b \hich\af4\dbch\af4\loch\f4 Search Up\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:search up \hich\af4\dbch\af4\loch\f4 command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 This command operates exactly like Search Down}{\i \hich\af4\dbch\af4\loch\f4 ,}{\hich\af4\dbch\af4\loch\f4  except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of the file; to search between the \hich\af4\dbch\af4\loch\f4 current cursor location and the end of the file, use the Search Down command.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 J\tab }{\b \hich\af4\dbch\af4\loch\f4 Search and Replace Down\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:search and replace down command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 This command allows you to search through a file for a character or string of characters, and to replace the search string with a replacement string.  When you execute this com\hich\af4\dbch\af4\loch\f4 mand, the following dialog will appear on the screen:\par \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {{\pict{\*\picprop\shplid1043{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\par \par \hich\af4\dbch\af4\loch\f4 Figure 9.8\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The search string, the first three options, and the buttons work just as they do for string searches; for a description of these, see the Search Down command.  The replace string is the \hich\af4\dbch\af4\loch\f4 target string that will replace the search string each time it is found.  By default, when you use this command, each time the search string is found in the file you will see this dialog:\par \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {{\pict{\*\picprop\shplid1044{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich84\picwgoal5880\pichgoal1680\macpict\bliptag-1051516100\blipupi72{\*\blipuid c153233cf432f61985fd11443439c450}063900000000005401261101a00082a0008e01000a0000000002d00240980026000000000053012800000000005301260000000000530126000102db0007001fdeff01e00007001fdeff01e000070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f5000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f500011800100060fe000018f300010f80f200011800100060fe000018f300010f80f200011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118000e036000003ffbff00e0e8000118002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600004e067273cff27e720fe001718460030667cce40000018438027ff2727e73ce000001800270a600004e067273cff27e720fe001710460030667cce40000010438027ff2727e73ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc03030273030386000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc0303027303038600000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e00000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e000001800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de0001180007001fdeff01e00007001fdeff01e000980026005300000054012800530000005401260053000000540126000102db00a0008fa00083ff}}{\par \par \hich\af4\dbch\af4\loch\f4 Figure 9.9\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If you select the Replace option, the search string \hich\af4\dbch\af4\loch\f4 is replaced by the replace string, and the editor scans forward for the next occurrence of the search string.  Choosing Skip causes the editor to skip ahead to the next occurrence of the search string without replacing the occurrence that is displayed.  C\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ncel stops the search and replace process.\par \hich\af4\dbch\af4\loch\f4 If you use the "replace all" option, the editor starts at the top of the file and replaces each and every occurrence of the search string with the target string.  On large files, this can take quite a bit of time.\hich\af4\dbch\af4\loch\f4   To stop the process, press }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 .  (open-apple period).  While the search and replace is going on, you can see a spinner at the bottom right corner of the screen, showing you that the editor is still alive and well.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 H\tab }{\b \hich\af4\dbch\af4\loch\f4 Search and Replace Up\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:se\hich\af4\dbch\af4\loch\f4 arch and replace up command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 This command operates exactly like Search and Replace Down, except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of \hich\af4\dbch\af4\loch\f4 the file; to search between the current cursor location and the end of the file, use the Search and Replace Down command.  If you use the "replace all" option, this command works exactly the same way the Search and Replace Down command does when it uses t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e same option.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs20 \hich\af4\dbch\af4\loch\f4 -}{\b\fs18 \tab }{\b \hich\af4\dbch\af4\loch\f4 Select File\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:select file command\bxe }}}{\v \hich\af4\dbch\af4\loch\f4 .}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:multiple files.}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The editor can edit up to ten files at one time.  When you use this command, a dialog appears showing the names of the ten files in memory.  You can th\hich\af4\dbch\af4\loch\f4 \hich\f4 en move to one of the files by pressing \u-3\'f0\loch\f4 n, where n is one of the file numbers.  You can exit the dialog without switching files by pressing ESC or RETURN.\par \hich\af4\dbch\af4\loch\f4 See also the Switch Files command.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 TAB}{\b\fs18 \tab }{\b \hich\af4\dbch\af4\loch\f4 Set and Clear Tabs\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:set/clear tab stops comman\hich\af4\dbch\af4\loch\f4 d\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If there is a tab stop in the same column as the cursor, it is cleared; if there is no tab stop in the cursor column, one is set.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs20 \hich\af4\dbch\af4\loch\f4 [}{\b\fs18 \tab }{\b \hich\af4\dbch\af4\loch\f4 Shift Left\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:shift left command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If this command is issued when no text is selected, you enter \hich\af4\dbch\af4\loch\f4 the text selection mode.  Pressing RETURN leaves text selection mode.\par \hich\af4\dbch\af4\loch\f4 At any time while text is selected, using the command shifts all of the selected text left one character.  This is done by scanning the text, one line at a time, and removing a space rig\hich\af4\dbch\af4\loch\f4 ht before the first character on each line that is not a space or tab.  If the character to be removed is a tab character, it is first replaced by an equivalent number of spaces.  If there are no spaces or tabs at the start of the line, the line is skippe\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 If a large amount of text is selected, this command may take a lot of time.  While the editor is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pre\hich\af4\dbch\af4\loch\f4 ssing }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 ., but this will leave the selected text partially shifted.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs20 \hich\af4\dbch\af4\loch\f4 ]}{\b\fs18 \tab }{\b \hich\af4\dbch\af4\loch\f4 Shift Right\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:shift right command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If this command is issued when no text is selected, you enter the text selection mode.  Pressing RETURN leaves text selection mode.\par \hich\af4\dbch\af4\loch\f4 At any\hich\af4\dbch\af4\loch\f4  time while text is selected, using the command shifts all of the selected text right one character.  This is done by scanning the text, one line at a time, and adding a space right before the first character on each line that is not a space or tab.  If t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 is leaves the non-space character on a tab stop, the spaces are collected and replaced with a tab character.  If a blank line is encountered, no action is taken.\par \hich\af4\dbch\af4\loch\f4 If a large amount of text is selected, this command may take a lot of time.  While the editor \hich\af4\dbch\af4\loch\f4 is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pressing }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 ., but this will leave the selected text partially shifted.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\fs20 \hich\af4\dbch\af4\loch\f4 n}{\b\fs18 \tab }{\b \hich\af4\dbch\af4\loch\f4 Switch Files\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 edito\hich\af4\dbch\af4\loch\f4 r\:switch files command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:multiple files}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The editor can edit up to ten files at one time.  Each of these files is numbered, starting from 0 and proceeding to 9.  The numbers are assigned as the files are opened from the command line.  T\hich\af4\dbch\af4\loch\f4 \hich\f4 o move from one file to the next, press \u-3\'f0\loch\f4 n, where n is a numeric key.\par \hich\af4\dbch\af4\loch\f4 When you switch files, the original file is not changed in any way.  When you return to the file, the cursor and display will be in the same place, the undo buffer will still be active, \hich\af4\dbch\af4\loch\f4 and so forth.  The only actions that are not particular to a specific file buffer are those involving the clipboard \endash  Cut, Copy and Paste all use the same clipboard, so you can move chunks of text from one file to another.\par \hich\af4\dbch\af4\loch\f4 See also the Select File command.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 TAB}{\b\scaps\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Tab\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:tab command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 In insert mode, or when in over strike mode and the next tab stop is past the last character in the line, this command inserts a tab character in the source file and moves to the end of the tab field.  If you are \hich\af4\dbch\af4\loch\f4 in the over strike mode and the next tab stop is not past the last character on the line, the Tab command works like a cursor movement command, moving the cursor forward to the next tab stop.\par \hich\af4\dbch\af4\loch\f4 Some languages and utilities do not work well (or at all) with t\hich\af4\dbch\af4\loch\f4 ab stops.  If you are using one of these languages, you can tell the editor to insert spaces instead of tab characters; see the section "Setting Editor Defaults," later in this chapter, to find out how this is done.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 TAB}{\b\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Tab Left\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:tab left command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is moved to the previous tab stop, or to the beginning of the line if there are no more tab stops to the left of the cursor.  This command does not enter any characters in the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 RETURN}{\b\fs18 \tab }{\b \hich\af4\dbch\af4\loch\f4 To\hich\af4\dbch\af4\loch\f4 ggle Auto Indent Mode\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:set/clear auto-indent mode command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If the editor is set to put the cursor on column one when you press }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4 , it is changed to put the cursor on the first non-space character; if set to the first non-space charac\hich\af4\dbch\af4\loch\f4 ter, it is changed to put the cursor on column one.  Auto-indent mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 ESC}{\b\scaps\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Toggle Escape Mode}{\b\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:set/clear escape mode command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If the editor is in the edit mode, it is put in escape mod\hich\af4\dbch\af4\loch\f4 e; if it is in escape mode, it is put in edit mode.  When you are in escape mode, pressing any character not specifically assigned to an escape-mode command returns you to edit mode.  Escape and edit modes are described in the section \ldblquote Modes\rdblquote  in this chap\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 er.\par \hich\af4\dbch\af4\loch\f4 When in escape mode, }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs18 \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4 _ will return you to edit mode.  In edit mode the command has no effect.  From edit mode, }{\outl\fs18 \hich\af4\dbch\af4\loch\f4 CTRL}{\hich\af4\dbch\af4\loch\f4 _ will place you in escape mode, but the command has no effect in escape mode.  These commands are most useful in an editor macro, where you do not know what\hich\af4\dbch\af4\loch\f4  mode you are in on entry.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 E or }{\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 E\tab }{\b \hich\af4\dbch\af4\loch\f4 Toggle Insert Mode\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:set/clear insert mode command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If insert mode is active, the editor is changed to over strike mode.  If over strike mode is active, the editor is changed to insert mode.  Insert\hich\af4\dbch\af4\loch\f4  and over strike modes are described in the section \ldblquote Modes\rdblquote  in this chapter.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\outl\fs20 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 X\tab }{\b \hich\af4\dbch\af4\loch\f4 Toggle Select Mode\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:set/clear select mode command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 If the editor is set to select text for the Cut, Copy, and Delete commands in units of one line, it i\hich\af4\dbch\af4\loch\f4 s changed to use individual characters instead; if it is set to character-oriented selects, it is toggled to use whole lines.  See the section \ldblquote Modes\rdblquote  in this chapter for more information on select mode.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 UP-ARROW}{\outl \tab }{\b \hich\af4\dbch\af4\loch\f4 Top of Screen / Page Up\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:top\hich\af4\dbch\af4\loch\f4  of screen command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor moves to the first visible line on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the top of the screen, the screen scrolls up twenty-two lines.  If the cursor is at the top of the\hich\af4\dbch\af4\loch\f4  screen and less than twenty-two lines from the beginning of the file, then the screen scrolls to the beginning of the file.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\outl\fs20 \hich\af4\dbch\af4\loch\f4 CTRL}{\b\fs20 \hich\af4\dbch\af4\loch\f4 Z or }{\b\outl\fs20 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\b\fs20 \hich\af4\dbch\af4\loch\f4 Z\tab }{\b \hich\af4\dbch\af4\loch\f4 Undo Delete\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:undo delete command\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:undo delete buffer}}}{\v \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete character command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete character left command}}}{\v \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete line command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete to end of line comman\hich\af4\dbch\af4\loch\f4 d}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:delete word command}}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The last operation that changed the text in the current edit file is reversed, leaving the edit file in the previous state.  Saving the file empties the undo buffer, so you cannot undo changes made before the last \hich\af4\dbch\af4\loch\f4 time the file was saved.\par \hich\af4\dbch\af4\loch\f4 The undo operation acts like a stack, so once the last operation is undone, you can undo the one before that, and so on, right back to the point where the file was loaded or the point where the file was saved the last time.\par \par }\pard\plain \keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs20 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 LEFT-ARROW}{\b\fs20 \tab }{\b \hich\af4\dbch\af4\loch\f4 Word Left\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:word left command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is moved to the beginning of the next non-blank sequence of characters to the left of its current position.  If there are no more words on the line, the cursor is moved to the last wor\hich\af4\dbch\af4\loch\f4 d in the previous line or, if it is blank, to the last word in the first non-blank line preceding the cursor.\par \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\outl\fs20 \hich\af4\dbch\af4\loch\f4 RIGHT-ARROW\tab }{\b \hich\af4\dbch\af4\loch\f4 Word Right\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v }{\v \hich\af4\dbch\af4\loch\f4 editor\:word right command\bxe }}}{\v \par }{\par \hich\af4\dbch\af4\loch\f4 The cursor is moved to the start of the next non-blank sequence of characters to \hich\af4\dbch\af4\loch\f4 the right of its current position.  If there are no more words on the line, the cursor is moved to the first word in the next non-blank line.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318334}\hich\af4\dbch\af4\loch\f4 Setting Editor Defaults{\*\bkmkend _Toc495318334}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:setting defaults\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:customizing\bxe }}}{\hich\af4\dbch\af4\loch\f4 When\hich\af4\dbch\af4\loch\f4  you start the ORCA editor, it reads the file named SYSTABS (located in the ORCA shell prefix), which contains the default settings for tab stops, return mode, insert mode, tab mode, and select mode.  The SYSTABS file is an ASCII text file that you can ed\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 t with the ORCA editor.\par \hich\af4\dbch\af4\loch\f4 Each language recognized by ORCA is assigned a language number.  The SYSTABS file has three lines associated with each language:}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 language numbers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:modes}}}{\par \par \hich\af4\dbch\af4\loch\f4 1.\tab The language number.\par \hich\af4\dbch\af4\loch\f4 2.\tab The default settings for the \hich\af4\dbch\af4\loch\f4 various modes.\par \hich\af4\dbch\af4\loch\f4 3.\tab The default tab and end-of-line-mark settings.\par \par \hich\af4\dbch\af4\loch\f4 The first line of each set of lines in the SYSTABS file specifies the language that the next two lines apply to.  ORCA languages can have numbers from 0 to 32767 (decimal).  The language num\hich\af4\dbch\af4\loch\f4 ber must start in the first column; leading zeros are permitted and are not significant, but leading spaces are not allowed.\par \hich\af4\dbch\af4\loch\f4 The second line of each set of lines in the SYSTABS file sets the defaults for various editor modes, as follows:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:a\hich\af4\dbch\af4\loch\f4 uto-indent mode}}}{\hich\af4\dbch\af4\loch\f4 If the first column contains a zero, pressing }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  in the editor causes the cursor to go to column one in the next line; if it\rquote s a one, pressing }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  sends the cursor to the first non-space character in the next line (or, if the line \hich\af4\dbch\af4\loch\f4 is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor).\par \hich\af4\dbch\af4\loch\f4 2.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:select mode}}}{\hich\af4\dbch\af4\loch\f4 If the second character is zero, the editor is set to line-oriented selects; if one, it is set to character-oriented \hich\af4\dbch\af4\loch\f4 selects.\par \hich\af4\dbch\af4\loch\f4 3.\tab This flag is not used by the current version of the ORCA editor.  It should be set to 0.\par \hich\af4\dbch\af4\loch\f4 4.\tab The fourth character is used by the ORCA/Desktop editor, and is used to set the default cursor mode.  A zero will cause the editor to start in over stri\hich\af4\dbch\af4\loch\f4 ke mode; a one causes the editor to start in insert mode.\par \hich\af4\dbch\af4\loch\f4 5.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:tab mode}}}{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tabs}}}{\hich\af4\dbch\af4\loch\f4 If the fifth character is a 1, the editor inserts a tab character in the source file when the Tab command is used to tab to a tab stop.  If the character is a\hich\af4\dbch\af4\loch\f4  0, the editor inserts an appropriate number of spaces, instead.\par \hich\af4\dbch\af4\loch\f4 6.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 editor\:over strike mode}}}{\hich\af4\dbch\af4\loch\f4 If the sixth character is a 0, the editor will start in over strike mode; if it is a 1, the editor starts in insert mode.  Using a separate flag for the tex\hich\af4\dbch\af4\loch\f4 t based editor (this one) and the desktop editor (see the fourth flag) lets you enter one mode in the desktop editor, and a different mode in the text based editor.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The third line of each set of lines in the SYSTABS file sets default tab stops.  There are\hich\af4\dbch\af4\loch\f4  255 zeros and ones, representing the 255 character positions available on the edit line.  The ones indicate the positions of the tab stops.  A two in any column of this line sets the end of the line; if the characters extend past this marker, the line is\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 wrapped.  The column containing the two then replaces the default end-of-line column (the default right margin) when the editor is set to that language.\par \hich\af4\dbch\af4\loch\f4 For example, the following lines define the defaults for ORCA Assembly Language:\par }\pard\plain \s26\qj\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs12 \par }{\fs16 \hich\af2\dbch\af4\loch\f2 8\par \hich\af2\dbch\af4\loch\f2 100100\par \hich\af2\dbch\af4\loch\f2 000000001000\hich\af2\dbch\af4\loch\f2 0000100000001000000010000000100000001000000000000000100000001000000...\par }{\fs12 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The last line continues on for a total of 255 characters.\par \hich\af4\dbch\af4\loch\f4 If no defaults are specified for a language (that is, there are no lines in the SYSTABS file for that language), then the edit\hich\af4\dbch\af4\loch\f4 or assumes the following defaults:\par \par \bullet \tab }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  sends the cursor to column one.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Line-oriented selects.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Word wrapping starts in column 80.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 There is a tab stop every eighth column.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The editor starts in over strike mode.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Tab characters are inserted to \hich\af4\dbch\af4\loch\f4 create tabbed text.\par \par \hich\af4\dbch\af4\loch\f4 Note that you can change tabs and editing modes while in the editor.\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 10 \endash  The Resource Compiler\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318335}\hich\af4\dbch\af4\loch\f4 Chapter 10 - The Resource Compiler{\*\bkmkend _Toc495318335}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par {\*\bkmkstart Rez}\hich\af4\dbch\af4\loch\f4 This chapter describes the use and operation of the resource compiler.  Key points covered in this chapter are:\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 Creation of r\hich\af4\dbch\af4\loch\f4 esource description files (Rez source files).\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Creating and using resource type statements.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Using Rez to compile a resource description file to create a resource fork.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Command, options, and capabilities of the resource compiler.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318336}\hich\af4\dbch\af4\loch\f4 Overview{\*\bkmkend _Toc495318336}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 The Resource Compiler compiles a text file (or files) called a resource description file and produces a resource file as output.  The resource decompiler, DeRez, decompiles an existing resource, producing a new resource description file that can be unders\hich\af4\dbch\af4\loch\f4 tood by the resource compiler.\par \hich\af4\dbch\af4\loch\f4 Resource description files have a language type of REZ.  By convention, the name of a resource description file ends with .rez.  The REZ shell command enables you to set the language type to the rez language.\par \hich\af4\dbch\af4\loch\f4 The resource com\hich\af4\dbch\af4\loch\f4 piler can combine resources or resource descriptions from a number of files into a single resource file.  The resource compiler supports preprocessor directives that allow you to substitute macros, include other files, and use if-then-else constructs.  (T\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 ese are described under "Preprocessor Directives" later in this chapter.)\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318337}\hich\af4\dbch\af4\loch\f4 Resource Decompiler{\*\bkmkend _Toc495318337}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 The DeRez utility creates a textual representation of a resource file based on resource type declarations identical to those used by the resource co\hich\af4\dbch\af4\loch\f4 mpiler.  (If you don't specify any type declarations, the output of DeRez takes the form of raw data statements.)  The output of DeRez is a resource description file that may be used as input to the resource compiler.  This file can be edited using the OR\hich\af4\dbch\af4\loch\f4 C\hich\af4\dbch\af4\loch\f4 A editor, allowing you to add comments, translate resource data to a foreign language, or specify conditional resource compilation by using the if-then-else structures of the preprocessor.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318338}\hich\af4\dbch\af4\loch\f4 Type Declaration Files{\*\bkmkend _Toc495318338}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 The resource compiler and DeRe\hich\af4\dbch\af4\loch\f4 z automatically look in the 13:RInclude directory, as well as the current directory, for files that are specified by file name on the command line.  They also look in these directories for any files specified by a #include preprocessor directive in the re\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ource description file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318339}\hich\af4\dbch\af4\loch\f4 Using the Resource Compiler and DeRez{\*\bkmkend _Toc495318339}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 The resource compiler and DeRez are primarily used to create and modify resource files.  The resource compiler can also form an integral part of the process of building a program. \hich\af4\dbch\af4\loch\f4  For instance, when putting together a desk accessory or driver, you could use the resource compiler to combine the linker's output with other resources, creating an executable program file.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318340}\hich\af4\dbch\af4\loch\f4 Structure of a Resource Description File{\*\bkmkend _Toc495318340}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resource descripti\hich\af4\dbch\af4\loch\f4 on file}}}{\hich\af4\dbch\af4\loch\f4 The resource description file consists of resource type declarations (which can be included from another file) followed by resource data for the declared types.  Note that the resource compiler and resource decompiler have no built-in resource ty\hich\af4\dbch\af4\loch\f4 pes.  You need to define your own types or include the appropriate .rez files.\par \hich\af4\dbch\af4\loch\f4 A resource description file may contain any number of these statements:\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 include\tab Include resources from another file.\par \hich\af4\dbch\af4\loch\f4 read\tab Read the data fork of a file and include it as a resou\hich\af4\dbch\af4\loch\f4 rce.\par \hich\af4\dbch\af4\loch\f4 data\tab Specify raw data.\par \hich\af4\dbch\af4\loch\f4 type\tab Type declaration \endash  declare resource type descriptions for subsequent resource statements.\par \hich\af4\dbch\af4\loch\f4 resource\tab Data specification \endash  specify data for a resource type declared in previous type statements.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Each of these statements is des\hich\af4\dbch\af4\loch\f4 cribed in the sections that follow.\par \hich\af4\dbch\af4\loch\f4 A type declaration provides the pattern for any associated resource data specifications by indicating data types, alignment, size and placement of strings, and so on.  You can interspace type declarations and data in the\hich\af4\dbch\af4\loch\f4  resource description file so long as the declaration for a given resource precedes any resource statements that refer to it.  An error is returned if data (that is, a resource statement) is given for a type that has not been previously defined.  Whether \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4  type was declared in a resource description file or in a #include file, you can redeclare it by providing a new declaration later in a resource description file.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:comments}}}{\hich\af4\dbch\af4\loch\f4 A resource description file can also include comments and preprocessor d\hich\af4\dbch\af4\loch\f4 irectives.  Comments can be included any place white space is allowed in a resource description file by putting them within the comment delimiters /* and */.  Note that comments do not nest.  For example, this is one comment:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Hello /* there */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The res\hich\af4\dbch\af4\loch\f4 ource compiler also supports the use of // as a comment delimiter.  And characters that follow // are ignored, up to the end of the current line.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type 0x8001 \{ // the rest of this line is ignored\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Preprocessor directives substitute macro definitions and i\hich\af4\dbch\af4\loch\f4 nclude files, and provide if-then-else processing before other resource compiling takes place.  The syntax of the preprocessor is very similar to that of the C-language preprocessor.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318341}\hich\af4\dbch\af4\loch\f4 Sample Resource Description File{\*\bkmkend _Toc495318341}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 An easy way to learn about\hich\af4\dbch\af4\loch\f4  the resource description format is to decompile some existing resources.  For example, the following command decompiles only the rIcon resources in an application called Sample, according to the declaration in 13:RInclude:Types.rez.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 derez sample -only 0x\hich\af2\dbch\af4\loch\f2 8001 types.rez >derez.out\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Note that DeRez automatically finds the file types.rez in 13:RInclude.  After executing this command, the file derez.out would contain the following decompiled resource:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 resource 0x8001  (0x1)  \{\par \hich\af2\dbch\af4\loch\f2       0x8000,\par \hich\af2\dbch\af4\loch\f2       20,\par \hich\af2\dbch\af4\loch\f2       28\par \hich\af2\dbch\af4\loch\f2       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FFFF FF00 0000 0000 0000 FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FF\hich\af2\dbch\af4\loch\f2 FF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par \hich\af2\dbch\af4\loch\f2       $"0000 0000 0000 0000 0000 0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0FFF FFF\hich\af2\dbch\af4\loch\f2 F FFFF FFF0 0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0FFF FFFF FFFF FFF0\hich\af2\dbch\af4\loch\f2  0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par \hich\af2\dbch\af4\loch\f2       $"0000 0000 0000 0000 0000 0000 0000 0000"\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Note that this statement would be identical to the resource description in the original resource description file, with the possible exce\hich\af4\dbch\af4\loch\f4 ption of minor differences in formatting.  The resource data corresponds to the following type declaration, contained in types.rez:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*-------------------------- rIcon -----------------------*/\par \hich\af2\dbch\af4\loch\f2 type rIcon \{\par \hich\af2\dbch\af4\loch\f2         hex integer;      /* Icon Type bit 15  1 \hich\af2\dbch\af4\loch\f2 = color, 0 = mono */\par \hich\af2\dbch\af4\loch\f2 image:\par \hich\af2\dbch\af4\loch\f2         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par \hich\af2\dbch\af4\loch\f2         integer;                    /* height of icon in pixels */\par \hich\af2\dbch\af4\loch\f2         integer;                    /* width of icon in pixels */\par \hich\af2\dbch\af4\loch\f2         hex string [$$Wor\hich\af2\dbch\af4\loch\f2 d(image)]; /* icon image */\par \hich\af2\dbch\af4\loch\f2 mask:\par \hich\af2\dbch\af4\loch\f2         hex string;                 /* icon mask */\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Type and resource statements are explained in detail in the reference section that follows.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318342}\hich\af4\dbch\af4\loch\f4 Resource Description Statements{\*\bkmkend _Toc495318342}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This section describes the syntax and use \hich\af4\dbch\af4\loch\f4 of the five types of resource description statements available for the resource compiler:  include, read, data, type and resource.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318343}\hich\af4\dbch\af4\loch\f4 Syntax Notation{\*\bkmkend _Toc495318343}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The syntax notation in this chapter follows the conventions used earlier in the book.  In addition, the follo\hich\af4\dbch\af4\loch\f4 wing conventions are used:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 Words that are part of the resource description language are shown in the Courier font to distinguish them from surrounding text.  The resource compiler is not sensitive to the case of these words.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 Punctuation characters su\hich\af4\dbch\af4\loch\f4 ch as commas (,), semicolons (;), and quotation marks (' and ") are to be written as shown.  If one of the syntax notation characters (for example, [ or ]) must be written as a literal, it is shown enclosed by "curly" single quotation marks (\lquote ...\rquote ); for e\hich\af4\dbch\af4\loch\f4 x\hich\af4\dbch\af4\loch\f4 ample,\par \par \tab }{\fs18 \hich\af2\dbch\af4\loch\f2 bitstring}{\hich\af4\dbch\af4\loch\f4  \lquote [\rquote  }{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4  \lquote ]\rquote \par \par \tab \hich\af4\dbch\af4\loch\f4 In this case, the brackets would be typed literally \endash  they do }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  mean that the enclosed element is optional.\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 Spaces between syntax elements, constants, and punctuation are optional they are shown for readability only\hich\af4\dbch\af4\loch\f4 .\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Tokens in resource description statements may be separated by spaces, tabs, returns, or comments.\par \hich\af4\dbch\af4\loch\f4 There are three terms used in the syntax of the resource description language that have not been used earlier to describe the shell.  The are:\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\i \hich\af4\dbch\af4\loch\f4 resource-ID}{\tab \hich\af4\dbch\af4\loch\f4 A long expression.  (Expressions are defined later.)\par }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\tab \hich\af4\dbch\af4\loch\f4 A word expression.\par }{\i \hich\af4\dbch\af4\loch\f4 ID-range}{\tab \hich\af4\dbch\af4\loch\f4 A range of }{\i \hich\af4\dbch\af4\loch\f4 resource-IDs}{\hich\af4\dbch\af4\loch\f4 , as in ID[:ID].\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318344}\hich\af4\dbch\af4\loch\f4 Include \endash  Include Resources from Another File{\*\bkmkend _Toc495318344}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resource description file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:include statement}}}{\hich\af4\dbch\af4\loch\f4 The includ\hich\af4\dbch\af4\loch\f4 e statement lets you read resources from an existing file and include all or some of them.\par \hich\af4\dbch\af4\loch\f4 An }{\fs18 \hich\af2\dbch\af4\loch\f2 include}{\hich\af4\dbch\af4\loch\f4  statement can take the following forms:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab }{\fs18 \hich\af2\dbch\af4\loch\f2 include}{\hich\af4\dbch\af4\loch\f4  }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4  [ }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  [ \lquote (}{\i \rquote \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 [:}{\i \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 ]\lquote )\rquote ]];\par \par \tab \hich\af4\dbch\af4\loch\f4 Read the resource of type }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  with the specified re\hich\af4\dbch\af4\loch\f4 source ID range in }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .  If the resource ID is omitted, read all resources of the type }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  in }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .  If }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  is omitted, read all the resources in }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 include }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4   not }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  ;\par \par \tab \hich\af4\dbch\af4\loch\f4 Read all resources in }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4  that are not of t\hich\af4\dbch\af4\loch\f4 he type }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4 .\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 include }{\i \hich\af4\dbch\af4\loch\f4 file resource-type1}{\hich\af4\dbch\af4\loch\f4  as }{\i \hich\af4\dbch\af4\loch\f4 resource-type2}{\hich\af4\dbch\af4\loch\f4 ;\par \par \tab \hich\af4\dbch\af4\loch\f4 Read all resources of type }{\i \hich\af4\dbch\af4\loch\f4 resource-type1}{\hich\af4\dbch\af4\loch\f4  and include them as resources of }{\i \hich\af4\dbch\af4\loch\f4 resource-type2}{\hich\af4\dbch\af4\loch\f4 .\par \par \bullet \tab \hich\af4\dbch\af4\loch\f4 include }{\i \hich\af4\dbch\af4\loch\f4 file resource-type1}{\hich\af4\dbch\af4\loch\f4  \lquote (}{\i \rquote \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 [:}{\i \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 ]\lquote )\rquote \par \tab \tab \hich\af4\dbch\af4\loch\f4 as }{\i \hich\af4\dbch\af4\loch\f4 resource-type2}{\hich\af4\dbch\af4\loch\f4  \lquote (}{\i \rquote \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 [,}{\i \hich\af4\dbch\af4\loch\f4 attributes}{\hich\af4\dbch\af4\loch\f4 ...]\lquote )\rquote ;\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \tab \hich\af4\dbch\af4\loch\f4 Read the resource in }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4  of type }{\i \hich\af4\dbch\af4\loch\f4 resource-type1}{\hich\af4\dbch\af4\loch\f4  with the specified ID range, and include it as a resource of }{\i \hich\af4\dbch\af4\loch\f4 resource-type2}{\hich\af4\dbch\af4\loch\f4  with the specified ID.  You can optionally specify resource attributes.  (See "Resource Attributes," later in this section.)\par \par \hich\af4\dbch\af4\loch\f4 Ex\hich\af4\dbch\af4\loch\f4 amples:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 include "otherfile";\tab /* include all resources from the file */\par \hich\af2\dbch\af4\loch\f2 include "otherfile" rIcon;\tab /* read only the rIcon resources */\par \hich\af2\dbch\af4\loch\f2 include "otherfile" rIcon (128); /* read only rIcon resource 128 */\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 AS Resource Description Syntax\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The following string v\hich\af4\dbch\af4\loch\f4 ariables can be used in the as resource description to modify the resource information in }{\fs18 \hich\af2\dbch\af4\loch\f2 include}{\hich\af4\dbch\af4\loch\f4  statements:\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\fs18 \hich\af2\dbch\af4\loch\f2 $$Type}{\tab \hich\af4\dbch\af4\loch\f4 Type of resource from include file.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$ID}{\tab \hich\af4\dbch\af4\loch\f4 ID of resource from include file.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Attributes}{\tab \hich\af4\dbch\af4\loch\f4 Attributes of resource from include file.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 For exa\hich\af4\dbch\af4\loch\f4 mple, to include all rIcon resources from one file and keep the same information but also set the preload attribute (64 sets it):\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 INCLUDE "file" rIcon (0:40) AS rIcon ($$ID, $$Attributes | 64);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Type}{\hich\af4\dbch\af4\loch\f4 , }{\fs18 \hich\af2\dbch\af4\loch\f2 $$ID}{\hich\af4\dbch\af4\loch\f4 , and }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Attributes}{\hich\af4\dbch\af4\loch\f4  variables are also set an\hich\af4\dbch\af4\loch\f4 d legal within a normal resource statement.  At any other time the values of these variables are undefined.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Resource Attributes\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:resource attributes}}}{\hich\af4\dbch\af4\loch\f4 You can specify attributes as a numeric expression (as described in the }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Toolbox Refer\hich\af4\dbch\af4\loch\f4 ence, Volume 3}{\hich\af4\dbch\af4\loch\f4 ) or you can set them individually by specifying one of the keywords from any of the sets in Table 10.1.  You can specify more than one attribute by separating the keywords with a comma (,).\par \par }\pard\plain \s31\qj\fi-3060\li3420\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Default\tab Alternative\tab Meaning\par }\pard\plain \s16\qj\fi-3060\li3420\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 unlocked\tab locked}{\tab \hich\af4\dbch\af4\loch\f4 Locked\hich\af4\dbch\af4\loch\f4  resources cannot be moved by the Memory Manager.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 moveable\tab fixed}{\tab \hich\af4\dbch\af4\loch\f4 Specifies whether the Memory Manager can move the block when it is unlocked.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 nonconvert\tab convert}{\tab \hich\af4\dbch\af4\loch\f4 Convert resources require a resource converter.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 handleload\tab absoluteload}{\tab \hich\af4\dbch\af4\loch\f4 Absolute forces the res\hich\af4\dbch\af4\loch\f4 ource to be loaded at an absolute address.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 nonpurgeable\tab purgeable1}{\tab \hich\af4\dbch\af4\loch\f4 Purgeable resources can be automatically purged by \par \tab }{\fs18 \hich\af2\dbch\af4\loch\f2 purgeable2}{\tab \hich\af4\dbch\af4\loch\f4 the Memory Manager.  Purgeable3 are purged\par \tab }{\fs18 \hich\af2\dbch\af4\loch\f2 purgeable3}{\tab \hich\af4\dbch\af4\loch\f4 before purgeable2, which are purged before purgeable1.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 unprotected}{\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 pro\hich\af2\dbch\af4\loch\f2 tected}{\tab \hich\af4\dbch\af4\loch\f4 Protected resources cannot be modified by the Resource Manager.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 nonpreload\tab preload}{\tab \hich\af4\dbch\af4\loch\f4 Preloaded resources are placed in memory as soon as the Resource Manager opens the resource file.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 crossbank\tab nocrossbank}{\tab \hich\af4\dbch\af4\loch\f4 A crossbank resource can cross memory bank bou\hich\af4\dbch\af4\loch\f4 ndaries.  Only data, not code, can cross bank boundaries.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 specialmemory\tab nospecialmemory}{\tab \hich\af4\dbch\af4\loch\f4 A special memory resource can be loaded in banks $00, $01, $E0 and $E1.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 notpagealigned\tab pagealigned}{\tab \hich\af4\dbch\af4\loch\f4 A page-aligned resource must be loaded with a starting address that i\hich\af4\dbch\af4\loch\f4 s an even multiple of 256.\par }\pard \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 10.1  Resource Attribute Keywords\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318345}\hich\af4\dbch\af4\loch\f4 Read \endash  Read Data as a Resource{\*\bkmkend _Toc495318345}\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 read }{\i \hich\af2\dbch\af4\loch\f2 resource-type}{\hich\af2\dbch\af4\loch\f2  \lquote (\rquote  }{\i \hich\af2\dbch\af4\loch\f2 ID}{\hich\af2\dbch\af4\loch\f2  [ , }{\i \hich\af2\dbch\af4\loch\f2 attributes}{\hich\af2\dbch\af4\loch\f2  ] \lquote )\rquote  }{\i \hich\af2\dbch\af4\loch\f2 file}{\hich\af2\dbch\af4\loch\f2  ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:read statement}}}{\hich\af4\dbch\af4\loch\f4 The }{\fs18 \hich\af2\dbch\af4\loch\f2 read}{\hich\af4\dbch\af4\loch\f4  statement lets you read a file's data fork as a resource.  It read\hich\af4\dbch\af4\loch\f4 s the data fork from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4  and writes it as a resource with the type }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  and the resource ID }{\i \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 , with the optional resource attributes.\par \hich\af4\dbch\af4\loch\f4 Example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 read rText (0x1234, Purgeable3) "filename";\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318346}\hich\af4\dbch\af4\loch\f4 Data \endash  Specify Raw Data{\*\bkmkend _Toc495318346}\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 data }{\i \hich\af2\dbch\af4\loch\f2 resource-type}{\hich\af2\dbch\af4\loch\f2  \lquote (\rquote  }{\i \hich\af2\dbch\af4\loch\f2 ID}{\hich\af2\dbch\af4\loch\f2  [ , }{\i \hich\af2\dbch\af4\loch\f2 att\hich\af2\dbch\af4\loch\f2 ributes}{\hich\af2\dbch\af4\loch\f2  ] \lquote )\rquote   \lquote \{\rquote  \par \tab }{\i \hich\af2\dbch\af4\loch\f2 data-string\par }{\tab \lquote \}\rquote \hich\af2\dbch\af4\loch\f2  ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:data statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 Use the }{\fs18 \hich\af2\dbch\af4\loch\f2 data}{\hich\af4\dbch\af4\loch\f4  statement to specify raw data as a sequence of bits, without any formatting.\par \hich\af4\dbch\af4\loch\f4 The data found in }{\i \hich\af4\dbch\af4\loch\f4 data-string}{\hich\af4\dbch\af4\loch\f4  is read and written as a resource with the type }{\i \hich\af4\dbch\af4\loch\f4 resour\hich\af4\dbch\af4\loch\f4 ce-type}{\hich\af4\dbch\af4\loch\f4  and the ID }{\i \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 .  You can specify resource attributes.\par \hich\af4\dbch\af4\loch\f4 When DeRez generates a resource description, it used the data statement to represent any resource type that doesn't have a corresponding type declaration or cannot be decompiled for some other re\hich\af4\dbch\af4\loch\f4 ason.\par \hich\af4\dbch\af4\loch\f4 Example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 data rPString (0xABCD) \{\par \tab \hich\af2\dbch\af4\loch\f2 $"03414243"\par \tab \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318347}\hich\af4\dbch\af4\loch\f4 Type \endash  Declare Resource Type{\*\bkmkend _Toc495318347}\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type }{\i \hich\af2\dbch\af4\loch\f2 resource-type}{\hich\af2\dbch\af4\loch\f2  [ \lquote (\rquote  }{\i \hich\af2\dbch\af4\loch\f2 ID-range}{\hich\af2\dbch\af4\loch\f2  \lquote )\rquote  ]  \lquote \{\rquote  \par \tab }{\i \hich\af2\dbch\af4\loch\f2 type-specification}{\hich\af2\dbch\af4\loch\f2 ...\par \tab \lquote \}\rquote \hich\af2\dbch\af4\loch\f2  ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:type statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:resource types}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resources}{\txe see Rez}}}{\hich\af4\dbch\af4\loch\f4 A type \hich\af4\dbch\af4\loch\f4 declaration provides a template that defines the structure of the resource data for a single resource type or for individual resources.  If more than one type declaration is given for a resource type the last one read before the data definition is the one\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 that's used.  This lets you override declarations from include files of previous resource description files.\par \hich\af4\dbch\af4\loch\f4 After the type declaration, any resource statement for the type }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  uses the declaration \{}{\i \hich\af4\dbch\af4\loch\f4 type-specification}{\hich\af4\dbch\af4\loch\f4 ...\}.  The optional }{\i \hich\af4\dbch\af4\loch\f4 ID-range}{\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 specification causes the declaration to apply only to a given resource ID or range of IDs.\par }{\i \hich\af4\dbch\af4\loch\f4 Type-specification}{\hich\af4\dbch\af4\loch\f4  is one or more of the following kinds of type specifier:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1800\tx3240\tx4680\tx6120\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 array\tab bitstring\tab boolean\tab byte\tab char\par \hich\af2\dbch\af4\loch\f2 cstring\tab fill\tab integer\tab longint\tab point\par \hich\af2\dbch\af4\loch\f2 pstring\tab rect\tab string\tab \hich\af2\dbch\af4\loch\f2 switch\tab wstring\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 You can also declare a resource type that uses another resource's type declaration by using the following variant of the type statement:\par \par }\pard\plain \s26\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type }{\i \hich\af2\dbch\af4\loch\f2 resource-type1}{\hich\af2\dbch\af4\loch\f2  [ \lquote (\rquote  }{\i \hich\af2\dbch\af4\loch\f2 ID-range}{\hich\af2\dbch\af4\loch\f2  \lquote )\rquote  ]  as }{\i \hich\af2\dbch\af4\loch\f2 resource-type2}{\par }\pard \s26\fi720\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 [ \lquote (\rquote  }{\i \hich\af2\dbch\af4\loch\f2 ID}{\hich\af2\dbch\af4\loch\f2  \lquote )\rquote  ] ;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Integer, Longint, Byte a\hich\af4\dbch\af4\loch\f4 nd Bitstring\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 [ }{\fs18 \hich\af2\dbch\af4\loch\f2 unsigned}{\hich\af4\dbch\af4\loch\f4  ] [ }{\i \hich\af4\dbch\af4\loch\f4 radix}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 integer}{\hich\af4\dbch\af4\loch\f4  [ = }{\i \hich\af4\dbch\af4\loch\f4 expression}{\hich\af4\dbch\af4\loch\f4  | }{\i \hich\af4\dbch\af4\loch\f4 symbol-definition}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }{\hich\af4\dbch\af4\loch\f4 [ }{\fs18 \hich\af2\dbch\af4\loch\f2 unsigned}{\hich\af4\dbch\af4\loch\f4  ] [ }{\i \hich\af4\dbch\af4\loch\f4 radix}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 longint}{\hich\af4\dbch\af4\loch\f4  [ = }{\i \hich\af4\dbch\af4\loch\f4 expression}{\hich\af4\dbch\af4\loch\f4  | }{\i \hich\af4\dbch\af4\loch\f4 symbol-definition}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }{\hich\af4\dbch\af4\loch\f4 [ }{\fs18 \hich\af2\dbch\af4\loch\f2 unsigned}{\hich\af4\dbch\af4\loch\f4  ] [ }{\i \hich\af4\dbch\af4\loch\f4 radix}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 byte}{\hich\af4\dbch\af4\loch\f4  [ = }{\i \hich\af4\dbch\af4\loch\f4 expression}{\hich\af4\dbch\af4\loch\f4  | }{\i \hich\af4\dbch\af4\loch\f4 symbol-definition}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }{\hich\af4\dbch\af4\loch\f4 [ }{\fs18 \hich\af2\dbch\af4\loch\f2 unsigned}{\hich\af4\dbch\af4\loch\f4  ] [ }{\i \hich\af4\dbch\af4\loch\f4 radix}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 bitstring}{\hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 [}{\rquote \hich\af4\dbch\af4\loch\f4  }{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 ]}{\rquote \hich\af4\dbch\af4\loch\f4  [ = }{\i \hich\af4\dbch\af4\loch\f4 expression}{\hich\af4\dbch\af4\loch\f4  | }{\i \hich\af4\dbch\af4\loch\f4 symbol-definition}{\hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }{\par \hich\af4\dbch\af4\loch\f4 In each case, space is reserved in the resource for an integer or a long integer.\par \hich\af4\dbch\af4\loch\f4 If the type appears alone, with no other parameters, the resource compiler sets aside space for a value that must be given\hich\af4\dbch\af4\loch\f4  later when the resource type is used to define an actual resource.\par \hich\af4\dbch\af4\loch\f4 A type followed by a equal sign and an expression defines a value that will be preset to some specific integer.  Since the value is already given, you do not need to code the value again w\hich\af4\dbch\af4\loch\f4 hen the resource type is used to define a resource.\par \hich\af4\dbch\af4\loch\f4 A symbol-definition is an identifier, an equal sign, and an expression, optionally followed by a comma and another symbol definition.  It sets up predefined identifier that can be used to fill in the valu\hich\af4\dbch\af4\loch\f4 e.  You still have the option of coding a numeric value, or you can use one of the constants.  This is not a default value, though: you still must code either one of the constants or a numeric value when you use the resource type to define a resource.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 The }{\fs18 \hich\af2\dbch\af4\loch\f2 unsigned}{\hich\af4\dbch\af4\loch\f4  prefix signals DeRez that the number should be displayed without a sign \endash  that the high-order bit can be used for data and the value of the integer cannot be negative.  The }{\fs18 \hich\af2\dbch\af4\loch\f2 unsigned}{\hich\af4\dbch\af4\loch\f4  prefix is ignored by the resource compiler but is n\hich\af4\dbch\af4\loch\f4 eeded by DeRez to correctly represent a decompiled number.  The resource compiler uses a sign if it is specified in the data.  For example, $FFFFFF85 and -$7B are equivalent.\par \hich\af4\dbch\af4\loch\f4 Radix is one of the following constants:\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\tx2520\tx3600\tx4680\adjustright {\hich\af4\dbch\af4\loch\f4 hex\tab decimal\tab octal\tab binary\tab literal\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The r\hich\af4\dbch\af4\loch\f4 adix is used by DeRez to decide what number format to use for the output.  The radix field is ignored by the resource compiler.\par \hich\af4\dbch\af4\loch\f4 Each of the numeric types generates a different format of integer.  In each case, the value is in two's complement form, least s\hich\af4\dbch\af4\loch\f4 ignificant byte first.  The various formats are:\par \par }\pard\plain \s31\qj\li720\ri1260\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2880\tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 type\tab size\tab range\par }\pard\plain \s16\qj\li720\ri1260\sl223\slmult1\widctlpar\tx2880\tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 byte\tab 1\tab -128..255\par \hich\af4\dbch\af4\loch\f4 integer\tab 2\tab -32768..65535\par \hich\af4\dbch\af4\loch\f4 longint\tab 4\tab -2147483648..4294967295\par \hich\af4\dbch\af4\loch\f4 bitstring[length]\tab varies\tab varies\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Sizes are in bytes.  The range may seem a little odd at first; the resource compil\hich\af4\dbch\af4\loch\f4 er accepts either negative or positive values, treating positive values that would normally be too large for a signed value of the given length as if the value were unsigned.\par \hich\af4\dbch\af4\loch\f4 The bitstring type is different from most types in other languages.  It is a vari\hich\af4\dbch\af4\loch\f4 able-length integer field, where you specify the number of bits you want as the length field.  If you specify a value that only fills part of a byte, then the next field will pick up where the bitstring field stopped.  For example, two bitstring[4] values\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  placed back to back, would require only one byte of storage in the resource file.  In general, you should be sure that bitstring fields end on even byte values so the following fields don't get bit aligned to the end of the partially filled byte.\par \par \hich\af4\dbch\af4\loch\f4 Example\hich\af4\dbch\af4\loch\f4 :\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*---------------------- rToolStartup ---------------------*/\par \hich\af2\dbch\af4\loch\f2 type rToolStartup \{\par \hich\af2\dbch\af4\loch\f2     integer = 0;                        /* flags must be zero */\par \hich\af2\dbch\af4\loch\f2     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par \hich\af2\dbch\af4\loch\f2     Integer = 0;\par \hich\af2\dbch\af4\loch\f2     Longint = 0;\par \hich\af2\dbch\af4\loch\f2   \hich\af2\dbch\af4\loch\f2   integer = $$Countof(TOOLRECS);      /* number of tools */\par \hich\af2\dbch\af4\loch\f2         array TOOLRECS \{\par \hich\af2\dbch\af4\loch\f2             Integer;                    /* ToolNumber */\par \hich\af2\dbch\af4\loch\f2             Integer;                    /* version */\par \hich\af2\dbch\af4\loch\f2         \};\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \par \hich\af2\dbch\af4\loch\f2 resource rToolStartup (1) \{\par \hich\af2\dbch\af4\loch\f2     mode640,\par \hich\af2\dbch\af4\loch\f2    \hich\af2\dbch\af4\loch\f2  \{\par \hich\af2\dbch\af4\loch\f2         1,1,\tab /* Tool Locator */\par \hich\af2\dbch\af4\loch\f2         2,1,\tab /* Memory Manager */\par \hich\af2\dbch\af4\loch\f2         3,1,\tab /* Miscellaneous Tool Set */\par \hich\af2\dbch\af4\loch\f2         4,1,\tab /* QuickDraw II */\par \hich\af2\dbch\af4\loch\f2         5,1,\tab /* Desk Manager */\par \hich\af2\dbch\af4\loch\f2         6,1,\tab /* Event Manager */\par \hich\af2\dbch\af4\loch\f2         11,1,\tab /* Integer Math Tool Set */\par \hich\af2\dbch\af4\loch\f2       \hich\af2\dbch\af4\loch\f2   14,1,\tab /* Window Manager */\par \hich\af2\dbch\af4\loch\f2         15,1,\tab /* Menu Manager */\par \hich\af2\dbch\af4\loch\f2         16,1,\tab /* Control Manager */\par \hich\af2\dbch\af4\loch\f2         18,1,\tab /* QuickDraw II Auxiliary */\par \hich\af2\dbch\af4\loch\f2         20,1,\tab /* LineEdit Tool Set */\par \hich\af2\dbch\af4\loch\f2         21,1,\tab /* Dialog Manager */\par \hich\af2\dbch\af4\loch\f2         22,1,\tab /* Scrap Manager */\par \hich\af2\dbch\af4\loch\f2         \hich\af2\dbch\af4\loch\f2 27,1,\tab /* Font Manager */\par \hich\af2\dbch\af4\loch\f2         28,1,\tab /* List Manager */\par \hich\af2\dbch\af4\loch\f2         30,1,\tab /* Resource Manager */\par \hich\af2\dbch\af4\loch\f2     \}\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Boolean\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 boolean}{\fs20 \hich\af4\dbch\af4\loch\f4  [ = }{\i\fs20 \hich\af4\dbch\af4\loch\f4 constant}{\fs20 \hich\af4\dbch\af4\loch\f4  | }{\i\fs20 \hich\af4\dbch\af4\loch\f4 symbolic-value...}{\fs20 \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A boolean value is a one-bit value, set to either false (0) or true (1).  You can also use the num\hich\af4\dbch\af4\loch\f4 eric values.\par \hich\af4\dbch\af4\loch\f4 True and false are actually predefined constants.\par \hich\af4\dbch\af4\loch\f4 The type boolean is equivalent to\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 unsigned bitstring[1]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\fs18 \hich\af4\dbch\af4\loch\f4 Example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\fs16 \hich\af2\dbch\af4\loch\f2 type 0x001 \{\par \hich\af2\dbch\af4\loch\f2    boolean;\par \hich\af2\dbch\af4\loch\f2    boolean;\par \hich\af2\dbch\af4\loch\f2    boolean;\par \hich\af2\dbch\af4\loch\f2    boolean;\par \hich\af2\dbch\af4\loch\f2    bitstring[4] = 0;\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2    \};\par \par \hich\af2\dbch\af4\loch\f2 resource 0x001 (1) \{\par \hich\af2\dbch\af4\loch\f2    true, false,\hich\af2\dbch\af4\loch\f2  0, 1\par \hich\af2\dbch\af4\loch\f2    \};\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Character\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 char}{\fs20 \hich\af4\dbch\af4\loch\f4  [ = }{\i\fs20 \hich\af4\dbch\af4\loch\f4 string}{\fs20 \hich\af4\dbch\af4\loch\f4  | }{\i\fs20 \hich\af4\dbch\af4\loch\f4 symbolic-value...}{\fs20 \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A character value is an 8-bit value which holds a one-character string.  It is equivalent to }{\fs18 \hich\af2\dbch\af4\loch\f2 string[1]}{\hich\af4\dbch\af4\loch\f4 .\par \par \hich\af4\dbch\af4\loch\f4 Example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*------------------------ rMenuItem ------------------------------*/\par \hich\af2\dbch\af4\loch\f2 type rMe\hich\af2\dbch\af4\loch\f2 nuItem \{\par \hich\af2\dbch\af4\loch\f2     integer = 0;                    /* version must be zero */\par \hich\af2\dbch\af4\loch\f2     integer;                        /* item ID */\par \hich\af2\dbch\af4\loch\f2     char;                           /* item char */\par \hich\af2\dbch\af4\loch\f2     char;                           /* alt char */\par \hich\af2\dbch\af4\loch\f2     integer;                   \hich\af2\dbch\af4\loch\f2      /* item check */\par \hich\af2\dbch\af4\loch\f2     integer;                        /* flags */\par \hich\af2\dbch\af4\loch\f2     longint;                        /* item titleref */\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 resource rMenuItem (1) \{\par \hich\af2\dbch\af4\loch\f2     256,\par \hich\af2\dbch\af4\loch\f2     "Q","q",\par \hich\af2\dbch\af4\loch\f2     0,\par \hich\af2\dbch\af4\loch\f2     0,\par \hich\af2\dbch\af4\loch\f2     1\par \hich\af2\dbch\af4\loch\f2     \};\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 String, PString, WString and CString\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs20 \hich\af4\dbch\af4\loch\f4 string-type}{\fs20 \hich\af4\dbch\af4\loch\f4  [ \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 [}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 length}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 ]}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  ] [ }{\fs18 \hich\af2\dbch\af4\loch\f2 =}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 string}{\fs20 \hich\af4\dbch\af4\loch\f4  | }{\i\fs20 \hich\af4\dbch\af4\loch\f4 symbol-value...}{\fs20 \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:strings}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 String types are used to define a string in one of four formats.  The format of the string is determined by selecting one of the following for }{\i \hich\af4\dbch\af4\loch\f4 string-type}{\hich\af4\dbch\af4\loch\f4 :\par \par }\pard \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright {\fs18 \hich\af2\dbch\af4\loch\f2 [hex] string}{\tab \hich\af4\dbch\af4\loch\f4 Pl\hich\af4\dbch\af4\loch\f4 ain string; no length indicator or terminal character is generated.  The optional }{\fs18 \hich\af2\dbch\af4\loch\f2 hex}{\hich\af4\dbch\af4\loch\f4  prefix tells DeRez to display it as a hexadecimal string.  }{\fs18 \hich\af2\dbch\af4\loch\f2 String}{\hich\af4\dbch\af4\loch\f4 [n] contains n characters and is n bytes long.  The type }{\fs18 \hich\af2\dbch\af4\loch\f2 char}{\hich\af4\dbch\af4\loch\f4  is a shorthand for }{\fs18 \hich\af2\dbch\af4\loch\f2 string[1]}{\hich\af4\dbch\af4\loch\f4 .\par }{\fs18 \hich\af2\dbch\af4\loch\f2 pstring}{\tab \hich\af4\dbch\af4\loch\f4 Pasca\hich\af4\dbch\af4\loch\f4 l string; a leading byte containing the number of characters in the string is generated.  }{\fs18 \hich\af2\dbch\af4\loch\f2 Pstring}{\hich\af4\dbch\af4\loch\f4 [}{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 ] contains }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4  characters and is }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 +1 bytes long.  Since the length must fit in a byte value, the maximum length of a pstring is 255 characters.  If the string \hich\af4\dbch\af4\loch\f4 is too long, a warning is given and the string is truncated.\par }{\fs18 \hich\af2\dbch\af4\loch\f2 wstring}{\tab \hich\af4\dbch\af4\loch\f4 Word string; this is a very large pstring.  The length of a wstring is stored in a two-byte field, giving a maximum length of 65535 characters.  }{\fs18 \hich\af2\dbch\af4\loch\f2 Pstring}{\hich\af4\dbch\af4\loch\f4 [}{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 ] contains n characters and is }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 +\hich\af4\dbch\af4\loch\f4 2 bytes long.  The order of the bytes in the length word is least significant byte first; this is the normal order for bytes on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par }{\fs18 \hich\af2\dbch\af4\loch\f2 cstring}{\tab \hich\af4\dbch\af4\loch\f4 C string; a trailing null byte is added to the end of the characters.  }{\fs18 \hich\af2\dbch\af4\loch\f2 Cstring}{\hich\af4\dbch\af4\loch\f4 [}{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 ] contains }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4 -1 character\hich\af4\dbch\af4\loch\f4 s and is }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4  bytes long.  A C string of length 1 can be assigned only the value "", since }{\fs18 \hich\af2\dbch\af4\loch\f2 cstring[1]}{\hich\af4\dbch\af4\loch\f4  only has room for the terminating null.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Each string type can be followed by an optional }{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4  indicator in brackets.  }{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4  is an expression indicating th\hich\af4\dbch\af4\loch\f4 e string length in bytes.  }{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4  is a positive number in the range 1..2147483647 for string and cstring, in the range 1..255 for pstring, and in the range 1..65535 for wstring.\par \hich\af4\dbch\af4\loch\f4 If no length indicator is given, a pstring, wstring or cstring stores the numb\hich\af4\dbch\af4\loch\f4 er of characters in the corresponding data definition.  If a length indicator is given, the data may be truncated on the right or padded on the right.  The padding characters for all strings are nulls.  If the data contains more characters than the length\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 indicator provides for, the string is truncated and a warning message is given.\par \par \hich\af4\dbch\af4\loch\f4 Examples:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*---------------------- rPString ----------------------*/\par \hich\af2\dbch\af4\loch\f2 type rPString \{\par \hich\af2\dbch\af4\loch\f2         pstring;                    /* String */\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 /*---------------------- rCString --\hich\af2\dbch\af4\loch\f2 --------------------*/\par \hich\af2\dbch\af4\loch\f2 type rCString \{\par \hich\af2\dbch\af4\loch\f2         cstring;                    /* String */\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 /*---------------------- rWString ----------------------*/\par \hich\af2\dbch\af4\loch\f2 type rWString \{\par \hich\af2\dbch\af4\loch\f2         wstring;                    /* String */\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 /*------------------------ rErrorStr\hich\af2\dbch\af4\loch\f2 ing ----------------*/\par \hich\af2\dbch\af4\loch\f2 type rErrorString \{\par \hich\af2\dbch\af4\loch\f2         string;\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 resource rPString (1) \{\par \hich\af2\dbch\af4\loch\f2     "p-string",\par \hich\af2\dbch\af4\loch\f2     \};\par \par \hich\af2\dbch\af4\loch\f2 resource rCString (1) \{\par \hich\af2\dbch\af4\loch\f2     "c-string",\par \hich\af2\dbch\af4\loch\f2     \};\par \par \hich\af2\dbch\af4\loch\f2 resource rWString (1) \{\par \hich\af2\dbch\af4\loch\f2     "GS/OS input string",\par \hich\af2\dbch\af4\loch\f2     \};\par \par \hich\af2\dbch\af4\loch\f2 resource rErrorString (1) \{\par \hich\af2\dbch\af4\loch\f2     "Oops",\par \hich\af2\dbch\af4\loch\f2     \};\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Point and Rectangle\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 point}{\fs20 \hich\af4\dbch\af4\loch\f4  [ }{\fs18 \hich\af2\dbch\af4\loch\f2 =}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 point-constant}{\fs20 \hich\af4\dbch\af4\loch\f4  | }{\i\fs20 \hich\af4\dbch\af4\loch\f4 symbolic-value...}{\fs20 \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 rect}{\fs20 \hich\af4\dbch\af4\loch\f4  [ }{\fs18 \hich\af2\dbch\af4\loch\f2 =}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 rect-constant}{\fs20 \hich\af4\dbch\af4\loch\f4  | }{\i\fs20 \hich\af4\dbch\af4\loch\f4 symbolic-value...}{\fs20 \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Because points and rectangles appear so frequently in resource files, they have their own simplified syntax.  In the syntax shown, \hich\af4\dbch\af4\loch\f4 a point-constant is defined like this:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \lquote }{\fs18 \{}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 x-integer-expression}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 ,}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 y-integer-expression}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \}}{\fs20 \rquote \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 while a rect-constant looks like this:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \lquote }{\fs18 \{}{\fs20 \rquote }{\i\fs20 \hich\af4\dbch\af4\loch\f4 integer-expression}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 ,}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 integer-expression}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 ,}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 integer-expression}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 ,}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 integer-expression}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \}}{\fs20 \rquote \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 A point type creates a pa\hich\af4\dbch\af4\loch\f4 ir of integer values, with the first value corresponding to the horizontal point value and the second to the vertical point value.  A rect type is a pair of points, with the top left corner of the rectangle specified first, followed by the bottom right co\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ner.\par \par \hich\af4\dbch\af4\loch\f4 Example:\par \par }\pard\plain \s26\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*--------------------- rWindParam1 --------------------*/\par \hich\af2\dbch\af4\loch\f2 type rWindParam1 \{\par \hich\af2\dbch\af4\loch\f2         integer = $50;              /*length of parameter list, should be $50*/\par \hich\af2\dbch\af4\loch\f2         integer;                    /* wFrameBits */\par \hich\af2\dbch\af4\loch\f2         longint;             \hich\af2\dbch\af4\loch\f2        /* wTitle */\par \hich\af2\dbch\af4\loch\f2         longint;                    /* wRefCon */\par \hich\af2\dbch\af4\loch\f2         rect;                       /* ZoomRect */\par \hich\af2\dbch\af4\loch\f2         longint;                    /* wColor ID */\par \hich\af2\dbch\af4\loch\f2         point;                      /* Origin */\par \hich\af2\dbch\af4\loch\f2         point;                    \hich\af2\dbch\af4\loch\f2   /* data size */\par \hich\af2\dbch\af4\loch\f2         point;                      /* max height-width */\par \hich\af2\dbch\af4\loch\f2         point;                      /* scroll ver hors */\par \hich\af2\dbch\af4\loch\f2         point;                      /* page vers horiz */\par \hich\af2\dbch\af4\loch\f2         longint;                    /* winfoRefcon */\par \hich\af2\dbch\af4\loch\f2         i\hich\af2\dbch\af4\loch\f2 nteger;                    /* wInfoHeight */\par \hich\af2\dbch\af4\loch\f2         fill long[3];   /* wFrameDefProc,wInfoDefProc,wContDefProc */\par \hich\af2\dbch\af4\loch\f2         rect;                       /* wposition */\par \hich\af2\dbch\af4\loch\f2         longint behind=0,infront=-1;/* wPlane */\par \hich\af2\dbch\af4\loch\f2         longint;                    /* w\hich\af2\dbch\af4\loch\f2 Storage */\par \hich\af2\dbch\af4\loch\f2         integer;                    /* wInVerb */\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 resource rWindParam1 (1) \{\par \hich\af2\dbch\af4\loch\f2         0x80E4,                     /* wFrameBits */\par \hich\af2\dbch\af4\loch\f2         1,                          /* wTitle */\par \hich\af2\dbch\af4\loch\f2         0,                          /* wRefCon */\par \hich\af2\dbch\af4\loch\f2         \{0,0\hich\af2\dbch\af4\loch\f2 ,0,0\},                  /* ZoomRect */\par \hich\af2\dbch\af4\loch\f2         0,                          /* wColor ID */\par \hich\af2\dbch\af4\loch\f2         \{0,0\},                      /* Origin */\par \hich\af2\dbch\af4\loch\f2         \{416,160\},                  /* data size */\par \hich\af2\dbch\af4\loch\f2         \{416,160\},                  /* max height-width */\par \hich\af2\dbch\af4\loch\f2      \hich\af2\dbch\af4\loch\f2    \{0,0\},                      /* scroll ver hors */\par \hich\af2\dbch\af4\loch\f2         \{0,0\},                      /* page vers horiz */\par \hich\af2\dbch\af4\loch\f2         0,                          /* winfoRefcon */\par \hich\af2\dbch\af4\loch\f2         0,                          /* wInfoHeight */\par \hich\af2\dbch\af4\loch\f2         \{32,32,448,192\},            /\hich\af2\dbch\af4\loch\f2 * wposition */\par \hich\af2\dbch\af4\loch\f2         infront,                    /* wPlane */\par \hich\af2\dbch\af4\loch\f2         0,                          /* wStorage */\par \hich\af2\dbch\af4\loch\f2         0x0200                      /* wInVerb */\par \hich\af2\dbch\af4\loch\f2         \};\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Fill\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 fill}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 fill-size}{\fs20 \hich\af4\dbch\af4\loch\f4  [ \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 [}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 length}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 [}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The resource created by a resource def\hich\af4\dbch\af4\loch\f4 inition has no implicit alignment.  It's treated as a bit stream, and integers and strings can start at any bit.  The fill specifier is a way of padding fields so that they begin on a boundary that corresponds to the field type.\par \hich\af4\dbch\af4\loch\f4 The fill statement causes t\hich\af4\dbch\af4\loch\f4 he resource compiler to add the specified number of bits to the data stream.  The bits added are always set to 0.  }{\i \hich\af4\dbch\af4\loch\f4 fill-size}{\hich\af4\dbch\af4\loch\f4  is one of the following:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1260\tx2160\tx3060\tx3960\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 bit\tab nibble\tab byte\tab word\tab long\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 These declare a fill of 1, 4, 8, 16 or 32 bits, respectively.  Any of these ca\hich\af4\dbch\af4\loch\f4 n be followed by a length modifier.  }{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4  can be any value up to 2147483647; it specifies the number of these bit fields to insert.  For example, all of the following are equivalent:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 fill word[2];\par \hich\af2\dbch\af4\loch\f2 fill long;\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 fill bit[32];\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Fill statements are sometimes \hich\af4\dbch\af4\loch\f4 used as place holders, filling in constant values of zero.  You can see an example of the fill statement used for this purpose in the rWindParam1 resource type defined in types.rez.  The example in the last section shows this resource type in use.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Array\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af4\dbch\af4\loch\f4 [ }{\fs18 \hich\af2\dbch\af4\loch\f2 wide}{\fs20 \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 array}{\fs20 \hich\af4\dbch\af4\loch\f4  [ }{\i\fs20 \hich\af4\dbch\af4\loch\f4 array-name}{\fs20 \hich\af4\dbch\af4\loch\f4  | \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 [}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 length}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 ]}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  ] \lquote }{\fs18 \{}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 array-list}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \}}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:arrays}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 The }{\i \hich\af4\dbch\af4\loch\f4 array-list}{\hich\af4\dbch\af4\loch\f4  is a list of type specifications.  It can be repeated zero or more times.  The }{\fs18 \hich\af2\dbch\af4\loch\f2 wide}{\hich\af4\dbch\af4\loch\f4  option outputs the array data in a wide display format wh\hich\af4\dbch\af4\loch\f4 en the resource is decompiled with DeRez; this causes the elements that make up the }{\i \hich\af4\dbch\af4\loch\f4 array-list}{\hich\af4\dbch\af4\loch\f4  to be separated by a comma and space instead of a comma, return, and tab.\par \hich\af4\dbch\af4\loch\f4 Either }{\i \hich\af4\dbch\af4\loch\f4 array-name}{\hich\af4\dbch\af4\loch\f4  or [}{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4 ] may be specified.  }{\i \hich\af4\dbch\af4\loch\f4 Array-name}{\hich\af4\dbch\af4\loch\f4  is an identifier.  If the a\hich\af4\dbch\af4\loch\f4 rray is named, then a preceding statement should refer to that array in a constant expression with the }{\fs18 \hich\af2\dbch\af4\loch\f2 $$countof}{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 array-name}{\hich\af4\dbch\af4\loch\f4 ) function, otherwise DeRez will treat the array as an open-ended array.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type rToolStartup \{\par \hich\af2\dbch\af4\loch\f2     integer = 0;         \hich\af2\dbch\af4\loch\f2                /* flags must be zero */\par \hich\af2\dbch\af4\loch\f2     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par \hich\af2\dbch\af4\loch\f2     Integer = 0;\par \hich\af2\dbch\af4\loch\f2     Longint = 0;\par \hich\af2\dbch\af4\loch\f2     integer = $$Countof(TOOLRECS);      /* number of tools */\par \hich\af2\dbch\af4\loch\f2         array TOOLRECS \{\par \hich\af2\dbch\af4\loch\f2             Integer;     \hich\af2\dbch\af4\loch\f2                /* ToolNumber */\par \hich\af2\dbch\af4\loch\f2             Integer;                    /* version */\par \hich\af2\dbch\af4\loch\f2         \};\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The }{\fs18 \hich\af2\dbch\af4\loch\f2 $$countof}{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 array-name}{\hich\af4\dbch\af4\loch\f4 ) function returns the number of array elements ( in this case, the number of tool number, version pairs) from the resource data.\par \hich\af4\dbch\af4\loch\f4 I\hich\af4\dbch\af4\loch\f4 f length is specified, there must be exactly }{\i \hich\af4\dbch\af4\loch\f4 length}{\hich\af4\dbch\af4\loch\f4  elements.\par \hich\af4\dbch\af4\loch\f4 Array elements are generated by commas.  Commas are element separators.  Semicolons are element terminators.\par \hich\af4\dbch\af4\loch\f4 For an example of an rToolStartup resource, see "Integer, Longint, Byte and Bitstream\hich\af4\dbch\af4\loch\f4 ," earlier in this chapter.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Switch\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 switch}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \{}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 case-statement...}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \}}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:switch statement}}}{\hich\af4\dbch\af4\loch\f4 The switch statement lets you select one of a variety of types when you create your resource.  Each of the types within the switch statement are placed on a\hich\af4\dbch\af4\loch\f4  case label, which has this format:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 case}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 case-name}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\fs18 \hich\af2\dbch\af4\loch\f2 :}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 [case-body}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\fs18 \hich\af2\dbch\af4\loch\f2 ;}{\fs20 \hich\af4\dbch\af4\loch\f4  ] ...\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\i \hich\af4\dbch\af4\loch\f4 Case-name}{\hich\af4\dbch\af4\loch\f4  is an identifier.  }{\i \hich\af4\dbch\af4\loch\f4 Case-body}{\hich\af4\dbch\af4\loch\f4  may contain any number of type specifications and must include a single constant declaration per case, in this form:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 key}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 data-type}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\fs18 \hich\af2\dbch\af4\loch\f2 =}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 constant}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The key value determines which case applies.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*------------------------ rControlTemplate ------------------------*/\par \hich\af2\dbch\af4\loch\f2 type rControlTemplate \{\par \hich\af2\dbch\af4\loch\f2                                       /* pCount must be at least 6 */\par \hich\af2\dbch\af4\loch\f2         integer = 3+$$optional\hich\af2\dbch\af4\loch\f2 count (Fields); \par \hich\af2\dbch\af4\loch\f2         longint;                         /* Application defined ID */\par \hich\af2\dbch\af4\loch\f2         rect;                       /* controls bounding rectangle */\par \hich\af2\dbch\af4\loch\f2         switch \{\par \hich\af2\dbch\af4\loch\f2         \par \hich\af2\dbch\af4\loch\f2         case SimpleButtonControl:\par \hich\af2\dbch\af4\loch\f2             key longint = 0x80000000;  \hich\af2\dbch\af4\loch\f2  /* procRef */\par \hich\af2\dbch\af4\loch\f2             optional Fields \{\par \hich\af2\dbch\af4\loch\f2                 integer;                    /* flags */\par \hich\af2\dbch\af4\loch\f2                 integer;                    /* more flags */\par \hich\af2\dbch\af4\loch\f2                 longint;                    /* refcon */\par \hich\af2\dbch\af4\loch\f2                 longint;             \hich\af2\dbch\af4\loch\f2        /* Title Ref */\par \hich\af2\dbch\af4\loch\f2                 longint;                    /* color table ref */\par \hich\af2\dbch\af4\loch\f2                 KeyEquiv;\par \hich\af2\dbch\af4\loch\f2             \};\par \par \hich\af2\dbch\af4\loch\f2         case CheckControl:\par \hich\af2\dbch\af4\loch\f2             key longint = 0x82000000;       /* procRef */\par \hich\af2\dbch\af4\loch\f2             optional Fields \{\par \hich\af2\dbch\af4\loch\f2           \hich\af2\dbch\af4\loch\f2       integer;                    /* flags */\par \hich\af2\dbch\af4\loch\f2                 integer;                    /* more flags */\par \hich\af2\dbch\af4\loch\f2                 longint;                    /* refcon */\par \hich\af2\dbch\af4\loch\f2                 longint;                    /* Title Ref */\par \hich\af2\dbch\af4\loch\f2                 integer;        \hich\af2\dbch\af4\loch\f2             /* initial value */\par \hich\af2\dbch\af4\loch\f2                 longint;                    /* color table ref */\par \hich\af2\dbch\af4\loch\f2                 KeyEquiv;\par \hich\af2\dbch\af4\loch\f2             \};\par \hich\af2\dbch\af4\loch\f2         ...and so on.\par \hich\af2\dbch\af4\loch\f2     \};\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318348}\hich\af4\dbch\af4\loch\f4 Symbol Definitions{\*\bkmkend _Toc495318348}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:symbols}}}{\hich\af4\dbch\af4\loch\f4 Symbolic names for data type fields simplify the \hich\af4\dbch\af4\loch\f4 reading and writing of resource definitions.  Symbol definitions have the form\par \par }\pard\plain \qj\fi360\widctlpar\tx500\tx1280\tx1660\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs20 \hich\af4\dbch\af4\loch\f4 name}{\fs20 \hich\af4\dbch\af4\loch\f4  = }{\i\fs20 \hich\af4\dbch\af4\loch\f4 value }{\fs20 \hich\af4\dbch\af4\loch\f4  [, }{\i\fs20 \hich\af4\dbch\af4\loch\f4 name}{\fs20 \hich\af4\dbch\af4\loch\f4  = }{\i\fs20 \hich\af4\dbch\af4\loch\f4 value }{\fs20 \hich\af4\dbch\af4\loch\f4 \hich\f4  ]\u8230\'c9\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The \ldblquote }{\i \hich\af4\dbch\af4\loch\f4 = value }{\rdblquote \hich\af4\dbch\af4\loch\f4  part of the statement can be omitted for numeric data.  If a sequence of values consists of consecutive numbers, the explicit \hich\af4\dbch\af4\loch\f4 assignment can be left out; if }{\i \hich\af4\dbch\af4\loch\f4 value}{\hich\af4\dbch\af4\loch\f4  is omitted, it is assumed to be 1 greater than the previous value.  (The value is assumed to be 0 if it is the first value in the list.)  This is true for bitstrings (and their derivatives, byte, integer, and longint). \hich\af4\dbch\af4\loch\f4 For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 integer Emily, Kelly, Taylor, Evan, Trevor, Sparkle=8;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In this example, the symbolic names Emily, Kelly, Taylor, Evan, and Trevor are automatically assigned the numeric values 0, 1, 2, 3, and 4.\par \hich\af4\dbch\af4\loch\f4 Memory is the only limit to the number of symb\hich\af4\dbch\af4\loch\f4 olic values that can be declared for a single field.  There is also no limit to the number of names you can assign to a given value; for example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 integer\tab Emily=0, Kelly=1, Taylor=2, Evan=3,\par \tab \tab \hich\af2\dbch\af4\loch\f2 Trevor=16, Sparkle=0, Twinkle=1, Raphael=2,\par \tab \tab \hich\af2\dbch\af4\loch\f2 Michaelangelo=3, \hich\af2\dbch\af4\loch\f2 Nagel=16;\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318349}\hich\af4\dbch\af4\loch\f4 Delete \endash  Delete a Resource{\*\bkmkend _Toc495318349}\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 delete }{\i\fs20 \hich\af4\dbch\af4\loch\f4 resource-type}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\fs20 \hich\af4\dbch\af4\loch\f4 [ \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 (}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 ID}{\fs20 \hich\af4\dbch\af4\loch\f4  [ }{\fs18 \hich\af2\dbch\af4\loch\f2 :}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 ID}{\fs20 \hich\af4\dbch\af4\loch\f4  ] \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 )}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  ] }{\fs18 \hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:delete statement}}}{\hich\af4\dbch\af4\loch\f4 This statement deletes the resource of resource-type with the specified ID or ID range from the resource compiler output file.  If ID or ID ra\hich\af4\dbch\af4\loch\f4 nge is omitted, all resources of }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  are deleted.\par \hich\af4\dbch\af4\loch\f4 The delete function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to delete a resource while creating a new resource file from\hich\af4\dbch\af4\loch\f4  scratch.) \par \hich\af4\dbch\af4\loch\f4 You can delete resources that have their protected bit set only if you use the \endash ov option on the resource compiler command line.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318350}\hich\af4\dbch\af4\loch\f4 Change \endash  Change a Resource's Vital Information{\*\bkmkend _Toc495318350}\par }\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 change}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 resource-type1}{\fs20 \hich\af4\dbch\af4\loch\f4  [ \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 (}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 ID}{\fs20 \hich\af4\dbch\af4\loch\f4  [ }{\fs18 \hich\af2\dbch\af4\loch\f2 :}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 ID}{\fs20 \hich\af4\dbch\af4\loch\f4  ] \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 )}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  ]\par \tab }{\i\fs20 \hich\af4\dbch\af4\loch\f4 resource-type2}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote (\rquote  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 ID}{\fs20 \hich\af4\dbch\af4\loch\f4  [ , }{\i\fs20 \hich\af4\dbch\af4\loch\f4 attributes... }{\fs20 \hich\af4\dbch\af4\loch\f4 ] \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 )}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\fs18 \hich\af2\dbch\af4\loch\f2 ;}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:change statement}}}{\hich\af4\dbch\af4\loch\f4 This statement changes the resource of }{\i \hich\af4\dbch\af4\loch\f4 resource-type1}{\hich\af4\dbch\af4\loch\f4  with the specified ID or ID range in the resource compiler output file to a resource of }{\i \hich\af4\dbch\af4\loch\f4 resource-type2}{\hich\af4\dbch\af4\loch\f4  and the specified ID.  If ID or ID range i\hich\af4\dbch\af4\loch\f4 s omitted, all resources of }{\i \hich\af4\dbch\af4\loch\f4 resource-type1}{\hich\af4\dbch\af4\loch\f4  are changed.\par \hich\af4\dbch\af4\loch\f4 The change function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to change resources while creating a new resource file from scra\hich\af4\dbch\af4\loch\f4 tch.) \par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318351}\hich\af4\dbch\af4\loch\f4 Resource \endash  Specify Resource Data{\*\bkmkend _Toc495318351}\par }\pard\plain \qj\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 resource}{\fs20 \hich\af4\dbch\af4\loch\f4   }{\i\fs20 \hich\af4\dbch\af4\loch\f4 resource-type}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 (}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 ID}{\fs20 \hich\af4\dbch\af4\loch\f4  [ , }{\i\fs20 \hich\af4\dbch\af4\loch\f4 attributes}{\fs20 \hich\af4\dbch\af4\loch\f4  ] \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 )}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \{}{\fs20 \rquote \par \tab \hich\af4\dbch\af4\loch\f4 [ }{\i\fs20 \hich\af4\dbch\af4\loch\f4 data-statement}{\fs20 \hich\af4\dbch\af4\loch\f4   [ , }{\i\fs20 \hich\af4\dbch\af4\loch\f4 data-statement}{\fs20 \hich\af4\dbch\af4\loch\f4 \hich\f4   ]\u8230\'c9\loch\f4  ]\par \tab \lquote }{\fs18 \}}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:resource statement}}}{\hich\af4\dbch\af4\loch\f4 Resource statements specify actual resources, based on previous type declarati\hich\af4\dbch\af4\loch\f4 ons.\par \hich\af4\dbch\af4\loch\f4 This statement specifies the data for a resource of type }{\i \hich\af4\dbch\af4\loch\f4 resource-type}{\hich\af4\dbch\af4\loch\f4  and ID }{\i \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 .  The latest type declaration declared for resource-type is used to parse the data specification.\par \hich\af4\dbch\af4\loch\f4 Data statements specify the actual data; data-statements appropriate to \hich\af4\dbch\af4\loch\f4 each resource type are defined in the next section.\par \hich\af4\dbch\af4\loch\f4 The resource definition generates an actual resource.  A resource statement can appear anywhere in the resource description file, or even in a separate file specified on the command line or as an #include\hich\af4\dbch\af4\loch\f4  file, as long as it comes after the relevant type declaration.\par \hich\af4\dbch\af4\loch\f4 For examples of resource statements, see the examples following the various data statement types, earlier in this chapter.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Data Statements\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The body of the data specification contains one data \hich\af4\dbch\af4\loch\f4 statement for each declaration in the corresponding type declaration.  The base type must match the declaration.\par \par }\pard\plain \s31\qj\fi-1440\li1800\ri2880\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Base type\tab Instance types\par }\pard\plain \s16\qj\fi-1440\li1800\ri2880\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 string\tab string, cstring, pstring, wstring, char\par \hich\af4\dbch\af4\loch\f4 bitstring\tab boolean, byte, integer, longint, bitstring\par \hich\af4\dbch\af4\loch\f4 rect\tab rect\par \hich\af4\dbch\af4\loch\f4 point\tab p\hich\af4\dbch\af4\loch\f4 oint\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Switch data\par }\pard\plain \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:switch statement}}}{\hich\af4\dbch\af4\loch\f4 Switch data statements are specified by using this format:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs20 \hich\af4\dbch\af4\loch\f4 switch-name  data-body\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 For example, the following could be specified for the rControlTemplate type used in an earlier example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 CheckControl \{ enable\hich\af2\dbch\af4\loch\f2 d, "Check here" \},\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Array data\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:arrays}}}{\hich\af4\dbch\af4\loch\f4 Array data statements have this format:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \lquote }{\fs18 \{}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  [ }{\i\fs20 \hich\af4\dbch\af4\loch\f4 array-element}{\fs20 \hich\af4\dbch\af4\loch\f4  [ , }{\i\fs20 \hich\af4\dbch\af4\loch\f4 array-element}{\fs20 \hich\af4\dbch\af4\loch\f4 \hich\f4  ]\u8230\'c9\loch\f4  ] \lquote }{\fs18 \}}{\fs20 \rquote \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 where an }{\i \hich\af4\dbch\af4\loch\f4 array-element}{\hich\af4\dbch\af4\loch\f4  consists of any number of data statements separated by commas.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 For example, the following data \hich\af4\dbch\af4\loch\f4 might be given for the rStringList resource (the type is shown so you won't have to refer to types.rez, where it is defined):\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type rStringList \{\par \hich\af2\dbch\af4\loch\f2         integer = $$Countof(StringArray);\par \hich\af2\dbch\af4\loch\f2         array StringArray \{\par \hich\af2\dbch\af4\loch\f2                 pstring;            /* S\hich\af2\dbch\af4\loch\f2 tring           */\par \hich\af2\dbch\af4\loch\f2         \};\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 resource rStringList (280) \{\par \hich\af2\dbch\af4\loch\f2     \{\par \hich\af2\dbch\af4\loch\f2         "this",\par \hich\af2\dbch\af4\loch\f2         "is",\par \hich\af2\dbch\af4\loch\f2         "a",\par \hich\af2\dbch\af4\loch\f2         "test"\par \hich\af2\dbch\af4\loch\f2     \}\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Sample resource definition\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This section describes a sample resource description file for an icon. (See the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  To\hich\af4\dbch\af4\loch\f4 olbox Reference, Volume 3 for information about resource icons.)  The type statement is included for clarity, but would normally be included using an include statement.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type rIcon \{\par \hich\af2\dbch\af4\loch\f2         hex integer;            /* icon type bit 15  1 = color, \par \hich\af2\dbch\af4\loch\f2         \hich\af2\dbch\af4\loch\f2                            0 = mono */\par \hich\af2\dbch\af4\loch\f2 image:\par \hich\af2\dbch\af4\loch\f2         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par \hich\af2\dbch\af4\loch\f2         integer;                    /* height of icon in pixels */\par \hich\af2\dbch\af4\loch\f2         integer;                    /* width of icon in pixels */\par \hich\af2\dbch\af4\loch\f2        \hich\af2\dbch\af4\loch\f2  hex string [$$Word(image)]; /* icon image */\par \hich\af2\dbch\af4\loch\f2 mask:\par \hich\af2\dbch\af4\loch\f2         hex string;                 /* icon mask */\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 resource rIcon (1) \{\par \hich\af2\dbch\af4\loch\f2         0x8000,                                /* Kind */\par \hich\af2\dbch\af4\loch\f2         9,                                     /* Height */\par \hich\af2\dbch\af4\loch\f2         3\hich\af2\dbch\af4\loch\f2 2                                     /* Width */\par \hich\af2\dbch\af4\loch\f2         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFF00000000000000FFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFF00FFFFFFFFFF00\hich\af2\dbch\af4\loch\f2 FFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFF00000000000000FFFFFFFFFFFF"\par \hich\af2\dbch\af4\loch\f2         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par \hich\af2\dbch\af4\loch\f2         $"00000000000000000000000000000000"\par \hich\af2\dbch\af4\loch\f2         $"00000FFFFFF\hich\af2\dbch\af4\loch\f2 FFFFFFFF0000000000000"\par \hich\af2\dbch\af4\loch\f2         $"00000FFFFFFFFFFFFFF0000000000000"\par \hich\af2\dbch\af4\loch\f2         $"00000FFFFFFFFFFFFFF0000000000000"\par \hich\af2\dbch\af4\loch\f2         $"00000FFFFFFFFFFFFFF0000000000000"\par \hich\af2\dbch\af4\loch\f2         $"00000FFFFFFFFFFFFFF0000000000000"\par \hich\af2\dbch\af4\loch\f2         $"00000FFFFFFFFFFFFFF0000000000000"\par \hich\af2\dbch\af4\loch\f2         $"000\hich\af2\dbch\af4\loch\f2 00FFFFFFFFFFFFFF0000000000000"\par \hich\af2\dbch\af4\loch\f2         $"00000000000000000000000000000000"\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This data definition declares a resource of type rIcon, using whatever type declaration was previously specified for rIcon.  The 8 in the resource type specification (0x8000) id\hich\af4\dbch\af4\loch\f4 entifies this as a color icon.  \par \hich\af4\dbch\af4\loch\f4 The icon is 9 pixels high by 32 pixels wide.\par \hich\af4\dbch\af4\loch\f4 The specification of the icon includes a pixel image and a pixel mask.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318352}\hich\af4\dbch\af4\loch\f4 Labels{\*\bkmkend _Toc495318352}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:labels}}}{\hich\af4\dbch\af4\loch\f4 Labels support the more complicated resources.  Use labels within a resource type\hich\af4\dbch\af4\loch\f4  declaration to calculate offsets and permit accessing of data at the labels.  The rIcon resource, for example, uses labels to specify the pixel image and mask of the icon.\par }\pard \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The syntax for a label is:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 label ::=\tab character \{alphanum\}* ':'\par \hich\af2\dbch\af4\loch\f2 character ::=\tab '_' |\hich\af2\dbch\af4\loch\f2 \hich\f2  A | B | C \u8230\'c9\par \hich\af2\dbch\af4\loch\f2 alphanum ::=\tab character | number \par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 number ::=\tab 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Labeled statements are valid only within a resource type declaration.  Labels are local to each type declaration.  More than one label can appear on a statement\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 Labels may be used in expressions.  In expressions, use only the identifier portion of the label (that is, everything up to, but excluding, the colon).  See \ldblquote Declaring Labels Within Arrays\rdblquote  later in this chapter for more information.\par \hich\af4\dbch\af4\loch\f4 The value of a label\hich\af4\dbch\af4\loch\f4  is always the offset, in bits, between the beginning of the resource and the position where the label occurs when mapped to the resource data.  In this example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type 0xCCCC \{\par \hich\af2\dbch\af4\loch\f2     cstring;\par \hich\af2\dbch\af4\loch\f2 endOfString:\par \hich\af2\dbch\af4\loch\f2     integer = endOfString;\par \}\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 resource 0xCCCC (8) \{\par \hich\af2\dbch\af4\loch\f2   "Neato"\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 the integer following the cstring would contain:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ( len("Neato") [5] + null byte [1] ) * 8 [bits per byte] = 48.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318353}\hich\af4\dbch\af4\loch\f4 Built-in Functions to Access Resource Data{\*\bkmkend _Toc495318353}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:built-in functions}}}{\hich\af4\dbch\af4\loch\f4 In some cases, it is desirable to access the actual reso\hich\af4\dbch\af4\loch\f4 urce data to which a label points.  Several built-in functions allow access to that data:\par \par }\pard\plain \s26\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\bullet \tab \hich\af2\dbch\af4\loch\f2 $$BitField (label, startingPosition, numberOfBits)\par }\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 Returns the }{\i \hich\af4\dbch\af4\loch\f4 numberOfBits}{\hich\af4\dbch\af4\loch\f4  (maximum of 32) bitstring found }{\i \hich\af4\dbch\af4\loch\f4 startingPosition}{\hich\af4\dbch\af4\loch\f4  bits from }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\bullet \tab \hich\af2\dbch\af4\loch\f2 $$Byte (label)\par }\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 Returns the byte found at }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\bullet \tab \hich\af2\dbch\af4\loch\f2 $$Word (label)\par }\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 Returns the word found at }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\bullet \tab \hich\af2\dbch\af4\loch\f2 $$Long (label)\par }\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 Returns the long word found at }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 For example, the resource type rPString could be redefined without using a pstring.  Here is the definition of\hich\af4\dbch\af4\loch\f4  rPString from Types.rez:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type rPString \{\par \hich\af2\dbch\af4\loch\f2     pstring;\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Here is a redefinition of rPString using labels:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type rPString \{\par \hich\af2\dbch\af4\loch\f2 len:  byte = (stop - len) / 8 - 1;\par \hich\af2\dbch\af4\loch\f2       string[$$Byte(len)];\par \hich\af2\dbch\af4\loch\f2 stop: ;\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318354}\hich\af4\dbch\af4\loch\f4 Declaring Labels Within Arrays{\*\bkmkend _Toc495318354}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:labels}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 R\hich\af4\dbch\af4\loch\f4 ez\:arrays}}}{\hich\af4\dbch\af4\loch\f4 Labels declared within arrays may have many values.  For every element in the array there is a corresponding value for each label defined within the array.  Use array subscripts to access the individual values of these labels.  The subscript va\hich\af4\dbch\af4\loch\f4 lues range from 1 to n where n is the number of elements in the array.  Labels within arrays that are nested in other arrays require multidimensional subscripts.  Each level of nesting adds another subscript.  The rightmost subscript varies most quickly. \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 Here is an example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type 0xFF01 \{\par \tab \hich\af2\dbch\af4\loch\f2 integer = $$CountOf(array1);\par \tab \hich\af2\dbch\af4\loch\f2 array array1 \{\par \tab \tab \hich\af2\dbch\af4\loch\f2 integer = $$CountOf(array2);\par \tab \tab \hich\af2\dbch\af4\loch\f2 array array2 \{\par \hich\af2\dbch\af4\loch\f2 foo:\tab \tab \tab integer;\par \tab \tab \}\hich\af2\dbch\af4\loch\f2 ;\par \tab \}\hich\af2\dbch\af4\loch\f2 ;\par \}\hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 resource 0xFF01 (128) \{\par \tab \{\par \tab \tab \{\hich\af2\dbch\af4\loch\f2 1,2,3\},\par \tab \tab \{\hich\af2\dbch\af4\loch\f2 4,5\}\par \tab \}\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In the example just given, the label foo takes\hich\af4\dbch\af4\loch\f4  on these values:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 foo[1,1] = 32\tab $$Word(foo[1,1]) = 1\par \hich\af2\dbch\af4\loch\f2 foo[1,2] = 48\tab $$Word(foo[1,2]) = 2\par \hich\af2\dbch\af4\loch\f2 foo[1,3] = 64\tab $$Word(foo[1,3]) = 3\par \hich\af2\dbch\af4\loch\f2 foo[2,1] = 96\tab $$Word(foo[2,1]) = 4\par \hich\af2\dbch\af4\loch\f2 foo[2,2] = 112\tab $$Word(foo[2,2]) = 5\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Another built-in function may be helpful in using labels wit\hich\af4\dbch\af4\loch\f4 hin arrays:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 $$ArrayIndex(}{\i \hich\af2\dbch\af4\loch\f2 arrayname}{\hich\af2\dbch\af4\loch\f2 )\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This function returns the current array index of the array }{\i \hich\af4\dbch\af4\loch\f4 arrayname}{\hich\af4\dbch\af4\loch\f4 .  An error occurs if this function is used anywhere outside the scope of the array }{\i \hich\af4\dbch\af4\loch\f4 arrayname}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318355}\hich\af4\dbch\af4\loch\f4 Label Limitations{\*\bkmkend _Toc495318355}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:labels}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 Keep\hich\af4\dbch\af4\loch\f4  in mind the fact that the resource compiler and DeRez are basically one-pass compilers.  This will help you understand some of the limitations of labels.\par \hich\af4\dbch\af4\loch\f4 To decompile a given type, that type must not contain any expressions with more than one undefined la\hich\af4\dbch\af4\loch\f4 bel.  An undefined label is a label that occurs lexically after the expression.  To define a label, use it in an expression before the label is defined.\par \hich\af4\dbch\af4\loch\f4 This example demonstrates how expressions can have only one undefined label:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 type 0xFF01 \{\par \tab \hich\af2\dbch\af4\loch\f2 /* In the \hich\af2\dbch\af4\loch\f2 expression below, start is defined, next is undefined.*/\par \hich\af2\dbch\af4\loch\f2 start:\tab integer = next - start;\tab \par \tab \hich\af2\dbch\af4\loch\f2 /* In the expression below, next is defined because it was used\par \tab \hich\af2\dbch\af4\loch\f2    in a previous expression, but final is undefined.*/\par \hich\af2\dbch\af4\loch\f2 middle:\tab integer = final - next;\par \hich\af2\dbch\af4\loch\f2 next:\tab integer;\par \hich\af2\dbch\af4\loch\f2 final:\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Actually, the resource compiler can compile types that have expressions containing more than one undefined label, but the DeRez cannot decompile those resources and simply generates data resource statements.\par \hich\af4\dbch\af4\loch\f4 The label specified in }{\fs18 \hich\af2\dbch\af4\loch\f2 $$BitField()}{\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Byte()}{\hich\af4\dbch\af4\loch\f4 , }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Word()}{\hich\af4\dbch\af4\loch\f4 , and }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Long()}{\hich\af4\dbch\af4\loch\f4  must occur lexically before the expression; otherwise, an error is generated.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318356}\hich\af4\dbch\af4\loch\f4 An Example Using Labels{\*\bkmkend _Toc495318356}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:labels}}}{\hich\af4\dbch\af4\loch\f4 In the following example, the definition for the rIcon resource uses the labels image and mask.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 typ\hich\af2\dbch\af4\loch\f2 e rIcon \{\par \tab \hich\af2\dbch\af4\loch\f2      hex integer;      /* Icon Type bit 15  1 = color, 0 = mono */\par \tab \hich\af2\dbch\af4\loch\f2 image:\par \tab \hich\af2\dbch\af4\loch\f2      integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par \tab \hich\af2\dbch\af4\loch\f2      integer;                    /* height of icon in pixels */\par \tab \hich\af2\dbch\af4\loch\f2      integer;                    /* \hich\af2\dbch\af4\loch\f2 width of icon in pixels */\par \tab \hich\af2\dbch\af4\loch\f2      hex string [$$Word(image)]; /* icon image */\par \tab \hich\af2\dbch\af4\loch\f2 mask:\par \tab \hich\af2\dbch\af4\loch\f2      hex string;                 /* icon mask */\par \tab \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 In the data corresponding to that definition, pixel images are provided for the image and mask.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 resource rIcon (1) \{\par \tab \tab \hich\af2\dbch\af4\loch\f2 0x8000,\tab \tab \tab \tab /* Kind */\par \tab \tab \hich\af2\dbch\af4\loch\f2 9,\tab \tab \tab \tab \tab /* Height */\par \tab \tab \hich\af2\dbch\af4\loch\f2 32\tab \tab \tab \tab \tab /* Width */\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFF\hich\af2\dbch\af4\loch\f2 F"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000000000000000000000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000FFFFFFFFFFFFFF0\hich\af2\dbch\af4\loch\f2 000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab \hich\af2\dbch\af4\loch\f2 $"00000000000000000000000000000000"\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318357}\hich\af4\dbch\af4\loch\f4 Preprocesso\hich\af4\dbch\af4\loch\f4 r Directives{\*\bkmkend _Toc495318357}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Preprocessor directives substitute macro definitions and include files and provide if-then-else processing before other resource compiler processing takes place.\par \hich\af4\dbch\af4\loch\f4 The syntax of the preprocessor is very similar to that of the C-language preproce\hich\af4\dbch\af4\loch\f4 ssor.  Preprocessor directives must observe these rules and restrictions:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\bullet \tab \hich\af4\dbch\af4\loch\f4 Each preprocessor statement must begin on a new line, be expressed on a single line, and be terminated by a return character.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 The pound sign (#) must be the first character on t\hich\af4\dbch\af4\loch\f4 he line of a preprocessor statement (except for spaces and tabs).\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Identifiers (used in macro names) may be letters (A\endash Z, a\endash z), digits (0\endash 9), or the underscore character ( _ ).\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Identifiers may be any length.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 Identifiers may not start with a digit.\par \bullet \tab \hich\af4\dbch\af4\loch\f4 I\hich\af4\dbch\af4\loch\f4 dentifiers are not case sensitive.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318358}\hich\af4\dbch\af4\loch\f4 Variable Definitions{\*\bkmkend _Toc495318358}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:define statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:undef statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:macros}}}{\hich\af4\dbch\af4\loch\f4 The #define and #undef directives let you assign values to identifiers:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 #define }{\i\fs20 \hich\af4\dbch\af4\loch\f4 macro data}{\fs18 \par \hich\af2\dbch\af4\loch\f2 #undef }{\i\fs20 \hich\af4\dbch\af4\loch\f4 macro}{\fs18 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The #\hich\af4\dbch\af4\loch\f4 define directive causes any occurrence of the identifier }{\i \hich\af4\dbch\af4\loch\f4 macro}{\hich\af4\dbch\af4\loch\f4  to be replaced with the text data.  You can extend a macro over several lines by ending the line with the backslash character (\\), which functions as the resource compiler\rquote s escape character.  \hich\af4\dbch\af4\loch\f4 Here is an example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define poem "I wander \\\par \hich\af2\dbch\af4\loch\f2 thro\\' each \\\par \hich\af2\dbch\af4\loch\f2 charter\\'d street"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Quotation marks within strings must also be escaped.  See "Escape Characters: later in this chapter for more information about escape characters.\par \hich\af4\dbch\af4\loch\f4 The #undef directive removes t\hich\af4\dbch\af4\loch\f4 he previously defined identifier macro.  Macro definitions can also be removed with the \endash undef option on the resource compiler command line.\par \hich\af4\dbch\af4\loch\f4 The following predefined macros are provided:\par \par }\pard\plain \s31\qj\fi-1440\li1800\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Variable\tab Value\par }\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 true\tab 1\par \hich\af4\dbch\af4\loch\f4 false\tab 0\par \hich\af4\dbch\af4\loch\f4 rez\tab 1 or 0 (1 if the resource compiler\hich\af4\dbch\af4\loch\f4  is running, 0 if }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 DeRez is running)\par \hich\af4\dbch\af4\loch\f4 derez\tab 1 or 0 (0 if the resource compiler is running, 1 if DeRez is running)\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318359}\hich\af4\dbch\af4\loch\f4 If-Then-Else Processing{\*\bkmkend _Toc495318359}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:conditional compilation}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:if statement}}}{\hich\af4\dbch\af4\loch\f4 These directives provide conditional processi\hich\af4\dbch\af4\loch\f4 ng:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 #if }{\i\fs20 \hich\af4\dbch\af4\loch\f4 expression}{\fs18 \par }{\fs20 \hich\af4\dbch\af4\loch\f4 [ }{\fs18 \hich\af2\dbch\af4\loch\f2 #elif }{\i\fs20 \hich\af4\dbch\af4\loch\f4 expression }{\fs20 \hich\af4\dbch\af4\loch\f4  ]}{\fs18 \par }{\fs20 \hich\af4\dbch\af4\loch\f4 [ }{\fs18 \hich\af2\dbch\af4\loch\f2 #else}{\fs20 \hich\af4\dbch\af4\loch\f4  ]}{\fs18 \par \hich\af2\dbch\af4\loch\f2 #endif\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\i \hich\af4\dbch\af4\loch\f4 Expression}{\hich\af4\dbch\af4\loch\f4  is defined later in this chapter.\par \hich\af4\dbch\af4\loch\f4 When used with the #if and #elif directives, }{\i \hich\af4\dbch\af4\loch\f4 expression}{\hich\af4\dbch\af4\loch\f4  may also include one of these terms:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 defined}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 identifier}{\fs20 \par }{\fs18 \hich\af2\dbch\af4\loch\f2 defined}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 (}{\fs20 \rquote \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 identifier}{\fs20 \hich\af4\dbch\af4\loch\f4  \lquote }{\fs18 \hich\af2\dbch\af4\loch\f2 )}{\fs20 \rquote \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The follow\hich\af4\dbch\af4\loch\f4 ing may also be used in place of #if:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 #ifdef}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 macro}{\fs20 \par }{\fs18 \hich\af2\dbch\af4\loch\f2 #ifndef}{\fs20 \hich\af4\dbch\af4\loch\f4  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 macro}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 For example,\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\par \hich\af2\dbch\af4\loch\f2 #define Thai\par \hich\af2\dbch\af4\loch\f2 Resource  rPstring  (199)  \{\par \hich\af2\dbch\af4\loch\f2 #ifdef English\par \tab \hich\af2\dbch\af4\loch\f2 "Hello"\par \hich\af2\dbch\af4\loch\f2 #elif defined (French)\par \tab \hich\af2\dbch\af4\loch\f2 "Bonjour"\par \hich\af2\dbch\af4\loch\f2 #elif defined (Thai)\par \tab \hich\af2\dbch\af4\loch\f2 "Sawati"\par \hich\af2\dbch\af4\loch\f2 #elif defined (Japanese)\par \tab \hich\af2\dbch\af4\loch\f2 "Konnichiwa"\par \hich\af2\dbch\af4\loch\f2 #endi\hich\af2\dbch\af4\loch\f2 f\par \}\hich\af2\dbch\af4\loch\f2 ;\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318360}\hich\af4\dbch\af4\loch\f4 Printf Directive{\*\bkmkend _Toc495318360}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:printf statement}}}{\hich\af4\dbch\af4\loch\f4 The #printf directive is provided to aid in debugging resource description files.  It has the form\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 #printf(}{\i\fs20 \hich\af4\dbch\af4\loch\f4 formatString}{\fs18 \hich\af2\dbch\af4\loch\f2 , }{\i\fs20 \hich\af4\dbch\af4\loch\f4 \hich\f4 arguments\u8230\'c9}{\fs18 \hich\af2\dbch\af4\loch\f2 )\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The format of the #printf statement is exactly the same as that of the\hich\af4\dbch\af4\loch\f4  printf statement in the C language, with one exception: There can be no more than 20 arguments.  This is the same restriction that applies to the }{\fs18 \hich\af2\dbch\af4\loch\f2 $$format}{\hich\af4\dbch\af4\loch\f4  function.  The #printf directive writes its output to diagnostic output.  Note that the #printf dire\hich\af4\dbch\af4\loch\f4 ctive does not end with a semicolon.\par \hich\af4\dbch\af4\loch\f4 Here\rquote s an example:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define\tab \tab Tuesday\tab \tab 3\par \hich\af2\dbch\af4\loch\f2 #ifdef Monday\par \hich\af2\dbch\af4\loch\f2 #printf("The day is Monday, day #%d\\n", Monday)\par \hich\af2\dbch\af4\loch\f2 #elif defined(Tuesday)\par \hich\af2\dbch\af4\loch\f2 #printf("The day is Tuesday, day #%d\\n", Tuesday)\par \hich\af2\dbch\af4\loch\f2 #elif defined(Wednesday)\par \hich\af2\dbch\af4\loch\f2 #printf("The day is\hich\af2\dbch\af4\loch\f2  Wednesday, day #%d\\n", Wednesday)\par \hich\af2\dbch\af4\loch\f2 #elif defined(Thursday)\par \hich\af2\dbch\af4\loch\f2 #printf("The day is Thursday, day #%d\\n", Thursday)\par \hich\af2\dbch\af4\loch\f2 #else\par \hich\af2\dbch\af4\loch\f2 #printf("DON'T KNOW WHAT DAY IT IS!\\n")\par \hich\af2\dbch\af4\loch\f2 #endif\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The file just listed generates this text:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The day is Tuesday, day #3\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Formatstring is a te\hich\af4\dbch\af4\loch\f4 xt string which is written more or less as is to error out.  There are two cases when the string is not written exactly as typed: escape characters and conversion specifiers.\par \hich\af4\dbch\af4\loch\f4 Escape sequences are used to encode characters that would not normally be allowed\hich\af4\dbch\af4\loch\f4  in a string.  The examples show the most commonly used escape sequence, \\n.  The \\ character marks the beginning of an escape sequence, telling the resource compiler that the next character is special.  In this case, the next character is n, which indica\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 es a newline character.  Printing \\n is equivalent to a writeln in Pascal or a PutCR macro from assembly language.  For a complete description of escape sequences, see "Escape Characters," later in this chapter.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Conversion Specifiers\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Conversion specifiers \hich\af4\dbch\af4\loch\f4 are special sequences of characters that define how a particular value is to be printed.  While the resource compiler actually accepts all of the conversion specifiers allowed by the C language (it is written in C, and uses C's sprintf function to format \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he string for this statement), many of the conversion specifiers that are used by C are not useful in the resource compiler, and some of the others are not commonly used.  For example, technically the resource compiler supports floating-point output, but \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 t does not have a floating point variable type, so the conversion specifiers for floating point values are not of much use.  Only those conversion specifiers that are generally used in the resource compiler will be covered here.\par \hich\af4\dbch\af4\loch\f4 Each conversion specifier s\hich\af4\dbch\af4\loch\f4 tarts with a % character; to write a % character, code it twice, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("100%%\\n");\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Conversion specifiers are generally used to write string or numeric arguments.  For example, the %n conversion specifier is used to write a two-byte integer.  \hich\af4\dbch\af4\loch\f4 You can put one of several characters between the % characters that starts a conversion specifier and the letter character that indicates the type of the argument; each of these additional characters modifies the format specifier in some way.  The complet\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  syntax for a format specifier is\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 % }{\i\fs20 \hich\af4\dbch\af4\loch\f4 flag}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\fs20 \hich\af4\dbch\af4\loch\f4 [}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 field-width}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\fs20 \hich\af4\dbch\af4\loch\f4 ]}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\fs20 \hich\af4\dbch\af4\loch\f4 [}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 size-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\fs20 \hich\af4\dbch\af4\loch\f4 ]}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\i\fs20 \hich\af4\dbch\af4\loch\f4 conversion}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\i \hich\af4\dbch\af4\loch\f4 Flag}{\hich\af4\dbch\af4\loch\f4  is one or more of the characters -, 0, + or a space.  The entire field is optional.  These flags effect the way the output is formatted:\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -\tab If a formatted value i\hich\af4\dbch\af4\loch\f4 s shorter than the minimum field width, it is normally right-justified in the field by adding characters to the left of the formatted value.  If the - flag is used, the value is left-justified.\par \hich\af4\dbch\af4\loch\f4 0\tab If a formatted value is shorter than the minimum field width\hich\af4\dbch\af4\loch\f4 , it is normally padded with space characters.  If the 0 flag is used, the field is padded with zeros instead of spaces.  The 0 pad character is not used if the value is left-justified.\par \hich\af4\dbch\af4\loch\f4 +\tab Forces signed output, adding a + character before positive integers.\par \hich\af4\dbch\af4\loch\f4 space\tab Adds a space before positive numbers (instead of a +) so they line up with columnated negative numbers.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\i \hich\af4\dbch\af4\loch\f4 Field-width}{\hich\af4\dbch\af4\loch\f4  gives the number of characters to use for the output field.  If the number of characters needed to represent a value is less than th\hich\af4\dbch\af4\loch\f4 e field width, spaces are added on the left to fill out the field.  For example, the statement\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("%10n%10n\\n", a, b);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 could be used to print two columns of numbers, where each column  is ten characters wide and the numbers are right-justified.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The }{\i \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ize-specifier}{\hich\af4\dbch\af4\loch\f4  gives the size of the operand.  If the }{\i \hich\af4\dbch\af4\loch\f4 size-specifier}{\hich\af4\dbch\af4\loch\f4  is omitted, the resource compiler expects to find an integer parameter in the parameter list when it processes any of the numeric conversion specifiers.  If the size specifier is h, a byte\hich\af4\dbch\af4\loch\f4  is expected, while l indicates that the resource compiler should look for a longint value.\par }{\i \hich\af4\dbch\af4\loch\f4 Conversion}{\hich\af4\dbch\af4\loch\f4  tells what size and type of operand to expect and how to format the operand:\par \par }\pard\plain \s31\qj\li360\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2160\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Conversion\tab Format\par }\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\tx2160\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 d\tab signed integer\par \hich\af4\dbch\af4\loch\f4 u\tab unsigned integer\par \hich\af4\dbch\af4\loch\f4 o\tab unsigned octal}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  integer\par \hich\af4\dbch\af4\loch\f4 x\tab unsigned hexadecimal}{\pard\plain \s16\qj\li360\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  number; lowercase letters are used\par \hich\af4\dbch\af4\loch\f4 X\tab unsigned hexadecimal number; uppercase letters are used\par \hich\af4\dbch\af4\loch\f4 c\tab character\par \hich\af4\dbch\af4\loch\f4 s\tab c-string\par \hich\af4\dbch\af4\loch\f4 p\tab p-string\par \hich\af4\dbch\af4\loch\f4 %\tab write a single % character\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 You must include exactly one parameter\hich\af4\dbch\af4\loch\f4  after the format string for each conversion specifier in the format string, and the types of the parameters must agree exactly with the types indicated by the conversion specifiers.  Parameters are matched with conversion specifiers on a left-to-right ba\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 is.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318361}\hich\af4\dbch\af4\loch\f4 Include Directive{\*\bkmkend _Toc495318361}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:include statement}}}{\hich\af4\dbch\af4\loch\f4 The #include directive reads a text file:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 #include "}{\i\fs20 \hich\af4\dbch\af4\loch\f4 filename}{\fs18 \hich\af2\dbch\af4\loch\f2 "\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The directive behaves as if all of the lines in }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4  were placed in the current source file, replacing the line with the directive.  The max\hich\af4\dbch\af4\loch\f4 imum nesting is to ten levels.  For example,\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 #include ($$Shell("ORCA")) "MyProject MyTypes.rez"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Note that the #include preprocessor directive (which includes a file) is different from the previously described include statement, which copies resources fro\hich\af4\dbch\af4\loch\f4 m another file.\par \hich\af4\dbch\af4\loch\f4 The #include directive will look up to three places for the file, in order:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab The current directory.\par \hich\af4\dbch\af4\loch\f4 2.\tab The directory where the source file is located (generally the current directory, but not always).\par \hich\af4\dbch\af4\loch\f4 3.\tab The directory 13:RInclude.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318362}\hich\af4\dbch\af4\loch\f4 Append\hich\af4\dbch\af4\loch\f4  Directive{\*\bkmkend _Toc495318362}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:append statement}}}{\hich\af4\dbch\af4\loch\f4 This directive allows you to specify additional files to be compiled by the resource compiler.  The format is:\par \par }\pard\plain \qj\fi360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 #append "}{\i\fs20 \hich\af4\dbch\af4\loch\f4 filename}{\fs18 \hich\af2\dbch\af4\loch\f2 "}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This directive must appear between resource or type statements.  The }{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4  variab\hich\af4\dbch\af4\loch\f4 le is the name of the next file to be compiled.  The same search rules apply here that apply to the #include directive.  Normally you should place this directive at the end of a file because everything after it is ignored.  Do not place a #append directiv\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  in an include file.\par \hich\af4\dbch\af4\loch\f4 If you use more than one #append directive, the order in which you put them is important.  When the resource compiler sees an #append directive, it checks the language type of the appended file.  If it is the same language, that is, RE\hich\af4\dbch\af4\loch\f4 Z, the effect is the same as if the files had been concatenated into a single file.  If they are in different languages, the shell quits the resource compiler and begins a new assembly or compilation.  Two examples will illustrate why the order is importa\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 t.\par \hich\af4\dbch\af4\loch\f4 In the first example, suppose you have the following three files, each appended to the preceding file.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 file1.rez\par \hich\af2\dbch\af4\loch\f2 file2.rez\par \hich\af2\dbch\af4\loch\f2 file3.asm\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The Compile command calls the resource compiler to process file1.rez because the language is REZ.  When the resource c\hich\af4\dbch\af4\loch\f4 ompiler encounters the #append directive for file2.rez it continues processing as if file.rez and file2.rez had been concatenated into a single file.  When it encounters the #append directive for file3.asm, the resource compiler finishes processing and re\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 urns control to the shell which calls the assembler to assemble file3.asm.\par \hich\af4\dbch\af4\loch\f4 The result is different if the order of the files is changed, as follows:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 file1.rez\par \hich\af2\dbch\af4\loch\f2 file3.asm\par \hich\af2\dbch\af4\loch\f2 file2.rez\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The resource compiler processes file1.rez.  When it encounters the #append \hich\af4\dbch\af4\loch\f4 directive for file3.asm, the resource compiler finishes processing and returns control to the ORCA shell because the language stamp is different.  The shell calls the assembler to processes file3.asm.  When the assembler is finished processing, it returns\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 control to the shell which calls the resource compiler to process file2.rez.  However, since this is a separate compilation from that of file1.rez, the resource compiler knows nothing about symbols from file1.rez when compiling file2.rez.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 DeR\hich\af4\dbch\af4\loch\f4 ez handles #append directives differently from the resource compiler.  For DeRez the file being appended must have a language stamp of REZ or DeRez will treat the #append directive as an end-of-file marker.  DeRez will not return control to the shell afte\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  finishing processing.  Therefore, in the previous example, DeRez would process file1.rez only and then finish processing.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318363}\hich\af4\dbch\af4\loch\f4 Resource Description Syntax{\*\bkmkend _Toc495318363}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart resourceStatement}\hich\af4\dbch\af4\loch\f4 This section describes the details of the resource description syntax.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318364}\hich\af4\dbch\af4\loch\f4 Numbers and Literals{\*\bkmkend _Toc495318364}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 All arithmeti\hich\af4\dbch\af4\loch\f4 c is performed as 32-bit signed arithmetic.  The basic formats are shown in Table 10.2.\par \par }\pard\plain \s31\qj\fi-2340\li2700\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Numeric Type\tab Form\tab Meaning\par }\pard\plain \s16\qj\fi-2340\li2700\sl223\slmult1\widctlpar\tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Decimal\tab \hich\f4 nnn\u8230\'c9\tab \loch\f4 Signed decimal constant between 2,147,483,647 and \endash 2,147,483,648.  Do not use a leading zero.  (See octal.)\par \hich\af4\dbch\af4\loch\f4 Hexadecimal\tab \hich\f4 0Xhhh\u8230\'c9\tab }{\pard\plain \s16\qj\fi-2340\li2700\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4 Signed hexadecimal constant between 0X7FFFFFFF and 0X80000000.\par \tab \hich\af4\dbch\af4\loch\f4 \hich\f4 $hhh\u8230\'c9\tab \loch\f4 Alternate form for hexadecimal constants.\par \hich\af4\dbch\af4\loch\f4 Octal\tab \hich\f4 0ooo\u8230\'c9\tab \loch\f4 Signed octal}{\pard\plain \s16\qj\fi-2340\li2700\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  constant between 017777777777 and 020000000000.  A leading zero indicates that the num\hich\af4\dbch\af4\loch\f4 ber is octal.\par \hich\af4\dbch\af4\loch\f4 Binary\tab \hich\f4 0Bbbb\u8230\'c9\tab \loch\f4 Signed binary constant between 0B11111111111111111111111111111111 and 0B10000000000000000000000000000000.\par \hich\af4\dbch\af4\loch\f4 Literal\tab 'aaaa'\tab One to four printable ASCII characters or escape characters.  If there are fewer than four characters in th\hich\af4\dbch\af4\loch\f4 e literal, the characters to the left (high bits) are assumed to be $00.  Characters that are not in the printable character set, and are not the characters \\' and \\\\ (which have special meanings), can be escaped according to the character escape rules.  \hich\af4\dbch\af4\loch\f4 (\hich\af4\dbch\af4\loch\f4 See \ldblquote Strings\rdblquote  later in this section.)\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 10.2: Numeric Constants\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Literals and numbers are treated in the same way by the resource compiler.  A literal is a value within single quotation marks; for instance, 'A' is a number with the value 65; on the ot\hich\af4\dbch\af4\loch\f4 her hand, "A" is the character A expressed as a string.  Both are represented in memory by the bitstring 01000001.  (Note, however, that "A" is not a valid number and 'A' is not a valid string.) The following numeric expressions are all equivalent:\par }{\fs16 \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1440\tx2520\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 'B'\tab 66\tab \hich\af2\dbch\af4\loch\f2 'A'+1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\fs16 \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Literals are padded with nulls on the left side so that the literal 'ABC' is stored as shown in Figure 10.3.\par }{\fs14 \par }\pard\plain \qc\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {{\pict{\*\picprop\shplid1045{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw125\pich26\picwgoal2500\pichgoal520\macpict\bliptag-1142544067\blipupi72{\*\blipuid bbe6293d761fe5ac1c2897935ea6b8f0}015300070007002100841101a00082a0008c01000a000700070021008434000c0039001f008238a10096000605000000023da1009a0008fffe000000160000a000982c000a001607436f75726965720300160d00092b0b16082741424327203d20a00099a00097a0008ca0008c0a000000000000000034000a0037001d004a38a10096000606000000023da1009a0008fffe000000070000a00098292e03243030a00099a00097a0008da0008c34000a0049001d005c38a10096000606000000023da1009a0008fffe000000030000a0009829170141a00099a00097a0008da0008c34000a005b001d006e38a10096000606000000023da1009a0008fffe000000030000a0009829120142a00099a00097a0008da0008c34000a006d001d008038a10096000606000000023da1009a0008fffe000000030000a0009829120143a00099a00097a0008da0008da0008da00083ff}}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\fs10 \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Figure 10.3: Padding of literals\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318365}\hich\af4\dbch\af4\loch\f4 Expressions{\*\bkmkend _Toc495318365}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:expressions}}}{\hich\af4\dbch\af4\loch\f4 An expression may consist of simply a number or a literal.  Expres\hich\af4\dbch\af4\loch\f4 sions may also include numeric variables, labels, and system functions.\par \hich\af4\dbch\af4\loch\f4 Table 10.3 lists the operators in order of precedence with highest precedence first \endash  groupings indicate equal precedence.  Evaluation is always left to right when the priority is the \hich\af4\dbch\af4\loch\f4 same.\par }{\fs14 \par }\pard\plain \s31\qj\fi-2520\li2880\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1440\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Precedence\tab Operator\tab Meaning\par }\pard\plain \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\tx1440\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 1.\tab ( expr )\tab Forced precedence in expression calculation\par \hich\af4\dbch\af4\loch\f4 2.\tab -expr\tab Arithmetic (two\rquote s complement) negation of expr\par \tab \hich\af4\dbch\af4\loch\f4 ~expr\tab Bitwise (one\rquote s complement) negation of expr\par \tab \hich\af4\dbch\af4\loch\f4 !expr\tab Logical negation of expr\par \hich\af4\dbch\af4\loch\f4 3.\tab expr1 * expr2\tab Multiplic\hich\af4\dbch\af4\loch\f4 ation\par \tab \hich\af4\dbch\af4\loch\f4 expr1 / expr2\tab Integer division\par \tab \hich\af4\dbch\af4\loch\f4 expr1 % expr2\tab Remainder from dividing expr1 by expr2\par \hich\af4\dbch\af4\loch\f4 4.  \tab expr1 + expr2\tab Addition\par \tab \hich\af4\dbch\af4\loch\f4 expr1 - expr2\tab Subtraction\par \hich\af4\dbch\af4\loch\f4 5.\tab expr1 << expr2\tab Shift left; shift expr1 left by expr2 bits\par \tab \hich\af4\dbch\af4\loch\f4 expr1 >> expr2\tab Shift right; shift expr1 right b\hich\af4\dbch\af4\loch\f4 y expr2 bits \par \hich\af4\dbch\af4\loch\f4 6.\tab expr1 > expr2\tab Greater than\par \tab \hich\af4\dbch\af4\loch\f4 expr1 >= expr2\tab Greater than or equal to\par \tab \hich\af4\dbch\af4\loch\f4 expr1 < expr2\tab Less than\par \tab \hich\af4\dbch\af4\loch\f4 expr1 <= expr2\tab Less than or equal to\par \hich\af4\dbch\af4\loch\f4 7.\tab expr1 == expr2\tab Equal\par \tab \hich\af4\dbch\af4\loch\f4 expr1 != expr2\tab Not equal\par \hich\af4\dbch\af4\loch\f4 8.\tab expr1 & expr2\tab Bitwise AND\par \hich\af4\dbch\af4\loch\f4 9.\tab expr1 ^ expr2\tab Bitwise XOR\par \hich\af4\dbch\af4\loch\f4 10.\tab expr1 | expr2\tab Bitwise OR\par \hich\af4\dbch\af4\loch\f4 11.\tab expr1 && expr2\tab Logical AND\par \hich\af4\dbch\af4\loch\f4 12.\tab expr1 || expr2\tab Logical OR\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\fs12 \par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 10.3: Resource Description Operators\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The logical operators !, >, >=, <, <=, ==, !=, &&, and || evaluate to 1 (true) or 0 (false).\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318366}\hich\af4\dbch\af4\loch\f4 Variables and Functions{\*\bkmkend _Toc495318366}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:variables}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:built-in functions}}}{\hich\af4\dbch\af4\loch\f4 There are several predefined variables that are preset by the resource compiler, or that take on specific meaning based on how they are used in your resource description file.  Some of these resource compile\hich\af4\dbch\af4\loch\f4 r variables also contain commonly used values.  All Rez variables start with $$ followed by an alphanumeric identifier.\par \hich\af4\dbch\af4\loch\f4 The following variables and functions have string values:\par \par }\pard \s16\qj\fi-2520\li2880\sl223\slmult1\widctlpar\adjustright {\fs18 \hich\af2\dbch\af4\loch\f2 $$Date}{\tab \hich\af4\dbch\af4\loch\f4 Current date.  It is useful for putting time-stamps into the resource \hich\af4\dbch\af4\loch\f4 file.  The format of the string is: weekday, month dd, yyyy.  For example, August 10, 1989.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Format}{\hich\af4\dbch\af4\loch\f4 ("}{\i \hich\af4\dbch\af4\loch\f4 formatString}{\hich\af4\dbch\af4\loch\f4 ", }{\i \hich\af4\dbch\af4\loch\f4 arguments}{\hich\af4\dbch\af4\loch\f4 )\par \tab \hich\af4\dbch\af4\loch\f4 Works just like the #printf directive except that }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Format }{\hich\af4\dbch\af4\loch\f4 returns a string rather than printing to standard output.  (See \ldblquote Pr\hich\af4\dbch\af4\loch\f4 int Directive\rdblquote  earlier in this chapter.)\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Resource}{\hich\af4\dbch\af4\loch\f4 ("}{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4 ",}{\i \hich\af4\dbch\af4\loch\f4 'type'}{\hich\af4\dbch\af4\loch\f4 ,}{\i \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4 )\par \tab \hich\af4\dbch\af4\loch\f4 Reads the resource }{\i \hich\af4\dbch\af4\loch\f4 'type'}{\hich\af4\dbch\af4\loch\f4  with the ID }{\i \hich\af4\dbch\af4\loch\f4 ID}{\hich\af4\dbch\af4\loch\f4  from the resource file }{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4 , and returns a string.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Shell}{\hich\af4\dbch\af4\loch\f4 ("}{\i \hich\af4\dbch\af4\loch\f4 stringExpr}{\hich\af4\dbch\af4\loch\f4  ")\tab Current value of the exported shell variable \{stringExpr \}. \hich\af4\dbch\af4\loch\f4  Note that the braces must be omitted, and the double quotation marks must be present.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Time}{\tab \hich\af4\dbch\af4\loch\f4 Current time.  It is useful for time-stamping the resource file.  The format is: "hh:mm:ss".\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Version}{\tab \hich\af4\dbch\af4\loch\f4 Version number of the resource compiler.  (\ldblquote V1.0\rdblquote )\par \par \hich\af4\dbch\af4\loch\f4 These\hich\af4\dbch\af4\loch\f4  variables and functions have numeric values:\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Attributes}{\tab \hich\af4\dbch\af4\loch\f4 Attributes of resource from the current resource.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$BitField}{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 , }{\i \hich\af4\dbch\af4\loch\f4 startingPosition}{\hich\af4\dbch\af4\loch\f4 , }{\i \hich\af4\dbch\af4\loch\f4 numberOfBits}{\hich\af4\dbch\af4\loch\f4 )\par \tab \hich\af4\dbch\af4\loch\f4 Returns the }{\i \hich\af4\dbch\af4\loch\f4 numberOfBits}{\hich\af4\dbch\af4\loch\f4  (maximum of 32) bitstring found }{\i \hich\af4\dbch\af4\loch\f4 startingPosition}{\hich\af4\dbch\af4\loch\f4  bits from }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$\hich\af2\dbch\af4\loch\f2 Byte}{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 )\tab Returns the byte found at }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$CountOf}{\hich\af4\dbch\af4\loch\f4  (}{\i \hich\af4\dbch\af4\loch\f4 arrayName}{\hich\af4\dbch\af4\loch\f4 )\tab Returns the number of elements in the array }{\i \hich\af4\dbch\af4\loch\f4 arrayName}{\hich\af4\dbch\af4\loch\f4 .\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Day}{\tab \hich\af4\dbch\af4\loch\f4 Current day (range 1\endash 31).\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Hour}{\tab \hich\af4\dbch\af4\loch\f4 Current hour (range 0\endash 23).\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$ID}{\tab \hich\af4\dbch\af4\loch\f4 ID of resource from the current resource.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Long}{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 )\tab Re\hich\af4\dbch\af4\loch\f4 turns the long word found at }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Minute}{\tab \hich\af4\dbch\af4\loch\f4 Current minute (range 0\endash 59).\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Month}{\tab \hich\af4\dbch\af4\loch\f4 Current month (range 1\endash 12).\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$OptionalCount }{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 OptionalName}{\hich\af4\dbch\af4\loch\f4 )\par \tab \hich\af4\dbch\af4\loch\f4 Returns the number of items explicitly specified in the block OptionalName.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$PackedSize}{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 Start}{\hich\af4\dbch\af4\loch\f4 , }{\i \hich\af4\dbch\af4\loch\f4 RowBytes}{\hich\af4\dbch\af4\loch\f4 , }{\i \hich\af4\dbch\af4\loch\f4 RowC\hich\af4\dbch\af4\loch\f4 ount}{\hich\af4\dbch\af4\loch\f4 )\par \tab \hich\af4\dbch\af4\loch\f4 Given an offset (}{\i \hich\af4\dbch\af4\loch\f4 Start}{\hich\af4\dbch\af4\loch\f4 ) into the current resource and two integers, }{\i \hich\af4\dbch\af4\loch\f4 RowBytes}{\hich\af4\dbch\af4\loch\f4  and }{\i \hich\af4\dbch\af4\loch\f4 RowCount}{\hich\af4\dbch\af4\loch\f4 , this function calls the toolbox routine UnpackBytes }{\i \hich\af4\dbch\af4\loch\f4 RowCount}{\hich\af4\dbch\af4\loch\f4  times.  }{\fs18 \hich\af2\dbch\af4\loch\f2 $$PackedSize}{\hich\af4\dbch\af4\loch\f4 ( ) returns the unpacked size of the data found at }{\i \hich\af4\dbch\af4\loch\f4 Start}{\hich\af4\dbch\af4\loch\f4 .  Use this function \hich\af4\dbch\af4\loch\f4 only for decompiling resource files.  An example of this function is found in Pict.rez.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$ResourceSize}{\tab \hich\af4\dbch\af4\loch\f4 Current size of resource in bytes.  When decompiling, }{\fs18 \hich\af2\dbch\af4\loch\f2 $$ResourceSize}{\hich\af4\dbch\af4\loch\f4  is the actual size of the resource being decompiled.  When compiling, }{\fs18 \hich\af2\dbch\af4\loch\f2 $$ResourceSiz\hich\af2\dbch\af4\loch\f2 e}{\hich\af4\dbch\af4\loch\f4  returns the number of bytes that have been compiled so far for the current resource.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Second}{\tab \hich\af4\dbch\af4\loch\f4 Current second (range 0\endash 59).\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Type}{\tab \hich\af4\dbch\af4\loch\f4 Type of resource from the current resource.\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Weekday}{\tab \hich\af4\dbch\af4\loch\f4 Current day of the week (range 1\endash 7, that is, Sunday\endash Saturday).\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$W\hich\af2\dbch\af4\loch\f2 ord}{\hich\af4\dbch\af4\loch\f4 (}{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 )\tab Returns the word found at }{\i \hich\af4\dbch\af4\loch\f4 label}{\hich\af4\dbch\af4\loch\f4 .\par \par }{\fs18 \hich\af2\dbch\af4\loch\f2 $$Year}{\tab \hich\af4\dbch\af4\loch\f4 Current year.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318367}\hich\af4\dbch\af4\loch\f4 Strings{\*\bkmkend _Toc495318367}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:strings}}}{\hich\af4\dbch\af4\loch\f4 There are two basic types of strings:\par \par }\pard \s16\qj\fi-2880\li3240\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 Text string\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 \hich\f2 "a\u8230\'c9\loch\f2 "}{\tab \hich\af4\dbch\af4\loch\f4 The string can contain any printable character except \lquote  " \rquote  and \lquote \\\rquote .  These and other characters can be cr\hich\af4\dbch\af4\loch\f4 eated through escape sequences.  (See Table\~10-4.)  The string "" is a valid string of length 0.\par \hich\af4\dbch\af4\loch\f4 Hexadecimal string\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 \hich\f2 $"hh\u8230\'c9\loch\f2 "}{\tab \hich\af4\dbch\af4\loch\f4 Spaces and tabs inside a hexadecimal}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  string are ignored.  There must be an even number of hexadecimal digits.  Th\hich\af4\dbch\af4\loch\f4 e string $"" is a valid hexadecimal string of length\~0.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Any two strings (hexadecimal or text) will be concatenated if they are placed next to each other with only white space in between.  (In this case, returns and comments are considered white space.)\par \hich\af4\dbch\af4\loch\f4 Fi\hich\af4\dbch\af4\loch\f4 gure 10.4 shows a p-string declared as\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 pstring [10];\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 whose data definition is\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 "Hello"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard\plain \qc\fi360\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 {\pict{\*\picprop\shplid1046{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw347\pich37\picwgoal6940\pichgoal740\macpict\bliptag-681597899\blipupi72{\*\blipuid d75fa435775d57667f6a6b69c5828a3e}025100070007002c01621101a00082a0008ca0008c01000a00070007002c01620a000000000000000034000a000a002a002a3834000a0048002a00683834000a0067002a00873834000a0029002a004938a0008da100960006060000000202a1009a0008fffd000000070000a000980300210d00092b121e03243035a00099a00097a100960006060000000202a1009a0008fffd000000030000a0009829230148a00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291f0165a00099a00097a100960006060000000202a1009a0008fffd000000010000a000982921016ca00099a00097a0008c34000a0086002a00a63834000a00c4002a00e43834000a00e3002a01033834000a00a5002a00c538a0008da100960006060000000202a1009a0008fffd000000010000a00098291f016ca00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291d016fa00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291b03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a0009734000a0102002a01223834000a0140002a01603834000a0121002a014138a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a0008da00083ff}}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Figure 10.4: Internal Representation of a P-string\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 In the input file, string data is surrounded by double quotation marks (").  You can continue a string on the n\hich\af4\dbch\af4\loch\f4 ext line.  A separating token (for example, a comma) or brace signifies the end of the string data.  A side effect of string continuation is that a sequence of two quotation marks ("") is simply ignored.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 "Hello ""out "\par \hich\af2\dbch\af4\loch\f2 "there."\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 is the same \hich\af4\dbch\af4\loch\f4 string as\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 "Hello out there.";\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 To place a quotation mark character within a string, precede the quotation mark with a backslash, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\\\hich\af2\dbch\af4\loch\f2 "\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318368}\hich\af4\dbch\af4\loch\f4 Escape Characters{\*\bkmkend _Toc495318368}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:strings}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:escape characters}}}{\hich\af4\dbch\af4\loch\f4 The backslash character (\\) is provided as \hich\af4\dbch\af4\loch\f4 an escape character to allow you to insert nonprintable characters in a string.  For example, to include a newline character in a string, use the escape sequence\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\\\hich\af2\dbch\af4\loch\f2 n\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Valid escape sequences are shown in Table 10.4.\par \par }\pard\plain \s31\qj\li1440\ri1080\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2700\tx4680\tx5940\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Escape \tab \tab Hexadecimal\tab Printable \par \hich\af4\dbch\af4\loch\f4 Sequence\tab \hich\af4\dbch\af4\loch\f4 Name\tab Value\tab Equivalent\par }\pard\plain \s16\qj\li1440\ri1080\sl223\slmult1\widctlpar\tx2700\tx4680\tx5940\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\\\hich\af4\dbch\af4\loch\f4 t\tab Tab\tab $09\tab None\par \\\hich\af4\dbch\af4\loch\f4 b\tab Backspace\tab $08\tab None\par \\\hich\af4\dbch\af4\loch\f4 r\tab Return\tab $0A\tab None\par \\\hich\af4\dbch\af4\loch\f4 n\tab Newline\tab $0D\tab None\par \\\hich\af4\dbch\af4\loch\f4 f\tab Form feed\tab $0C\tab None\par \\\hich\af4\dbch\af4\loch\f4 v\tab Vertical tab\tab $0B\tab None\par \\\hich\af4\dbch\af4\loch\f4 ?\tab Rub out\tab $7F\tab None\par \\\\\tab \hich\af4\dbch\af4\loch\f4 Backslash\tab $5C\tab \\\par \\\hich\af4\dbch\af4\loch\f4 '\tab Single quotation mark\tab $27\tab '\par \\\hich\af4\dbch\af4\loch\f4 "\tab Double quotation mark\tab $22\tab "\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qc\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Table 1\hich\af4\dbch\af4\loch\f4 0.4: Resource Compiler Escape Sequences\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Note to C programmers:  The escape sequence \\n produces an ASCII code of 13 in the output stream, while the \\r sequence produces an ASCII code of 10.  This is backwards from the way the C language uses these two cha\hich\af4\dbch\af4\loch\f4 racters, so if you are creating string resources that will be used with stdio functions from the standard C library, be sure and use \\r in your resource file any time you would use \\n in C, and use \\n in your resource file any time you would use \\r in C.\par \hich\af4\dbch\af4\loch\f4 Y\hich\af4\dbch\af4\loch\f4 ou can also use octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  escape sequences, hexadecimal escape sequences, decimal escape sequences and binary escape sequences to specify characters that do not have predefined escape equivalents.  The forms are:\par \par }\pard\plain \s31\qj\li360\ri2880\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1440\tx2880\tx3780\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\tab \hich\af4\dbch\af4\loch\f4 Number\par \hich\af4\dbch\af4\loch\f4 Base\tab Form\tab Digits\tab Example\par }\pard\plain \s16\qj\li360\ri2880\sl223\slmult1\widctlpar\tx1440\tx2880\tx3780\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 2\tab \\0Bbbbbbbbb\tab 8\tab \\0B01000001\par \hich\af4\dbch\af4\loch\f4 8\tab \\ooo\tab 3\tab \\101\par \hich\af4\dbch\af4\loch\f4 10\tab \\0Dddd\tab 3\tab \\0D065\par \hich\af4\dbch\af4\loch\f4 16\tab \\0Xhh\tab 2\tab \\0X41\par \hich\af4\dbch\af4\loch\f4 16\tab \\$hh\tab 2\tab \\$41\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Since escape sequences are imbedded in strings, and since these sequences can contain more than one character after the \\ character, the number of digits given f\hich\af4\dbch\af4\loch\f4 or each form is an important consideration.  You must always code exactly the number of digits shown, using leading zeros if necessary.  For example, instead of }{\fs18 \hich\af2\dbch\af4\loch\f2 "\\0x4"}{\hich\af4\dbch\af4\loch\f4 , which only shows a single hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  digit, you must use }{\fs18 \hich\af2\dbch\af4\loch\f2 "0x04"}{\hich\af4\dbch\af4\loch\f4 .  \hich\af4\dbch\af4\loch\f4 This rule avoids confusion between the numeric escape sequence and any characters that might follow it in the string.\par \hich\af4\dbch\af4\loch\f4 Here are some examples:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\\\hich\af2\dbch\af4\loch\f2 077\tab /* 3 octal digits */\par \\\hich\af2\dbch\af4\loch\f2 0xFF\tab /* \lquote 0x\rquote  plus 2 hex digits */\par \\\hich\af2\dbch\af4\loch\f2 $F1\\$F2\\$F3\tab /* \lquote $\rquote  plus 2 hex digits */\par \\\hich\af2\dbch\af4\loch\f2 0d099\tab /* \lquote \hich\af2\dbch\af4\loch\f2 0d\rquote  plus 3 decimal digits */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 DeRez}}}{\hich\af4\dbch\af4\loch\f4 You can use the DeRez command-line option \endash e to print characters that would otherwise be escaped (characters preceded by a backslash, for example).  Normally, only characters with values between $20 and $7E are p\hich\af4\dbch\af4\loch\f4 rinted as Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  characters.  With this option, however, all characters (except null, newline, tab, backspace, form-feed, vertical tab, and rub out) will be printed as characters, not as escape sequences.{\*\bkmkend resourceStatement}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:resource statement}{\rxe resourceStatem\hich\af4\dbch\af4\loch\f4 ent}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318369}\hich\af4\dbch\af4\loch\f4 Using the Resource Compiler{\*\bkmkend _Toc495318369}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4  The Resource Compiler is a one-pass compiler; that is, in one pass it resolves preprocessor macros, scans the resource description file, and generates code into a code buffer.  It then writes the code to a resource file.\par \hich\af4\dbch\af4\loch\f4 The resource compiler is invoked by the shell's compile (or assemble) command, just as you would assemble a program.  This command checks the language type of the source file (in this case, rez) and calls the appropriate compiler or assembler (in this cas\hich\af4\dbch\af4\loch\f4 e, the resource compiler).  In short, with the exception of a few resource compiler specific options, you use the same commands to create a resource fork from a resource description file that you would use to assemble a program.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318370}\hich\af4\dbch\af4\loch\f4 Resource Forks and Data For\hich\af4\dbch\af4\loch\f4 ks{\*\bkmkend _Toc495318370}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 resource fork}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 data fork}}}{\hich\af4\dbch\af4\loch\f4 Files on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  actually have two distinct parts, known as the data fork and the resource fork.  The data fork is what is traditionally a file on other computers; this is where the executable program is st\hich\af4\dbch\af4\loch\f4 ored, where ASCII text is placed for a text file, and so forth.  When the resource compiler writes resources, it writes them to the resource fork of the file.  Writing to the resource fork of an existing file does not change the data fork in any way, and \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 riting to the data fork does not change the resource fork.  The implications of this can speed up the development cycle for your programs.  When you compile a resource description file to create a resource fork for your program, you can and should have th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  resource compiler save the resource fork to the same file in which the linker places the executable code.  When you make a change to your assembly language source code, you will normally assemble and link the changed program, creating an updated data for\hich\af4\dbch\af4\loch\f4 k\hich\af4\dbch\af4\loch\f4  for your program.  If the resource description file has not changed, you do not need to recompile the resource description file.  The same is true in reverse:  if you make a change to the resource description file, you need to recompile it, but you do no\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  need to reassemble or relink your assembly language source file.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318371}\hich\af4\dbch\af4\loch\f4 Rez Options{\*\bkmkend _Toc495318371}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez\:options}}}{\hich\af4\dbch\af4\loch\f4 The resource compiler supports the e, s, and t flags from the assemble or compile command.  It ignores all other flags.\par \hich\af4\dbch\af4\loch\f4 The resource compiler supports a numbe\hich\af4\dbch\af4\loch\f4 r of language dependent options.  These are coded as the name of the language, an equal sign, and the option list, enclosed in parenthesis.  Like the other parameters for the compile command, no spaces are allowed outside of the parenthesis.\par \hich\af4\dbch\af4\loch\f4 For example, t\hich\af4\dbch\af4\loch\f4 he following compile command uses the options list to specify the -p flag, which turns on progress information.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 compile resources keep=program rez=(-p)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The resource compiler will accept up to 31 options in the options list.  Any others are ignored.\par \hich\af4\dbch\af4\loch\f4 Here'\hich\af4\dbch\af4\loch\f4 s a complete list of the options that can be used in this options field:\par \par }\pard \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright {\fs18 \endash \hich\af2\dbch\af4\loch\f2 a[ppend]}{\tab \hich\af4\dbch\af4\loch\f4 This option appends the resource compiler\rquote s output to the output file's resource fork, rather than replacing the output file's resource fork.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 d[efine]}{\hich\af4\dbch\af4\loch\f4  }{\i \hich\af4\dbch\af4\loch\f4 macro}{\hich\af4\dbch\af4\loch\f4  [=}{\i \hich\af4\dbch\af4\loch\f4 data}{\hich\af4\dbch\af4\loch\f4  ]\par \tab \hich\af4\dbch\af4\loch\f4 Thi\hich\af4\dbch\af4\loch\f4 s option defines the macro variable macro to have the value }{\i \hich\af4\dbch\af4\loch\f4 data}{\hich\af4\dbch\af4\loch\f4 .  If data is omitted, macro is set to the null string \endash  note that this still means that macro is defined.  Using the \endash d option is the same as writing \par \par }\pard\plain \s26\qj\fi2160\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \hich\af2\dbch\af4\loch\f2 #define macro [ data ]\par }\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 at the beginn\hich\af4\dbch\af4\loch\f4 ing of the input.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 flag SYSTEM}{\tab \hich\af4\dbch\af4\loch\f4 This option sets the resource file flag for the system.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 flag ROM}{\tab \hich\af4\dbch\af4\loch\f4 This option sets the resource file flag for ROM.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 i }{\i \hich\af4\dbch\af4\loch\f4 pathname(s)}{\tab \hich\af4\dbch\af4\loch\f4 This option searches the following path names for #include files.  It can be specified more \hich\af4\dbch\af4\loch\f4 than once.  The paths are searched in the order they appear on the command line.  For example,\par \par }\pard\plain \s26\qj\li1530\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\tab \loch\af2\dbch\af4\hich\f2 \u8230\'c9\loch\f2 rez=(\endash i 13:rinclude:stuff.rez\par \tab \hich\af2\dbch\af4\loch\f2       \endash i 13:rinclude:newstuff.rez)\par }\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 m[odification]}{\tab \hich\af4\dbch\af4\loch\f4 Don\rquote t change the output file\rquote s modification date.  If an error occurs, the \hich\af4\dbch\af4\loch\f4 output file\rquote s modification date is set, even if you use this option.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 ov}{\tab \hich\af4\dbch\af4\loch\f4 This option overrides the protected bit when replacing resources with the \endash a option.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 p[rogress]}{\tab \hich\af4\dbch\af4\loch\f4 This option writes version and progress information to diagnostic output.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 rd}{\tab \hich\af4\dbch\af4\loch\f4 This \hich\af4\dbch\af4\loch\f4 option suppresses warning messages if a resource type is redeclared.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 s}{\hich\af4\dbch\af4\loch\f4  }{\i \hich\af4\dbch\af4\loch\f4 pathname(s)}{\tab \hich\af4\dbch\af4\loch\f4 This option searches the following path names for resource include files.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 t[ype]}{\hich\af4\dbch\af4\loch\f4  }{\i \hich\af4\dbch\af4\loch\f4 typeExpr}{\tab \hich\af4\dbch\af4\loch\f4 This option sets the type of the output load file to }{\i \hich\af4\dbch\af4\loch\f4 filetype}{\hich\af4\dbch\af4\loch\f4 .  You can specify\hich\af4\dbch\af4\loch\f4  a hexadecimal number, a decimal number, or a mnemonic for the file type.  If the \endash t option is not specified, the file type of the load file is $B3.\par \par }{\fs18 \endash \hich\af2\dbch\af4\loch\f2 u[ndef]}{\hich\af4\dbch\af4\loch\f4  }{\i \hich\af4\dbch\af4\loch\f4 macro}{\tab \hich\af4\dbch\af4\loch\f4 This option undefines the macro variable }{\i \hich\af4\dbch\af4\loch\f4 macro}{\hich\af4\dbch\af4\loch\f4 .  It is the same as writing \par \par }\pard\plain \s26\qj\li2160\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #undef macro \par }\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \tab \hich\af4\dbch\af4\loch\f4 at the beginning of the input.  It is meaningful to undefine only the preset macro variables.\par \par \tab \hich\af4\dbch\af4\loch\f4 Note: A space is required between an option and its parameters.{\*\bkmkend Rez}}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Rez compiler}{\rxe Rez}\bxe }}{\pard\plain \s16\qj\fi-1800\li2160\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 resources{\rxe Rez}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerl \pard\plain \s25\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Language Reference Manual\par }}{\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 11 \endash  Program Symbols\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318372}\hich\af4\dbch\af4\loch\f4 Chapter 11 \endash  Program Symbols{\*\bkmkend _Toc495318372}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tokens\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 identifiers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants}}}{{\*\bkmkstart tokens}\hich\af4\dbch\af4\loch\f4 C programs are made up of a series of program symbols called tokens.  Tokens are the words used to write a program.  They consist of identifiers, symbols, and constants.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318373}\hich\af4\dbch\af4\loch\f4 Identifiers{\*\bkmkend _Toc495318373}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 identifiers\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 case sensitivity}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 identifiers\:case sensitivity}}}{\hich\af4\dbch\af4\loch\f4 Identifiers in C start with an alphabetic character or underscore and are followed by zero or more alphabetic characters, numeric characters, or underscores.  C is a case sensitive language, \hich\af4\dbch\af4\loch\f4 which means that the identifiers matrix and Matrix are actually two different identifiers.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 identifiers\:length}}}{\hich\af4\dbch\af4\loch\f4 ORCA/C imposes a limit of 255 characters on the length of any single identifier.\par \hich\af4\dbch\af4\loch\f4 Some examples of legal C identifiers are shown below.  Th\hich\af4\dbch\af4\loch\f4 ey each represent a different identifier.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1530\tx2700\tx3870\tx5040\tx6210\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 main\tab array\tab myVar\tab myvar\tab _subroutine\tab my_var\tab \par \hich\af2\dbch\af4\loch\f2 x1\tab x348\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318374}\hich\af4\dbch\af4\loch\f4 Reserved Words{\*\bkmkend _Toc495318374}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 reserved words\bxe }}}{\hich\af4\dbch\af4\loch\f4 Reserved words are identifiers that have special meaning in C.  Unless a reserved word is redefined as a preprocessor mac\hich\af4\dbch\af4\loch\f4 ro, it can only be used for the meaning that C assigns to it, except that reserved words can appear in comments or string constants.  The reserved words in C areshown below.  The reserved words that are underlined are reserved in ORCA/C, but not in ANSI C\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1440\tx2520\tx3600\tx4680\tx5760\tx6840\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 auto\tab }{\ul \hich\af2\dbch\af4\loch\f2 asm}{\tab \hich\af2\dbch\af4\loch\f2 break\tab case\tab char\tab }{\ul \hich\af2\dbch\af4\loch\f2 comp}{\tab \hich\af2\dbch\af4\loch\f2 const\par \hich\af2\dbch\af4\loch\f2 continue\tab default\tab do\tab double\tab else\tab enum\tab }{\ul \hich\af2\dbch\af4\loch\f2 extended}{\par \hich\af2\dbch\af4\loch\f2 extern\tab float\tab for\tab goto\tab if\tab }{\ul \hich\af2\dbch\af4\loch\f2 inline}{\tab \hich\af2\dbch\af4\loch\f2 int\par \hich\af2\dbch\af4\loch\f2 long\tab }{\ul \hich\af2\dbch\af4\loch\f2 pascal}{\tab \hich\af2\dbch\af4\loch\f2 register\tab return\tab }{\ul \hich\af2\dbch\af4\loch\f2 segment}{\tab \hich\af2\dbch\af4\loch\f2 short\tab signed\par \hich\af2\dbch\af4\loch\f2 sizeof\tab static\tab struct\tab switch\tab typedef\tab union\tab unsigned\tab \par \hich\af2\dbch\af4\loch\f2 void\tab volatile\tab while\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318375}\hich\af4\dbch\af4\loch\f4 Reserved Symbol\hich\af4\dbch\af4\loch\f4 s{\*\bkmkend _Toc495318375}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 reserved symbols\bxe }}}{\hich\af4\dbch\af4\loch\f4 Reserved symbols are the punctuation of the C language.  Reserved symbols are used as mathematical operators, for forming array subscripts and parameter lists, for separating statements, and so forth.  With some restrictions, \hich\af4\dbch\af4\loch\f4 reserved symbols can also be used in comments, string constants, and characters constants.  See the sections below for details.\par \hich\af4\dbch\af4\loch\f4 The reserved symbols in C are:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1080\tx1800\tx2520\tx3240\tx3960\tx4680\tx5400\tx6120\tx6840\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 !\tab %\tab ^\tab &\tab *\tab -\tab +\tab =\tab ~\tab |\tab \par \hich\af2\dbch\af4\loch\f2 .\tab <\tab >\tab /\tab ?\tab ->\tab ++\tab --\tab <<\tab >>\tab \par \hich\af2\dbch\af4\loch\f2 <=\tab >=\tab ==\tab !=\tab &&\tab ||\tab +=\tab -=\tab *=\tab /=\tab \par \hich\af2\dbch\af4\loch\f2 %=\tab <<=\tab >>=\tab &=\tab ^=\tab |\hich\af2\dbch\af4\loch\f2 =\tab (\tab )\tab [\tab ]\tab \par \{\tab \}\tab \hich\af2\dbch\af4\loch\f2 ,\tab ;\tab :\tab \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In some older versions of C, the assignment operators (like +=) could be specified with the equal sign first, as in =+.  This caused some semantic problems in the language; most modern compilers, including ORCA/C, do not permit the e\hich\af4\dbch\af4\loch\f4 qual sign to come first.  Some compilers also permit white space to appear between the characters, as in + =.  ORCA/C does not allow this, either.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trigraphs\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 string constants\:trigraphs}}}{\hich\af4\dbch\af4\loch\f4 Some older computers do not support complete characte\hich\af4\dbch\af4\loch\f4 r sets on their terminals or printers.  For that reason, the C language includes trigraphs.  A trigraph is a sequence of three characters, two question marks and a third character, which can replace another character.  While there is no reason to use trig\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 aphs on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , you should be aware of their existence, since they can occasionally cause problems with string constants and character constants.  The trigraphs, along with the character they represent, are shown below.\par \par }\pard\plain \s31\qj\li2880\ri2160\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 trigraph\tab character\par }\pard\plain \s16\qj\li2880\ri2160\sl223\slmult1\widctlpar\tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 ??(\tab [\par \hich\af2\dbch\af4\loch\f2 ??\hich\af2\dbch\af4\loch\f2 )\tab ]\par \hich\af2\dbch\af4\loch\f2 ??<\tab \{\par \hich\af2\dbch\af4\loch\f2 ??>\tab \}\par \hich\af2\dbch\af4\loch\f2 ??/\tab \\\par \hich\af2\dbch\af4\loch\f2 ??!\tab |\par \hich\af2\dbch\af4\loch\f2 ??'\tab ^\par \hich\af2\dbch\af4\loch\f2 ??-\tab ~\par \hich\af2\dbch\af4\loch\f2 ??=\tab #\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 For example, the following two lines are completely equivalent in C.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 while (~one | theOther) printf("Huh|\\n");\par \hich\af2\dbch\af4\loch\f2 while (??- one ??! theOther) printf("Huh??!\\n");\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Note the trigraph that appears in the string.  \hich\af4\dbch\af4\loch\f4 This is one place where trigraphs can cause problems.  The idea in the example shown was probably to write two question marks and an exclamation point, but this was translated into a single vertical bar.  To avoid this, you can use \\? in the string consta\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 t to represent one of the question marks, as in\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 while (~one | theOther) printf("Huh?\\?!\\n");\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318376}\hich\af4\dbch\af4\loch\f4 Continuation Lines{\*\bkmkend _Toc495318376}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 continuation lines}}}{\hich\af4\dbch\af4\loch\f4 If a back slash character (\\) appears as the last character on a line, the line is continued from the first characte\hich\af4\dbch\af4\loch\f4 r of the next line.  Lines may be continued in the preprocessor, in string constants, between any two tokens, or even in the middle of a token.\par \hich\af4\dbch\af4\loch\f4 See the section discussing string constants for details on continuing strings.  See Chapter 12 for details on us\hich\af4\dbch\af4\loch\f4 ing continuation lines in the preprocessor.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318377}\hich\af4\dbch\af4\loch\f4 Constants{\*\bkmkend _Toc495318377}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Constants are used to place numbers and strings into the source code of the program.  Each kind of constant has its own unique format, so they are discussed separately.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318378}\hich\af4\dbch\af4\loch\f4 Decimal Integers{\*\bkmkend _Toc495318378}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Decimal integers\hich\af4\dbch\af4\loch\f4  come in two sizes and two kinds.  The two sizes are referred to as integer and long integer, while the two kinds are signed and unsigned.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:integer}}}{\hich\af4\dbch\af4\loch\f4 Signed integers consist of one to five digits.  The number repre\hich\af4\dbch\af4\loch\f4 sented must range from 0 to 32767, and with the exception of the number 0, no number can start with a leading zero.  (See octal integers, below, for the reason for this restriction.)  You may use a leading - character to form a negative number, although t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e - character and the number are technically two separate tokens.  In practice, this technical distinction is rarely important.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 long integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:long integer}}}{\hich\af4\dbch\af4\loch\f4 If the number exceeds 32767, or if it is followed by an l or L, t\hich\af4\dbch\af4\loch\f4 he number becomes a long integer.  Long integers can range from 0L to 2147483647L.  Please note that the l or L character must follow immediately after the last digit, with no intervening white space characters.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 co\hich\af4\dbch\af4\loch\f4 nstants\:unsigned integer}}}{\hich\af4\dbch\af4\loch\f4 Unsigned integers are integers which are followed by a u or U.  Unsigned integers can range from 0U to 65535U.  Unsigned integers have the same effect on the type of an expression as an unsigned variable; see Chapter 17 for detai\hich\af4\dbch\af4\loch\f4 ls.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned long integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:unsigned long integer}}}{\hich\af4\dbch\af4\loch\f4 Unsigned long integers include any unsigned integer larger than 65535U, as well as any unsigned integer with an l or L appearing either before or after the u or U.  Unsign\hich\af4\dbch\af4\loch\f4 ed long integers can range from 0UL to 4294967295UL.  As with unsigned integers, using an unsigned long integer constant will affect the type of the expression.\par \hich\af4\dbch\af4\loch\f4 The table below shows some examples of legal decimal constants.\par \par }\pard\plain \s31\qj\li360\ri1440\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1800\tx3240\tx4680\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 integer\tab unsigned integer\tab long \hich\af4\dbch\af4\loch\f4 integer\tab unsigned long integer\par }\pard\plain \s16\qj\li360\ri1440\sl223\slmult1\widctlpar\tx1800\tx3240\tx4680\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\fs18 \hich\af2\dbch\af4\loch\f2 0\tab 0U\tab 0L\tab 0LU\par \hich\af2\dbch\af4\loch\f2 35\tab 35u\tab 35l\tab 35ul\par \hich\af2\dbch\af4\loch\f2 32767\tab 65535u\tab 100000\tab 100000u\par \hich\af2\dbch\af4\loch\f2 600\tab 600U\tab 2147483647l\tab 4294967295ul\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318379}\hich\af4\dbch\af4\loch\f4 Octal Integers{\*\bkmkend _Toc495318379}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:integer}}}{\hich\af4\dbch\af4\loch\f4 Octal numbers are integers represented in base eight, rather than th\hich\af4\dbch\af4\loch\f4 e more familiar base ten.  Octal numbers are made up of the digits 0 to 7.  In C, octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  numbers are distinguished from decimal numbers by a leading zero.  Any number whose first character is zero is interpreted as an octal number in C, and ma\hich\af4\dbch\af4\loch\f4 y not contain the digits 8 or 9.  This can lead to unexpected results if you are not aware of this convention.  For example, the statement\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("%d\\n", 010);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 will print 8 to the screen, since 010 is 8 in base 8.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned long integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:unsigned long integer}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:unsigned integer}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 long integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:long integer}}}{\hich\af4\dbch\af4\loch\f4 As with decimal integers, octal integers can be long or short, signed or unsigned\hich\af4\dbch\af4\loch\f4 .  The range of integers allowed in each representation are show below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2520\tx3960\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int\tab 0\tab 077777\par \hich\af2\dbch\af4\loch\f2 unsigned int\tab 0\tab 0177777u\par \hich\af2\dbch\af4\loch\f2 long\tab 0\tab 017777777777L\par \hich\af2\dbch\af4\loch\f2 unsigned long\tab 0\tab 037777777777uL\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 One point of confusion this often leads to is the base of the number 0.  Technically, the num\hich\af4\dbch\af4\loch\f4 ber 0 is an octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  number, but in practice it doesn't make any difference.  You may use it when a decimal number is required because the difference in base only matters when the number is converted from the string you type in when you enter a \hich\af4\dbch\af4\loch\f4 program to the internal number used in calculations.  In practice, then, you can use 0 as either a base 8, base 10 or base 16 number.\par \hich\af4\dbch\af4\loch\f4 The table below shows some examples of legal octal constants, with their decimal equivalents.\par \par }\pard\plain \s31\qj\li360\ri3960\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2520\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 octal integer\tab decimal integ\hich\af4\dbch\af4\loch\f4 er\par }\pard\plain \s26\qj\li360\ri3960\sl223\slmult1\widctlpar\tx2520\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 0\tab 0\par \hich\af2\dbch\af4\loch\f2 07\tab 7\par \hich\af2\dbch\af4\loch\f2 010\tab 8\par \hich\af2\dbch\af4\loch\f2 0100\tab 64\par \hich\af2\dbch\af4\loch\f2 077777\tab 32767\par \hich\af2\dbch\af4\loch\f2 0177777u\tab 65535u\par \hich\af2\dbch\af4\loch\f2 017777777777L\tab 2147483647L\par \hich\af2\dbch\af4\loch\f2 037777777777uL\tab 4294967295ul\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318380}\hich\af4\dbch\af4\loch\f4 Hexadecimal Integers{\*\bkmkend _Toc495318380}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:integer}}}{\hich\af4\dbch\af4\loch\f4 Hexadecimal numbers are integers represented in base sixteen, rather than\hich\af4\dbch\af4\loch\f4  the more familiar base ten.  Hexadecimal numbers are made up of the digits 0 to 9 and the letters a to f or A to F.  In C, hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  numbers are distinguished from decimal numbers and octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  numbers by a leading zero, fo\hich\af4\dbch\af4\loch\f4 llowed by an x character or X character.  \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned long integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:unsigned long integer}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:unsigned integer}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 long integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:long integer}}}{\hich\af4\dbch\af4\loch\f4 As with decimal and octal integers, hexadecimal integers can be long or short, signed or unsigned.  The range of integers allowed in each representation are show below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2520\tx3960\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int\tab 0\tab 0x7FFF\par \hich\af2\dbch\af4\loch\f2 unsigned int\tab 0\tab 0xFFFFu\par \hich\af2\dbch\af4\loch\f2 long\tab 0\tab 0x7FFFFFFFL\par \hich\af2\dbch\af4\loch\f2 unsigned long\tab 0\tab 0xFFFFFFFFuL\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The table below shows some examples of legal hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  constants, with their decimal equivalents.\par \par }\pard\plain \s31\qj\li360\ri3960\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2520\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 hexadecimal integer\tab decimal integer\par }\pard\plain \s26\qj\fi360\ri3960\sl223\slmult1\widctlpar\tx2520\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 0x0\tab 0\par \hich\af2\dbch\af4\loch\f2 0X7\tab 7\par \hich\af2\dbch\af4\loch\f2 0x10\tab 16\par \hich\af2\dbch\af4\loch\f2 0x100\tab 256\par \hich\af2\dbch\af4\loch\f2 0xa\tab 10\par \hich\af2\dbch\af4\loch\f2 0xF\tab 15\par \hich\af2\dbch\af4\loch\f2 0x7FFF\tab 32767\par \hich\af2\dbch\af4\loch\f2 0xFFFFu\tab 65535u\par \hich\af2\dbch\af4\loch\f2 0x7FFFFFFFL\tab 2147483647L\par \hich\af2\dbch\af4\loch\f2 0x\hich\af2\dbch\af4\loch\f2 FFFFFFFFuL\tab 4294967295ul\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318381}\hich\af4\dbch\af4\loch\f4 Character Constants{\*\bkmkend _Toc495318381}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:integer}}}{\hich\af4\dbch\af4\loch\f4 Character constants are formed by enclosing a single character in quote marks, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 'a'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Character constants are treated exactly as if an integer constant eq\hich\af4\dbch\af4\loch\f4 uivalent to the ordinal value of the character was used instead of the character constant.  For example, in any program that contains the character constant 'a', it would be legal, and have no effect on the executable program, to replace the character con\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 tant with 97.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ASCII character set}}}{\hich\af4\dbch\af4\loch\f4 That certainly doesn't mean there is no need for character constants.  If you are trying to write a portable program that is comparing against the character a, you should use a character constant, since not all com\hich\af4\dbch\af4\loch\f4 puters use the integer value 97 for a lowercase a.\par \hich\af4\dbch\af4\loch\f4 ORCA/C uses the ASCII character set to determine the ordinal values of the characters.\par \hich\af4\dbch\af4\loch\f4 Some characters in the ASCII character set cannot be represented using a key that can be typed from the keyboard.  The\hich\af4\dbch\af4\loch\f4 se characters are represented as escape sequences, and are discussed later in this chapter.\par \hich\af4\dbch\af4\loch\f4 The C language does not specify if characters are signed or unsigned; that detail is left up to the implementor of the compiler.  In ORCA/C, characters constants ar\hich\af4\dbch\af4\loch\f4 e signed.\par \par \hich\af4\dbch\af4\loch\f4 Examples:\par \par \hich\af4\dbch\af4\loch\f4 'a'\tab 'A'\tab '\\''\tab '"'\tab '\\040'\tab '\\40'\tab '\\x10'\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318382}\hich\af4\dbch\af4\loch\f4 String Constants{\*\bkmkend _Toc495318382}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strings\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 string constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:strings}}}{\hich\af4\dbch\af4\loch\f4 String constants consist of any sequence of characters except new line or the quote character, enclosed in quo\hich\af4\dbch\af4\loch\f4 te characters.  (Both the new line character and the quote character can, however, be represented as an escape sequence.)  As with character constants, escape sequences are used to represent non-printing characters; they are described in the next section.\par \hich\af4\dbch\af4\loch\f4 Internally, strings are represented as a sequence of bytes, one for each character in the string, followed by a terminating null byte.  }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 null character}}}{\hich\af4\dbch\af4\loch\f4 (A null byte has a value of zero.)  The value of each byte is the ordinal value for the character\hich\af4\dbch\af4\loch\f4 , as specified by the ASCII character set, described in Appendix D.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strings\:in expressions}}}{\hich\af4\dbch\af4\loch\f4 Unlike other constants, using a string constant in an expression does not cause the compiler to load the value of the string.  Instead, as with arrays, the a\hich\af4\dbch\af4\loch\f4 ddress of the first character is loaded.  In practice, this means that you can use a string constant wherever a pointer to a string is required, as in the famous Hello, World program, shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("Hello, world.\\n");\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stri\hich\af4\dbch\af4\loch\f4 ngs\:continuation}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 continuation lines}}}{\hich\af4\dbch\af4\loch\f4 String constants can be spread across more than one line.  There are two ways to do this.  The first method has been a part of the C language for quite some time.  It involves using the \\ character as the last \hich\af4\dbch\af4\loch\f4 character on the line.  In that case, the string constant continues with the first character of the next line.  The second method is new to ANSI C.  In the second method, you simply code two string constants with no intervening tokens, and the compiler pl\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 gs them together.  The Hello, World program is shown below using these two methods.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("Hello, \\\par \hich\af2\dbch\af4\loch\f2 world.\\n");\par \}\par \par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("Hello, "\par \tab \hich\af2\dbch\af4\loch\f2      "world.\\n");\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Note that the second method allows you to put spaces or tabs in\hich\af4\dbch\af4\loch\f4  the program to improve readability, while the older method of using a continuation line requires that the continuation of the string start in column 1.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strings\:maximum length}}}{\hich\af4\dbch\af4\loch\f4 ORCA/C imposes two limits on strings.  First, no single string constant \hich\af4\dbch\af4\loch\f4 may have more than 4000 characters.  Second, no single function can have string constants whose total length exceeds 8000 characters.\par \par }\pard \s16\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Examples:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 "Hello, world.\\n"\par \hich\af2\dbch\af4\loch\f2 "This is a string constant"   " that has been broken into two parts."\par \hich\af2\dbch\af4\loch\f2 "He said, \\"I have arr\hich\af2\dbch\af4\loch\f2 ived.\\""\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 "What?\\?!"\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318383}\hich\af4\dbch\af4\loch\f4 Escape Sequences{\*\bkmkend _Toc495318383}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 character constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 string constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 escape sequences\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 control characters}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 newline character}}}{\hich\af4\dbch\af4\loch\f4 Escape sequences are used in string constants and character constants to represent ch\hich\af4\dbch\af4\loch\f4 aracters that would otherwise be difficult to type from the keyboard, or that interfere with the construction of the constant itself.  Escape sequences consist of the \\ character followed by a single character, an octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  constant, or a hexadec\hich\af4\dbch\af4\loch\f4 imal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  constant.  (In escape sequences, hexadecimal constants must begin with a lowercase x.)  The table below shows the escape sequences that consist of a single character, along with the equivalent integral value and the standard use fo\hich\af4\dbch\af4\loch\f4 r the escape sequence in C.\par \par }\pard\plain \s31\qj\li360\ri2520\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2160\tx3960\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 escape sequence\tab integral value\tab meaning\par }\pard\plain \s16\qj\fi360\ri2520\sl223\slmult1\widctlpar\tx2160\tx3960\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 a\tab 7\tab alarm (bell)\par \hich\af4\dbch\af4\loch\f4 b\tab 8\tab back space\par \hich\af4\dbch\af4\loch\f4 f\tab 12\tab form feed\par \hich\af4\dbch\af4\loch\f4 n\tab 10\tab new line\par \hich\af4\dbch\af4\loch\f4 p\tab (special)\tab p-string}{\pard\plain \s16\qj\fi360\ri2520\sl223\slmult1\widctlpar\tx2160\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 p-strings}}}{\par \hich\af4\dbch\af4\loch\f4 r\tab 13\tab carriage return\par \hich\af4\dbch\af4\loch\f4 t\tab 9\tab horizontal tab\par \hich\af4\dbch\af4\loch\f4 v\tab 11\tab vertical tab\par \\\tab \hich\af4\dbch\af4\loch\f4 92\tab \\ character\par \hich\af4\dbch\af4\loch\f4 '\tab 96\tab ' charac\hich\af4\dbch\af4\loch\f4 ter\par \hich\af4\dbch\af4\loch\f4 "\tab 34\tab " character\par \hich\af4\dbch\af4\loch\f4 ?\tab 63\tab ? character\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Four of these escape sequences are used because of the syntax of character constants and string constants.  Since the back slash character is used to start an escape sequence, you can also follow it with a second back\hich\af4\dbch\af4\loch\f4  slash character to place a single back slash character in a constant.  The quote mark (") ends a string constant, and the single quote mark (') ends a character constant, so both have an escape sequence to allow you to put these characters in string and \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 haracter constants.  The ? character is used when a ? in a string or character constant might be confused with a trigraph.  All of the remaining escape sequences except \\p are used to represent control characters that have special meaning to the console d\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 iver.  While the value used for each of these control characters will vary from computer to computer, they always perform the same action when the string or character constant is used with the standard output libraries.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strings\:p-strings}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 p-st\hich\af4\dbch\af4\loch\f4 rings}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 null character}}}{\hich\af4\dbch\af4\loch\f4 The escape sequence \\p is not used in standard C.  It is used in ORCA/C to allow the formation of a p-string.  Normally, strings end with a terminating null character.  Unfortunately, many of the tool calls in the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 toolbox require a p-string, which uses a length byte to indicate the length of a string.  When you need to specify a p-string as a constant, use the escape sequence \\p right after the opening quote mark.  The final string will start with a byte that indic\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 tes how many characters are in the string, and will be followed by a normal C string.  The terminating null character is not counted as one of the characters when determining the value of the length byte.  The \\p escape sequence is treated as the characte\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  p in a character constant, as well as in a string constant if the escape sequence is not the first character in the string.\par \hich\af4\dbch\af4\loch\f4 When you need to specify a specific numeric value in a character or string constant, you can follow the back slash character by one\hich\af4\dbch\af4\loch\f4  to three digits, which are then interpreted as an octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  number.  For example, since ORCA/C uses the ASCII character set, which specifies an ordinal value of 041 octal (33 decimal) for the character !, the character constants '!' and '\\41' re\hich\af4\dbch\af4\loch\f4 present the same value.  You can also use a lowercase x followed by one , two or three digits to represent the value in hexadecimal notation.  Thus, '\\x21' is also a valid way to represent '!'.  You should be careful when using values in strings.  While '\\\hich\af4\dbch\af4\loch\f4 41' represents the ! character in a character constant, "\\410" is not the same as "!0", as you might intend.  Instead, the finished string has a single character with an ordinal value of eight.  (The most significant two bits do not fit into a byte, and a\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 e discarded.)\par \hich\af4\dbch\af4\loch\f4 The C language does not specify what the compiler will do if you follow the \\ character by a character other than one of the ones discussed.  In ORCA/C, use of a non-escape character after the \\ character will place that character in the cons\hich\af4\dbch\af4\loch\f4 tant.  For example, the character constants }{\fs18 \hich\af2\dbch\af4\loch\f2 '\\g'}{\hich\af4\dbch\af4\loch\f4  and }{\fs18 \hich\af2\dbch\af4\loch\f2 'g'}{\hich\af4\dbch\af4\loch\f4  are exactly the same.\par \hich\af4\dbch\af4\loch\f4 For examples of strings and character constants that include escape sequences, see the two preceding sections.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318384}\hich\af4\dbch\af4\loch\f4 Real Numbers{\*\bkmkend _Toc495318384}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point\:constants}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants\:floa\hich\af4\dbch\af4\loch\f4 ting-point}}}{\hich\af4\dbch\af4\loch\f4 Floating-point constants are used to represent numbers that do not have integral value, or that cannot be represented using an integer because they are too large or too small.  The general format is a sequence of digits, followed by a decimal \hich\af4\dbch\af4\loch\f4 point, followed by another sequence of digits, and an exponent, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 3.14159e-14\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The exponent can start with either an uppercase E, or a lowercase e, as shown.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The format for floating-point constants can vary quite a bit from this general form.  You can\hich\af4\dbch\af4\loch\f4  leave out the digit sequence before or after the decimal point, as in }{\fs18 \hich\af2\dbch\af4\loch\f2 1.e10}{\hich\af4\dbch\af4\loch\f4  or }{\fs18 \hich\af2\dbch\af4\loch\f2 .1e10}{\hich\af4\dbch\af4\loch\f4 .  In fact, you can leave off the exponent, too, as in }{\fs18 \hich\af2\dbch\af4\loch\f2 1.}{\hich\af4\dbch\af4\loch\f4  or }{\fs18 \hich\af2\dbch\af4\loch\f2 .1}{\hich\af4\dbch\af4\loch\f4 .  You must have either an exponent or a decimal point, but if you specify an exponent, you can omit the dec\hich\af4\dbch\af4\loch\f4 imal point, as in }{\fs18 \hich\af2\dbch\af4\loch\f2 12e40}{\hich\af4\dbch\af4\loch\f4 .\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SANE}}}{\hich\af4\dbch\af4\loch\f4 The exponent, if specified, starts with either a lowercase or uppercase e.  This is followed by an optional plus or minus sign, and then by a sequence of one or more digits.  The number is represented internally as an \hich\af4\dbch\af4\loch\f4 extended SANE format number, giving an accuracy of a little over 19 decimal digits, and an exponent range of -4932 to 4932.  Keep in mind that if the number is stored in a float or double variable, the accuracy will be reduced to match the accuracy of the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 variable.\par \hich\af4\dbch\af4\loch\f4 C allows a floating point constant to be followed by f or F to indicate a float value, or l or L to indicate long double.  While these characters are allowed, they have no effect on a floating-point constant in ORCA/C.{\*\bkmkend tokens}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tokens}{\rxe tokens}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318385}\hich\af4\dbch\af4\loch\f4 White Space{\*\bkmkend _Toc495318385}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 white space}}}{\hich\af4\dbch\af4\loch\f4 White space characters may be used to separate the tokens in a program.  White space characters include the space, line feed, carriage return, vertical tab, horizontal tab, back space, and form feed characters.  The line fee\hich\af4\dbch\af4\loch\f4 d, carriage return, form feed and vertical tab characters all end the current line, which has special meaning in the preprocessor and when continuing lines.  With that exception, replacing any sequence of white space characters outside a string or charact\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 r constant with a single space has no effect on the finished program.  Generally, white space characters are used to format the program, making it easier to read.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318386}\hich\af4\dbch\af4\loch\f4 Comments{\*\bkmkend _Toc495318386}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 comments}}}{\hich\af4\dbch\af4\loch\f4 A comment starts with the characters /*, and ends with the first oc\hich\af4\dbch\af4\loch\f4 currence of the characters */.  Comments are used solely to document the source code; replacing a comment with a single space will have no effect on the finished program.\par \hich\af4\dbch\af4\loch\f4 Note that comments can extend over more than one line, and that they can be used in p\hich\af4\dbch\af4\loch\f4 reprocessor commands.\par \hich\af4\dbch\af4\loch\f4 C does not allow recursive comments (sometimes called nested comments); that is,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /*   /*   */   */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 is not a legal comment in C.  You can use the preprocessor's #if, #endif commands to cause the compiler to ignore large sections of c\hich\af4\dbch\af4\loch\f4 ode which may include comments.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 12 \endash  The Preprocessor\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318387}\hich\af4\dbch\af4\loch\f4 Chapter 12 \endash  The Preprocessor{\*\bkmkend _Toc495318387}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par {\*\bkmkstart preprocessor}\hich\af4\dbch\af4\loch\f4 The C preprocessor is a series of commands that tell the compiler to take certain actions.  Using the preprocessor, you can tell the compiler to skip certain sections of source code, to repla\hich\af4\dbch\af4\loch\f4 ce some source code by other source code, and so forth.  While the preprocessor is built right into ORCA/C, logically, preprocessing occurs before the program is compiled.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318388}\hich\af4\dbch\af4\loch\f4 Syntax{\*\bkmkend _Toc495318388}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Commands to the preprocessor all start with the # character, which must appea\hich\af4\dbch\af4\loch\f4 r before any other non-white space character in the line.  This is followed by the preprocessor command, which may require other parameters.  You can separate the preprocessor command from the # character with white space characters.  The preprocessor com\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 and ends with the first new line, vertical tab, carriage return, or form feed character.  The # character can appear on a line by itself, in which case it is ignored.\par \hich\af4\dbch\af4\loch\f4 The ability to place white space characters before the # character and between the # char\hich\af4\dbch\af4\loch\f4 acter and the name of the preprocessor command is a recent addition to the C language.  If you are concerned with portability, you may wish to code the preprocessor commands as we do in the examples, without white space characters.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 continuation lines}}}{\hich\af4\dbch\af4\loch\f4 There are two ways to extend a preprocessor command over more than one line in the source file.  The first is to continue the line by placing a \\ character at the end of the line, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define sec(x)  \\\par \tab \tab \hich\af2\dbch\af4\loch\f2 (1.0 / cos(x))\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The other way to extend a prep\hich\af4\dbch\af4\loch\f4 rocessor command over more than one line is to start a comment on one line, and finish it on another line, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define  \tab \tab \tab \tab /* trig extensions\par \tab \tab \hich\af2\dbch\af4\loch\f2 */\tab sec(x)   (1.0 / cos(x))\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 While the preprocessor does not parse the source file, it does break the source \hich\af4\dbch\af4\loch\f4 file up into tokens to find macro names.  The same rules are shared by the preprocessor and the compiler for forming tokens and comments.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318389}\hich\af4\dbch\af4\loch\f4 Preprocessor Macros{\*\bkmkend _Toc495318389}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 preprocessor macros}{\txe see macros}}}{{\*\bkmkstart macros}{\*\bkmkstart define}\hich\af4\dbch\af4\loch\f4 The #define preprocessor command allows you to define \hich\af4\dbch\af4\loch\f4 macros.  When the macro is used later in the source code of the program, it is replaced by the tokens layed out in the #define command.  One of the most common uses of preprocessor macros is to define constants using simple textual replacement.  For examp\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e, you can define the boolean constants true and false, as shown in the simple program below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define TRUE -1\par \hich\af2\dbch\af4\loch\f2 #define FALSE 0\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 int bool;\par \par \hich\af2\dbch\af4\loch\f2 bool = TRUE;\par \hich\af2\dbch\af4\loch\f2 if (bool)\par \hich\af2\dbch\af4\loch\f2    printf("Hello, world.\\n");\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 While the compiler uses a more efficient me\hich\af4\dbch\af4\loch\f4 chanism to implement preprocessor macros, the way to think of this program is that the two #define statements define two macros, called TRUE and FALSE.  Whenever the preprocessor finds one of those words in the program, it is replaced by the text that fol\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 ows the words.  In our example, then, preprocessing occurs before the compiler starts to compile the program, so the program the compiler actually compiles looks like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 int bool;\par \par \hich\af2\dbch\af4\loch\f2 bool = -1;\par \hich\af2\dbch\af4\loch\f2 if (bool)\par \hich\af2\dbch\af4\loch\f2    printf("Hello, world.\\n");\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Before moving on to more complicated examples, a few points are worth mentioning.  First, the text that will replace the name of the macro starts with the first non-white space character after the name of the macro itself.  This text is converted into a s\hich\af4\dbch\af4\loch\f4 tream of tokens by the preprocessor, and stored as tokens.  This has an important consequence.  At first glance, it might seem that a statement like\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 bool = 0FALSE;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would be legal, since, after macro replacement, the statement looks like this:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 bool = 00;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In fact, the statement is not legal, because the macro has already been converted into an integer with a value of zero, so the compiler sees two integer constants after the equal sign.  The correct equivalent, then, is\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 bool = 0 0;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 One thing you will no\hich\af4\dbch\af4\loch\f4 tice in all of the examples is that all of the macro names are capitalized.  You are not required to capitalize the names of macros, but this is a common convention used by many C programmers, and we will follow that convention in our examples.  It is wor\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 h pointing out, though, that the names of macros, like all identifiers in C, are case sensitive.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macros\:parameters}}}{\hich\af4\dbch\af4\loch\f4 Macros are not limited to simple textual replacement.  For example, you can define a trigonometric function for the secant using a ma\hich\af4\dbch\af4\loch\f4 cro.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define sec(x) (1/cos(x))\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Note that in this case, since we want the macro to blend in with the standard C math library, we have used lowercase letters in the name of the macro.\par \hich\af4\dbch\af4\loch\f4 When you use a macro that has parameters in a program, you can substitut\hich\af4\dbch\af4\loch\f4 e any number of tokens for the parameter.  For example, all of the following are legal uses of the macro preprocessor, although not all of the examples result in legal C programs.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 sec(pi)\par \hich\af2\dbch\af4\loch\f2 sec(0.45)\par \hich\af2\dbch\af4\loch\f2 sec(pi/12.0)\par \hich\af2\dbch\af4\loch\f2 sec("strings are allowed, although this exam\hich\af2\dbch\af4\loch\f2 ple will not compile")\par \hich\af2\dbch\af4\loch\f2 sec((pi/12.0+.45)*0.01)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Macros can have any number of parameters.  To create a macro with more than one parameter, list the names of the parameters separated by commas.  For example, you could define a macro to find the distance bet\hich\af4\dbch\af4\loch\f4 ween two points, as in the following small program, which also shows one macro calling another.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par \hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \par \hich\af2\dbch\af4\loch\f2 #define sqr(x) ((x)*(x))\par \hich\af2\dbch\af4\loch\f2 #define distance(p1,p2) (sqrt(sqr(p1.x-p2.x)+sqr(p1.y-p2.y)))\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 struct point \{f\hich\af2\dbch\af4\loch\f2 loat x,y;\} point1,point2;\par \par \hich\af2\dbch\af4\loch\f2 point1.x = 1.0;\par \hich\af2\dbch\af4\loch\f2 point1.y = 1.0;\par \hich\af2\dbch\af4\loch\f2 point2.x = 3.0;\par \hich\af2\dbch\af4\loch\f2 point2.y = 1.0;\par \par \hich\af2\dbch\af4\loch\f2 printf("The distance is %f\\n", distance(point1,point2));\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There are a few important points to note about the syntax of macros that have parameters.  First, the op\hich\af4\dbch\af4\loch\f4 ening parenthesis must appear immediately after the name of the macro in both the definition and the use.  This is to prevent confusion between a macro parameter and a simple textual replacement macro whose first character is a left parenthesis.  Second, \hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4 ou can use parentheses within the macro call to enclose token streams that include commas, so long as the parentheses are legal in the C program produced by the macro expansion.  The names of macro parameters, like macros, follow the same rules as identif\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ers in C, with the exception that reserved words are not reserved in the preprocessor.  In fact, it is legal, although very poor form, to define a reserved word as a macro.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macros\:nesting}}}{{\*\bkmkstart undef}\hich\af4\dbch\af4\loch\f4 It is not legal to define more that one macro using the same\hich\af4\dbch\af4\loch\f4  name.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macro stringization}}}{\hich\af4\dbch\af4\loch\f4 Within a macro, it is possible to merge the string value of a macro parameter with adjacent string constant, or to treat the parameter as a string constant.  The # operator, when it appears before the name of a macro para\hich\af4\dbch\af4\loch\f4 meter, indicates that the parameter is to be treated as a string rather than a token.  For example, the following code fragment will print the familiar Hello, world. string to the screen.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define greet(who) "Hello, " #who "."\par \par \hich\af2\dbch\af4\loch\f2 printf(greet(world));\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 token merging}}}{\hich\af4\dbch\af4\loch\f4 The macro preprocessor can also merge two tokens to form a new token.  The ## operator controls this process.  The following code fragment is equivalent to strPtr = setPtr.\par \par \hich\af4\dbch\af4\loch\f4 #define ptr(where) where ## Ptr\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ptr(str) = ptr(set)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macro\hich\af4\dbch\af4\loch\f4 s\:predefined}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ANSI C}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 time}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 date}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line numbers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file names}}}{\hich\af4\dbch\af4\loch\f4 Macros can also be removed with #undef.  #undef takes a single parameter, which is the name of a macro to undefine.  The macor by the given name is removed from\hich\af4\dbch\af4\loch\f4  the preprocessor's macro symbol table.  It is not an error to undefine a macro that has never been defined.  Once the macro has been undefined, it is also not an error to redefine it.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #undef}}}{\hich\af2\dbch\af4\loch\f2 #undef greet\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 There are several predefined macros that \hich\af4\dbch\af4\loch\f4 exist in any C program.  These macros can be used in your program, but you cannot change them or remove them via the #undef command.  Each of the predefined macros places a single token in your program; the token, and what it means, is shown in the table \hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 elow.\par \par }\pard\plain \s31\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 macro\tab token\tab use\par }\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 __DATE__}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __DATE__}}}{\tab \hich\af4\dbch\af4\loch\f4 string\tab The date as of the start of the compilation, in the form Mmm dd yyyy, e.g., "Jan 12 1989".\par \hich\af4\dbch\af4\loch\f4 __FILE__}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __FILE__}}}{\tab \hich\af4\dbch\af4\loch\f4 string\tab Name of the current source file.\par \hich\af4\dbch\af4\loch\f4 __LINE__}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __LINE__}}}{\tab \hich\af4\dbch\af4\loch\f4 integer constant\tab \hich\af4\dbch\af4\loch\f4 Line number of the line being compiled.  Each physical line in the file is counted, even if the line is in a comment or is skipped because of preprocessor commands.\par \hich\af4\dbch\af4\loch\f4 __TIME__}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __TIME__}}}{\tab \hich\af4\dbch\af4\loch\f4 string\tab Time as of the start of the compilation, in the form hh:mm\hich\af4\dbch\af4\loch\f4 :ss, e.g., "15:36:12".\par \hich\af4\dbch\af4\loch\f4 __STDC__}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __STDC__}}}{\tab \hich\af4\dbch\af4\loch\f4 integer constant\tab A non-zero value in any compiler that implements ANSI C.  In ORCA/C, the value is -1.  In a compiler that does not implement ANSI C, this macro will not be defined.\par \hich\af4\dbch\af4\loch\f4 __ORCAC__}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\keepn\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __ORCAC__}}}{\tab \hich\af4\dbch\af4\loch\f4 integer constant\tab ORCA/C will return a -1.  In any other C compiler, this macro will not be defined.\par }\pard \s16\qj\fi-2880\li3240\sl223\slmult1\widctlpar\tx1800\adjustright {\hich\af4\dbch\af4\loch\f4 __VERSION__}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __VERSION__}}}{\tab \hich\af4\dbch\af4\loch\f4 string\tab The compiler version in the form "2.0.0".{\*\bkmkend macros}{\*\bkmkend define}{\*\bkmkend undef}}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #undef}{\rxe undef}\bxe }}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 #define{\rxe define}\bxe }}{\pard\plain \s16\qj\fi-2880\li3240\sl223\slmult1\widctlpar\tx1800\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 macros}}{\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318390}\hich\af4\dbch\af4\loch\f4 Entering Macros from the Command Line{\*\bkmkend _Toc495318390}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 In addition to defining macros in the source file with the #define command, you can also define macros from outside of the compiler when you compile the program.  ORCA/C now allows definition of macros from the comm\hich\af4\dbch\af4\loch\f4 and line.  The macros are defined within a language dependent parameter.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 run prog.cc cc=(-dPARM)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 defines a macro named PARM.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 There are basically two ways to define a macro from the command line.  The definition shown above has the form\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 -d<\hich\af2\dbch\af4\loch\f2 name>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 which is exactly equivalent to\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define <name> 1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 at the beginning of the source file.  This defines a macro with the name given, and assigns the value 1.  You can also define a macro with the form\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 -d<name>=<token>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 where token can be any integer, \hich\af4\dbch\af4\loch\f4 long integer, floating-point constant, or identifier.  This is exactly equivalent to\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define <name> <token>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 at the beginning of the source file.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 No blanks are allowed in the macro definition.  Spaces can appear before or after the definitions, and are us\hich\af4\dbch\af4\loch\f4 ed to separate multiple definitions.\par \hich\af4\dbch\af4\loch\f4 These definitions can be used with the COMPILE, CMPL, and RUN command, as well as with all of the aliases for these commands.  The definitions apply to all source files specified in the command, not just the first one. \hich\af4\dbch\af4\loch\f4  You can also enter these definitions from the "Language Parms" field of the Compile dialog from the desktop development environment.  The definitions are ignored by languages other than the C compiler.\par \hich\af4\dbch\af4\loch\f4 Here are more examples of macro definitions from the \hich\af4\dbch\af4\loch\f4 command line.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 run prog.cc cc=(-DTEST -DDEBUG=TRUE)\par \hich\af2\dbch\af4\loch\f2 compile file1.cc file2.cc cc=(-dday=14 -dmonth=September -dyear=89)\par \hich\af2\dbch\af4\loch\f2 cmpl cc=(-dPI=3.14159e+01)\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318391}\hich\af4\dbch\af4\loch\f4 Including Files{\*\bkmkend _Toc495318391}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard libraries}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard libraries}{\txe see also libraries}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 libraries{\txe \hich\af4\dbch\af4\loch\f4 see also toolbox}}}{{\*\bkmkstart include}\hich\af4\dbch\af4\loch\f4 The #include command is used to deal with situations where a source program is made up of more than one source file.  The most common use of the #include directive is to include interface files for the standard C libraries.  For ex\hich\af4\dbch\af4\loch\f4 ample, to be completely correct, the common Hello, World program should actually start off with a #include command that includes the header for the standard input and output library, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("Hello, world.\\n\hich\af2\dbch\af4\loch\f2 ");\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\hich\af4\dbch\af4\loch\f4 The include statement is followed by a file name, which can be enclosed in quote marks or brackets.  The compiler compiles all of the lines in the included file, then returns to the file that contained the #include command, and conti\hich\af4\dbch\af4\loch\f4 nues compiling with the line immediately after the #include command.  In the example, the name of the header file for the standard input and output libraries is stdio.h.  This file can be found with all of the other standard header files, which include no\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  only the standard C libraries, but also the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox interface.  These header files are located in the ORCACDefs folder, which, in turn, is located in the LIBRARIES folder.  Any time you enclose a file name in brackets, the compiler will look fo\hich\af4\dbch\af4\loch\f4 r the file in the ORCACDefs folder.\par \hich\af4\dbch\af4\loch\f4 The other common use for the #include command is to include source code you have written specifically for a program.  This could include custom header files, macro definitions used in more than one source file, or even a\hich\af4\dbch\af4\loch\f4  single program which has grown too large to edit.  In this case, you would enclose the file name in quote marks, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include "mymacros"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 When the file name is enclosed in quote marks, the compiler looks for the file in the current directory.  If the f\hich\af4\dbch\af4\loch\f4 ile you want to include is located in a folder in your current directory, you can use a partial path name; you can also use a full path name if the file you want to include is located on another disk, or in some other location on your current disk.  Examp\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 es are shown below.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include "/network/project.x/secret.macros"\par \hich\af2\dbch\af4\loch\f2 #include "macrofolder/macro.file.1"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macros}}}{\hich\af4\dbch\af4\loch\f4 It is possible to use a macro for the file name, provided the file name can be broken down into tokens.  In the case of a quoted file name,\hich\af4\dbch\af4\loch\f4  this will always work, since the file name is a string constant.  In the case of a file name enclosed in brackets, you will be able to use any GS/OS file name, but some file names from other file systems may not work.  Note that the ability to use a macr\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4  for the file name is a recent addition to the C language, and may not be present in all C compilers.\par \hich\af4\dbch\af4\loch\f4 There is no fixed limit to the nesting level for included files.  For example, an included file can include another file, which can also include still ano\hich\af4\dbch\af4\loch\f4 ther file, and so on.  This process can continue for as long as memory is available.{\*\bkmkend include}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #include}{\rxe include}\bxe }}{\par {\*\bkmkstart append}\hich\af4\dbch\af4\loch\f4 ORCA/C supports another file inclusion mechanism, the #append command.  This command is used to chain two files together.  Like the #inclu\hich\af4\dbch\af4\loch\f4 de command, the #append command requires a file name as a parameter, and this file name can be enclosed in brackets or quote marks.  Brackets are still used to indicate that the file should come from the ORCACDefs folder, and quote marks are used for file\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  in the local directory, or for full path names.  You can also use a macro to specify the path name, with the same restrictions that applied to the #include command.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 multiple languages}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language}}}{\hich\af4\dbch\af4\loch\f4 There are two principle differences b\hich\af4\dbch\af4\loch\f4 etween the #include command and the #append command.  The first is that all lines after the #append directive are ignored.  Once the compiler starts processing lines in the appended file, it never returns to the original file, as the #include directive do\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 s.  Conceptually, the #append command is like a goto, while the #include command is like a subroutine call.  The other difference between the two commands is that, if the #append command appears in the top level file, the file that is appended can be a so\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 rce file for some language other than C.  The top level file is the source file you actually compile, that is, a file that has not been included using the #include command.  This powerful feature means that you can create a program using two or more langu\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ges, and then compile the entire program with a single step.{\*\bkmkend append}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #append}{\rxe append}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318392}\hich\af4\dbch\af4\loch\f4 Precompiled Headers{\*\bkmkend _Toc495318392}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 header files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 precompiled headers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sym files}}}{\hich\af4\dbch\af4\loch\f4 Many C programs, especially those that use the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox, start with\hich\af4\dbch\af4\loch\f4  a list of header files to include.  In practice, compiling the header files can actually take longer than compiling the executable part of the program.\par \hich\af4\dbch\af4\loch\f4 ORCA/C 2.0 tries to cut compile times by eliminating the need to compile the headers files over and ove\hich\af4\dbch\af4\loch\f4 r.  As each header file is compiled, ORCA/C writes the new symbol table information to a file we will call the .sym file.  This file is in the same folder as the initial source file.  The name of the file is formed by removing the last extension on the so\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 rce file name, if any, and adding the characters ".sym".  For example, the .sym file for a source file named foo.cc would be foo.sym.  The next time the file is compiled, ORCA/C can read the symbol table from the .sym file, often cutting compile times mor\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  than in half.\par \hich\af4\dbch\af4\loch\f4 There are many ways to implement this concept.  Two design considerations drove our choice for the implementation method.  First, we wanted a mechanism that was 100% transparent to anyone using the compiler.  With the exception that you will\hich\af4\dbch\af4\loch\f4  see .sym files formed for each compile, ORCA/C precompiled headers are completely automatic.  The other factor that drove the design is that macro definitions that precede include statements can, and often do, effect the way a header file is compiled.  F\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 r example, it is very common to use a macro to override the size of an array in a tool header file.  This useful feature of the C language makes it impossible to compile the header file itself, replacing it with a symbol table, without requiring programme\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 s to know when forcing a recompile of the symbol tables is appropriate.\par \hich\af4\dbch\af4\loch\f4 ORCA/C does several things to determine when a .sym file must be rebuilt.  First, if the source file changes in any way before the include statements, the symbol file is rebuilt.  If t\hich\af4\dbch\af4\loch\f4 he time or date stamp on any include file changes, the symbol file will also be rebuilt.  Finally, if an include file is missing or cannot be accessed, the .sym file is rebuilt.\par \hich\af4\dbch\af4\loch\f4 There are also some restrictions that apply to which header files are included\hich\af4\dbch\af4\loch\f4  in the .sym file.  The first code-generating function or initialized variable in the program completes the .sym file, and all subsequent header files are compiled in the normal way.  For example, if an include appears after a function definition (not dec\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 aration) it will not be included in the .sym file.  In addition, any header file that contains an initialized variable or function definition will not be included in the .sym file, and will block subsequent header files, too.\par \hich\af4\dbch\af4\loch\f4 Assuming the .sym file must be\hich\af4\dbch\af4\loch\f4  rebuilt, it actually takes two compiles before the process is complete.  On the compile where the compiler determines that the .sym file should be rebuilt, it uses any information from the .sym file up to the point of change, then deletes the old .sym fi\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e.  The new .sym file is built on the next compile.\par \hich\af4\dbch\af4\loch\f4 There are two flags that control the use of .sym files.  On any of the compile commands, the \-i flag tells the compiler to compile the program as if the compiler did not support precompiled headers.  Any \hich\af4\dbch\af4\loch\f4 .sym file that is present is ignored, and a new .sym file will not be built.  The -r flag forces the compiler to rebuild the .sym file, even if the compiler does not see any reason to do so.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 small memory compiler}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memory}{\txe see also small me\hich\af4\dbch\af4\loch\f4 mory compiler}}}{\hich\af4\dbch\af4\loch\f4 Precompiled headers are not supported by the small memory version of the compiler.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318393}\hich\af4\dbch\af4\loch\f4 Conditional Compilation{\*\bkmkend _Toc495318393}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 conditional compilation}}}{{\*\bkmkstart if}\hich\af4\dbch\af4\loch\f4 The preprocessor includes a powerful conditional compilation mechanism.  Using conditional compilatio\hich\af4\dbch\af4\loch\f4 n, it is possible to control the way a program is compiled by making small changes in the source for a program.\par \hich\af4\dbch\af4\loch\f4 The two commands which form the cornerstone for conditional compilation are #if and #endif.  The #if command has an expression for an operand.  \hich\af4\dbch\af4\loch\f4 This expression is evaluated.  If the result of the expression is zero, all of the lines from the #if command to the matching #endif command are skipped by the compiler.  If the result of the expression is not zero, the lines following the #if command are\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 compiled in the normal way, and the matching #endif command is ignored.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macros\:in #if statements}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 __STDC__}}}{\hich\af4\dbch\af4\loch\f4 As an example, we could write a very short program to test to see if a compiler implements ANSI C.  All ANSI C compilers define the __\hich\af4\dbch\af4\loch\f4 STDC__ macros as a non-zero value.  In compilers that do not implement ANSI C, the macro will not be defined.  When an undefined macro name is used in an expression in an #if command, it is replaced by the integer constant 0.  Our program, then, looks lik\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #if __STDC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler implements ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #endif\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tokens}}}{\hich\af4\dbch\af4\loch\f4 While the lines between the #if and #endif statements are skipped if the expression in the #if statement evaluates to 0, the lines skipped must st\hich\af4\dbch\af4\loch\f4 ill be made up of legal C tokens.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #if 0\par \hich\af2\dbch\af4\loch\f2 @\par \hich\af2\dbch\af4\loch\f2 #endif\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 is not legal, since the character @ is not a legal C token.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #if\:nesting}}}{\hich\af4\dbch\af4\loch\f4 #if statements may be nested.  For example, we could expand our previous example to see if the compiler being u\hich\af4\dbch\af4\loch\f4 sed is ORCA/C, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #if __STDC__\par \hich\af2\dbch\af4\loch\f2    printf("This compiler implements ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2    #if __ORCAC__\par \hich\af2\dbch\af4\loch\f2       printf("In fact, this is ORCA/C.\\n");\par \hich\af2\dbch\af4\loch\f2    #endif\par \hich\af2\dbch\af4\loch\f2 #endif\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #if\:expressions}}}{\hich\af4\dbch\af4\loch\f4 With a few exceptions, the rules for forming\hich\af4\dbch\af4\loch\f4  an expression in an #if statement are the same as the rules for expressions in the C language.  The exceptions have to do with the fact that the expression is evaluated at compile time, rather than at run time, and also with features have been added to s\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 mplify tasks in the preprocessor.  The major difference between expressions used in the #if command and expressions used in the program is that the expression that appears after the #if command must be a constant expression.  For a detailed discussion of \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 onstant expressions, see Chapter 17.{\*\bkmkend if}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #if}{\rxe if}\bxe }}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 #endif{\rxe if}\bxe }}{\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 defined operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macros\:defined operator}}}{\hich\af4\dbch\af4\loch\f4 Preprocessor expressions can make use of two features which cannot be used in any other expression.  The first ha\hich\af4\dbch\af4\loch\f4 s already been mentioned:  when an undefined macro is encountered, it is given a value of 0.  The second feature is the defined operator.  The defined operator is followed by the name of a macro, which may be enclosed in parentheses.  The result of the op\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 rator is 1 if the macro is defined, and 0 if it is not defined.  Rewritten to use the defined operator, our example program that determines if a compiler is an ANSI C compiler looks like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #if defined __STDC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler i\hich\af2\dbch\af4\loch\f2 mplements ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #endif\par \}\par \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #else\bxe }}}{\hich\af4\dbch\af4\loch\f4 As with the C language, the preprocessor's #if statement can have an else clause.  Any #if statement can have a #else statement between the #if statement and the matching #endif statement.  We can use this \hich\af4\dbch\af4\loch\f4 feature to extend our test program so that it prints a message if the compiler is not an ANSI C compiler, too.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #if __STDC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler implements ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #else\par \hich\af2\dbch\af4\loch\f2 printf("This compiler does not implement ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #endif\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #elif\bxe }}}{\hich\af4\dbch\af4\loch\f4 Complex conditions can be handled using the #elif command.  The #elif command is a combination of the #if command and the #else command.  Like the #else command, the #elif command is used after a #if command, but before the matching #en\hich\af4\dbch\af4\loch\f4 dif command.  It must also come before the #else command if there is one.  Like the #if command, the #elif command is followed by an expression.  This expression is only evaluated if the previous #if command or #elif command evaluated to zero.  In that ca\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 e, the expression is evaluated.  If the result is zero, the preprocessor scans forward to the next matching #elif, #else or #endif command, and takes appropriate action.  If the result of the expression is not zero, all statements up to the next matching \hich\af4\dbch\af4\loch\f4 #\hich\af4\dbch\af4\loch\f4 elif command, #else command, or #endif command are compiled.  Any lines up to the matching #endif statement and the #endif statement itself are then skipped by the compiler.  Note that more than one #elif command can appear in a single #if structure, in w\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 ich case the preprocessor evaluates the expression in each statement in turn until one of the expressions results in a non-zero value.  The lines following that statement are then compiled.  If all of the #if and #elif statements have expressions that eva\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 uates to zero, the lines following the #else statement are compiled.\par \hich\af4\dbch\af4\loch\f4 As an example, we can expand the program that determines what compiler we are using to detect ORCA/C or APW C}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW C}}}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #if __ORCAC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler is ORCA\hich\af2\dbch\af4\loch\f2 /C, which implements ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #elif __STDC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler implements ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #elif __APWC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler is APW C, which does not implement ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #else\par \hich\af2\dbch\af4\loch\f2 printf("This compiler does not implement ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #endif\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #ifdef\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #ifndef\bxe }}}{\hich\af4\dbch\af4\loch\f4 There are two special forms of the #if statement which are used to test for the existence of a macro.  They are #ifdef and #ifndef.  Both statements require an operand that is a single identifier.  If the identifier has been \hich\af4\dbch\af4\loch\f4 defined as a preprocessor macro, then #ifdef works exactly like #if 1, and #ifndef works like #if 0.  If the identifier is not a preprocessor macro, the results are switched.  Recoding our program to determine if a compiler is an ANSI C compiler to use th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 se commands, we have the following:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #ifdef __STDC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler implements ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #endif\par \hich\af2\dbch\af4\loch\f2 #ifndef __STDC__\par \hich\af2\dbch\af4\loch\f2 printf("This compiler does not implement ANSI C.\\n");\par \hich\af2\dbch\af4\loch\f2 #endif\par \}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318394}\hich\af4\dbch\af4\loch\f4 Line Numbers{\*\bkmkend _Toc495318394}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Historically, the C language has been a\hich\af4\dbch\af4\loch\f4 ssociated with preprocessors.  The preprocessor described in this chapter was originally a separate program from the C compiler.  It took a source file as input, and produced another source file as output; the output file was then compiled.  The C++ langu\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ge is a more recent example of a preprocessor used with the C language.  There are also numerous examples of cross-compilers that work by taking a program written in one language, say FORTRAN, and producing a program written in C for compilation by the C \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ompiler.\par \hich\af4\dbch\af4\loch\f4 This presents a problem when the compiler needs to flag an error.  Meaningful error messages are associated with information about the source file in which the error occurs, and the line where the error occurs.  It is very discouraging, for exampl\hich\af4\dbch\af4\loch\f4 e, when a compiler is only able to tell you that a divide by zero error occurred somewhere in your 10,000 line program; it is far more useful if the compiler identifies which line of which source file the error occurred in.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #line}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 line numbers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 file names}}}{\hich\af4\dbch\af4\loch\f4 The #line command is used by preprocessors for this purpose.  It takes one or two parameters, either of which may be produced by expanding a macro.  The first, which is required, is an integer constant.  The value is used by the compi\hich\af4\dbch\af4\loch\f4 ler as the line number of the next line that is compiled.  The second parameter, which is optional, is the name of the source file, enclosed in quote marks.  This name is used until it is overridden by another #line command.  The line number and file name\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 specified this way are used by the compiler for compile-time errors, reported by the program when a run-time error occurs and the #pragma debug directive has been set to an appropriate value, and used by the source-level debugger to show where you are in \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he original source file.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318395}\hich\af4\dbch\af4\loch\f4 Flagging Errors{\*\bkmkend _Toc495318395}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #error}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errors}}}{\hich\af4\dbch\af4\loch\f4 The #error statement is used to produce a compile-time error message.  It uses a single parameter, which must be a string constant.  This string is printed as an error message at compil\hich\af4\dbch\af4\loch\f4 e time.  For example, the program\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #ifndef __GARBONZOC__\par \hich\af2\dbch\af4\loch\f2 #error "This program requires Garbonzo C."\par \hich\af2\dbch\af4\loch\f2 #endif\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would generate the compile-time error message\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #error: This program requires Garbonzo C.\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 just before the #error command in the \hich\af4\dbch\af4\loch\f4 output listing.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318396}\hich\af4\dbch\af4\loch\f4 Pragmas{\*\bkmkend _Toc495318396}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #pragma}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pragma}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compiler directives}}}{\hich\af4\dbch\af4\loch\f4 The #pragma command is used for preprocessor commands that are specific to a particular compiler.  Each #pragma command that ORCA/C recognizes is followed by an identifier t\hich\af4\dbch\af4\loch\f4 hat specifies the type of the statement.  Any #pragma statement that does not start with one of the identifiers described below is skipped.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318397}\hich\af4\dbch\af4\loch\f4 cda{\*\bkmkend _Toc495318397}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 classic desk accessories}}}{\b0 \hich\af2\dbch\af4\loch\f2 #}{\hich\af2\dbch\af4\loch\f2 pragma cda}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:cda\bxe }}}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 name start shutdown}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The cda command is used \hich\af4\dbch\af4\loch\f4 to create a classic desk accessory.  Classic desk accessories are not executed like normal C programs; instead, they are copied into the DESK.ACCS folder in the SYSTEM folder, where they can be used from any program that follows standard rules for the App\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 Normal C programs must contain a function called main.  This function is the one executed when the program starts.  Classic desk accessories do not have to have a function called main.  Instead, you specify the name of the function that will be cal\hich\af4\dbch\af4\loch\f4 led when the classic desk accessory is executed as the }{\i \hich\af4\dbch\af4\loch\f4 start}{\hich\af4\dbch\af4\loch\f4  parameter to the cda command.\par \hich\af4\dbch\af4\loch\f4 When the operating system is shutting down, it will call each of the classic desk accessories to give it a chance to do any shut-down processing that it may require.\hich\af4\dbch\af4\loch\f4   Each classic desk accessory must have a shut-down function.  The }{\i \hich\af4\dbch\af4\loch\f4 shutdown}{\hich\af4\dbch\af4\loch\f4  parameter is the name of your shut-down function.  If you do not need to do any shut-down processing, you must still have a shut-down function, but it can be an empty function.\par \hich\af4\dbch\af4\loch\f4 Eac\hich\af4\dbch\af4\loch\f4 h classic desk accessory has a name.  This name appears in the CDA menu, which is used to select the classic desk accessory to execute.  The }{\i \hich\af4\dbch\af4\loch\f4 name}{\hich\af4\dbch\af4\loch\f4  parameter is used to specify the name of your classic desk accessory.  It must be a string constant.\par \hich\af4\dbch\af4\loch\f4 The cda c\hich\af4\dbch\af4\loch\f4 ommand must be used before the start of the first function in the program.  If it is used, you cannot use another cda command or an nda command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318398}\hich\af4\dbch\af4\loch\f4 cdev{\*\bkmkend _Toc495318398}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma cdev}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:cdev\bxe }}}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 start}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 control panel}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The cda command is used to create a Contr\hich\af4\dbch\af4\loch\f4 ol Panel Device (CDev) for the Control Panel from System 6.0.  Classic desk accessories are not executed like normal C programs; instead, they are copied into the CDEV folder in the SYSTEM folder, where they can be used from within Apple's Control Panel.\par \hich\af4\dbch\af4\loch\f4 N\hich\af4\dbch\af4\loch\f4 ormal C programs must contain a function called main.  This function is the one executed when the program starts.  CDevs do not have to have a function called main.  Instead, you specify the name of the function that will be called when the classic desk a\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 cessory is executed as the }{\i \hich\af4\dbch\af4\loch\f4 start}{\hich\af4\dbch\af4\loch\f4  parameter to the cdev command.  The function itself takes two long integer parameters and an integer parameter, returning a long integer.\par \hich\af4\dbch\af4\loch\f4 For a complete description of Control Panel Devices, as well as details about the par\hich\af4\dbch\af4\loch\f4 ameters passed to this function and the value returned by the function, see Apple II File Type Notes for file type $C7 (CDV).\par \hich\af4\dbch\af4\loch\f4 For a short example of a CDev, see the :CC.Samples: disk.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318399}\hich\af4\dbch\af4\loch\f4 databank{\*\bkmkend _Toc495318399}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma databank}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:databank\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 databank}}}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 p\hich\af2\dbch\af4\loch\f2 arm}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There are several instances that arise when using the toolbox where you need to create a function that a tool will call.  When the C compiler creates the code for a function, it assumes that the data bank register is pointing to the bank that contains \hich\af4\dbch\af4\loch\f4 the global scalars.  When a function is called by a tool, there is no guarantee that this is true.  To solve this problem, you must use the databank directive before any function that will be called from a tool.  This directive tells the compiler to save \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he original data bank register, and then set the data bank register to point to the bank containing the global scalars.  Before returning from the subroutine, the original data bank register is restored.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma databank 1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Immediately after the function,\hich\af4\dbch\af4\loch\f4  switch back to the normal calling conventions using the command\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma databank 0\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Functions that have data bank restoration on can still be called from other C functions, but they will be slightly less efficient than functions that do not have data ban\hich\af4\dbch\af4\loch\f4 k restoration enabled.\par \hich\af4\dbch\af4\loch\f4 See also the toolparms directive.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318400}\hich\af4\dbch\af4\loch\f4 debug{\*\bkmkend _Toc495318400}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:debug\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 debugger}}}{\hich\af2\dbch\af4\loch\f2  debug }{\i \hich\af2\dbch\af4\loch\f2 parm}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The debug command is used to control the types of debugging the compiler will do.  The various debugging features can be very useful\hich\af4\dbch\af4\loch\f4  when you are developing a program, but each debugger feature requires run-time code which takes up space and time in your finished program.\par \hich\af4\dbch\af4\loch\f4 This command is only used in rare cases.  If you are using the desktop development environment, you will normally u\hich\af4\dbch\af4\loch\f4 se the debug check box in the compile dialog to control debugging.  When that box is checked, all of the debugging features described here are enabled.  When that box is not checked, all of the debugging features are disabled.\par \hich\af4\dbch\af4\loch\f4 The debug command requires a \hich\af4\dbch\af4\loch\f4 single integer parameter.  This parameter is actually a series of flags.  For each flag, a value of 1 turns the debugging feature on, and a value of 0 turns it off.  Even if new debugger features are added in the future, then, the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma debug -1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 will enable all debugging features, while the command\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma debug 0\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 will turn all debugger features off.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 range checking}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack size}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack overflow}}}{\hich\af4\dbch\af4\loch\f4 Setting bit 0 (a value of 1) turns range checking on.  The only checking this en\hich\af4\dbch\af4\loch\f4 ables in the C compiler is a check for stack overflows.  This check is made at the start of each function.  The check ensures that there is enough room left on the run-time stack to declare all of the local variables needed by the function.  This reduces \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he chance of crashes due to stack overflows.  It is still possible to overflow the stack with a very complicated expression or by calling a tool.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 debugger}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 source-level debugger}}}{\hich\af4\dbch\af4\loch\f4 Setting bit 1 (a value of 2) tells the compiler to generate deb\hich\af4\dbch\af4\loch\f4 ug code for the source-level debugger.  You should not set this bit unless the program will be executed from the desktop development environment.  If you try to execute a program that has source-level debug code in it from the text shell or the Finder, th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  program will crash.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 profiler}}}{\hich\af4\dbch\af4\loch\f4 Setting bit 2 (a value of 4) tells the compiler to generate profile code.  Profile code is used by the desktop development environment's profile command to tell you where the hot spots are in your program.  You must se\hich\af4\dbch\af4\loch\f4 t bit 1 if you set bit 2.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 run-time errors}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errors}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 trace backs}}}{\hich\af4\dbch\af4\loch\f4 Setting bit 3 (a value of 8) tells the compile to generate trace back code.  Without trace back code, a run-time error will simply report which error occurred.  If you hav\hich\af4\dbch\af4\loch\f4 e enabled trace back code, you will get more information about the error.  This information starts with the name of the function where the error occurred, along with the line number in the source file.  This is followed by a table showing the function tha\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  called the one where the error occurred, and the line number the call was made from, then the function that called the previous one, and so forth, back to the function main.  This information is written to error out, which defaults to the text screen in \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he text environment, and the shell window in the desktop environment.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack repair code}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters}}}{\hich\af4\dbch\af4\loch\f4 Setting bit 4 (a value of 16) tells the compiler to check for stack errors.  If this check is enabled, the compiler generates code for each f\hich\af4\dbch\af4\loch\f4 unction call that keeps track of the stack as the function is called, making sure the function removes exactly the right number of bytes from the stack.  For example, if you call a function and pass an integer parameter, two bytes are pushed onto the stac\hich\af4\dbch\af4\loch\f4 k\hich\af4\dbch\af4\loch\f4 .  If the function expected a long integer, though, it will remove four bytes from the stack, and this error check would catch the error.  When using this error flag, we suggest\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma debug 25\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 which also turns on stack overflow checking and tracebacks.\hich\af4\dbch\af4\loch\f4   With tracebacks enabled, the compiler doesn't just tell you that an error occurred, it also tells you where the error occurred, making the error a lot easier to track down and correct.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318401}\hich\af4\dbch\af4\loch\f4 expand{\*\bkmkend _Toc495318401}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:expand\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 macros\:expanding}}}{\hich\af2\dbch\af4\loch\f2  exp\hich\af2\dbch\af4\loch\f2 and }{\i \hich\af2\dbch\af4\loch\f2 int}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The expand pragma allows you to see the tokens the compiler is actually compiling, essentially showing you the output from the preprocessor, with all of the preprocessor macros expanded.  If INT is a non-zero value, the preprocessor prints the toke\hich\af4\dbch\af4\loch\f4 n stream sent to the compiler, after all tokens have been expanded.  If INT is zero (the default), this information is not printed.   This feature is useful for debugging macros and examining the effects of character constants and escape codes.  The exact\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 expansions produced are:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab All integers and character constants are expanded to base 10 values.\par \hich\af4\dbch\af4\loch\f4 2.\tab Escape sequences in strings are printed as hex escape sequences.\par \hich\af4\dbch\af4\loch\f4 3.\tab Macros are expanded.\par \hich\af4\dbch\af4\loch\f4 4.\tab Floating point constants are converted to exponential form.\par \hich\af4\dbch\af4\loch\f4 5.\tab \hich\af4\dbch\af4\loch\f4 Trigraphs are converted to their equivalent characters.\par \hich\af4\dbch\af4\loch\f4 6.\tab Preprocessor directives are removed from the source stream.\par \hich\af4\dbch\af4\loch\f4 7.\tab Any input skipped due to conditional compilation directives is removed from the source stream.\par \hich\af4\dbch\af4\loch\f4 8.\tab Comments are removed.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318402}\hich\af4\dbch\af4\loch\f4 float{\*\bkmkend _Toc495318402}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma \hich\af2\dbch\af4\loch\f2 float}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:float\bxe }}}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 card slot}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 68881}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SANE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point}}}{\hich\af4\dbch\af4\loch\f4 By default, ORCA/C generates calls to the Standard Apple Numerics Environment (SANE) to perform floating-point calculations.  If you have installed an Innovative Sys\hich\af4\dbch\af4\loch\f4 tems FPE card}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 FPE card}}}{\hich\af4\dbch\af4\loch\f4 , however, ORCA/C can create a program that calls the card directly.  To create a program that calls the FPE card, place the float directive before the first function in your program.  The card parameter should be coded as 1. \hich\af4\dbch\af4\loch\f4  The slot parameter is no longer used, although a value must be coded  If your program does not do any floating-point calculations, this directive will make no difference in the code or execution time.  On some floating-point intense programs, however, th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  FPE card can speed up a program by a factor of 120.\par \hich\af4\dbch\af4\loch\f4 The actual effect of this directive is to tell the compiler not to generate direct calls to SANE, forcing it to use library calls for all floating-point calculations.\par \hich\af4\dbch\af4\loch\f4 In addition to using this directive,\hich\af4\dbch\af4\loch\f4  you should replace the SysFloat library in the Libraries folder with the library by the same name at the path :MoreExtras:FPE:SysFloat.  This library generates calls to the FPE card, rather than calling SANE.  Because of this arrangement, you will get so\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 e benefit from the FPE card by simply replacing the library, even if you forget to use this pragma.\par \hich\af4\dbch\af4\loch\f4 If a program is compiled with the FPE libraries, an FPE card must be installed or the program will crash or give incorrect answers.  If you must create a pr\hich\af4\dbch\af4\loch\f4 ogram that can work with or without an FPE card, write the program to make SANE calls, and use the SANE patches that come with the FPE card.\par \hich\af4\dbch\af4\loch\f4 Card numbers other than 0 or 1 are not currently in use.  They are reserved in case other floating-point cards are \hich\af4\dbch\af4\loch\f4 produced for the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318403}\hich\af4\dbch\af4\loch\f4 ignore{\*\bkmkend _Toc495318403}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma ignore}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:ignore\bxe }}}{\hich\af2\dbch\af4\loch\f2  }{\i \hich\af2\dbch\af4\loch\f2 flags}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 errors}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ORCA/C is an ANSI C compiler, adhering to the language specification defined by the American National Standards Institute (ANSI).  ANSI C is actually the late\hich\af4\dbch\af4\loch\f4 st major standard in a long line of languages that have used the general name C; there are, in fact, five major dialects of C and countless minor variations.\par \hich\af4\dbch\af4\loch\f4 Judging from the changes made in ANSI C, one of the concerns of the standards committee was to mak\hich\af4\dbch\af4\loch\f4 e C a safer language, catching many errors in the compiler than might have resulted in incorrect programs in earlier compilers.  In general, this is a very good goal, but some older C programs no longer compile under ANSI C compilers.  The ignore statemen\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  tells ORCA/C to ignore certain kinds of checks that are required of ANSI C compilers so you can port older C programs a little easier.\par \hich\af4\dbch\af4\loch\f4 The flags parameter is a series of bits, each controlling a specific error.  If the bit is set, the error is }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  reporte\hich\af4\dbch\af4\loch\f4 d.  The flags that are currently available are:\par \par }\pard\plain \s31\qj\fi-720\li1080\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 bit\tab use\par }\pard\plain \s16\qj\fi-720\li1080\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 0\tab If this bit is set, the compiler does not report illegal characters in the source stream when the characters occur in code that is not processed by the compiler.  For example, it is fairly common f\hich\af4\dbch\af4\loch\f4 or programs to use the $ character in file names, as in\par \par }\pard\plain \s26\qj\li1440\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #ifdef VAX\par \hich\af2\dbch\af4\loch\f2 #include <sys$stdio.h>\par \hich\af2\dbch\af4\loch\f2 #endif\par }\pard\plain \s16\qj\fi-720\li1080\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi360\li1080\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 This code is illegal under any properly implemented ANSI C compiler, whether or not VAX is defined.  If bit 0 of the ignore pragma's flag word is set, and VA\hich\af4\dbch\af4\loch\f4 X is not defined, ORCA/C will not flag an error.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318404}\hich\af4\dbch\af4\loch\f4 keep{\*\bkmkend _Toc495318404}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma keep }{\i \hich\af2\dbch\af4\loch\f2 name}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:keep\bxe }}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The keep command sets the name of the output file.  A name is provided automatically if you are using the desktop environment, although you\hich\af4\dbch\af4\loch\f4  can use this directive to choose your own name.  The name you choose cannot be the name of an existing file unless the file is an executable file or object module.\par \hich\af4\dbch\af4\loch\f4 The single parameter is the name of the output file.  As with the parameter for the #includ\hich\af4\dbch\af4\loch\f4 e command, this name is enclosed in quote marks or brackets, indicating if the file should be placed in the current directory or the ORCACDefs directory.  In general, you would not want to place the file in the ORCACDefs directory.\par \hich\af4\dbch\af4\loch\f4 The keep command must be\hich\af4\dbch\af4\loch\f4  used before the start of the first function in the program, and only one keep command can be used in a program.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318405}\hich\af4\dbch\af4\loch\f4 lint{\*\bkmkend _Toc495318405}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma lint }{\i \hich\af2\dbch\af4\loch\f2 int}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:lint\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 parameters}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The lint pragma forces stricter checking of programs than is required by the A\hich\af4\dbch\af4\loch\f4 NSI C standard.  The checks are individually enabled and disabled by setting and clearing bits in int.  To enable more than one check, add the values for the bits shown in the table below to form a single integer.  To enable all lint checks, use a value o\hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4  -1.\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1\tab Flag the use of a function before the function is defined as an error.  This is always bad form, but this flag is also very useful in checking to insure that all header files that should have been included have, in fact, been included.  If you miss\hich\af4\dbch\af4\loch\f4 ed including the header file for string.h, for example, but used strcat in your program, the compiler will flag an error for using strcat.\par \par \tab \hich\af4\dbch\af4\loch\f4 Error message: "lint: undefined function"\par \par \hich\af4\dbch\af4\loch\f4 2\tab Flag functions with no types as errors.\par \par \tab \hich\af4\dbch\af4\loch\f4 Error message: "lint: missin\hich\af4\dbch\af4\loch\f4 g function type"\par \par \hich\af4\dbch\af4\loch\f4 4\tab Flag functions with no prototyped parameter lists as errors.  If you are using tool header files that do not have prototyped headers, but you still want to use this check for the rest of your program, put the lint pragma after the #incl\hich\af4\dbch\af4\loch\f4 ude statements that include the tool header files.\par \par \tab \hich\af4\dbch\af4\loch\f4 Error message: "lint: missing parameter list"\par \par \hich\af4\dbch\af4\loch\f4 8\tab Flag pragmas that are not recognized by ORCA/C as errors.  Normally, ANSI C compilers ignore pragmas they do not recognize, assuming the source file is be\hich\af4\dbch\af4\loch\f4 ing used with more than one compiler.  Because of this, spelling errors in a pragma can go unnoticed by the compiler; this bit helps find this sort of problem.\par \par \tab \hich\af4\dbch\af4\loch\f4 Error message: "lint: unknown pragma"\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318406}\hich\af4\dbch\af4\loch\f4 memorymodel{\*\bkmkend _Toc495318406}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 small memory model}}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 large memor\hich\af2\dbch\af4\loch\f2 y model}}}{\hich\af2\dbch\af4\loch\f2 #pragma}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:memorymodel\bxe }}}{\hich\af2\dbch\af4\loch\f2  memorymodel }{\i \hich\af2\dbch\af4\loch\f2 parm}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The parameter is an integer constant.  If the value is zero, the compiler will generate code for the small memory model; a non-zero value will generate code for the large memory model.  You \hich\af4\dbch\af4\loch\f4 should use a value of 1 for the large memory model to allow for future expansion of the number of memory models.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions}}}{\hich\af4\dbch\af4\loch\f4 The large memory model is the most flexible.  When you use the large memory model, your progra\hich\af4\dbch\af4\loch\f4 m can have up to 64K bytes of global variables other than arrays, structures and unions.  Arrays, structures and unions can be as large as memory will allow, and you can have as many of them as will fit in memory.  In particular, arrays are not limited to\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 64K bytes, nor is the total space used by arrays limited to 64K bytes.  Dynamically allocated memory can also exceed 64K for a single chunk of memory.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4 When you use the small memory model, all global variables, including arrays, structures\hich\af4\dbch\af4\loch\f4  and unions, are limited to a single 64K byte area of memory.  This area of memory is shared with any functions you use from the standard C library, and if you do not use the segment statement, with your program's code.  In addition, the compiler assumes \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 hat you will not allocate any single array, structure or union that is larger than 64K bytes using the Memory Manager or malloc.  This restriction applies to any single structure, not to the total amount of space in use; you can allocate arrays, structure\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  and unions whose total space exceeds 64K.  These restrictions allow the compiler to generate code that is much smaller and faster than the code generated when the large memory model is used.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 segment statement}}}{\hich\af4\dbch\af4\loch\f4 It is possible to create programs that\hich\af4\dbch\af4\loch\f4  are much larger than 64K bytes in length without using the large memory model.  The segment statement can be used to split a program into more than one executable code segment.  The large memory model is only needed if the total global variable space exc\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 eds 64K bytes, or if you will be creating and manipulating dynamically allocated structures, unions or arrays where a single structure, union or array exceeds 64K bytes.  When you can use the segment directive instead of the large memory model, it is best\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 to do that, since the compiler generates smaller, more efficient code in the small memory model.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 segment statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 run-time stack}}}{\hich\af4\dbch\af4\loch\f4 Regardless of the memory model used, you can use the segment statement to place the code for the program in va\hich\af4\dbch\af4\loch\f4 rious static or dynamic segments.  In addition, both memory models limit the run-time stack size.  For information about the run-time stack, see the stacksize command, below.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318407}\hich\af4\dbch\af4\loch\f4 nba{\*\bkmkend _Toc495318407}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma nba }{\i \hich\af2\dbch\af4\loch\f2 start}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 HyperStudio}}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 New Button Actions}}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:\hich\af2\dbch\af4\loch\f2 nba\bxe }}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The nba command is used to create a HyperStudio New Button Action (NBA).\par \hich\af4\dbch\af4\loch\f4 Normal C programs must contain a function called main.  This function is the one executed when the program starts.  NBAs do not have to have a function called main.  Instea\hich\af4\dbch\af4\loch\f4 d, you specify the name of the function that will be called when the NBA is executed as the }{\i \hich\af4\dbch\af4\loch\f4 start}{\hich\af4\dbch\af4\loch\f4  parameter to the nba command.\par \hich\af4\dbch\af4\loch\f4 The function itself takes a single parameter of type }{\fs18 \hich\af2\dbch\af4\loch\f2 HSParamPtr}{\hich\af4\dbch\af4\loch\f4  and returns void.  When the NBA is called, HyperStudio passes a \hich\af4\dbch\af4\loch\f4 pointer to a structure containing a variety of information.  Information is also returned in this structure.\par \hich\af4\dbch\af4\loch\f4 HyperStudio supports a variety of callbacks; these are calls from the NBA back to HyperStudio to perform some action.  From ORCA/C, callbacks are m\hich\af4\dbch\af4\loch\f4 ade using the }{\fs18 \hich\af2\dbch\af4\loch\f2 __NBACALLBACK}{\hich\af4\dbch\af4\loch\f4  function, defined in HyperStudio.h.  (Note:  The name starts with two _ characters, not one.)  This function requires two parameters:  The callback number and a pointer to a structure like the one passed to the NBA.  In most cas\hich\af4\dbch\af4\loch\f4 es, you will actually pass back the same pointer passed to the NBA, but it is possible to make multiple copies of the structure.  If you do make copies of the structure, though, be sure to initialize the copies carefully, generally by copying the original\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 structure in it's entirety into the copy.  There are several fields in the structure that must be initialized properly for a callback to work.\par \hich\af4\dbch\af4\loch\f4 For a definition of the }{\fs18 \hich\af2\dbch\af4\loch\f2 HSParams}{\hich\af4\dbch\af4\loch\f4  structure, along with a number of other useful declarations, see HyperStudio.h. \hich\af4\dbch\af4\loch\f4  For complete details on how to write HyperStudio NBAs, contact Roger Wagner Publishing.\par \hich\af4\dbch\af4\loch\f4 For a short example of an NBA, see the :CC.Samples: disk.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318408}\hich\af4\dbch\af4\loch\f4 nda{\*\bkmkend _Toc495318408}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma nda }{\i \hich\af2\dbch\af4\loch\f2 open close action init period eventmask menuLine}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:nda\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 New Desk Accesso\hich\af2\dbch\af4\loch\f2 ries}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The nda command is used to create a new desk accessory.  New desk accessories are not executed like normal C programs; instead, they are copied into the DESK.ACCS folder in the SYSTEM folder, where they can be used from any desktop program that fol\hich\af4\dbch\af4\loch\f4 lows standard rules for the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 A new desk accessory does not require a function called main, like standard C programs.  Instead, there are four standard functions which must be defined, each of which is called by the Desk Manager to carry out some\hich\af4\dbch\af4\loch\f4  predefined task.  The names of these functions are listed as the first four parameters to the nda command.  The next two parameters are integer constants that specify how often the desk accessory is called when it is active (the period parameter), and wh\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 t kinds of events it handles (the eventmask parameter).  The last parameter is the name of the new desk accessory; the name appears in the Apple menu of any desktop program that can call the desk accessory.  A more detailed description of each parameter i\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  given below.\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 open\tab This parameter is an identifier that specifies the name of the function that is called when someone selects your desk accessory from the Apple Menu.  It must return a pointer to the window that it opens.\par \par \hich\af4\dbch\af4\loch\f4 close\tab This parameter is an iden\hich\af4\dbch\af4\loch\f4 tifier that specifies the name of the function to call when the user wants to close your desk accessory.  It must be possible to call this function even if open has not been called.  The function does not return a value.\par \par \hich\af4\dbch\af4\loch\f4 action\tab The action parameter is the\hich\af4\dbch\af4\loch\f4  name of a function that is called whenever the desk accessory must perform some action.  It must declare a single integer parameter, which defines the action that the function should take.  See page 5-7 of the }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  Toolbox Reference Manual}{\hich\af4\dbch\af4\loch\f4  for a lis\hich\af4\dbch\af4\loch\f4 t of the actions that will result in a call to this function.  The function does not return a value.\par \par \hich\af4\dbch\af4\loch\f4 init\tab The init parameter is the name of a function that is called at start up and shut down time.  This gives your desk accessory a chance to do time consu\hich\af4\dbch\af4\loch\f4 ming start up tasks or to shut down any tools it initialized.  This function must define a single integer parameter.  The function will be zero for a shut down call, and non-zero for a start up call.  The function does not return a value.\par \par \hich\af4\dbch\af4\loch\f4 period\tab This para\hich\af4\dbch\af4\loch\f4 meter tells the Desk Manager how often it should call your desk accessory for routine updates, such as changing the time on a clock desk accessory.  A value of -1 tells the Desk Manager to call you only if there is a reason, like a mouse down in your wind\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 w; 0 indicates that you should be called as often as possible; any other value tells how many 60ths of a second to wait between calls.\par \par \hich\af4\dbch\af4\loch\f4 eventMask\tab This value tells the Desk Manager which events your program can handle.  The Desk Manager will only call your \hich\af4\dbch\af4\loch\f4 program with the events you specify in this mask.\par \par \hich\af4\dbch\af4\loch\f4 menuLine\tab The last parameter is a string.  It tells the Desk Manager the name of your desk accessory.  The name must be preceded by two spaces.  After the name, you should always include the characters \\H**\hich\af4\dbch\af4\loch\f4 .\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The nda command must be used before the start of the first function in the program.  If it is used, you cannot use another nda command or a cda command.\par \hich\af4\dbch\af4\loch\f4 For a complete discussion of new desk accessories, see page 40.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318409}\hich\af4\dbch\af4\loch\f4 noroot{\*\bkmkend _Toc495318409}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma noroot}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 root file}}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:noroot\bxe }}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 When ORCA/C creates a program, it generates two object files for each source file it compiles.  The first object file has a suffix of .root; this file contains initialization code and a call to main.  The second file has a suf\hich\af4\dbch\af4\loch\f4 fix of .a, and contains the various variables and functions declared within the source file.\par \hich\af4\dbch\af4\loch\f4 In a program consisting of multiple source files, the only source file that actually needs a .root segment is the one that actually contains main.  This pragma can\hich\af4\dbch\af4\loch\f4  be used in all of the other source files to tell ORCA/C not to create a .root file, which will make the finished program slightly smaller.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318410}\hich\af4\dbch\af4\loch\f4 optimize{\*\bkmkend _Toc495318410}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma optimize }{\i \hich\af2\dbch\af4\loch\f2 parm}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:optimize\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 optimizer}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The optimize command is used to control\hich\af4\dbch\af4\loch\f4  the level of optimization.  The various features of the optimizer can make your program smaller and faster, but optimization takes time.  During the development cycle, when you are repeatedly compiling and testing your program, the time required by the o\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 timizer is significant enough that you will probably not want to optimize your program\par \hich\af4\dbch\af4\loch\f4 The optimize command requires a single integer parameter.  This parameter is actually a series of flags.  For each flag, a value of 1 turns the optimization on, and a va\hich\af4\dbch\af4\loch\f4 lue of 0 turns it off.  Even if new optimizations are added in the future, then, the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma optimize -1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 will enable all optimizations, while the command\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma optimize 0\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 will turn all optimizations off.  If you do not use the optimize comman\hich\af4\dbch\af4\loch\f4 d, the compiler does not optimize your program.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Bit 0 (a value of 1) controls optimization of the intermediate code.  If enabled, the intermediate code is scanned for dead code, which is removed; peephole optimization is performed; and constant expressions\hich\af4\dbch\af4\loch\f4  are evaluated at compile time.\par \hich\af4\dbch\af4\loch\f4 Setting bit 1 (a value of 2) enables the native code peephole optimizer.  This optimization scans the 65816 instructions produced by the compiler, replacing some sequences of instructions with equivalent, but more efficient,\hich\af4\dbch\af4\loch\f4  instructions.\par \hich\af4\dbch\af4\loch\f4 Setting bit 2 (a value of 4) enables register optimizations.  Since the 65816 only has three user registers, all of which have special, preassigned purposes, the compiler does not perform the kinds of register optimizations described in many\hich\af4\dbch\af4\loch\f4  compiler books.  Instead, it scans the 65816 instructions for certain operations that can be avoided.  For example, if a\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ldy #2\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 instruction is detected, but the compiler knows that the value in the y register is already 2, the instruction is removed.  W\hich\af4\dbch\af4\loch\f4 hile this optimization is technically another form of peephole optimization, the way the checks are performed is substantially different from the other peephole optimizations, so a separate optimizer is used.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack repair code}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 crashes}}}{\hich\af4\dbch\af4\loch\f4 Setti\hich\af4\dbch\af4\loch\f4 ng bit 3 (a value of 8) turns off the stack repair code normally generated by the compiler.  This cuts the size of the code and makes it considerably faster, but if your program has any parameter passing errors, this optimization may cause the program to \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 rash.  For help in finding such bugs, see the debug pragma.  For a description of legal parameter passing rules, see Chapter 16.\par \hich\af4\dbch\af4\loch\f4 Setting bit 4 (a value of 16) enables common subexpression elimination.  This optimization checks for repeated expressions, suc\hich\af4\dbch\af4\loch\f4 h as the array calculation for i+1 in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 a[i+1] = b[i+1] + c[i+1];\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 these common subexpressions are calculated once and saved, generally making the program smaller and faster.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Setting bit 5 (a value of 32) enables loop invariant removal.  This optimization c\hich\af4\dbch\af4\loch\f4 hecks any code sequence that loops back on itself for expressions which don't change inside the loop, removing these calculations from the body of the loop.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 small memory compiler}}}{\hich\af4\dbch\af4\loch\f4 The optimize command is not supported by the small memory version of \hich\af4\dbch\af4\loch\f4 the compiler.  The pragma is accepted, but has no effect on the finished program.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318411}\hich\af4\dbch\af4\loch\f4 path{\*\bkmkend _Toc495318411}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma path }{\i \hich\af2\dbch\af4\loch\f2 name}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:path\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #include}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The path pragma adds a folder to the list of folders the compiler searches when looking for a file.\par \hich\af4\dbch\af4\loch\f4 By default\hich\af4\dbch\af4\loch\f4 , an include or append statement looks in the current folder (8:) when a file name is enclosed in quote marks, and in the library folder (13:ORCACDefs:) when a file name is inclosed in <> characters.  If the compiler does not find the file, it looks in th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  other of these two folders.\par \hich\af4\dbch\af4\loch\f4 The path pragma adds a new pathname to the list of folders that are searched.  The path name itself is the }{\i \hich\af4\dbch\af4\loch\f4 name}{\hich\af4\dbch\af4\loch\f4  parameter, which is a string.  This string can be a partial pathname, in which case it is expanded to a full path n\hich\af4\dbch\af4\loch\f4 ame using the normal rules for GS/OS.\par \hich\af4\dbch\af4\loch\f4 Paths added with the path directive are searched immediately after the current prefix, and are searched in the order that they are encountered by the compiler.  For an example, assume a program includes these path prag\hich\af4\dbch\af4\loch\f4 mas:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma path "8:myheaders"\par \hich\af2\dbch\af4\loch\f2 #pragma path ":network:projectx:headers:"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Then for the include statement\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 the compiler would look for the file using the following paths, stopping as soon as a file was found:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 13:ORCACDefs:stdio.h\par \hich\af2\dbch\af4\loch\f2 8:st\hich\af2\dbch\af4\loch\f2 dio.h\par \hich\af2\dbch\af4\loch\f2 8:myheaders:stdio.h\par \hich\af2\dbch\af4\loch\f2 :network:projectx:headers:stdio.h\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 For this include:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include "secrets.h"\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 the compiler would look for the file using the following paths, again stopping as soon as a file was found:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 8:secrets.h\par \hich\af2\dbch\af4\loch\f2 8:myheaders:secrets.h\par \hich\af2\dbch\af4\loch\f2 :network:pr\hich\af2\dbch\af4\loch\f2 ojectx:headers:secrets.h\par \hich\af2\dbch\af4\loch\f2 13:ORCACDefs:secrets.h\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Paths can also be added from the command line using any of the various compile commands.  Path names are added with a language-specific compiler option, using the characters }{\fs18 \hich\af2\dbch\af4\loch\f2 -i}{\hich\af4\dbch\af4\loch\f4  followed by a string containin\hich\af4\dbch\af4\loch\f4 g the search path, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 run  spy.cc  cc=(-i":network:projectx:headers")\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Specifying a path name on the command line is completely equivalent to starting the course file with a path pragma.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318412}\hich\af4\dbch\af4\loch\f4 rtl{\*\bkmkend _Toc495318412}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma rtl}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:rtl\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 Inits}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 C programs n\hich\af4\dbch\af4\loch\f4 ormally exit via a Quit call to GS/OS, but some otherwise normal programming environments require a program to exit with an RTL machine language instruction.  The rtl command tells ORCA/C to create a program that exits with an RTL rather than a Quit.\par \hich\af4\dbch\af4\loch\f4 The p\hich\af4\dbch\af4\loch\f4 rime example of a program that must exit with a RTL instruction is an initialization program.  There are two kinds of initialization programs, permanent initialization programs (file type $B6, PIF) and temporary initialization files (file type $B7, TIF). \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 For information about these kinds of programs, see Apple II File Type Notes for the appropriate file type.  For an example of a simple TIF, see the :CC.Samples: disk.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318413}\hich\af4\dbch\af4\loch\f4 stacksize{\*\bkmkend _Toc495318413}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma stacksize }{\i \hich\af2\dbch\af4\loch\f2 parm}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:stacksize\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 run-time stack}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 All \hich\af4\dbch\af4\loch\f4 C programs use a run-time stack for calling functions and allocation of locally defined variables.  This run-time stack is allocated from bank zero.  There is no fool-proof way to determine how much memory will be available in bank zero when your program \hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 uns, although programs produced using ORCA/C will issue an error if there is not enough memory.  Allocating too little memory for the stack is also a serious problem that will generally result in your program crashing, and can result in corrupting memory \hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 eing used by the operating system, tools, or other programs.  (See the debug command for one way to detect stack overflows.)\par \hich\af4\dbch\af4\loch\f4 All of this means that you should allocate as small a stack as possible, but that there are serious penalties if the stack is too s\hich\af4\dbch\af4\loch\f4 mall.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 startgraph}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 startdesk}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SANE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 direct page}}}{\hich\af4\dbch\af4\loch\f4 By default, ORCA/C uses the stack allocated by the program launcher; this is 4K for the System 6.0 Finder, PRIZM 2.0 and the ORCA/M 2.0 shell.  This memory is used \hich\af4\dbch\af4\loch\f4 by the startgraph and startdesk functions to allocate direct page space for tools.  It is used in all C programs to allocate direct page space for SANE.  It is also used for function calls and local variables defined by your program.  The stacksize comman\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  lets you change the size of the stack.  In the desktop environment, you can generally allocate a stack up to about 16K bytes; in the text environment, or in S16 programs, you can often allocate a stack of 32K bytes.  The parameter for the stacksize direc\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ive is the size of the stack you wish to allocate, in bytes.  If it is not a multiple of 256, the number is increased to the next even multiple of 256.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318414}\hich\af4\dbch\af4\loch\f4 toolparms{\*\bkmkend _Toc495318414}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma toolparms }{\i \hich\af2\dbch\af4\loch\f2 parm}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:toolparms\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 toolbox}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There are several instance\hich\af4\dbch\af4\loch\f4 s that arise when using the toolbox where you need to create a function that a tool will call.  Tools use a different mechanism for passing parameters than ORCA/C does, so you must tell the compiler to use the toolbox's conventions.  Immediately before th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  function, you should tell the compiler to use the toolbox's mechanism for passing parameters by using the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma toolparms 1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Immediately after the function, switch back to the normal calling conventions using the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma toolparms 0\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Y\hich\af4\dbch\af4\loch\f4 ou do not have to use the toolparms directive if the function returns void and has no parameters.\par \hich\af4\dbch\af4\loch\f4 You cannot call a function defined this way from within the C program, although the function can call other functions written in C.\par \hich\af4\dbch\af4\loch\f4 This directive changes the\hich\af4\dbch\af4\loch\f4  stack model used to pass parameters from the one normally used by the ORCA languages to the model used by the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.  It does not change the order of the parameters.  In ORCA/C (and most other C compilers, for that matter) parameters are push\hich\af4\dbch\af4\loch\f4 ed onto the stack starting with the rightmost parameter and working to the left, while in the toolbox (and almost all other high-level languages) the parameters are pushed onto the stack starting with the leftmost parameter and working to the right, just \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 s you would read the parameter list.  The toolparms pragma does not affect the order in which the parameters are pushed.  To change the order of the parameters, use the pascal qualifier}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pascal qualifier}}}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 See also the databank command.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318415}\hich\af4\dbch\af4\loch\f4 xcmd{\*\bkmkend _Toc495318415}\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #pragma \hich\af2\dbch\af4\loch\f2 xcmd }{\i \hich\af2\dbch\af4\loch\f2 start}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 #pragma\:xcmd\bxe }}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 HyperCard}}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 XCMD}}}{\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 XCFN}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The xcmd command is used to create a HyperCard XCMD or XCFN.\par \hich\af4\dbch\af4\loch\f4 Normal C programs must contain a function called main.  This function is the one executed when the program starts.  \hich\af4\dbch\af4\loch\f4 XCMDs do not have to have a function called main.  Instead, you specify the name of the function that will be called when the XCMD is executed as the }{\i \hich\af4\dbch\af4\loch\f4 start}{\hich\af4\dbch\af4\loch\f4  parameter to the xcmd command.\par \hich\af4\dbch\af4\loch\f4 The function itself takes a single parameter of type }{\fs18 \hich\af2\dbch\af4\loch\f2 XCMDPtr}{\hich\af4\dbch\af4\loch\f4  and retu\hich\af4\dbch\af4\loch\f4 rns void.  When the XCMD is called, HyperCard passes a pointer to a structure containing a variety of information.  Information is also returned in this structure.\par \hich\af4\dbch\af4\loch\f4 HyperCard supports a variety of callbacks; these are calls from the XCMD back to HyperCard t\hich\af4\dbch\af4\loch\f4 o perform some action.  From ORCA/C, callbacks work almost exactly like tool calls, and from the programmer's standpoint they can be treated as tool calls.  The various callbacks are declared in HyperXCMD.h, a header file provided by Apple and included wi\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 h ORCA/C.\par \hich\af4\dbch\af4\loch\f4 For a definition of }{\fs18 \hich\af2\dbch\af4\loch\f2 XCMDPtr}{\hich\af4\dbch\af4\loch\f4  and the structure it points to, along with a number of other useful declarations, see HyperXCMD.h.  For complete details on how to write HyperCard XCMDs, see the HyperCard folder on the System 6.0 CD ROM..\par \hich\af4\dbch\af4\loch\f4 For a short \hich\af4\dbch\af4\loch\f4 example of an XCMD, see the :CC.Samples: disk.{\*\bkmkend preprocessor}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 preprocessor}{\rxe preprocessor}}}{\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl \pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318416}\hich\af4\dbch\af4\loch\f4 Chapter 13 \endash  Basic Data Types{\*\bkmkend _Toc495318416}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 types}}}{\hich\af4\dbch\af4\loch\f4 C has a rich variety of data types.  This chapter describes those C data types which are built into the language.  The next\hich\af4\dbch\af4\loch\f4  chapter covers derived and user-defined data types.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 data formats}}}{\hich\af4\dbch\af4\loch\f4 Some of the information in this chapter deals with the way information is stored internally in the memory of the computer.  This information is provided for\hich\af4\dbch\af4\loch\f4  very advanced programmers who need to write assembly language subroutines that will deal with C data, or who need to do strange and dangerous tricks with the data to work with the machine at the hardware level.  You do not need to understand this informa\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ion to use ORCA/C for normal C programming.  If it does not make sense to you, or if you will not be using the information, simply ignore it.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318417}\hich\af4\dbch\af4\loch\f4 Integers{\*\bkmkend _Toc495318417}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 signed}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned}}}{\hich\af4\dbch\af4\loch\f4 The C language supports four different types of integers\hich\af4\dbch\af4\loch\f4 , each of which can be signed or unsigned.  The four basic integer data types are char, short, int, and long.  ANSI C specifies the minimum range for each of these integer data types.  While older C compilers may not implement the integers using these sam\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  sizes, and new compilers are allowed to make the integers larger, the minimum sizes specified by ANSI C also happen to the the most common size for integers on microcomputers, and are the sizes used by ORCA/C.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 char}}}{\hich\af4\dbch\af4\loch\f4 Integers defined as char are the\hich\af4\dbch\af4\loch\f4  smallest.  Char values require one byte of storage.  Signed char values can range from -127 to 127; unsigned char values have a range of 0 to 255.  The C language allows the compiler implementor to decide if char values will be signed or unsigned by defa\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 lt; in ORCA/C, char values are unsigned by default.  All other integer types are required to be signed integers by default.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 short}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 int}}}{\hich\af4\dbch\af4\loch\f4 Short and int variables are the same size.  They require two bytes of storage.  Signed values can range fr\hich\af4\dbch\af4\loch\f4 om -32767 to 32767, while unsigned values can range from 0 to 65535.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 long}}}{\hich\af4\dbch\af4\loch\f4 Long integers require four bytes of storage.  Signed long integers range from -2147483647 to 2147483647, while unsigned long integers range from 0 to 4294967295.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 intege\hich\af4\dbch\af4\loch\f4 rs\:storage}}}{\hich\af4\dbch\af4\loch\f4 Internally, all unsigned integers are represented as binary values.  Signed integers are represented as two's complement numbers.  All of the integers that occupy more than one byte of storage are stored with the least significant byte first, \hich\af4\dbch\af4\loch\f4 proceeding to the most significant byte.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318418}\hich\af4\dbch\af4\loch\f4 Reals{\*\bkmkend _Toc495318418}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SANE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 68881}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Innovative Systems}}}{\hich\af4\dbch\af4\loch\f4 ORCA/C supports four storage formats for real numbers.  In all cases, calculations are performed using SANE or the Innovative System\hich\af4\dbch\af4\loch\f4 s' 68881 floating point card using ten byte intermediate values.  With some of the formats, the numbers are stored with less precision, so that you may see different results if you compare one equation that does not save intermediate results with a mathem\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 tically equivalent set of equations that store intermediate values in the less precise number formats.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 float}}}{\hich\af4\dbch\af4\loch\f4 Float and double are required in all C compilers.  Float numbers are stored in the IEEE floating point number format, with the least signif\hich\af4\dbch\af4\loch\f4 icant byte first.  They require four bytes of storage.  Float values are accurate to seven decimal digits, and allow exponents with a range of about 1e-38 to 1e38.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 double}}}{\hich\af4\dbch\af4\loch\f4 Double numbers require eight bytes of storage each.  They are stored least si\hich\af4\dbch\af4\loch\f4 gnificant byte first, using the IEEE floating point format.  They are accurate to fifteen decimal digits, and allow exponent ranges from 1e-308 to 1e308.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extended}}}{\hich\af4\dbch\af4\loch\f4 Extended numbers are peculiar to implementations of C on Apple computers.  They requi\hich\af4\dbch\af4\loch\f4 re ten bytes of storage each.  The storage format is an extended version of the IEEE format, with the values stored least significant byte first.  They are accurate to nineteen decimal digits, with an exponent range of 1e-4932 to 1e4932.  This is the form\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 t used internally by both SANE and the 68881 floating point coprocessor, so there is no loss of precision if intermediate variables are of type extended.  In addition, floating point calculations are performed faster if you are using SANE and all numbers \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 re stored in extended format, since a conversion from the original format to extended format is always a first step in doing a calculation with SANE.  Exactly the opposite is true if you are using the 68881 floating point card.  In that case, conversions \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 re done in hardware.  Float variables are faster with the 68881 card, since it takes less time to pass the number to the card and retrieve the result with the shorter formats.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 comp}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SANE}}}{\hich\af4\dbch\af4\loch\f4 Comp format numbers are signed integers that require e\hich\af4\dbch\af4\loch\f4 ight bytes of storage.  They range from -(263-1) to 263-1.  While comp numbers are integers, they are treated as a special form of floating-point number.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318419}\hich\af4\dbch\af4\loch\f4 Pointers{\*\bkmkend _Toc495318419}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers}}}{\hich\af4\dbch\af4\loch\f4 Pointers are represented internally as four-byte unsigned numbers, with the \hich\af4\dbch\af4\loch\f4 least significant byte stored first.  A value of zero is used to represent a null pointer.  Using type casting, pointers can be treated as unsigned long integers in mathematical equations with no loss of precision.\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 14 \endash  C Programs\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318420}\hich\af4\dbch\af4\loch\f4 Chapter 14 \endash  C Programs{\*\bkmkend _Toc495318420}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318421}\hich\af4\dbch\af4\loch\f4 The Anatomy of \hich\af4\dbch\af4\loch\f4 a C Program{\*\bkmkend _Toc495318421}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 C programs are made up of a series of declarations.  These declarations consist of declarations of global variables and declarations of functions.  In most C programs, some of the functions and global variables are defined in libraries or separ\hich\af4\dbch\af4\loch\f4 ately compiled modules.  The compiler is informed of their existence through interface files.\par \hich\af4\dbch\af4\loch\f4 While macro preprocessor commands are used in C programs to define constants and implement some operations, the macro preprocessor is not technically a part of th\hich\af4\dbch\af4\loch\f4 e C language.  For a description of the macro preprocessor, see Chapter 12.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318422}\hich\af4\dbch\af4\loch\f4 The Function main{\*\bkmkend _Toc495318422}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 main}}}{\hich\af4\dbch\af4\loch\f4 All C programs except classic desk accessories and new desk accessories must have a single function called main.  This function is the first one call\hich\af4\dbch\af4\loch\f4 ed; when you return from main, program execution stops.\par \hich\af4\dbch\af4\loch\f4 It is not important where main appears in a program; if the program consists of several modules, main can appear in any of them, regardless of the order in which the modules are compiled or linked.  T\hich\af4\dbch\af4\loch\f4 he important point is that a function named main must appear in exactly one of the modules.\par \hich\af4\dbch\af4\loch\f4 You may declare the function main as either a function returning an integer or as a function returning void.  Declaring it as a function returning an integer allows\hich\af4\dbch\af4\loch\f4  you to send a return code back to the caller.  If your program is designed to run from script files, this is an important step.  It allows you to tell the script file that the program terminated normally by returning zero, or to inform the shell that an \hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 rror occurred by returning a non-zero value.  If you do not return a value from main, the value reported to the shell is unpredictable.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318423}\hich\af4\dbch\af4\loch\f4 Argc and Argv{\*\bkmkend _Toc495318423}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 main}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 argc}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 argv}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 command line}}}{\hich\af4\dbch\af4\loch\f4 The shell passes two arguments to the function\hich\af4\dbch\af4\loch\f4  main.  These arguments can be ignored or used; to ignore them, don't code any parameters to the function.  These arguments allow you to look at the command line used to execute your program.  The sample program below shows how these arguments are used.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /\hich\af2\dbch\af4\loch\f2 * echo the command line arguments */\par \par \hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \par \hich\af2\dbch\af4\loch\f2 int main(argc,argv)\par \par \hich\af2\dbch\af4\loch\f2 int argc;\par \hich\af2\dbch\af4\loch\f2 char *argv[];\par \par \{\par \hich\af2\dbch\af4\loch\f2 int i;\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < argc; ++i)\par \hich\af2\dbch\af4\loch\f2    printf("%2d: %s\\n", i, argv[i]);\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In this program, you see argc and argv defined as parameters to main.  While\hich\af4\dbch\af4\loch\f4  you do not have to define argc and argv, if you do, they must be defined in the order shown.  When your program executes, the command line used to execute your program is scanned.  If you executed the program from the text environment or from the shell w\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ndow on ORCA/Desktop, the command line is the line you typed or that appeared in a script file that actually executed your program.  If you execute your program using the RUN command from the shell, or using the Compile to Memory or Compile to Disk comman\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 s form the desktop, the command line will be empty.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 I/O redirection}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 alias command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell: variables}}}{\hich\af4\dbch\af4\loch\f4 After I/O redirection characters are removed, aliases are expanded, and any shell variables are expanded, the command line is broken\hich\af4\dbch\af4\loch\f4  into strings.  These strings are formed by scanning the command line from left to right.  A string consists of any sequence of characters that contain no white space.  Argc is the number of strings found, while argv is an array of pointers to the strings\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4   If any strings are present, the first (argv[0]) is always the name of your program.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell window}}}{\hich\af4\dbch\af4\loch\f4 To see how these strings are built, and to experiment with the way lines are scanned, type in the sample shown above.  If you are using the desktop e\hich\af4\dbch\af4\loch\f4 nvironment, be sure to turn debugging off.  Then execute the program from the text shell or shell window, supplying a variety of parameters.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318424}\hich\af4\dbch\af4\loch\f4 Separate Compilation{\*\bkmkend _Toc495318424}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 separate compilation}}}{\hich\af4\dbch\af4\loch\f4 C programs can be divided into more than one\hich\af4\dbch\af4\loch\f4  module, and each module can be compiled separately from the others.  The resulting object files can then be linked together, producing a single program.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Pascal}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language}}}{\hich\af4\dbch\af4\loch\f4 The object files that make up a program are not limited to ob\hich\af4\dbch\af4\loch\f4 ject files created by the C compiler.  You can mix C code with code written using ORCA/Pascal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/Pascal}}}{\hich\af4\dbch\af4\loch\f4 , the APW}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW}}}{\hich\af4\dbch\af4\loch\f4  assembler or the ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  assembler.\par \hich\af4\dbch\af4\loch\f4 For a description of the mechanics of linking programs together, see Ch\hich\af4\dbch\af4\loch\f4 apter 4.  Chapter 15 covers the storage types used to hide variables and functions from other modules, and the storage types used to make functions and variables from one module available to other modules.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318425}\hich\af4\dbch\af4\loch\f4 Interface Files{\*\bkmkend _Toc495318425}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 interface files}}}{\hich\af4\dbch\af4\loch\f4 Interface \hich\af4\dbch\af4\loch\f4 files are used to tell the C compiler about functions and data that appear in libraries or separately compiled modules, and to define macros that are used in more than one module.  The distinction between an interface file and a file that contains C sourc\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  code is merely a matter of convention.  Interface files are created using the same text editor that you use to create programs.  They can be modified by you.  You can even extract declarations from an interface file and embed them directly in your progra\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 .\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #include}}}{\hich\af4\dbch\af4\loch\f4 In general, interface files come from two sources.  ORCA/C comes with a large number of interface files that help you use the standard C libraries and the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.  These interface files are l\hich\af4\dbch\af4\loch\f4 ocated in the ORCACDefs folder of your library directory.  To include one of these interface files in your program, use a #include command, and place the name of the interface file in brackets, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 When you read the descriptions\hich\af4\dbch\af4\loch\f4  of the standard C libraries in Chapter 19, each description shows the #include command that should be in your program to call the function.  With some functions, you can avoid using the interface file, and that was quite common in older C compilers.  ORC\hich\af4\dbch\af4\loch\f4 A\hich\af4\dbch\af4\loch\f4 /C implements function prototypes, though, which allow the compiler to perform sophisticated checking on the parameters you pass to a function.  If you do not use the interface file, the compiler cannot make these checks.  Since illegal parameters account\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 for a large number of bugs is C programs, many of which can crash the executing program, it is a good idea to make use of the include files.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 separate compilation}}}{\hich\af4\dbch\af4\loch\f4 The second major source of include files are those that you write yourself.  These can\hich\af4\dbch\af4\loch\f4  be new libraries that you have created, in which case the interface file should be placed in the ORCACDefs folder and accessed like any other library, or they could be interface files used in a program that is made up of separately compiled modules, in w\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 ich case you would use quote marks around the file name in the #include command, instead of brackets.  For example, if you need to include an interface file called commondefs in your program, and the interface file is in your current working directory, yo\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4  could use the statement\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include "commondefs"\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 15 \endash \hich\af5\dbch\af4\loch\f5  Declarations\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318426}\hich\af4\dbch\af4\loch\f4 Chapter 15 \endash  Declarations{\*\bkmkend _Toc495318426}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318427}\hich\af4\dbch\af4\loch\f4 Declarations{\*\bkmkend _Toc495318427}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A program is made up of one or more declarations, one of which must be a function called main.  The basic syntax for a program is shown below.\par \par }\pard\plain \fi-540\li1080\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 program}{\fs18 \hich\af2\dbch\af4\loch\f2 :   \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 initialized-\hich\af2\dbch\af4\loch\f2 declaration}{\fs18 \hich\af2\dbch\af4\loch\f2  | }{\i\fs18 \hich\af2\dbch\af4\loch\f2 function-definition}{\fs18 \hich\af2\dbch\af4\loch\f2  |      }{\i\fs18 \hich\af2\dbch\af4\loch\f2 asm-function-declaration}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initialized-declaration}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration-specifiers initialized-declarator}{\fs18 \par \tab \{\hich\af2\dbch\af4\loch\f2 ',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initialized-declarator}{\fs18 \}\hich\af2\dbch\af4\loch\f2 * ';'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initialized-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'=' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initializer}{\fs18 \}\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 function-definition}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 decl\hich\af2\dbch\af4\loch\f2 aration-specifiers}{\fs18 \}\hich\af2\dbch\af4\loch\f2  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration-list}{\fs18 \}\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 compound-statement\par \hich\af2\dbch\af4\loch\f2 declaration-list}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration}{\fs18 \}\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration-specifiers}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator-list}{\fs18 \hich\af2\dbch\af4\loch\f2  ';'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration-specifiers}{\fs18 \hich\af2\dbch\af4\loch\f2 :  \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 storage-class-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  | }{\i\fs18 \hich\af2\dbch\af4\loch\f2 type-specifier}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 '(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  ')' |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 function-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 array-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 pointer-declarator}{\fs18 \par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318428}\hich\af4\dbch\af4\loch\f4 Storage Classes{\*\bkmkend _Toc495318428}\par }\pard\plain \fi-540\li1080\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 storage-class-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2 :  [auto | extern | register | static | typedef]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 storage class}}}{\hich\af4\dbch\af4\loch\f4 Each function or variable has a storage class\hich\af4\dbch\af4\loch\f4 .  This storage class may be assigned explicitly by starting the declaration with one of the storage class names shown above.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 separate compilation}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extern}}}{\hich\af4\dbch\af4\loch\f4 For global variables and functions, if no storage class is specified\hich\af4\dbch\af4\loch\f4 , a storage class of extern is assumed.  There is a difference, however, between a variable or function defined with the storage class extern, and a variable or function defined with no explicit storage class.  When the storage class of extern is specifie\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  explicitly, the compiler creates a reference to the variable or function, but it is not defined.  Instead, the compiler expects that the variable or function will be resolved later by the linker.  When no storage class is specified, the compiler generate\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  a variable or function that can be accessed from outside of the current module.  Only one such occurrence is allowed in any one program.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern int i;\tab /* an integer declared in another module */\par \hich\af2\dbch\af4\loch\f2 extern foo();\tab /* a function declared in another module */\par \par \hich\af2\dbch\af4\loch\f2 int i;\tab /* an integer which can be accessed from */\par \tab \hich\af2\dbch\af4\loch\f2 /* another module\tab \tab \tab      */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 auto storage class}}}{\hich\af4\dbch\af4\loch\f4 For variables defined within a function, a storage class of auto is assumed.  Auto variables are available throughout the function, but cannot be ac\hich\af4\dbch\af4\loch\f4 cessed from outside of the function.  Auto variables defined within a function lose their value when the function returns to the caller.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int i;\tab /* auto integer */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 static}}}{\hich\af4\dbch\af4\loch\f4 The static storage class has three different meanings, depending on where it\hich\af4\dbch\af4\loch\f4  is used.  Functions definitions of type static are not exported to the linker.  They become private to the current module, and cannot be accessed from other modules, whether or not the code is turned into a library.  Function declarations (where a functi\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 n is declared, but the statements that make up the function are not specified) of type static indicate that the function body will appear later in the current source file, and that the function will be of storage class static.  Global variables defined wi\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 h a storage type of static cannot be accessed from outside the current module.  Local variables defined with a storage type of static remain intact after leaving the function.  That is, any value assigned to the variable during a function call is still av\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ilable when the function is called the next time.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 static int i;\tab /* static integer */\par \hich\af2\dbch\af4\loch\f2 static foo();\tab /* a function that will be defined later */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 register}}}{\hich\af4\dbch\af4\loch\f4 The register storage class can only be used with variables defined within a function.  It has \hich\af4\dbch\af4\loch\f4 the same meaning as auto, but instructs the compiler to handle the value in the most efficient way possible, placing the value in a register if one is available.  The 65816 does not have enough user registers to leave values in a register, so in ORCA/C, t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 is storage class has exactly the same meaning as auto.\par \hich\af4\dbch\af4\loch\f4 Unlike any other storage class, this storage class can be used with a function parameter.  Again, though, ORCA/C does not do anything special with the parameter if the storage class is register.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 regis\hich\af2\dbch\af4\loch\f2 ter int i;\tab /* register int */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 typedef}}}{\hich\af4\dbch\af4\loch\f4 The storage class typedef is used to define types.  The name of the type appears where the variable name would have appeared in any other declaration, and the new type has the same type that the variable would\hich\af4\dbch\af4\loch\f4  have been assigned if typedef were not used.  The new type can then be used as a type specifier (see the next section).\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef int *intPtr;\tab /* definition of a type: pointer to integer */\par \hich\af2\dbch\af4\loch\f2 intPtr ip;\tab /* defining ip as a pointer to an integer */\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318429}\hich\af4\dbch\af4\loch\f4 Type Speci\hich\af4\dbch\af4\loch\f4 fiers{\*\bkmkend _Toc495318429}\par }\pard\plain \fi-540\li1080\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 {\*\bkmkstart typeSpecifier}\hich\af2\dbch\af4\loch\f2 type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \{\hich\af2\dbch\af4\loch\f2 volatile\} \{const\}\par \tab \hich\af2\dbch\af4\loch\f2 [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 enumeration-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 floating-point-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 integer-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 structure-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 union-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 void]\par \tab \{\hich\af2\dbch\af4\loch\f2 volatile\} \{const\}\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 floating-point-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \hich\af2\dbch\af4\loch\f2 float |\par \tab \{\hich\af2\dbch\af4\loch\f2 long\} double |\par \tab \hich\af2\dbch\af4\loch\f2 extended |\par \tab \hich\af2\dbch\af4\loch\f2 comp\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 integer-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \hich\af2\dbch\af4\loch\f2 signed |\par \tab \{\hich\af2\dbch\af4\loch\f2 signed\} int |\par \tab \{\hich\af2\dbch\af4\loch\f2 signed | unsigned\} short \{int\} |\par \tab \{\hich\af2\dbch\af4\loch\f2 signed | unsigned\} long \{int\} |\par \tab \hich\af2\dbch\af4\loch\f2 unsigned \{int\} |\par }\pard \fi-540\li1080\widctlpar\adjustright {\fs18 \tab \{\hich\af2\dbch\af4\loch\f2 signed | unsigned\} char\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables}}}{\hich\af4\dbch\af4\loch\f4 The type spe\hich\af4\dbch\af4\loch\f4 cifier specifies the type for a variable or function.  The type specifier for a function is optional, whether or not a storage class specifier is used; if omitted, int is assumed.  A variable declaration must include either a storage class specifier or a \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ype specifier (and can, of course, include both).  If the type specifier is omitted, a type specifier of int is assumed.\par \hich\af4\dbch\af4\loch\f4 Type specifiers for enumerations, structures and unions are covered in separate sections, below.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point}}}{\hich\af4\dbch\af4\loch\f4 Floating-point \hich\af4\dbch\af4\loch\f4 and integer type specifiers are used to declare variables, pointers, and arrays of the various built-in data types.  They all have a similar structure.  Floating-point numbers come in three sizes, as detailed in Chapter 13.  The smallest size requires fou\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  bytes of storage; this size is designated by the type specifier float.  Double-precision numbers, requiring eight bytes of storage, can be specified as double or long double.  SANE extended format numbers, requiring ten bytes of storage each, have a type\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 specifier of extended.\par \hich\af4\dbch\af4\loch\f4 SANE also supports an eight-byte signed integer format called comp.  Comp variables are treated as a special case of floating-point numbers, despite the fact that they do not support exponents or non-integer values.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 float a,b;\tab /* tw\hich\af2\dbch\af4\loch\f2 o floating-point variables */\par \hich\af2\dbch\af4\loch\f2 double sum;\tab /* sum is double-precision */\par \hich\af2\dbch\af4\loch\f2 long double sum2;\tab /* sum2 is double-precision */\par \hich\af2\dbch\af4\loch\f2 double *dp;\tab /* pointer to a double precision variable */\par \hich\af2\dbch\af4\loch\f2 extended a[10];\tab /* array of 10 extended variables */\par \hich\af2\dbch\af4\loch\f2 extern float sum();\tab /* ex\hich\af2\dbch\af4\loch\f2 ternal function returning float */\par \hich\af2\dbch\af4\loch\f2 comp big;\tab /* eight-byte signed integer */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 char}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 int}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 short}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 long}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 comp}}}{\hich\af4\dbch\af4\loch\f4 Integer type specifiers have a variety of formats, but are easy to understand once you know the \hich\af4\dbch\af4\loch\f4 systematic way they are defined.  There are basically four types of integers: char, short, int and long.  Since short and long are considered to be modifications of the basic type of int, you can follow either of these type specifiers with int, but you ar\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  not required to do so, and most programmers do not.  Any of the four basic integer data types can be signed or unsigned.  By default, they are all signed.  If you like, you may prefix any of the types with signed, ensuring that the value is signed even i\hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4  the source code is ported to another compiler.  This is a good idea for char variables, since some compilers use signed char by default, but doesn't matter on the other integer data types, which are always signed by default.  You may also create unsigned\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 versions of each of the data types by prefixing it with unsigned.  When an unsigned integer suits your needs, it is a good idea to use them.  On the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , code for comparing unsigned values is much more efficient than code for comparing signed values\hich\af4\dbch\af4\loch\f4 .  The examples below show some typical cases.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 foo();\tab /* function returning int */\par \hich\af2\dbch\af4\loch\f2 int i,j,k;\tab /* three signed integer variables */\par \hich\af2\dbch\af4\loch\f2 signed char *cp;\tab /* a pointer to a signed character */\par \hich\af2\dbch\af4\loch\f2 unsigned long l[10];\tab /* an array of 10 unsigned long integers */\par \hich\af2\dbch\af4\loch\f2 long\hich\af2\dbch\af4\loch\f2  int l;\tab /* a long int */\par \hich\af2\dbch\af4\loch\f2 short sum;\tab /* a short integer */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 typedef}}}{\hich\af4\dbch\af4\loch\f4 When you define a type using the typedef storage class, the name of the type (and identifier) can be used as a type specifier in later declarations.  For example, let's assume that \hich\af4\dbch\af4\loch\f4 a pointer to an integer has been defined as a new type:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef int *intPtr;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 You can now use this type to define variables and function results.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2160\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 intPtr ip;\tab /* ip is a pointer to int */\par \hich\af2\dbch\af4\loch\f2 intPtr search();\tab /* search is a function returning a pointer to int \hich\af2\dbch\af4\loch\f2 */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 void}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}}}{\hich\af4\dbch\af4\loch\f4 Void is a special type specifier that declares a function that does not return a value, or that a pointer points to a generic type.  There are three places where this type specifier can be used.  Functions returning void \hich\af4\dbch\af4\loch\f4 are functions that do not return a value.  In other languages, these are known as subroutines or procedures, and the term function is only used when a result is returned.  Older C programs, written before void became a part of the language, defined functi\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 ns returning int for this purpose, depending on C to dispose of the unneeded value.  There are two reasons to use void explicitly on new programs:  it avoids confusion, and possibly errors, and ORCA/C generates more efficient code when exiting a function \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 f type void than when exiting a function returning int.\par \hich\af4\dbch\af4\loch\f4 The second place where void is used is to define an untyped pointer.  These should be avoided when possible, but are occasionally useful.  The most common place to use this type of pointer is in funct\hich\af4\dbch\af4\loch\f4 ions that require a pointer to a data structure whose type can change from call to call.\par \hich\af4\dbch\af4\loch\f4 Finally, void is used in type casting to cast a pointer to an untyped pointer, making the pointer type-compatible with any other pointer.  In older C programs, a point\hich\af4\dbch\af4\loch\f4 er to char was generally used for pointers to an unspecified type.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void *untyped_pointer;\tab /* an untyped pointer */\par \hich\af2\dbch\af4\loch\f2 void fn(void);\tab /* a function that returns nothing */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volatile}}}{\hich\af4\dbch\af4\loch\f4 Volatile is a type specifier that modifies a type.  If it appears wit\hich\af4\dbch\af4\loch\f4 h no other type, a type of int is assumed.  Volatile can appear before or after any other type specifier.  Volatile is an instruction to the compiler, telling it that the value can be changed in ways that are not under control of the compiler.  Examples w\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 uld be hardware ports like the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  keyboard latch at 0x00C000, or variables that will be changed by interrupt handlers.  The compiler is not allowed to do optimizations on volatile variables that would delay references to the variable, or change the\hich\af4\dbch\af4\loch\f4  order in which references occur.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 const}}}{\hich\af4\dbch\af4\loch\f4 Const is another type specifier which modifies an existing type.  If it appears with no other type, a type of int is assumed.  Const can appear before or after any other type specifier.  Const variables canno\hich\af4\dbch\af4\loch\f4 t be changed by the compiler, although they can be initialized.  Any attempt to change the variable will result in a compile-time error.{\*\bkmkend typeSpecifier}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 type specifier}{\rxe typeSpecifier}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318430}\hich\af4\dbch\af4\loch\f4 Enumerations{\*\bkmkend _Toc495318430}\par }\pard\plain \fi-540\li1080\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 enumeration-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \hich\af2\dbch\af4\loch\f2 enum \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \}\hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 '\{' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 enumera\hich\af2\dbch\af4\loch\f2 tion-constant}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 enumeration-constant}{\fs18 \}\hich\af2\dbch\af4\loch\f2 * '\}'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 enumeration-constant}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'=' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 enum}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants}}}{\hich\af4\dbch\af4\loch\f4 Enumerations provide an easy way to create integer constants.  They are used in situations where a series of names make the pro\hich\af4\dbch\af4\loch\f4 gram easier to read than using integer values.  For example, when dealing with the 640 pixel wide screen, you have four colors available.  While they can be changed, these colors default to black, purple, green and white, with integer values for the color\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  of 0 through 3.  You could write a program that uses the integers 0 through 3 to represent these colors, or you could use preprocessor macros to create names for the colors.  Enumerations provide yet another alternative.  The enumeration\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 enum \{black, pur\hich\af2\dbch\af4\loch\f2 ple, green, white\} pencolor;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 defines the integer variable pencolor, and simultaneously defines four integer constants.  The values of these constants start at zero and increment by one, so that\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("%d\\n", green);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would write 2 to standard out.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 An en\hich\af4\dbch\af4\loch\f4 umeration can be used to define a new enumeration type by including an enumeration tag before the list of enumeration constants.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 enum color \{black, purple, green, white\} pencolor;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In this case, we have still defined the variable pencolor, b\hich\af4\dbch\af4\loch\f4 ut you can define an enumeration type without creating variables.  The enumeration type color can now be used to define other variable with the same enumeration type.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 enum color frameColor, buttonColor, menuColor;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 expressions}}}{\hich\af4\dbch\af4\loch\f4 By default, enumerat\hich\af4\dbch\af4\loch\f4 ion constants are assigned values by setting the first to zero, then incrementing each successive enumeration constant by one.  It is possible, however, to set each constant to an explicit integer value.  Once this is done, if the next constant does not h\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ve an explicit value, a value is assigned to it by incrementing the last constant value by one, as before.  To do this, follow the constant by an equal sign and a constant expression, as shown below.\par \par }\pard\plain \s26\fi-360\li720\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 enum month \{January = 1, February, March, April, May, J\hich\af2\dbch\af4\loch\f2 une, July, August, September, October, November, December\};\par \hich\af2\dbch\af4\loch\f2 enum ages \{George = 28, Matilda = 28, Jimmy = 5, Cindy\};\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In the first case, integer values for months are assigned sequentially, but a starting value of one was needed for January.  The second ex\hich\af4\dbch\af4\loch\f4 ample shows the ages of everyone in a family.  Note that it is legal to specify the same value for two different enumeration constants.  Cindy's age would be six, since no specific value was specified, and the previous constant has a value of five.  While\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 these examples do not show it explicitly, any integer value may be used, including negative values.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318431}\hich\af4\dbch\af4\loch\f4 Arrays{\*\bkmkend _Toc495318431}\par }\pard\plain \fi-720\li1080\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 array-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  '[' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 constant-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ']'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par {\*\bkmkstart arrays}\hich\af4\dbch\af4\loch\f4 Arrays are indexed lists of data, where all of the data in the array has the same type. \hich\af4\dbch\af4\loch\f4  In C, you can form arrays of any type except functions (although arrays of pointers to functions are legal), including arrays of structures, unions, or other arrays.  To define an array, follow the declarator for the variable with a left bracket, a const\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 nt expression, and a right bracket.  The constant expression is evaluated, and used to determine how many elements are in the array.  The first element is indexed with a value of zero, and remaining indices are formed by adding one to the previous index.\par \hich\af4\dbch\af4\loch\f4 F\hich\af4\dbch\af4\loch\f4 or example, to form an array of ten integers, and then fill the array with the numbers one through ten, you could use the following statements:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[10],i;\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i)\par \hich\af2\dbch\af4\loch\f2    a[i] = i+1;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 It is important to keep in mind that the lowest index is\hich\af4\dbch\af4\loch\f4  zero, and the highest is one smaller than the number of subscripts.  So, in the example just given, there is no tenth element of the array.  That is, a[10] does not exist, and storing a value at a[10] may cause the program to crash.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Arrays of more complic\hich\af4\dbch\af4\loch\f4 ated elements are formed the same way as arrays of simple variables.  For example, to form an array of points, where a point is defined as a structure containing three float numbers, you could use\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct point \{float x,y,z;\};\par \hich\af2\dbch\af4\loch\f2 struct point list[100];\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays\:multiple subscripts}}}{\hich\af4\dbch\af4\loch\f4 C does not allow multiply subscripted arrays, but it does allow arrays of arrays, which amount to the same thing.  For example, to create a ten by ten matrix of float values, you would use the declaration\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 float a[10][10];\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 he following code shows how to access elements of the array by forming the identity matrix (a matrix with ones along the diagonal, and zeros everywhere else).\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i) \{\par \hich\af2\dbch\af4\loch\f2    for (j = 0; j < 10; ++j)\par \hich\af2\dbch\af4\loch\f2       a[i][j] = 0.0;\par \hich\af2\dbch\af4\loch\f2    a[i][i] = 1.0;\par \hich\af2\dbch\af4\loch\f2   \hich\af2\dbch\af4\loch\f2  \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In some cases, it is permissible to define an array without specifying the size.  This is true for singly-dimensioned arrays that are external to the current unit, arrays that are passed as a parameter to a function, and arrays that are initialized.  I\hich\af4\dbch\af4\loch\f4 n the first two cases, the compiler does not need to know the exact size of the array, since storage for the array is allocated elsewhere.  It is up to you to make sure that you do not access values beyond the end of the array.  Even in these cases, if th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  array is an array of arrays, all subscripts but the first must be specified.  In the case of an initialized array, the compiler determines the size of the array by counting the initializers.  The following example shows legal and illegal declarations of \hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 xternal arrays.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx2880\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern int a[][10];\tab /* legal:  ? by 10 array of int */\par \hich\af2\dbch\af4\loch\f2 extern int b[10][];\tab /* NOT LEGAL! */\par \hich\af2\dbch\af4\loch\f2 int a[] = \{1,2,3\};\tab /* legal:  three elements */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays\:storage}}}{\hich\af4\dbch\af4\loch\f4 The array is stored in memory in such a way that the first subscript indexe\hich\af4\dbch\af4\loch\f4 s the slowest.  To visit sequential locations in memory, you would use a[0][0], a[0][1], a[0][2], and so forth.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays\:memory requirements}}}{\hich\af4\dbch\af4\loch\f4 The size of an array is the number of elements in the array times the size of an array element.  In the previ\hich\af4\dbch\af4\loch\f4 ous example, each floating-point number requires four bytes of storage, so an array with ten elements requires forty bytes of storage.  The array of these ten element arrays also has 10 elements, so the array a requires 400 bytes of storage.  In a program\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  you would normally use the sizeof operator to determine the size of an array.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays\:size limits}}}{\hich\af4\dbch\af4\loch\f4 Using the small memory model (which is the default), the largest single array that is allowed is 64K bytes.  In addition, the total length of all vari\hich\af4\dbch\af4\loch\f4 ables, libraries, and code from your program that is not placed in another segment using the segment command is 64K bytes.  The large memory model lifts these restrictions at a price of less efficient code.  With the large memory model, an array can be as\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 large as the largest free block of memory, so long as there is enough memory to load all global variables and static segments.  With a memory card with enough memory, you could manipulate an array that is nearly eight megabytes long.{\*\bkmkend arrays}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays}{\rxe array\hich\af4\dbch\af4\loch\f4 s}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318432}\hich\af4\dbch\af4\loch\f4 Pointers{\*\bkmkend _Toc495318432}\par }\pard\plain \fi-720\li1080\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 pointer-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 :  '*' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 type-specifier}{\fs18 \}\hich\af2\dbch\af4\loch\f2 * }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par {\*\bkmkstart pointers}\hich\af4\dbch\af4\loch\f4 A pointer is a data type that holds the address of another object.  Pointers are represented internally as unsigned four-byte values.  The value is the address of the object pointed to\hich\af4\dbch\af4\loch\f4  by the pointer.  A pointer is defined by placing an * to the left of the variable, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int *ip\tab /* ip is a pointer to an integer */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Two operators are used to handle pointer types.  The * operator, when used before a pointer, tells the compiler to load \hich\af4\dbch\af4\loch\f4 the object pointed to by the pointer.  The & operator, when used before any l-value, tells the compiler to load the address of the object, rather than the actual object.  The following code fragment uses the & operator to cause ip to point to the integer \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 , then sets i to four using a reference through the pointer, and finally prints the value of i directly and as a reference through the pointer ip.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx3600\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ip = &i;\tab /* ip now points to i */\par \hich\af2\dbch\af4\loch\f2 *ip = 4;\tab /* i now has a value of 4 */\par \hich\af2\dbch\af4\loch\f2 printf("%d = %d\\n", i, *ip);\tab /* both\hich\af2\dbch\af4\loch\f2  values printed will be 4 */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Pointers can be defined to point to any other data type except a bit field, including other pointers, functions or void.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 const}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 volatile}}}{\hich\af4\dbch\af4\loch\f4 ANSI C allows a pointer to have a type specifier before the declarator.  T\hich\af4\dbch\af4\loch\f4 his is generally used with the type specifiers volatile and const, but the type specifier is not restricted to just those two types.  Const and volatile can be used in conjunction with other types, so they modify the existing type of the pointer.  For exa\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 ple, the declaration\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int * const ip;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 declares a pointer to an integer, and states that the pointer cannot be modified.  If a type specifier other than const or volatile is used, it overrides the existing type.  For example, the following declaration crea\hich\af4\dbch\af4\loch\f4 tes a pointer to a float variable.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int * float fp;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The best that can be said for such a declaration is that it is legal.  Such declarations are confusing, and should not be used in real programs.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 There are many other operators that can be used with point\hich\af4\dbch\af4\loch\f4 ers in C, including the array subscript operator, the increment and decrement operators, addition and subtraction, and comparisons.  Chapter 17 discusses these topics.{\*\bkmkend pointers}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers}{\rxe pointers}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318433}\hich\af4\dbch\af4\loch\f4 Structures{\*\bkmkend _Toc495318433}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 {\*\bkmkstart structures}\hich\af2\dbch\af4\loch\f2 structure-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \hich\af2\dbch\af4\loch\f2 struct }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 struct \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \}\hich\af2\dbch\af4\loch\f2  '\{' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 field-list}{\fs18 \hich\af2\dbch\af4\loch\f2  '\}'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 field-list}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 component-declaration}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 component-declaration}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 component-declaration}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 component}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 component}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 component}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ':' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Structures are collections of \hich\af4\dbch\af4\loch\f4 variables that do not have to have the same type.  With the exception of bit fields, each variable in a structure has a name, just as variables in other parts of the program do.  (The name is optional on a bit field.)  Variables in a structure are called \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 omponents, and the names of the variables are called component names.  Each of the component names must be distinct from any other component name in the same structure.  A structure can contain elements of any type except a function or void.  Pointers to \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 unctions are allowed, but a function declaration cannot appear as a part of a structure.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures}}}{\hich\af4\dbch\af4\loch\f4 It is possible to define a structure type without defining variables, and then define variables later; to define a structure variable without defini\hich\af4\dbch\af4\loch\f4 ng a type; and to define both a type and variables at the same time.  We will look at the general form by examining a structure that implements a linked list of points, with each point consisting of three float numbers.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct point \{struct point *next; f\hich\af2\dbch\af4\loch\f2 loat x,y,z;\} p, *list;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 This structure contains four elements:  next, x, y and z.  X, y and z are the three float variables that record the position of the point.  Next is a pointer to another structure of type point.  Note that it is permissible to use th\hich\af4\dbch\af4\loch\f4 e definition of the structure point, so long as we are defining a pointer to the structure.  Trying to recursively define the structure would be illegal, since the compiler could not compute the size of the structure.  Finally, two variables are defined. \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 The first, p, is a structure of type point, while the second is a pointer to a structure of type point.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Further variables of type point may be defined by using the structure name (called the tag) without redefining the form of the structure.  For example, \hich\af4\dbch\af4\loch\f4 we could define three more points like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct point p1, p2, p3;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The tag field of the structure is optional.  If you omit the tag field, however, no other variables of the same type can be created later in the program.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures\:size}}}{\hich\af4\dbch\af4\loch\f4 The si\hich\af4\dbch\af4\loch\f4 ze of a structure can be determined by summing the size of each component.  In the structure point, there are four elements, each of which is four bytes long, so the size of the variable p is sixteen bytes.  The values appear in memory in the same order i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  which they are defined.  In our example, next occurs first, followed by x, then y, and finally by z.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures\:accessing elements}}}{\hich\af4\dbch\af4\loch\f4 To access a component of a structure, the name of the structure is followed by a period and the name of the componen\hich\af4\dbch\af4\loch\f4 t name of the variable to be accessed.  For example, to initialize the point p to (1.0,2.0,3.0), with a null pointer, we would use the assignments\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 p.x = 1.0;\par \hich\af2\dbch\af4\loch\f2 p.y = 2.0;\par \hich\af2\dbch\af4\loch\f2 p.z = 3.0;\par \hich\af2\dbch\af4\loch\f2 p.next = NULL;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 To set p1 to the reflection of p through the origin, we cou\hich\af4\dbch\af4\loch\f4 ld use the statements\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 p1.x = -p.x;\par \hich\af2\dbch\af4\loch\f2 p1.y = -p.y;\par \hich\af2\dbch\af4\loch\f2 p1.z = -p.z;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 To access an element of a structure through a pointer to the structure, the -> operator is used.  For example, to move the point pointed to by list two times further away from the origin, you w\hich\af4\dbch\af4\loch\f4 ould need to multiply each of the coordinates in the point by two.  The following statements will make this change.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 list->x = list->x*2.0;\par \hich\af2\dbch\af4\loch\f2 list->y = list->y*2.0;\par \hich\af2\dbch\af4\loch\f2 list->z = list->z*2.0;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures\:assigning}}}{\hich\af4\dbch\af4\loch\f4 Structures may be assigned to other stru\hich\af4\dbch\af4\loch\f4 ctures of the same type.  For example, using the declarations from our examples, the following assignments are legal.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 p1 = p2;\par \hich\af2\dbch\af4\loch\f2 *list = p;\par \hich\af2\dbch\af4\loch\f2 p3 = *list;\par \hich\af2\dbch\af4\loch\f2 p1 = *p.next;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures\:in functions}}}{\hich\af4\dbch\af4\loch\f4 Functions can be defined which accept structures as parame\hich\af4\dbch\af4\loch\f4 ters and which return structures as results.  The following example shows a function which takes two points as parameters, and returns a point midway between the two inputs.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct point midpoint(struct point a, struct point b)\par \par \{\par \hich\af2\dbch\af4\loch\f2 struct point c;\par \hich\af2\dbch\af4\loch\f2 c.x = (a\hich\af2\dbch\af4\loch\f2 .x + b.x) / 2.0;\par \hich\af2\dbch\af4\loch\f2 c.y = (a.y + b.y) / 2.0;\par \hich\af2\dbch\af4\loch\f2 c.z = (a.z + b.z) / 2.0;\par \hich\af2\dbch\af4\loch\f2 return c;\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Using this function to find a point midway between p1 and p2, storing the result in p3, we would code\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 p3 = midpoint(p1,p2);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par {\*\bkmkstart bitFields}\hich\af4\dbch\af4\loch\f4 Bit fields are a data type peculiar to structures.\hich\af4\dbch\af4\loch\f4   A bit field is an integer data type which is bit-aligned, rather than byte-aligned.  They can be used to store integers in a very compact fashion, or to access bits within a byte of memory.  To see how this is done, we will define a simple structure usi\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 g bit fields.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct pack \{\par \hich\af2\dbch\af4\loch\f2    unsigned field1 : 9;\par \hich\af2\dbch\af4\loch\f2    unsigned        : 2;\par \hich\af2\dbch\af4\loch\f2    unsigned field2 : 4;\par \hich\af2\dbch\af4\loch\f2    \} v;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Each of the fields in this structure requires a specific number of bits, not bytes.  Field1 requires nine bits; it takes up all of the first byte,\hich\af4\dbch\af4\loch\f4  and the first (most significant) bit of the next byte.  It is an unsigned integer, with a range of 0 to 511.  The next bit field has no name; it is only there to reserve a specific amount of space.  Field2 requires four bits of space, and has a range of \hich\af4\dbch\af4\loch\f4 0\hich\af4\dbch\af4\loch\f4  to 31.  The variable v, then, requires fifteen bits of space.  In all cases where a series of bit fields does not end on a byte boundary, the compiler in effect creates another field to fill out the bits to an even byte boundary.  In this example, one bi\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  must be added, so that the variable v uses sixteen bits (two bytes).  The two bits between field1 and field2, and the bit that comes after field2 cannot be accessed from the program, and their values are not predictable.\par \hich\af4\dbch\af4\loch\f4 Bit fields may be interspersed wit\hich\af4\dbch\af4\loch\f4 h other variables in a structure, as shown in the second example, below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct data \{\par \hich\af2\dbch\af4\loch\f2    unsigned color640 : 2;\par \hich\af2\dbch\af4\loch\f2    int i;\par \hich\af2\dbch\af4\loch\f2    unsigned color320 : 4;\par \hich\af2\dbch\af4\loch\f2    \} v;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The variables which are not bit fields must start on a byte boundary.  Thus, the variable color64\hich\af4\dbch\af4\loch\f4 0 only requires two bits, but since the variable i must start on a byte boundary, the entire structure requires four bytes of storage (one each for color640 and color320, and two for i).  A simple rearrangement of the structure reduces the memory requirem\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 nts by one byte.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct data \{\par \hich\af2\dbch\af4\loch\f2    unsigned color640 : 2;\par \hich\af2\dbch\af4\loch\f2    unsigned color320 : 4;\par \hich\af2\dbch\af4\loch\f2    int i;\par \hich\af2\dbch\af4\loch\f2    \} v;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 ORCA/C supports both signed and unsigned bit fields.  Unsigned bit fields are stored in binary format.  The range that can be represented is 0 to 2b-1, w\hich\af4\dbch\af4\loch\f4 hen b is the number of bits in the bit field.  Signed values are represented in two's complement form, giving a valid range of -2b-1 to 2b-1-1.  The maximum size for a bit field is thirty-two bits.\par \hich\af4\dbch\af4\loch\f4 Accessing bit fields is very inefficient compared to acces\hich\af4\dbch\af4\loch\f4 sing integers.  If speed is an issue, avoid their use.\par \hich\af4\dbch\af4\loch\f4 Programs that make use of bit fields are difficult to port from machine to machine, so bit fields should be used sparingly, if at all.  Not all compilers support signed bit fields.  The maximum size fo\hich\af4\dbch\af4\loch\f4 r a bit field varies from compiler to compiler, and the way bit fields are stored internally also varies.{\*\bkmkend structures}{\*\bkmkend bitFields}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 bit fields}{\rxe bitFields}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 structures{\rxe structures}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318434}\hich\af4\dbch\af4\loch\f4 Unions{\*\bkmkend _Toc495318434}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 {\*\bkmkstart unions}\hich\af2\dbch\af4\loch\f2 union-type-specifier}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \hich\af2\dbch\af4\loch\f2 union }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 union \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \}\hich\af2\dbch\af4\loch\f2  '\{' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 field\hich\af2\dbch\af4\loch\f2 -list}{\fs18 \hich\af2\dbch\af4\loch\f2  '\}'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions\:size}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions\:accessing elements}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions\:in functions}}}{\hich\af4\dbch\af4\loch\f4 A union has a syntax similar to that of a structure and, like structures, contains named elements called components.  Unlike structures, bit fields are not allowed\hich\af4\dbch\af4\loch\f4  in unions.  Like structures, components of unions can be of any type except function returning or void.  Within any one union type, each component name must be unique.  No component can be of the same type as the union in which it appears, but components\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 can point to unions of the same type.\par \hich\af4\dbch\af4\loch\f4 Components of unions are accessed the same way as components of a structure.  Unions can be assigned to other unions of the same type and returned as the result of a function, just like structures.  The major differenc\hich\af4\dbch\af4\loch\f4 e between structures and unions is in how storage is allocated for the components.  In a structure, memory is assigned to each variable in turn, and the total size of the structure is the sum of the sizes of all of the components.  In a union, each of the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 variables overlaps.  The size of the union is the size of the largest component, since only one of the components is stored in the union at any one time.  Unions are most useful in situations where two or more types of data will be stored in a location, b\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 t the two do not need to be stored at the same time.  As an example, let's consider a program that evaluates expressions, and needs to store variable values.  We will assume that the name of the variable must be stored, and that it is limited to ten chara\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ters.  We will also assume that the variables can be integer or float.  Since a single variable couldn't be both integer and float at the same time, we will use a union to overlay the int and float variables, saving space.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 enum kind \{integer, real\};\par \hich\af2\dbch\af4\loch\f2 struc\hich\af2\dbch\af4\loch\f2 t variable \{\par \hich\af2\dbch\af4\loch\f2    char name[11];\par \hich\af2\dbch\af4\loch\f2    enum kind vkind;\par \hich\af2\dbch\af4\loch\f2    union \{\par \hich\af2\dbch\af4\loch\f2       int ival;\par \hich\af2\dbch\af4\loch\f2       float rval;\par \hich\af2\dbch\af4\loch\f2       \} val;\par \hich\af2\dbch\af4\loch\f2    \};\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This example also shows the use of a tag field to record the type of value stored in the union.  While this is not required, it is often use\hich\af4\dbch\af4\loch\f4 ful.  Without a tag field, your program must have some other way of figuring out if the value stored in the union is an integer or a floating-point number.\par \hich\af4\dbch\af4\loch\f4 To evaluate the storage requirements for the structure, we first determine the size of the union.  I\hich\af4\dbch\af4\loch\f4 val is two bytes long, while rval is four bytes long.  The union, then, is four bytes long.  The name of the variable requires eleven bytes, and the tag field, which is an integer, requires another two bytes.  The total size of the structure, then, is sev\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 nteen bytes.{\*\bkmkend unions}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions}{\rxe unions}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318435}\hich\af4\dbch\af4\loch\f4 Initializers{\*\bkmkend _Toc495318435}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 {\*\bkmkstart initializers}\hich\af2\dbch\af4\loch\f2 initializer}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 '\{' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initializer-list}{\fs18 \hich\af2\dbch\af4\loch\f2  \{','\} '\}'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initializer-list}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initializer}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 initializer}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers\:initialization}}}{\hich\af4\dbch\af4\loch\f4 When a variable is defined, the declaration can include an\hich\af4\dbch\af4\loch\f4  initializer which specifies the initial value for the variable.  Variables with a storage class of static and extern can only be initialized with a constant expression.  All static and extern variables that are not explicitly initialized are initialized \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ith a value of zero.  Function parameters cannot be initialized.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point\:initialization}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 enumerations\:initialization}}}{\hich\af4\dbch\af4\loch\f4 Integer, enumeration and floating-point variables are initialized by following the variable name with an equal sign a\hich\af4\dbch\af4\loch\f4 nd the initial value.  The initial value can be inclosed in braces, but the usual practice is to omit the braces.  Non-constant expressions can be used to initialize variables that have a storage class other than extern or auto.  In that case, the compile\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  generates the same code that would be generated if the variable was initialized via an assignment statement.\par \hich\af4\dbch\af4\loch\f4 The following examples show some legal initializations.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 i = 4;\par \hich\af2\dbch\af4\loch\f2 auto j = i*4;\par \hich\af2\dbch\af4\loch\f2 static float x = 1.0, y = 2.0, z = 0.0;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 enumerations\:initiali\hich\af4\dbch\af4\loch\f4 zation}}}{\hich\af4\dbch\af4\loch\f4 An enumeration can be initialized to an enumeration constant or to an integer value.  As with integers, the expression must be a constant expression if the storage class of the enumeration variable is extern or static.  For example, we can define \hich\af4\dbch\af4\loch\f4 an enumeration, declare a variable, and assign the variable an initial value all in one step, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 enum color \{black,purple,green,white\} pencolor = white;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers\:initialization}}}{\hich\af4\dbch\af4\loch\f4 Initialization of pointers follow the same rules as initializ\hich\af4\dbch\af4\loch\f4 ation of integers.  The following operands are all constants, and can be used in a constant initializer for a pointer:\par \par \hich\af4\dbch\af4\loch\f4 1.\tab The integer constant 0 (or the preprocessor macro NULL).\par \hich\af4\dbch\af4\loch\f4 2.\tab The name of a static or external function.\par \hich\af4\dbch\af4\loch\f4 3.\tab The name of a static or ext\hich\af4\dbch\af4\loch\f4 ernal array.\par \hich\af4\dbch\af4\loch\f4 4.\tab The & operator when applied to a static or external variable.\par \hich\af4\dbch\af4\loch\f4 5.\tab The & operator when applied to a static or external array with constant subscripts.\par \hich\af4\dbch\af4\loch\f4 6.\tab A non-zero integer constant cast as a pointer type.\par \hich\af4\dbch\af4\loch\f4 7.\tab A string constant.\par \hich\af4\dbch\af4\loch\f4 8.\tab An integer \hich\af4\dbch\af4\loch\f4 constant added or subtracted to any of the items 3 through 7.\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays\:initialization}}}{\hich\af4\dbch\af4\loch\f4 Arrays are initialized by enclosing the initializers in braces, and separating them with commas.  Each initializer in an array must be constant expressions.  The e\hich\af4\dbch\af4\loch\f4 xample below shows the initialization of a ten-element array.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[10] = \{1,2,3,4,5,6,7,8,9,10\};\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Multi-dimensioned arrays follow the same pattern:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[2][2] = \{\{1,2\},\{3,4\}\};\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 In this case the initial values are as follows:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qj\li2880\sl223\slmult1\widctlpar\tx3960\adjustright {\hich\af4\dbch\af4\loch\f4 a[0][0]\tab 1\par \hich\af4\dbch\af4\loch\f4 a[0][1]\tab 2\par \hich\af4\dbch\af4\loch\f4 a[1][0\hich\af4\dbch\af4\loch\f4 ]\tab 3\par \hich\af4\dbch\af4\loch\f4 a[1][1]\tab 4\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 There are four special rules used when dealing with array initializers.  First, if an initializer for an array contains fewer values than the size of the array, the remainder of the array elements are initialized to zero.  The second rule is\hich\af4\dbch\af4\loch\f4  that the size of an array does not need to be specified.  In that case, the size of the array is derived from the number of initializers.  For example, the following array has five elements, initialized to one through five.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[] = \{1,2,3,4,5\};\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Anothe\hich\af4\dbch\af4\loch\f4 r special case is an array of characters.  An array of characters can be initialized using a string, as in\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char str[15] = "Hello, world.\\n";\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The compiler automatically places a terminating null character at the end of the string constant.  Finally, if th\hich\af4\dbch\af4\loch\f4 e initializer list contains the proper number of elements, all embedded braces may be omitted.  Repeating our previous example using this rule, we have\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[2][2] = \{1,2,3,4\};\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures\:initialization}}}{\hich\af4\dbch\af4\loch\f4 Structures are initialized by enclosing all\hich\af4\dbch\af4\loch\f4  of the values in braces and separating them with commas.  As with arrays, if the number of values supplied is less that the number of variables in the structure, the remaining elements are set to zero.  In addition, if a structure is embedded in another \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 tructure, and the correct number of initializers are supplied, the braces around the initializers for the embedded structure may be dropped.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct point \{float x,y,z;\} p1 = \{1.0,2.0,3.0\};\par \hich\af2\dbch\af4\loch\f2 struct line \{point p1,p2\} line1 = \{1.0,2.0,3.0, 2.0,3.0,4.0\};\par \hich\af2\dbch\af4\loch\f2 stru\hich\af2\dbch\af4\loch\f2 ct line2 = \{\{1.0,2.0\}, \{2.0,3.0\}\};\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions\:initialization}}}{\hich\af4\dbch\af4\loch\f4 The first component of a union can be initialized with an expression resulting in the same type as the component.  If the storage class for the union is auto, the first component must have a\hich\af4\dbch\af4\loch\f4  type that could be initialized if the component were specified as a separate auto variable.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 union nums (float f; int i;\} x = 0.0;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 For all global or static variables, if no initializer is given, the variable is initialized to zero.\par \hich\af4\dbch\af4\loch\f4 The way \hich\af4\dbch\af4\loch\f4 initializations are handled by the compiler depends on where the variable is declared.  Global and static variables are initialized by setting the memory area reserved for the variable to the correct initial value.  Auto and register variables defined in \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4  function are initialized using code that is equivalent to an assignment statement.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extern}}}{\hich\af4\dbch\af4\loch\f4 If a variable is declared with an explicit storage class specifier of extern, it cannot be initialized.{\*\bkmkend initializers}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 initializers}{\rxe initializers}\bxe }}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318436}\hich\af4\dbch\af4\loch\f4 Constructin\hich\af4\dbch\af4\loch\f4 g Complex Data Types{\*\bkmkend _Toc495318436}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The facilities described in this chapter show how to declare variables in a variety of simple data types.  You can also combine many of these attributes, creating complex definitions in a single step.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 float (*arr[10])();\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 defines a ten-element array of pointers to functions returning float.  With some restrictions, any combination of storage class specifiers, type specifiers and declarators can be used to form a type.  These restrictions are:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 void}}}{\hich\af4\dbch\af4\loch\f4 Void can onl\hich\af4\dbch\af4\loch\f4 y be used as the type returned by a function or pointed to by a pointer.\par \par \hich\af4\dbch\af4\loch\f4 2.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays}}}{\hich\af4\dbch\af4\loch\f4 Arrays, structures and unions may contain pointers to functions, but may not contain functions.\par \par \hich\af4\dbch\af4\loch\f4 3.\tab }{\pard\plain \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:return type}}}{\hich\af4\dbch\af4\loch\f4 Functions can return structures, u\hich\af4\dbch\af4\loch\f4 nions or pointers to arrays, but they cannot return an array.\par \par \hich\af4\dbch\af4\loch\f4 4.\tab Functions cannot return another function.  They can return a pointer to another function, however.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 To read the type of a variable, it is important to understand the precedence of the declar\hich\af4\dbch\af4\loch\f4 ator operators.  Basically, declarators that appear to the right of the variable (arrays and functions) have a higher precedence than declarators appearing to the left (pointers).  The declarator that is closest to the variable has the highest precedence.\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4  Parentheses can be used to override the normal precedence.  To see how this is done, we will use an absurdly complex declaration.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct point \{float x,y,z;\} *(*(*(*x)())[10])();\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Starting at the variable, we can read off the type.  The variable x is a p\hich\af4\dbch\af4\loch\f4 ointer to a function returning a pointer to a ten-element array of pointers to functions returning pointers to structures that contain three float variables.  In a real program, such a declaration would probably not be needed.  If such a declaration was n\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 eded, it would be easier to define using typedefs.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318437}\hich\af4\dbch\af4\loch\f4 Scope and Visibility{\*\bkmkend _Toc495318437}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variable scope}{\txe see scope}}}{{\*\bkmkstart scope}\hich\af4\dbch\af4\loch\f4 All declarations that appear outside of a function are available from the declaration point to the end of the source file, unless some other decla\hich\af4\dbch\af4\loch\f4 ration masks the declaration.\par \hich\af4\dbch\af4\loch\f4 Function parameters are available throughout the function unless some other declaration masks the parameter.  Parameters cannot be accessed from outside the function, even from a function called by the one that defined the par\hich\af4\dbch\af4\loch\f4 ameters.  (Pointers to variables can, of course, be passed to another function, and the value changed, but the called function cannot access the variable using the original name.)  A function parameter can have the same name as a global variable or functi\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 n, in which case the global variable or function cannot be referenced from the function.  For example, the code fragment\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int count;\par \par \hich\af2\dbch\af4\loch\f2 void test(float count)\par \par \{\par \hich\af2\dbch\af4\loch\f2 /* statements go here */\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 is legal.  Any function declared after the global declaration of cou\hich\af4\dbch\af4\loch\f4 nt can use or modify count, but that variable cannot be used or modified from within the function test.  Inside test, count refers to the float parameter.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters}}}{\hich\af4\dbch\af4\loch\f4 Variables defined at the top of the function body are also available anywhere in t\hich\af4\dbch\af4\loch\f4 he function, and are not available from outside of the function.  Variables defined at the top of the function body cannot duplicate the names of parameters, but they can duplicate global variables or functions.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int count;\par \par \hich\af2\dbch\af4\loch\f2 void test(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 double count\hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2 ...\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Within the function, references to count use the double variable.\par \hich\af4\dbch\af4\loch\f4 Any compound statement within a function can declare variables whose scope is limited to the duration of the compound statement.  These variables cannot be accessed from outside the\hich\af4\dbch\af4\loch\f4  compound statement, although they can be used from compound statements embedded in the one where the variable is declared.  Variables defined within a compound statement can reuse the names of global variables or functions, parameters, or variables defin\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 d in the program body or other compound statements.  For example, the following function will print 1, 2 and 1 to standard out.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void print(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 int i;\par \par \hich\af2\dbch\af4\loch\f2 i = 1;\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par \hich\af2\dbch\af4\loch\f2    \{\par \hich\af2\dbch\af4\loch\f2    int i;\par \par \hich\af2\dbch\af4\loch\f2    i = 2;\par \hich\af2\dbch\af4\loch\f2    printf("%d\\n", i);\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 macros\:scope}}}{\hich\af4\dbch\af4\loch\f4 Preprocessor macros are available from the point they are defined to the end of the source file or to the undef command that removes the macro definition.  Note that since macro expansion conceptually occurs before the program is com\hich\af4\dbch\af4\loch\f4 piled, once a macro is defined, and occurrence of the macro name will be replaced by the macro body, even if that occurrence appears to be defining a new variable.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define name sally\par \hich\af2\dbch\af4\loch\f2 int name;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 defines a new variable called sally, not a vari\hich\af4\dbch\af4\loch\f4 able called name.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 labels\:scope}}}{\hich\af4\dbch\af4\loch\f4 Labels in a function are available throughout the function in which the label appears.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 overloading classes}}}{\hich\af4\dbch\af4\loch\f4 There are several cases in C where a name can be duplicated within the same function, or in the global\hich\af4\dbch\af4\loch\f4  declaration area.  The ability to do this is called overloading.  The reason is that C maintains several different tables of symbols.  The overloading classes are:\par \par \hich\af4\dbch\af4\loch\f4 1.\tab Preprocessor macro names\par \hich\af4\dbch\af4\loch\f4 2.\tab Statement labels\par \hich\af4\dbch\af4\loch\f4 3.\tab Structure, union and enumeration tags\par \hich\af4\dbch\af4\loch\f4 4\hich\af4\dbch\af4\loch\f4 .\tab Components of structures or unions\par \hich\af4\dbch\af4\loch\f4 5.\tab Other names (variables, functions, typedef names, enumeration constants)\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 enum}}}{\hich\af4\dbch\af4\loch\f4 What this means is that the same name can be reused within a function, so long as it is not use\hich\af4\dbch\af4\loch\f4 d more than once within the same overloading class.  Another important point is that each structure and union has its own overloading class; thus, it is legal to define two structures or unions, and to use the same component names in the various structure\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  and unions.  This is, in fact, one of the few places where it is reasonable to take advantage of the overloading classes.  For example, if you are defining more than one kind of linked list, it would be very reasonable to name the pointer to the next str\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 cture next in each of the structures.  The following example shows each of these rules in effect.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void test(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 #define name gorp\par \hich\af2\dbch\af4\loch\f2 int name;\par \hich\af2\dbch\af4\loch\f2 enum name \{Fred, Joe\};\par \hich\af2\dbch\af4\loch\f2 struct s \{int name\};\par \hich\af2\dbch\af4\loch\f2 union u \{int name\};\par \hich\af2\dbch\af4\loch\f2 goto name;\par \hich\af2\dbch\af4\loch\f2 name: ;\par \}{\*\bkmkend scope}}{\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 scope}{\rxe scope}\bxe }}{\par \sect }\sectd \sbkcol\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 16 \endash  Functions\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318438}\hich\af4\dbch\af4\loch\f4 Chapter 16 \endash  Functions{\*\bkmkend _Toc495318438}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318439}\hich\af4\dbch\af4\loch\f4 Declaring a Function{\*\bkmkend _Toc495318439}\par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 {\*\bkmkstart functions}\hich\af2\dbch\af4\loch\f2 function-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \par \tab \hich\af2\dbch\af4\loch\f2 '('\par \tab \hich\af2\dbch\af4\loch\f2 [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 parameter-type-list}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' '.' '.' '.'\} |\par \tab \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 parameter-list}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ]\par \tab \hich\af2\dbch\af4\loch\f2 ')'\par \tab \{\hich\af2\dbch\af4\loch\f2 inline '(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 long-integer}{\fs18 \hich\af2\dbch\af4\loch\f2  ',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 long-integer}{\fs18 \hich\af2\dbch\af4\loch\f2  ')'\}\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 asm-function-declaration}{\fs18 \hich\af2\dbch\af4\loch\f2 : asm }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  '\{' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 asm-line}{\fs18 \}\hich\af2\dbch\af4\loch\f2 * '\}'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:declaration}}}{\hich\af4\dbch\af4\loch\f4 C function declarations can be intermixed with other declarations throughout the program.  The only restriction is that a C function cannot be defined within the body of another function.\par \hich\af4\dbch\af4\loch\f4 A function declaration looks ve\hich\af4\dbch\af4\loch\f4 ry much like the declaration of any variable.  The two major differences are than functions do not have to have a type specifier, and the type is always function returning something.  When a function is declared without a type specifier, a type specifier \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 f int is assumed.  For example, the following two declarations are almost identical, but the first defines a function returning a pointer to int, while the second defines a pointer to a function returning int.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int *f();\par \hich\af2\dbch\af4\loch\f2 int (*f)();\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 It is also possible to\hich\af4\dbch\af4\loch\f4  declare a function automatically.  This happens when a function that has not been declared is used in an expression, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 x = test();\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 When a function is declared automatically, it is assumed to be a function returning int.  Any later declarations or de\hich\af4\dbch\af4\loch\f4 finitions must also be for a function returning int.  To avoid problems, and to make effective use of function prototypes, it is a good idea to declare all functions before they are used.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:return type}}}{\hich\af4\dbch\af4\loch\f4 Functions can be defined to return any\hich\af4\dbch\af4\loch\f4  type except a function or array.  Functions can be defined to return pointers to other functions or arrays, however.\par \hich\af4\dbch\af4\loch\f4 There is a fine distinction between a function declaration and a function definition.  A function declaration tells the compiler that a fu\hich\af4\dbch\af4\loch\f4 nction exists, either later in the same source file, in a separately compiled or assembled module, or in a library, but does not include the statements that tell the compiler what the function is supposed to do.  A function definition includes a function \hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 ody, which is a compound statement.  To declare a function, follow the declaration with a semicolon, as shown above.  To define a function, follow the declaration with the function body, like this:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void greet(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("Hello, world.\\n");\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Note th\hich\af4\dbch\af4\loch\f4 at there is no semicolon after the closing parenthesis in the first line.  It is an error to place one there.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:extern}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:static}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 separate compilation}}}{\hich\af4\dbch\af4\loch\f4 Whenever a function is declared in a program, the compiler assumes \hich\af4\dbch\af4\loch\f4 that the definition occurs elsewhere.  If the definition is not within the current program segment, you must use the extern storage class specifier, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern void greet(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The storage class extern can also be used when the function definition wil\hich\af4\dbch\af4\loch\f4 l appear later in the same source file.  The storage class static can also be used to declare a function that will be defined later in the same source file.  The difference between the two is that, with the storage class static, the function must appear i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  the same source file, and static functions are not available outside the source file, while functions with a storage class of extern can be called from separately compiled modules.\par \hich\af4\dbch\af4\loch\f4 The default storage class for a function is extern.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:inline}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 inline}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\hich\af4\dbch\af4\loch\f4 ORCA/C supports two special kinds of function definitions.  The first is an inline definition, used to create interface files for the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  tools.  An inline declaration replaces the function body with the word inline\hich\af4\dbch\af4\loch\f4 , followed by two integer constants enclosed in parentheses and separated by a comma.  The first integer is loaded into the X register, and then a jsl is performed to the second integer.  The first integer, then, is the tool number of the tool to call, an\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  the second integer is the main entry point into the toolbox, at 0xE10000.  Allowing you to supply the second value means you can use the inline mechanism to call user tools as well as system tools.  For examples of inline functions, see any of the tool i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 terface files.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:asm}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 asm statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language}}}{\hich\af4\dbch\af4\loch\f4 Another type of function is a function written entirely in assembly language.  These functions have a return type and a parameter list, just as other functions do.  The co\hich\af4\dbch\af4\loch\f4 mpiler uses the function return type and parameter list to check function calls in the rest of the program to make sure parameters are passed correctly, and to check to make sure that the value returned by the function is used in a legal way, but it is up\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 to you to actually write the assembly language statements that use the parameters, remove them from the stack before returning to the caller, and to return any values to the caller.\par \hich\af4\dbch\af4\loch\f4 An example of an assembly language function is shown below.\par \par }\pard\plain \s26\fi270\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* See if a k\hich\af2\dbch\af4\loch\f2 ey has been pressed; return 128 is so, and 0 otherwise */\par \par \hich\af2\dbch\af4\loch\f2 asm int keypress ()\par \par \{\par \tab \hich\af2\dbch\af4\loch\f2 lda\tab >0xC000\par \tab \hich\af2\dbch\af4\loch\f2 and\tab #0x0080\par \tab \hich\af2\dbch\af4\loch\f2 rtl\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 For a description of the syntax of assembly language statements, see the description of the asm statement in Chapter 18.  For details on how\hich\af4\dbch\af4\loch\f4  parameters are passed and how function values are returned, see Chapter 5.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318440}\hich\af4\dbch\af4\loch\f4 Parameters{\*\bkmkend _Toc495318440}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:parameters}{\txe see parameters}}}{{\*\bkmkstart parameters}\hich\af4\dbch\af4\loch\f4 In addition to returning a result, functions can take inputs in the form of passed parameters.  C supports two different\hich\af4\dbch\af4\loch\f4  ways of handling parameters that have little to do with one another.  The historical reason for this is that older C compilers use a very simple mechanism for defining parameters, while modern C compilers, including ANSI C compilers, support a parameter \hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 assing mechanism that allows the compiler to do some compile-time checking of function calls.  These parameter mechanisms will be described separately.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318441}\hich\af4\dbch\af4\loch\f4 Traditional C Parameters{\*\bkmkend _Toc495318441}\par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 parameter-list}{\fs18 \hich\af2\dbch\af4\loch\f2 : }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The original parameter passing me\hich\af4\dbch\af4\loch\f4 chanism is very simple.  Function declarations do not have parameter lists, even if the function that will be called allows or requires parameters.  In a function definition, the names of the parameters are listed between the parentheses that follow the f\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 nction name, separated by commas.  The parameters are then defined before the start of the function body.  Each parameter that appears in the parameter list must be defined, and, while types, structures, unions and enumerations may be defined, the only va\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 iables that can appear are those listed in the parameter list.  As an example, the following function accepts an integer and a pointer to a string as parameters.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void roman(numeral, digit)\par \par \hich\af2\dbch\af4\loch\f2 char *numeral;\par \hich\af2\dbch\af4\loch\f2 int digit;\par \par \{\par \hich\af2\dbch\af4\loch\f2 /* statements go here */\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 For each\hich\af4\dbch\af4\loch\f4  parameter there must be exactly one variable declaration between the function declaration statement and the body of the function.  No other variables can be defined in this area, although type declarations are allowed.  Parameters may not be initialized,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 and the only storage class that can be used is register.  Parameters, like variables, can be any type except void or a function.\par \hich\af4\dbch\af4\loch\f4 Because function declarations do not allow parameter declarations, traditional C parameters cannot be checked for correctness b\hich\af4\dbch\af4\loch\f4 y the compiler.  For example, if the function shown above is called using a statement like\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 roman(4);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 there is obviously a problem:  the function definition expects two parameters, while the call is only passing one.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318442}\hich\af4\dbch\af4\loch\f4 Function Prototypes{\*\bkmkend _Toc495318442}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 parameter-type-lis\hich\af2\dbch\af4\loch\f2 t}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 parameter-declaration}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 parameter-declaration}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 parameter-declaration}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 declaration-specifiers}{\fs18 \par \tab \hich\af2\dbch\af4\loch\f2 [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 abstract-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 ]\par }\pard \qj\fi-540\li900\keepn\widctlpar\adjustright {\i\fs18 \hich\af2\dbch\af4\loch\f2 abstract-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 :  \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 non-empty-abstract-declarator}{\fs18 \}\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 non-empty-abstract-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 :  ['(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 non-empty-abstract-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  ')'] | [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 abstract-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  '(' ')'] | [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 abstract-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2  '[' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ']'] | ['*' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 abstract-declarator}{\fs18 \hich\af2\dbch\af4\loch\f2 ]}{\fs20 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters\:function prototypes}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 function prototypes}}}{\hich\af4\dbch\af4\loch\f4 Function prototypes correct the deficiencies in C described in the last secti\hich\af4\dbch\af4\loch\f4 on.  They give the compiler the ability to check a function call to ensure that the parameters passed by a function call match the parameter list expected by the corresponding function.  With a function prototype, each parameter is specified as a variable\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 declaration, rather than simply a name.  The function prototype can be used in both the declaration and definition of a function.  Once a function has been declared or defined using a function prototype, the compiler checks subsequent calls to the functio\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 , flagging any calls that pass a parameter list that the function cannot handle as an error.\par \hich\af4\dbch\af4\loch\f4 For an example, we will repeat the example from the last section using function prototypes.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void roman(char *numeral, int digit)\par \par \{\par \hich\af2\dbch\af4\loch\f2 /* statements go here */\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Th\hich\af4\dbch\af4\loch\f4 is simple example shows that the major difference in the way a function is defined using function prototypes is that the variable declarations are moved into the parameter list.  Once the function has been declared or defined, however, the call\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 roman(4)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would cause the compiler to flag an error, rather than silently producing a program that might crash.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters\:checking}}}{\hich\af4\dbch\af4\loch\f4 In addition to detecting parameter lists that have too few, too many, or incorrect types of parameters, function prototypes al\hich\af4\dbch\af4\loch\f4 low the compiler to do type conversions.  With a traditional parameter list, for example, if you define a function that expects a long integer, and call it with an integer parameter, the result can be as severe as a run-time crash, and will rarely give a \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 orrect answer, even if the program does not crash.  If the function has been declared using function prototypes, however, the integer parameter is converted to a long integer.  All conversions that are performed during assignment using the = operator will\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 also be performed for parameters passed to a function that has been declared using function prototypes.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters\:void prototypes}}}{\hich\af4\dbch\af4\loch\f4 A special case arises when a function has no parameters.  The parameter list should include the single word void, ind\hich\af4\dbch\af4\loch\f4 icating that no parameters are allowed.  Any call to the function that tries to pass a parameter will then be flagged as an error.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* prototype function with no parameters */\par \hich\af2\dbch\af4\loch\f2 extern void MakeMyDay (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 It is possible to use an abstract declarator in a\hich\af4\dbch\af4\loch\f4  function prototype.  Basically, an abstract declarator defines a type without giving a variable name.  This form of declaration is usually restricted to parameter lists for function declarations, rather than function definitions.  An abstract declarator \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ould be of no use in a function definition, since the parameter would have no name, and thus could not be referenced in the function body.  In a function declaration, however, it allows you to tell the compiler about the parameter list without specifying \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he names of the parameters.\par \hich\af4\dbch\af4\loch\f4 There is an important restriction that applies when using function prototypes.  Functions must be declared before they are used.  If a function is used before it is defined, the compiler sets up a default declaration.  This decl\hich\af4\dbch\af4\loch\f4 aration assumes that the function is not prototyped.  Later, when the function is defined with a prototyped parameter list, a conflict arises, and the compiler flags an error.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318443}\hich\af4\dbch\af4\loch\f4 Variable Length Parameter Lists{\*\bkmkend _Toc495318443}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters\:variable length lists}}}{\hich\af4\dbch\af4\loch\f4 Many C \hich\af4\dbch\af4\loch\f4 functions, most notably those in the standard input and output library, use variable length parameter lists.  For example, when you call printf, you always supply a format string, but you can also supply additional parameters.  ANSI C introduced a mechani\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 m to handle variable length parameter lists entirely from C, although the method requires you to use a function prototype.\par \hich\af4\dbch\af4\loch\f4 Basically, the parameter list is split into a fixed part and a variable part.  The fixed part is required: at least one fixed variabl\hich\af4\dbch\af4\loch\f4 e must be present.  The variable part is represented in the function prototype by three periods, and must appear at the end of the parameter list.  For example, to declare a function that will add one or more integers, returning the sum as a result, we wo\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 ld use\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int sum(int first,...)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 In this case, first is the fixed parameter.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 va_arg}}}{\hich\af4\dbch\af4\loch\f4 The functions va_start, va_arg and va_end, from the stdarg.h library, provide a way of using the variable length parameter list from C.  For examples of their use, s\hich\af4\dbch\af4\loch\f4 ee the description of va_arg in Chapter 19.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack repair code}}}{\hich\af4\dbch\af4\loch\f4 Variable argument lists will not work if stack repair code is enabled; stack repair code is enabled by default.  For an explanation of stack repair code, see the next section.  To turn o\hich\af4\dbch\af4\loch\f4 ff stack repair code, see the optimize pragma.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318444}\hich\af4\dbch\af4\loch\f4 Common Mistakes With Parameters{\*\bkmkend _Toc495318444}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack repair code}}}{\hich\af4\dbch\af4\loch\f4 Probably the most pervasive programming error in C programs is misuse of parameter lists.  This isn't helped by the fact that many compilers seem to wo\hich\af4\dbch\af4\loch\f4 rk with some kinds of parameter errors, and as a result, some programmers have written supposedly portable C programs that are incorrect.  In all C standards, from the original Kerninghan and Ritchie specification right through to the most recent ANSI C s\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 andard, passing the wrong number or wrong type of parameters to a function gives, as the standards put it, undefined results.  Basically, that means that a C compiler can support that practice if it chooses, but programs written that way are not portable \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 o other C compilers; it is perfectly legal for a C compiler to simply ignore the possibility that the error can occur, resulting in a program that could actually crash.  Passing a different number of parameters than were expected by the function being cal\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 ed was one early way to handle variable argument lists, which helped encourage the practice, but it is not supported by all C compilers.\par \hich\af4\dbch\af4\loch\f4 To make this work, C compilers that support the practice of allowing you to call a function with the wrong number or ty\hich\af4\dbch\af4\loch\f4 pe of parameters have the caller remove parameters from the stack after control returns from the function.  In effect, this patches the stack, removing parameters whether or not the function that was called knew they were on the stack.  On the 65816 CPU u\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 ed in the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , it is a little more efficient for the function to remove its own parameters, and that is how ORCA/C works.  As a result, if you call a function with the wrong number or type of parameters, you risk crashing the computer.\par \hich\af4\dbch\af4\loch\f4 On the one ha\hich\af4\dbch\af4\loch\f4 nd, ORCA/C is a perfectly correct implementation of C, since passing incorrect parameters is not a feature that C compilers must support, but on the other hand, there are a lot of programs that assume this is legal C, and parameter errors are unfortunatel\hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4  easy to make in C.  For that reason, by default, ORCA/C installs stack repair code that makes sure extra parameters are removed from the stack.  This stack repair code takes up a lot of room and slows execution speed considerably, though, so ORCA/C also \hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 as a way to turn off the stack repair code.  For more information on turning off the stack repair code, see the optimize pragma.  Finally, to help you track down this sort of error, ORCA/C also has a debug option that will tell you when the parameter list\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is the wrong size; you can find a description of this feature under the debug pragma.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318445}\hich\af4\dbch\af4\loch\f4 How Parameters are Passed{\*\bkmkend _Toc495318445}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters\:passing}}}{\hich\af4\dbch\af4\loch\f4 Integers, floating-point variables, and pointers are always passed by value.  C does not have a mechanism for passing\hich\af4\dbch\af4\loch\f4  one of these types by reference like Pascal or Ada.  This means that a function cannot change to original value of a variable passed as a parameter.  For example, the program\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void change(int i)\par \par \{\par \hich\af2\dbch\af4\loch\f2 ++i;\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par \}\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 int i;\par \par \hich\af2\dbch\af4\loch\f2 i = \hich\af2\dbch\af4\loch\f2 1;\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par \hich\af2\dbch\af4\loch\f2 change(i);\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 does not change the value of i in main.  The program will print 1, 2 and 1 to the screen, not 1, 2 and 2.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 This does not mean that there is no way to create a function that can modify a variable in anot\hich\af4\dbch\af4\loch\f4 her function, just that there is no way to do it directly.  When a function is supposed to change the original value of a variable, a pointer to the variable is passed, rather than the variable itself.  Using this idea in the example just presented, we ca\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4  create a program that will print 1, 2 and 2:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void change(int *i)\par \par \{\par \hich\af2\dbch\af4\loch\f2 *i += 1;\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", *i);\par \}\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 int i;\par \par \hich\af2\dbch\af4\loch\f2 i = 1;\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par \hich\af2\dbch\af4\loch\f2 change(&i);\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Arrays, structures and unions, on the other hand, are always passed \hich\af4\dbch\af4\loch\f4 by reference.  In all three cases, the address of the first byte of the structure is passed, not the actual bytes that make up the structure.  If the function that is called makes any change to the array, structure or union, the change affects the copy pa\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 sed to the function.  The following example illustrates this by using a function to clear an array.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void clear(float matrix[10][10]);\par \par \{\par \hich\af2\dbch\af4\loch\f2 int i,j;\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i)\par \hich\af2\dbch\af4\loch\f2    for (j = 0; j < 10; ++j)\par \hich\af2\dbch\af4\loch\f2       matrix[i][j] = 0.0;\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 float a[\hich\af2\dbch\af4\loch\f2 10][10];\par \par \hich\af2\dbch\af4\loch\f2 clear(a);\par \hich\af2\dbch\af4\loch\f2 /* a is now all zeros */\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 ORCA/C passes parameters starting with the rightmost parameter, and working to the left.  The expressions are also evaluated in that order.  While there is no strict requirement that parameters be processed t\hich\af4\dbch\af4\loch\f4 his way in C, most C compilers follow the same practice.  Simple variables of type char, short, int, long, float, double and extended are all passed by value, placing the actual value on the stack.  The most significant byte is always placed on the stack \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 irst; since the 65816 stack builds from the top of memory towards the bottom, this means that the values appear least significant byte first in memory.  Pointers are passed as unsigned long values, and will always have a range of 0 to 0x00FFFFFF.  Arrays,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 structures and unions are passed by placing the address of the first byte of the array, structure or union on the stack.  The compiler expects that all parameters are removed from the stack by the function called.{\*\bkmkend parameters}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters}{\rxe parameters}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318446}\hich\af4\dbch\af4\loch\f4 Returni\hich\af4\dbch\af4\loch\f4 ng Values from Functions{\*\bkmkend _Toc495318446}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:returning a value}}}{\hich\af4\dbch\af4\loch\f4 Functions can return any type except an array or function, although they can return a pointer to an array of function.  The value, if any, is returned as an expression on a return statement.  Fun\hich\af4\dbch\af4\loch\f4 ctions returning void should use the return statement without an expression.  If function is declared as returning void, any expression in the return statement will be flagged as an error.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318447}\hich\af4\dbch\af4\loch\f4 Pascal Functions{\*\bkmkend _Toc495318447}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pascal qualifier\bxe }}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 case sensitivity}}}{\hich\af4\dbch\af4\loch\f4 C functions have two major differences from functions and procedures in other languages.  First, most C compilers push the parameters to a function onto the stack working from right to left.  In all other common languages, parameters are generally passe\hich\af4\dbch\af4\loch\f4 d starting with the leftmost parameter and working to the right.  Second, C is a case sensitive language, so that the functions foo and Foo are different.  All other common languages are case insensitive, and would flag an error if you attempt to create t\hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 o functions whose names differ only in the case of the letters used.  The pascal qualifier allows you to create C functions that can be called from other languages, or to call procedures and functions defined in languages other than C.\par \hich\af4\dbch\af4\loch\f4 To use the pascal qu\hich\af4\dbch\af4\loch\f4 alifier, place the word pascal immediately after the storage class specifier (if any), and before the function type.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal int sum(int a, int b);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 could be used to allow C to call a function named sum that requires two integer parame\hich\af4\dbch\af4\loch\f4 ters and returns an integer result.  Because the pascal qualifier has been used, the integer a is push on the stack before the integer b, exactly the opposite of the normal order.  This function could be written in any language \endash  including C, so long as t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e function definition also specifies the pascal qualifier.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The C compiler still treats the names of functions using the pascal qualifier as case sensitive, but the names are converted to uppercase characters before passing them on to the linker.  This pres\hich\af4\dbch\af4\loch\f4 erves the feel of C, but satisfies the requirements of other languages.  It does create one problem, however: it is possible to define two functions in C whose names differ only in the case of the letters used, and end up with a linker error, while the co\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 piler does not see a problem.  If this happens, you must choose names that have differences other than the case of the letters.{\*\bkmkend functions}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}{\rxe functions}}}{\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 17 \endash  Expressions\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318448}\hich\af4\dbch\af4\loch\f4 Chapter 17 \endash  Expressions{\*\bkmkend _Toc495318448}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318449}\hich\af4\dbch\af4\loch\f4 Syntax{\*\bkmkend _Toc495318449}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 expressions\:syntax}}}{{\*\bkmkstart expressions}\hich\af4\dbch\af4\loch\f4 In other chapters about the compile\hich\af4\dbch\af4\loch\f4 r, the syntax charts for the language is intermixed with the description of the C language.  This doesn't work well for expressions, which can be explained more easily in terms of the operators and operands that make up the expression.  This section prese\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 ts the syntax charts for expressions for completeness.\par \par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 comma-expression}{\fs18 \par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 comma-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 assignment-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 assignment-expression}{\fs18 \}\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 assignment-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 conditional-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 unary-expression}{\fs18 \par \tab \hich\af2\dbch\af4\loch\f2 [\par \tab \hich\af2\dbch\af4\loch\f2 '=' | '+=' | '-=' | '*=' | '/\hich\af2\dbch\af4\loch\f2 =' | '%=' | '<<=' | '>>=' | '^=' | '='\par \tab \hich\af2\dbch\af4\loch\f2 ]\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 assignment-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 ]\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 unary-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 postfix-expression}{\fs18 \par \tab \hich\af2\dbch\af4\loch\f2 | }{\i\fs18 \hich\af2\dbch\af4\loch\f2 cast-expression}{\fs18 \par \tab \hich\af2\dbch\af4\loch\f2 | }{\i\fs18 \hich\af2\dbch\af4\loch\f2 sizeof-expression}{\fs18 \par \tab \hich\af2\dbch\af4\loch\f2 | ['-' | '+' | '!' | '~' | '&' | '*' | '--' | '++'] }{\i\fs18 \hich\af2\dbch\af4\loch\f2 unary-expression}{\fs18 \par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 postfix-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 constan\hich\af2\dbch\af4\loch\f2 t}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab \hich\af2\dbch\af4\loch\f2 ['(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ')']\par \tab \{\hich\af2\dbch\af4\loch\f2 ['[' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ']'] | ['.' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2 ] | ['->' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2 ]\par \tab \hich\af2\dbch\af4\loch\f2  | ['(' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 comma-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ')'] | '++' | '--'\}*\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 cast-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :  '(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 type-name}{\fs18 \hich\af2\dbch\af4\loch\f2  ')' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 unary-expression}{\fs18 \par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 type-name}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 type-specifier abstract-declarator}{\fs18 \par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 sizeof-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 : \hich\af2\dbch\af4\loch\f2  sizeof ['(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 type-name}{\fs18 \hich\af2\dbch\af4\loch\f2  ')'] | }{\i\fs18 \hich\af2\dbch\af4\loch\f2 unary-expression}{\fs18 \par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 conditional-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 logical-or-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'?' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ':' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 conditional-expression}{\fs18 \}\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 logical-or-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 logical-and-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'||' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 logical-and-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 logical-and-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-or-expr\hich\af2\dbch\af4\loch\f2 ession}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'&&' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-or-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-or-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-xor-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'|' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-xor-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-xor-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-and-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'^' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-and-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 bitwise-and-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :  }{\i\fs18 \hich\af2\dbch\af4\loch\f2 equality-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{'&' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 equality-expre\hich\af2\dbch\af4\loch\f2 ssion}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 equality-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 relational-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{['==' | '!='] }{\i\fs18 \hich\af2\dbch\af4\loch\f2 relational-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }\pard \fi-540\li900\keepn\widctlpar\adjustright {\i\fs18 \hich\af2\dbch\af4\loch\f2 relational-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par }\pard \fi-540\li900\widctlpar\adjustright {\fs18 \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 shift-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{['<' | '<=' | '>' | '>='] }{\i\fs18 \hich\af2\dbch\af4\loch\f2 shift-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 shift-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 additive-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{['<<' | '>>'] }{\i\fs18 \hich\af2\dbch\af4\loch\f2 additive-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 ad\hich\af2\dbch\af4\loch\f2 ditive-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 multiplicative-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{['+' | '-'] }{\i\fs18 \hich\af2\dbch\af4\loch\f2 multiplicative-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 multiplicative-expression}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 unary-expression}{\fs18 \hich\af2\dbch\af4\loch\f2  \{['*' | '%' | '/'] }{\i\fs18 \hich\af2\dbch\af4\loch\f2 unary-expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2 *\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318450}\hich\af4\dbch\af4\loch\f4 Operator Precedence{\*\bkmkend _Toc495318450}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 operator precedence}}}{\hich\af4\dbch\af4\loch\f4 C has a rich variety of operators, as \hich\af4\dbch\af4\loch\f4 well as a complicated set of operator precedences.  Operator precedence is what forces the value of the expression 1+2*3 to be 7, rather than 9, which would be the result if the expression where evaluated left to right.  The table below shows the preceden\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 e of all of the operators.  The operators with the highest precedence are shown above the operators with lower precedence.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1080\tx1800\tx2520\tx3240\tx3960\tx4680\tx5400\tx6120\tx6840\tx7560\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 terms\par \hich\af2\dbch\af4\loch\f2 ++1\tab --1\par \hich\af2\dbch\af4\loch\f2 ++2\tab --2\tab sizeof\tab (...)3\tab ~\tab !\tab -4\tab +4\tab &5\tab *6\par \hich\af2\dbch\af4\loch\f2 *\tab /\tab %\par \hich\af2\dbch\af4\loch\f2 +\tab -\par \hich\af2\dbch\af4\loch\f2 <<\tab >>\par \hich\af2\dbch\af4\loch\f2 <\tab >\tab <=\tab >=\par \hich\af2\dbch\af4\loch\f2 ==\tab !=\par \hich\af2\dbch\af4\loch\f2 &7\par \hich\af2\dbch\af4\loch\f2 ^\par \hich\af2\dbch\af4\loch\f2 |\par \hich\af2\dbch\af4\loch\f2 &&\par \hich\af2\dbch\af4\loch\f2 ||\par \hich\af2\dbch\af4\loch\f2 ? :8\par \hich\af2\dbch\af4\loch\f2 =\tab +=\tab -=\tab *=\tab /=\tab %=\tab <<=\tab >>=\tab &=\tab ^=\tab \hich\af2\dbch\af4\loch\f2 |=\par \hich\af2\dbch\af4\loch\f2 ,\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\fi-360\li1080\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1 postfix operators\par \hich\af4\dbch\af4\loch\f4 2 prefix operators\par \hich\af4\dbch\af4\loch\f4 3 type casts\par \hich\af4\dbch\af4\loch\f4 4 unary addition, subtraction\par \hich\af4\dbch\af4\loch\f4 5 address operator\par \hich\af4\dbch\af4\loch\f4 6 indirection operator\par \hich\af4\dbch\af4\loch\f4 7 bitwise and\par \hich\af4\dbch\af4\loch\f4 8 conditional evaluation operator (a ternary operator)\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318451}\hich\af4\dbch\af4\loch\f4 Terms{\*\bkmkend _Toc495318451}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 terms}}}{\hich\af4\dbch\af4\loch\f4 Expressions are made up of terms sep\hich\af4\dbch\af4\loch\f4 arated by operators.  The terms represent the variables and constants to be worked on, or the locations where these variables will be stored.  This includes elements of arrays and components of structures and unions.  Terms also include values returned by\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 functions.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318452}\hich\af4\dbch\af4\loch\f4 L-values{\*\bkmkend _Toc495318452}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 l-values}}}{\hich\af4\dbch\af4\loch\f4 In discussing the various forms that a term can take, some will be referred to as l-values.  This is an important concept in any language, but is much more important in C, with its multiple assignment operators and oper\hich\af4\dbch\af4\loch\f4 ators with side effects.  Conceptually, an l-value is any simple value that can be changed.  L-values include arithmetic variables, elements of arrays, structures, unions, components of structures and unions, enumeration variables and pointers.  L-values \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 o not include entire arrays, functions, or constants.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318453}\hich\af4\dbch\af4\loch\f4 Constants{\*\bkmkend _Toc495318453}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 constants}}}{\hich\af4\dbch\af4\loch\f4 The simplest type of term is the constant.  Constants can appear in base ten, base eight (octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4 ) or base sixteen (hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4 ).  Constants c\hich\af4\dbch\af4\loch\f4 an be coded as integers, real numbers, or strings, with a variety of attributes.  Constants are not l-values.  Constants are covered fully in Chapter 11.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318454}\hich\af4\dbch\af4\loch\f4 Simple Variables{\*\bkmkend _Toc495318454}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 variables}}}{\hich\af4\dbch\af4\loch\f4 Another simple type of term is the variable.  The simple variable c\hich\af4\dbch\af4\loch\f4 an have a variety of types, but always appears as a name in the expression.  The variable must be defined before it is used.  Variables come in all of the same types that constants come it, except for strings:  a string variable is actually an array of ch\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 racters.  Variables are l-values.  All operators have some restrictions on the type of variables they can be used with.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318455}\hich\af4\dbch\af4\loch\f4 Arrays{\*\bkmkend _Toc495318455}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays\:as pointers}}}{{\*\bkmkstart arrays2}\hich\af4\dbch\af4\loch\f4 Arrays can appear in expressions in one of two ways, with or without a subscript.  When an array appea\hich\af4\dbch\af4\loch\f4 rs without a subscript, it is not an l-value.  It can appear in several places in this form.  When an array appears in the operand of the sizeof operator, the size of the entire array is returned.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[10];\par \par \hich\af2\dbch\af4\loch\f2 ...\par \par \hich\af2\dbch\af4\loch\f2 i = sizeof(a);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would set i\hich\af4\dbch\af4\loch\f4  to twenty, since the array a consists of ten integers, each of which is two bytes long.  In other situations, the usual unary or binary conversions are performed.  (The usual conversions are discussed in the section "Automatic Type Conversions," later in\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 this chapter.)  When the conversions are performed, the array is converted to a pointer to the first element of the array, and the type of the result is a pointer to an element of the array.  For example,\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[10], *ip;\par \par \hich\af2\dbch\af4\loch\f2 ...\par \par \hich\af2\dbch\af4\loch\f2 ip = a;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 sets ip to point to\hich\af4\dbch\af4\loch\f4  a[0].\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays\:indexing}}}{\hich\af4\dbch\af4\loch\f4 An array element is accessed by coding the name of the array followed by a left bracket, an expression, and a right bracket.  The expression is evaluated.  The result type must be integral; it is used to index into the array.\hich\af4\dbch\af4\loch\f4   The result type of the entire term is the same as the type of one element of the array.  The type of the term is an l-value if one term of the array is an l-value, and it is not an l-value if one element of the array is not an l-value.  For example, wit\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4  the definition\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[10][10];\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 a[1] is not an l-value, since it refers to a ten-element array of integers.  A[1][3], on the other hand, is an l-value:  the type of the term is int.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The subscript operator can also be applied to a pointer.  Just as array n\hich\af4\dbch\af4\loch\f4 ames are treated as pointers to the first element of an array, a subscript operator applied to a pointer treats the pointer as the address of the first element of an array whose elements have the same type as the base type of the pointer.  For example, th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  following statements show four ways to fill an array of ten integers with the numbers one through ten.  The second method shows indexing of a pointer.  Note the variety of other ways made possible by the close relationship between pointers and arrays in \hich\af4\dbch\af4\loch\f4 C\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int a[10], i, *ip;\par \par \hich\af2\dbch\af4\loch\f2 /* method 1: subscripting the array */\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i)\par \hich\af2\dbch\af4\loch\f2    a[i] = i+1;\par \par \hich\af2\dbch\af4\loch\f2 /* method 2: subscripting the pointer */\par \hich\af2\dbch\af4\loch\f2 ip = a;\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i)\par \hich\af2\dbch\af4\loch\f2    ip[i] = i+1;\par \par \hich\af2\dbch\af4\loch\f2 /* method 3: dereferencing the pointer */\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; \hich\af2\dbch\af4\loch\f2 ++i)\par \hich\af2\dbch\af4\loch\f2    *(ip+i) = i+1;\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* method 4: dereferencing the array */\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i)\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2    *(a+i) = i+1;{\*\bkmkend arrays2}}{\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 arrays}{\rxe arrays2}}}{\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318456}\hich\af4\dbch\af4\loch\f4 Function Calls{\*\bkmkend _Toc495318456}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}}}{\hich\af4\dbch\af4\loch\f4 A function call is coded as the name of a function followed by a pair of parentheses.  If\hich\af4\dbch\af4\loch\f4  the function requires (or allows) parameters, the parameters are coded as expressions separated by commas, and appear between the parentheses.  The parentheses are required even if the function has no parameters.  The result type is the type returned by \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he function.  It is not an l-value.  If the function returns void, the result may not be used as an operand for any operator described in this chapter; this is equivalent to the procedure call or subroutine call in other languages.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:calling \hich\af4\dbch\af4\loch\f4 through a pointer}}}{\hich\af4\dbch\af4\loch\f4 If a function appears in an expression without the parentheses that indicate a parameter list, it is treated as a pointer to the function.  This property of functions is often used when assigning a value to a pointer to a function, or w\hich\af4\dbch\af4\loch\f4 hen passing a function as a parameter.  To call a function when a pointer to the function is available, code the pointer as if it were a function call.  The following program uses these principles to print both the s\hich\af4\dbch\af4\loch\f4 \hich\f4 ine and cosine of \u960\'b9\loch\f4 /4.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define pi 3.1415926535\par \par \hich\af2\dbch\af4\loch\f2 void print(float (*f)(), float val)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("%f\\n", f(val));\par \}\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 print(sin, pi/4.0);\par \hich\af2\dbch\af4\loch\f2 print(cos, pi/4);\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Actual parameters to functions are evaluated starting with the rightmost parameter\hich\af4\dbch\af4\loch\f4  and proceeding to the left.  The order in which parameters are evaluated varies from compiler to compiler.  Since the order of evaluation can be critical to the outcome of functions with side effects, it is best not to use such functions in your programs\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4   The following example illustrates this.  It can also be used to test the order of evaluation used by a particular compiler.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int val;\par \par \hich\af2\dbch\af4\loch\f2 int change(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 return val++;\par \}\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 int test(int a, int b)\par \par \{\par \hich\af2\dbch\af4\loch\f2 return a+b;\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 val = 1;\par \par \hich\af2\dbch\af4\loch\f2 if (test(2*ch\hich\af2\dbch\af4\loch\f2 ange(), change()) == 4)\par \hich\af2\dbch\af4\loch\f2    printf("Arguments are evaluated left-to-right.\\n");\par \hich\af2\dbch\af4\loch\f2 else\par \hich\af2\dbch\af4\loch\f2    printf("Arguments are evaluated right-to-left.\\n");\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318457}\hich\af4\dbch\af4\loch\f4 Component Selection{\*\bkmkend _Toc495318457}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 direct selection}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions}}}{\hich\af4\dbch\af4\loch\f4 The direct selection operator allows\hich\af4\dbch\af4\loch\f4  selection of a field from within a structure or union.  It appears as a period separating an expression whose result is a structure or union (on the left) from the name of a component of the structure or union (on the right).  The result has the same typ\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  as the field of the structure or union.  It is an l-value if the expression to the left of the period is an l-value, and the component is not an array.  The expression to the left of the period is not an l-value if the structure or union is returned by a\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 function.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct point \{float x,y,z;\};\par \hich\af2\dbch\af4\loch\f2 struct polygon \{point a,b,c,d;\} p;\par \par \hich\af2\dbch\af4\loch\f2 p.a.x = 1.0; /* set the x-coordinate of point a in polygon p to 1 */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 indirect selection}}}{\hich\af4\dbch\af4\loch\f4 The indirect selection operator, ->, is similar to the direct selection operator in\hich\af4\dbch\af4\loch\f4  that it is used to access components of structures and unions.  The difference is that the left side is a pointer to a structure or union, rather than a structure or union.  Once again, the result has the same type as the field of the structure or union.\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4  The result is an l-value if the component is not an array.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct polygon *pPtr;\par \par \hich\af2\dbch\af4\loch\f2 pPtr->a.x = 1.0;\tab /* set the x-coordinate of point a 1 */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The indirect selection operator is completely equivalent to the direct selection operator applied to the pointer a\hich\af4\dbch\af4\loch\f4 fter it has been dereferenced.  For example, the above example could be restated as\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 (*pPtr).a.x = 1.0;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 and the result would not change.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318458}\hich\af4\dbch\af4\loch\f4 Parenthesized Expressions{\*\bkmkend _Toc495318458}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 operator precedence}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parentheses}}}{\hich\af4\dbch\af4\loch\f4 A parenthesized expression is an expression \hich\af4\dbch\af4\loch\f4 enclosed in parentheses.  The parentheses do not affect the status of the enclosed expression in any way.  In particular, the type of the parenthesized expression is the same as the type of the enclosed expression, and it is an l-value if and only if the \hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 nclosed expression is an l-value.  The sole effect of the parentheses is to modify the precedence of the operators.  The expression within the parentheses is evaluated before the surrounding operators are applied.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318459}\hich\af4\dbch\af4\loch\f4 Postincrement and Postdecrement{\*\bkmkend _Toc495318459}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ++ o\hich\af4\dbch\af4\loch\f4 perator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 -- operator}}}{\hich\af4\dbch\af4\loch\f4 The postincrement and postdecrement operators are used to increment or decrement scalar values.  The operand must be an l-value.  The result of the expression is the value before the operator is applied.  For example,\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 i = 1;\par \hich\af2\dbch\af4\loch\f2 j = i++;\par \hich\af2\dbch\af4\loch\f2 printf("%d, %d\\n", j, i);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 prints 1, 2 to standard out, not 2, 2.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The result is not an l-value.  The result type is the type of the operand.\par \hich\af4\dbch\af4\loch\f4 If the ++ or -- operator is applied to a pointer, the updated pointer points to one object beyond (++) or \hich\af4\dbch\af4\loch\f4 before (--) the original value.  The example below illustrates this by filling an array, then printing the contents backwards.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int i, a[10], *ip;\par \par \hich\af2\dbch\af4\loch\f2 ip = a;\par \hich\af2\dbch\af4\loch\f2 for (i = 1; i < 11; ++i)\par \hich\af2\dbch\af4\loch\f2    ip++ = i;\par \par \hich\af2\dbch\af4\loch\f2 ip--;\par \hich\af2\dbch\af4\loch\f2 for (i = 1; i < 11; ++i)\par \hich\af2\dbch\af4\loch\f2    printf("%d\\n", ip--);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The \hich\af4\dbch\af4\loch\f4 result is technically undefined if an overflow or underflow results.  In ORCA/C, if unsigned numbers are used, the result wraps around zero.  For example, using unsigned integers, incrementing an integer whose value is 65535 would result in zero, and decr\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 menting zero would yield 65535.  For the case of signed integers, incrementing 32767 would give -32768, while decrementing -32768 would give 32767.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318460}\hich\af4\dbch\af4\loch\f4 Math Operators{\*\bkmkend _Toc495318460}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 C supports a total of ten operators for dealing with numeric values.  Five of these are binar\hich\af4\dbch\af4\loch\f4 y operators, four are unary operators, and one is a built-in function.  The operations, and the symbols used to represent the operations, are shown below.\par \par }\pard\plain \s31\qj\li1080\ri540\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2700\tx3960\tx4860\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 operation\tab symbol\tab type\tab operands\par }\pard\plain \s16\qj\li1080\ri540\sl223\slmult1\widctlpar\tx2700\tx3960\tx4860\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 addition\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 +}{\tab \hich\af4\dbch\af4\loch\f4 binary\tab any arithmetic type or pointer\par \hich\af4\dbch\af4\loch\f4 subtraction\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 -}{\tab \hich\af4\dbch\af4\loch\f4 binary\tab \hich\af4\dbch\af4\loch\f4 any arithmetic type or pointer\par \hich\af4\dbch\af4\loch\f4 multiplication\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 *}{\tab \hich\af4\dbch\af4\loch\f4 binary\tab any arithmetic type\par \hich\af4\dbch\af4\loch\f4 division\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 /}{\tab \hich\af4\dbch\af4\loch\f4 binary\tab any arithmetic type\par \hich\af4\dbch\af4\loch\f4 remainder\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 %}{\tab \hich\af4\dbch\af4\loch\f4 binary\tab any integer type\par \hich\af4\dbch\af4\loch\f4 unary addition\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 +}{\tab \hich\af4\dbch\af4\loch\f4 unary\tab any arithmetic type\par \hich\af4\dbch\af4\loch\f4 unary subtraction\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 -}{\tab \hich\af4\dbch\af4\loch\f4 unary\tab any arithmetic type\par \hich\af4\dbch\af4\loch\f4 increment\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 ++}{\tab \hich\af4\dbch\af4\loch\f4 unar\hich\af4\dbch\af4\loch\f4 y\tab any arithmetic type or pointer\par \hich\af4\dbch\af4\loch\f4 decrement\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 --}{\tab \hich\af4\dbch\af4\loch\f4 unary\tab any arithmetic type or pointer\par \hich\af4\dbch\af4\loch\f4 size\tab }{\fs18 \hich\af2\dbch\af4\loch\f2 sizeof()}{\tab \hich\af4\dbch\af4\loch\f4 function\tab any type or unary expression\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Integer types include char, short, int, long, and the unsigned forms of all of these.  Arithmetic types include the inte\hich\af4\dbch\af4\loch\f4 ger types plus float, double, comp and extended.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318461}\hich\af4\dbch\af4\loch\f4 Addition{\*\bkmkend _Toc495318461}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 + operator}}}{\hich\af4\dbch\af4\loch\f4 The operands are converted to the same type using the usual binary conversion rules.  The two operands are then added.  The result is the same type as the converted operands, and \hich\af4\dbch\af4\loch\f4 is not an l-value.\par \hich\af4\dbch\af4\loch\f4 Integer overflow is not detected.  If two integers exceed the range of the type of the operands, the extra most-significant bits are lost.\par \hich\af4\dbch\af4\loch\f4 Floating-point errors are not detected automatically.  Errors can be detected by direct calls to S\hich\af4\dbch\af4\loch\f4 ANE.  If a floating-point underflow occurs, the result is zero.  Floating-point overflow gives a result of infinity, which can lead to correct, non-infinite answers in some forms of equations.\par \hich\af4\dbch\af4\loch\f4 The addition operator can also be used to add an integer to a p\hich\af4\dbch\af4\loch\f4 ointer.  The result is a pointer of the same type as the input pointer.  If, for example, n is added to a pointer, the new pointer points n elements past the original pointer.  If ip is a pointer to an integer, then, *(ip+2) load the integer that is two i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 tegers past the integer pointed to by ip.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318462}\hich\af4\dbch\af4\loch\f4 Subtraction{\*\bkmkend _Toc495318462}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 - operator}}}{\hich\af4\dbch\af4\loch\f4 The operands are converted to the same type using the usual binary conversion rules.  The second operand is then subtracted from the first.  The result is the same type as the convert\hich\af4\dbch\af4\loch\f4 ed operands, and is not an l-value.\par \hich\af4\dbch\af4\loch\f4 Integer overflow is not detected.  If two integers exceed the range of the type of the operands, the extra most-significant bits are lost.\par \hich\af4\dbch\af4\loch\f4 If the operands are one of the unsigned integer types, and the left operand is sm\hich\af4\dbch\af4\loch\f4 aller than the right operand, the result is a positive unsigned number wrapped through the given base.  For example, if the operands are unsigned int, and the left operand has a value of 1, while the right has a value of 2, then the result is 65536-1, or \hich\af4\dbch\af4\loch\f4 6\hich\af4\dbch\af4\loch\f4 5535.  Another way of thinking about this is to recognize that this result has the bit pattern of the signed result of the operation, but that it is represented as an unsigned number. \par \hich\af4\dbch\af4\loch\f4 Floating-point errors are not detected automatically.  Errors can be de\hich\af4\dbch\af4\loch\f4 tected by direct calls to SANE.  If a floating-point underflow occurs, the result is zero.  Floating-point overflow gives a result of infinity, which can lead to correct, non-infinite answers in some forms of equations.\par \hich\af4\dbch\af4\loch\f4 The subtraction operator can also be\hich\af4\dbch\af4\loch\f4  used with two pointer operators if the pointers are of the same type.  The result is an integer; it is the number of elements between the two pointers.  For example, (&a[4])-(&a[1]) would be 3, regardless of the type of the array.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318463}\hich\af4\dbch\af4\loch\f4 Multiplication{\*\bkmkend _Toc495318463}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 * o\hich\af4\dbch\af4\loch\f4 perator}}}{\hich\af4\dbch\af4\loch\f4 The operands are converted to the same type using the usual binary conversion rules.  The two operands are then multiplied.  The result is the same type as the converted operands, and is not an l-value.\par \hich\af4\dbch\af4\loch\f4 Integer overflow is not detected.  If two i\hich\af4\dbch\af4\loch\f4 ntegers exceed the range of the type of the operands, the extra most-significant bits are lost.\par \hich\af4\dbch\af4\loch\f4 Floating-point errors are not detected automatically.  Errors can be detected by direct calls to SANE.  If a floating-point underflow occurs, the result is zero\hich\af4\dbch\af4\loch\f4 .  Floating-point overflow gives a result of infinity, which can lead to correct, non-infinite answers in some forms of equations.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318464}\hich\af4\dbch\af4\loch\f4 Division{\*\bkmkend _Toc495318464}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 / operator}}}{\hich\af4\dbch\af4\loch\f4 The operands are converted to the same type using the usual binary conversion rules.  The first o\hich\af4\dbch\af4\loch\f4 perand (the numerator) is then divided by the second operand (the denominator).  The result is the same type as the converted operands, and is not an l-value.\par \hich\af4\dbch\af4\loch\f4 For integer division, any fractional part of the result is discarded; i.e., 4/3 gives a result of\hich\af4\dbch\af4\loch\f4  1, not 1.333.  For positive results, all C compilers return the truncated number; i.e., the largest integer that is less than or equal to the floating-point result.  Various compilers truncate negative numbers in different ways, so it is not a good idea \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 o depend on the results of integer division when the results are negative.  In ORCA/C, as in most implementations of C, truncation of a negative result returns the integer closest to zero.  For example, (-4)/3 gives a result of -1, not -2.\par \hich\af4\dbch\af4\loch\f4 Integer division\hich\af4\dbch\af4\loch\f4  by zero is not detected.  The results of dividing by zero are not predictable.\par \hich\af4\dbch\af4\loch\f4 For floating-point division, the result is the floating-point number that is the best representation of the correct answer; here, some differences between the actual result and\hich\af4\dbch\af4\loch\f4  the correct mathematical result may occur due to round-off error.\par \hich\af4\dbch\af4\loch\f4 Floating-point errors are not detected automatically.  Errors can be detected by direct calls to SANE.  If a floating-point underflow occurs, the result is zero.  Floating-point overflow gi\hich\af4\dbch\af4\loch\f4 ves a result of infinity, which can lead to correct, non-infinite answers in some forms of equations.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318465}\hich\af4\dbch\af4\loch\f4 Remainder{\*\bkmkend _Toc495318465}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 % operator}}}{\hich\af4\dbch\af4\loch\f4 The operands are converted to the same type using the usual binary conversion rules.  The first operand is then divided by th\hich\af4\dbch\af4\loch\f4 e second.  The result is the remainder from the division.  The result is the same type as the converted operands, and is not an l-value.\par \hich\af4\dbch\af4\loch\f4 For non-zero b, the following relation always holds.  It defines the action of this operation in a mathematical sense, \hich\af4\dbch\af4\loch\f4 including the results when one argument is negative and the other is positive.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ((a/b)*b + a%b) == a\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Integer division by zero is not detected.  The results of dividing by zero are not predictable.\par \hich\af4\dbch\af4\loch\f4 The remainder function requires integer operands; it is an\hich\af4\dbch\af4\loch\f4  error to supply a floating-point value as one or both of the operands.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318466}\hich\af4\dbch\af4\loch\f4 Unary Subtraction{\*\bkmkend _Toc495318466}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 - operator}}}{\hich\af4\dbch\af4\loch\f4 The operand, which can be of any arithmetic type, is converted using the usual unary conversion rules.  The result is not an l-value.  The operatio\hich\af4\dbch\af4\loch\f4 n is completely equivalent to subtracting the value from zero.  The same rules that would apply to subtracting the number from zero also apply to unary subtraction when handling overflows, underflows, and dealing with unsigned operands.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318467}\hich\af4\dbch\af4\loch\f4 Unary Addition{\*\bkmkend _Toc495318467}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 + operator}}}{\hich\af4\dbch\af4\loch\f4 The operand, which can be of any arithmetic type, is converted using the usual unary conversion rules.  The result is not an l-value.  The operation is completely equivalent to adding the value to zero.  The same rules apply for handling ove\hich\af4\dbch\af4\loch\f4 rflows, underflows, and dealing with unsigned operands.  Other than any type conversions performed, this operation does not actually generate any code, since adding a number to zero does not change the number.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318468}\hich\af4\dbch\af4\loch\f4 Prefix Increment{\*\bkmkend _Toc495318468}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ++ operator}}}{\hich\af4\dbch\af4\loch\f4 The opera\hich\af4\dbch\af4\loch\f4 nd, which can be and scalar l-value, is incremented by one.  The usual binary conversions are applied to the operand and to the constant one.  The result is stored back in the operand after the usual assignment conversions are applied.  The result is the \hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 ew operand, and is not an l-value.  The type of the result is the same as the type of the operand.\par \hich\af4\dbch\af4\loch\f4 If the operand is a pointer, the pointer is moves so that it points to the next item of the type pointed to by the pointer.  For example, if the pointer is a\hich\af4\dbch\af4\loch\f4  pointer to an integer, a value of two is added to the ordinal value of the pointer, since integers are two bytes long.\par \hich\af4\dbch\af4\loch\f4 If the argument is an unsigned value, and the value of the argument is the largest unsigned number that can be represented with the give\hich\af4\dbch\af4\loch\f4 n integer size, the result is zero.  If the argument is a signed integer and the value is the largest signed integer, the result is technically undefined, but is actually one less than the value of the argument subtracted from zero in ORCA/C.  For example\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  if the value if the signed integer i is 32767 (the largest signed integer), and the ++ operator is applied to the integer, the result is -32768.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318469}\hich\af4\dbch\af4\loch\f4 Prefix Decrement{\*\bkmkend _Toc495318469}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 -- operator}}}{\hich\af4\dbch\af4\loch\f4 The operand, which can be and scalar l-value, is decremented by one.  The\hich\af4\dbch\af4\loch\f4  usual binary conversions are applied to the operand and to the constant one.  The result is stored back in the operand after the usual assignment conversions are applied.  The result is the new operand, and is not an l-value.  The type of the result is t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e same as the type of the operand.\par \hich\af4\dbch\af4\loch\f4 If the operand is a pointer, the pointer is moves so that it points to the previous item of the type pointed to by the pointer.  For example, if the pointer is a pointer to an integer, a value of two is subtracted from th\hich\af4\dbch\af4\loch\f4 e ordinal value of the pointer, since integers are two bytes long.\par \hich\af4\dbch\af4\loch\f4 If the argument is an unsigned value, and the value of the argument is zero, the result is the largest unsigned number that can be represented with the given integer size.  If the argument \hich\af4\dbch\af4\loch\f4 is a signed integer and the value is the smallest signed integer, the result is technically undefined, but is actually one less than the value of the argument subtracted from zero in ORCA/C.  For example, if the value if the signed integer i is -32768 (th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  smallest signed integer that can be represented in two bytes using two's complement notation), and the -- operator is applied to the integer, the result is 32767.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318470}\hich\af4\dbch\af4\loch\f4 Sizeof Operator{\*\bkmkend _Toc495318470}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sizeof operator}}}{\hich\af4\dbch\af4\loch\f4 The sizeof operator returns the size of the operand,\hich\af4\dbch\af4\loch\f4  in bytes.  The result is not an l-value.  The operand can be a type name or any unary expression.  The operand cannot be a function, void, or an array declared without giving explicit values for all dimensions.  If the operand is an array, the result is \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he complete size of the array.  For any other unary operand, the result is the size of the result type.\par \hich\af4\dbch\af4\loch\f4 There are two forms of the sizeof operator.  When the operand is a type name, it must be enclosed in parentheses.  When the operand is a unary expressio\hich\af4\dbch\af4\loch\f4 n, it does not have to be enclosed in parentheses, although it does no harm to use the parentheses.\par \hich\af4\dbch\af4\loch\f4 When the operand is a unary expression, the expression is not evaluated at run-time.  In other words, ++ and -- operators do not change the value of the var\hich\af4\dbch\af4\loch\f4 iables, function calls are not made, and assignments are not performed.  The expression is examined at compile time to determine the result type, but no code is generated.\par \hich\af4\dbch\af4\loch\f4 Taking the size of a bit field returns the size of the underlying type.\par \hich\af4\dbch\af4\loch\f4 While the si\hich\af4\dbch\af4\loch\f4 zeof operator does not perform any type conversions, the expression appearing in the operand can perform type conversions.\par \hich\af4\dbch\af4\loch\f4 In ORCA/C, the result of the sizeof operator is of type unsigned long.\par \hich\af4\dbch\af4\loch\f4 The examples below illustrate some of these principles.  The d\hich\af4\dbch\af4\loch\f4 eclarations which precede the tables are used to compute the sizes of the terms.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int *ip, i, a[10];\par \hich\af2\dbch\af4\loch\f2 float f, fa[5][5];\par \hich\af2\dbch\af4\loch\f2 struct point (float x,y,z;\} p;\par \par \hich\af2\dbch\af4\loch\f2 sizeof (int)\tab 2\par \hich\af2\dbch\af4\loch\f2 sizeof (char)\tab 1\par \hich\af2\dbch\af4\loch\f2 sizeof (unsigned)\tab 2\par \hich\af2\dbch\af4\loch\f2 sizeof (long)\tab 4\par \hich\af2\dbch\af4\loch\f2 sizeof (float)\tab 4\par \hich\af2\dbch\af4\loch\f2 sizeof (double)\tab 8\par \hich\af2\dbch\af4\loch\f2 si\hich\af2\dbch\af4\loch\f2 zeof (extended)\tab 10\par \hich\af2\dbch\af4\loch\f2 sizeof (comp)\tab 8\par \hich\af2\dbch\af4\loch\f2 sizeof (void *)\tab 4\par \hich\af2\dbch\af4\loch\f2 sizeof (i)\tab 2\par \hich\af2\dbch\af4\loch\f2 sizeof ip\tab 4\par \hich\af2\dbch\af4\loch\f2 sizeof (*ip)\tab 2\par \hich\af2\dbch\af4\loch\f2 sizeof a\tab 20\par \hich\af2\dbch\af4\loch\f2 sizeof a[1]\tab 2\par \hich\af2\dbch\af4\loch\f2 sizeof f\tab 4\par \hich\af2\dbch\af4\loch\f2 sizeof fa\tab 100\par \hich\af2\dbch\af4\loch\f2 sizeof (point)\tab 12\par \hich\af2\dbch\af4\loch\f2 sizeof p\tab 12\par \hich\af2\dbch\af4\loch\f2 sizeof (0L)\tab 4\par \hich\af2\dbch\af4\loch\f2 sizeof (1+7)\tab 2\par \hich\af2\dbch\af4\loch\f2 sizeof (sizeof(0))\tab 4\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318471}\hich\af4\dbch\af4\loch\f4 Comparison Operations{\*\bkmkend _Toc495318471}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There are \hich\af4\dbch\af4\loch\f4 six comparison operators in C.  The operands of any of these operators can work on any arithmetic type, or on two pointers if both pointers are of the same type.  The equality operators can also be used on a pointer and the integer constant zero.  Two poi\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 ters are considered to be equal if they point to the same byte of memory, or if both pointers are NULL.  A pointer is equal to the integer constant zero if the value of the pointer is NULL.  Pointer a is less than pointer b if a points to an object stored\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 at a smaller address than the object b points to.  The only time this is generally of concern in a C program is when the pointers point to elements of the same array.  In that case, pointer a is less than pointer b if pointer a points to an element with a\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 smaller subscript than the element pointed to by b.\par \hich\af4\dbch\af4\loch\f4 The six comparison operators are shown in the table below.\par \par }\pard\plain \s31\qj\li2160\ri2520\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx3600\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 operator\tab condition\par }\pard\plain \s16\qj\li2160\ri2520\sl223\slmult1\keepn\widctlpar\tx3600\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 <\tab less than}{\pard\plain \s16\qj\li2160\ri2520\sl223\slmult1\keepn\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 < operator}}}{\par \hich\af4\dbch\af4\loch\f4 <=\tab less than or equal}{\pard\plain \s16\qj\li2160\ri2520\sl223\slmult1\keepn\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 <= operator}}}{\par \hich\af4\dbch\af4\loch\f4 >\tab greater than}{\pard\plain \s16\qj\li2160\ri2520\sl223\slmult1\keepn\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 > operator}}}{\par \hich\af4\dbch\af4\loch\f4 >=\tab greater than or\hich\af4\dbch\af4\loch\f4  equal}{\pard\plain \s16\qj\li2160\ri2520\sl223\slmult1\keepn\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 >= operator}}}{\par \hich\af4\dbch\af4\loch\f4 ==\tab equal}{\pard\plain \s16\qj\li2160\ri2520\sl223\slmult1\keepn\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 == operator}}}{\par }\pard \s16\qj\li2160\ri2520\sl223\slmult1\widctlpar\tx3600\adjustright {\hich\af4\dbch\af4\loch\f4 !=\tab not equal}{\pard\plain \s16\qj\li2160\ri2520\sl223\slmult1\widctlpar\tx3600\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 != operator}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 For example, a < b is true if a is less than b, and false if it is not.\par \hich\af4\dbch\af4\loch\f4 If the condition tested by the operator is true, the result is a signed integer value of one. \hich\af4\dbch\af4\loch\f4  If the condition is false, the result is zero.  The result is not an l-value.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318472}\hich\af4\dbch\af4\loch\f4 Logical Operations{\*\bkmkend _Toc495318472}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There are two binary logical operators, and one unary logical operator.  All of the operations accept any scalar type as an operand.  The result is of type in\hich\af4\dbch\af4\loch\f4 teger, and is one for a true result, and zero for false.  The result is not an l-value.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 && operator}}}{\hich\af4\dbch\af4\loch\f4 The logical and operator is &&.  The first operand is evaluated.  If it is non-zero, it is treated as true, while a zero result is treated as false.\hich\af4\dbch\af4\loch\f4   If the result is false, the right operand is not evaluated at all, since the result has already been determined, and the result of the && operation is zero.  If the left operand is non-zero, the second operand is evaluated.  If it is zero, the result is\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 zero (false); if the second operand results in a non-zero value, the result is one (true).\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 || operator}}}{\hich\af4\dbch\af4\loch\f4 The logical or operator is ||.  The first operand is evaluated.  If it is non-zero, it is treated as true, while a zero result is treated as fals\hich\af4\dbch\af4\loch\f4 e.  If the result is true, the right operand is not evaluated at all, since the result has already been determined, and the result of the || operation is one.  If the left operand is zero, the second operand is evaluated.  If it is zero, the result is zer\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4  (false); if the second operand results in a non-zero value, the result is one (true).\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ! operator}}}{\hich\af4\dbch\af4\loch\f4 The logical negation operator is !.  The single operand, which can be of any scalar type, is converted using the standard unary conversion rules.  If \hich\af4\dbch\af4\loch\f4 the operand is zero, the result is one; if the operand is non-zero, the result is zero.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318473}\hich\af4\dbch\af4\loch\f4 Bit Manipulation{\*\bkmkend _Toc495318473}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 C has six powerful bit manipulation operators.  The operands for all of the operators can be of any integer type.  The result is not an l-value.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 & operator}}}{\hich\af4\dbch\af4\loch\f4 The bitwise and operator is &.  It is a binary operator.  The two operands are converted using the standard binary conversion rules.  The type of the result matches the type of the converted operands.  The result is formed by performing an and\hich\af4\dbch\af4\loch\f4  of the individual bits in the two operands.  For example, 0x1248 & 0x1441 == 0x1040.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 | operator}}}{\hich\af4\dbch\af4\loch\f4 The bitwise or operator is |.  It is a binary operator.  The two operands are converted using the standard binary conversion rules.  The type of the re\hich\af4\dbch\af4\loch\f4 sult matches the type of the converted operands.  The result is formed by performing an or of the individual bits in the two operands.  For example, 0x1040 | 0x0208 == 0x1248.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ^ operator}}}{\hich\af4\dbch\af4\loch\f4 The bitwise exclusive or operator is ^.  It is a binary opera\hich\af4\dbch\af4\loch\f4 tor.  The two operands are converted using the standard binary conversion rules.  The type of the result matches the type of the converted operands.  The result is formed by performing an exclusive or of the individual bits in the two operands.  The resul\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  of an exclusive or is 1 if one of the bits, but not both, is 1, and 0 of both bits are 0 or both bits are 1.  For example, 0x1248 ^ 0x1040 == 0x0208.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ~ operator}}}{\hich\af4\dbch\af4\loch\f4 The bitwise negation operator is ~.  It is a unary operator.  The single operand, whic\hich\af4\dbch\af4\loch\f4 h appears to the right of the operator, is converted using the standard unary conversion rules.  The type of the result matches the type of the converted operand.  The result is formed by performing an exclusive or of the individual bits in the operand wi\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 h a second operand composed entirely of ones.  The effect is to reverse each bit in the operand.  For example, ~0x1248 == 0xEDB7.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 << operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 >> operator}}}{\hich\af4\dbch\af4\loch\f4 C supports two binary shift operators, << and >>.  In each case, the operands are conv\hich\af4\dbch\af4\loch\f4 erted separately using the standard unary conversion rules, not the binary conversion rules.  The result type is the type of the converted left operand.  It is formed by shifting the operand a certain number of bits to the left (for the << operator) or ri\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4 ht (the >> operator).\par \hich\af4\dbch\af4\loch\f4 For unsigned operands, zeros are shifted in from both the left and right to fill the new bit positions.  Zeros are also used to fill the bit positions created by the shift left operator (<<) if the left operand is signed.  If the shif\hich\af4\dbch\af4\loch\f4 t right operator (>>) is used with a signed left operand, the sign bit is replicated to fill the unused bit position.  The result of these rules is that shifting a number left is mathematically equivalent to multiplying the number by two raised to the pow\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 r of the second operand, providing that no overflows occur.  Shifting an unsigned number to the right is equivalent to dividing the number by two raised to the power of the second operand.  The same is true for signed operands unless the result would be z\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ro; in that one case, the result of shifting is always -1.\par \hich\af4\dbch\af4\loch\f4 If the right operand is zero, the result is the value of the left operand.  The results are not predictable if the right operand is less than zero.  Even if you determine the results by experimenta\hich\af4\dbch\af4\loch\f4 tion, we reserve the right to change the compiler in the future in ways that could affect such results.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318474}\hich\af4\dbch\af4\loch\f4 Assignment Operators{\*\bkmkend _Toc495318474}\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318475}\hich\af4\dbch\af4\loch\f4 Simple Assignment{\*\bkmkend _Toc495318475}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 = operator}}}{\hich\af4\dbch\af4\loch\f4 C has a variety of assignment operators.  The simplest is the assignment operator, =.  The sim\hich\af4\dbch\af4\loch\f4 ple assignment operator evaluates the expression to the right of the operator, then assigns the result to the l-value that appears to the left of the operator.  The result of the expression is the value assigned to the l-value, and has the same type as th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  unconverted l-value.\par \hich\af4\dbch\af4\loch\f4 The simple assignment operator can be used with any arithmetic types.  If the type of the expression does not match the type of the l-value, the expression is converted to the l-value's type using the same rules that would apply if th\hich\af4\dbch\af4\loch\f4 e expression were to be cast to the correct type explicitly.  See the discussion of type casing for details.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 structures}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unions}}}{\hich\af4\dbch\af4\loch\f4 Structures and unions can be assigned so long as the type of the expression matches the type of the l-value exact\hich\af4\dbch\af4\loch\f4 ly.  The contents of the structure or union are copied to the destination structure or union.  All bytes are copied, even if some involve unused bit fields, bits used to align other fields to a byte boundary, or unused bytes in a union.  The number of byt\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 s copied is equal to the number of bytes reported by the sizeof operator for the size of the structure or union.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers}}}{\hich\af4\dbch\af4\loch\f4 Pointers can be assigned so long as the type of the expression matches the type of the l-value exactly.  Some C compilers auto\hich\af4\dbch\af4\loch\f4 matically cast pointer types during assignment; ANSI C does not permit automatic casting of pointer types.  It is also legal to assign an integer to a pointer so long as the integer is a constant with a value of zero.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays}}}{\hich\af4\dbch\af4\loch\f4 Finally, an array can b\hich\af4\dbch\af4\loch\f4 e assigned to a pointer if the elements of the array are of the same type as the values pointed to by the pointer.  The resulting pointer points to the first element of the array.\par \hich\af4\dbch\af4\loch\f4 The assignment operator cannot be used to copy one array into another.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318476}\hich\af4\dbch\af4\loch\f4 Compo\hich\af4\dbch\af4\loch\f4 und Assignment{\*\bkmkend _Toc495318476}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assignments\:compound}}}{\hich\af4\dbch\af4\loch\f4 The compound assignment operators are a combination of simple assignment and one of the arithmetic or bitwise binary operators.  The effect is to perform the operation on the l-value and the expression, assigning\hich\af4\dbch\af4\loch\f4  the result to the l-value.  The result is not an l-value.  It has the same type as the l-value that appears to the left of the operation.\par \hich\af4\dbch\af4\loch\f4 The one difference between a compound assignment operator and an equivalent expression formed using the simple assign\hich\af4\dbch\af4\loch\f4 ment operator and the binary operation is that the l-value is only evaluated one time.  For example, if a function is used to compute the subscript of an array, as in\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 a[f(x)] += 3;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 the function f is only called one time.  The equivalent expression using \hich\af4\dbch\af4\loch\f4 the simple assignment operator is\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 a[f(x)] = a[f(x)] + 3;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In this case, the function f is called two times.  While it is rare in well-written programs, there are cases where the two expressions would yield different results.\par \hich\af4\dbch\af4\loch\f4 The same restrictions that app\hich\af4\dbch\af4\loch\f4 ly to the operator associated with the compound assignment also apply to the compound assignment operator.  Errors are handled the same way, and the same types of operands are allowed.  The table below shows the compound assignment operators with the asso\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 iated binary operator and the types of operands that are allowed.\par \par }\pard\plain \s31\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx3060\tx3960\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 assignment\tab binary\par \hich\af4\dbch\af4\loch\f4 operator\tab operator\tab operands\par }\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 +=\tab +\tab any arithmetic type or \par \tab \tab \hich\af4\dbch\af4\loch\f4 pointer += integer}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 += operator}}}{\par \hich\af4\dbch\af4\loch\f4 -=\tab -\tab any arithmetic type or\par \tab \tab \hich\af4\dbch\af4\loch\f4 pointer -= integer}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 -= operator}}}{\par \hich\af4\dbch\af4\loch\f4 *=\tab *\tab \hich\af4\dbch\af4\loch\f4 any arithmetic type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 *= operator}}}{\par \hich\af4\dbch\af4\loch\f4 /=\tab /\tab any arithmetic type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 /= operator}}}{\par \hich\af4\dbch\af4\loch\f4 %=\tab %\tab any integer type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 %= operator}}}{\par \hich\af4\dbch\af4\loch\f4 <<=\tab <<\tab any integer type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 <<= operator}}}{\par \hich\af4\dbch\af4\loch\f4 >>=\tab >>\tab any integer type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 >>= operator}}}{\par \hich\af4\dbch\af4\loch\f4 &=\tab &\tab any integer type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 &= operator}}}{\par \hich\af4\dbch\af4\loch\f4 ^=\tab ^\tab any integer type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\keepn\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ^= operator}}}{\par }\pard \s16\qj\li1440\ri1980\sl223\slmult1\widctlpar\tx3060\tx3960\adjustright {\hich\af4\dbch\af4\loch\f4 |=\tab |\tab any integer type}{\pard\plain \s16\qj\li1440\ri1980\sl223\slmult1\widctlpar\tx3060\tx3960\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 |= operator}}}{\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The original C language allowed the operator to appear after the = character.  This is no longer allowed in C, and most programs have been converted to avoid this form \hich\af4\dbch\af4\loch\f4 of the compound assignment operator.  A more recent change is to require the compound assignment operators to be treated as single tokens.  The effect of this change is that white space may not appear between the operator and the = character.  This is a m\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 re recent change to the language, and some programs ported form other compilers may still have white space after the operator.  The compiler will identify this error when it occurs, and the program can be easily corrected.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318477}\hich\af4\dbch\af4\loch\f4 Multiple Assignments{\*\bkmkend _Toc495318477}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 multip\hich\af4\dbch\af4\loch\f4 le assignments}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assignments\:multiple}}}{\hich\af4\dbch\af4\loch\f4 Unlike the other binary operators in C, all of the assignment operators are right-associative.  This means that if more than one assignment operator appears in a single expression, the rightmost operation is pe\hich\af4\dbch\af4\loch\f4 rformed first.  This allows for multiple assignments in one expression.  For example, x, y and z can all be initialized to zero at one time, as shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 x = y = z = 0.0;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 In most other high-level languages, this same operation would require three assi\hich\af4\dbch\af4\loch\f4 gnment statements.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318478}\hich\af4\dbch\af4\loch\f4 Pointers and Addresses{\*\bkmkend _Toc495318478}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 & operator}}}{\hich\af4\dbch\af4\loch\f4 The address operator & is used to obtain a pointer to an l-value.  The result is a pointer of type "pointer to value," where value is the type of the l-value.  For example, the following code use\hich\af4\dbch\af4\loch\f4 s the address operator to initialize a pointer to point to an integer.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int i, *ip;\par \par \hich\af2\dbch\af4\loch\f2 ip = &i;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The address operator can be used with register variables in ORCA/C.  Some C compilers do not permit the address operator to be used with register variables, and \hich\af4\dbch\af4\loch\f4 others may generate less efficient code if the address operator is used with a register variable.\par \hich\af4\dbch\af4\loch\f4 When the address operator is applied to a function, the result is of type pointer to function.  When the address operator is used on an array whose elements a\hich\af4\dbch\af4\loch\f4 re of type T, the result is of type pointer to array of T, or simply pointer to T.\par \hich\af4\dbch\af4\loch\f4 The address operator cannot be used on a bit field.  For example, the following use of the address operator is illegal.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct \{unsigned i: 8; unsigned j: 8;\} bar;\par \hich\af2\dbch\af4\loch\f2 char *cp\hich\af2\dbch\af4\loch\f2 ;\par \par \hich\af2\dbch\af4\loch\f2 cp = &bar.i;\tab /* illegal */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 * operator}}}{\hich\af4\dbch\af4\loch\f4 The indirection operator is used to dereference pointers.  It appears as an asterisk to the left of an l-value of type pointer.  If the pointer is of type "pointer to T," the result is an l-value of type T.\par \hich\af4\dbch\af4\loch\f4 The pointer must point to a valid variable when it is dereferenced.  If it does not, the results are unpredictable.  In most cases, a random value will be loaded, but if the pointer is pointing into one of the memory mapped I/O areas, almost anything can \hich\af4\dbch\af4\loch\f4 happen,  including turning disk drive motors on or off, switching displays, and so forth.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318479}\hich\af4\dbch\af4\loch\f4 Sequential Evaluation{\*\bkmkend _Toc495318479}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 , operator}}}{\hich\af4\dbch\af4\loch\f4 The sequential evaluation operator is a comma.  It can be used between two expressions in many places where an expression can\hich\af4\dbch\af4\loch\f4  be used.  The left expression is evaluated first.  The result is discarded, and the right expression is evaluated.  The result and result type are the same as the result and result type of the right expression.  The result is not an l-value.\par \hich\af4\dbch\af4\loch\f4 More than one\hich\af4\dbch\af4\loch\f4  comma operator can be used in a single expression, in which case the expressions are evaluated left to right, and the result and result type are determined by the last expression.\par \hich\af4\dbch\af4\loch\f4 The comma operator cannot be used in parameter lists to function calls, fie\hich\af4\dbch\af4\loch\f4 ld length expressions in structure and union delcarator lists, enumeration value expressions in enumeration lists, or initializer expressions in declarations and initializers.  Parentheses can be used to allow the use of the comma operator in these situat\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ons.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318480}\hich\af4\dbch\af4\loch\f4 Conditional Expressions{\*\bkmkend _Toc495318480}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ? operator}}}{\hich\af4\dbch\af4\loch\f4 C has one ternary operator which can be used to conditionally execute a statement.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 test() ? doTrue() : doFalse();\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The first operand can be any scalar type.  It is evaluated.  If the first operand is non-zer\hich\af4\dbch\af4\loch\f4 o, the second expression is evaluated.  If the first operand is zero, the last expression is evaluated.  The result is the evaluated second or third operand, and is not an l-value.\par \hich\af4\dbch\af4\loch\f4 The last two expressions can take on several forms.  If they are both arith\hich\af4\dbch\af4\loch\f4 metic expressions, the usual binary conversion rules are applied, and the result is the common type, regardless of which expression is actually evaluated.  They can also be pointers to the same type, in which case the result is a pointer to the same type.\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4  They can be structures or unions if the types are the same, in which case the result is the same type as the operand.  Both expressions can be of type void, in which case the result is of type void.  Finally, one can be the integer constant zero, and the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 other can be a pointer type.  In that case, the result type matches the pointer.\par \hich\af4\dbch\af4\loch\f4 The conditional operator is right-associative, so the expression\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 a ? b : c ? d : e\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 is interpreted as\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 a ? b : (c ? d : e)\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318481}\hich\af4\dbch\af4\loch\f4 Automatic Type Conversions{\*\bkmkend _Toc495318481}\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318482}\hich\af4\dbch\af4\loch\f4 Assignment Conversions{\*\bkmkend _Toc495318482}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assignment conversions}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 = operator}}}{{\*\bkmkstart conversions}\hich\af4\dbch\af4\loch\f4 When one value is assigned to another, the expression that appears to the right of the assignment operator must be of the same type as the l-value that appears to the left of the operator.\par \hich\af4\dbch\af4\loch\f4 There are several \hich\af4\dbch\af4\loch\f4 cases when the compiler can automatically perform type conversions on the right hand side to force the type to match the type of the l-value.  These are:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab The integer 0 is assigned to a pointer.  In that case, the integer is converted to a long, unsigne\hich\af4\dbch\af4\loch\f4 d value and cast to the appropriate pointer type before storage.\par \par \hich\af4\dbch\af4\loch\f4 2.\tab The l-value and expression are of different arithmetic types.  (The arithmetic types include all integer and floating-point types, as well as enumerations.)  In that case, the expression \hich\af4\dbch\af4\loch\f4 is converted to the type of the l-value as if the expression were explicitly cast to the correct type.  See the section on type casing for details.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 There are many other conversions that are performed as a normal part of evaluating an expression.  These co\hich\af4\dbch\af4\loch\f4 nversions are discussed in the sections that follow.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318483}\hich\af4\dbch\af4\loch\f4 Function Argument Conversions{\*\bkmkend _Toc495318483}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters}}}{\hich\af4\dbch\af4\loch\f4 When parameters are passed to a function for which a prototype exists, the expressions are converted using the same rules that would app\hich\af4\dbch\af4\loch\f4 ly if the expression were being assigned to a variable of the type of the parameter.  If no prototype exists, or if the parameter appears as an optional parameter in a variable length parameter list, the unary conversion rules are applied to the expressio\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318484}\hich\af4\dbch\af4\loch\f4 Unary Conversion Rules{\*\bkmkend _Toc495318484}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ! operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 - operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 + operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ~ operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 * operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ? operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 << operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 >> operator}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unary conversion rules}}}{\hich\af4\dbch\af4\loch\f4 The unary conversion rules are applied to the \hich\af4\dbch\af4\loch\f4 operands of the unary operators !, -, +, ~ and *.  They are also applied to the leftmost operand of the ternary ? : operator, the operands of the bit shift operations << and >>, and to parameters to functions when function prototypes are not used.\par \hich\af4\dbch\af4\loch\f4 Unary co\hich\af4\dbch\af4\loch\f4 nversions are used primarily to reduce the number of forms an operator must handle.  Short integers and char variables are converted to type int; unsigned short and unsigned char are converted to type unsigned.  Float and double values are converted to ty\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 e extended.  Finally, arrays and functions are converted to pointers of the appropriate type.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318485}\hich\af4\dbch\af4\loch\f4 Binary Conversion Rules{\*\bkmkend _Toc495318485}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 binary conversion rules}}}{\hich\af4\dbch\af4\loch\f4 The binary conversion rules are used to ensure that both operands of a binary operator are of the same typ\hich\af4\dbch\af4\loch\f4 e before the operation is performed.  The binary conversion rules are best expressed as a series of rules which are applied in turn until one of the conditions specified by a rule is matched.  Before these rules are applied, the unary conversion rules are\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 applied to each operand.  The binary conversion rules, in the order in which they are applied, are:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab If either operand is not an arithmetic type, or if the operands are of the same type, no conversion is performed.\par \hich\af4\dbch\af4\loch\f4 2.\tab If one operand is of type extended,\hich\af4\dbch\af4\loch\f4  then the other operand is converted to extended.\par \hich\af4\dbch\af4\loch\f4 3.\tab If one operand is of type double, then both operands are converted to extended.\par \hich\af4\dbch\af4\loch\f4 4.\tab If one operand is of type float, then both operands are converted to extended.\par \hich\af4\dbch\af4\loch\f4 5.\tab If one operand is of type unsigned lon\hich\af4\dbch\af4\loch\f4 g, the other operand is converted to unsigned long.\par \hich\af4\dbch\af4\loch\f4 6.\tab If one operand is of type long, the other operand is converted to long.\par \hich\af4\dbch\af4\loch\f4 7.\tab If one operand is of type unsigned int, the other operand is converted to unsigned int.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SANE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 68881}}}{\hich\af4\dbch\af4\loch\f4 ORCA/C will convert all expressions involving a floating-point operand to type extended.  While C traditionally requires this type of conversion, and SANE and the 68881 floating-point processor both make it economical, ANSI C does not require \hich\af4\dbch\af4\loch\f4 all floating-point calculations to be performed in the longest format available.\par \hich\af4\dbch\af4\loch\f4 In the cases where the internal representation of the number remains the same, no actual code is generated by the compiler.  In cases where the internal representation does ch\hich\af4\dbch\af4\loch\f4 ange, the conversions are discussed in detail in the next section, type casting.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318486}\hich\af4\dbch\af4\loch\f4 Type Casting{\*\bkmkend _Toc495318486}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 type casting}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 cast}}}{\hich\af4\dbch\af4\loch\f4 A type cast takes the form of a type name in parentheses immediately before an expression.  The expression is evaluated, and the\hich\af4\dbch\af4\loch\f4 n the value of the expression is changed to match the type specified.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318487}\hich\af4\dbch\af4\loch\f4 Converting Integers to Integers{\*\bkmkend _Toc495318487}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 int}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 unsigned}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 short}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 char}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 long}}}{\hich\af4\dbch\af4\loch\f4 When one integer is converted to another, the new value is the same \hich\af4\dbch\af4\loch\f4 as the old if it can be represented in the new type.\par \hich\af4\dbch\af4\loch\f4 There are several cases where the value of the original integer cannot be represented in the new type.  The first occurs when a signed integer is converted to an unsigned integer of the same size, and th\hich\af4\dbch\af4\loch\f4 e original value is less than zero.  In that case, the new value is 2n+val, where n is 8 for unsigned char; 16 for unsigned short and unsigned int; and 32 for unsigned long; and val is the original value.  Another way of looking at the conversion is that \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he bit pattern does not change, and the signed value becomes the unsigned equivalent of the two's complement bit pattern used to represent the number.\par \hich\af4\dbch\af4\loch\f4 When an unsigned integer is converted to a signed integer of the same size, no conversion is performed.  \hich\af4\dbch\af4\loch\f4 If the unsigned value is too large to represent in the signed form, the result is undefined.  In fact, the result becomes the negative number whose bit pattern is the same as the original unsigned number.\par \hich\af4\dbch\af4\loch\f4 If a shorter value is converted to a longer one, th\hich\af4\dbch\af4\loch\f4 e only case where the arithmetic value cannot be represented is if the shorter value is a signed number, and the value is less than zero, and the longer number is an unsigned number.  In this case, the number is first converted to a signed value of the sa\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 e size as the unsigned type, and then the above rules apply.\par \hich\af4\dbch\af4\loch\f4 If a long value is converted to a shorter one, and the final value cannot be represented exactly, the extra bits are discarded.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318488}\hich\af4\dbch\af4\loch\f4 Converting Floating-Point Values to Integers{\*\bkmkend _Toc495318488}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 float}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 double}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extended}}}{\hich\af4\dbch\af4\loch\f4 Floating-point values are converted to integers by discarding any fraction part, then converting the resulting number to an integer.  If the number is too large or too small to represent as an integer, the res\hich\af4\dbch\af4\loch\f4 ults are unpredictable.  Any of the floating-point formats can be converted to any integer format.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318489}\hich\af4\dbch\af4\loch\f4 Converting Pointers to Integers{\*\bkmkend _Toc495318489}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers}}}{\hich\af4\dbch\af4\loch\f4 In ORCA/C (but not in all implementations of C), pointers are the same size as unsigned long integers.  When\hich\af4\dbch\af4\loch\f4  converting a pointer to an integer, the compiler treats the pointer as if it were an unsigned long integer.  If the pointer is converted to a format other than unsigned long integer, the rules for converting an unsigned long integer to the specified form\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 t apply.\par \hich\af4\dbch\af4\loch\f4 Pointers can be converted to long and unsigned long with no loss of information.  In general, converting a pointer to char, int or short and then converting the result back to a pointer will result in a different, probably incorrect, pointer value\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318490}\hich\af4\dbch\af4\loch\f4 Converting Floating-Point Values to Other Floating-Point Formats{\*\bkmkend _Toc495318490}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 float}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 double}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 extended}}}{\hich\af4\dbch\af4\loch\f4 When converting from float to double or extended, or when converting from double to extended, there is no loss of precision, regardless of the \hich\af4\dbch\af4\loch\f4 input value.\par \hich\af4\dbch\af4\loch\f4 When converting from extended to double or float, or when converting from double to float, several things can happen.  It is possible that the value being converted cannot be represented accurately.  For example, 1.00000000001 can be represent\hich\af4\dbch\af4\loch\f4 ed reasonably well using double or extended, but if the double or extended number is converted to float, loss of precision will result in a float value of 1.0.  It is also possible that the exponent will be too large or too small for the smaller format.  \hich\af4\dbch\af4\loch\f4 I\hich\af4\dbch\af4\loch\f4 f the exponent is too small, underflow results, and the new number is set to zero.  For example, converting the double number 1e-300 to a float number would result in zero.  If the exponent is too large, overflow occurs, and the result is infinity.  For e\hich\af4\dbch\af4\loch\f4 x\hich\af4\dbch\af4\loch\f4 ample, converting 1e300 from double to float would cause an overflow.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318491}\hich\af4\dbch\af4\loch\f4 Converting Integers to Floating-Point Values{\*\bkmkend _Toc495318491}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers}}}{\hich\af4\dbch\af4\loch\f4 All of the integer formats can be converted to any of the floating-point formats.  In some cases, there may be a loss of pre\hich\af4\dbch\af4\loch\f4 cision.  For example, float variables are accurate to about seven decimal digits, so converting the long integer 1000000001 to a float value would result in 1.0e9, not 1.000000001e9.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318492}\hich\af4\dbch\af4\loch\f4 Converting to and from Enumerations{\*\bkmkend _Toc495318492}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 For the purpose of conversions, enume\hich\af4\dbch\af4\loch\f4 ration constants are treated as signed decimal integer constants, and enumeration variables are treated as type int.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318493}\hich\af4\dbch\af4\loch\f4 Converting Pointers to Pointers{\*\bkmkend _Toc495318493}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers}}}{\hich\af4\dbch\af4\loch\f4 Any pointer type can be converted to any other pointer type.  There is no loss of precisio\hich\af4\dbch\af4\loch\f4 n or change in representation, so converting the pointer back to its original type will always result in the original value.  This is not true in all C compilers, so avoid making use of this principle in programs that will be ported to other machines.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318494}\hich\af4\dbch\af4\loch\f4 Conv\hich\af4\dbch\af4\loch\f4 erting Integers to Pointers{\*\bkmkend _Toc495318494}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers}}}{\hich\af4\dbch\af4\loch\f4 The integer 0 is used to represent the null pointer.  It can be converted to a pointer in all implementations of C.\par \hich\af4\dbch\af4\loch\f4 ORCA/C also allows conversion of any other integer value to a pointer.  To make sense on the 65\hich\af4\dbch\af4\loch\f4 816 CPU, the apparent range of the integer should be in the range 0x00000000 to 0x00FFFFFF.  If it is not, using the pointer will generally result in the most significant byte being ignored.  Some tools, however, may crash or access other areas of memory.\par \hich\af4\dbch\af4\loch\f4 No Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  actually has all of the memory represented by these values installed.  It is up to you to ensure that the integer value represents an area of memory that is safe to access.  If the memory does not belong to your program, changing it will caus\hich\af4\dbch\af4\loch\f4 e unpredictable results.  These results could include damaging disk files or crashing the computer.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318495}\hich\af4\dbch\af4\loch\f4 Converting Arrays to Pointers{\*\bkmkend _Toc495318495}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arrays}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sizeof operator}}}{\hich\af4\dbch\af4\loch\f4 An array name is automatically converted to a pointer to the first ele\hich\af4\dbch\af4\loch\f4 ment of the array in all cases except when the array appears as the operand for the sizeof operator.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318496}\hich\af4\dbch\af4\loch\f4 Converting Functions to Pointers{\*\bkmkend _Toc495318496}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pointers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}}}{\hich\af4\dbch\af4\loch\f4 Except in cases where a function name is used to call a function, the function name is \hich\af4\dbch\af4\loch\f4 automatically converted to a pointer to the function.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318497}\hich\af4\dbch\af4\loch\f4 Converting to Void{\*\bkmkend _Toc495318497}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 void}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}}}{\hich\af4\dbch\af4\loch\f4 Any type can be converted to void, although the result cannot be used.  The only place where this conversion is generally used is when a function that n\hich\af4\dbch\af4\loch\f4 ormally returns a value is called in a context where the return value is not needed.  In that case, the conversion serves as a clue to the compiler that the result will not be used.  This has no effect in ORCA/C programs, since the code to use a value ret\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 rned by a function is not generated unless the value is actually used.{\*\bkmkend expressions}{\*\bkmkend conversions}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 conversions}{\rxe conversions}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 expressions{\rxe expressions}}}{\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 18 \endash  Statements\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318498}\hich\af4\dbch\af4\loch\f4 Chapter 18 \endash  Statements{\*\bkmkend _Toc495318498}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318499}\hich\af4\dbch\af4\loch\f4 Compound Statements{\*\bkmkend _Toc495318499}\par }\pard\plain \fi-360\li720\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 compound-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 : '\{' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 initialized-declaration}{\fs18 \hich\af2\dbch\af4\loch\f2  ';'\}* \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \}\hich\af2\dbch\af4\loch\f2 * '\}'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \hich\af2\dbch\af4\loch\f2 [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ';'] |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 labeled-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 compound-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 if-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 while-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 do-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 for-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 switch-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 break-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 continue-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 return-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 goto-statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 segment-\hich\af2\dbch\af4\loch\f2 statement}{\fs18 \hich\af2\dbch\af4\loch\f2  |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 asm-statement }{\fs18 \hich\af2\dbch\af4\loch\f2 |\par \tab }{\i\fs18 \hich\af2\dbch\af4\loch\f2 null-statement\par \hich\af2\dbch\af4\loch\f2 labeled-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :\par \tab \hich\af2\dbch\af4\loch\f2 [}{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  | [case }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2 ] | default] ':' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compound statement}}}{\hich\af4\dbch\af4\loch\f4 Compound statements (also called blocks) are used as function bodies and to group statements together.  Fo\hich\af4\dbch\af4\loch\f4 r example, the for loop loops over a single statement.  By using a compound statement, more than one statement can be executed each time the body of the loop is executed.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 declarations}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 initializers}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 scope}}}{\hich\af4\dbch\af4\loch\f4 The compound statement has tw\hich\af4\dbch\af4\loch\f4 o parts.  The first part is a series of declarations.  If present, variables declared in the block constitute a new scope.  They cannot be used or modified from outside of the compound statement; in fact, they do not exist in memory until the compound sta\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ement is entered.  These variables can be initialized.  If so, the initializations are only carried out if the compound statement is executed from the beginning.  If control is passed to a statement in a compound statement by a goto statement or switch st\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 tement, the variables are not initialized.  Since the variables in a compound statement have a scope limited to the compound statement, names that have been used globally, as parameters, or in the compound statement that the new one is embedded in can be \hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 edefined within the compound statement.  If this is done, the declaration within the compound statement has precedence until control leaves the compound statement.  For example, the following program is legal in C, and will print 1, 2, 1 to the screen, no\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  1, 2, 2.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 int i;\par \par \hich\af2\dbch\af4\loch\f2 i = 1;\par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par \par \hich\af2\dbch\af4\loch\f2    \{\par \hich\af2\dbch\af4\loch\f2    int i;\par \par \hich\af2\dbch\af4\loch\f2    i = 2;\par \hich\af2\dbch\af4\loch\f2    printf("%d\\n", i);\par \hich\af2\dbch\af4\loch\f2    \}\par \par \hich\af2\dbch\af4\loch\f2 printf("%d\\n", i);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 statements}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions}}}{\hich\af4\dbch\af4\loch\f4 The second part of the compound statement is a list of zero or more statements,\hich\af4\dbch\af4\loch\f4  including compound statements.  Unless a statement changes the flow of control, these statements are executed one at a time until all of the statements have been executed.  If the compound statement is the body of a function, control will return to the c\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ller.  If the compound statement is embedded in another compound statement, control will pass to the statement immediately after the compound statement.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 break statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 continue statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 switch statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 goto statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return statement}}}{\hich\af4\dbch\af4\loch\f4 It is legal to leave a compound statement using a goto, break, continue or return statement.  It is also legal to use a goto or switch statement to enter a compound statement without executing some of the statements, although variables\hich\af4\dbch\af4\loch\f4  will not be initialized in that case.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318500}\hich\af4\dbch\af4\loch\f4 Null Statements{\*\bkmkend _Toc495318500}\par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 null-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  ';'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 null statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 while statement}}}{\hich\af4\dbch\af4\loch\f4 Anywhere a statement can be used, a semicolon can be used.  This is the null statement, which is a statement that takes no action an\hich\af4\dbch\af4\loch\f4 d generates no code.  It is generally used in connection with loop statements that have no statement body, such as a loop waiting for a interrupt to take place.  A null statement is shown as the body of a while statement in the example below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 while (NoBur\hich\af2\dbch\af4\loch\f2 glar()) ;\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318501}\hich\af4\dbch\af4\loch\f4 Expression Statements{\*\bkmkend _Toc495318501}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 expressions}}}{\hich\af4\dbch\af4\loch\f4 An expression followed by a semicolon can be used as a statement.  The expression is evaluated, and the result, if any, is discarded.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318502}\hich\af4\dbch\af4\loch\f4 While Statement{\*\bkmkend _Toc495318502}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 while-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  while '(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ')' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 while statement}}}{\hich\af4\dbch\af4\loch\f4 The while statement consists of the reserved word while followed by an expression in parentheses and a statement.  The expression must be an arithmetic type; in particular, it must be of a type such that the comparison (expression) \hich\af4\dbch\af4\loch\f4 != 0 is legal.  If the expression is non-zero, the statement is executed, and the process repeats.  If the expression evaluates to zero, control passes to the statement following the while statement.\par \hich\af4\dbch\af4\loch\f4 The while loop can terminate early due to the effects of\hich\af4\dbch\af4\loch\f4  a return, goto or break statement.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* initialize an array */\par \hich\af2\dbch\af4\loch\f2 i = 0;\par \hich\af2\dbch\af4\loch\f2 while (i < 10)\par \hich\af2\dbch\af4\loch\f2    a[i++] = 0;\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318503}\hich\af4\dbch\af4\loch\f4 Do Statement{\*\bkmkend _Toc495318503}\par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 do-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  do }{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \hich\af2\dbch\af4\loch\f2  while '(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ')' ';'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 do statement}}}{\hich\af4\dbch\af4\loch\f4 The do statement consists of the reserved word do, a statement, \hich\af4\dbch\af4\loch\f4 the reserved word while, and an expression enclosed in parentheses.  The statement is executed.  Next, the expression is evaluated.  The expression must be an arithmetic type; in particular, it must be of a type such that the comparison (expression) != 0 \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 s legal.  If the result is zero, control passes to the statement following the while clause that concludes the do statement.  If the result of the expression is non-zero, the process repeats.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 while statement}}}{\hich\af4\dbch\af4\loch\f4 The difference between the do statement \hich\af4\dbch\af4\loch\f4 and the while statement is that the do statement always executes the statement at least one time.  The while statement checks the loop condition first; if it is zero, the statement never gets executed.\par \hich\af4\dbch\af4\loch\f4 The do loop can terminate early due to the effects of \hich\af4\dbch\af4\loch\f4 a return, goto or break statement.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 do\par \hich\af2\dbch\af4\loch\f2    printf("Please press a key.\\n");\par \hich\af2\dbch\af4\loch\f2 while (! KeyPress());\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318504}\hich\af4\dbch\af4\loch\f4 For Statement{\*\bkmkend _Toc495318504}\par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 for-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  for '(' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ';' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ';' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ')' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 for statement}}}{\hich\af4\dbch\af4\loch\f4 The for statement is designed for use\hich\af4\dbch\af4\loch\f4  when a statement must be executed for a specified number of times.  Because of its design, it can be used in many other situations.  It consists of the reserved word for, followed by three expressions enclosed in parentheses and separated by semicolons, \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 nd a statement.\par \hich\af4\dbch\af4\loch\f4 Each of the expressions is optional.  Execution of the for statement starts by evaluating the first expression, which is normally used to initialize a loop variable.  The second expression is then evaluated.  The expression must be an arith\hich\af4\dbch\af4\loch\f4 metic type; in particular, it must be of a type such that the comparison (expression) != 0 is legal.  If the result is non-zero, the statement is executed.  The third expression, which is generally used to increment the loop counter, is then evaluated, an\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  the process repeats starting at the evaluation of the second expression.  If the second expression evaluates to zero, execution continues with the statement following the body of the for statement.\par \hich\af4\dbch\af4\loch\f4 If the second statement is not coded, the compiler assume\hich\af4\dbch\af4\loch\f4 s that is always evaluates to a non-zero value.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* initialize an array */\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 100; ++i)\par \hich\af2\dbch\af4\loch\f2    a[i] = i;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 while statement}}}{\hich\af4\dbch\af4\loch\f4 Another way to think of the for statement is that it is roughly equivalent to a while statement with the expressions \hich\af4\dbch\af4\loch\f4 placed in certain locations.  The for statement\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (exp1; exp2; exp3) statement;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 is equivalent to the statement\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\{\par \hich\af2\dbch\af4\loch\f2 exp1;\par \hich\af2\dbch\af4\loch\f2 while (exp2) \{\par \hich\af2\dbch\af4\loch\f2    statement;\par \hich\af2\dbch\af4\loch\f2    exp3;\par \hich\af2\dbch\af4\loch\f2    \}\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The one exception is the way the continue statement works.  In the for statement, the \hich\af4\dbch\af4\loch\f4 continue statement jumps to exp3; in the while statement, the continue statement jumps to the end of the block, just past exp3.\par \hich\af4\dbch\af4\loch\f4 The for loop can terminate early due to the effects of a goto, return or break statement in the body of the loop.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318505}\hich\af4\dbch\af4\loch\f4 If Statement{\*\bkmkend _Toc495318505}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 i\hich\af2\dbch\af4\loch\f2 f-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  if '(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ')' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \hich\af2\dbch\af4\loch\f2  \{else }{\i\fs18 \hich\af2\dbch\af4\loch\f2 statement}{\fs18 \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 if statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 else statement}}}{\hich\af4\dbch\af4\loch\f4 The if statement is used to conditionally execute a statement.  The expression is evaluated.  The expression must be an arithmetic type; in particul\hich\af4\dbch\af4\loch\f4 ar, it must be of a type such that the comparison (expression) != 0 is legal.  If the result is non-zero, the statement following the condition is executed.  If the result is zero, the statement is not executed.\par \hich\af4\dbch\af4\loch\f4 The optional else clause is used to provide \hich\af4\dbch\af4\loch\f4 a second statement that will be executed if the conditional expression evaluates to zero.  It is not executed if the expression yields a non-zero result.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 1; i <= 10; ++i)\par \hich\af2\dbch\af4\loch\f2    if (i & 1)\par \hich\af2\dbch\af4\loch\f2       printf("%d is odd.\\n", i);\par \hich\af2\dbch\af4\loch\f2    else\par \hich\af2\dbch\af4\loch\f2       printf("%d is \hich\af2\dbch\af4\loch\f2 even.\\n", i);\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318506}\hich\af4\dbch\af4\loch\f4 Goto Statement{\*\bkmkend _Toc495318506}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 goto-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  goto }{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  ';'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 goto statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 labels}}}{\hich\af4\dbch\af4\loch\f4 The goto statement is used to transfer control to another statement.  The identifier is a named label.  The label must appear on exactly one statement \hich\af4\dbch\af4\loch\f4 somewhere in the current function body.  The next statement executed is the statement that the label appears on.\par \hich\af4\dbch\af4\loch\f4 It is legal to place a label on a statement and not place a goto statement in the function that refers to that label.  It is not legal, however\hich\af4\dbch\af4\loch\f4 , to try to branch to a label that does not exist, or to place two labels with the same name in the same function, whether or not a goto statement exists that refers to the duplicate label.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318507}\hich\af4\dbch\af4\loch\f4 Switch Statement{\*\bkmkend _Toc495318507}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 switch-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  switch '(' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \hich\af2\dbch\af4\loch\f2  ')' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 stat\hich\af2\dbch\af4\loch\f2 ement}{\fs18 \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 switch statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 case label}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 default label}}}{\hich\af4\dbch\af4\loch\f4 The switch statement is used to choose from a list of statements.  The expression, which must yield an integer value, is evaluated.  The statement that follows is generally a compound\hich\af4\dbch\af4\loch\f4  statement.  Conceptually, it is scanned for a case label with a value that matches the value generated by the expression.  If such a value is found, control is passed to the statement following the case label.  If there is no match, and there is a defaul\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  label, the statement after the default label is executed.  If there is no match, and there is no default label, control passes to the statement after the switch statement.\par \hich\af4\dbch\af4\loch\f4 There are some restrictions on the labels in the switch statement body.  The case l\hich\af4\dbch\af4\loch\f4 abels must have constants that are the same type as the expression after the usual unary conversions are applied to both.  For example, it is not legal to use a case label with an int constant if the expression results in a long int value.  Duplicate labe\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 s are not permitted.  This means that two case statements cannot have constant expressions that result in the same value, and two default labels cannot appear in the body of the statement.  Case labels and the default label can only appear in the body of \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4  switch statement.\par \hich\af4\dbch\af4\loch\f4 After control is passed to one of the statements in the switch statement, execution continues as if a goto had been used to branch to the statement.  For example, the following statements would print five lines on the screen.  The first \hich\af4\dbch\af4\loch\f4 would have five asterisks, the second would have four, and so on.  The point is that in some languages, execution would be transferred out of the switch statement when the next case label was encountered; this is not true in C.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 1; i <= 5; ++i) \{\par \hich\af2\dbch\af4\loch\f2    switch (i) \{\par \hich\af2\dbch\af4\loch\f2       case 1: printf("*");\par \hich\af2\dbch\af4\loch\f2       case 2: printf("*");\par \hich\af2\dbch\af4\loch\f2       case 3: printf("*");\par \hich\af2\dbch\af4\loch\f2       case 4: printf("*");\par \hich\af2\dbch\af4\loch\f2       case 5: printf("*");\par \hich\af2\dbch\af4\loch\f2       \}\par \hich\af2\dbch\af4\loch\f2    printf("\\n");\par \hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 As the example shows, execution falls through from the statements marked b\hich\af4\dbch\af4\loch\f4 y one case label to the next group of statements.  It is customary in C to use the break statement at the end of each of the groups of statements.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 1; i <= 5; ++i) \{\par \hich\af2\dbch\af4\loch\f2    switch (i) \{\par \hich\af2\dbch\af4\loch\f2       case 1: printf("*");\par \hich\af2\dbch\af4\loch\f2               break;\par \hich\af2\dbch\af4\loch\f2       case 2: pri\hich\af2\dbch\af4\loch\f2 ntf("**");\par \hich\af2\dbch\af4\loch\f2               break;\par \hich\af2\dbch\af4\loch\f2       case 3: printf("***");\par \hich\af2\dbch\af4\loch\f2               break;\par \hich\af2\dbch\af4\loch\f2       case 4: printf("****");\par \hich\af2\dbch\af4\loch\f2               break;\par \hich\af2\dbch\af4\loch\f2       case 5: printf("*****");\par \hich\af2\dbch\af4\loch\f2       \}\par \hich\af2\dbch\af4\loch\f2    printf("\\n");\par \hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The goto and return statements can also be used to leave the \hich\af4\dbch\af4\loch\f4 body of the switch statement before the last statement is executed.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318508}\hich\af4\dbch\af4\loch\f4 Break and Continue{\*\bkmkend _Toc495318508}\par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 break-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  break ';'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 continue-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  continue ';'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par {\*\bkmkstart break}\hich\af4\dbch\af4\loch\f4 The break and continue statements are used to exit a loop early or branch to the end of the loop body.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 for statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 do statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 while statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 switch statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 case label}}}{\hich\af4\dbch\af4\loch\f4 The break statement can be used in the body of a while, do, for or switch statement.  When it is encountered, control is transferred to the statemen\hich\af4\dbch\af4\loch\f4 t after the while, do, for or switch statement.  For example, break statements can be used to cause the C switch statement to work like the Pascal case statement, as shown in the section above.\par \hich\af4\dbch\af4\loch\f4 The continue statement is used to branch to the end of a while\hich\af4\dbch\af4\loch\f4 , do or for loop.  Conceptually, the continue statement does a goto to the end of the loop body.\par \hich\af4\dbch\af4\loch\f4 The easiest way to understand the break and continue statements completely is to look at the equivalent goto statements.  The following four statement models s\hich\af4\dbch\af4\loch\f4 how the statements which use break and continue statements.  In all of the statements except switch, there is a label called C.  A continue statement in the body of the loop (called body in the examples) is equivalent to a goto to the label C.  In all of \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he statements, there is also a label called B.  A break statement in the loop body is completely equivalent to goto B.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 while (expression) \{body; C: ;\} B: ;\par \hich\af2\dbch\af4\loch\f2 do \{body; C: ;\} while (expression); B: ;\par \hich\af2\dbch\af4\loch\f2 for (expression; expression; expression) \{body; C: ;\} B: ;\par \hich\af2\dbch\af4\loch\f2 switch (expression) \{body;\} B: ;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If a break or continue statement appears within nested statements, it applies to the most recent enclosing statement.  In the following code fragment, continue and break statements appear inside a switch statement, which \hich\af4\dbch\af4\loch\f4 is in turn inside a for loop.  The break statement exits the switch statement.  Since the continue statement has no meaning in the switch statement, it applies to the for statement.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i)\par \hich\af2\dbch\af4\loch\f2    switch (i) \{\par \hich\af2\dbch\af4\loch\f2       1: 2: 3: 5: 7:\par \hich\af2\dbch\af4\loch\f2          pr\hich\af2\dbch\af4\loch\f2 intf("%d is prime.\\n", i);\par \hich\af2\dbch\af4\loch\f2          continue;\par \hich\af2\dbch\af4\loch\f2       9:\par \hich\af2\dbch\af4\loch\f2          printf("%d is odd.\\n", i);\par \hich\af2\dbch\af4\loch\f2          break;\par \hich\af2\dbch\af4\loch\f2       default:}{\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 default label}}}{\par \hich\af2\dbch\af4\loch\f2          printf("%d is even.\\n", i);\par \hich\af2\dbch\af4\loch\f2       \}{\*\bkmkend break}}{\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 break statement}{\rxe break}}}{\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs18\loch\af2\hich\af2\dbch\f4\cgrid {\xe \hich\af2\dbch\af4\loch\f2 continue statement{\rxe bre\hich\af2\dbch\af4\loch\f2 ak}}}{\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318509}\hich\af4\dbch\af4\loch\f4 Return Statement{\*\bkmkend _Toc495318509}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 return-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  return \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 expression}{\fs18 \}\hich\af2\dbch\af4\loch\f2  ';'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 functions\:return value}}}{\hich\af4\dbch\af4\loch\f4 The return statement returns control to the function that called the current function.  If the current function is\hich\af4\dbch\af4\loch\f4  main, control is returned to the program launcher that was used to execute the program.\par \hich\af4\dbch\af4\loch\f4 If the return statement is followed by an expression, that expression is evaluated.  The type of the expression must be compatible with the type of the function in the\hich\af4\dbch\af4\loch\f4  same sense that an expression must be compatible with the l-value when the assignment operator is used.  The value of the expression is returned to the caller as the return value of the function.\par \hich\af4\dbch\af4\loch\f4 If a function has a return type, but control is returned by\hich\af4\dbch\af4\loch\f4  a return statement that does not have an expression, the returned value is unpredictable.\par \hich\af4\dbch\af4\loch\f4 If the function executes to the end of the compound statement without encountering a return statement, the effect is the same as if a return statement with no expres\hich\af4\dbch\af4\loch\f4 sion were encountered.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318510}\hich\af4\dbch\af4\loch\f4 Segment Statement{\*\bkmkend _Toc495318510}\par }\pard\plain \fi-540\li900\keepn\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 segment-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  segment }{\i\fs18 \hich\af2\dbch\af4\loch\f2 string-constant}{\fs18 \hich\af2\dbch\af4\loch\f2  \{',' dynamic\} ';'\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 segment statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memory model}}}{\hich\af4\dbch\af4\loch\f4 The segment statement is used to break a program into two or more load segments.  It can be used with eit\hich\af4\dbch\af4\loch\f4 her the large or small memory model.  The affect is to cause all functions defined after the segment statement to appear in a new load segment.  To understand what this does, we will look at the memory models used on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  in detail.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memory}{\txe \hich\af4\dbch\af4\loch\f4 see also small memory model}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 memory{\txe see also large memory model}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 large memory model}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe \hich\af4\dbch\af4\loch\f4 small memory model}}{\hich\af4\dbch\af4\loch\f4 In any program compiled by ORCA/C, memory is allocated for up to five different purposes.  Local variables are allocate\hich\af4\dbch\af4\loch\f4 d from a stack frame allocated from bank zero when the program starts to execute.  Dynamic memory can also be allocated at run time by using the library functions calloc and malloc.  All functions and libraries are placed in a static code segment; this se\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4 ment is called the blank segment, and has no name.  With the small memory model, global scalars, arrays and structures are also placed in the blank segment.  If the large memory model is used, global scalars are placed in a separate segment called ~GLOBAL\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 , and global arrays and structures are placed in a third segment called ~ARRAYS.  Like the blank segment, ~GLOBALS and ~ARRAYS are static segments.\par \hich\af4\dbch\af4\loch\f4 The blank segment and the ~GLOBALS segment are each limited to 64K bytes in length; only the ~ARRAYS segment\hich\af4\dbch\af4\loch\f4  can be larger than 64K bytes.  If the program is larger than 64K bytes in length, the small memory model cannot be used with a single segment.  When this happens, there are two alternatives.  If the program has many large arrays, the memorymodel directiv\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 , described in Chapter 12, can be used to create the ~GLOBALS and ~ARRAYS segments.  This causes the compiler to generate larger, slower code to access the arrays, however.  If the program does not use a large number of arrays or structures, but has sever\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 l thousand lines of C code, the problem may be that the code itself exceeds 64K bytes.  Using the large memory model will not help in that case.  What is needed is a way to cause some of the functions to be placed in a separate static segment.  The segmen\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  statement does just that:  the operand is a string constant that becomes the name of a new segment.  All functions defined after the segment statement are placed in the new segment.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 segment "parser"\tab /* place subroutines in the parser segment */\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 st\hich\af4\dbch\af4\loch\f4 atic segments}}}{\hich\af4\dbch\af4\loch\f4 You can create as many static segments as you like.  There are advantages and disadvantages to using a large number of segments.  On computers with small amounts of memory, or where other programs have fragmented memory, small segments are \hich\af4\dbch\af4\loch\f4 more likely to load, since there is a better chance that a piece of memory large enough to hold the segment will be found by the loader.  A program made up of several segments, however, creates a large number of inter-segment references in the relocation \hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 ictionary.  These relocation records take up room on the disk, and slow down the loader.\par \hich\af4\dbch\af4\loch\f4 The functions that make up a particular segment do not have to appear in the same source file, nor do they have to appear next to each other in a source file.  During \hich\af4\dbch\af4\loch\f4 the link process, the linker combines all of the functions that have the same segment name into the same load segment, regardless of the order they appear in the source program.\par \hich\af4\dbch\af4\loch\f4 After using the segment statement, if you wish to place a function in the blan\hich\af4\dbch\af4\loch\f4 k segment, code a segment name with ten spaces.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 dynamic segments}}}{\hich\af4\dbch\af4\loch\f4 The segment statement can also be used to create dynamic segments.  A dynamic segment is not loaded until a call is made to one of the functions in the segment.  Once a call is made t\hich\af4\dbch\af4\loch\f4 o a function in the dynamic segment, the segment remains in memory until an explicit call is made to the loader to unload the segment.  If more than one segment statement is used to create a dynamic segment, each of the segment statements must specify tha\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  the segment is dynamic.  If a single function that is not dynamic appears in the load segment, the entire load segment will become a static load segment.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 segment "initial", dynamic\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 If you have a choice between using the large memory model or the segment\hich\af4\dbch\af4\loch\f4  statement (as might be the case in a program with several large arrays and a lot of executable code, it is best to use the segment directive, rather than the large memory model, since the compiler generates smaller, faster code when the small memory mode\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4  is used.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318511}\hich\af4\dbch\af4\loch\f4 Asm Statement{\*\bkmkend _Toc495318511}\par }\pard\plain \fi-540\li900\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\i\fs18 \hich\af2\dbch\af4\loch\f2 asm-statement}{\fs18 \hich\af2\dbch\af4\loch\f2 :  asm '\{' \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 asm-line}{\fs18 \}\hich\af2\dbch\af4\loch\f2 * '\}' ';'\par }{\i\fs18 \hich\af2\dbch\af4\loch\f2 asm-line}{\fs18 \hich\af2\dbch\af4\loch\f2 :  \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 identifier}{\fs18 \hich\af2\dbch\af4\loch\f2  ':'\} }{\i\fs18 \hich\af2\dbch\af4\loch\f2 op-code}{\fs18 \hich\af2\dbch\af4\loch\f2  \{}{\i\fs18 \hich\af2\dbch\af4\loch\f2 operand}{\fs18 \}\hich\af2\dbch\af4\loch\f2  \{';' }{\i\fs18 \hich\af2\dbch\af4\loch\f2 comment}{\fs18 \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 asm statement}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assembly language}}}{\hich\af4\dbch\af4\loch\f4 The asm statement allows you to code assembly language statements in the body o\hich\af4\dbch\af4\loch\f4 f a function.  The syntax for these statement varies a bit from the syntax used by assemblers; these differences are due to the C language itself.\par \hich\af4\dbch\af4\loch\f4 Each of the assembly language statements consists of an operation code.  The operation codes are the standard\hich\af4\dbch\af4\loch\f4  three-letter 65816 operation code mnemonics found in standard references for the 65816.  The operation code can be specified in uppercase, lowercase, or a mix of cases.  They will not be described in this manual.\par \hich\af4\dbch\af4\loch\f4 Each operation code may be preceded by a l\hich\af4\dbch\af4\loch\f4 abel.  Unlike assemblers, this label is formatted like a C label.  The name of the label follows the same rules as any C identifier, and is case sensitive.  Like labels in C, it must be followed by a colon.  The label may be used to identify branch points\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  data locations, or statements.\par \hich\af4\dbch\af4\loch\f4 Many 65816 operations require an operand.  This operand is coded after the operation code.  It follows the same syntax as is used by assemblers, with a few minor exceptions.  First, spaces are allowed in the operand.  Second\hich\af4\dbch\af4\loch\f4 , while expressions may be used, they are limited in form.  Expressions must be constant expressions or global or local variables.  Global and local variable names may be followed by a + or - operator and a constant expression.  Global labels are treated \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 s absolute addresses if the small memory model is in use, and long addresses if the large memory model is in use, unless the addressing mode is modified.  (Modification of addressing modes is covered below.)  Local variables are treated as direct page loc\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 tions.  If the size of all of the local variables is larger than 255 bytes, this can cause errors in some cases.  The mini-assembler does not detect this error.  For that reason, it is up to the programmer to ensure that the size of local variables is kep\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  to a minimum if they will be used as the operands of assembly language statements.\par \hich\af4\dbch\af4\loch\f4 The constant expressions used in operands follow the rules for constant expressions in C.  All operators and constant operands that can appear in a C constant expression ar\hich\af4\dbch\af4\loch\f4 e also allowed in the operand field of an assembly language statement.  In particular, note that integer constants use the C syntax for hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  and octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  numbers, not the syntax found in most books on assembly language\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 When an expression is used in any of the operands, you can force the value to be one byte (forcing direct page addressing), two bytes (forcing absolute addressing) or three bytes (forcing long addressing).  This will override the default addressing mode.\hich\af4\dbch\af4\loch\f4   To force a particular addressing mode, precede the expression with one of the characters shown in the table below.\par \par }\pard\plain \s31\qj\li1440\ri3600\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2880\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 character\tab addressing mode\par }\pard\plain \s16\qj\li1440\ri3600\sl223\slmult1\keepn\widctlpar\tx2880\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 <\tab direct page\par \hich\af4\dbch\af4\loch\f4 |\tab absolute\par }\pard \s16\qj\li1440\ri3600\sl223\slmult1\widctlpar\tx2880\adjustright {\hich\af4\dbch\af4\loch\f4 >\tab long absolute\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The syntax for the various addressing modes is shown in the table belo\hich\af4\dbch\af4\loch\f4 w.  For descriptions on what the addressing modes do, see any of the reference books on the 65816.  For addressing modes that have the same physical format, the actual addressing mode used depends on the value of the expression and the kinds of labels use\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 , as described earlier.  For example, an operand value of 255 would trigger direct page addressing, 1000 would trigger absolute addressing, and 100000 would trigger absolute long addressing.  When a register is shown, such as the A in the accumulator addr\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 ssing mode, it is shown in uppercase, but may be coded in uppercase or lowercase in a program.\par \hich\af4\dbch\af4\loch\f4 There is one restriction on relative branch operands that does not apply to the other instructions.  Relative branches must be made to a label; you cannot code a\hich\af4\dbch\af4\loch\f4  constant value, nor can you code a label plus or minus some offset.\par \par }\pard\plain \s31\qj\li1440\ri1800\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 addressing mode\tab format\par }\pard\plain \s16\qj\li1440\ri1800\sl223\slmult1\widctlpar\tx4320\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 absolute\tab expression\par \hich\af4\dbch\af4\loch\f4 absolute indexed by X\tab expression,X\par \hich\af4\dbch\af4\loch\f4 absolute indexed by Y\tab expression,Y\par \hich\af4\dbch\af4\loch\f4 absolute indexed indirect\tab (expression,X)\par \hich\af4\dbch\af4\loch\f4 absolute indirect\tab (expression)\par \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 bsolute indirect long\tab [expression]\par \hich\af4\dbch\af4\loch\f4 absolute long\tab expression\par \hich\af4\dbch\af4\loch\f4 absolute long indexed by X\tab expression,X\par \hich\af4\dbch\af4\loch\f4 accumulator\tab A\par \hich\af4\dbch\af4\loch\f4 block move\tab expression,expression\par \hich\af4\dbch\af4\loch\f4 direct page\tab expression\par \hich\af4\dbch\af4\loch\f4 direct page indexed by X\tab expression,X\par \hich\af4\dbch\af4\loch\f4 direct page indexed by Y\tab expression,Y\par \hich\af4\dbch\af4\loch\f4 direct pag\hich\af4\dbch\af4\loch\f4 e indirect\tab (expression)\par \hich\af4\dbch\af4\loch\f4 direct page indexed indirect\tab (expression,X)\par \hich\af4\dbch\af4\loch\f4 direct page indirect long\tab [expression]\par \hich\af4\dbch\af4\loch\f4 direct page indirect indexed\tab (expression),Y\par \hich\af4\dbch\af4\loch\f4 direct page indirect long indexed\tab [expression],Y\par \hich\af4\dbch\af4\loch\f4 immediate\tab #expression\par \hich\af4\dbch\af4\loch\f4 implied\tab (no operand)\par \hich\af4\dbch\af4\loch\f4 relative addr\hich\af4\dbch\af4\loch\f4 essing\tab expression\par \hich\af4\dbch\af4\loch\f4 stack relative\tab expression,S\par \hich\af4\dbch\af4\loch\f4 stack relative indirect indexed\tab (expression,S),Y\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The operand, or operation code if there is no operand, may be followed by a semicolon.  If so, this signals the start of an assembly language comment, and all c\hich\af4\dbch\af4\loch\f4 haracters from the semicolon to the end of the line are ignored.\par \hich\af4\dbch\af4\loch\f4 Preprocessor macros are still processed within the assembly language statements, and preprocessor macros can be used in the asm statement.  The syntactic rules for using the preprocessor and \hich\af4\dbch\af4\loch\f4 macros in the assembly statement are exactly the same as they are in any other location in the C program.  C style comments can also appear the the asm statement.\par \hich\af4\dbch\af4\loch\f4 There are three directives supported by the built-in assembler.  They are dcb, dcw, and dcl, \hich\af4\dbch\af4\loch\f4 which create a byte, word or long word (long int) variable, respectively.  The operand for each of these directives is an expression which is evaluated and used to initialize the space.\par \hich\af4\dbch\af4\loch\f4 The short example shown below loads a C integer value i, counts the bi\hich\af4\dbch\af4\loch\f4 ts that are set, and stores the result in the C integer variable j.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 asm \{\par \tab \tab \hich\af2\dbch\af4\loch\f2 lda\tab i\par \tab \tab \hich\af2\dbch\af4\loch\f2 ldx\tab #0\par \tab \tab \hich\af2\dbch\af4\loch\f2 ldy\tab #16\par \tab \hich\af2\dbch\af4\loch\f2 lb1:\tab lsr\tab a\par \tab \tab \hich\af2\dbch\af4\loch\f2 bcc\tab lb2\par \tab \tab \hich\af2\dbch\af4\loch\f2 inx\par \tab \hich\af2\dbch\af4\loch\f2 lb2:\tab dey\par \tab \tab \hich\af2\dbch\af4\loch\f2 bne\tab lb1\par \tab \tab \hich\af2\dbch\af4\loch\f2 stx\tab j\par \hich\af2\dbch\af4\loch\f2    \}\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Chapter 19 \endash  Libraries\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318512}\hich\af4\dbch\af4\loch\f4 Chapter 19 \endash  Libraries{\*\bkmkend _Toc495318512}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318513}\hich\af4\dbch\af4\loch\f4 Overview of the Libraries{\*\bkmkend _Toc495318513}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart libraries2}\hich\af4\dbch\af4\loch\f4 ORCA/C comes with a powerful set of library\hich\af4\dbch\af4\loch\f4  functions.  Most of these are standard libraries that are provided in any good C compiler.  A few are unique to ORCA/C or to implementations of C on Apple computers.  These functions have been added to make it easier to deal with the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.\par \hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 he standard C libraries are listed in alphabetical order for easy reference.  This layout is not the best for learning to use the libraries, but it makes it easy to look up a library function to see exactly how it is implemented in ORCA/C.  If you are new\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 to C, the book that you are using to learn C should give a more tutorial introduction to the libraries.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318514}\hich\af4\dbch\af4\loch\f4 The Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  Toolbox{\*\bkmkend _Toc495318514}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\hich\af4\dbch\af4\loch\f4 In addition to the standard C libraries described in the next section, ORCA/C comes with a complete set of tool i\hich\af4\dbch\af4\loch\f4 nterface files for the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.  These libraries have been licensed from Apple Computer, inferring that ORCA/C is compatible with source code written for other compilers on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  These libraries are organized as one interface file per\hich\af4\dbch\af4\loch\f4  tool.  Because the names of the tools, and in fact the tools that are available, are constantly changing on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , we will not list the library names here.  Instead, catalog the folder ORCACDefs in the library folder to find the names of the curr\hich\af4\dbch\af4\loch\f4 ent tool interface files.  These interface files are ASCII files, so you can edit, print, or even change them, if necessary.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318515}\hich\af4\dbch\af4\loch\f4 System Functions{\*\bkmkend _Toc495318515}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The run-time library for ORCA/C contains a number of functions that can be manipulated directly from ORCA/C.  In s\hich\af4\dbch\af4\loch\f4 ome cases, these are functions normally called by the C startup code, or for some other internal purpose, that perform some service you may need in an unusual circumstance.  In these cases, you can declare the function as extern and call it from within yo\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 r C program.  In other cases, the default action may not be what you want; for example, you may want to intercept run-time errors, displaying them in a dialog or trapping them for internal handling.  In these situations, you can define the function in you\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  program, and ORCA/C will use your version rather than the one from the library.\par \hich\af4\dbch\af4\loch\f4 Source code for all of these subroutines can be found in }{\ul \hich\af4\dbch\af4\loch\f4 ORCA Sublib Source}{\hich\af4\dbch\af4\loch\f4 , a separate package containing the source code for the ORCA subroutine libraries.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SysCharErrout}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SysCharErrout}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SysCharErrout (char);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Writes a character to error out.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SysCharOut}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SysCharOut}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SysCharOut (char);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Writes a character to standard out.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SysIOShutDown}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SysIOShutDown}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SysI\hich\af2\dbch\af4\loch\f2 OShutDown (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Closes any files opened by SysIOStartup.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SysIOStartup}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SysIOStartup}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SysIOStartup (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Starts the I/O system using the files in prefixes 10, 11 and 12.  If the files have already been opened, the existing open \hich\af4\dbch\af4\loch\f4 file is used, and the file is not closed when the program exits.  If prefix 10 is .CONSOLE, }{\fs18 \hich\af2\dbch\af4\loch\f2 DRead}{\hich\af4\dbch\af4\loch\f4  calls are used to read lines of text, allowing editing.  In this case, you can use }{\outl \hich\af4\dbch\af4\loch\f4 RETURN}{\hich\af4\dbch\af4\loch\f4  to finish a line, or }{\outl \hich\af4\dbch\af4\loch\f4 CTRL}{\-\hich\af4\dbch\af4\loch\f4 @ or command\-. to signal an end of file.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 ysKeyAvail}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SysKeyAvail}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal int SysKeyAvail (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Returns 1 (TRUE) if there is an input character available, and 0 (FALSE) if there is not.\par \hich\af4\dbch\af4\loch\f4 If a character has been put back with a call to }{\fs18 \hich\af2\dbch\af4\loch\f2 SysPutback}{\hich\af4\dbch\af4\loch\f4 , and has not been read by a subsequent\hich\af4\dbch\af4\loch\f4  call to }{\fs18 \hich\af2\dbch\af4\loch\f2 SysKeyin}{\hich\af4\dbch\af4\loch\f4 , the result is TRUE.  The rest of the discussion assumes there is no character in the putback buffer.\par \hich\af4\dbch\af4\loch\f4 If input is redirected from a file, this function is equivalent to a test for end of file, returning the opposite result.\par \hich\af4\dbch\af4\loch\f4 For input from\hich\af4\dbch\af4\loch\f4  .CONSOLE, if there is remaining input in the line buffer, TRUE is returned.  If not, and if the Event Manager is active, the result is TRUE if there is a keypress or auto key event available, and FALSE if not.  If the Event Manager is not active, the res\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 lt is TRUE if bit 7 of 0x0C0000 is set, and FALSE if not.  (0x0C0000 is the hardware keyboard input location.)\par \hich\af4\dbch\af4\loch\f4 Note:  If input is from .CONSOLE, the fact that this function returns TRUE is }{\i \hich\af4\dbch\af4\loch\f4 not}{\hich\af4\dbch\af4\loch\f4  a guarantee that a call to }{\fs18 \hich\af2\dbch\af4\loch\f2 SysKeyin}{\hich\af4\dbch\af4\loch\f4  will return immediately, si\hich\af4\dbch\af4\loch\f4 nce }{\fs18 \hich\af2\dbch\af4\loch\f2 SysKeyin}{\hich\af4\dbch\af4\loch\f4  would wait for an entire line to be typed.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SysKeyin}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SysKeyin}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal char SysKeyin (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Reads a character from standard in.  If an end of file condition occurs, (char) 0 is returned.\par \hich\af4\dbch\af4\loch\f4 If input is from .CONSOLE, an entire line i\hich\af4\dbch\af4\loch\f4 s read on the first call to this subroutine, and remaining characters are returned on subsequent calls until the line is exhausted; another call will then read in a new line.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SysPutback}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SysPutback}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SysPutback (char);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Places a char\hich\af4\dbch\af4\loch\f4 acter in a one-character putback buffer.  This character will be the next character returned by }{\fs18 \hich\af2\dbch\af4\loch\f2 SysKeyin}{\hich\af4\dbch\af4\loch\f4 , and }{\fs18 \hich\af2\dbch\af4\loch\f2 SysKeyAvail}{\hich\af4\dbch\af4\loch\f4  will return TRUE until the buffer is emptied.\par \hich\af4\dbch\af4\loch\f4 If another call is made to }{\fs18 \hich\af2\dbch\af4\loch\f2 SysPutback}{\hich\af4\dbch\af4\loch\f4  before the first character is used, the original c\hich\af4\dbch\af4\loch\f4 haracter is lost.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemEnvironmentInit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemEnvironmentInit}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemEnvironmentInit (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine initializes global variables used by the compilers and their libraries.  It should be called by programs that are not sta\hich\af4\dbch\af4\loch\f4 rted in the normal way as one step in initializing the run-time environment.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemError}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemError}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemError (int);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 When a run-time error occurs, libraries call }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemError}{\hich\af4\dbch\af4\loch\f4 .  By defining your own version of }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemError}{\hich\af4\dbch\af4\loch\f4 , you c\hich\af4\dbch\af4\loch\f4 an intercept and handle run-time errors within your own program.  You can also call }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemError}{\hich\af4\dbch\af4\loch\f4  from within your own program if your own program needs to report an error.\par \hich\af4\dbch\af4\loch\f4 By default, }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemError}{\hich\af4\dbch\af4\loch\f4  calls two other library subroutines, }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemPrintError}{\hich\af4\dbch\af4\loch\f4  and }{\fs18 \hich\af2\dbch\af4\loch\f2 Sys\hich\af2\dbch\af4\loch\f2 temErrorLocation}{\hich\af4\dbch\af4\loch\f4 , to actually handle the error.  If you write your own version of }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemError}{\hich\af4\dbch\af4\loch\f4 , you may want to call one or both of these subroutines for some or all of the errors.\par \hich\af4\dbch\af4\loch\f4 The table below shows the various error numbers currently reported by the ru\hich\af4\dbch\af4\loch\f4 n-time libraries.  Some of these errors are used by only one of the ORCA languages, so not all of them are actually possible from within a program written entirely in C.\par \par }\pard\plain \s31\qj\li1440\ri1800\sl223\slmult1\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2880\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Error Number\tab Error\par }\pard\plain \s16\qj\li1440\ri1800\sl223\slmult1\keepn\widctlpar\tx2880\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 1\tab Subrange exceeded\par \hich\af4\dbch\af4\loch\f4 2\tab File not open\par \hich\af4\dbch\af4\loch\f4 3\tab Read while at end of file\par \hich\af4\dbch\af4\loch\f4 4\tab \hich\af4\dbch\af4\loch\f4 I/O error\par \hich\af4\dbch\af4\loch\f4 5\tab Out of memory\par \hich\af4\dbch\af4\loch\f4 6\tab EOLN while at end of file\par \hich\af4\dbch\af4\loch\f4 7\tab Set overflow\par \hich\af4\dbch\af4\loch\f4 8\tab Jump to undefined case statement label\par \tab \hich\af4\dbch\af4\loch\f4 This error cannot be recovered from!\par \hich\af4\dbch\af4\loch\f4 9\tab Integer math error\par \hich\af4\dbch\af4\loch\f4 10\tab Real math error\par \hich\af4\dbch\af4\loch\f4 11\tab Underflow\par \hich\af4\dbch\af4\loch\f4 12\tab Overflow\par \hich\af4\dbch\af4\loch\f4 13\tab Divide by zero\par \hich\af4\dbch\af4\loch\f4 14\tab Inexact\par \hich\af4\dbch\af4\loch\f4 15\tab Stack overf\hich\af4\dbch\af4\loch\f4 low\par }\pard \s16\qj\li1440\ri1800\sl223\slmult1\widctlpar\tx2880\adjustright {\hich\af4\dbch\af4\loch\f4 16\tab Stack error\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemErrorLocation}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemErrorLocation}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemErrorLocation (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine is called by }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemError}{\hich\af4\dbch\af4\loch\f4  when a run-time error is reported.  Normally, this subroutine prints any traceback information record\hich\af4\dbch\af4\loch\f4 ed due to the debug pragma, then shuts down the program.  This subroutine can be called from within a C program to print traceback information during the debug cycle, or replaced with a different subroutine that either handles an error and recovers from i\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 , or shuts down the system in a different way.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemMinStack}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemMinStack}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemMinStack (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine finds the start of the segment containing the return address, setting the variable }{\fs18 \hich\af2\dbch\af4\loch\f2 ~MinStack}{\hich\af4\dbch\af4\loch\f4  to this value.  It s\hich\af4\dbch\af4\loch\f4 hould be the very first subroutine called by programs that are not started in the normal way, assuming the program owns the stack frame.  }{\fs18 \hich\af2\dbch\af4\loch\f2 ~MinStack}{\hich\af4\dbch\af4\loch\f4  must be set before calling }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemSANEInit}{\hich\af4\dbch\af4\loch\f4  or before using any debug options that check for stack overflows. \hich\af4\dbch\af4\loch\f4  It can be set manually from assembly language.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemMMShutDown}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemMMShutDown}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemMMShutDown (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine shuts down the memory manager used by the run time libraries.  It should be called just before a program e\hich\af4\dbch\af4\loch\f4 xits for the last time.  The memory manager is left in a restartable state after this call.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemPrintError}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemPrintError}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemPrintError (int);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Writes a text error message to standard out.  See }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemError}{\hich\af4\dbch\af4\loch\f4  for a list of the\hich\af4\dbch\af4\loch\f4  errors that }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemPrintError}{\hich\af4\dbch\af4\loch\f4  can handle, as well as the strings it will print.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemQuitFlags}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemQuitFlags}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemQuitFlags (unsigned);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine sets the quit flags field for the GS/OS Quit call that is made to exit fr\hich\af4\dbch\af4\loch\f4 om a normal C program.  See }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  GS/OS Reference}{\hich\af4\dbch\af4\loch\f4  for the allowed values for this parameter.\par \par \hich\af4\dbch\af4\loch\f4 Note:  In restartable programs, be sure to initialize this variable to 0 manually.  The libraries do not normally initialize this value.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemQuitPath}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemQuitPath}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemQuitPath (GSString255Ptr);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine sets the quit pathname field for the GS/OS Quit call that is made to exit from a normal C program.  See }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  GS/OS Reference}{\hich\af4\dbch\af4\loch\f4  for the allowed values for the paramete\hich\af4\dbch\af4\loch\f4 r.\par \par \hich\af4\dbch\af4\loch\f4 Note:  In restartable programs, be sure to initialize this variable to NULL manually.  The libraries do not normally initialize this value.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemSANEInit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemSANEInit}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemSANEInit (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine is called to sta\hich\af4\dbch\af4\loch\f4 rt SANE.  Replacing it with a dummy subroutine would cause the system to skip starting SANE.  Calling this subroutine from a CDA or an NDA is a quick way to start SANE, which is not normally started by ORCA/C for these kinds of programs.\par \par \hich\af4\dbch\af4\loch\f4 This subroutine k\hich\af4\dbch\af4\loch\f4 eeps track of whether SANE was initially started, starting SANE only if needed.  }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemSANEShutDown}{\hich\af4\dbch\af4\loch\f4  will only shut down SANE if it was started by this subroutine.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemSANEShutDown}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemSANEShutDown}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemSANEShutDown (void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 I\hich\af4\dbch\af4\loch\f4 f SANE was started by an earlier call to }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemSANEInit}{\hich\af4\dbch\af4\loch\f4 , this subroutine shuts down the tool.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 SystemUserID}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SystemUserID}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern pascal void SystemUserID (unsigned, char *);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This subroutine should be called right after }{\fs18 \hich\af2\dbch\af4\loch\f2 SystemMinStack}{\hich\af4\dbch\af4\loch\f4  by programs that\hich\af4\dbch\af4\loch\f4  are not started in the normal way.  The first parameter must be passed; it is the user ID for the program.  The second parameter can either be a pointer to a command line string or NULL.  If the string is a pointer to a command line string, the command l\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ne should start with an 8 character identifier naming the launcher, and be followed by the command line as a null terminated string.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318516}\hich\af4\dbch\af4\loch\f4 Standard C Libraries{\*\bkmkend _Toc495318516}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 abort\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See exit.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 abs}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 abs}}}{\tab \hich\af4\dbch\af4\loch\f4 labs}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 labs}}}{\tab \hich\af4\dbch\af4\loch\f4 fabs}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fabs}}}{\par }\pard\plain \s27\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 int      abs(i\hich\af2\dbch\af4\loch\f2 nt x);\par }\pard \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 long     labs(long x);\par }\pard \s27\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 extended fabs(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function abs accepts an integer argument and returns the absolute value of the argument.  Note that abs is in stdlib.h, not math.h, as with some older C compilers.\par \hich\af4\dbch\af4\loch\f4 The function \hich\af4\dbch\af4\loch\f4 labs accepts a long integer argument and returns the absolute value of the argument.  Note that labs is in stdlib.h, not math.h, as with some older C compilers.\par \hich\af4\dbch\af4\loch\f4 The function fabs accepts an extended floating-point argument and returns the absolute value of\hich\af4\dbch\af4\loch\f4  the argument.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 distance = fabs(x1-x2);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 acos}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 acos}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended acos(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDOM}}}{\hich\af4\dbch\af4\loch\f4 The function acos returns the trigonometric arc cosine (inverse cosine) of the argument.  The result is in radians, and lies in the range 0 \hich\af4\dbch\af4\loch\f4 \hich\f4 to \u960\'b9\loch\f4 .  If the argument is less than -1.0 or greater than 1.0, errno is set to EDOM.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 angle = acos(arg);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 asctime\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See ctime.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 assert}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 assert}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <assert.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void assert(int v);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Assert is a macro generally used while a program is under development. \hich\af4\dbch\af4\loch\f4  It takes a single argument, which must be an expression that would be legal as the condition expression in an if statement.  If that argument is zero, assert prints "Assertion failed:  file file, line number" to standard out, where file is the name of th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  source file, and number is the line number within the source file.  The program is then stopped by calling exit(-1).  If the #pragma debug directive has been used to enable trace backs, ORCA/C will also print the line number and source file name where th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  assert call was made, and a trace back showing what calls were made to arrive at that point.\par \hich\af4\dbch\af4\loch\f4 The macro NDEBUG is used to disable the debug code generated by calls to assert.  If NDEBUG is defined when the assert.h header file is read, no code is generated\hich\af4\dbch\af4\loch\f4  for the assert calls.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 assert(parm != 0.0); /* we should never be passed a value of zero! */\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 asin}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 asin}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended asin(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDOM}}}{\hich\af4\dbch\af4\loch\f4 The asin function returns the trigonometric arc sine (inverse sine) of the argument.  \hich\af4\dbch\af4\loch\f4 \hich\f4 The result is in radians, and lies in the range -\u960\'b9\loch\f4 \hich\f4 /2 to \u960\'b9\loch\f4 /2.  If the argument is less than -1.0 or greater than 1.0, errno is set to EDOM.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 angle = asin(arg);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 atan}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 atan}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended atan(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The atan function returns the trig\hich\af4\dbch\af4\loch\f4 \hich\f4 onometric arc tangent (inverse tangent) of the argument.  The result is in radians, and lies in the range -\u960\'b9\loch\f4 \hich\f4 /2 to \u960\'b9\loch\f4 /2.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 arctan}}}{\hich\af4\dbch\af4\loch\f4 In some versions of C, this function is called arctan.  ORCA/C includes arctan as a macro equivalent of atan to make it ea\hich\af4\dbch\af4\loch\f4 sier to port programs written under these compilers.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 angle = atan(arg);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 atan2}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 atan2}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended atan2(extended y, extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDOM}}}{\hich\af4\dbch\af4\loch\f4 The atan2 function returns the trigonometric arc tangent (inverse tangent) of the arguments.\hich\af4\dbch\af4\loch\f4   Since the actual coordinates of a point are given, rather than the quotient of the two points (as with atan), this func\hich\af4\dbch\af4\loch\f4 \hich\f4 tion can return results in the range -\u960\'b9\loch\f4 \hich\f4  to \u960\'b9\loch\f4 .  The result is in radians, and represents the angle between the positive x axis and the point (x, y) in Cartesian coordinates.  A domain error occurs if both x and y are zero, in which case errno is set to EDO\hich\af4\dbch\af4\loch\f4 M\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 angle = atan2(y,x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 atexit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 atexit}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int atexit(void (*func)());\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The atexit function registers a function so it will be called when the program is complete, either due to a call to the exit function, or because a return is made \hich\af4\dbch\af4\loch\f4 from the main function.  More than one function can be registered in this way; if so, they are called in reverse of the order in which atexit was called to register the functions.  The functions must not require parameters, and should return void.  The at\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 xit function returns a non-zero value if the function is registered successfully, and zero if there is not enough memory to satisfy the request.\par \hich\af4\dbch\af4\loch\f4 If the same function is registered more than once, ORCA/C will call the function once for each time it is regis\hich\af4\dbch\af4\loch\f4 tered.  Other compilers may handle this situation differently.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void hello(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("Hello, world.\\n");\par \}\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 atexit(hello);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 atof}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 atof}}}{\tab \hich\af4\dbch\af4\loch\f4 atoi}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 atoi}}}{\tab \hich\af4\dbch\af4\loch\f4 atol}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 atol}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 double atof(char *str);\par \hich\af2\dbch\af4\loch\f2 int    at\hich\af2\dbch\af4\loch\f2 oi(char *str);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 long   atol(char *str);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These functions are simpler versions of the string conversion functions strtod and strtol.  The definitions below define these functions in terms of their more powerful counterparts.  For details on what strings are a\hich\af4\dbch\af4\loch\f4 ccepted and how errors are handled, see the description of the strtod function.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 double atof(char *str)\par \par \{\par \hich\af2\dbch\af4\loch\f2 return strtod(str, (char**)NULL);\par \}\par \par \hich\af2\dbch\af4\loch\f2 int atoi(char *str)\par \par \{\par \hich\af2\dbch\af4\loch\f2 return (int) strtol(str, (char**)NULL, 10);\par \}\par \par \hich\af2\dbch\af4\loch\f2 long atol(char *str)\par \par \{\par \hich\af2\dbch\af4\loch\f2 return strtol(str,\hich\af2\dbch\af4\loch\f2  (char**)NULL, 10);\par \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 bsearch}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 bsearch}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 void *bsearch(void *key, void *base, size_t count, size_t size, \par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2               int (*compar)(const void *ptr1, const void *str2));\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The bsearch function performs a binary search.  It searches\hich\af4\dbch\af4\loch\f4  the array pointed to by base.  This array consists of count elements, each of which is size bytes long.  The array must be sorted in ascending order.  The parameter key points to a value of the same type as the elements of the array; key is the element t\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4  search for.  The function compar is supplied by the program; it takes two arguments whose types match the type of key, and returns 0 of the arguments match, -1 of the first argument is less than the second, and 1 if the first argument is greater than the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 second.  If the value is found, a pointer to the array element is returned; otherwise, bsearch returns NULL.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int CompareZip(address *addr1, address *addr2)\par \par \{\par \hich\af2\dbch\af4\loch\f2 if (addr1.zip == addr2.zip)\par \hich\af2\dbch\af4\loch\f2    return 0;\par \hich\af2\dbch\af4\loch\f2 if (addr1.zip < addr2.zip)\par \hich\af2\dbch\af4\loch\f2    return -1;\par \hich\af2\dbch\af4\loch\f2 return 1;\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \hich\af2\dbch\af4\loch\f2 .\hich\af2\dbch\af4\loch\f2 ..\par \hich\af2\dbch\af4\loch\f2 /* find an address with a zip code of 87114 */\par \hich\af2\dbch\af4\loch\f2 addr.zip = 87114;\par \hich\af2\dbch\af4\loch\f2 aPtr = bsearch(&addr, addressList, listSize, sizeof(address),\par \hich\af2\dbch\af4\loch\f2    CompareZip);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 c2pstr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 c2pstr}}}{\tab \hich\af4\dbch\af4\loch\f4 p2cstr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 p2cstr}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par \hich\af2\dbch\af4\loch\f2 char *c2pstr(char *string);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *p2cstr(char \hich\af2\dbch\af4\loch\f2 *string);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 p-strings}}}{\hich\af4\dbch\af4\loch\f4 These functions are used to translate between null-terminated C strings and the so-called Pascal strings, which have a leading length byte.  In both cases, a pointer to the resulting string is returned.  The original string is n\hich\af4\dbch\af4\loch\f4 ot changed in any way; the result string is built in an internal buffer.  Because an internal buffer is used, subsequent calls to either of these functions can destroy old values.  For that reason, it is important to copy the result to a local string buff\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 r if one of these functions will be called before the need for the converted string has passed.\par \hich\af4\dbch\af4\loch\f4 The function c2pstr converts a null-terminated string into a string with a leading length byte.  If the null-terminated string is longer than 255 characters, a \hich\af4\dbch\af4\loch\f4 string with 255 characters is created.  The string has a terminating null character following the last character, so standard C string manipulation functions can still be used on the result.\par \hich\af4\dbch\af4\loch\f4 The function p2cstr converts a string with a leading length byte \hich\af4\dbch\af4\loch\f4 into a null-terminated string.\par \hich\af4\dbch\af4\loch\f4 These functions are not standard C functions.  They are included in Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  based C compilers to make it easier to deal with the toolbox, which often requires strings with a length byte.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* use a null-terminated string to\hich\af2\dbch\af4\loch\f2  set a window title */\par \hich\af2\dbch\af4\loch\f2 SetWTitle(strcpy(title, c2pstr(temp)), window);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 calloc\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See malloc.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ceil}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ceil}}}{\tab \hich\af4\dbch\af4\loch\f4 floor}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floor}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par \hich\af2\dbch\af4\loch\f2 extended ceil(extended x);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended floor(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function ceil accepts a floating-point argument and\hich\af4\dbch\af4\loch\f4  returns the floating-point representation of the argument, rounded up to the next higher integer.  If the argument is an integer, the result is the same value.\par \hich\af4\dbch\af4\loch\f4 The function floor is similar, except that the result is rounded down towards negative infinity\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 x = ceil(x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 cfree\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See free.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 chmod}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 chmod}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int chmod(char *path, int mode);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Changes the access bits in the file.  The following bit flags are supported.\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\tx2880\adjustright {\hich\af4\dbch\af4\loch\f4 0x0100\tab Read\tab enables the file for input\par \hich\af4\dbch\af4\loch\f4 0x0080\tab Write\tab enables the file for o\hich\af4\dbch\af4\loch\f4 utput\par \hich\af4\dbch\af4\loch\f4 0x1000\tab Delete\tab allows the file to be deleted\par \hich\af4\dbch\af4\loch\f4 0x2000\tab Rename\tab allows the file to be renamed\par \hich\af4\dbch\af4\loch\f4 0x4000\tab Backup\tab indicates that the file should be backed up\par \hich\af4\dbch\af4\loch\f4 0x8000\tab Invisible\tab makes the file invisible to the Finder\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The flags are added together to make up the mod\hich\af4\dbch\af4\loch\f4 e field.  Setting a flag enables the corresponding GS/OS bit, enabling the action described.  Clearing the flags disables the action.  For example, the call\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 chmod("myfile", 0x6100);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 sets the access bits so that the file "myfile" can be read or renamed, a\hich\af4\dbch\af4\loch\f4 nd indicates that it should be backed up.  The file cannot be written to or deleted without changing the access bits.  The file is visible to the Finder.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The flags for Delete, Rename, Backup and Invisible are unique to the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  All of the bits in 0\hich\af4\dbch\af4\loch\f4 x0E7F are used for other purposes under UNIX.  They are ignored in ORCA/C.\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not required by the ANSI C standard, and should be avoided if possible.  In particular, the function should not be used in \hich\af4\dbch\af4\loch\f4 programs that will be ported to other computers unless it is imbedded in conditional compilation code so that the function will only be called on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  version of the program.\par \hich\af4\dbch\af4\loch\f4 If the call is successful, the function returns 0; otherwise, a -1 is r\hich\af4\dbch\af4\loch\f4 eturned and errno is set as indicated in the list below.\par \hich\af4\dbch\af4\loch\f4 If the file does not exist, errno is set to ENOENT.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 clalloc\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See malloc.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 clearerr\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See ferror.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 clock}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 clock}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <time.h>\par \hich\af2\dbch\af4\loch\f2 #define CLK_TCK (60)\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef unsigned long clock_t;\par \hich\af2\dbch\af4\loch\f2 clock_t clock(vo\hich\af2\dbch\af4\loch\f2 id);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The clock function is used on multi-tasking systems to see how much time has been used by a program.  The result is returned as the number of clock ticks since the program started.  The number of clock ticks per second is defined by the macro CLK_TCK;\hich\af4\dbch\af4\loch\f4  on most systems, this time is returned in microseconds.  (One microsecond is 10}{\super \hich\af4\dbch\af4\loch\f4 -6}{\hich\af4\dbch\af4\loch\f4  seconds.)\par \hich\af4\dbch\af4\loch\f4 The Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  operating system is not a multi-tasking operating system, and the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  clock is not accurate to the microsecond time scale.  ORCA/C uses the t\hich\af4\dbch\af4\loch\f4 ick count returned by the Miscellaneous Tool Set GetTick call for a clock count; CLK_TCK is therefore 60.  The tick count is started whenever a heartbeat interrupt handler is installed.  The Event Manager installs a heartbeat interrupt handler, so the clo\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 k function can always be used from the desktop development environment.  If you will be using the clock function from the text environment, you will need to ensure that the heartbeat interrupt handler is active.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 clicks = clock();\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 close}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 close}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #incl\hich\af2\dbch\af4\loch\f2 ude <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int close(int filds);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The file with the file ID filds is closed.  If the file has been duplicated using the dup call, it is not closed until each of the associated file IDs have been closed.\par \hich\af4\dbch\af4\loch\f4 If the call is successful, the function returns 0; \hich\af4\dbch\af4\loch\f4 otherwise, a -1 is returned and errno is set to EBADF (filds is not a valid file descriptor).\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not required by the ANSI C standard, and should be avoided if possible.\par \hich\af4\dbch\af4\loch\f4 See also fclose.\par \par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 commandline}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 commandline}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <orca.h>\par \hich\af2\dbch\af4\loch\f2 char *commandline(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The commandline function returns a pointer to a null-terminated string.  The string represents the command line used to invoke the program, with any input and output redirection removed.  Not all\hich\af4\dbch\af4\loch\f4  shells provide the command line.  For those that do not, this function returns NULL.\par \hich\af4\dbch\af4\loch\f4 This function is unique to ORCA/C.  In general, the argc, argv functions should be used.  This function does have one advantage over argc and argv, though:  the line is u\hich\af4\dbch\af4\loch\f4 nparsed, so the program can do its own parsing.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("command line: %s\\n", commandline());\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 cos}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 cos}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended cos(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The cos function returns the trigonometric cosine of the argument.  The argument must be supplied in r\hich\af4\dbch\af4\loch\f4 adians.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 length = cos(x)*hypotenuse;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 cosh}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 cosh}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended cosh(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\hich\af4\dbch\af4\loch\f4 The cosh function returns the hyperbolic cosine of the argument.  If an error occurs, errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 n = cosh(x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 creat}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 creat}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int creat(char *path, int mode);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Creates a new file or opens an existing one for output.  If the file exists, its length is set to 0.  The name of the file is path.  The mode parameter is identical to the mode parameter for the chmod \hich\af4\dbch\af4\loch\f4 call.  The file created is a binary file.  If the file already exists, it's file type is not changed.\par \hich\af4\dbch\af4\loch\f4 Please note that in APW C}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW C}}}{\hich\af4\dbch\af4\loch\f4 , creat does not have a mode parameter.  It does in UNIX based C implementations, so we have maintained that use he\hich\af4\dbch\af4\loch\f4 re.\par \hich\af4\dbch\af4\loch\f4 If the call is successful, the function returns 0; otherwise, a -1 is returned and errno is set as indicated in the list below.\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not required by the ANSI C standard, and should be avoided if poss\hich\af4\dbch\af4\loch\f4 ible.\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Possible errors\par }{\par \hich\af4\dbch\af4\loch\f4 EACCES\tab The file exists, and is not write enabled.\par \hich\af4\dbch\af4\loch\f4 EACCES\tab The file does not exist, and could not be opened.\par \hich\af4\dbch\af4\loch\f4 ENOENT\tab The pathname is null.\par \hich\af4\dbch\af4\loch\f4 EMFILE\tab OPEN_MAX files are already open.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ctime}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ctime}}}{\tab \hich\af4\dbch\af4\loch\f4 asctime}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 asctime}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ti\hich\af2\dbch\af4\loch\f2 me.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef unsigned long time_t;\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *ctime(time_t *timeptr);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *asctime(struct tm *ts);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The ctime function takes a pointer to an encoded time as input and returns a pointer to an ASCII string of the form\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Www Mmm dd hh:mm:ss 19yy\\n\\0\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 where the fie\hich\af4\dbch\af4\loch\f4 lds are:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s31\qj\li360\ri2880\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1800\tx3240\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Field\tab Example\tab Description\par }\pard\plain \s16\qj\li360\ri2880\sl223\slmult1\widctlpar\tx1800\tx3240\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Www\tab Mon\tab day of week\par \hich\af4\dbch\af4\loch\f4 Mmm\tab Feb\tab month\par \hich\af4\dbch\af4\loch\f4 dd\tab 29\tab date\par \hich\af4\dbch\af4\loch\f4 hh\tab 16\tab hour (24 hour format)\par \hich\af4\dbch\af4\loch\f4 mm\tab 03\tab minutes\par \hich\af4\dbch\af4\loch\f4 ss\tab 57\tab seconds\par \hich\af4\dbch\af4\loch\f4 yy\tab 88\tab year\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The asctime function creates a similar time string, but takes a pointer to a calendar time structure create\hich\af4\dbch\af4\loch\f4 d by localtime or gmtime as input.\par \hich\af4\dbch\af4\loch\f4 The return string is in a static buffer which is reused by each call to ctime or asctime.  If you must keep a copy of the string, and subsequent calls will be made to ctime, be sure to save a copy of the string in a local\hich\af4\dbch\af4\loch\f4  buffer.\par \hich\af4\dbch\af4\loch\f4 See also time, gmtime, localtime.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 time_t bintime;\par \hich\af2\dbch\af4\loch\f2 struct tm timestruct;\par \par \hich\af2\dbch\af4\loch\f2 bintime = time(NULL);\par \hich\af2\dbch\af4\loch\f2 printf("The time is %s\\n", ctime(&bintime));\par \par \hich\af2\dbch\af4\loch\f2 timestruct = *gmtime(&bintime);\par \hich\af2\dbch\af4\loch\f2 printf("The time is %s\\n", asctime(&timestruct));\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 di\hich\af4\dbch\af4\loch\f4 fftime}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 difftime}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <time.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef unsigned long time_t;\par \hich\af2\dbch\af4\loch\f2 double difftime(time_t t1, time_t t0);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The difftime function returns the difference between t0 and t1, in seconds.  The parameters are specified in the format used by the time function\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("%.0f seconds have elapsed.\\n", difftime(time(NULL),\par }\pard \s26\qj\fi720\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 oldtime));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 div}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 div}}}{\tab \hich\af4\dbch\af4\loch\f4 ldiv}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ldiv}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 typedef struct div_t \{int quot,rem;\};\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef struct ldiv_t \{long quot,rem;\};\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 div_t  div(int n, int d);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ldiv_t ldiv(long n, long\hich\af2\dbch\af4\loch\f2  d);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function div computes the result of division and the remainder as a single step.  The quot (quotient, or result of division) and rem (remainder) are returned in a structure.  The function ldiv does the same thing for long arguments.  The results a\hich\af4\dbch\af4\loch\f4 re unpredictable if the denominator is zero.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* print a result as a whole number and fraction */\par \hich\af2\dbch\af4\loch\f2 res = div(numerator, denominator);\par \hich\af2\dbch\af4\loch\f2 printf("%d and %d/%d", res.quot, res.rem, denominator);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 dup}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 dup}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int dup(int old);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Duplicates a f\hich\af4\dbch\af4\loch\f4 ile ID.  The original file ID is created by a creat or open call.  This call creates a duplicate of the file ID.  The actual file on disk is not closed until each individual file ID is closed.\par \hich\af4\dbch\af4\loch\f4 If the call is successful, the function returns 0; otherwise, a\hich\af4\dbch\af4\loch\f4  -1 is returned and errno is set as indicated in the list below.\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not required by the ANSI C standard, and should be avoided if possible.\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Possible errors\par }{\par \hich\af4\dbch\af4\loch\f4 EBADF\tab Old is not a valid file descriptor\par \hich\af4\dbch\af4\loch\f4 EM\hich\af4\dbch\af4\loch\f4 FILE\tab OPEN_MAX files are already open\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 enddesk\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See startdesk.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 endgraph\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See startgraph.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 EOF}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EOF}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define EOF (-1)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 EOF is a value used to see if you have reached the end of a file.  If so, the file input routines will report this char\hich\af4\dbch\af4\loch\f4 acter as the one read.  After seeing this character, always use the feof function to ensure that the end of the file has, indeed, been reached, as opposed to the file containing a character 0xFF which has been sign extended to become a -1.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* process the \hich\af2\dbch\af4\loch\f2 characters in a file */\par \hich\af2\dbch\af4\loch\f2 do \{\par \hich\af2\dbch\af4\loch\f2    done = (ch = fgetc(myFile)) == EOF;\par \hich\af2\dbch\af4\loch\f2    if (done)\par \hich\af2\dbch\af4\loch\f2       done = feof(myFile);\par \hich\af2\dbch\af4\loch\f2    if (!done)\par \hich\af2\dbch\af4\loch\f2       process(ch);\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 while (!done)\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 errno}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errno}}}{\tab \hich\af4\dbch\af4\loch\f4 perror}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 perror}}}{\tab \hich\af4\dbch\af4\loch\f4 strerror}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strerror}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <errno.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern in\hich\af2\dbch\af4\loch\f2 t errno;\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *strerror(int errnum);\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void perror(char *s);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 run-time errors}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errors}}}{\hich\af4\dbch\af4\loch\f4 This collection of functions, variables and macros implement the standard run-time error package for C.\par \hich\af4\dbch\af4\loch\f4 The variable er\hich\af4\dbch\af4\loch\f4 rno is used by the libraries to report errors.  Any time an error is detected by one of the libraries, an error number is stored in errno.  Note that errno is never cleared by the libraries.  To make effective use of errno, your program should clear errno\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 before calling a function, call the function, then check errno to see if an error occurred.\par \hich\af4\dbch\af4\loch\f4 The error numbers used by errno are defined as macros in two interface files.  Mathematical errors can be found in math.h, while all other errors are defined in err\hich\af4\dbch\af4\loch\f4 no.h.\par \hich\af4\dbch\af4\loch\f4 The perror function is used to print an error message.  The error message is printed to error out.  It consists of an error message (which is supplied as a parameter to perror), a colon and a space, a description of the error currently reported by er\hich\af4\dbch\af4\loch\f4 rno, and a new line character.\par \hich\af4\dbch\af4\loch\f4 The strerror function returns a pointer to a string.  If errno is supplied as the argument, the result is identical to the message description printed by perror.  (This is not true in all implementations of C, however.)\par \hich\af4\dbch\af4\loch\f4 See a\hich\af4\dbch\af4\loch\f4 lso toolerror.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 if (errno) \{\par \hich\af2\dbch\af4\loch\f2    perror("Error at line __LINE__ of __FILE__");\par \hich\af2\dbch\af4\loch\f2    exit(errno);\par \hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 exit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 exit}}}{\tab \hich\af4\dbch\af4\loch\f4 _exit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 _exit}}}{\tab \hich\af4\dbch\af4\loch\f4 abort}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 abort}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 void exit(int status);\par \hich\af2\dbch\af4\loch\f2 void _exit(int status);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void abort(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The exit funct\hich\af4\dbch\af4\loch\f4 ion exits the program, calling all functions registered by the function atexit, and then performing the normal clean-up operations of closing open streams, flushing buffers, and deleting files created by calls to tmpfile.  The _exit function also exits, b\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 t does not do the clean-up operations.  Any open streams will still be closed by the shell, which will also dispose of any memory used by the program.  Both functions accept an integer argument, which is returned to the shell as a completion code.  A comp\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 etion code of zero tells the shell that the program finished normally, and any script files will continue to execute.  A non-zero value tells the shell that some error occurred.  Some shell utilities also use the return code to return a value to the shell\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 The abort function is the same as _exit(-1).  Abort is not always implemented the same way.  Depending on the implementation, abort can exit with some other exit code (so long as it is non-zero), or even exit with a maskable interrupt, so that the program\hich\af4\dbch\af4\loch\f4  can handle the situation as an error and return to the caller, often returning a value.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 exit(0);\par \hich\af2\dbch\af4\loch\f2 _exit(errno);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 exp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 exp}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended exp(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\hich\af4\dbch\af4\loch\f4 The exp function returns the extended floating-point representation \hich\af4\dbch\af4\loch\f4 of e raised to the x power, where e is the base of the natural logarithm (approximately 2.718281828).  If the exponent cannot be represented as an extended number, an overflow results.  In that case, infinity is returned and errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 res = \hich\af2\dbch\af4\loch\f2 exp(x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fabs\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See abs.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fclose}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fclose}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int fclose(FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fclose takes an open file as input, and closes the file.  If an error occurs, fclose returns EOF; otherwise, it returns zero.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 fclose(myfile);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fcntl}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fcntl}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int fcntl(int filds, int cmd, int arg);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fcntl provides control over open files.  The }{\i \hich\af4\dbch\af4\loch\f4 filds}{\hich\af4\dbch\af4\loch\f4  parameter is the file ID for a previously opened file.  Under UNIX, the cmd parameter can take on a number of values, but on\hich\af4\dbch\af4\loch\f4  the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , the only value that makes sense is F_DUPFD, which makes a copy of the file descriptor.  The number of the file descriptor returned is always greater than or equal to }{\i \hich\af4\dbch\af4\loch\f4 arg}{\hich\af4\dbch\af4\loch\f4 , and has exactly the same characters as the old file descriptor.\par \hich\af4\dbch\af4\loch\f4 Whil\hich\af4\dbch\af4\loch\f4 e this function is a common one in C libraries, it is not required by the ANSI C standard, and should be avoided if possible.\par \hich\af4\dbch\af4\loch\f4 If an error occurs, fcntl returns -1 and sets errno to one of these values; if an errno does not occur, fcntl returns 0.\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Possible\hich\af4\dbch\af4\loch\f4  errors\par }{\par \hich\af4\dbch\af4\loch\f4 EBADF\tab filds is not a valid file descriptor.\par \hich\af4\dbch\af4\loch\f4 EINVAL\tab The cmd parameter is not F_DUPFD.\par \hich\af4\dbch\af4\loch\f4 EMFILE\tab There ore no available file descriptors greater than arg-1.\par \hich\af4\dbch\af4\loch\f4 EMFILE\tab arg is negative.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 feof}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 feof}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int feof(FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The feof f\hich\af4\dbch\af4\loch\f4 unction checks to see if an end of file condition exists for the specified stream.  An end of file condition exists if an attempt has been made to read past the end of a file.  Note that an end of file condition does not exists if all of the characters in\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 a file have been read, but no attempt has been made to read another character.  A value of zero is returned if an end of file condition does not exist; a non-zero value is returned if an end of file has been detected.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* echo a file */\par \hich\af2\dbch\af4\loch\f2 stream = fopen("myf\hich\af2\dbch\af4\loch\f2 ile", "r");\par \hich\af2\dbch\af4\loch\f2 if (stream != NULL)\par \hich\af2\dbch\af4\loch\f2    do\par \hich\af2\dbch\af4\loch\f2       putchar(fgetc(stream));\par \hich\af2\dbch\af4\loch\f2    while (!feof(stream));\par \hich\af2\dbch\af4\loch\f2 fclose(stream);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ferror}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ferror}}}{\tab \hich\af4\dbch\af4\loch\f4 clearerr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 clearerr}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int  ferror(FILE *stream);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void clearerr(FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The ferror function ret\hich\af4\dbch\af4\loch\f4 urns a non-zero value if a read or write error has occurred on the specified stream.  It returns a zero if no error has occurred.\par \hich\af4\dbch\af4\loch\f4 If an error condition exists, it can be cleared by a call to clearerr or by closing the file.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 if (ferror(myFile)) \{\par \hich\af2\dbch\af4\loch\f2    cleare\hich\af2\dbch\af4\loch\f2 rr(myFile);\par \hich\af2\dbch\af4\loch\f2    HandleError();\par \hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fflush}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fflush}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int fflush(FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The fflush function takes a stream open for output and flushes any internal buffers, writing them to the destination device.  The stream remains open.  EO\hich\af4\dbch\af4\loch\f4 F is returned if there is an error; otherwise, zero is returned.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 fflush(myfile);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fgetc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fgetc}}}{\tab \hich\af4\dbch\af4\loch\f4 getc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 getc}}}{\tab \hich\af4\dbch\af4\loch\f4 getchar}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 getchar}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int fgetc(FILE *stream);\par \hich\af2\dbch\af4\loch\f2 int getc(FILE *stream);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int getchar(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errno}}}{\hich\af4\dbch\af4\loch\f4 These funct\hich\af4\dbch\af4\loch\f4 ions are used to read characters from a stream.  The function fgetc and the macro getc do exactly the same thing:  the only difference is that fgetc is implemented as a function, while getc is implemented as a macro.  In each case, a character is read fro\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4  the stream and returned.  The current position of the stream is updated after each read.  If an error occurs during the read or if a read is attempted after the last character in the file has been read, EOF is returned.  In that case, the feof should be \hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 sed to see if the end of file has actually been reached.  Errno can also be checked to see if an error has occurred.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 keyboard input}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard input}}}{\hich\af4\dbch\af4\loch\f4 The function getchar works like an fgetc(stdin), reading a character from standard in.  If st\hich\af4\dbch\af4\loch\f4 din is set to the keyboard (the default), control-@ is used to signal the end of a file.  The end of a line is signalled with the return key or enter key.  Note that the console input routines buffer the characters in chunks of one line to allow the user \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 o edit the line while it is being typed.  The getchar function will not return a character until an entire line has been typed.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ch = fgetc(myFile);\par \hich\af2\dbch\af4\loch\f2 ch = getchar();\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fgetpos}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fgetpos}}}{\tab \hich\af4\dbch\af4\loch\f4 fsetpos}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fsetpos}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int fgetpos(FILE *stream\hich\af2\dbch\af4\loch\f2 , fpos_t *pos);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int fsetpos(FILE *stream, const fpos_t *pos);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The fgetpos function records the current position in a file.  The information needed to restore the file to its position at the time of the call is recorded in a value of type fpos_t.  The fsetp\hich\af4\dbch\af4\loch\f4 os function is used to restore the file to the position at the time of the fgetpos call.\par \hich\af4\dbch\af4\loch\f4 If either call is successful, the function returns 0; otherwise it returns a non-zero value and sets errno.  While the exact values returned vary from compiler to comp\hich\af4\dbch\af4\loch\f4 iler, in ORCA/C, these functions return -1 for a failure, and set errno to _IOERR.\par \hich\af4\dbch\af4\loch\f4 See also fseek and ftell.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fgets}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fgets}}}{\tab \hich\af4\dbch\af4\loch\f4 gets}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 gets}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 char *fgets(char *s, int n, FILE *stream);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *gets(char *s);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fgets reads a\hich\af4\dbch\af4\loch\f4  string from a file.  Up to n-1 characters are read; they are placed in the character array pointed to by s.  A pointer to the first character in s is returned if the read was successful.  Input stops if an end of file condition is encountered, a new line\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 character is encountered, or if n-1 characters are read.  In all cases, a terminating null character is placed after the last character read.  The new line character, if encountered, does become part of the string; it is placed just before the terminating\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 null character.\par \hich\af4\dbch\af4\loch\f4 If an end of file is encountered before any characters are read, or if an error condition occurs during the read, fgets returns a null pointer and the buffer s is left undisturbed.\par \hich\af4\dbch\af4\loch\f4 The function gets reads characters into the buffer s, takin\hich\af4\dbch\af4\loch\f4 g the characters from standard in.  Characters are read until an end of line character is encountered.  Unlike fgets, gets does not include the end of line mark as part of the string.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* process a file */\par \hich\af2\dbch\af4\loch\f2 do \{\par \hich\af2\dbch\af4\loch\f2    fgets(line, 255, myFile);\par \hich\af2\dbch\af4\loch\f2    process(line)\hich\af2\dbch\af4\loch\f2 ;\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 while (!feof(myFile));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 floor\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See ceil.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fmod}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fmod}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended fmod(extended x, extended y);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fmod returns the floating-point remainder of x/y.  If the result cannot be represented as an extended floating-point numbe\hich\af4\dbch\af4\loch\f4 r, the result is undefined.  This function can be thought of as performing the division, then removing the whole-number portion of the result.  If y is zero, x is returned.\par \hich\af4\dbch\af4\loch\f4 See also modf.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 x = fmod(x,y);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fopen}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fopen}}}{\tab \hich\af4\dbch\af4\loch\f4 freopen}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 freopen}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include\hich\af2\dbch\af4\loch\f2  <stdio.h>\par \hich\af2\dbch\af4\loch\f2 FILE *fopen(char *filename, char *type);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FILE *freopen(char *filename, char *type, FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fopen opens a file.  The name of the file to open is specified as a null-terminated string.  It must be acceptable to GS/OS as a file \hich\af4\dbch\af4\loch\f4 name.  Currently, GS/OS supports a ProDOS FST and several drivers.  The name supplied can be the name of any of the drivers, a full path name, a partial path name, or a file in the default directory (prefix 0).\par \hich\af4\dbch\af4\loch\f4 The second string, type, is used to determine\hich\af4\dbch\af4\loch\f4  the characteristics of the file to be opened.  It consists of one of three flags, r, w or a.  Each of these flags can be followed by a + character, which indicates that a file is to be opened for both input and output.  Even if the file is open for both \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 nput and output, a call to fseek, rewind or fflush must appear between input calls and output calls.  The meaning of the flags is:\par \par }\pard\plain \s31\qj\fi-1080\li1440\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 flag\tab meaning\par }\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 r\tab Open an existing file for input.\par \hich\af4\dbch\af4\loch\f4 w\tab Create a new file, or delete the contents of an existing one, for output.\par \hich\af4\dbch\af4\loch\f4 a\tab Create a new file, or append to an existing file, for output.\par \hich\af4\dbch\af4\loch\f4 r+\tab Open an existing file for input and output.  The first record read/written will be at the start of the file.\par \hich\af4\dbch\af4\loch\f4 w+\tab Create a new file or delete the contents of an old file, opening it for input\hich\af4\dbch\af4\loch\f4  and output.\par \hich\af4\dbch\af4\loch\f4 a+\tab Create a new file, or append to an existing one, opening the file for input and output.  The first value written will appear after all old entries in the file; reading without positioning the file mark will result in an end of file conditio\hich\af4\dbch\af4\loch\f4 n.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 newline character}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 return key}}}{\hich\af4\dbch\af4\loch\f4 In addition, any of these flags may be followed by the character b.  If the file does not exist, and the b flag is used, fopen will create a file with a BIN file type (a binary file); if the b flag is not us\hich\af4\dbch\af4\loch\f4 ed, the file type will be TXT (a text file).  The other effect of the b flag is to change the way the \\n character is handled.  The C language uses the \\n character to mark the end of a line, but not all computers use a \\n character to mark the end of a l\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ne in a file.  There are a number of conventions, but the most common are to use the \\n character at the end of a line (e.g. UNIX), to use the \\r character at the end of a line (e.g. Apple II, Macintosh) or to use both characters (many MS-DOS programs do \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 his).  If you open a file without the b flag, the ORCA/C libraries do their best to hide this difference between the way lines are marked by C and the way they are marked in a file.  The ORCA/C libraries automatically strip all \\n characters, replacing th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 m with \\r characters on both input and output.  If you use the b flag in fopen, the libraries do not change these characters.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errno}}}{\hich\af4\dbch\af4\loch\f4 If the call to fopen completes without error, fopen returns a pointer to a file record.  This pointer can then be su\hich\af4\dbch\af4\loch\f4 pplied as the input to calls that require an open stream.  If an error occurs, fopen returns a null pointer and stores an error code into errno.\par \hich\af4\dbch\af4\loch\f4 The function freopen is used to change the file associated with an existing stream.  It starts by closing the f\hich\af4\dbch\af4\loch\f4 ile passed as a parameter, and then opens a new file using the same file buffer.  If the open succeeds, freopen returns the original file buffer.  If the open fails, freopen returns a null pointer and sets errno.\par \hich\af4\dbch\af4\loch\f4 GS/OS limits the number of files that can b\hich\af4\dbch\af4\loch\f4 e open at one time to 32767.  In practice, you would probably run out of memory (or files) before that many files were open.  ORCA/C does not impose any additional restrictions.  For programs that will be ported to other machines, use the macro SYS_OPEN t\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4  determine the maximum number of files that can be open at one time.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx3960\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* sample calls to fopen and freopen */\par \hich\af2\dbch\af4\loch\f2 FILE *myfile;\par \par \hich\af2\dbch\af4\loch\f2 myfile = fopen(fileName, "r");\tab /* open a file for input */\par \hich\af2\dbch\af4\loch\f2 myfile = fopen("out.cc", "w");\tab /* prepare to write to out.cc */\par \hich\af2\dbch\af4\loch\f2 myfile =\hich\af2\dbch\af4\loch\f2  fopen(fileName, "a");\tab /* place new info at the end */\par \hich\af2\dbch\af4\loch\f2 myfile = fopen(fileName, "wb");\tab /* open a binary output file */\par \hich\af2\dbch\af4\loch\f2 myfile = fopen(filename, "r+");\tab /* open a file for input & output */\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fprintf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fprintf}}}{\tab \hich\af4\dbch\af4\loch\f4 printf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 printf}}}{\tab \hich\af4\dbch\af4\loch\f4 sprintf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sprintf}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int fprintf(FILE *stream, char *format, ...);\par \hich\af2\dbch\af4\loch\f2 int printf(char *format, ...);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int sprintf(char *s, char *format, ...);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These functions implement formatted output to a stream.  They all process characters the same way; the difference is \hich\af4\dbch\af4\loch\f4 in where the characters are sent.  In the case of fprintf, the characters can be sent to any stream open for output.  The printf function writes characters to standard out.  The sprintf function sends characters to a string, appending a terminating null c\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 aracter.  In all cases, the number of characters written to the output device is returned if no error occurred, and EOF is returned if an error was detected.  In the case of sprintf, the terminating null character is not included in the character count.\par \hich\af4\dbch\af4\loch\f4 Th\hich\af4\dbch\af4\loch\f4 e format string controls the characters that are sent to the output device.  In the simplest case the characters in the format string are simply copied to the output device.  The string may, however, have embedded conversion specifiers.  These take the fo\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 m of a % character followed by other information.  In most cases, a conversion specifier requires a value to convert and write.  In that case, the values are taken from the variable length parameter list that follows the format string.  The number and typ\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  of parameters expected by the conversion specifiers must match exactly with the number and type of parameters specified, or a crash is likely.\par \hich\af4\dbch\af4\loch\f4 The general format for a conversion specifier is shown below.  Most of the fields are optional; when this is tru\hich\af4\dbch\af4\loch\f4 e, it is noted in the text.  The various fields are specified in the order given, with no intervening white space.  Not all of the optional fields have any effect on a particular format specifier.  In those cases, the field is still allowed, but is ignore\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 .\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 %\tab All conversion specifiers start with the % character.\par \par \hich\af4\dbch\af4\loch\f4 -, 0, +, space, #\tab Zero or more of these flag characters follow the % character, in any order.  The flag characters are described in detail below.\par \par \hich\af4\dbch\af4\loch\f4 unsigned int\tab An optional unsigned decimal constan\hich\af4\dbch\af4\loch\f4 t specifies the minimum field width.  This constant must not start with a zero, since the zero would be confused with the format flag.  An asterisk can also be used for the minimum field width, in which case an integer parameter is used for the field widt\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 .  If the number of characters needed to represent the value is greater than the field width, all of the characters are still printed.  If the number of characters needed to represent the value is less that the minimum field width, extra characters are ad\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 ed to fill out the field.  The character used can be a space or zero, and the extra characters can appear to the left or right of the value.  These factors are under control of the flags.\par \par \hich\af4\dbch\af4\loch\f4 .unsigned int\tab The precision of the field is specified by a period a\hich\af4\dbch\af4\loch\f4 nd an unsigned decimal constant.  In general, this represents the number of digits that will be used to represent a numeric value.  Like the field width, the precision can be specified as an asterisk, in which case an integer is removed from the parameter\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 list and used as the precision.  See the descriptions of the individual conversion specifiers for the specific use of this value.\par \par \hich\af4\dbch\af4\loch\f4 h, l or L\tab This optional field is a size specifier.  The h specifier indicates a short operand.  It is valid with the d, o, u,\hich\af4\dbch\af4\loch\f4  x and X conversion specifiers, and is ignored for all other conversion specifiers.  The l designator indicates that an integer value is long.  It is valid with the d, o, u, x and X conversion specifiers, and is ignored for all other conversion specifiers\hich\af4\dbch\af4\loch\f4 .\hich\af4\dbch\af4\loch\f4   L is used with double-precision numbers to indicate double numbers.  It is valid with the e, E, f, F, g and G conversion specifiers, and is ignored for all other conversion specifiers.  The s and L designators are not needed by the formatter; they are i\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 cluded to make the format specifiers used here more compatible with those used by sscanf.\par \par \hich\af4\dbch\af4\loch\f4 conversion\tab The conversion specifier tells what type of variable is being formatted.  This field is required.  Each of the individual conversion operators is describe\hich\af4\dbch\af4\loch\f4 d below.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The flag characters modify the normal operation of the format specifier.\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 -\tab If a formatted value is shorter than the minimum field width, it is normally right-justified in the field by adding characters to the left of the formatted value.  If the\hich\af4\dbch\af4\loch\f4  - flag is used, the value is left-justified.\par \par \hich\af4\dbch\af4\loch\f4 0\tab If a formatted value is shorter than the minimum field width, it is normally padded with space characters.  If the 0 flag is used, the field is padded with zeros instead of spaces.  The 0 pad character is on\hich\af4\dbch\af4\loch\f4 ly used when the output is right-justified.\par \par \hich\af4\dbch\af4\loch\f4 +\tab When a negative number is formatted, it is always preceded by a minus sign.  This flag forces positive numbers to be preceded by a plus sign.\par \par \hich\af4\dbch\af4\loch\f4 space\tab When a negative number is formatted, it is always preceded b\hich\af4\dbch\af4\loch\f4 y a minus sign.  This flag forces positive values to be preceded by a space, lining up positive numbers with negative numbers of equal length.\par \par \hich\af4\dbch\af4\loch\f4 #\tab This flag modifies the standard output format for certain numeric conversions.  The specific effects are descr\hich\af4\dbch\af4\loch\f4 ibed with the conversion specifiers.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 One of the conversion operations shown below must appear as the last character of any conversion specifier.\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 d or i\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers\:formatting}}}{\hich\af4\dbch\af4\loch\f4 One argument is removed from the parameter list and written as a signed, d\hich\af4\dbch\af4\loch\f4 ecimal number.  If the l flag is used, the argument should be of type long; otherwise, the value should be of type int.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 If there is no precision specified, the sequence of digits created is as short as possible to represent the value.  If a precision is sp\hich\af4\dbch\af4\loch\f4 ecified, and the digit sequence is less than the precision, it is padded on the left with zeros to reach the specified number of digits.  If the precision is zero and the value is zero, no value is printed.  The default precision is one.\par \hich\af4\dbch\af4\loch\f4 The prefix is a - \hich\af4\dbch\af4\loch\f4 character is the argument is negative.  For a positive argument, the prefix is + if a + flag is used, a space if the space flag is used, and there is no prefix if neither flag is used.\par \hich\af4\dbch\af4\loch\f4 The # flag is not used by the d conversion specifier.\par \hich\af4\dbch\af4\loch\f4 The i format spec\hich\af4\dbch\af4\loch\f4 ifier is identical to the d designator.  It is included for compatibility with fscanf.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 u\tab One argument is removed from the parameter list and written as an unsigned, decimal number.  If the l flag is used, the argument should be of type unsigned long; othe\hich\af4\dbch\af4\loch\f4 rwise, the value should be of type unsigned int.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 If there is no precision specified, the sequence of digits created is as short as possible to represent the value.  If a precision is specified, and the digit sequence is less than the precision, it is padde\hich\af4\dbch\af4\loch\f4 d on the left with zeros to reach the specified number of digits.  If the precision is zero and the value is zero, no value is printed.  The default precision is one.\par \hich\af4\dbch\af4\loch\f4 The #, + and space flags are not used by the u conversion specifier.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 o\tab One argument is r\hich\af4\dbch\af4\loch\f4 emoved from the parameter list and written as an unsigned, octal}{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  number.  If the l flag is used, the argument should be of type unsigned long; otherwise, the value should be of type unsigned int.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 If there is no precision specified, the sequen\hich\af4\dbch\af4\loch\f4 ce of digits created is as short as possible to represent the value.  If a precision is specified, and the digit sequence is less than the precision, it is padded on the left with zeros to reach the specified number of digits.  If the precision is zero an\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  the value is zero, no value is printed.  The default precision is one.\par \hich\af4\dbch\af4\loch\f4 The + and space flags are not used by the o conversion specifier.\par \hich\af4\dbch\af4\loch\f4 If the # flag is used, the number is preceded with a leading zero.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 x or X\tab One argument is removed from the parameter \hich\af4\dbch\af4\loch\f4 list and written as an unsigned, hexadecimal}{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  number.  If the l flag is used, the argument should be of type unsigned long; otherwise, the value should be of type unsigned int.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 If there is no precision specified, the sequence of digits c\hich\af4\dbch\af4\loch\f4 reated is as short as possible to represent the value.  If a precision is specified, and the digit sequence is less than the precision, it is padded on the left with zeros to reach the specified number of digits.  If the precision is zero and the value is\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 zero, no value is printed.  The default precision is one.\par \hich\af4\dbch\af4\loch\f4 The + and space flags are not used by the x conversion specifier.\par \hich\af4\dbch\af4\loch\f4 If the # flag is used, the number is preceded by a leading 0x (for the x specifier) or 0X (for the X specifier).\par \hich\af4\dbch\af4\loch\f4 The x specifier cau\hich\af4\dbch\af4\loch\f4 ses the digits a through f and the x in the leading 0x (if present) to be written in lowercase, while the X specifier writes these as uppercase letters.  This is the only difference between the two specifiers.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 p\tab One pointer argument is removed from the pa\hich\af4\dbch\af4\loch\f4 rameter list and written as a pointer.  The format used to write a pointer is implementation-defined; in ORCA/C, %p is completely equivalent to %lX.\par \par \hich\af4\dbch\af4\loch\f4 c\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 characters\:formatting}}}{\hich\af4\dbch\af4\loch\f4 One argument is removed from the parameter list and written as a character\hich\af4\dbch\af4\loch\f4 .  The argument should be of type unsigned or int.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 If the value is not a valid ASCII character, it is still sent to the output device.  What effect this has depends on the device.  Unless you are familiar with the output device, and are deliberately using \hich\af4\dbch\af4\loch\f4 a character for some special effect, you should stick to characters with ordinal values from 0 to 127.\par \hich\af4\dbch\af4\loch\f4 The #, + and space flags are not used by the c conversion specifier.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 s\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strings\:formatting}}}{\hich\af4\dbch\af4\loch\f4 One argument is removed from the parameter list and wr\hich\af4\dbch\af4\loch\f4 itten as a string.  The argument should be of type char *, and should point to a null-terminated string.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 If no precision is specified, all characters up to, but not including the terminating null character are written to the output stream.  If a precision \hich\af4\dbch\af4\loch\f4 is specified, the number of characters written will be the smaller of the precision and the length of the string.\par \hich\af4\dbch\af4\loch\f4 The #, + and space flags are not used by the s conversion specifier.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 b\tab One argument is removed from the parameter list and written as a strin\hich\af4\dbch\af4\loch\f4 g.  The argument should be of type char *, and should point to a string with a length byte in the first character position.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 If no precision is specified, all characters except the length byte are written to the output stream.  Note that this gives one way \hich\af4\dbch\af4\loch\f4 of writing a null character to the output stream.  If a precision is specified, the number of characters written will be the smaller of the precision and the length of the string, as specified by the length byte.\par \hich\af4\dbch\af4\loch\f4 This conversion specifier is not present in\hich\af4\dbch\af4\loch\f4  ANSI C.\par \hich\af4\dbch\af4\loch\f4 The #, + and space flags are not used by the s conversion specifier.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 n\tab No characters are written to the output device.  One argument is used from the parameter list; it must be of type int *.  The number of characters that have been written up to\hich\af4\dbch\af4\loch\f4  this time by this formatting operation is saved to the specified location.\par \par \hich\af4\dbch\af4\loch\f4 f\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point\:formatting}}}{\hich\af4\dbch\af4\loch\f4 One argument is removed from the parameter list and written as a signed, floating-point number.  The argument can be of type float, double, com\hich\af4\dbch\af4\loch\f4 p or extended.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 If there is no precision specified, a precision of six is assumed.  The number produced consists of at least one leading digit, but no more than are needed to represent the whole part of the number.  This is followed by a decimal point and a\hich\af4\dbch\af4\loch\f4 ny fraction digits.  The precision determines how many fraction digits are present.\par \hich\af4\dbch\af4\loch\f4 If the precision is zero, no fraction digits are written.  The decimal point is also not written unless the # specifier is used.\par \hich\af4\dbch\af4\loch\f4 If the value cannot be represented accurate\hich\af4\dbch\af4\loch\f4 ly in the precision allowed, it is still written.  The value is simply rounded to the closest value to the correct one.\par \hich\af4\dbch\af4\loch\f4 The prefix is a - character if the argument is negative.  For a positive argument, the prefix is + if a + flag is used, a space if the s\hich\af4\dbch\af4\loch\f4 pace flag is used, and there is no prefix if neither flag is used.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 e or E\tab One argument is removed from the parameter list and written as a signed, floating-point number.  The argument can be of type float, double, comp or extended.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 The value written is in\hich\af4\dbch\af4\loch\f4  exponential format.  It consists of a leading digit of 1 through 9 (or 0 if the actual value is 0), followed by a decimal point and any remaining digits.  This is followed by an exponent, which is an e (for the e specifier) or E (for the E specifier), fo\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 lowed by a plus or minus sign, and at least two exponent digits.  If more than three digits are needed to express the exponent, then as few as possible are printed to represent the value.\par \hich\af4\dbch\af4\loch\f4 The precision specifies how many digits appear after the decimal poi\hich\af4\dbch\af4\loch\f4 nt.  If no precision is given, a precision of six is used.  If the precision is zero, the decimal point and digits are omitted unless the # flag is present, in which case the decimal point is printed, but no digits follow the decimal point.\par \hich\af4\dbch\af4\loch\f4 The prefix is a\hich\af4\dbch\af4\loch\f4  - character if the argument is negative.  For a positive argument, the prefix is + if a + flag is used, a space if the space flag is used, and there is no prefix if neither flag is used.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 g or G\tab One argument is removed from the parameter list and written \hich\af4\dbch\af4\loch\f4 as a signed, floating-point number.  The argument can be of type float, double, comp or extended.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\hich\af4\dbch\af4\loch\f4 The g specifier is used to print a value in either exponential or fraction format, depending on which size is more appropriate.  If the exponent for the numbe\hich\af4\dbch\af4\loch\f4 r is less than -3 or greater than or equal to the precision specified, the e format specifier is used.  When this happens, the effect is as if the e specifier was used with a # flag and a precision one less than the precision given for the g specifier.  I\hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4  no precision is specified, a precision of six is assumed; a precision less than or equal to zero is converted to a precision of one.\par \hich\af4\dbch\af4\loch\f4 If the exponent value is greater than or equal to -3, and less than or equal to the precision, the number is formed using \hich\af4\dbch\af4\loch\f4 the rules for the f format specifier, with a precision equal to the specified precision less the value of the exponent, and again assuming that the # flag was used.\par \hich\af4\dbch\af4\loch\f4 If the # flag was specified for the g conversion specifier, the resulting number is the one\hich\af4\dbch\af4\loch\f4  sent to the output stream.  If the # specifier is not present, any trailing fractional zeros are stripped from the number.  If all of the fractional digits are zero, the decimal point is also removed.\par \hich\af4\dbch\af4\loch\f4 The prefix is a - character if the argument is negativ\hich\af4\dbch\af4\loch\f4 e.  For a positive argument, the prefix is + if a + flag is used, a space if the space flag is used, and there is no prefix if neither flag is used.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\tx2160\adjustright {\par \hich\af4\dbch\af4\loch\f4 %\tab The % specifier is used to write a % character to the output stream.  No arguments are removed from the \hich\af4\dbch\af4\loch\f4 stack.  Note that the minimum field width, the - justification character and the pad characters are still used with the % specifier.  The precision specifier and all other flags have no effect.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("Hello, world.\\n");\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 10; ++i)\par \hich\af2\dbch\af4\loch\f2    print\hich\af2\dbch\af4\loch\f2 f("%d\\n", i);\par \par \hich\af2\dbch\af4\loch\f2 str = "Hello, world.";  /* NOTE: str is defined as char *str */\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < strlen(*str); ++i)\par \hich\af2\dbch\af4\loch\f2    printf("%*s\\n", i, str);\par \par \hich\af2\dbch\af4\loch\f2 printf("x          sin(x)     cos(x)\\n");\par \hich\af2\dbch\af4\loch\f2 printf("-          ------     ------\\n");\par \hich\af2\dbch\af4\loch\f2 for (x = 0.0; x < pi; x += pi\hich\af2\dbch\af4\loch\f2 /10)\par \hich\af2\dbch\af4\loch\f2    printf("%10f %10f %10f\\n", x, sin(x), cos(x));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fputc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fputc}}}{\tab \hich\af4\dbch\af4\loch\f4 putc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 putc}}}{\tab \hich\af4\dbch\af4\loch\f4 putchar}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 putchar}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int fputc(char c, FILE *stream);\par \hich\af2\dbch\af4\loch\f2 int putc(char c, FILE *stream);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int putchar(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These functions are used to write \hich\af4\dbch\af4\loch\f4 characters to an output stream.  The function fputc and the macro putc do exactly the same thing:  the only difference is that fputc is implemented as a function, while putc is implemented as a macro.  In each case, the character supplied as a parameter i\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  written to the specified output stream and returned as the value of the function.  If an error occurs during the write, EOF is returned instead of the character supplied as a parameter.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\hich\af4\dbch\af4\loch\f4 The function putchar works like an fputc(c,st\hich\af4\dbch\af4\loch\f4 dout), writing a character to standard out.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* write the printing ASCII characters to standard out */\par \hich\af2\dbch\af4\loch\f2 for (i = 32; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    putchar(i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fputs}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fputs}}}{\tab \hich\af4\dbch\af4\loch\f4 puts}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 puts}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int fputs(char *s, FILE *stream);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int puts(char *s);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 he function fputs writes the characters in a null-terminated string to an output stream.  The string is not followed by a line feed, although any line feed in the string is written.  If the write is successful, zero is returned; otherwise, EOF is returned\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 The function puts is similar, but it writes the string to standard out.  In addition, puts always writes a line feed character after writing the string.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 puts("Hello, world.");\par \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fread}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fread}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 size_t fread(void *\hich\af2\dbch\af4\loch\f2 ptr, size_t element_size, size_t count,\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2              FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fread reads characters from a stream, placing them in a memory location pointed to by ptr.  The array should be at least count elements long, with each element element_size by\hich\af4\dbch\af4\loch\f4 tes long.  The value returned is the actual number of elements read, which can be less than count if an error occurs (in which case zero is returned) or an end of file is found (in which case the number of items read before the end of file was encountered\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is returned).  If either count or element_size is zero, no characters are read, and zero is returned.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 numItems = fread(array, sizeof(element), 40, myFile);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 free}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 free}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 void free(void *ptr);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void cfree(void *ptr);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fre\hich\af4\dbch\af4\loch\f4 e is used to deallocate memory allocated using malloc, calloc or realloc.  Once deallocated, the memory can be reused by subsequent calls to malloc or calloc.  Memory allocated by malloc is allocated from the toolbox Memory Manager either as a single chun\hich\af4\dbch\af4\loch\f4 k\hich\af4\dbch\af4\loch\f4  of memory (for requests over 4K bytes), or as a smaller part of a 4K byte piece of memory.  For large chunks of memory, free returns the memory to Apple's Memory Manager, allowing other programs and tools to use the memory.  For smaller pieces of memory,\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 free will only return the memory to Apple's Memory Manager if all of the individual pieces have been freed.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 cfree}}}{\hich\af4\dbch\af4\loch\f4 Older C libraries require memory allocated with calloc to be freed with a call to cfree, rather than free.  In ANSI C, cfree has been \hich\af4\dbch\af4\loch\f4 deleted, and free is used to deallocate all memory.  In ORCA/C, cfree has been retained as a macro that calls free for compatibility with old programs.\par \hich\af4\dbch\af4\loch\f4 See also malloc.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* deallocate space for the array pointed to by aPtr */\par \hich\af2\dbch\af4\loch\f2 free(aPtr);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 freopen\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fopen.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 frexp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 frexp}}}{\tab \hich\af4\dbch\af4\loch\f4 ldexp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ldexp}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par \hich\af2\dbch\af4\loch\f2 extended frexp(extended x, int *nptr);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended ldexp(extended x, int n);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function frexp splits a floating-point number into a mantissa and exponent.  The mantissa is returned as the result, an\hich\af4\dbch\af4\loch\f4 d the exponent is saved to the integer pointed to by nptr.  The mantissa will lie in the range 0.5 inclusive to 1.0 exclusive.  The mantissa times 2 raised to the exponent will give the original argument x.  If x is zero, n is set to zero and zero is retu\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ned.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\hich\af4\dbch\af4\loch\f4 The function ldexp reverses the effect of frexp.  The argument x is multiplied by 2 raised to the power n, and the result is returned.  If an error occurs, errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 mantissa = frexp(val, &exponent);\par \hich\af2\dbch\af4\loch\f2 val = ldexp(mantissa,\hich\af2\dbch\af4\loch\f2  exponent);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fscanf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fscanf}}}{\tab \hich\af4\dbch\af4\loch\f4 scanf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 scanf}}}{\tab \hich\af4\dbch\af4\loch\f4 sscanf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sscanf}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int fscanf(FILE *stream, char *format, ...);\par \hich\af2\dbch\af4\loch\f2 int scanf(char *format, ...);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int sscanf(char *s, char *format, ...);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These three functions are used to read formatt\hich\af4\dbch\af4\loch\f4 ed input.  In each case, a format string controls the number of items read, what type they are, and several other characteristics.  The only difference between the three functions is the source of the characters to format.  The fscanf function reads chara\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ters from any stream that is open for input.  The scanf function is similar, but always takes its characters from standard in.  The sscanf function reads the characters from a null-terminated string.\par \hich\af4\dbch\af4\loch\f4 Each of the functions returns the number of successful s\hich\af4\dbch\af4\loch\f4 can operations.  For example, if the function call is set up to read four integers, and all four are read successfully, the value four is returned.  If an input/output error, end of file condition, or improper input data forces the read to stop early, onl\hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4  the number of successful scans is returned.  If an end of file is encountered before any assignments are made, the functions return EOF.  For the purpose of sscanf, the null terminator at the end of the string is treated as an end of file.\par \hich\af4\dbch\af4\loch\f4 The format stri\hich\af4\dbch\af4\loch\f4 ng describes how many variables should be read, as well as several other characteristics about the input.  It consists of three kinds of characters.\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 white space\tab If a white space character is found in the format string, the scanner skips to the next non-wh\hich\af4\dbch\af4\loch\f4 ite space character.  All white space characters are also read from the input stream.  The effect, then, is that any white space in the format string causes all white space in the input stream to be skipped.\par \par \hich\af4\dbch\af4\loch\f4 conversions\tab Conversion specifiers start with a \hich\af4\dbch\af4\loch\f4 % character.  The syntax for a conversion specifier is quite complex, so its format will be discussed later.\par \par \hich\af4\dbch\af4\loch\f4 other characters\tab Any other character must match a character read from the input stream.  If the character in the format string does not match the \hich\af4\dbch\af4\loch\f4 character in the input stream, the scanner stops.  The character that caused the mismatch is left in the input stream for the next input call.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 There must be exactly one variable in the parameter list for each conversion specifier.  (There is an exception \hich\af4\dbch\af4\loch\f4 to this rule; it will be discussed when the format is explained.)  The types of the format specifiers must match the type of the parameter exactly.  The parameters are all pointers to a variable location; once a value is read by the scanner, it is stored \hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 t the location pointed to by the parameter.\par \hich\af4\dbch\af4\loch\f4 Each conversion specifier has the following fields, in the order listed.  Some of the fields are optional; if so, this is mentioned in the text.\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 %\tab All conversion specifiers start with the % character.\par \par \hich\af4\dbch\af4\loch\f4 *\tab The ast\hich\af4\dbch\af4\loch\f4 erisk is an assignment suppression flag.  If present, it tells the scanner that it should read a value from the input stream, but that the value will not be saved.  When the assignment suppression flag is used, a pointer is not removed from the variable p\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 rameter list.\par \par \hich\af4\dbch\af4\loch\f4 unsigned int\tab An optional unsigned decimal constant specifies the maximum field width.  If this field is present, no more than the specified number of characters will be read from the input stream.  It is possible, however, that fewer than th\hich\af4\dbch\af4\loch\f4 e specified number of characters will be read.  The field width must be greater than zero.\par \par \hich\af4\dbch\af4\loch\f4 h or l\tab This optional field is a size specifier.  When used with an integer variable, h indicates that the variable is short, and l indicates that the variable is lo\hich\af4\dbch\af4\loch\f4 ng.  The l specifier can also be used with the floating-point types, where it indicates a double variable.  The h and l specifiers are used with the d, u, o x or X format specifiers.  In addition, the l specifier can be used with the f, e, E, g, or G floa\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ing-point specifiers.  These specifiers are ignored when used with any other format specifier.\par \par \hich\af4\dbch\af4\loch\f4 conversion\tab The conversion specifier tells what type of variable is being read.  This field is required.  Each of the individual conversion operators is describe\hich\af4\dbch\af4\loch\f4 d below.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 There are a variety of conversion specifiers used to describe the variable to be read.  These are shown in the table below.\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 d\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 integers\:scanning}}}{\hich\af4\dbch\af4\loch\f4 A signed decimal value is read from the stream, converted to the internal format used by the \hich\af4\dbch\af4\loch\f4 65816, and saved.  The type of the pointer for this operation must be short * if the h size specifier is used, int * if no specifier is used, or long * if the l size specifier is used.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The scanner starts by skipping any white space characters in the input \hich\af4\dbch\af4\loch\f4 stream.  These are not counted toward the maximum field width if one is specified.  An optional sign is then allowed (+ or -).  Next, the scanner expects zero or more decimal digits.  Digits are read until a non-digit character is found, and end-of-file i\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  encountered, or the maximum field width is reached.  The digits read are then converted into a signed decimal integer and saved.  If there are no digits, the resulting value is zero.\par \hich\af4\dbch\af4\loch\f4 The results are not predictable if an overflow occurs.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 i\tab This format sp\hich\af4\dbch\af4\loch\f4 ecifier is identical to the d format specifier, except that octal}{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  and hexadecimal}{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  numbers can be read.  A number is considered to be octal if the first digit is a zero and the next character is not an x or X.  A number is \hich\af4\dbch\af4\loch\f4 considered to be hexadecimal if the first two characters (after a leading sign) are 0x or 0X.  Scanning of an octal number stops when a non-octal digit is found.  Scanning of a hexadecimal number stops when a non-hexadecimal digit is found.  The rules for\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 converting the characters into a number are identical to those used by the compiler, but a trailing type marker is not allowed.\par \par \hich\af4\dbch\af4\loch\f4 u\tab An unsigned decimal value is read from the stream, converted to the internal format used by the 65816, and saved.  The type o\hich\af4\dbch\af4\loch\f4 f the pointer for this operation must be short * if the h size specifier is used, int * if no specifier is used, or long * if the l size specifier is used.  Except for the fact that a leading sign is not allowed and the numbers are unsigned, this conversi\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 n specifier is identical to the d specifier used for signed decimal conversion.\par \par \hich\af4\dbch\af4\loch\f4 o\tab An unsigned octal}{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  value is read from the stream, converted to the internal format used by the 65816, and saved.  The type of the pointer for this operation mus\hich\af4\dbch\af4\loch\f4 t be short * if the h size specifier is used, int * if no specifier is used, or long * if the l size specifier is used.  No leading sign is allowed, and only octal digits are scanned, but with those exceptions, scanning works exactly like scanning of a si\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4 ned decimal integer with a format specifier of d.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 While ORCA/C will stop scanning if an 8 or 9 is encountered in the input stream; the way these digits are handled is not consistent across all compilers.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 x or X\tab An unsigned decimal value is read from the s\hich\af4\dbch\af4\loch\f4 tream, converted to the internal format used by the 65816, and saved.  The type of the pointer for this operation must be short * if the h size specifier is used, int * if no specifier is used, or long * if the l size specifier is used.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The scanner starts \hich\af4\dbch\af4\loch\f4 by skipping any white space characters in the input stream.  These are not counted toward the maximum field width if one is specified.  Next, the scanner expects zero or more hexadecimal}{\pard\plain \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  digits.  Digits are read until a non-hexadecimal \hich\af4\dbch\af4\loch\f4 digit character is found or the maximum field width is reached.  The digits read are then converted into an unsigned integer and saved.\par \hich\af4\dbch\af4\loch\f4 A leading 0x or 0X is allowed.  If these characters appear, they are skipped; they do count toward the maximum field wid\hich\af4\dbch\af4\loch\f4 th.\par \hich\af4\dbch\af4\loch\f4 The x and X conversions are identical.  Either conversion specifier will accept uppercase or lowercase hexadecimal digits.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 p\tab A pointer is read from the source stream, converted to the internal format used by the 65816, and saved.  Since the exact form\hich\af4\dbch\af4\loch\f4 at of a pointer is implementation-defined, this conversion specifier should only be used to read pointers written with the %p conversion specifier with one of the print commands, like printf.\par \par \hich\af4\dbch\af4\loch\f4 c\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 characters\:scanning}}}{\hich\af4\dbch\af4\loch\f4 The pointer that is used from the\hich\af4\dbch\af4\loch\f4  variable list should be of type char *.  If no field width is specified, exactly one character is read from the input stream and saved at the specified location.  If an end of file condition exists, the conversion fails.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 If a field width is specified, the\hich\af4\dbch\af4\loch\f4  pointer should point to an array of characters that can hold as many characters as the maximum field width.  Unless an end of file condition occurs, characters are read and stored in the array until the entire field width has been read.  No terminating n\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 ll character is appended to the end of the array.  The conversion operation fails, and no characters are saved, if an end of file is found before the entire field width has been processed.\par \hich\af4\dbch\af4\loch\f4 Note that leading white space characters are not skipped by this co\hich\af4\dbch\af4\loch\f4 nversion.\par \hich\af4\dbch\af4\loch\f4 While a size specifier can be present, it is ignored.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 s\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strings\:scanning}}}{\hich\af4\dbch\af4\loch\f4 One pointer argument of type char * is used.  A string is read from the stream and placed at the specified location.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The scanner starts by skipping any white space \hich\af4\dbch\af4\loch\f4 characters in the input stream.  These are not counted toward the maximum field width if one is specified.  Characters are read until an end of file is found, a white space character is found, or the maximum field width is reached (if one is specified).  \hich\af4\dbch\af4\loch\f4 A\hich\af4\dbch\af4\loch\f4  null character is added to the end of the characters read.  If an end of file is encountered before any non-white space characters have been found, the conversion operation fails.\par \hich\af4\dbch\af4\loch\f4 While a size specifier can be present, it is ignored.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 b\tab The b format speci\hich\af4\dbch\af4\loch\f4 fier works exactly like the s format specifier, except that a string with a leading length byte is saved.  The string also has a null terminator.  If the input string is longer than 255 characters, the resulting string will be n mod 256 characters long, w\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 ere n is the actual number of characters read.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 Note that this conversion specifier is not present in ANSI C.  It is included in ORCA/C to make it easier to deal with p-strings, which are used extensively by the toolbox.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 n\tab No input is read from the stream,\hich\af4\dbch\af4\loch\f4  and any size or field width specifier is ignored.  One argument is used from the parameter list; it must be of type int *.  The number of successful conversions that have been performed up to this time by the scan operation is saved to the specified loca\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ion.\par \par \hich\af4\dbch\af4\loch\f4 f, e, E, g or G\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 floating-point\:scanning}}}{\hich\af4\dbch\af4\loch\f4 A signed decimal floating-point value is read from the stream, converted to the internal format used by the 65816, and saved.  The type of the pointer for this operation must be float * if no specifier \hich\af4\dbch\af4\loch\f4 is used, or double * if the l size specifier is used.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The scanner starts by skipping any white space characters in the input stream.  These are not counted toward the maximum field width if one is specified.  The number itself consists of an optional leadi\hich\af4\dbch\af4\loch\f4 ng sign, an optional digit sequence, an optional decimal point, another optional digit sequence, and an optional exponent.  The exponent, if present, consists of the character e or E, an optional sign, and an optional digit sequence.  If no digits appear \hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 efore the exponent, the resulting value is zero.  If no digits appear after the e or E character, the exponent value is zero.  If the value is too large to represent, the result is an infinity with an appropriate sign.  If the value is too small to repres\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 nt, the result is zero.  Note that the results of an overflow or underflow are not consistent across C compilers; other compilers may not return infinity or zero for overflow and underflow.\par \hich\af4\dbch\af4\loch\f4 All of these format specifiers are identical.  They will all accep\hich\af4\dbch\af4\loch\f4 t any form of floating-point value, with or without an exponent.\par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 %\tab A single % character is expected in the input stream.  The field with and size specifiers are ignored if present.  No pointer is used from the parameter list.\par \par \hich\af4\dbch\af4\loch\f4 [...]\tab }{\pard\plain \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strings\:scanning}}}{\hich\af4\dbch\af4\loch\f4 A string is read from the input stream.  A pointer of type char * is used from the parameter list; the characters read are stored at that location.\par }\pard \s16\qj\fi360\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 This specifier allows you to state exactly what characters are allowed in the input stream.  Any characte\hich\af4\dbch\af4\loch\f4 rs appearing between the [ and ] characters are allowed; any other characters are not allowed, and cause the scanner to stop.  The characters can be specified in any order, and duplicates are allowed.\par \hich\af4\dbch\af4\loch\f4 If the first character after the [ character is the ^ c\hich\af4\dbch\af4\loch\f4 haracter, the meaning of the characters is reversed.  In that case, the characters specified are not allowed in the input stream, and any characters not listed are accepted.\par \hich\af4\dbch\af4\loch\f4 Because of the syntax of the conversion specifier, it is not possible to specify a\hich\af4\dbch\af4\loch\f4  ^ character as the first character of a list of characters, nor is it possible to use the ] character in the list.\par \hich\af4\dbch\af4\loch\f4 Scanning continues until an end of file condition is reached, a character which is not in the allowed set of characters is found (in which c\hich\af4\dbch\af4\loch\f4 ase it remains unread), or, if a maximum field width is specified, the maximum number of characters have been read.  The characters are stored at the location specified by the pointer in the parameter list, and a terminating null character is added to the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 characters.\par \hich\af4\dbch\af4\loch\f4 While a size specifier can be present, it is ignored.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* echo a file of integers */\par \hich\af2\dbch\af4\loch\f2 while (fscanf(myFile, "%d", &i))\par \hich\af2\dbch\af4\loch\f2    printf("%d\\n", i);\par \par \hich\af2\dbch\af4\loch\f2 /* echo white space delimited words from a file */\par \hich\af2\dbch\af4\loch\f2 while (fscanf(myFile, "%50s", str))\par \hich\af2\dbch\af4\loch\f2    printf("%s\\n"\hich\af2\dbch\af4\loch\f2 , str);\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* read words consisting of characters from a file */\par \hich\af2\dbch\af4\loch\f2 while (fscanf(myFile, \par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2    "%50[abcdefghijklmnopqrstuvwxyz"\tab /* read a word */\par \hich\af2\dbch\af4\loch\f2    "ABCDEFGHIJKLMNOPQRSTUVWXYZ]"\par \hich\af2\dbch\af4\loch\f2    "%*[^abcdefghijklmnopqrstuvwxyz"\tab /* skip non-word chars */\par \hich\af2\dbch\af4\loch\f2    "ABCDEFGHIJKLMNOPQ\hich\af2\dbch\af4\loch\f2 RSTUVWXYZ]", str))\par \hich\af2\dbch\af4\loch\f2    printf("%s\\n", str);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fseek}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fseek}}}{\tab \hich\af4\dbch\af4\loch\f4 rewind}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 rewind}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int  fseek(FILE *stream, long offset, int wherefrom);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void rewind(FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The fseek function is used to position the file pointer in a file.  Str\hich\af4\dbch\af4\loch\f4 eam is the file to position.  Wherefrom is a code telling how to change the position.  Three methods of changing the position are currently defined, and are shown in the table below.  In ANSI C compilers, names are assigned for each of these codes; older \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ompilers use the numeric values for the codes.  Offset is the number of bytes to move by.  If an end of file condition exists when this call is made, it is cleared.  If an ungetc has been performed, its effects are ignored.  The fseek function returns zer\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4  if the call is successful, and non-zero if an error occurs.\par \par }\pard\plain \s31\qj\fi-2160\li2520\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1080\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 code\tab name\tab meaning\par }\pard\plain \s16\qj\fi-2160\li2520\sl223\slmult1\widctlpar\tx1080\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 0\tab SEEK_SET\tab Moves to offset bytes from the beginning of the file.\par \par \hich\af4\dbch\af4\loch\f4 1\tab SEEK_CUR\tab Moves offset characters from the current file position.  Offset can be a negative quantity, which c\hich\af4\dbch\af4\loch\f4 auses the file mark to move toward the start of the file.  If an attempt is made to move before the beginning of the file, the mark is set to the first byte in the file.  If an attempt is made to move past the end of the file, random bytes are added to ex\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 end the length of the file.\par \par \hich\af4\dbch\af4\loch\f4 2\tab SEEK_END\tab Moves offset bytes relative to the end of the file.  As with SEEK_CUR, an attempt to move before the start of the file moves to the start of the file, and an attempt to move past the end of the file extends the file \hich\af4\dbch\af4\loch\f4 to the necessary length with random bytes.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The rewind function is a simple form of the fseek function.  It is equivalent to a call to seek with an offset of zero and wherefrom set to SEEK_SET.\par \hich\af4\dbch\af4\loch\f4 See also ftell.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* read a record based on an index */\par \hich\af2\dbch\af4\loch\f2 fseek(m\hich\af2\dbch\af4\loch\f2 yFile, index*sizeof(record), SEEK_SET);\par \hich\af2\dbch\af4\loch\f2 fread(record, sizeof(record), 1, myFile);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fsetpos\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fgetpos.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ftell}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ftell}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 long int ftell(FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The ftell function returns the current file mark for an open stream.  In effect, thi\hich\af4\dbch\af4\loch\f4 s is the number of bytes between the start of the file and the next byte that will be read or written.  It is generally used to record a position, with the result supplied to fseek at a later time.\par \hich\af4\dbch\af4\loch\f4 If an error occurs, ftell returns -1L and sets errno to th\hich\af4\dbch\af4\loch\f4 e error number of the error detected.\par \hich\af4\dbch\af4\loch\f4 See also fseek.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 position = ftell(myFile);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 fwrite}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 fwrite}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 size_t fwrite(void *ptr, size_t element_size, size_t count,\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2               FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function fwrite writes count elements of \hich\af4\dbch\af4\loch\f4 an array with elements element_size bytes long to the output stream, taking the values from memory starting at the location indicated by ptr.  The function returns the actual number of array elements written, which will be less than count if an output err\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 r has occurred.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 fwrite(matrix, sizeof(float), 10*10, myFile);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 getc\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fgetc.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 getchar\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fgetc.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 getenv}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 getenv}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *getenv(const char *name)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The getenv call returns a pointer to the value of a shell variable.  If the shell var\hich\af4\dbch\af4\loch\f4 iable has not been set, or if the program is executing from outside of the ORCA programming environment, where shell variables do not exist, a NULL value is returned.\par \hich\af4\dbch\af4\loch\f4 Note that the meaning of getenv varies from environment to environment.  On other compute\hich\af4\dbch\af4\loch\f4 rs, getenv may return a value from a different source.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 gets\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fgets.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 gmtime\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See localtime.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isalnum}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isalnum}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isalnum(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isalnum is a macro that returns a non-zero value if the argument is an alphanumeric character, and \hich\af4\dbch\af4\loch\f4 zero if the argument is not an alphanumeric character.  The argument must lie in the range -1 to 255, or the result is not valid.  The alphanumeric characters are shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 0 1 2 3 4 5 6 7 8 9\par \hich\af2\dbch\af4\loch\f2 a b c d e f g h i j k l m n o p q r s t u v w x y z\par \hich\af2\dbch\af4\loch\f2 A B C D\hich\af2\dbch\af4\loch\f2  E F G H I J K L M N O P Q R S T U V W X Y Z\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isalnum(i))\par \hich\af2\dbch\af4\loch\f2       printf("%c is alphanumeric.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isalpha}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isalpha}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isalpha(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isalpha is a macro that returns a non-zero value if the arg\hich\af4\dbch\af4\loch\f4 ument is an alphabetic character, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not valid.  The alphabetic characters are show below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 a b c d e f g h i j k l m n o p q r s t u v w x y z\par \hich\af2\dbch\af4\loch\f2 A B C D E F G H I J K L M N \hich\af2\dbch\af4\loch\f2 O P Q R S T U V W X Y Z\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isalpha(i))\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2       printf("%c is alphabetic.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isascii}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isascii}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isascii(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isascii is a macro that returns a non-zero value if the argument's ordinal value i\hich\af4\dbch\af4\loch\f4 s in the range 0 to 127, which is the range if the ASCII character set used on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  It returns zero if the character is outside of the range of the ASCII character set.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = -500; i < 500; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isascii(i))\par \hich\af2\dbch\af4\loch\f2       printf("%d is the or\hich\af2\dbch\af4\loch\f2 dinal value of an ASCII character.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 iscntrl}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 iscntrl}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int iscntrl(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Iscntrl is a macro that returns a non-zero value if the argument is a control character, and zero if it is not.  The argument must lie in the range -\hich\af4\dbch\af4\loch\f4 1 to 255, or the result is not valid.  The control characters are all those characters with an ordinal range of 0 to 31, plus the character whose ordinal value is 127.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (iscntrl(i))\par \hich\af2\dbch\af4\loch\f2       printf("%d is the ordinal value of a\hich\af2\dbch\af4\loch\f2  control character.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 iscsym}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 iscsym}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int iscsym(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 iscsym is a macro that returns a non-zero value if the argument is a character that can appear in a C identifier, and zero if it cannot.  The argument must lie in the \hich\af4\dbch\af4\loch\f4 range -1 to 255, or the result is not valid.  The characters which can appear in a C identifier are shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 _\par \hich\af2\dbch\af4\loch\f2 0 1 2 3 4 5 6 7 8 9\par \hich\af2\dbch\af4\loch\f2 a b c d e f g h i j k l m n o p q r s t u v w x y z\par \hich\af2\dbch\af4\loch\f2 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i <\hich\af2\dbch\af4\loch\f2  128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (iscsym(i))\par \hich\af2\dbch\af4\loch\f2       printf("%c can appear in a C symbol.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 iscsymf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 iscsymf}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int iscsymf(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Iscsymf is a macro that returns a non-zero value if the argument is a character that can appear as the first cha\hich\af4\dbch\af4\loch\f4 racter of a C identifier, and zero if it cannot.  The argument must lie in the range -1 to 255, or the result is not valid.  The characters which can appear as the first character of a C identifier are shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 _\par \hich\af2\dbch\af4\loch\f2 a b c d e f g h i j k l m n o p q r s \hich\af2\dbch\af4\loch\f2 t u v w x y z\par \hich\af2\dbch\af4\loch\f2 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (iscsymf(i))\par \hich\af2\dbch\af4\loch\f2       printf("%c can appear as the first character in a C symbol.\\n", \par \hich\af2\dbch\af4\loch\f2          i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isdigit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isdigit}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isdigit(char \hich\af2\dbch\af4\loch\f2 c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isdigit is a macro that returns a non-zero value if the argument is one of the ten decimal digits, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not valid.  The ten decimal digits are shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 0 1 2 3 4 5 6\hich\af2\dbch\af4\loch\f2  7 8 9\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isdigit(i))\par \hich\af2\dbch\af4\loch\f2       printf("%c is a digit.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isgraph}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isgraph}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isgraph(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isgraph is a macro that returns a non-zero value if the argument is one of the printing characters, ot\hich\af4\dbch\af4\loch\f4 her than a space.  The argument must lie in the range -1 to 255, or the result is not valid.  See isprint for a list of the printing characters.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isgraph(i))\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2       printf("%c is a graph character.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 islower}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 islow\hich\af4\dbch\af4\loch\f4 er}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int islower(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Islower is a macro that returns a non-zero value if the argument is one of the lowercase alphanumeric characters, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not valid\hich\af4\dbch\af4\loch\f4 .  The lowercase alphanumeric characters are shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 a b c d e f g h i j k l m n o p q r s t u v w x y z\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (islower(i))\par \hich\af2\dbch\af4\loch\f2       printf("%c is a lowercase character.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isodigit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isodigit}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int\hich\af2\dbch\af4\loch\f2  isodigit(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isodigit is a macro that returns a non-zero value if the argument is one of the eight octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  digits, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not valid.  The eight octal digits a\hich\af4\dbch\af4\loch\f4 re shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 0 1 2 3 4 5 6 7\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isodigit(i))\par \hich\af2\dbch\af4\loch\f2       printf("%c is an octal digit.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isprint}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isprint}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isprint(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isprint is a macro that returns a non-zero value if the argument is \hich\af4\dbch\af4\loch\f4 one of the printing characters, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not valid.  The printing characters include the entire ASCII character set with the control characters removed.  This includes all chara\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ters with an ordinal value of 32 to 126.  The printing characters are shown below.  Note that the first printing character is a space.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2   ! " # $ % & ' ( ) * + , - . /\par \hich\af2\dbch\af4\loch\f2 0 1 2 3 4 5 6 7 8 9 : ; < = > ?\par \hich\af2\dbch\af4\loch\f2 @ A B C D E F G H I J K L M N O\par \hich\af2\dbch\af4\loch\f2 P Q R S T U V W X Y Z [ \\\hich\af2\dbch\af4\loch\f2  ] ^ _\par \hich\af2\dbch\af4\loch\f2 ` a b c d e f g h i j k l m n o\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 p q r s t u v w x y z \{ | \} ~\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isprint(i))\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2       printf("%c is a printing character.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ispunct}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ispunct}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int ispunct(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function ispunct is a \hich\af4\dbch\af4\loch\f4 macro that returns a non-zero value if the argument is one of the punctuation characters, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not valid.  The punctuation characters include the entire ASCII character set \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ith the control characters and alphanumeric characters removed.  This includes the space character, plus all of the characters shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` \{ | \} ~\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (ispunct(i))\par \hich\af2\dbch\af4\loch\f2      \hich\af2\dbch\af4\loch\f2  printf("%c is a punctuation character.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isspace}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isspace}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isspace(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isspace is a macro that returns a non-zero value if the argument is a white space character, and zero if it is not.  The argument must lie in th\hich\af4\dbch\af4\loch\f4 e range -1 to 255, or the result is not valid.  The white space characters include the space, tab, carriage return, new line, vertical tab and form feed characters.  These are the characters with ordinal values of 9 to 13 and 32.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isspace(i))\par \hich\af2\dbch\af4\loch\f2       printf("%d is the ordinal value of a white space character.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isupper}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isupper}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isupper(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isupper is a macro that returns a non-zero value if the argument is one of the uppercase alphanume\hich\af4\dbch\af4\loch\f4 ric characters, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not valid.  The uppercase alphanumeric characters are shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 isxdigit}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 isxdigit}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #includ\hich\af2\dbch\af4\loch\f2 e <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int isxdigit(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Isxdigit is a macro that returns a non-zero value if the argument is one of the sixteen hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  digits, and zero if it is not.  The argument must lie in the range -1 to 255, or the result is not val\hich\af4\dbch\af4\loch\f4 id.  The sixteen hexadecimal digits are shown below.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 0 1 2 3 4 5 6 7 8 9\par \hich\af2\dbch\af4\loch\f2 a b c d e f\par \hich\af2\dbch\af4\loch\f2 A B C D E F\par \par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (isxdigit(i))\par \hich\af2\dbch\af4\loch\f2       printf("%c is a hexadecimal digit.\\n", i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 labs\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See abs.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ldexp\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See frexp.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ldiv\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See div.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 localtime}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 lo\hich\af4\dbch\af4\loch\f4 caltime}}}{\tab \hich\af4\dbch\af4\loch\f4 gmtime}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 gmtime}}}{\tab \hich\af4\dbch\af4\loch\f4 mktime}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 mktime}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <time.h>\par \hich\af2\dbch\af4\loch\f2 typedef unsigned long time_t;\par \hich\af2\dbch\af4\loch\f2 struct tm \{\par \hich\af2\dbch\af4\loch\f2    int tm_sec;\tab /* seconds; 0 to 59 */\par \hich\af2\dbch\af4\loch\f2    int tm_min;\tab /* minutes; 0 to 59 */\par \hich\af2\dbch\af4\loch\f2    int tm_hour;\tab /* hours; 0 to 23 */\par \hich\af2\dbch\af4\loch\f2    int tm_mday;\tab /* day of th\hich\af2\dbch\af4\loch\f2 e month; 1 to 31 */\par \hich\af2\dbch\af4\loch\f2    int tm_mon;\tab /* month; 0 to 11 */\par \hich\af2\dbch\af4\loch\f2    int tm_year;\tab /* year; 0 == 1900 */\par \hich\af2\dbch\af4\loch\f2    int tm_wday;\tab /* day of week; sun == 0 to sat == 6 */\par \hich\af2\dbch\af4\loch\f2    int tm_yday;\tab /* day of year; 0 to 365 */\par \hich\af2\dbch\af4\loch\f2    int tm_isdst;\tab /* daylight savings time?; a boolean value */\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 struct tm *localtime(time_t *t);\par \hich\af2\dbch\af4\loch\f2 struct tm *gmtime(time_t *t);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 time_t mktime(struct tm *tmptr);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The localtime function takes a time encoded as an unsigned long integer and returns a structure with the various time fields filled in.  See the definitio\hich\af4\dbch\af4\loch\f4 n of the tm structure, above, for a description of the fields that are filled in.  On the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  there is no way of telling if the current time is daylight savings time, so localtime always returns false (zero) for that field.\par \hich\af4\dbch\af4\loch\f4 The gmtime function is de\hich\af4\dbch\af4\loch\f4 signed to return the time on the prime meridian, which runs through Greenwich England.  This time is known as Greenwich Mean Time, or GMT.  Since the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  does not have a way of knowing the difference between local time and GMT, the gmtime function r\hich\af4\dbch\af4\loch\f4 eturns the same values as localtime in ORCA/C.\par \hich\af4\dbch\af4\loch\f4 The mktime function takes a time structure as input and returns the time in the long integer format returned by the time function.  As a side effect, it also recomputes the tm_wday and tm_yday fields based on \hich\af4\dbch\af4\loch\f4 the values of the other fields.  It returns -1 if the call fails.\par \hich\af4\dbch\af4\loch\f4 See also time.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 curtime = time(NULL);\par \hich\af2\dbch\af4\loch\f2 t = *localtime(&curtime);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 log}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 log}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended log(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDOM}}}{\hich\af4\dbch\af4\loch\f4 The natural logarithm of the argument \hich\af4\dbch\af4\loch\f4 is returned.  If the argument is negative, errno is set to EDOM.  If the argument is zero or close to zero, a range error occurs and errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 res = log(x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 log10}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 log10}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended log10(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDOM}}}{\hich\af4\dbch\af4\loch\f4 The base-10 logarithm of the argument is returned.  If the argument is negative, errno is set to EDOM.  If the argument is zero or close to zero, a range error occurs and errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 res = log10(x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 longjmp\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See setjmp.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 lseek}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 lse\hich\af4\dbch\af4\loch\f4 ek}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 long lseek(int filds, long offset, int whence);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Repositions the file pointer, so that the next read or write occurs from a new position.  The position is specified by offset.  }{\i \hich\af4\dbch\af4\loch\f4 whence}{\hich\af4\dbch\af4\loch\f4  indicates one of the following:\par \par \hich\af4\dbch\af4\loch\f4 0\tab The file poin\hich\af4\dbch\af4\loch\f4 ter is set to offset bytes from the start of the file.\par \hich\af4\dbch\af4\loch\f4 1\tab The file pointer is set to the current position plus offset bytes.\par \hich\af4\dbch\af4\loch\f4 2\tab The file pointer is set to offset bytes from the end of the file.\par \par \hich\af4\dbch\af4\loch\f4 If the call is successful, the function returns 0; otherwise, a\hich\af4\dbch\af4\loch\f4  -1 is returned and errno is set as indicated in the list below.\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not required by the ANSI C standard, and should be avoided if possible.\par \hich\af4\dbch\af4\loch\f4 See also fseek.\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Possible errors\par }{\par \hich\af4\dbch\af4\loch\f4 EBADF\tab Old is not a valid fi\hich\af4\dbch\af4\loch\f4 le descriptor.\par \hich\af4\dbch\af4\loch\f4 EINVAL\tab whence is not 0, 1 or 2.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 malloc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 malloc}}}{\tab \hich\af4\dbch\af4\loch\f4 calloc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 calloc}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 void *malloc(size_t size);\par \hich\af2\dbch\af4\loch\f2 void *mlalloc(size_t size);\par \hich\af2\dbch\af4\loch\f2 void *calloc(size_t count, size_t size);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void *clalloc(size_t count, size_t size);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The fun\hich\af4\dbch\af4\loch\f4 ction malloc allocates size bytes of memory and returns a pointer to the first byte of that memory.  If there is not enough free memory to satisfy the request, or if the size is zero, malloc returns NULL.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memory manager}}}{\hich\af4\dbch\af4\loch\f4 On the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , memory is\hich\af4\dbch\af4\loch\f4  allocated through Apple's Memory Manager.  If you ask for more than 4096 bytes of memory, the memory will be requested from the Memory Manager in a single chunk.  There is no guarantee that the memory will not cross a bank boundary.  While special memory\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is only used if all other memory has already been allocated, there is also no guarantee that the memory will not be special memory.  (Special memory consists of memory from banks 0, 1, 0xE0, and 0xE1.  This memory is used for special purposes on the Apple\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .)  If a call to malloc is made asking for less than 4096 bytes of memory, 4096 bytes are still allocated from the Memory Manager.  This memory is then subdivided by the compiler's run-time memory manager to satisfy other requests for small amounts of \hich\af4\dbch\af4\loch\f4 memory, taking a burden off of the toolbox's Memory Manager.\par \hich\af4\dbch\af4\loch\f4 The calloc function accepts two parameters, a count and a size.  Enough memory is allocated to hold count elements of size size, using the same mechanism for allocating memory as is used by mallo\hich\af4\dbch\af4\loch\f4 c.  All of the allocated memory is then set to zero.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 mlalloc}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 clalloc}}}{\hich\af4\dbch\af4\loch\f4 Older C libraries often restrict malloc and calloc to a parameter of size unsigned, which would limit these functions to allocating 64K bytes of memory at a time.  ANSI C \hich\af4\dbch\af4\loch\f4 requires parameters of type unsigned long, and eliminates mlalloc, which is used in older compilers when more than 64K bytes of memory is needed.  ORCA/C still includes mlalloc as a macro which calls malloc, but its use should be avoided in new programs. \hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 The function clalloc was provided for similar reasons; again, clalloc is a macro in ORCA/C; it calls calloc.\par \hich\af4\dbch\af4\loch\f4 See also free, realloc.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* allocate space for the array pointed to by aPtr */\par \hich\af2\dbch\af4\loch\f2 aPtr = malloc(sizeof(*aPtr));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 memchr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memchr}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string\hich\af2\dbch\af4\loch\f2 .h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void *memchr(const void *ptr, int val, size_t len);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function memchr searches for a byte with the value val starting at the location pointed to by ptr for a maximum of len bytes.  If a matching byte is found, a pointer to that byte is returned.  If \hich\af4\dbch\af4\loch\f4 a matching byte is not found, a null pointer is returned.\par \hich\af4\dbch\af4\loch\f4 See also strchr.  Unlike strchr, memchr does not stop if a zero value is found.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* skip to the next line in a TXT file */\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 file = ((char *) memchr(file, '\\r', 255))+1;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 memcmp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memcmp}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include\hich\af2\dbch\af4\loch\f2  <string.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int memcmp(void *ptr1, void *ptr2, size_t len);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function memcmp compares two areas of memory, one starting at ptr1, and the other starting at ptr2, for a length of len bytes.  If all bytes match, memcmp returns zero.  If a byte is found tha\hich\af4\dbch\af4\loch\f4 t does not match, a negative number is returned if the byte pointed to by ptr1 is less than the byte pointed to by ptr2, and a positive value is returned otherwise.\par \hich\af4\dbch\af4\loch\f4 See also strcmp.  Unlike strcmp, memcmp does not stop if null characters are found.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* see\hich\af2\dbch\af4\loch\f2  if two files loaded into memory are equal */\par \hich\af2\dbch\af4\loch\f2 if (memcmp(file1, file2, fileLen) == 0)\par \hich\af2\dbch\af4\loch\f2    printf("The files are equal.\\n");\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 memcpy}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memcpy}}}{\tab \hich\af4\dbch\af4\loch\f4 memmove}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memmove}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par \hich\af2\dbch\af4\loch\f2 void *memcpy(const void *dest, void *src, size_t len);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void *memmov\hich\af2\dbch\af4\loch\f2 e(void *dest, const void *src, size_t len);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function memcpy copies len bytes from the location starting at src to the location starting at dest.  It returns the value of src.  If the memory areas overlap, the results are unpredictable.  The function me\hich\af4\dbch\af4\loch\f4 mmove is similar, but is guaranteed to work if the memory areas overlap.  Regardless of the location of the memory areas, memmove will produce a faithful copy of the original memory area at the destination.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* initialize a doubly-subscripted array row-by-\hich\af2\dbch\af4\loch\f2 row */\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < maxCol; ++i)\par \hich\af2\dbch\af4\loch\f2    a[0][i] = 1.0;\par \hich\af2\dbch\af4\loch\f2 for (i = 1; i < maxRow, ++i)\par \hich\af2\dbch\af4\loch\f2    memcpy(a[i], a[0], sizeof(a[0]));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 memmove\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See memcpy.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 memset}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memset}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void *memset(const void *ptr, int val, size_t len);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function memset co\hich\af4\dbch\af4\loch\f4 pies the value val into an area len bytes long, starting at ptr.  It returns the value of ptr.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* clear a large array */\par \hich\af2\dbch\af4\loch\f2 memset(array, 0, sizeof(array));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 mktime\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See localtime.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 mlalloc\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See malloc.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 modf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 modf}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended modf(extended \hich\af2\dbch\af4\loch\f2 x, int *nptr);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function modf returns the fraction part of the argument x.  As a side effect, the integer part is placed in the location pointed to by nptr.  The fraction part and integer part will have the same sign.\par \hich\af4\dbch\af4\loch\f4 See also fmod.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 res = modf(x, &i);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 offsetof}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 offsetof}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stddef.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 size_t offsetof(type, member);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The offsetof macro returns the position of a structure member within a structure.  The first input is a struct type.  It must be defined in such a way that the expression\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 &(type \hich\af2\dbch\af4\loch\f2 *)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 is legal; for example, any type defined like this:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef struct type \{...\} type;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 will work.  The second parameter is the name of a variable in the structure. The value returned is the number of bytes that occur before the member in the structure.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 pen}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 open}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int open(char *path, int oflag);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Creates a new file or opens an existing one for output.\par \hich\af4\dbch\af4\loch\f4 The }{\i \hich\af4\dbch\af4\loch\f4 oflag}{\hich\af4\dbch\af4\loch\f4  parameter is formed by oring one or more of the following flags.\par \par }\pard \s16\qj\fi-1440\li1800\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 O_RDONLY\tab Open for read only.\par \hich\af4\dbch\af4\loch\f4 O_WRONLY\tab Open for write on\hich\af4\dbch\af4\loch\f4 ly.\par \hich\af4\dbch\af4\loch\f4 O_RDWR \tab Open for both reading and writing.\par \hich\af4\dbch\af4\loch\f4 O_NDELAY\tab Not used on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  Included for UNIX compatibility.\par \hich\af4\dbch\af4\loch\f4 O_APPEND \tab If this flag is set, the file pointer is advanced to the end of the file before every write operation.\par \hich\af4\dbch\af4\loch\f4 O_CREAT\tab If the file does \hich\af4\dbch\af4\loch\f4 not exists, one is created.\par \hich\af4\dbch\af4\loch\f4 O_TRUNC\tab If the file exists, the length is set to 0 after opening the file.\par \hich\af4\dbch\af4\loch\f4 O_EXCL\tab If O_EXCL and O_CREAT are both set and the file exists, the call fails.\par \hich\af4\dbch\af4\loch\f4 O_BINARY\tab The file opened is a binary (BIN) file, rather than the default t\hich\af4\dbch\af4\loch\f4 ext (TXT) file.  For text files, \\n characters are translated to \\r characters on output, and \\r characters are translated to \\n characters on input, conforming to Apple\~II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  conventions.  For binary files, no such conversion is performed.\par \par \tab \hich\af4\dbch\af4\loch\f4 This flag is u\hich\af4\dbch\af4\loch\f4 nique to the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 If the call is successful, the function returns 0; otherwise, a -1 is returned and errno is set as indicated in the list below.\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Possible errors\par }{\par \hich\af4\dbch\af4\loch\f4 EACCES\tab An I/O error or invalid pathname prevented opening of the file.\par \hich\af4\dbch\af4\loch\f4 EEXIST\tab O_CREA\hich\af4\dbch\af4\loch\f4 T and O_EXCL are set, and the file exists.\par \hich\af4\dbch\af4\loch\f4 EMFILE\tab OPEN_MAX files are already open.\par \hich\af4\dbch\af4\loch\f4 ENOENT\tab O_CREAT is not set and the file does not exist.\par \hich\af4\dbch\af4\loch\f4 ENOENT\tab The pathname is null.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not required by the ANSI C sta\hich\af4\dbch\af4\loch\f4 ndard, and should be avoided if possible.\par \hich\af4\dbch\af4\loch\f4 See also fopen.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 p2cstr\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See c2pstr.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 pow\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended pow(extended x, extended y);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDOM}}}{\hich\af4\dbch\af4\loch\f4 The argument x is raised to the power of the argument y, and the result is returned.  If x \hich\af4\dbch\af4\loch\f4 is not zero, but y is zero, 1.0 is returned.  If x is zero and y is positive, 0.0 is returned.  Domain errors will occur if x is negative and y is not an integer, or if x is zero and y is zero or negative.  In these cases, errno is set to EDOM.  Range err\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 rs can also occur; in these cases, errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 cube = pow(num, 3.0);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 putc\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fputc.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 putchar\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fputc.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 puts\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fputs.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 qsort}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 qsort}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 void qsort(void *base, size_t count, size_t size, \par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2            int (*compar)(const v\hich\af2\dbch\af4\loch\f2 oid *ptr1, const void *ptr2));\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The qsort function sorts an array.  The array has count elements, each of which is size bytes long.  The base parameter points to the first element of the array.  The function compar is supplied by the program; it accepts two\hich\af4\dbch\af4\loch\f4  pointers as arguments, each of which points to an element of the array, and returns an integer as a result.  The value returned is 0 if the first element is the same as the second, -1 if the first element is less than the second, and 1 if the first eleme\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 t is greater than the second.  After the call, the array will be sorted in ascending order.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int CompareZip(address *addr1, address *addr2)\par \par \{\par \hich\af2\dbch\af4\loch\f2 if (addr1->zip == addr2.zip)\par \hich\af2\dbch\af4\loch\f2    return 0;\par \hich\af2\dbch\af4\loch\f2 if (addr1->zip < addr2.zip)\par \hich\af2\dbch\af4\loch\f2    return -1;\par \hich\af2\dbch\af4\loch\f2 return 1;\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \hich\af2\dbch\af4\loch\f2 ...\par \hich\af2\dbch\af4\loch\f2 /* sort the \hich\af2\dbch\af4\loch\f2 addresses by zip code */\par \hich\af2\dbch\af4\loch\f2 qsort(addressList, listSize, sizeof(address), CompareZip);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 raise}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 raise}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <signal.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int raise(int sig);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The raise function generates a signal that will be handled by the signal handler.  See signal for a way to insta\hich\af4\dbch\af4\loch\f4 ll a signal handler and a description of signals.\par \hich\af4\dbch\af4\loch\f4 The function returns 0 if the sig parameter is valid, and 1 if it is not.  If the signal is not valid, errno is also set to ERANGE.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 rand}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 rand}}}{\tab \hich\af4\dbch\af4\loch\f4 srand}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 srand}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 #define RAND_MAX\hich\af2\dbch\af4\loch\f2  32767\par \hich\af2\dbch\af4\loch\f2 int  rand(void);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void srand(int seed);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function srand is used to initialize a pseudo-random number generator.  Subsequent calls to rand will return integers in the range 0 to RAND_MAX.\par \hich\af4\dbch\af4\loch\f4 Choosing a seed value is very important.  If the same seed i\hich\af4\dbch\af4\loch\f4 s used each time a program is executed, the program will always return the same pseudo-random number sequence.  The seed should be chosen in such a way that it will be fairly random itself.  One way of choosing a seed that works in most situations is to u\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 e the seconds in the current time of day.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 time_t t;\par \hich\af2\dbch\af4\loch\f2 struct tm trec;\par \par \hich\af2\dbch\af4\loch\f2 t = time(NULL);\par \hich\af2\dbch\af4\loch\f2 trec = *localtime(&t);\par \hich\af2\dbch\af4\loch\f2 srand(trec.tm_sec);\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < 100; ++i)\par \hich\af2\dbch\af4\loch\f2    printf("%8d", rand());\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 read}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 read}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int read(int filds, void *buf, int n);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Up to n bytes are read from the file whose file ID is }{\i \hich\af4\dbch\af4\loch\f4 filds}{\hich\af4\dbch\af4\loch\f4 .  The bytes are placed in the buffer pointed to by }{\i \hich\af4\dbch\af4\loch\f4 buf}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 If an error occurs during reading, the function returns -1 and sets errno as indicated in the table below.  If the file is already at the e\hich\af4\dbch\af4\loch\f4 nd of file mark, a zero is returned, but no error is set.  If there are n or more bytes left in the file, n bytes are read, and n is returned; the file pointer is advanced n bytes.  If there are less than n bytes left in the file, the number of bytes rema\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 ning in the file are read, and this number is returned; the file pointer is then advanced to the end of the file.\par \hich\af4\dbch\af4\loch\f4 If the O_BINARY flag was not set when the file was opened, any \\r characters are converted to \\n characters as they are read.\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Possible errors\par }{\par \hich\af4\dbch\af4\loch\f4 EIO\tab A physical I/O error occurred.\par \hich\af4\dbch\af4\loch\f4 EBADF\tab filds is not a valid file ID.\par \hich\af4\dbch\af4\loch\f4 EBADF\tab The file is not open for reading.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not required by the ANSI C standard, and should be avoided if possible.\par \hich\af4\dbch\af4\loch\f4 See also fre\hich\af4\dbch\af4\loch\f4 ad.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 realloc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 realloc}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 void *realloc(char *ptr, size_t size);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void *relalloc(char *ptr, size_t size);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 relalloc}}}{\hich\af4\dbch\af4\loch\f4 The function realloc takes a pointer to a piece of memory allocated previously by malloc or calloc and changes t\hich\af4\dbch\af4\loch\f4 he size of the memory.  If the memory area shrinks, the deleted bytes are no longer available, although the memory not deleted is not disturbed.  If the memory area grows, the old contents are preserved, but the value of the new bytes is unpredictable.  A\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 pointer is returned if the request is successful; the memory area may have been moved, so old copies of the pointer are no longer useful.  If the request cannot be satisfied, a null pointer is returned, and the old memory area is not disturbed.\par \hich\af4\dbch\af4\loch\f4 If a null p\hich\af4\dbch\af4\loch\f4 ointer is passed to realloc, the function behaves as if malloc had been called.  If the pointer is not null, and the size is zero, the memory is deallocated and NULL is returned.\par \hich\af4\dbch\af4\loch\f4 In older C compilers, realloc was limited to a parameter of size unsigned, an\hich\af4\dbch\af4\loch\f4 d another function called relalloc was used for requests for larger memory.  In ANSI C, relalloc does not exist, and realloc can be used to request any amount of memory.  ORCA/C includes relalloc as a macro equivalent of realloc for compatibility with old\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 r programs.\par \hich\af4\dbch\af4\loch\f4 See also free, malloc.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Bytes are obtained from InByte, buffered until no   */\par \hich\af2\dbch\af4\loch\f2 /* more memory is available, and processed by DoIt.    */\par \hich\af2\dbch\af4\loch\f2 length = 0;\par \hich\af2\dbch\af4\loch\f2 size = remaining = growSize;\par \hich\af2\dbch\af4\loch\f2 ptr = start = malloc(growSize);\par \hich\af2\dbch\af4\loch\f2 if (ptr == NULL)\par \hich\af2\dbch\af4\loch\f2    printf("Ins\hich\af2\dbch\af4\loch\f2 ufficient memory.\\n");\par \hich\af2\dbch\af4\loch\f2 else \{\par \hich\af2\dbch\af4\loch\f2    ptr++ = InByte();\par \hich\af2\dbch\af4\loch\f2    length++;\par \hich\af2\dbch\af4\loch\f2    if (--remaining == 0) \{\par \hich\af2\dbch\af4\loch\f2       size += growSize;\par \hich\af2\dbch\af4\loch\f2       ptr = realloc(start, size);\par \hich\af2\dbch\af4\loch\f2       if (ptr == NULL) \{\par \hich\af2\dbch\af4\loch\f2          DoIt(start, length);\par \hich\af2\dbch\af4\loch\f2          free(start);\par \hich\af2\dbch\af4\loch\f2          length = 0;\par \hich\af2\dbch\af4\loch\f2          \hich\af2\dbch\af4\loch\f2 size = remaining = growSize;\par \hich\af2\dbch\af4\loch\f2          ptr = start = malloc(growSize);\par \hich\af2\dbch\af4\loch\f2          \}\par \hich\af2\dbch\af4\loch\f2       else \{\par \hich\af2\dbch\af4\loch\f2          start = ptr;\par \hich\af2\dbch\af4\loch\f2          ptr += length;\par \hich\af2\dbch\af4\loch\f2          \}\par \hich\af2\dbch\af4\loch\f2       \}\par \hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 remove}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 remove}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int remove(char *filename);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The named file is delet\hich\af4\dbch\af4\loch\f4 ed from the disk.  The file name can be any file name or path name recognized by GS/OS.  A zero is returned if the delete is successful, and a non-zero is returned if the delete is not successful.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 remove("/hd/languages/apwc");\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 rename}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 rename}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #inclu\hich\af2\dbch\af4\loch\f2 de <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int rename(char *oldname, char *newname);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The file with the name represented by the string oldname is renamed.  The file names can be any file name or path name recognized by GS/OS.  After the rename call, the name of the file is the name give\hich\af4\dbch\af4\loch\f4 n by newname.  If the rename is successful, the function returns a zero; otherwise, a non-zero value is returned.\par \hich\af4\dbch\af4\loch\f4 The rename function is implemented by calling the GS/OS rename facility.  Because of this, rename is more powerful under ORCA/C than it is und\hich\af4\dbch\af4\loch\f4 er some other C implementations.  This call can be used to move a file from one directory to another by specifying the path names of the old and new files.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* change a n file name */\par \hich\af2\dbch\af4\loch\f2 rename("myfile", "hisfile");\par \par \hich\af2\dbch\af4\loch\f2 /* move a file */\par \hich\af2\dbch\af4\loch\f2 rename("/hd/system/finde\hich\af2\dbch\af4\loch\f2 r", "/hd/utilities/finder");\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 rewind\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fseek.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 scanf\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fscanf.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 setbuf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 setbuf}}}{\tab \hich\af4\dbch\af4\loch\f4 setvbuf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 setvbuf}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 void setbuf(FILE *stream, char *buf);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int setvbuf(FILE *stream, char *buf, int type, size_t size);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function setvbuf is use\hich\af4\dbch\af4\loch\f4 d to change the size and characteristics of the default file buffer.  By default, when fopen opens a file, the file has a BUFSIZ (1024) byte buffer used to collect characters to avoid the overhead of calls to GS/OS for small read/write requests.  The file\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is fully buffered, which means that, barring intervention with a call to fflush or fclose, 1024 bytes are collected before data is written to the disk, and 1024 bytes are read from disk to satisfy any read request.\par \hich\af4\dbch\af4\loch\f4 When setvbuf is called, the first paramet\hich\af4\dbch\af4\loch\f4 er is a pointer to an open stream.  This stream must already be open, but no input or output calls are allowed before the call to setvbuf.  The buf parameter is a pointer to a character buffer to use as the file buffer.  If buf is a null pointer, setvbuf \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ill allocate a buffer from available memory; if buf is not null, it should be at least size bytes long.  Size is the number of bytes to use for a buffer, while type is the type of buffering to use.  There are three buffering types, designated using macros\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 defined in the stdio.h interface files.  These are:\par \par }\pard\plain \s31\qj\fi-1080\li1440\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 type\tab meaning\par }\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 _IOFBF\tab Full buffering.  A buffer of size bytes is collected before output operations, and a buffer of size bytes is read for any read operation.  This is the default buffering mechanism.\par \par \hich\af4\dbch\af4\loch\f4 _\hich\af4\dbch\af4\loch\f4 IOLBF\tab Line buffering.  On output, the buffer is flushed any time a new line character is written to the buffer, or when the buffer is full.\par \par \hich\af4\dbch\af4\loch\f4 _IONBF\tab No buffering.  All output passes directly to GS/OS, and all input is satisfied with direct calls to GS/OS.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 The function setbuf is a simplified form of setvbuf.  If the buf is a null pointer, no file buffering is used.  If the buf pointer is not null, full buffering is used, and a pointer to a buffer of BUFSIZ bytes long is required as the input.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Use line bu\hich\af2\dbch\af4\loch\f2 ffering, using line as a buffer 255 characters */\par \hich\af2\dbch\af4\loch\f2 /* long.                                                     */\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 setvbuf(myFile, line, _IOLBF, 255);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 setjmp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 setjmp}}}{\tab \hich\af4\dbch\af4\loch\f4 longjmp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 longjmp}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <setjmp.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef int jmp_buf[4];\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void longjmp(jmp\hich\af2\dbch\af4\loch\f2 _buf env, int status);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int  setjmp(jmp_buf env);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The setjmp and longjmp functions are used to transfer control to a previous point in the program.  The setjmp function is used to establish a jump location in the program.  A jump buffer is passed; this jump\hich\af4\dbch\af4\loch\f4  buffer is later used by longjmp.  The setjmp function returns a value of zero.\par \hich\af4\dbch\af4\loch\f4 Later, a call is made to longjmp, and the jump buffer and an integer are passed as parameters.  The call can be made from the function that called setjmp, or from any function \hich\af4\dbch\af4\loch\f4 it called or that was called by a function it called (and so on), but longjmp must not be used from a function that called setjmp.  Control it returned as if setjmp was call.  The call to setjmp is not actually made; instead, a return is simulated.  The s\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ack is cleaned up, including disposing of the space used by any local auto variables.  The value passed to longjmp as a status, which must be non-zero, is returned as the return value of setjmp.  As far as the function that called setjmp in the first plac\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  can tell, setjmp has simply returned with a non-zero value.\par \hich\af4\dbch\af4\loch\f4 If longjmp is called with an invalid buffer or the function containing the setjmp call returns before the longjmp call is made, the results are unpredictable.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 jmp_buf buffer;\par \par \hich\af2\dbch\af4\loch\f2 void test(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 printf("In test.\\n");\par \hich\af2\dbch\af4\loch\f2 longjmp(buffer, 1);\par \hich\af2\dbch\af4\loch\f2 printf("This line will not be executed.\\n");\par \}\par \par \hich\af2\dbch\af4\loch\f2 int main(void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 if (setjmp(buffer))\par \hich\af2\dbch\af4\loch\f2    printf("Returned from jump.\\n");\par \hich\af2\dbch\af4\loch\f2 else \{\par \hich\af2\dbch\af4\loch\f2    printf("Setting up the jump.\\n");\par \hich\af2\dbch\af4\loch\f2    test();\par \hich\af2\dbch\af4\loch\f2    \}\par \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 shellid}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shellid}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #incl\hich\af2\dbch\af4\loch\f2 ude <orca.h>\par \hich\af2\dbch\af4\loch\f2 char *shellid(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The shellid function returns a pointer to a null-terminated string used by the shell that executed the program to distinguish itself from other shells.  Not all shells report a shell ID; for those that do not, this functio\hich\af4\dbch\af4\loch\f4 n returns NULL.  The shell ID for ORCA and APW}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW}}}{\hich\af4\dbch\af4\loch\f4  is BYTEWRKS.\par \hich\af4\dbch\af4\loch\f4 This function is unique to ORCA/C.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("shell ID: %s\\n", shellid());\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 signal}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 signal}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <signal.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void (*signal(int sig, void(*func)(int)))(int);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Signals are used to h\hich\af4\dbch\af4\loch\f4 andle asyncronous interrupts.  They are primarily used on multi-tasking systems, where another executing program or some hardware facility can cause an interrupt.  In that sort of environment, signals can be used to inform the program what has happened.  \hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 ignals are not used on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 ; the signal.h library is included solely to aid in porting programs from multi-tasking environments.\par \hich\af4\dbch\af4\loch\f4 The signal function is used to specify how the various signals should be handled.  The first parameter tells the sign\hich\af4\dbch\af4\loch\f4 al handler which of the various signals you are talking about.  ORCA/C supports the standard signals required by the ANSI standard.  They are:\par \par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\tx1440\adjustright {\hich\af4\dbch\af4\loch\f4 SIGABRT\tab Abnormal termination.\par \hich\af4\dbch\af4\loch\f4 SIGFPE\tab Arithmetic errors.\par \hich\af4\dbch\af4\loch\f4 SIGILL\tab Invalid function image.\par \hich\af4\dbch\af4\loch\f4 SIGINT\tab Interactive attent\hich\af4\dbch\af4\loch\f4 ion signal.\par \hich\af4\dbch\af4\loch\f4 SIGSEGV\tab Invalid memory access.\par \hich\af4\dbch\af4\loch\f4 SIGTERM\tab Termination request sent to the program.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 None of these errors apply to the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , and the ANSI standard does not require any of them to be handled.  The SIGILL and SIGSEGV errors simply don't exist o\hich\af4\dbch\af4\loch\f4 n the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .  Abnormal terminations on the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  are severe enough that attempting to execute a function after one occurs would be foolish; it could damage data on a disk, for example.  The other signals either have no direct counterpart on the A\hich\af4\dbch\af4\loch\f4 pple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 , or are handled by the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox, which is not always active.\par \hich\af4\dbch\af4\loch\f4 The second parameter to signal is either SIG_DFL, SIG_IGN, or a function. SIG_DFL tells the signal handler to use default handling, while SIG_IGN tells the signal handler to i\hich\af4\dbch\af4\loch\f4 gnore the signal.  With ORCA/C, these are the same, since the default handling is to ignore a signal.  If you pass a function, the function will be called whenever the raise function is called to raise a signal.  The signal number (e.g., SIGABRT) is passe\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  to your function.\par \hich\af4\dbch\af4\loch\f4 The signal function returns the value of the previous signal handler, which you can save, and then restore later.  If the sig parameter is not one of the signals listed above, signal returns SIG_ERR and sets errno to ERANGE.\par \hich\af4\dbch\af4\loch\f4 See raise fo\hich\af4\dbch\af4\loch\f4 r a way to create a signal.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 sin}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sin}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended sin(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The sin function returns the trigonometric sine of the argument.  The argument must be supplied in radians.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 height = sin(x)*hypotenuse;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 sinh}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sinh}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <mat\hich\af2\dbch\af4\loch\f2 h.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended sinh(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\hich\af4\dbch\af4\loch\f4 The sinh function returns the hyperbolic sine of the argument.  If an error occurs, errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 n = sinh(x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 sqrt}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 sqrt}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended sqrt(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\hich\af4\dbch\af4\loch\f4 The squar\hich\af4\dbch\af4\loch\f4 e root of the argument is returned.  If the argument is negative, errno is set to ERANGE.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 length = sqrt(x*x + y*y);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 srand\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See rand.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 sscanf\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See fscanf.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 startdesk}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 startdesk}}}{\tab \hich\af4\dbch\af4\loch\f4 enddesk}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 enddesk}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <orca.h>\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void startdesk(int width);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void en\hich\af2\dbch\af4\loch\f2 ddesk(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The startdesk function starts the tools shown in the table below.  The Tool Locater, Memory Manager, Loader and SANE are started by all C programs.  The parameter width should be 320 or 640; it is used to start QuickDraw II, and determines the\hich\af4\dbch\af4\loch\f4  resolution of the graphics screen.  This function eliminates a great deal of the drudgery associated with starting the tools in the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 standard output}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 error output}}}{\hich\af4\dbch\af4\loch\f4 In addition to starting the tools, startdesk also changes \hich\af4\dbch\af4\loch\f4 the way the standard C libraries handle input and output.  If you do not use startdesk (or its cousin, startgraph) any text written to standard out or error out is written to the text screen or the shell window, depending on which programming environment \hich\af4\dbch\af4\loch\f4 y\hich\af4\dbch\af4\loch\f4 ou are using.  After using startgraph, though, all text is written using QuickDraw, so it shows up in the current graphport.  You can change the location where the text will appear by using the MoveTo call just before you write the text, and you can use t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e normal QuickDraw and font manager calls to change the font, pen color, size, and style of the text that will be written.\par \hich\af4\dbch\af4\loch\f4 Note that the tool locator, SANE, and the memory manager are started in every C program, so they are not started explicitly by startd\hich\af4\dbch\af4\loch\f4 esk.\par \hich\af4\dbch\af4\loch\f4 The enddesk function shuts down all of the tools started by startdesk.\par \par }\pard \s16\qj\li720\sl223\slmult1\widctlpar\tx2880\tx5040\adjustright {\hich\af4\dbch\af4\loch\f4 Miscellaneous Tools\tab QuickDraw II\tab Desk Manager\par \hich\af4\dbch\af4\loch\f4 Event Manager\tab Integer Math Tool Set\tab Window Manager\par \hich\af4\dbch\af4\loch\f4 Menu Manager\tab Control Manager\tab QuickDraw Auxiliary\par \hich\af4\dbch\af4\loch\f4 Line Edit\tab Dialog Manager\tab Scrap Ma\hich\af4\dbch\af4\loch\f4 nager\par \hich\af4\dbch\af4\loch\f4 Standard File Manager\tab Font Manager\tab List Manager\par \hich\af4\dbch\af4\loch\f4 Resource Manager\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 startdesk(640);\par \hich\af2\dbch\af4\loch\f2 /* desktop program goes here */\par \hich\af2\dbch\af4\loch\f2 enddesk();\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 startgraph}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 startgraph}}}{\tab \hich\af4\dbch\af4\loch\f4 endgraph}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 endgraph}}}{\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <orca.h>\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void startgraph(int width);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void endgraph(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Th\hich\af4\dbch\af4\loch\f4 e startgraph function starts QuickDraw II and initializes it to draw with a white pen on a black background, sets the pen mode to or, and initializes the pen size to 1 pixel by 1 pixel.  The parameter should be either 320 or 640; it determines the resolut\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 on of the screen.  The startgraph function makes it easy to start QuickDraw II, reducing the amount of code you have to write to make a simple graphics program work.  Finally, startgraph changes the way the standard C text output functions work, sending t\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 xt to the graphics window instead of the text screen; see startdesk for details on how this works.\par \hich\af4\dbch\af4\loch\f4 The endgraph function shuts down QuickDraw II.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 startgraph(640);\par \hich\af2\dbch\af4\loch\f2 /* graphics program goes here */\par \hich\af2\dbch\af4\loch\f2 endgraph();\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 stderr\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See stdin.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 stdin}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stdin}}}{\tab \hich\af4\dbch\af4\loch\f4 stdout}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stdout}}}{\tab \hich\af4\dbch\af4\loch\f4 stderr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stderr}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 extern FILE *stderr;\par \hich\af2\dbch\af4\loch\f2 extern FILE *stdin;\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extern FILE *stdout;\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These three predefined variables are the standard input stream (stdin), the standard output stream (stdout), and the error output stream (st\hich\af4\dbch\af4\loch\f4 derr).  They are already open when any C program that runs under the shell is executing.  In C programs that do not run under the shell, your program should open them using freopen before using any of these streams explicitly, or before using any of the f\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 le input and output facilities that automatically use one of these streams.\par \hich\af4\dbch\af4\loch\f4 When running under the shell, the shell will automatically handle any input or output redirection.  If no redirection has been specified, input will come from the keyboard, and bot\hich\af4\dbch\af4\loch\f4 h standard out and error out will appear on the text screen (text environment) or the shell window (desktop environment).\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 stdout\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See stdin.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strcat}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strcat}}}{\tab \hich\af4\dbch\af4\loch\f4 strncat}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strncat}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par \hich\af2\dbch\af4\loch\f2 char *strcat(char *s1, char *s2);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *strncat(ch\hich\af2\dbch\af4\loch\f2 ar *s1, char *s2, size_t n);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Strcat is a function that appends the contents of the string s2 to the contents of the string s1.  A terminating null character is added to the end of the new string.  Strcat returns a pointer to the first character in the stri\hich\af4\dbch\af4\loch\f4 ng s1.\par \hich\af4\dbch\af4\loch\f4 Strcat will append characters until a terminating null is found in the string s2, even if the memory allocated for s1 is not large enough to hold the completed string.  It is up to the programmer to ensure that the memory allocated for s1 is large e\hich\af4\dbch\af4\loch\f4 nough to hold the concatenated string and the terminating null character.\par \hich\af4\dbch\af4\loch\f4 Strncat is a similar function that limits the total number of characters that can be copied.  No more than n characters will be appended to the end of s1.  If a terminating null char\hich\af4\dbch\af4\loch\f4 acter is found in s2 before n characters have been copied, all of the characters in s2, including the terminating null character, are copied to s1.  If n characters are copied, and no terminating null character has been found, strncat adds a terminating n\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 ll character to s1 and stops copying characters.  If n is less than or equal to zero, no characters are copied.\par \hich\af4\dbch\af4\loch\f4 The result is unpredictable if the two strings overlap in memory.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx3510\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 strcat(fileName, ".obj");\tab /* add .obj to a file name */\par \par \hich\af2\dbch\af4\loch\f2 n = 64-strlen(pathNa\hich\af2\dbch\af4\loch\f2 me);\tab /* add a file name to a path name,    */\par \hich\af2\dbch\af4\loch\f2 strncat(pathName, "/", n--);\tab /* making sure there are no overflows */\par \hich\af2\dbch\af4\loch\f2 strncat(pathName, fileName, n);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strchr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strchr}}}{\tab \hich\af4\dbch\af4\loch\f4 strpos}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strpos}}}{\tab \hich\af4\dbch\af4\loch\f4 strrchr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strrchr}}}{\tab \hich\af4\dbch\af4\loch\f4 strrpos}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strrpos}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string\hich\af2\dbch\af4\loch\f2 .h>\par \hich\af2\dbch\af4\loch\f2 char *strchr(char *s1, char c);\par \hich\af2\dbch\af4\loch\f2 int   strpos(const char *s1, int c);\par \hich\af2\dbch\af4\loch\f2 char *strrchr(char *s1, char c);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int   strrpos(const char *s1, int c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These functions scan a null-terminated string for a character.  Strchr and strrchr return a pointer to the chara\hich\af4\dbch\af4\loch\f4 cter if it is found.  A null pointer is returned if the character is not found.  The null character is considered to be a character for the purposes of the scan, so searching for the null character will return a pointer to the terminating null.  The diffe\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ence between the two functions is that strchr returns a pointer to the first character that matches, while strrchr returns a pointer to the last matching character.\par \hich\af4\dbch\af4\loch\f4 The function strpos returns the position of the first matching character in the string.  Th\hich\af4\dbch\af4\loch\f4 e position is the number of characters that appear before the matching character.  If no matching character is found, -1 is returned.\par \hich\af4\dbch\af4\loch\f4 The function strrpos returns the position of the last matching character.  Like strpos, it returns -1 if there are no matc\hich\af4\dbch\af4\loch\f4 hes.\par \hich\af4\dbch\af4\loch\f4 See also memchr.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx3600\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 nextSpace = strchr(str, ' ');\tab /* find the next space */\par \par \hich\af2\dbch\af4\loch\f2 lineLen = strpos(line, '.');\tab /* find # of chars in the sentence */\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strcmp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strcmp}}}{\tab \hich\af4\dbch\af4\loch\f4 strncmp}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strncmp}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par \hich\af2\dbch\af4\loch\f2 int strcmp(char *s1, char *s2);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int strncmp\hich\af2\dbch\af4\loch\f2 (char *s1, char *s2, size_t n);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Strcmp compares two null-terminated strings.  The strings are considered equal if all of the characters up to and including the terminating null character in each string matches.  The string s1 is less than the string s2 if \hich\af4\dbch\af4\loch\f4 the ordinal value of the first mismatched character is smaller in s1, or if both strings match up to the terminating null character in s1, but s2 is longer than s1.  Strcmp returns zero if the strings are equal, a negative integer if s1 is less than s2, a\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 d a positive integer if s1 is greater than s2.\par \hich\af4\dbch\af4\loch\f4 Strncmp is similar to strcmp.  The difference is that strncmp will stop comparing the strings after n characters, even if a terminating null character has not been found in either string.  In that case, the st\hich\af4\dbch\af4\loch\f4 rings are considered to be equal.  If a terminating null character appears in either string before n characters have been processed, strncmp returns the same result strcmp would have returned.  If n is zero or negative, strncmp returns zero.\par \hich\af4\dbch\af4\loch\f4 See also memcm\hich\af4\dbch\af4\loch\f4 p.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* scan a table to find a matching name */\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < tableLength; ++i)\par \hich\af2\dbch\af4\loch\f2    if (!strcmp(name, table[i]))\par \hich\af2\dbch\af4\loch\f2       goto found;\par \par \hich\af2\dbch\af4\loch\f2 /* scan addresses that start with a five-digit zip code, */\par \hich\af2\dbch\af4\loch\f2 /* stopping if a match is found                          */\par \hich\af2\dbch\af4\loch\f2 for \hich\af2\dbch\af4\loch\f2 (i = 0; i < tableLength; ++i)\par \hich\af2\dbch\af4\loch\f2    if (!strncmp(zipCode, addresses[i], 5))\par \hich\af2\dbch\af4\loch\f2       goto found;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strcpy}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strcpy}}}{\tab \hich\af4\dbch\af4\loch\f4 strncpy}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strncpy}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par \hich\af2\dbch\af4\loch\f2 char *strcpy(char *s1, char *s2);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *strncpy(char *s1, char *s2, size_t n);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Strcpy is a function\hich\af4\dbch\af4\loch\f4  that copies the contents of s2 to the string s1.  All characters up to and including the terminating null character are copied.  It is up to the programmer to ensure that the memory available for s1 is large enough to hold all of the characters, includin\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4  the terminating null character.\par \hich\af4\dbch\af4\loch\f4 Strncpy is similar, but it will stop copying characters after n characters have been copied.  If n characters are copied and no terminating null has been found, s1 will not have a terminating null.  If s2 contains fewer tha\hich\af4\dbch\af4\loch\f4 n n characters, s1 is padded with null characters until n characters have been moved.  If n is zero or negative, no copying is performed.\par \hich\af4\dbch\af4\loch\f4 Both functions return s1 as their result.\par \hich\af4\dbch\af4\loch\f4 The result is unpredictable if the two strings overlap in memory.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx3600\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 strcpy(st\hich\af2\dbch\af4\loch\f2 r, "This is a test.\\n");\tab /* copy a constant to a string */\par \par \hich\af2\dbch\af4\loch\f2 pos = strpos(line, ' ');\tab /* read the first word from a string */\par \hich\af2\dbch\af4\loch\f2 if (pos == -1)\par \hich\af2\dbch\af4\loch\f2    strcpy(str, line);\par \hich\af2\dbch\af4\loch\f2 else\par \hich\af2\dbch\af4\loch\f2    strncpy(str, line, pos);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strcspn}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strcspn}}}{\tab \hich\af4\dbch\af4\loch\f4 strpbrk}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strpbrk}}}{\tab \hich\af4\dbch\af4\loch\f4 strrpbrk}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strrpbrk}}}{\tab \hich\af4\dbch\af4\loch\f4 strspn}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strspn}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par \hich\af2\dbch\af4\loch\f2 size_t  strspn(const char *s, const char *set);\par \hich\af2\dbch\af4\loch\f2 size_t  strcspn(const char *s, const char *set);\par \hich\af2\dbch\af4\loch\f2 char   *strpbrk(const char *s, const char *set);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char   *strrpbrk(const char *s, const char *set);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These\hich\af4\dbch\af4\loch\f4  functions all scan the string s and check each character to see if it is in the set of characters formed by the null-terminated string set.  The set of characters can contain no characters, or all of the ASCII characters, and it can contain duplicate cha\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 acters.  The order of the characters in the set does not affect the scan.\par \hich\af4\dbch\af4\loch\f4 The function strspn scans the string s for the first character that is not in the set.  The length of the longest initial segment in s containing only characters in set is returned. \hich\af4\dbch\af4\loch\f4  If all of the characters are in the set, the effect is to return the length of the string.  If the set is the null string, zero is returned.\par \hich\af4\dbch\af4\loch\f4 The function strcspn performs the opposite check:  it skips over characters that are not in the set, stopping when\hich\af4\dbch\af4\loch\f4  a character is found that is in the set.\par \hich\af4\dbch\af4\loch\f4 The function strpbrk scans the string, skipping over characters that are in the set, and stopping at the first character that is not in the set, just like strcspn.  The difference is that strpbrk returns a pointer \hich\af4\dbch\af4\loch\f4 to the character, rather than the number of characters skipped.  If the string s does not have any characters from the set, NULL is returned.\par \hich\af4\dbch\af4\loch\f4 The function strrpbrk works like strpbrk, except that it returns a pointer to the last character in the string tha\hich\af4\dbch\af4\loch\f4 t is in the set, rather than the first character.  If the string s does not have any characters from the set, NULL is returned.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* find and process all of the words in the */\par \hich\af2\dbch\af4\loch\f2 /* string pointed to by line                */\par \hich\af2\dbch\af4\loch\f2 strcpy(alpha, "abcdefghijklmnopqr\hich\af2\dbch\af4\loch\f2 stuvwxyz"\par \hich\af2\dbch\af4\loch\f2               "ABCDEFGHIJKLMNOPQRSTUVWXYZ");\par \hich\af2\dbch\af4\loch\f2 while (*line) \{\par \hich\af2\dbch\af4\loch\f2    line = strpbrk(line, alpha);\par \hich\af2\dbch\af4\loch\f2    len = strspn(line, alpha);\par \hich\af2\dbch\af4\loch\f2    if (len) \{\par \hich\af2\dbch\af4\loch\f2       process(strncpy(word, line, len));\par \hich\af2\dbch\af4\loch\f2       line += len;\par \hich\af2\dbch\af4\loch\f2       \}\par \hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strlen}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strlen}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stri\hich\af2\dbch\af4\loch\f2 ng.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 size_t strlen(const char *string);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function strlen returns the number of characters in a string.  The number of characters is the number of characters that appear before the terminating null character.\par \hich\af4\dbch\af4\loch\f4 In older versions of C, strlen returned an i\hich\af4\dbch\af4\loch\f4 nt, which limited the length of string that could be processed by strlen.  In ANSI C, strlen returns size_t, which is unsigned long in ORCA/C.  This means that strlen can effectively find the length of any string that can be held in memory.  If you are po\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ting a program that is built around the assumption that strlen is int, you can safely change the return type of strlen to int in a copy of the string.h interface file.  In that case, all but the least significant two bytes are dropped from the length of t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e string.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 len = strlen(myString);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strerror\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See errno.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strpos\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See strchr.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strrchr\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See strchr.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strrpos\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See strchr.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strstr}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strstr}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *strstr(char *src, char *sub);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function strstr scans the string str for the first occurrenc\hich\af4\dbch\af4\loch\f4 e of the string sub.  If a match is found, a pointer to the first character of the match is returned.  If no match is found, a null pointer is returned.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* see if the correct answer occurs in the reply */\par \hich\af2\dbch\af4\loch\f2 if (strstr(reply, "Santa Fe") != NULL)\par \hich\af2\dbch\af4\loch\f2    printf("\hich\af2\dbch\af4\loch\f2 Correct!  Santa Fe is the capitol of New Mexico.\\n");\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strtod}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strtod}}}{\tab \hich\af4\dbch\af4\loch\f4 strtol}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strtol}}}{\tab \hich\af4\dbch\af4\loch\f4 strtoul}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strtoul}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par \hich\af2\dbch\af4\loch\f2 double        strtod(char *str, char **ptr);\par \hich\af2\dbch\af4\loch\f2 long          strtol(char *str, char **ptr, int base);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 unsigned long \hich\af2\dbch\af4\loch\f2 strtoul(char *str, char **ptr, int base);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These functions convert numbers represented as ASCII strings to the internal binary format used for calculations.  In each case, str is a null-terminated ASCII string.  Any leading white space is skipped, and then \hich\af4\dbch\af4\loch\f4 the longest sequence of characters which can be legally interpreted as a number are read and converted.  The number is returned as the function's return value.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HUGE_VAL}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errno}}}{\hich\af4\dbch\af4\loch\f4 If no conversions are possible, either because a n\hich\af4\dbch\af4\loch\f4 ull string was passed or because the first non-white space characters could not be interpreted as a number, zero is returned, the global variable errno is set to ERANGE, and ptr, if not NULL, is set to str.  If the number causes overflow or underflow, err\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 o is still set to ERANGE.  In the case of underflow, zero is returned; in the case of overflow, infinity is returned.  (Infinity is also available as the macro HUGE_VAL.)\par \hich\af4\dbch\af4\loch\f4 The second parameter can be null, or it can point to a character pointer.  If it is n\hich\af4\dbch\af4\loch\f4 ot null, and a valid string for conversion exists, it is set to point to the character immediately after the last character used in the conversion process.  This is still true if an overflow or underflow occurred.  If str is null, or if no valid numeric s\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ring is found, ptr is set to the value of str.\par \hich\af4\dbch\af4\loch\f4 The function strtod converts a floating-point string to an extended value.  The string has the same format as a string in a C source file.  It can consist of a leading plus or minus sign.  This is followed by \hich\af4\dbch\af4\loch\f4 a sequence of decimal digits, a decimal point, and another sequence of decimal digits.  At least one of these digit sequences must appear, but either can be omitted, as can the decimal point.  This is followed by an optional exponent, which, if present, c\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 nsists of an e or E, an optional plus or minus sign, and a digit sequence.  Imbedded white space is not allowed.  Some examples of legal strings include:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\tx1440\tx2520\tx3600\tx4680\tx5760\tx6840\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 1.0\tab .1\tab 3\tab 1e+80\tab 1.2e-3\tab .1e-4\tab 1.e17\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The functions strtol and strtoul both have an additional parameter\hich\af4\dbch\af4\loch\f4  that is used to specify the base of the integer.  The base can be zero or any number from 2 to 36.  If the base is zero, the format of the number itself is used to determine the base of the number, using the same rules used by the C compiler.  Namely, if\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the number starts with a digit from 1 to 9, it is base 10; if the number starts with 0x or 0X, it is base sixteen; and if the number starts with 0, and is not followed by an x or X, it is base 8.  Any of the other values specify the base to use.  For base\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  of 11 and higher, the alphabetic characters are used as digits, with A representing 10 and so forth to Z, which represents 35.  Lowercase letters can also be used.  If a letter is found which is not valid for the base in use, scanning stops.  There is on\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  exception to this rule:  if the base is specified as 16, and the number starts with 0x, the first two characters are ignored.  Strtol also allows an optional leading sign.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 errno}}}{\hich\af4\dbch\af4\loch\f4 The function strtol returns a long, while strtoul retu\hich\af4\dbch\af4\loch\f4 rns an unsigned long.  If the number is too large, strtol returns LONG_MAX or LONG_MIN, depending on the sign, and strtoul returns ULONG_MAX.  In both cases, errno is set to ERANGE.\par \hich\af4\dbch\af4\loch\f4 See also atof, atoi and atol.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* echo the integers in an ASCII buffer to \hich\af2\dbch\af4\loch\f2 standard out */\par \hich\af2\dbch\af4\loch\f2 while (cp != NULL)\par \hich\af2\dbch\af4\loch\f2    printf("%f\\n", strtol(cp, &cp, 10));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 strtok}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 strtok}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <string.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 char *strtok(const char *str, const char *set);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function strtok scans the string str for tokens separated by the characters contained i\hich\af4\dbch\af4\loch\f4 n the null-terminated string set.  The first call to strtok should include a pointer to a string of characters for the parameter set.  If the set does not change on subsequent calls, a null pointer can be passed, avoiding the overhead of reforming the set\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 on each call to strtok.\par \hich\af4\dbch\af4\loch\f4 When called, strtok starts by forming an internal representation of the set of characters.  If no set was passed, the last set passed to strtok is used.\par \hich\af4\dbch\af4\loch\f4 Next, if str is not null, strtok skips all characters in str that occur somewhe\hich\af4\dbch\af4\loch\f4 re in the set of characters.  If all of the characters are in the set, an internal pointer is set to null and a null pointer is returned.  If a character is found which is not in the set, the internal pointer is set to point to the first character not in \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he set, and processing continues as if str had been null.  By this time, though, the local copy strtok keeps of str is null, even if it was not null when strtok was called.\par \hich\af4\dbch\af4\loch\f4 To continue scanning the string, subsequent calls to strtok should use a null point\hich\af4\dbch\af4\loch\f4 er for str.  The set may be changed as needed.  If str is null, and the internal pointer is null, strtok returns null.  If the internal value is not null, strtok skips over all of the characters that are not in the set, overwriting the first character tha\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  is in the set with a null character.  The internal pointer is then updated to point to the character after the null, and the old value of the internal pointer, which now points to a null-terminated token, is returned.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* find and process words in the str\hich\af2\dbch\af4\loch\f2 ing pointed to by line */\par \par \hich\af2\dbch\af4\loch\f2 /* form the set of separator characters */\par \hich\af2\dbch\af4\loch\f2 j = 0;\par \hich\af2\dbch\af4\loch\f2 for (i = 1; i < 128; ++i)\par \hich\af2\dbch\af4\loch\f2    if (!isalpha(i))\par \hich\af2\dbch\af4\loch\f2       set[j++] = i;\par \hich\af2\dbch\af4\loch\f2 set[j] = '\\0';\par \par \hich\af2\dbch\af4\loch\f2 /* find and process the words */\par \hich\af2\dbch\af4\loch\f2 str = strtok(line, set);\par \hich\af2\dbch\af4\loch\f2 while (str != NULL) \{\par \hich\af2\dbch\af4\loch\f2    process(str);\par \hich\af2\dbch\af4\loch\f2    str = strtok(NULL,NULL);\par \hich\af2\dbch\af4\loch\f2    \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 system}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 system}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdlib.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int system(char *command);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The system function takes a null-terminated string as input and executes the string as a series of shell calls.  The character \\r can be used to separate \hich\af4\dbch\af4\loch\f4 lines if the argument consists of more than one source line.  The only difference between this call and executing an EXEC file with the same commands is that an EXEC file creates a new stack frame for shell variables, while commands executed with this cal\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4  work directly with the shell variables already in existence.  Any command that can be typed from the shell can also be executed using this command.\par \hich\af4\dbch\af4\loch\f4 As with script files, execution will halt early if any of the commands returns a non-zero error code and th\hich\af4\dbch\af4\loch\f4 e \{exit\} shell variable is set to any value.  If this happens, the error code is returned by the system function.  Execution will also stop if the shell's exit command is used.  The exit command also returns a value, and this value is returned by the syst\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 m function.  If the commands execute normally, a zero is returned.\par \hich\af4\dbch\af4\loch\f4 Passing system a null pointer returns a zero if no shell is active, and a non-zero value if a shell is active.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* catalog the disk */\par \hich\af2\dbch\af4\loch\f2 system("catalog\\r");\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 tan}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tan}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended tan(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ERANGE}}}{\hich\af4\dbch\af4\loch\f4 The function tan returns the trigonometric tangent of the argument.  If an error occurs, errno is set to ERANGE.  The argument must be supplied in radians.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 height = tan(x)*length;\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 tanh}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tanh}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <math.\hich\af2\dbch\af4\loch\f2 h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 extended tanh(extended x);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function tanh returns the hyperbolic tangent of the argument.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 n = tanh(x);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 time}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 time}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <time.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef unsigned long time_t;\par \hich\af2\dbch\af4\loch\f2 time_t time(time_t *tptr);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The time function returns the current time as a coded\hich\af4\dbch\af4\loch\f4  integer.  If the parameter tptr is not null, the time is also stored at the location indicated by tptr.  If an error occurs, -1 is returned.  (No error is possible in ORCA/C.)  See localtime for a way to format the time in a usable fashion.\par \hich\af4\dbch\af4\loch\f4 See also ctime\hich\af4\dbch\af4\loch\f4 , difftime, gmtime, mktime.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 t = time(NULL);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 tmpfile}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tmpfile}}}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 See tmpnam.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 tmpnam}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tmpnam}}}{\tab \hich\af4\dbch\af4\loch\f4 tmpfile}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tmpfile}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 char *tmpnam(char *buf);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 FILE *tmpfile(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The tmpnam function is used to create a file name that does not \hich\af4\dbch\af4\loch\f4 interfere with other file names on the system.  If the call is successful, tmpnam returns a pointer to the file name.  If buf is not null, the null-terminated file name is also stored in the character array pointed to by buf.  The buffer should be at leas\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  L_tmpnam characters long.  The tmpnam function can create up to TMP_MAX unique file names; under ORCA/C, TMP_MAX is 10000.  Note that subsequent calls to tmpnam or tmpfile will destroy the internal copy of any file name created by tmpnam.  If subsequent \hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 alls to either function will be made, and you will need the file name again, you must save the file name in your own local buffer.\par \hich\af4\dbch\af4\loch\f4 The tmpfile function calls tmpnam to obtain a file name, then opens the file with flags of "w+b".  The file is automatically \hich\af4\dbch\af4\loch\f4 deleted when the program stops.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 tmpnam(myFileName);\par \hich\af2\dbch\af4\loch\f2 myFile = tmpfile();\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 toascii}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toascii}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int toascii(int c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Toascii is a macro that takes any integer argument and returns a valid ASCII character.  It makes the conversion by disc\hich\af4\dbch\af4\loch\f4 arding all bits except the seven least significant bits.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* make sure an integer is ASCII before checking to */\par \hich\af2\dbch\af4\loch\f2 /* see if it is uppercase                           */\par \hich\af2\dbch\af4\loch\f2 if (isupper(toascii(ch))\par \hich\af2\dbch\af4\loch\f2    printf("The character is uppercase.\\n");\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 toint}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toint}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int toint(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Toint is a function that returns the value of one of the hexadecimal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hexadecimal}}}{\hich\af4\dbch\af4\loch\f4  digits.  The digits consist of the characters '0' to '9', which have the values 0 to 9, respectively; and the alphabetic charact\hich\af4\dbch\af4\loch\f4 ers 'A' to 'F' (or their lowercase equivalents), which have the values 10 to 15, respectively.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* convert a hexadecimal string to an unsigned long value */\par \hich\af2\dbch\af4\loch\f2 val = 0;\par \hich\af2\dbch\af4\loch\f2 len = strlen(hexString);\par \hich\af2\dbch\af4\loch\f2 for (i = 0; i < len; ++i)\par \hich\af2\dbch\af4\loch\f2    val = (val << 4) | toint(hexString[i\hich\af2\dbch\af4\loch\f2 ]);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 tolower}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 tolower}}}{\tab \hich\af4\dbch\af4\loch\f4 _tolower}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 _tolower}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par \hich\af2\dbch\af4\loch\f2 int tolower(char c);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int _tolower(char c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If the argument is an uppercase alphabetic character, the lowercase equivalent of that letter is returned.  If the argument is not an upperc\hich\af4\dbch\af4\loch\f4 ase alphabetic character, the original value is returned unchanged.\par \hich\af4\dbch\af4\loch\f4 Tolower is a function.  A faster macro called _tolower will perform the same operation if the argument is known to be an uppercase character, but it will also modify the argument if if is \hich\af4\dbch\af4\loch\f4 not an uppercase letter.  When you know that the argument is an uppercase letter, use _tolower for efficiency.  If the argument may not be an uppercase letter, use tolower.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* convert a string to lowercase letters */\par \hich\af2\dbch\af4\loch\f2 i = 0;\par \hich\af2\dbch\af4\loch\f2 while (str[i] = tolower(str[i++\hich\af2\dbch\af4\loch\f2 ]));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 toolerror}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolerror}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <orca.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int toolerror(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The toolerror function returns the error number returned by the last tool call, ProDOS call, shell call, or GS/OS call.  Each call sets the error number maintained by the run-time libr\hich\af4\dbch\af4\loch\f4 aries, so for an error check to be valid, it must occur immediately after the suspected call.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 handle = FindHandle(ptr);\par \hich\af2\dbch\af4\loch\f2 if (toolerror())\par \hich\af2\dbch\af4\loch\f2    exit(-1);\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 toupper}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toupper}}}{\tab \hich\af4\dbch\af4\loch\f4 _toupper}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 _toupper}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <ctype.h>\par \hich\af2\dbch\af4\loch\f2 int toupper(char c);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int _toupper(ch\hich\af2\dbch\af4\loch\f2 ar c);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If the argument is a lowercase alphabetic character, the uppercase equivalent of that letter is returned.  If the argument is not a lowercase alphabetic character, the original value is returned unchanged.\par \hich\af4\dbch\af4\loch\f4 Toupper is a function.  A faster macro call\hich\af4\dbch\af4\loch\f4 ed _toupper will perform the same operation if the argument is known to be a lowercase character, but it will also modify the argument if if is not a lowercase letter.  When you know that the argument is a lowercase letter, use _toupper for efficiency.  I\hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4  the argument may not be a lowercase letter, use toupper.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* convert a string to uppercase letters */\par \hich\af2\dbch\af4\loch\f2 i = 0;\par \hich\af2\dbch\af4\loch\f2 while (str[i] = toupper(str[i++]));\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ungetc}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ungetc}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int ungetc(char c, FILE *stream);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function ungetc returns a chara\hich\af4\dbch\af4\loch\f4 cter to a stream opened for input.  The next call that reads a character from the file will read the character placed back into the stream by this call.  Subsequent calls will read characters from the file in the normal way.  The character is returned by \hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 ngetc if the call was successful; otherwise, EOF is returned.  An attempt to push back EOF is ignored, and EOF is returned.\par \hich\af4\dbch\af4\loch\f4 ORCA/C implements a single character buffer.  An attempt to call ungetc a second time before processing the first character will res\hich\af4\dbch\af4\loch\f4 ult in an error.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* collect a token from a file */\par \hich\af2\dbch\af4\loch\f2 i = 0;\par \hich\af2\dbch\af4\loch\f2 for (;;) \{\par \hich\af2\dbch\af4\loch\f2    ch = fgetc(myFile);\par \hich\af2\dbch\af4\loch\f2    if (isalpha(ch = fgetc(myFile)))\par \hich\af2\dbch\af4\loch\f2       name[i++] = ch;\par \hich\af2\dbch\af4\loch\f2    else \{\par \hich\af2\dbch\af4\loch\f2       ungetc(ch, myFile);\par \hich\af2\dbch\af4\loch\f2       break;\par \hich\af2\dbch\af4\loch\f2       \}\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 name[i] = '\\0';\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 userid}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 userid}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #incl\hich\af2\dbch\af4\loch\f2 ude <orca.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int userid(void);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 toolbox}}}{\hich\af4\dbch\af4\loch\f4 The userid function returns the user ID assigned by the loader to a program when it is executed.  The user ID returned by this call should be used whenever a toolbox call requests a user ID.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("user id =\hich\af2\dbch\af4\loch\f2  %d\\n", userid());\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 va_arg\tab va_end\tab va_start}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 va_arg\tab va_end\tab va_start}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdarg.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 typedef char *va_list[2];\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void va_start(va_list ap, ??? LastFixedParm);\par \hich\af2\dbch\af4\loch\f2 ??? va_arg(va_list ap, ???);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 void va_end(va_list ap);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 parameters}}}{\hich\af4\dbch\af4\loch\f4 This collection of\hich\af4\dbch\af4\loch\f4  macros and functions allow variable argument lists to be handled from C.  In a function with variable argument lists, the first call is to the macro va_start.  This call is used to initialize pointers that will be used by va_arg and va_end.  Two paramete\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 s are passed:  the first is a local variable of type va_list, while the second is the name of the last fixed parameter in the parameter list.  There must be at least one fixed parameter.\par \hich\af4\dbch\af4\loch\f4 The macro va_arg is used to recover the values of the parameters.  It\hich\af4\dbch\af4\loch\f4  takes the same argument variable initialized by va_start as the first parameter, and the type of the next argument as the second parameter.  The value of the next parameter is returned, and the ap variable is incremented past the parameter.\par \hich\af4\dbch\af4\loch\f4 The function v\hich\af4\dbch\af4\loch\f4 a_end is called before leaving the function.  It must be called after all of the arguments have been processed by va_arg.  The va_end function cleans up the stack by removing the variable arguments from the stack.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 stack repair code}}}{\hich\af4\dbch\af4\loch\f4 These macros wil\hich\af4\dbch\af4\loch\f4 l not work if stack repair code is enabled; stack repair code is enabled by default.  For an explanation of stack repair code, see Chapter 16.  To turn off stack repair code, see the optimize pragma.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* return the sum of zero or more integers */\par \par \hich\af2\dbch\af4\loch\f2 int sum(\hich\af2\dbch\af4\loch\f2 int count, ...)\par \par \{\par \hich\af2\dbch\af4\loch\f2 va_list list;\par \hich\af2\dbch\af4\loch\f2 int total;\par \par \hich\af2\dbch\af4\loch\f2 va_start(list, count);\par \hich\af2\dbch\af4\loch\f2 total = 0;\par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 while (count--) \par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2    total += va_arg(list, int);\par \hich\af2\dbch\af4\loch\f2 va_end(list);\par \hich\af2\dbch\af4\loch\f2 return total;\par \}\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 vfprintf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 vfprintf}}}{\tab \hich\af4\dbch\af4\loch\f4 vprintf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 vprintf}}}{\tab \hich\af4\dbch\af4\loch\f4 vsprintf}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 vsprintf}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par \hich\af2\dbch\af4\loch\f2 int \hich\af2\dbch\af4\loch\f2 vfprintf(FILE *stream, char *format, va_list arg);\par \hich\af2\dbch\af4\loch\f2 int vprintf(char *format, va_list arg);\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int vsprintf(char *s, char *format, va_list arg);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 These functions are basically the same as the functions with the same name, sans the leading v.  The difference is \hich\af4\dbch\af4\loch\f4 that these print functions use the vararg facility (see va_arg) to specify the parameters.\par }\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 write}{\pard\plain \s4\sb200\sa200\keepn\widctlpar\tx1440\tx2880\tx4320\outlinelevel3\adjustright \b\v\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 write}}}{\par }\pard\plain \s42\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <fcntl.h>\par }\pard\plain \s27\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\fs20\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int write(filds, void *buf, unsigned n);\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Up to n bytes are written from the buffer pointed to by buf to the file whose file ID\hich\af4\dbch\af4\loch\f4  is }{\i \hich\af4\dbch\af4\loch\f4 filds}{\hich\af4\dbch\af4\loch\f4 .  If }{\i \hich\af4\dbch\af4\loch\f4 n}{\hich\af4\dbch\af4\loch\f4  bytes cannot be written due to lack of space, as many bytes are written as possible.  The number of bytes actually written is returned.  If an error occurs, a -1 is returned and errno is set to one of the values shown below.\par \hich\af4\dbch\af4\loch\f4 If the file wa\hich\af4\dbch\af4\loch\f4 s not opened with the O_BINARY flag set, any \\n characters in the buffer are converted to \\r characters before being written.\par \par }\pard \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Possible errors\par }{\par \hich\af4\dbch\af4\loch\f4 EIO\tab A physical I/O error occurred.\par \hich\af4\dbch\af4\loch\f4 EBADF\tab filds is not a valid file ID.\par \hich\af4\dbch\af4\loch\f4 EBADF\tab The file is not open for writing.\par \hich\af4\dbch\af4\loch\f4 E\hich\af4\dbch\af4\loch\f4 NOSPC\tab There was not enough room on the device to write the bytes.\par \hich\af4\dbch\af4\loch\f4 ENOSPC\tab The O_BINARY flag was not set, and there was not enough room to allocate a temporary buffer for character conversion.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 While this function is a common one in C libraries, it is not re\hich\af4\dbch\af4\loch\f4 quired by the ANSI C standard, and should be avoided if possible.\par \hich\af4\dbch\af4\loch\f4 See also fwrite.{\*\bkmkend libraries2}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}{\rxe libraries2}}}{\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerl \pard\plain \s25\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Appendices\par }}{\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Appendix A: Error Messages\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318517}\hich\af4\dbch\af4\loch\f4 Appendix A \endash  Error Messages{\*\bkmkend _Toc495318517}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 compilation errors}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link errors}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 run-time errors}}}{\hich\af4\dbch\af4\loch\f4 The errors flagged during the developme\hich\af4\dbch\af4\loch\f4 nt of a program are of three basic types:  compilation errors, linking errors, and execution errors.  Compilation errors are those that are flagged by the compiler when it is compiling your program.  These are generally caused by mistakes in typing or sim\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 le omissions in the source code.  Compilation errors are divided into four categories:  those that are marked with a caret (^) on the line in which they occurred; those where the exact position of the error cannot be determined or is not well defined; tho\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 e which are due to the restrictions imposed by the ORCA/C compiler; and those which are so serious that compilation cannot continue.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 link errors}}}{\hich\af4\dbch\af4\loch\f4 Link errors are reported by the linker when it is processing the object modules produced\hich\af4\dbch\af4\loch\f4  by the compiler.  These are typically caused by lack of memory for the object code or data, or by incorrectly linking files when separate compilation has been used.  If you receive "Out of memory" messages from the linker, try using the large memory mode\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4  available with the compiler, or you can break up your program into different load segments.  When the linker issues "Unresolved reference" or "Duplicate reference" errors, you have probably made a mistake in your external declarations.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 run-time erro\hich\af4\dbch\af4\loch\f4 rs}}}{\hich\af4\dbch\af4\loch\f4 Execution errors occur when your program is running.  These can be detectable mistakes, such as a stack overflow with debugging enabled, or can be severe enough to cause the computer to crash, such as accessing memory in unexpected ways, as with point\hich\af4\dbch\af4\loch\f4 er variables containing invalid addresses. \par \hich\af4\dbch\af4\loch\f4 Error levels are associated with compilation and linking.  Compiler error levels are explained at the beginning of the section describing the errors you can receive during compilation; linker error levels are des\hich\af4\dbch\af4\loch\f4 cribed at the beginning of the section describing linker errors. \par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318518}\hich\af4\dbch\af4\loch\f4 Compilation Errors{\*\bkmkend _Toc495318518}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The errors listed below are all errors that the compiler can recover from.  ORCA/C assigns all errors with an error level of 8.  You should always eliminate every error be\hich\af4\dbch\af4\loch\f4 fore trying to execute a program.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 '(' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a left parenthesis, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ')' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a right parenthesis, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 '>' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a greater than sig\hich\af4\dbch\af4\loch\f4 n, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ';' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a semicolon, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 '\{' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a left brace, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 '\}' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a right brace, and another token w\hich\af4\dbch\af4\loch\f4 as found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ']' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a right bracket, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ':' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a colon, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 '(', '[' or '*' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected one of these tokens, and another token was fo\hich\af4\dbch\af4\loch\f4 und.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ',' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a comma, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 '.' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a period, and another token was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 '8' and '9' cannot be used in octal constants\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Any integer constant staring with a zero is treated as an \hich\af4\dbch\af4\loch\f4 octal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 octal}}}{\hich\af4\dbch\af4\loch\f4  constant.  Octal numbers do not use the digits 8 or 9.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 A character constant must contain exactly one character\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The character constant has zero characters, or more than one character.  C character constants are limited to a single charac\hich\af4\dbch\af4\loch\f4 ter.  Use a string for more than one character.  To create a character constant for the single quote mark, use '\\''.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 A function cannot be defined here\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A function definition cannot appear in another function, a structure, or a union.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 A value cannot be zero \hich\af2\dbch\af4\loch\f2 bits wide\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A bit field was declared, and the width of the bit field was given as zero bits.  Bit fields must be at least one bit wide, but no more than thirty-two bits wide.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 An #if had no closing #endif\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A preprocessor #if statement was found, but was not co\hich\af4\dbch\af4\loch\f4 mpleted with an #endif.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Assignment to an array is not allowed\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 You cannot assign a value to an array in C, even if the value you are trying to assign is another array of the same type.  Use the memcpy function to copy the contents of one array into another \hich\af4\dbch\af4\loch\f4 array.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Assignment to const is not allowed\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to assign a value to a variable that was declared as being a constant (using the const descriptor).  Constant variables cannot be changed.  You must either change the declaration or elimina\hich\af4\dbch\af4\loch\f4 te the assignment.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Assignment to void is not allowed\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to assign a value to void.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Auto or register can only be used in a function body\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The auto storage class can only be used with variables defined locally in a function.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Bit fields m\hich\af2\dbch\af4\loch\f2 ust be less than 32 bits wide\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ORCA/C restricts bit fields to 32 bits or less.  The size of the bit field must be reduced.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Break must appear in a while, do, for or switch statement\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A break statement was found, but it did not appear in a while loop, a do loo\hich\af4\dbch\af4\loch\f4 p, a for loop, or a switch statement.  The break statement is used to leave one of these structures, and cannot be used outside of the structure.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Case and default labels must appear in a switch statement\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A case label or default label was found, but the lab\hich\af4\dbch\af4\loch\f4 el was not in the body of a switch statement.  These types of labels cannot be used outside of a switch statement.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Compiler error\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This error is generated when the compiler detects an internal problem.  This can occur when another error appears in the progr\hich\af4\dbch\af4\loch\f4 am, and that error causes conflicting or missing information.  This error sometimes appears before the message about the error that caused the problem.  If this error appears in a program that has no other error messages, please report the problem.  If it\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 appears in conjunction with some other error, correcting the other error will get rid of this error, too.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Cannot redefine a macro\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 You cannot include a second definition for a macro unless the new definition is token-for-token identical to the original defi\hich\af4\dbch\af4\loch\f4 nition.  For example, the following two definitions can legally appear in the same program:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define EOF (-1)\par \hich\af2\dbch\af4\loch\f2 #define EOF (-1)\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The definitions\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #define EOF (-1)\par \hich\af2\dbch\af4\loch\f2 #define EOF -1\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would, however, generate this error message.  There are four ways to deal with\hich\af4\dbch\af4\loch\f4  the problem:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab Remove all but one of the macro definitions.\par \par \hich\af4\dbch\af4\loch\f4 2.\tab Insure that each definition of the macro exactly matches all of the other definitions.\par \par \hich\af4\dbch\af4\loch\f4 3.\tab Undefine the old macro before redefining it.\par \par \hich\af4\dbch\af4\loch\f4 4.\tab Bracket the definition with conditional compilati\hich\af4\dbch\af4\loch\f4 on commands to prevent redefinition, as in\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard\plain \s26\qj\fi360\li360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #ifndef EOF\par \hich\af2\dbch\af4\loch\f2 #define EOF (-1)\par \hich\af2\dbch\af4\loch\f2 #endif\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Cannot take the address of a bit field\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to extract the address of a field in a structure or union that is a bit field.  Bit fields are not required to s\hich\af4\dbch\af4\loch\f4 tart on addressable boundaries, so it is not possible to take the address of a bit field.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Cannot undefine standard macros\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The standard macros __LINE__, __FILE__, __DATE__, __TIME__, __STDC__ and __ORCAC__ cannot be undefined using the #undef command.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Comp \hich\af2\dbch\af4\loch\f2 data type is not supported by the 68881\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ORCA/C uses SANE to perform calculations on float, double, extended and comp numbers.  When you use the #pragma float command to instruct the compiler to use the 68881 floating-point card, comp numbers can no longer \hich\af4\dbch\af4\loch\f4 be used, since the 65881 does not support the comp data type.  This error message will flag any attempt to use comp numbers with the 68881 card.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Continue must appear in a while, do or for loop\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A continue statement was found, but it did not appear in a whil\hich\af4\dbch\af4\loch\f4 e loop, a do loop, or a for loop.  The continue statement is used to jump to the end of one of these structures, and cannot be used outside of the structure.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Digits expected in the exponent\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A floating-point constant was coded with an e designator for the e\hich\af4\dbch\af4\loch\f4 xponent, but no exponent was found.  Either code an exponent or remove the e exponent designator.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Duplicate case label\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Two identical values have been used for a case label in the same switch statement.  Each of the case labels must be unique.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Duplicate lab\hich\af2\dbch\af4\loch\f2 el\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Two labels with the same name have been defined in the same function.  Each statement label must be different from the other statement labels in the function.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Duplicate symbol\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Two symbols have been defined in the same overloading class, and the symbols \hich\af4\dbch\af4\loch\f4 were given the same name.  For example, a single function cannot define the variable i as an int, and then redefine it as a float variable.  One of the names must be changed so that all of the names are unique.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 'dynamic' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The segment statement allo\hich\af4\dbch\af4\loch\f4 ws you to define the segment as dynamic by placing the identifier dynamic in the segment statement.  This is the only token allowed in that spot.  The compiler found a different token.  You must remove it, or change it to dynamic.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The else has no matching \hich\af2\dbch\af4\loch\f2 if\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An else statement appeared in a program, but no matching if statement was found.  This can happen when the if statement is omitted entirely, when two else clauses are used with a single if statement, or when compound statements have been used improperly\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 End of line expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Extra characters appeared in a preprocessor command.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Expression expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A token that cannot be used to start an expression was found in a position where the compiler expected to find an expression.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Expression syntax error\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An express\hich\af4\dbch\af4\loch\f4 ion has not been formed correctly.  This can occur when an operand or operation has been omitted, or when the operands and operations are not given in the correct order.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Extern variables cannot be initialized\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 When a variable is declared as extern, the comp\hich\af4\dbch\af4\loch\f4 iler does not create the space for the variable, it only notes that such a variable exists in some other separately compiled module or library.  A variable cannot be initialized unless space is created to hold the initial value.  You can, of course, initi\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 lize the variable in the single location where it is declared.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 File name expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The #include, #append and #pragma keep directive expect an operand of a file name.  None was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 File name is too long\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The C compiler limits file names to 255 characters. \hich\af4\dbch\af4\loch\f4  A longer file name was found in a #include, #append or #pragma keep directive.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Functions cannot return functions or arrays\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A function can return a pointer to a function or array, but a function cannot return another function or a whole array.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Further erro\hich\af2\dbch\af4\loch\f2 rs suppressed\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 When more than eight errors occur on a single line, the compiler reports the first seven, then gives this error message rather than continuing with more errors.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Identifier expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The C language requires that an identifier appear at the indi\hich\af4\dbch\af4\loch\f4 cated place.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal character\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A character which is not used in the C language appeared outside of a comment or string constant.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal math operation in a constant expression\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to perform an operation that is not allowed in a const\hich\af4\dbch\af4\loch\f4 ant expression.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal operand for the indirection operator\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to use the selection operator (.) or the indirection operator (*) in a context in which it is not allowed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal operand in a constant expression\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An operand that could \hich\af4\dbch\af4\loch\f4 not be resolved as a constant at compile time was found in an expression that must yield a constant value.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal type cast\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt was made to cast a variable to an illegal type.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal use of forward declaration\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to use a for\hich\af4\dbch\af4\loch\f4 ward declaration in a way that is not allowed. In general, no use can be made of a forward declaration except to declare a pointer to the type.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Implementation restriction: run-time stack space exhausted\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 In some cases, the compiler can detect at compile tim\hich\af4\dbch\af4\loch\f4 e that a stack overflow will occur when a program is executed; when this happens, this error appears.  This is generally caused by defining an auto array that is larger than 32K bytes.  You can avoid the problem by changing the array to a static array or \hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 sing a pointer to a dynamically allocated array.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Implementation restriction: string space exhausted\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Each function has a buffer that is used for string constants and a few values stored when debug code is created.  This buffer is limited to 8000 bytes.  You\hich\af4\dbch\af4\loch\f4  must turn debugging off or split the function into two or more smaller functions to avoid overflowing the buffer.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Implementation restriction: too many local labels\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler generates internal labels to handle the flow of control statements.  The numbe\hich\af4\dbch\af4\loch\f4 r of labels that can appear in a single function is sufficient for about 2000 to 3000 lines of code, although the number can vary greatly based on coding style.  If the limit is exceeded, you must split the function into two or more functions to avoid the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 limitation.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Incorrect operand size\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Many 65816 operation codes require an operand of a specific size.  For example, operands using indirect addressing generally require an expression value in the range 0 to 255.  If the expression in the operand results in \hich\af4\dbch\af4\loch\f4 a value with an inappropriate size, and the operand cannot be legally converted to a correct size, this error will appear.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Incorrect number of macro parameters\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A macro was invoked, and too few or too many parameters were supplied.  Each of the parameters d\hich\af4\dbch\af4\loch\f4 efined in the macro definition must be supplied exactly one time each time the macro is used.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Integer constant expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The inline directive, used for creating tool interface files, requires an integer constant and a long integer constant for the two opera\hich\af4\dbch\af4\loch\f4 nds.  The #pragma nda directive also requires two integer constants.  Something other than an integer constant was used.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Integer constants cannot use the f designator\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The f or F designator, used to force a floating-point constant to be a float rather than \hich\af4\dbch\af4\loch\f4 double value, has been used on an integer constant (such as a character or octal value).  The f designator can only be used of floating-point values or decimal integer values.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Integer overflow\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An integer constant with a value over 2147483647, or an unsigne\hich\af4\dbch\af4\loch\f4 d constant with a value over 4294967295 appeared in the program.  The integer is too large for ORCA/C to deal with.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Invalid operand\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An operand was used with an instruction that does not support the operand.  For example, this error would appear if you code\hich\af4\dbch\af4\loch\f4  absolute indexed addressing with a jsl instruction.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Invalid storage type for a parameter\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Function parameters can have a storage class of auto or register.  Some other storage type was specified for a parameter; it must be changed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Keep must appear before \hich\af2\dbch\af4\loch\f2 any functions\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The #pragma keep directive must appear before the first function definition.  Move it to the top of the source file.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 L-value required\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Assignments and certain operators require an l-value.  Something other than an l-value was used in one of th\hich\af4\dbch\af4\loch\f4 ese locations.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Lint: missing function type\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The lint pragma has been used with bit 1 set, and the function has been declared or defined without an explicit return type.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Lint: parameter list not prototyped\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The lint pragma has been used with bit 2 set, and a \hich\af4\dbch\af4\loch\f4 function has been declared or defined without a prototyped parameter list.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Lint: undefined function\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The lint pragma has been used with bit 0 set, and the function has been used, but not declared or defined before the use.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Lint: unknown pragma\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The lint prag\hich\af4\dbch\af4\loch\f4 ma has been used with bit 3 set, and a pragma has been found which the compiler does not recognize.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 No end was found to the string\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A string constant was started, but a closing quote mark was not found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 No matching '?' found for this ':' operator\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compil\hich\af4\dbch\af4\loch\f4 er found the start of a trinary operator, but could not find the ? character that separates the two expressions.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Only one default label is allowed in a switch statement\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A default label has been found in the body of a switch statement for which another defa\hich\af4\dbch\af4\loch\f4 ult label has already been found.  Only one default label can appear in any switch statement; one of them must be removed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Only one #else may be used per #if\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A #else command was found in the body of an #if statement that already has a #else clause.  One of\hich\af4\dbch\af4\loch\f4  the #else statements must be removed or changed to an #elif command.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Only parameters or types may be declared here\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt was made to declare a variable in the declarations that follow the function header and precede the function body.  Only parameter\hich\af4\dbch\af4\loch\f4 s can be declared in this location.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Operand expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected an operand (variable, parenthesized expression, etc.) during a function evaluation, but found some other token.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Operand syntax error\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An operand was used for a 65816 instruction, but\hich\af4\dbch\af4\loch\f4  the miniassembler could not compile the operand.  The error message will point to the problem area.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Operation expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected an operation (+, *, etc.) during a function evaluation, but found some other token.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Pascal qualifier is only allow\hich\af2\dbch\af4\loch\f2 ed on functions\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The pascal qualifier}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pascal qualifier}}}{\hich\af4\dbch\af4\loch\f4  can only be used on a function declaration or definition.  This error appears when it is used on a type or variable.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Pointer initializers must resolve to an integer, address or string\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The value \hich\af4\dbch\af4\loch\f4 provided in the initializer for a pointer must be an integer, an address, or a string, and the type must be correct for the pointer.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Real constants cannot be unsigned\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The u or U designator, used to indicate that an integer is unsigned, has been used on a r\hich\af4\dbch\af4\loch\f4 eal constant.  Real constants cannot be unsigned.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Statement expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A statement was expected in the body of a function or compound statement, but a token has been found which cannot be used to start a statement.\par \par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 String constant expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 String constants \hich\af4\dbch\af4\loch\f4 are required when the name of a CDA, NDA or segment is expected by the compiler.  Something other than a string constant was found in one of these situations.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 String too long\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 ORCA/C limits each individual string constant to 4000 characters.  A string const\hich\af4\dbch\af4\loch\f4 ant longer than 4000 characters has appeared in the source file.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Switch expressions must evaluate to integers\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The operand of a switch statement must evaluate to one of the forms of integer (including characters).  The function evaluates to some other type,\hich\af4\dbch\af4\loch\f4  and must be changed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The array size could not be determined\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 In some instances, arrays sizes must be given, and in others, the exact size can be left unspecified.  This error notes that an attempt has been made to leave the size of an array unspecified whe\hich\af4\dbch\af4\loch\f4 n a specific size is required.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The & operator cannot be applied to arrays\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An array name is an address; applying the & operator to an address is not allowed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The function's type must match the previous declaration\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A function declaration or definition has be\hich\af4\dbch\af4\loch\f4 en found for a function that has been declared earlier.  This is allowed, but the type returned by the function must match the earlier declaration.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The last compound statement was not finished\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function body contains the start of a compound statement, b\hich\af4\dbch\af4\loch\f4 ut the source file ended before the compound statement was completed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The last do statement was not finished\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function body contains the start of a do statement, but the function ended before the do statement was completed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The last for statement was no\hich\af2\dbch\af4\loch\f2 t finished\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function body contains the start of a for statement, but the function ended before the for statement was completed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The last else clause was not finished\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function body contains the start of an else clause for an if statement, but the fun\hich\af4\dbch\af4\loch\f4 ction ended before the else clause was completed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The last if statement was not finished\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function body contains the start of an if statement, but the function ended before the if statement was completed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The last switch statement was not finished\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The f\hich\af4\dbch\af4\loch\f4 unction body contains the start of a switch statement, but the function ended before the switch statement was completed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The last while statement was not finished\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The function body contains the start of a while statement, but the function ended before the \hich\af4\dbch\af4\loch\f4 while statement was completed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The number of array elements must be greater than 0\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An array was declared with 0 elements.  All arrays must have one or more elements.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The number of parameters does not agree with the prototype\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A function call had been made, \hich\af4\dbch\af4\loch\f4 but the number of parameters supplied in the function call does not match the number of parameters declared by the function prototype.  Exactly one parameter must be supplied for each parameter in the function prototype, and the types of the parameters in\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the call must match the types of the parameters in the function prototype.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The operation cannot be performed on operands of the type given\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Not all operations can be used with all types.  An attempt has been made to use an operation with an operand of an il\hich\af4\dbch\af4\loch\f4 legal type.  For example, this error would occur if you attempt to use a bit manipulation operator on a floating-point number.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The selected field does not exist in the structure or union\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A field has been selected from a structure or union using the -> or .\hich\af4\dbch\af4\loch\f4  selection operators, but the field does not exist.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The selection operator must be used on a structure or union\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The . or -> selection operator has been used on a variable that is not a structure or union.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 The structure has already been defined\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt h\hich\af4\dbch\af4\loch\f4 as been made to redefine a structure or union.  Once a set of fields has been associated with a structure or union, the structure or union tag can be used to define variables, but the fields must not be redefined.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 There is no #if for this directive\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A #else\hich\af4\dbch\af4\loch\f4  or #elif command has been used, but cannot be associated with a #if command.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Token merging produced an illegal token\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The ## token merging operator was used in a macro, but the tokens merged did not result in a legal token.  For example, merging - and 1 pr\hich\af4\dbch\af4\loch\f4 oduces the string -1, but this string is not a legal token.  (The characters "-1" form two separate tokens, the unary subtraction operator and the signed integer one.)\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Too many initializers\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Too many initializers have been specified for an array or structur\hich\af4\dbch\af4\loch\f4 e.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Type conflict\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Incompatible types have been used with one of the operators in an expression, or an attempt has been made to pass a parameter with an incorrect type to a prototyped function.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Type expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The compiler expected a type in a declaration, but\hich\af4\dbch\af4\loch\f4  none was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Undeclared identifier\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An identifier has been used, but it has not been declared.  Except for some limited cases where a function may be called before it is used, all identifiers must be declared before they are used.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Unidentified operation\hich\af2\dbch\af4\loch\f2  code\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An operation code appeared in the miniassembler, but it was not a legal 65816 operation code.  Be sure the name of the operation code has not been redefined with a macro.  If the error appears in an operand field, make sure the operation code require\hich\af4\dbch\af4\loch\f4 s an operand.  If the error appears in a label field, be sure the label is followed by a colon.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Unions cannot have bit fields\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Bit fields can only be used in structures.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Unknown cc= option on command line\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There is a cc= command line option that the compiler\hich\af4\dbch\af4\loch\f4  does not recognize, possibly due to a malformed option.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Unknown preprocessor command\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The preprocessor has encountered a command it does not recognize.  The command must be removed.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 'while' expected\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A while clause was expected at the end of a do statement,\hich\af4\dbch\af4\loch\f4  but none was found.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 You cannot initialize a parameter\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Parameters cannot be initialized.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 You cannot initialize a type\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Only variables can be initialized, not an entire class of variables represented by a type.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 You must initialize the individual elements of \hich\af2\dbch\af4\loch\f2 a struct, union, or non-char array\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This error generally occurs when an initializer has been mistyped.  When initializing a complex type, it is necessary to specify the values of each element or field, except for some cases when the compiler will finish ini\hich\af4\dbch\af4\loch\f4 tializing an area with zeros.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318519}\hich\af4\dbch\af4\loch\f4 Terminal Compilation Errors{\*\bkmkend _Toc495318519}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 terminal errors}}}{\hich\af4\dbch\af4\loch\f4 A terminal error encountered during compilation will abort the compile.  In the text environment, if you have compiled the program from the command line using the +E switch, \hich\af4\dbch\af4\loch\f4 the compiler will enter the editor with the cursor on the offending line, and the error message will be displayed in the editor's information bar.  If you have used the -E flag, the compiler will abort to the shell.  If you compiled the program from an EX\hich\af4\dbch\af4\loch\f4 E\hich\af4\dbch\af4\loch\f4 C file, the default action is to display the error message and return to the shell.  In the desktop environment, an attention box is displayed with the error message.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Error purging }{\i \hich\af2\dbch\af4\loch\f2 file}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An error occurred when the compiler was releasing a file.  This could \hich\af4\dbch\af4\loch\f4 be a source file or an object file created by the compiler.  This error can occur due to corrupted memory, a full disk, or an error while writing the file to disk.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Error reading }{\i \hich\af2\dbch\af4\loch\f2 file}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A file read error occurred while reading the contents of one of the sourc\hich\af4\dbch\af4\loch\f4 e files.  If an exit is made to the editor, the location may not be correct.  This error is reported by GS/OS; it is generally caused by a corrupted disk or a disk with a bad block.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ORCA/C requires version 1.1 or later of the shell\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The ORCA/C compiler has \hich\af4\dbch\af4\loch\f4 been executed from APW}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 APW}}}{\hich\af4\dbch\af4\loch\f4  1.0 or ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  1.0.  You must update the shell.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Out Of Memory\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There is not enough memory to compile the program.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Source files must have a file type of SRC\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to open a source file with \hich\af4\dbch\af4\loch\f4 a #include or #append directive, but the file was not a source file.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Terminal compiler error\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An internal error has occurred that the compiler cannot recover from.  This error should be accompanied by some other error.  When the other errors have been corre\hich\af4\dbch\af4\loch\f4 cted, this error should go away.  If it does not, please contact the Byte Works.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 User Termination\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The user has entered the two-key abort command }{\outl\fs18 \loch\af4\dbch\af4\hich\f4 \u-3\'f0}{\hich\af4\dbch\af4\loch\f4 . (hold down the open-Apple key and then type a period).  This does no harm to the program, it merely terminat\hich\af4\dbch\af4\loch\f4 es compilation.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 You cannot change languages from an included file\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to open another SRC file with a #append statement, but the file that contains the #append statement is an included file.  If you are trying to do a multi-lingual com\hich\af4\dbch\af4\loch\f4 pile, move the #append statement to the end of the C file that is passed to the compiler.  If the file is supposed to be a C source file, change the language stamp using the Languages menu or the shell CHANGE command.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 You cannot change languages with an in\hich\af2\dbch\af4\loch\f2 clude directive\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An attempt has been made to open another SRC file with a #include statement, but the file is not a C source file.  If you are trying to do a multi-lingual compile, use the #append statement. If the file is supposed to be a C source file, ch\hich\af4\dbch\af4\loch\f4 ange the language stamp using the Languages menu or the shell CHANGE command.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318520}\hich\af4\dbch\af4\loch\f4 Linking Errors{\*\bkmkend _Toc495318520}\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318521}\hich\af4\dbch\af4\loch\f4 Linker Error Levels{\*\bkmkend _Toc495318521}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 For each error that the linker can recover from, there is an error level which gives an indication of the gravity of the error. The table below\hich\af4\dbch\af4\loch\f4  lists the error levels and their meaning.  Each error description shows the error level in brackets, immediately following the message.  The highest error level found is printed at the end of the link edit.  Many of these errors can only result if your p\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ogram is written in more than one language, such as a combination of C and assembly language.  All linker errors are included here for completeness.\par \par }\pard\plain \s31\qj\fi-1080\li1440\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Severity\tab Meaning\par }\pard\plain \s16\qj\fi-1080\li1440\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 2\tab Warning - things may be ok.\par \hich\af4\dbch\af4\loch\f4 4\tab Error - an error was made, but the linker thinks it know\hich\af4\dbch\af4\loch\f4 s the programmer's intent and has corrected the mistake.  Check the result carefully!\par \hich\af4\dbch\af4\loch\f4 8\tab Error - no correction is possible, but the linker knew how much space to leave.  A debugger can be used to fix the problem without recompiling.\par \hich\af4\dbch\af4\loch\f4 16\tab Serious Error - it wa\hich\af4\dbch\af4\loch\f4 s not even possible to tell how much space to leave.  Recompiling and linking will be required to fix the problem.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318522}\hich\af4\dbch\af4\loch\f4 Recoverable Linker Errors{\*\bkmkend _Toc495318522}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 When the linker detects a nonfatal error, it prints\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab The name of the segment that contained the error.\par \hich\af4\dbch\af4\loch\f4 2.\tab How fa\hich\af4\dbch\af4\loch\f4 r into the segment (in bytes) the error point lies.\par \hich\af4\dbch\af4\loch\f4 3.\tab A text error message, with the error-level number in brackets immediately to the right of the message.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Addressing Error [16]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A label could not be placed at the same location on pass 2 as it was on pass\hich\af4\dbch\af4\loch\f4  1.\par \hich\af4\dbch\af4\loch\f4 This error is almost always accompanied by another error, which caused this one to occur; correcting the other error will correct this one.  If there is no accompanying error, check for disk errors by doing a full assembly and link.  If the error still\hich\af4\dbch\af4\loch\f4  occurs, report the problem as a bug.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Address Is Not In Current Bank [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The (most-significant-truncated) bytes of an expression did not evaluate to the value of the current location counter.\par \hich\af4\dbch\af4\loch\f4 For short-address forms (6502-compatible), the truncated address\hich\af4\dbch\af4\loch\f4  bytes must match the current location counter.  This restriction does not apply to long-form addresses (65816 native-mode addressing).\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Address Is Not Zero Page [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The most significant bytes of the evaluated expression were not zero, but were required to \hich\af4\dbch\af4\loch\f4 be zero by the particular statement in which the expression was used.\par \hich\af4\dbch\af4\loch\f4 This error occurs only when the statement requires a direct-page address operand (range = 0 to 255).\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Alignment Factor Must Be A Power Of Two [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An alignment factor that was not a power \hich\af4\dbch\af4\loch\f4 of 2 was used in the source code.  In ORCA Assembly language, the ALIGN directive is used to set an alignment factor.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Alignment Factor Must Not Exceed Segment Align Factor [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 An alignment factor specified inside the body of an object \hich\af4\dbch\af4\loch\f4 segment is greater than the alignment factor specified before the start of the segment.  For example, if the segment is aligned to a page boundary (ALIGN = 256), you cannot align a portion of the segment to a larger boundary (such as ALIGN = 1024).\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Code Ex\hich\af2\dbch\af4\loch\f2 ceeds Code Bank Size [4]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The load segment is larger than one memory bank (64K bytes).  You have to divide your program into smaller load segments.  See the description of the segment statement and memorymodel directive for ways to do t\hich\af4\dbch\af4\loch\f4 his.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Data Area Not Found [2]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A USING directive was issued in a segment from the ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  assembler, and the linker could not find a DATA segment with the given name.  Ensure that the proper libraries are included, or change the USING directive\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Duplicate Label [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A label was defined twice in the program.  Remove one of the definitions.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Expression Operand Is Not In Same Segment [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An expression in the operand of an instruction or directive includes labels that are defined in two different relo\hich\af4\dbch\af4\loch\f4 catable segments.  The linker cannot resolve the value of such an expression.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Evaluation Stack Overflow [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 1.  There may be a syntax error in the expression being evaluated.\par \par \hich\af4\dbch\af4\loch\f4 Check to see if a syntax error has also occurred; if so, correct the problem tha\hich\af4\dbch\af4\loch\f4 t caused that error.\par \par \hich\af4\dbch\af4\loch\f4 2.  The expression may be too complex for the linker to evaluate.\par \par \hich\af4\dbch\af4\loch\f4 Simplify the expression.  An expression would have to be extremely complex to overflow the linker\rquote s evaluation stack, particularly if the expression passed the assembl\hich\af4\dbch\af4\loch\f4 er or compiler without error.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Expression Syntax Error [16]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The format of an expression in the object module being linked was incorrect.\par \hich\af4\dbch\af4\loch\f4 This error should occur only in the company of another error; correct that error and this one should be fixed automatica\hich\af4\dbch\af4\loch\f4 lly.  If there are no accompanying errors, check for disk errors by doing a full assembly and link.  If the error still occurs, report the problem as a bug.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Invalid Operation On Relocatable Expression [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The ORCA linker can resolve only certain expression\hich\af4\dbch\af4\loch\f4 s that contain labels that refer to relocatable segments.  The following types of expressions }{\i \hich\af4\dbch\af4\loch\f4 cannot}{\hich\af4\dbch\af4\loch\f4  be used in an assembly-language operand involving one or more relocatable labels:\par \par \hich\af4\dbch\af4\loch\f4 A bit-by-bit NOT\par \hich\af4\dbch\af4\loch\f4 A bit-by-bit OR\par \hich\af4\dbch\af4\loch\f4 A bit-by-bit EOR\par \hich\af4\dbch\af4\loch\f4 A bit-by-bit AND \par \hich\af4\dbch\af4\loch\f4 A lo\hich\af4\dbch\af4\loch\f4 gical NOT, OR, EOR, or AND \par \hich\af4\dbch\af4\loch\f4 Any comparison (<, >, <>, <=, >=, ==)\par \hich\af4\dbch\af4\loch\f4 Multiplication\par \hich\af4\dbch\af4\loch\f4 Division\par \hich\af4\dbch\af4\loch\f4 Integer remainder (MOD)\par \par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The following types of expressions involving a bit-shift operation cannot be used:\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 The number of bytes by which to shift a value is a reloca\hich\af4\dbch\af4\loch\f4 table label.\par \hich\af4\dbch\af4\loch\f4 A relocatable label is shifted more than once.\par \hich\af4\dbch\af4\loch\f4 A relocatable label is shifted and then added to another value.\par \hich\af4\dbch\af4\loch\f4 You cannot use addition where both values being added are relocatable (you }{\i \hich\af4\dbch\af4\loch\f4 can}{\hich\af4\dbch\af4\loch\f4  add a constant to a relocatable value).\par \hich\af4\dbch\af4\loch\f4 You cannot su\hich\af4\dbch\af4\loch\f4 btract a relocatable value from a constant (you }{\i \hich\af4\dbch\af4\loch\f4 can}{\hich\af4\dbch\af4\loch\f4  subtract a constant from a relocatable value).\par \hich\af4\dbch\af4\loch\f4 You cannot subtract one relocatable value from another defined in a different segment (you }{\i \hich\af4\dbch\af4\loch\f4 can}{\hich\af4\dbch\af4\loch\f4  subtract two relocatable values defined in the same segment).\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Only JSL Can Reference Dynamic Segment [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 You referenced a dynamic segment in an instruction other than a JSL.  Only a JSL can be used to reference a dynamic segment.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 ORG Location Has Been Passed [16]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The linker encountered an ORG directive (created using\hich\af4\dbch\af4\loch\f4  the ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  macro assembler) for a location it had already passed.\par \hich\af4\dbch\af4\loch\f4 Move the segment to an earlier position in the program.  This error applies only to absolute code, and should therefore be rarely encountered when writing for the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4 .\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Relative Address Out Of Range [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The given destination address is too far from the current location.\par \hich\af4\dbch\af4\loch\f4 Change the addressing mode or move the destination code closer.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Segment Header MEM Directive Not Allowed [16]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The linker does not support the MEM directi\hich\af4\dbch\af4\loch\f4 ve.  If you are trying to use the MEM directive, you have probably made a mistake.  MEM does not make sense in a relocatable load file.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Segment Header ORG Not Allowed [16]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If there is no ORG (created using the ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  macro assembler) specifi\hich\af4\dbch\af4\loch\f4 ed at the beginning of the source code, you cannot include an ORG within the program.  The linker generates relocatable code unless it finds an ORG before the start of the first segment.  Once some relocatable code has been generated, the linker cannot ac\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 ept an ORG. \par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Shift Operator Is Not Allowed On JSL To Dynamic Segment [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The operand to a JSL includes the label of a dynamic segment that is acted on by a bit-shift operator.  You probably typed the wrong character, or used the wrong label by mistake.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Und\hich\af2\dbch\af4\loch\f2 efined Opcode [16]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 object files}}}{\hich\af4\dbch\af4\loch\f4 The linker encountered an instruction that it does not understand.  There are four possible reasons:\par \par }\pard \s16\qj\fi-360\li720\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 1.\tab The linker is an older version than that required by the assembler or compiler; in this case, a Linker Version \hich\af4\dbch\af4\loch\f4 Mismatch error should have occurred also.  Update the linker.\par \hich\af4\dbch\af4\loch\f4 2.\tab An assembly or compilation error caused the generation of a bad object module.  Check and remove all assembly/compilation errors.\par \hich\af4\dbch\af4\loch\f4 3.\tab The object module file has been physically damaged.  Recom\hich\af4\dbch\af4\loch\f4 pile to a fresh disk.\par \hich\af4\dbch\af4\loch\f4 4.\tab There is a bug in the assembler, compiler or linker.  Please report the problem for correction.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Unresolved Reference [8]\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The linker could not find a segment referenced by a label in the program.\par \hich\af4\dbch\af4\loch\f4 If the label is listed in the global\hich\af4\dbch\af4\loch\f4  symbol table after the link, make sure the segment that references the label has issued a USING directive for the segment that contains the label.  Otherwise, correct the problem by: (1) removing the label reference, (2) defining it as a global label, or\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 (3) defining it in a data segment.\par \hich\af4\dbch\af4\loch\f4 Multiple unresolved reference errors are generally caused by the libraries not being in the correct order.  Use the command\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 COMPRESS A C 2/\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 to properly order the libraries.  Commercial libraries supplied with compilers \hich\af4\dbch\af4\loch\f4 not developed by the Byte Works should not be included in the same library directory used by an ORCA language product.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318523}\hich\af4\dbch\af4\loch\f4 Terminal Linker Errors{\*\bkmkend _Toc495318523}\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\v\loch\af2\hich\af2\dbch\f4\cgrid {\xe {\v \hich\af2\dbch\af4\loch\f2 terminal errors}}}{\hich\af2\dbch\af4\loch\f2 Could Not Open File }{\i \hich\af2\dbch\af4\loch\f2 filename}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 GS/OS could not open the file }{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4 , which you specified i\hich\af4\dbch\af4\loch\f4 n the command line.\par \hich\af4\dbch\af4\loch\f4 Check the spelling of the file name you specified.  Make sure the file is present on the disk and that the disk is not write-protected.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Could Not Overwrite Existing File }{\i \hich\af2\dbch\af4\loch\f2 filename}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The linker is only allowed to replace an existing output \hich\af4\dbch\af4\loch\f4 file if the file type of the output file is one of the executable types.  It is not allowed to overwrite a TXT, SRC, or OBJ file, thus protecting the unaware user.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Could Not Write The Keep File }{\i \hich\af2\dbch\af4\loch\f2 filename}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A GS/OS error occurred while the linker was trying to\hich\af4\dbch\af4\loch\f4  write the output file }{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 This error is usually caused by a full disk.  Otherwise, there may be a bad disk or disk drive.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Dictionary File Could Not Be Opened\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The dictionary file is a temporary file on the work prefix that holds information destined \hich\af4\dbch\af4\loch\f4 for the load file\rquote s relocation dictionary.  For some reason, this file could not be opened.\par \hich\af4\dbch\af4\loch\f4 Use the SHOW PREFIX command to find out what the work prefix is.  Perhaps you have assigned the work prefix to a RAM disk, but do not have a RAM disk on line.  Have\hich\af4\dbch\af4\loch\f4  you removed the volume containing the work prefix from the disk drive?  Is the disk write-protected?\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Expression Recursion Level Exceeded\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 It is possible for an expression to be an expression itself; therefore, the expression evaluator in the linker is recu\hich\af4\dbch\af4\loch\f4 rsive.  Generally, this error occurs when the recursion nest level exceeds ten.  This should not happen very frequently.  If it does, check for expressions with circular definitions, or reduce the nesting of expressions.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 File Read Error\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 An I/O error occurr\hich\af4\dbch\af4\loch\f4 ed when the linker tried to read a file that was already open.  This error should never occur.  There may be a problem with the disk drive or with the file.  You might have removed the disk before the link was complete.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 File Not Found }{\i \hich\af2\dbch\af4\loch\f2 filename}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The file }{\i \hich\af4\dbch\af4\loch\f4 fil\hich\af4\dbch\af4\loch\f4 ename}{\hich\af4\dbch\af4\loch\f4  could not be found.\par \hich\af4\dbch\af4\loch\f4 Check the spelling of the file name in both the KEEP directive and the LINK command.  Make sure the .ROOT or .A file has the same prefix as the file specified in those commands.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal Header Value\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The linker checks the segment h\hich\af4\dbch\af4\loch\f4 eaders in object files to make sure they make sense.  This error means that the linker has found a problem with a segment header.\par \hich\af4\dbch\af4\loch\f4 This error should not occur.  Your file may have been corrupted, or the assembler or compiler may have made an error.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Illegal \hich\af2\dbch\af4\loch\f2 Segment Structure\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 There is something wrong with an object segment.\par \hich\af4\dbch\af4\loch\f4 This error should not occur.  Your file may have been corrupted, or the assembler or compiler may have made an error.  This can also be caused by a bad disk or bad memory chip.  Try changin\hich\af4\dbch\af4\loch\f4 g to a different disk and recompiling.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Invalid File Name }{\i \hich\af2\dbch\af4\loch\f2 filename}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The file }{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4  does not adhere to GS/OS file naming conventions.\par \hich\af4\dbch\af4\loch\f4 Make sure the file name you supply on the command line is a valid one.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Invalid file type }{\i \hich\af2\dbch\af4\loch\f2 filename}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The file }{\i \hich\af4\dbch\af4\loch\f4 filename}{\hich\af4\dbch\af4\loch\f4  is not\hich\af4\dbch\af4\loch\f4  an object file or library file.\par \hich\af4\dbch\af4\loch\f4 Check the shell command line to make sure you didn't list any files that are not object files or library files.  Check your disk directory to make sure there isn\rquote t a non-object file with the same root name as a file you are\hich\af4\dbch\af4\loch\f4  linking.  For example, if you are linking object files name MYFILE.ROOT and MYFILE.A, make sure there is no (unrelated) file on the disk with the name MYFILE.B.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Invalid Keep Type\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The linker can generate several kinds of output files.  The type of the outp\hich\af4\dbch\af4\loch\f4 ut file must be one of the executable types.  Since it is possible to set the keep type with a shell variable, this error can occur from a command line call.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Linker Version Mismatch\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The object module format version of the object segment is more recent than\hich\af4\dbch\af4\loch\f4  the version of the linker you are using.\par \hich\af4\dbch\af4\loch\f4 Check with the Byte Works to get the latest version of ORCA.  \par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Must Be An Object File }{\i \hich\af2\dbch\af4\loch\f2 filename}{\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\i \hich\af4\dbch\af4\loch\f4 Filename}{\hich\af4\dbch\af4\loch\f4  is not an object file or a library file.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Object Module Read Error\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 A GS/OS error occurred while the linker was \hich\af4\dbch\af4\loch\f4 trying to read from the currently opened object module.\par \hich\af4\dbch\af4\loch\f4 This error may occur after a nonfatal error; correcting the nonfatal errors may correct this one.  Otherwise, it may be caused by a bad disk or disk drive.\par }\pard\plain \s43\sb200\sa200\sl223\slmult1\keepn\widctlpar\adjustright \b\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 Out Of Memory\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 All free memory has been used;\hich\af4\dbch\af4\loch\f4  the memory needed by the linker is not available.\par \par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Appendix B: Custom Installations\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318524}\hich\af4\dbch\af4\loch\f4 Appendix B \endash  Custom Installations{\*\bkmkend _Toc495318524} \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 system configuration}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 installing ORCA/C}}}{\hich\af4\dbch\af4\loch\f4 This appendix is designed to help you install ORCA/C to take advantage of your specific hardware configuration.\hich\af4\dbch\af4\loch\f4   As shipped, ORCA/C is set up for people who have one or two 3.5 inch floppy disk drives and who want to use the desktop programming environment.  If that describes your system, you should make copies of the original disks, and use them just as they were\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 shipped.  If you have a hard disk or prefer a text-based programming environment, you can use Apple's Installer program to create an ORCA/C environment that suits your needs.  Finally, this appendix describes the principal files that make up the ORCA deve\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 opment environment and the C compiler; by studying this section, you can learn why we configured ORCA/C the way we did, and adjust the installation to suite your needs.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318525}\hich\af4\dbch\af4\loch\f4 Installer Scripts{\*\bkmkend _Toc495318525}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Apple's Installer can be used to create a floppy-disk based text prog\hich\af4\dbch\af4\loch\f4 ramming environment or to install ORCA/C on your hard disk, either as a separate language or in combination with other ORCA languages.  To run the installer, execute the Installer file from the ORCA/C Extras disk.  There are several installer scripts list\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 d in the window that appears; these are described below.  Select the one you want, select the disk that you want to install the program on from the right-hand list, and click on the Install button.\par \hich\af4\dbch\af4\loch\f4 Please note that with the current version of Apple's Insta\hich\af4\dbch\af4\loch\f4 ller, you will have to select the installation script before you can pick a folder from the right-hand list.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318526}\hich\af4\dbch\af4\loch\f4 Low Memory{\*\bkmkend _Toc495318526}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memory}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 small memory compiler}}}{\hich\af4\dbch\af4\loch\f4 This installation script should be used after one of the other scripts that installs ORCA/C\hich\af4\dbch\af4\loch\f4 .  It installs a smaller version of the ORCA/C compiler.  The smaller compiler does not support precompiled headers, and the optimize pragma is ignored.  Individual functions are also limited to 16K rather than 64K.  The small memory compiler can be used \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 hen memory is tight, though, and should always be used if PRIZM is being used on any system with less than 1.75M.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318527}\hich\af4\dbch\af4\loch\f4 New System{\*\bkmkend _Toc495318527}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This is the basic, all-purpose installation script.  It installs the full ORCA/C system, including the desktop development system, \hich\af4\dbch\af4\loch\f4 the text based editor, and all of the header files and help files that you don't have enough room for from a floppy-disk based system.  You will need a hard disk to install the full ORCA/C system.  In addition, you should have at least 1.75M of memory; if\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 not, see the "Low Memory" script, described below.\par \hich\af4\dbch\af4\loch\f4 If you run a lot of software, you probably boot into the Finder or some other program launcher.  In that case, you should probably install ORCA/C in a folder that is not at the root level of your hard disk\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 If you plan to use your computer primarily for programming, you can set things up so you boot directly into ORCA/C.  To do that, start by installing Apple's system disk without a Finder.  (Apple's installer, shipped on their system disk and available fre\hich\af4\dbch\af4\loch\f4 e from your local Apple dealer, has an installation option to install the system with no Finder.)  Next, install ORCA/C at the root level of your boot volume, making sure that ORCA.Sys16 is the first system file on the boot disk.  System files are those f\hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 les with a file type of S16 that end with the characters ".Sys16", as well as the files with a file type of SYS that end in the characters ".SYSTEM".\par \hich\af4\dbch\af4\loch\f4 See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries," below.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318528}\hich\af4\dbch\af4\loch\f4 New Text System{\*\bkmkend _Toc495318528}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This script is ideal if \hich\af4\dbch\af4\loch\f4 you plan to do "standard" C programming, and prefer a UNIX-like text environment.  The text system is small enough to fit on a single 800K floppy disk, although you can install it on a hard disk as well.  The desktop development system is not installed.  \hich\af4\dbch\af4\loch\f4 A\hich\af4\dbch\af4\loch\f4 ll of the header files required by the ANSI C standard (like stdio.h) are installed, but the header files for the toolbox, ProDOS, GS/OS, and the ORCA shell are not installed.  While these extra header files are not installed, you can copy any of them tha\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  you would like to use after installing the basic text system.  You can use any copy program to copy the headers, which are located in the folder "Libraries/ORCACDefs" on the ORCA.C disk and the CC.Extras disk.  Copy any of them that you want to the same \hich\af4\dbch\af4\loch\f4 f\hich\af4\dbch\af4\loch\f4 older wherever you installed ORCA/C.  Be sure to notice that some of the header files are on the ORCA.C disk, and some are on the CC.EXTRAS disk; there isn't room for all of the headers to go on the same disk the way we ship the system.\par \hich\af4\dbch\af4\loch\f4 If you run a lot of\hich\af4\dbch\af4\loch\f4  software, you probably boot into the Finder or some other program launcher.  In that case, you should probably install ORCA/C in a folder that is not at the root level of your hard disk.\par \hich\af4\dbch\af4\loch\f4 If you plan to use your computer primarily for programming, you can \hich\af4\dbch\af4\loch\f4 set things up so you boot directly into ORCA/C.  To do that, start by installing Apple's system disk without a Finder.  (Apple's installer, shipped on their system disk and available free from your local Apple dealer, has an installation option to install\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 the system with no Finder.)  Next, install ORCA/C at the root level of your boot volume, making sure that ORCA.Sys16 is the first system file on the boot disk.  System files are those files with a file type of S16 that end with the characters ".Sys16", as\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 well as the files with a file type of SYS that end in the characters ".SYSTEM".\par \hich\af4\dbch\af4\loch\f4 See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries," below.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318529}\hich\af4\dbch\af4\loch\f4 ORCA Icons{\*\bkmkend _Toc495318529}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If you use Apple's Finder as a program launcher, be sure and install the ORCA Icons.  ORCA itself w\hich\af4\dbch\af4\loch\f4 ill show up as a whale, while the various source files, object files, and utilities will be displayed with distinctive icons.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318530}\hich\af4\dbch\af4\loch\f4 ORCA Pascal, C, Asm Libraries{\*\bkmkend _Toc495318530}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 If you are using ORCA/C with the ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  macro assembler, installing ORCA/C gives you \hich\af4\dbch\af4\loch\f4 all of the libraries you need.\par \hich\af4\dbch\af4\loch\f4 If you are using ORCA/C and ORCA/Pascal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/Pascal}}}{\hich\af4\dbch\af4\loch\f4  together on the same system, you must have a total of three library files in your library folder, and they must appear in the correct order.  If you are missing any \hich\af4\dbch\af4\loch\f4 of the libraries, or if they are in the wrong order, you will get linker errors with either C, Pascal, or possibly with both languages.  This installer script installs the libraries for C, Pascal, and assembly language in the correct order.  (The librarie\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4  used by the assembler are also used by C and Pascal, so you get them anytime you use C or Pascal.)  You can use this installer script before or after any of the other scripts.\par \hich\af4\dbch\af4\loch\f4 You should not use this script unless you are installing C and Pascal together.\hich\af4\dbch\af4\loch\f4   Installing the Pascal libraries takes up a little more room on your disk; slows link times a little, since the linker has to scan an extra library; and uses up a little extra memory, since the library header is loaded by the linker.\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318531}\hich\af4\dbch\af4\loch\f4 Update System{\*\bkmkend _Toc495318531}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This sc\hich\af4\dbch\af4\loch\f4 ript will update an old C system or add C to an existing ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  or ORCA/Pascal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/Pascal}}}{\hich\af4\dbch\af4\loch\f4  system.  All of the executable files from the C disk are copied to your old system, but the LOGIN file, SYSCMND file, SYSEMAC file, SYSTABS fi\hich\af4\dbch\af4\loch\f4 le and SYSHELP file are not updated, since all of these may have been customized in your old system.  Of course, if you are installing C into an existing system that does not already have C, you will need to add the C language to your SYSCMND file.  If yo\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4  are installing C in an existing Pascal system, be sure and follow up this step with the "ORCA Pascal, C, Asm Libraries" script, described above.\par \hich\af4\dbch\af4\loch\f4 This installation option should not be used to update a C 1.0 system to C 2.0.  It can be used to update any 2\hich\af4\dbch\af4\loch\f4 .0 level ORCA installation, but you should install ORCA/C in a new folder if your current version is prior to 2.0.\par \hich\af4\dbch\af4\loch\f4 See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries."\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318532}\hich\af4\dbch\af4\loch\f4 Update Text System{\*\bkmkend _Toc495318532}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This script will update an old C system or add C to an existing\hich\af4\dbch\af4\loch\f4  ORCA/M}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/M}}}{\hich\af4\dbch\af4\loch\f4  or ORCA/Pascal}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/Pascal}}}{\hich\af4\dbch\af4\loch\f4  system.  This script does not install or update the PRIZM desktop development system, nor does it install the header files for the Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  toolbox, ProDOS, GS/OS or the ORCA shell.  All of the ex\hich\af4\dbch\af4\loch\f4 ecutable files except those used only for the PRIZM desktop development system are copied to your old system, but the LOGIN file, SYSCMND file, SYSEMAC file, SYSTABS file and SYSHELP file are not updated, since all of these may have been customized in you\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4  old system.  Of course, if you are installing C into an existing system that does not already have C, you will need to add the C language to your SYSCMND file.  If you are installing C in an existing Pascal system, be sure and follow up this step with th\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  "ORCA Pascal, C, Asm Libraries" script, described above.\par \hich\af4\dbch\af4\loch\f4 While the header files that are not required by the ANSI C standard are not installed, you can copy any of them that you would like to use after updating the basic text system.  You can use any copy\hich\af4\dbch\af4\loch\f4  program to copy the headers, which are located in the folder "Libraries/ORCACDefs" on the ORCA.C disk and the CC.Extras disk.  Copy any of them that you want to the same folder wherever you installed ORCA/C.  Be sure to notice that some of the header fil\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 s are on the ORCA.C disk, and some are on the CC.Extras disk; there isn't room for all of the headers to go on the same disk the way we ship the system.\par \hich\af4\dbch\af4\loch\f4 This installation option should not be used to update a C 1.0 system to C 2.0.  It can be used to updat\hich\af4\dbch\af4\loch\f4 e any 2.0 level ORCA installation, but you should install ORCA/C in a new folder if your current version is prior to 2.0.\par \hich\af4\dbch\af4\loch\f4 See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries."\par }\pard\plain \s3\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \outlinelevel2\adjustright \b\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318533}\hich\af4\dbch\af4\loch\f4 Update Text System, No Editor{\*\bkmkend _Toc495318533}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 This installation script is basically the sam\hich\af4\dbch\af4\loch\f4 e as the "Update Text System" script, described above, but it doesn't install the text editor.  It may seem silly at first to install a text system with no text editor, but there are a number of text-based editors available from third party sources; this \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 nstallation option installs C without removing your existing text editor.\par \hich\af4\dbch\af4\loch\f4 See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries."\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318534}\hich\af4\dbch\af4\loch\f4 RAM Disks{\*\bkmkend _Toc495318534}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 RAM disks}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 RAM disks}}}{\hich\af4\dbch\af4\loch\f4  come in a variety of sizes and flavors.  One of the most common is a RAM disk allocat\hich\af4\dbch\af4\loch\f4 ed from the control panel of your computer.  We do not recommend using a RAM disk of this kind unless you have only one 3.5" floppy disk, and then we recommend keeping it small and using it only for temporary storage.  These RAM disks are allocated from t\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e memory of your computer.  ORCA/C can make very effective use of that memory if you let it \endash  the system will perform better than if you try to copy parts of ORCA to your RAM disk.  In addition, RAM disks allocated from main memory are easy to destroy fro\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4  a program that is accidentally writing to memory that it has not allocated.  While this is unusual in commercial programs, you may find that your own programs do this frequently during the development cycle.  RAM disks that are not allocated from main me\hich\af4\dbch\af4\loch\f4 m\hich\af4\dbch\af4\loch\f4 ory, like Apple's "Slinky" RAM disk, are good for work space and even source code.  The so-called ROM disks}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ROM disks}}}{\hich\af4\dbch\af4\loch\f4 , or battery-backed RAM disks, should be treated as small hard disks}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 hard disks}}}{\hich\af4\dbch\af4\loch\f4 .  See the sections on installing ORCA/C on \hich\af4\dbch\af4\loch\f4 a hard disk for effective ways of using ROM disks.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318535}\hich\af4\dbch\af4\loch\f4 Details About Configuration{\*\bkmkend _Toc495318535}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 system configuration}}}{\hich\af4\dbch\af4\loch\f4 In this section, we will explore why ORCA/C is configured the way it is by looking at what happens when you run ORCA/C, when ORCA looks for files, a\hich\af4\dbch\af4\loch\f4 nd where it looks for files.  The material in this section is advanced information for experienced programmers.  You do not need to understand this material for beginning and intermediate programming, and the entire section can safely be skipped.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORC\hich\af4\dbch\af4\loch\f4 A.Sys16}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell}}}{\hich\af4\dbch\af4\loch\f4 Whether you are using the text or desktop programming system, you always start ORCA/C by running the ORCA.Sys16 file.  This file contains the UNIX-like text based shell.  }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSCMND file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 shell\:command table}}}{\hich\af4\dbch\af4\loch\f4 The first th\hich\af4\dbch\af4\loch\f4 ing the shell does after starting is to look for a folder called Shell; this folder must be in the same location as the ORCA.Sys16 file.  Inside this folder, the shell looks for an ASCII file (it can be stamped as a ProDOS TXT file or an ORCA SRC file) wi\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 h the name SYSCMND; this is the command table.  It is loaded one time, and never examined again.  The shell must get at least this far, successfully loading the SYSCMND table, or it will stop with a system error.\par \hich\af4\dbch\af4\loch\f4 The next step taken by the shell is to set \hich\af4\dbch\af4\loch\f4 up the default prefixes.  Prefix 8 is not changed if it has already been set by the program launcher, but the shell will set it to the same prefix as prefix 9 if prefix 8 is initially empty.  The remaining prefixes default to prefix 9 plus some subdirecto\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 y, as show in the table below.\par \par }\pard\plain \s31\qj\li1260\ri4320\sl223\slmult1\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2160\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 prefix\tab set to\par }\pard\plain \s26\qj\li1260\ri4320\sl223\slmult1\widctlpar\tx2160\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 13\tab 9:libraries\par \hich\af2\dbch\af4\loch\f2 14\tab 9\par \hich\af2\dbch\af4\loch\f2 15\tab 9:shell\par \hich\af2\dbch\af4\loch\f2 16\tab 9:languages\par \hich\af2\dbch\af4\loch\f2 17\tab 9:utilities\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 LOGIN file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 scripts}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 alias command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 PRIZM}}}{\hich\af4\dbch\af4\loch\f4 The last step taken by the shell is to look in prefix 15 for a script file na\hich\af4\dbch\af4\loch\f4 med LOGIN.  To qualify, this file must have a file type of SRC, and a language stamp of EXEC.  If the shell does not find a valid LOGIN file, it simply moves on; in other words, you can leave out the LOGIN file if you choose.  Typically, this script file \hich\af4\dbch\af4\loch\f4 i\hich\af4\dbch\af4\loch\f4 s used to set up custom aliases, set up shell variables, change the default prefixes listed above to other locations, and to execute PRIZM, the desktop development system.  One thing this shows is that, as far as ORCA is concerned, the PRIZM desktop devel\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 pment system is actually nothing more than an application that you run from within the shell.  Systems that default to the desktop programming environment do so by running PRIZM from within the LOGIN script, so PRIZM is executed as part of the boot proces\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 .\par \hich\af4\dbch\af4\loch\f4 After executing the LOGIN script, the shell writes a # character to the screen and waits for further commands.  If course, if PRIZM is executed from the LOGIN file, the shell never gets a chance to do this until you quit from PRIZM.\par \hich\af4\dbch\af4\loch\f4 Prefixes 13 to 17 are\hich\af4\dbch\af4\loch\f4  initialized by the shell, but you can change them to point to other folders if you prefer.  To understand how these prefixes are used, we'll look at the programs that currently use them.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 EDIT command}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSEMAC file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSHELP file}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 SYSTABS file}}}{\hich\af4\dbch\af4\loch\f4 When you use the EDIT command, the shell attempts to run a program named EDITOR; it expects to find an EXE file with this name in prefix 15 (the "Shell" prefix).  If the shell does not find an EXE file with the name EDITOR in prefix 15, it \hich\af4\dbch\af4\loch\f4 writes the message "ProDOS: File not found" and returns to the # prompt.  The ORCA editor uses prefix 15 to locate the SYSTABS file (to set up the tab line), the SYSEMAC file (to set up the default editor macros), and the SYSHELP file (to write the editor\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 help screen).  The editor can function perfectly well without any of these files, although you will get a warning message each time you load a file if there is no SYSTABS file.  When you cut, copy or paste text, the editor reads or writes a file called SY\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 TEMP to prefix 14; obviously, the editor will perform a lot faster on these operations if prefix 14 is set to point to a RAM disk.\par \hich\af4\dbch\af4\loch\f4 A few other programs look at the SYSTABS file in prefix 15; PRIZM is another good example.  No other use is currently made of\hich\af4\dbch\af4\loch\f4  prefix 15.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 pipes}}}{\hich\af4\dbch\af4\loch\f4 Prefix 14, which the editor uses as a work prefix, is also used by the shell when you pipe output from one program to become input to another program.  The shell handles piping by creating a temporary file to hold the output of on\hich\af4\dbch\af4\loch\f4 e program, reading this file as standard input for the next program.  These pipe files are called SYSPIPE0, SYSPIPE1, and so forth, depending on how many pipes were used on a single command line.\par \hich\af4\dbch\af4\loch\f4 When you use any of the commands to compile or link a progra\hich\af4\dbch\af4\loch\f4 m, the shell looks in prefix 16 for the compiler, assembler, or linker.  For example, if you compile a C source file, the shall takes a look at the auxtype field for the file, which will have a value of 8.  The shell then scans its internal copy of the SY\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4 CMND file looking for a language with a number of 8, and finds one with a name of CC.  The shell then loads and executes the file 16:CC; if it does not find such a file, it flags a language not available error.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 header files}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 #include}}}{\hich\af4\dbch\af4\loch\f4 Compilers and linkers make heavy use of prefix 13, which is not actually used by the shell.  Prefix 13, the library prefix, is where the C compiler looks for header files.  When you code a file-related C directive with brackets around the file n\hich\af4\dbch\af4\loch\f4 ame, like this standard include:\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 #include <stdio.h>\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 the C compiler appends this file name to the prefix 13:ORCACDefs, giving a full path name for the file of 13:ORCACDefs:stdio.h.  The ORCA/Pascal}{\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 ORCA/Pascal}}}{\hich\af4\dbch\af4\loch\f4  compiler does something similar, but \hich\af4\dbch\af4\loch\f4 it uses 13:ORCAPascalDefs.  A convention has also gradually developed to put assembler macros and equate files in a folder called AInclude or ORCAInclude inside the library folder, although the assembler and MACGEN utility don't automatically scan this fo\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 der.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 linker}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 libraries}}}{\hich\af4\dbch\af4\loch\f4 The linker also uses the library folder.  When you link a program, especially one written in a high-level language, the program almost always needs a few subroutines from a standard library.  The linker recognizes this\hich\af4\dbch\af4\loch\f4  automatically, and scans prefix 13 looking for library files.  The linker ignores any folders or other non-library files it might find.  When the linker finds a library file, it opens it, scans the files in the library to resolve any subroutines, closes \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 he file, and moves on.  The linker never goes back to rescan a library, which is why it is important for the libraries to be in the correct order.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 utilities}}}{\hich\af4\dbch\af4\loch\f4 Prefix 17 is the utility prefix.  When you type a command from the shell, the shell checks \hich\af4\dbch\af4\loch\f4 to see if it is in the command table.  If so, and if the file is a utility, the shell appends the name to 17: and executes the resulting file.  For example, when you run the MAKELIB utility to create your own C library, the shell actually executes the fil\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  17:MAKELIB, giving a file not found error if there is no such file.  Utilities are not limited to EXE type files; you can make an SYS file, S16 file, or script file a utility, too.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 HELP command}}}{\hich\af4\dbch\af4\loch\f4 Prefix 17 is also used by the help command.  When you\hich\af4\dbch\af4\loch\f4  type HELP with no parameters, the help command dumps the command names from the SYSCMND table.  When you type HELP with some parameter, like\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 help catalog\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 the help command looks for a text (TXT) or source (SRC) file named 17:HELP:CATALOG, typing the file\hich\af4\dbch\af4\loch\f4  if it is found.  In other words, you can use the help command to type any standard file, as long as you put that file in the HELP folder inside of the utilities folder.\par }\pard \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 All of the files that were not mentioned in this section can be placed absolutely anyw\hich\af4\dbch\af4\loch\f4 here you want to put them \endash  since none of the ORCA software looks for the files in a specific location, you have to tell the system where they are anyway.  It might as well be a location you can remember, so pick one that makes sense to you.\par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 Finder}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 memory model}}}{\hich\af4\dbch\af4\loch\f4 All of this information can be put to use for a variety of purposes.  For example, by installing the Finder, BASIC.SYSTEM, and any other programs you use regularly as utilities under ORCA, you can boot directly into ORCA's text enviro\hich\af4\dbch\af4\loch\f4 nment (which takes less time than booting into the Finder) and use ORCA as a program launcher.  You can also split the ORCA system across several 3.5" floppy disks by moving, say, the libraries folder to the second disk, setting prefix 13 to point to the \hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 ew disk from within your LOGIN file.\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl \pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318536}\hich\af4\dbch\af4\loch\f4 Appendix C \endash  Run-Time License{\*\bkmkend _Toc495318536} \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par \hich\af4\dbch\af4\loch\f4 Any program written with ORCA/C has some of C's run-time libraries linked into the executable program.  These libraries are copyrighted by the Byte Works.  While we feel you should be a\hich\af4\dbch\af4\loch\f4 ble to use these libraries free of charge for any program you write, commercial or not, there are also a few legal requirements that must be met so we can protect our copyright.\par \hich\af4\dbch\af4\loch\f4 On any program written with ORCA/C, you must include a copyright statement sta\hich\af4\dbch\af4\loch\f4 ting that the program contains copyrighted libraries from the ORCA/C run-time library.  This copyright must appear in a prominent place.  If the program has any other copyright statement, the ORCA/C copyright statement must appear in the same location.  T\hich\af4\dbch\af4\loch\f4 h\hich\af4\dbch\af4\loch\f4 e text that must be included is:\par \par \tab \hich\af4\dbch\af4\loch\f4 This program contains material from the ORCA/C\par \tab \hich\af4\dbch\af4\loch\f4 Run-Time Libraries, copyright 1987-1992\par \tab \hich\af4\dbch\af4\loch\f4 by Byte Works, Inc.  Used with permission.\par \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Appendix D: Console Control Codes\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318537}\hich\af4\dbch\af4\loch\f4 Appendix D \endash  Console Control Codes{\*\bkmkend _Toc495318537} \par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par }{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text programming}}}{\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \v\fs20\loch\af4\hich\af4\dbch\f4\cgrid {\xe {\v \hich\af4\dbch\af4\loch\f4 text screen}}}{\hich\af4\dbch\af4\loch\f4 When \hich\af4\dbch\af4\loch\f4 you are writing programs that will be executed in a text environment, you can use a number of special console control codes.  These are special characters which cause the console to take some action, like moving the cursor or turning the cursor off.  This\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 appendix gives a list of the most commonly used console control codes for the GS/OS .CONSOLE driver; this is the default text output device used by ORCA/C for stand-alone text programs and for programs executed under the text shell.\par \hich\af4\dbch\af4\loch\f4 If you send output to s\hich\af4\dbch\af4\loch\f4 ome output device other than the GS/OS .CONSOLE driver that ORCA/C 2.0 uses as the default output device, some of these control codes may not be respected, and others may be available.  In general, very few console control codes are recognized when output\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 is sent to a graphics device or printer.\par \hich\af4\dbch\af4\loch\f4 For a complete list of the console control codes supported by the GS/OS .CONSOLE driver, see }{\ul \hich\af4\dbch\af4\loch\f4 Apple II}{\fs18\ul \hich\af4\dbch\af4\loch\f4 GS}{\ul \hich\af4\dbch\af4\loch\f4  GS/OS Reference}{\hich\af4\dbch\af4\loch\f4 , pages 242-245.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318538}\hich\af4\dbch\af4\loch\f4 Beep the Speaker{\*\bkmkend _Toc495318538}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Writing (char) 7 to the screen beeps the speaker.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Beep the\hich\af2\dbch\af4\loch\f2  speaker */\par \par \hich\af2\dbch\af4\loch\f2 void Beep (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 7);\par \}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The C language has an escape sequence that does the same thing; it is the \\a escape sequence.  In fact, in ORCA/C, \\a maps to character 7.  As a general rule, it is better to write '\\a' instead of (cha\hich\af4\dbch\af4\loch\f4 r) 7, since the escape sequence will work if you move the program to other computers, and C programmers from other computers will recognize what your program does.\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318539}\hich\af4\dbch\af4\loch\f4 Cursor Control{\*\bkmkend _Toc495318539}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The text screen normally shows the cursor as an inverse character.  You can t\hich\af4\dbch\af4\loch\f4 urn the cursor off by writing (char) 6, and turn it back on again using (char) 5.  With some careful timing, you can even blink the cursor by alternately writing these characters.  These control codes are missing in the GS/OS .CONSOLE driver.\par \hich\af4\dbch\af4\loch\f4 There are sev\hich\af4\dbch\af4\loch\f4 eral control codes that move the cursor.  (char) 8 moves the cursor one column to the left.  If the cursor starts in column 0 (the leftmost column), it is moved to column 79 (the rightmost column) of the line above.  If the cursor starts in column 0 of ro\hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4  0 (the top row), it is moved to column 79 of row 0.\par \hich\af4\dbch\af4\loch\f4 (char) 10 moves the cursor down one line.  If the cursor starts on line 23 (the bottom line on the screen), the screen scrolls up one line and the cursor stays in the same relative position.  The escape \hich\af4\dbch\af4\loch\f4 sequence \\n maps into a character with a value of 10, and this character is used across C systems on all computers to move to the start of the next line, as opposed to moving down one line without moving to the left.  To make this work, the ORCA/C librari\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4 s automatically add a \\r character any time a character with a value of 10 is written to the screen.  The net result is that there is no way to move down one line without also moving to the start of the line using the standard libraries; this character wi\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 l move to the start of the next line, instead.\par \hich\af4\dbch\af4\loch\f4 (char) 28 moves the cursor right one column.  If the cursor starts in column 79, it is moved to column 0 of the same line.  This curious behaviour is worth noting:  you would normally expect that the cursor wo\hich\af4\dbch\af4\loch\f4 uld move to column 0 of the }{\i \hich\af4\dbch\af4\loch\f4 next}{\hich\af4\dbch\af4\loch\f4  line, not the current line, especially when the action of (char) 8 is taken into account.\par \hich\af4\dbch\af4\loch\f4 (char) 31 moves the cursor up one line.  If the cursor starts on lin e0, nothing happens.\par \hich\af4\dbch\af4\loch\f4 (char) 25 moves the cursor to line 0, colum\hich\af4\dbch\af4\loch\f4 n 0, which is the top left character on the screen. It does not clear the screen; it simply moves the cursor.  (char) 12 also moves the cursor to the top left of the screen, but is also clears the screen to all blanks.  Note that (char) 12 is completely e\hich\af4\dbch\af4\loch\f4 q\hich\af4\dbch\af4\loch\f4 uivalent to the \\f escape sequence.\par \hich\af4\dbch\af4\loch\f4 (char) 13 moves the cursor to the start of the current line.  It is equivalent to the \\r escape sequence.\par \hich\af4\dbch\af4\loch\f4 (char) 30 is the only control code that requires more than one character.  This character starts a cursor movement\hich\af4\dbch\af4\loch\f4  sequence which depends on the two characters that follow.  Using this character code, the cursor can be positioned to any column and row on the screen.  The first character after the (char) 30 is used to position the cursor in a particular column.  The c\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 lumn number is computed by subtracting 32 from the ordinal value of the character written.  The next character determines the row, also by subtracting 32 from the ordinal value of the character.  For example, \par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 printf("%c%c%c", (char) 30, (char) (10+32), (\hich\af2\dbch\af4\loch\f2 char) (5+32));\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\widctlpar\adjustright {\hich\af4\dbch\af4\loch\f4 would move the cursor to column 10, row 5.  Columns and rows both start with number 0, so that the upper-left screen position is at row 0, column 0, and the lower-right screen position is at row 23, column 79.  See the GotoXY function, belo\hich\af4\dbch\af4\loch\f4 w, for a convenient way of using this feature.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Move the cursor to the top left of the screen */\par \hich\af2\dbch\af4\loch\f2 /* and clear the screen                            */\par \par \hich\af2\dbch\af4\loch\f2 void formfeed (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 12);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Move the cursor to column x, row y */\par \par \hich\af2\dbch\af4\loch\f2 void gotoxy\hich\af2\dbch\af4\loch\f2  (int x, int y)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 30);\par \hich\af2\dbch\af4\loch\f2 putchar((char) (x+32));\par \hich\af2\dbch\af4\loch\f2 putchar((char) (y+32));\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Move the cursor to the top left of the screen */\par \par \hich\af2\dbch\af4\loch\f2 void home (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 25);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Move the cursor to the start of the next line down */\par \par \hich\af2\dbch\af4\loch\f2 void linef\hich\af2\dbch\af4\loch\f2 eed (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 10);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Move the cursor to the left */\par \par \hich\af2\dbch\af4\loch\f2 void moveleft (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 8);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Move the cursor to the right */\par \par \hich\af2\dbch\af4\loch\f2 void moveright (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 28);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Move the cursor up one line */\par \par \hich\af2\dbch\af4\loch\f2 void moveup (voi\hich\af2\dbch\af4\loch\f2 d)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 31);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Move the cursor to the start of the current line */\par \par \hich\af2\dbch\af4\loch\f2 void return (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 13);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318540}\hich\af4\dbch\af4\loch\f4 Clearing the Screen{\*\bkmkend _Toc495318540}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 In the last section, we looked at (char) 12, which clears the screen and moves the cursor to the top-left \hich\af4\dbch\af4\loch\f4 of the screen.  There are two other control codes that can clear parts of the screen.  (char) 11 clears the screen from the cursor position to the end of the screen, filling the cleared area with blanks.  (char) 29 is still more selective.  It clears the \hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 creen from the current character position to the end of the line.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Clear to the end of the current line */\par \par \hich\af2\dbch\af4\loch\f2 void cleartoeol (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 29);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Clear to the end of the screen */\par \par \hich\af2\dbch\af4\loch\f2 void cleartoeos (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 11);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318541}\hich\af4\dbch\af4\loch\f4 Inverse C\hich\af4\dbch\af4\loch\f4 haracters{\*\bkmkend _Toc495318541}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Text normally shows up on the text screen as white characters on a black background.  Writing (char) 15 causes any future characters to be written as black characters on a white background.  (char) 14 reverses the effect, writing white characters\hich\af4\dbch\af4\loch\f4  on a black background.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Write all future characters in inverse */\par \par \hich\af2\dbch\af4\loch\f2 void inverse (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 15);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Write all future characters in normal mode (white on black) */\par \par \hich\af2\dbch\af4\loch\f2 void normal (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 14);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s2\sb400\sa200\keepn\widctlpar\brdrt\brdrs\brdrw30\brsp20 \outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318542}\hich\af4\dbch\af4\loch\f4 MouseText{\*\bkmkend _Toc495318542}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The Apple II}{\fs18 \hich\af4\dbch\af4\loch\f4 GS}{\hich\af4\dbch\af4\loch\f4  te\hich\af4\dbch\af4\loch\f4 xt screen has a set of graphics characters called MouseText characters.  The name comes from the primary purpose for the characters, which is to implement text-based desktop environments for use with a mouse, like the text version of Apple Works.  You nee\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4  to do two things to enable MouseText characters: enable MouseText, and switch to inverse characters.  After taking these steps, any of the characters from '@' to '_' in the ASCII character set will show up as one of the graphics characters from the Mouse\hich\af4\dbch\af4\loch\f4 T\hich\af4\dbch\af4\loch\f4 ext character set.  (char) 27 turns MouseText on, while (char) 24 turns it off.\par \hich\af4\dbch\af4\loch\f4 You need to be sure and turn MouseText off if you turn it on \endash  the ORCA shell expects to me in normal mode when your program is finished.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 /* Turn mousetext on */\par \par \hich\af2\dbch\af4\loch\f2 void mousete\hich\af2\dbch\af4\loch\f2 xton (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 27);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par \par }\pard \s26\qj\fi360\sl223\slmult1\keepn\widctlpar\adjustright {\hich\af2\dbch\af4\loch\f2 /* Turn mousetext off */\par \par \hich\af2\dbch\af4\loch\f2 void mousetextoff (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 putchar((char) 24);\par }\pard \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright {\}\par }\pard\plain \s16\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The best way to see the MouseText characters and to see which key each graphics character is associated with is with a short program.  The ex\hich\af4\dbch\af4\loch\f4 ample below assumes that you have typed in the inverse, normal, mousetexton and mousetextoff functions from this appendix.\par \par }\pard\plain \s26\qj\fi360\sl223\slmult1\widctlpar\adjustright \fs18\loch\af2\hich\af2\dbch\f4\cgrid {\hich\af2\dbch\af4\loch\f2 int main (void)\par \par \{\par \hich\af2\dbch\af4\loch\f2 char ch;\par \par \hich\af2\dbch\af4\loch\f2 for (ch = '@'; ch < '`'; ++ch) \{\par \hich\af2\dbch\af4\loch\f2    putchar(ch);\par \hich\af2\dbch\af4\loch\f2    putchar(' ');\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 putchar('\\n');\par \hich\af2\dbch\af4\loch\f2 putchar('\\n');\par \par \hich\af2\dbch\af4\loch\f2 m\hich\af2\dbch\af4\loch\f2 ousetexton();\par \hich\af2\dbch\af4\loch\f2 for (ch = '@'; ch < '`'; ++ch) \{\par \hich\af2\dbch\af4\loch\f2    inverse();\par \hich\af2\dbch\af4\loch\f2    putchar(ch);\par \hich\af2\dbch\af4\loch\f2    normal();\par \hich\af2\dbch\af4\loch\f2    putchar(' ');\par \hich\af2\dbch\af4\loch\f2    \}\par \hich\af2\dbch\af4\loch\f2 mousetextoff();\par \hich\af2\dbch\af4\loch\f2 putchar('\\n');\par \}\par \sect }\sectd \sbknone\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl \pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc495318543}\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerf \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Index}{\par }}\pard\plain \s1\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Index{\*\bkmkend _Toc495318543}\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par \par }\pard\plain \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\b \hich\af4\dbch\af4\loch\f4 Special Characters\par }{\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field\fldedit{\*\fldinst {\fs20 \hich\af4\dbch\af4\loch\f4  INDEX \\c "2" }}{\fldrslt {\fs20\lang1024 \sect }\sectd \sbknone\linex-32767\headery2520\footery2520\cols2\endnhere\titlepg\pgbrdropt32\sectdefaultcl {\headerl \pard\plain \s25\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Index\par }}{\headerr \pard\plain \s25\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af5\dbch\af4\loch\f5 Index\par }}\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {- operator, 310, 312, 321\par -- operator, 309, 313\par ! operator, 315, 321\par != operator, 315\par #append, }{\b 249}{\par #define, 131, }{\b 243}{\endash }{\b 47}{\par #elif, }{\b 252}{\par #else, }{\b 252}{\par #endif, }{\b 250}{\endash }{\b 51}{\par #error, 254\par #if, }{\b 250}{\endash }{\b 51}{\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {expressions, 251\par nesting, 251\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {#ifdef, }{\b 253}{\par #ifndef, }{\b 253}{\par #include, 109, }{\b 248}{\endash }{\b 49}{, 265, 273, 438\par #line, 254\par #pragma, 254\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {cda, 42, 43, }{\b 254}{\par cdev, 46, }{\b 255}{\par databank, }{\b 255}{\par debug, }{\b 256}{\par expand, }{\b 257}{\par float, }{\b 258}{\par ignore, }{\b 258}{\par keep, }{\b 259}{\par lint, }{\b 259}{\par memorymodel, }{\b 260}{\par nba, 45, }{\b 261}{\par nda, 40, }{\b 262}{\par noroot, }{\b 263}{\par optimize, }{\b 263}{\par path, 131, }{\b 265}{\par rtl, 45, }{\b 266}{\par stacksize, }{\b 266}{\par toolparms, }{\b 267}{\par xcmd, 46, }{\b 267}{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {#undef, 246\endash }{\b 47}{\par % operator, 312\par %= operator, 318\par & operator, 315, 318\par && operator, 315\par &= operator, 318\par * operator, 311, 319, 321\par *= operator, 318\par , operator, 319\par / operator, 311\par /= operator, 318\par ? operator, 319, 321\par ^ operator, 316\par ^= operator, 318\par __DATE__, 247\par __FILE__, 247\par __LINE__, 247\par __ORCAC__, 247\par __STDC__, 247, 250\par __TIME__, 247\par __VERSION__, 247\par _exit, 353\par _tolower, 404\par _toupper, 405\par \{0\} shell variable, }{\b 115}{\par \{1\}, \{2\}, ... shell variables, }{\b 115}{\par \{AuxType\} shell variable, }{\b 115}{, 153\par \{CaseSensitive\} shell variable, }{\b 115}{\par \{Command\} shell variable, }{\b 115}{\par \{Echo\} shell variable, }{\b 115}{\par \{Exit\} shell variable, }{\b 115}{, 160, 164\par \{Insert\} shell variable, }{\b 115}{\par \{KeepName\} shell variable, }{\b 116}{, 130\par \{KeepType\} shell variable, }{\b 116}{, 153\par \{Libraries\} shell variable, }{\b 116}{\par \{LinkName\} shell variable, }{\b 116}{, 160\par \{Parameters\} shell variable, }{\b 116}{\par \{Prompt\} shell variable, }{\b 117}{\par \{Separator\} shell variable, }{\b 117}{\par \{Status\} shell variable, }{\b 117}{, 151, 160, 164\par | operator, 315\par || operator, 315\par |= operator, 318\par ~ operator, 316, 321\par + operator, 310, 312, 321\par ++ operator, 309, 312\par += operator, 318\par < operator, 315\par << operator, 316, 321\par <<= operator, 318\par <= operator, 315\par = operator, 316, 320\par -= operator, 318\par == operator, 315\par > operator, 315\par >= operator, 315\par >> operator, 316, 321\par >>= operator, 318\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 Numbers\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {68881, 258, 269, 321\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 A\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {abort, 353\par abort command, 129\par abs, 342\par acos, 343\par ALIAS command, 123, }{\b 127}{, 171, 272, 437\par alphabetizing directories, 139\par ANSI C, 246\par APPEND directive, 128\par appending to the end of a file, }{\b 118}{\par apple menu, 40\par AppleShare, 158\par APW, 1, 66, 272, 392, 423\par APW C, 27, 138, 252, 350\par arctan, 344\par argc, 271\par argv, 271\par arrays, 260, }{\b 280}{\endash }{\b 82}{, 289, 305\endash 7, 317, 324\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {as pointers, 305\par indexing, 306\par initialization, 288\par memory requirements, 281\par multiple subscripts, 281\par size limits, 281\par storage, 281\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {arrow keys, }{\b 73}{\par ASCII character set, 112, 115, 165, 237\par asctime, 350\par asin, 343\par asm statement, 294, 333\par ASM6502 language, 107\par ASM65816 command, }{\b 128}{\par ASM65816 language, 106\par ASML command, 112, 116, }{\b 128}{, 132, 160, 167\par ASMLG command, 116, 128, 160, 167\par ASSEMBLE command, 128, 162\par assembly language, 5, 47\endash 55, 57, 90, 249, 269, 272, 294, 333\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {accessing global variables, 54\par calling C procedures and functions, 55\par direct page, 51\par passing parameters, 50\endash 54\par returning function values, 49\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {assert, 343\par assignment conversions, 320\par assignments\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {compound, 317\par multiple, 318\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {atan, 344\par atan2, 344\par atexit, 344\par atof, 345\par atoi, 345\par atol, 345\par auto indent command, }{\b 87}{\par auto save command, }{\b 88}{\par auto storage class, 276\par auto-go command, 12, }{\b 98}{\par auxiliary file type, 115, 135, 153\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 B\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {backing up the disks, 7\par bank relative programs, 158\par BASIC, 90\par binary conversion rules, 321\par bit fields, 285\endash 86\par blocks, 135\par boot prefix, 108\par booting ORCA/C, 2\par branching\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {EXEC files, 113\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {BREAK command, }{\b 132}{, 160\par break points, 10, 13, 97\par break statement, 326, 330\endash 31\par bsearch, 345\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 C\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {C, 73, 75, 86, 87, 90, 100, 107\par c2pstr, 346\par calloc, 382\par cancel button, 94\par case label, 329, 330\par case sensitivity, 186, 233, 300\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {shell, 114, 115, 117\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {cast, 322\par CATALOG command, 106, 118, 123, }{\b 133}{, 139, 146, 153, 169\par CC command, }{\b 136}{\par ceil, 347\par cfree, 366\par CHANGE command, }{\b 136}{, 148\par char, 269, 278, 322\par character constants, 239\par characters\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {formatting, 362\par scanning, 369\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {check for errors command, 90\par chmod, 347\par clalloc, 382\par classic desk accessories, 42, 43, 44, 93, 254\par clear command, 70, 73, }{\b 79}{\par clearerr, 355\par clock, 348\par close, 348\par close command, }{\b 76}{\par CMPL command, 112, 128, }{\b 137}{, 160\par CMPLG command, 112, 128, }{\b 137}{, 160\par code segment, 130, 162\par command line, 67, 106, 113, 115, 116, 118, 151, 167, 271\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {prompt, 117\par reading, 67\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {command list, 156\par command table, }{\b 123}{, 137, 155\par commandline, 349\par COMMANDS command, 123, }{\b 137}{\par COMMENT command, 118, }{\b 172}{\par comments, 241\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {EXEC files, 118\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {comp, 270, 278\par COMPACT command, }{\b 138}{\par compaction, 159\par compilation errors, 9, 409\par compile command, 11, 30, 64, 90, 112, 128, }{\b 138}{\par compile to disk command, 30, 31, }{\b 89}{\par compile to memory command, 8, 25, 48, 49, }{\b 88}{, 89\par compiler, 124\par compiler directives, 254\par compiler listings, 129\par compiling a program, 128, 132, 137, 138\par compound statement, 325\par COMPRESS command, }{\b 139}{, 169\par conditional compilation, 250\par console device, 28\par const, 279, 282\par constants, 233, 279, 305\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {floating-point, 240\par integer, 235, 236, 237\par long integer, 235, 236\par strings, 237\par unsigned integer, 235, 236\par unsigned long integer, 235, 236\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {continuation lines, 234, 238, 243\par CONTINUE command, }{\b 139}{\par continue statement, 326, 330\endash 31\par control characters, 239\par Control Panel, 46, 255\par conversions, 320\endash 24\par copy command, }{\b 78}{, 112, }{\b 140}{\par copying disks, 7\par cos, 349\par cosh, 349\par CPM, 158\par crashes, 264\par creat, 349\par CREATE command, }{\b 142}{\par creation time, 135\par CRUNCH utility, 106, 109, }{\b 142}{\par ctime, 350\par current prefix, 108, 133, 139\par cut command, }{\b 78}{\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 D\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {data fork, 140, 230\par data formats, 269\par databank, 255\par date, 135, 246\par debug code, 10, 11, 42, 44, 92, 95, 101\par debug menu, }{\b 95}{\endash }{\b 98}{\par debugger, 10, 11, 16, 38, 39, 49, 81, 92, 93, 95\endash 98, 256\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {case sensitivity, 16\par classic desk accessories, 44\par libraries, 30\par menu bar while debugging, 35\par new desk accessories, 42\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {debugger:variables, 15\par declarations, 325\par default label, 329, 331\par defaults for PRIZM, 100\par defined operator, 251\par DELETE command, 112, 139, }{\b 142}{\par delete key, 70, }{\b 73}{, 78, 79\par delete line command, }{\b 87}{\par delete to end of line command, }{\b 86}{\par DeRez, 195, 196, 197, 202, 203, 205, 209, 216, 219, 223, 230\par DEREZ command, }{\b 143}{\par desk accessories, 93\par desktop development environment, 1, 7\endash 17, 69\endash 101\par desktop environment, 35\endash 42\par desktop programs, 38\par DETAB, 171\par device names, 60, }{\b 111}{, 140, 168\par device numbers, 111\par devices, 145, 168\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {.CONSOLE, 111, 118\par .NULL, 122\par .PRINTER, 111, 118, 119\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {DEVICES command, }{\b 145}{\par difftime, 351\par direct page, 266\par direct selection, 308\par directives, 19\par directories, 59, 60, 91, 93. See also folders\par directory walking, }{\b 111}{\par DISABLE command, }{\b 146}{, 149\par disassembler, 135\par disk copying, 140\par disk size, 135\par DISKCHECK command, }{\b 147}{\par display selection command, }{\b 84}{\par div, 351\par do statement, 327, 330\par DOS, 139, 169\par DOS (Apple), 158\par double, 270, 322, 323\par DUMPOBJ utility, 127\par dup, 352\par dynamic segments, 333\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 E\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {ECHO command, 132, }{\b 148}{, 155\par EDIT command, 64, 65, 108, }{\b 148}{, 437\par edit menu, }{\b 78}{\endash }{\b 79}{\par editor, 124\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {about command, }{\b 179}{\par arrow keys, 176\par auto-indent mode, }{\b 174}{, 185, 193\par beep the speaker command, }{\b 179}{\par beginning of line command, }{\b 179}{\par bottom of screen command, 175, }{\b 180}{\par buttons, 178\par check boxes, 178\par close command, }{\b 180}{\par control underscore key, }{\b 174}{\par copy command, }{\b 180}{\par create macros command, 176\par cursor down command, 175, }{\b 180}{\par cursor left command, 175, }{\b 180}{\par cursor right command, 175, }{\b 180}{\par cursor up command, 175, }{\b 180}{\par customizing, }{\b 192}{\par cut command, }{\b 181}{\par define macros command, }{\b 181}{\par delete character command, }{\b 181}{, 192\par delete character left command, }{\b 181}{, 192\par delete command, }{\b 181}{\par delete line command, }{\b 181}{, 192\par delete to end of line command, }{\b 182}{, 192\par delete word command, }{\b 182}{, 192\par deleting characters in macros, 176\par dialogs, 177\par editline controls, 177\par editline items, 177\par end macro definition command, 176\par end of line command, 175, }{\b 182}{\par ESCAPE key, 175\par escape mode, }{\b 174}{\par executing macros, }{\b 176}{\par exit macro creation command, 176\par help command, }{\b 182}{\par hidden characters, 175\par insert blank lines command, 174\par insert line command, }{\b 182}{\par insert mode, }{\b 173}{\par insert space command, }{\b 182}{\par line length, }{\b 173}{\par list controls, 178\par macro keystrokes, }{\b 176}{\par macros, }{\b 176}{\par modes, 192\par mouse, 179\par moving through a file, }{\b 186}{\par multiple files, 183, 190\par multiple files., 189\par new command, }{\b 182}{\par open Apple key, 174\par open command, }{\b 183}{\par over strike mode, }{\b 173}{, 193\par paste command, 180, }{\b 184}{\par quit command, }{\b 184}{\par remove blanks command, }{\b 184}{\par repeat counts, }{\b 174}{, }{\b 184}{\par RETURN key, 175, }{\b 185}{\par save as command, }{\b 185}{\par save command, }{\b 186}{\par screen move commands, 175\par scroll down one line command, }{\b 186}{\par scroll down one page command, }{\b 186}{\par scroll up one line, }{\b 186}{\par scroll up one page command, }{\b 186}{\par search and replace down command, }{\b 188}{\par search and replace up command, }{\b 189}{\par search down command, }{\b 186}{\par search up command, }{\b 188}{\par select file command, }{\b 189}{\par select mode, }{\b 174}{, 193\par }\pard\plain \s35\li720\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\cgrid {\lang1024 by character, }{\b\lang1024 174}{\lang1024 , 184\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {select mode by character, 175\par set/clear auto-indent mode command, }{\b 191}{\par set/clear escape mode command, }{\b 191}{\par set/clear insert mode command, }{\b 191}{\par set/clear select mode command, }{\b 191}{\par set/clear tab stops command, }{\b 189}{\par setting defaults, }{\b 192}{\par shift left command, }{\b 189}{\par shift right command, }{\b 190}{\par start of line command, 175\par status banner, 129\par switch files command, }{\b 190}{\par tab command, 175, }{\b 190}{\par tab left command, 175, }{\b 191}{\par tab mode, 193\par tabs, 175, 178\par top of screen command, 175, }{\b 191}{\par undo command, 181\par undo delete buffer, 181, 192\par undo delete command, }{\b 192}{\par version, }{\b 179}{\par word left command, 175, }{\b 192}{\par word right command, 175, }{\b 192}{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {EDITOR file, 109\par EDOM, 343, 344, 380, 381, 386\par ELSE clause of IF command, }{\b 149}{, 156\par ELSE IF clause of IF command, 156, 160\par else statement, 328\par ENABLE command, 146, }{\b 149}{, 153\par END command, 132, 139, }{\b 150}{, 155, 156, 160\par END directive, 129\par enddesk, 394\par endgraph, 34, 394\par ENTAB utility, }{\b 149}{\par enter key, 70\par enum, 279, 292\par enumerations\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {initialization, 287\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {EOF, 136, 352\par ERANGE, 349, 354, 366, 380, 381, 386, 393, 400, 402\par ERASE command, }{\b 150}{\par errno, 353, 356, 358, 400\par error output, 65, 108, 119, 394\par error reporting\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {compiler, 128\par shell, 115, 117, 119, 151\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {errors, 254, 257, 258, 353\par escape sequences, }{\b 239}{\par EXEC command, }{\b 150}{\par EXEC files, 57, 107, }{\b 113}{, 132, 139, 148, 151, 156, 160, 167\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {parameter passing, 113, }{\b 114}{, 155, 167\par redirection, 119\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {EXEC language, 113, 150\par executable files, 106, 107, 116, 123\par execute command, }{\b 94}{, 115, 116, }{\b 151}{, 168\par execute options command, }{\b 94}{\par executing a program, 132, 137\par EXISTS command, }{\b 151}{\par exit, 353\par EXIT command, }{\b 151}{\par exp, 354\par EXPORT command, 115, }{\b 152}{, 167\par EXPRESS command, }{\b 152}{\par expressed files, 159\par expressions, 280, 303\endash 24, 326\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {shell, }{\b 117}{, 156\par syntax, 303\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {ExpressLoad, 152\par extended, 270, 322, 323\par extended files. see resources\par extending a selection, 71\par extern, 275, 289\par extras menu, 69, 73, }{\b 85}{\endash }{\b 88}{\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 F\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {fabs, 342\par fclose, 354\par fcntl, 354\par feof, 355\par ferror, 355\par fflush, 356\par fgetc, 356\par fgetpos, 356\par fgets, 357\par file access flags, 135, 146, 149, 153\par file length, 136\par file menu, }{\b 76}{\endash }{\b 77}{, 89\par file names, 59, }{\b 110}{, 135, 246, 254. see also path names\par file system translator, 157, 158\par file types, 112, 115, 116, 135, 153, 161, 170\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {auxtype. see auxiliary file type\par CDA, 44\par EXE, 33\par NDA, 42\par S16, 33\par SRC, 112, 183\par TXT, 112, 183\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {FILETYPE command, }{\b 153}{\par find command, }{\b 83}{\endash }{\b 84}{\par find menu, }{\b 82}{\endash }{\b 85}{\par find same command, }{\b 84}{\par Finder, 439\par float, 270, 322, 323\par floating-point, 258, 269, 277, 321, 322\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {constants, 240\par formatting, 363\par initialization, 287\par scanning, 370\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {floor, 347\par fmod, 357\par folders, 59. see also directories\par fopen, 358\par FOR command, 114, 132, 139, 150, }{\b 155}{\par for statement, 327, 330\par formatting disks, }{\b 150}{, }{\b 157}{\par FPE card, 20, 258\par fprintf, 359\par fputc, 365\par fputs, 365\par fread, 365\par free, 366\par freopen, 358\par frexp, 366\par fscanf, 367\par fseek, 372\par fsetpos, 356\par FST, 157, 158\par ftell, 373\par function prototypes, 296\par functions, 277, 278, 293\endash 301, 307, 321, 324, 326\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {asm, 294\par calling through a pointer, 307\par declaration, 293\par extern, 294\par inline, 294\par parameters. see parameters\par return type, 289, 293\par return value, 331\par returning a value, 300\par static, 294\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {functions:, 331\par fwrite, 373\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 G\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {getc, 356\par getchar, 356\par getenv, 374\par gets, 357\par gmtime, 380\par go command, 12, }{\b 96}{\par goto command, 71, }{\b 85}{\par goto next return command, 15, }{\b 96}{\par goto statement, 326, 329\par graphics environment, 33\par graphics programs, 80\par graphics window, 8, 9, 11, 33, 34, }{\b 80}{, 93\par GS/OS, 5, 117\par GS/OS aware, 110\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 H\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {hard disks, 2, 436\par header files, 129, 249, 438\par HELP command, 67, 106, 109, }{\b 155}{, 438\par hexadecimal, 81, 134, 135, 136, 144, 222, 224, 227, 229, 236, 239, 305, 334, 362, 368, 369, 379, 404\par hidden characters, 175\par high level language debugger, 38\par High Sierra, 158\par HISTORY commands, }{\b 156}{\par HOME commands, }{\b 156}{\par HUGE_VAL, 400\par HyperCard, 46, 267\par HyperStudio, 45, 261\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 I\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {I/O redirection, 272\par identifiers, 233\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {case sensitivity, 233\par length, 233\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {IF command, 150, }{\b 156}{, 160\par if statement, 328\par IN clause of FOR command, 155\par indenting, 73\par indirect selection, 308\par INIT command, }{\b 157}{\par INIT utility, 109\par initializers, }{\b 287}{\endash }{\b 89}{, 325\par inits, 45, 266\par inline, 294\par Innovative Systems, 269\par input, 29\par INPUT command, }{\b 158}{\par input redirection, 65\par insert line command, }{\b 86}{\par insert mode, 69, 72, 73, 87, 100\par insertion point, 69, 70, 71, 72, 73, 75, 84, 85, 87\par installing ORCA/C, 433\par int, 269, 278, 322\par integers, 269, 278, 322, 323, 324\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {constants, 235, 236, 237\par formatting, 361\par initialization, 287\par scanning, 368\par storage, 269\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {interface files, 272\par isalnum, 374\par isalpha, 374\par isascii, 375\par iscntrl, 375\par iscsym, 375\par iscsymf, 376\par isdigit, 376\par isgraph, 376\par islower, 377\par isodigit, 377\par isprint, 377\par ispunct, 378\par isspace, 378\par isupper, 379\par isxdigit, 379\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 J\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {join lines command, }{\b 86}{\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 K\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {KEEP directive, 116, 130\par KEEP parameter, 116, 130, 160, 162\par keyboard input, 356\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 L\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {labels, 329\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {global, 129\par scope, 291\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {labs, 342\par language names, 118, 135, 150, 165, 168, 170\par language numbers, }{\b 107}{, 168, 192\par language stamp, 106, 112, 128, 135, 136, 148, 150\par languages menu, 9, 89, 99\par Languages prefix, 108, 109, 123\par large memory model, 260, 332\par ldexp, 366\par ldiv, 351\par learning C, 3\par libraries, 23, 27, 28\endash 32, 57, 63, 93, 109, 116, 159, 161, 162, 260, 273, 275, 337\endash 407, 438. see also toolbox\par Libraries prefix, 108, 109\par line editor, }{\b 103}{\endash }{\b 5}{\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {clear-line command, 105\par cursor-left command, 104\par cursor-right command, 104\par delete-character-left command, 104\par delete-to-end-of-line command, 104\par end-of-line command, 104\par execute command, 105\par insert mode, 105\par start-of-line command, 104\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {line numbers, 85, 246, 254\par link command, 31, 64, }{\b 92}{, 113, 116, 132, }{\b 158}{\par link errors, 409\par link map, 129, 158\par linker, 109, 116, 124, 130, 158, 409, 438\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {script files, 160\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {LINKER command, }{\b 160}{\par linking a program, 128, 132, 137\par Lisa, 158\par LIST directive, 129\par load files, 158. see also executable files\par localtime, 380\par locking files, 146\par log, 380\par log10, 381\par LOGIN file, 109, 127, 152, 165, 167, 437\par long, 269, 278, 322\par long command lines, 113\par long integers\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {constants, 235, 236\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {longjmp, 391\par LOOP command, 132, 139, 150, }{\b 160}{\par lseek, 381\par l-values, 305\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 M\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {Macintosh, 158\par macro stringization, 246\par macros, 247, 249\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {defined operator, 251\par expanding, 257\par in #if statements, 250\par nesting, 246\par parameters, 245\par predefined, 246\par scope, 291\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {main, 271\par makelib command, 31\par MAKELIB utility, 109, }{\b 161}{\par malloc, 382\par memchr, 382\par memcmp, 383\par memcpy, 383\par memmove, 383\par memory, 433. see also large memory model. see also small memory model. see also small memory compiler\par memory manager, 382\par memory model, 332, 439\par memset, 383\par menu bar, 12, 35, 38, 82, 85, 96\par menus, 9\par merging files, 171\par MERR directive, 128\par mktime, 380\par mlalloc, 382\par modf, 384\par modification date, 163, 170\par modify time, 135\par mouse, 9, 179\par MOVE command, 112, }{\b 162}{\par MS/DOS, 158\par multiple assignments, 318\par multiple languages, 249\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 N\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {networks, 108\par New Button Actions, 261\par new command, 76\par new desk accessories, 40, 42, 262\par NEWER command, }{\b 163}{\par newline character, 239, 358\par null character, 238, 239\par null statement, 326\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 O\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {object files, 8, 19, 30, 31, 88, 89, 91, 92, 93, 259, 272, 426, 428\par object module format, 162\par object modules, 8, 116, 129, 130, 132, 138, 142, 158, 161\par object segment, 130, 158\par octal, 222, 224, 229, 235, 236, 239, 240, 305, 334, 361, 368, 369, 377, 410\par offsetof, 384\par OMF, 138\par open, 385\par open command, 7, 11, }{\b 76}{, 77\par operator precedence, 304, 309\par optimizer, 263\par ORCA.Sys16, 437\par ORCA/C language, 107\par }{\ul ORCA/M}{, 5, 47, 119, 122, 138, 272, 423, 426, 428, 435\par }{\ul ORCA/Pascal}{, 5, 272, 435, 438\par ORCA/Pascal language, 107\par output, 28, 29\par output redirection, 65\par over strike command, 69, }{\b 87}{\par over strike mode, 69, 72, 73, 87, 100\par overloading classes, 291\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 P\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {p2cstr, 346\par page setup command, }{\b 77}{\par parameters, 257, 259, 290, 295\endash 300, 321, 406\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {checking, 296\par function prototypes, 296\par passing, 50, 298\par variable length lists, 297\par void prototypes, 297\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {parameters:, 50\par parentheses, 309\par partial compilation, 91, 130, 142\par Pascal, 73, 86, 87, 90, 107, 158, 272. see also ORCA/Pascal\par PASCAL command, }{\b 164}{\par pascal qualifier, 267, }{\b 300}{, 418\par paste command, 70, 78\par path names, 59, 60, 61, 63, 107, 113, 117, 130, 134. see also file names\par perror, 353\par pipes, 66, 109, }{\b 122}{, 438\par pointers, 270, 282\endash 83, 317, 322, 323, 324\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {initialization, 287\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {pragma, 19, 254. see also #pragma\par precompiled headers, 129, 249\par PREFIX command, 107, 109, }{\b 164}{\par prefixes, 61\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {0-7, 110\par numbers, }{\b 107}{, 110, 111, 123\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {preprocessor, 243\endash 68\par preprocessor macros. see macros\par print command, 70, }{\b 77}{\par printer device, 65\par printers, 65, 122\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {characters per line, 121\par configuration, 119\par control characters, 121\par lines per page, 120\par redirecting output, 118, 119\par slot, 120\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {printf, 23, 359\par printing files, 77, 118, 171\par PRIZM, 437\par ProDOS, 157, 158\par ProDOS 8, 107, 153\par PRODOS command, 106, }{\b 165}{, 170\par PRODOS language, 106, 112, 165\par profile command, }{\b 97}{\par profiler, 13, 97, 101, 257\par program launchers, 108\par program size, 135\par Programmer\rquote s Reference for System 6.0, 4\par programming examples, 132, 139, 155, 157, 161\par p-strings, 239, 346\par putc, 365\par putchar, 365\par puts, 365\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 Q\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {qsort, 386\par QuickDraw II, 33\par quit command, }{\b 77}{, }{\b 165}{\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 R\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {raise, 387\par RAM, 109\par RAM disks, 88, 436\par rand, 387\par range checking, 256\par read, 387\par realloc, 388\par redirection, 106, 118\par register, 276\par registration card, 3\par relalloc, 388\par remove, 389\par rename, 389\par RENAME command, 105, 112, }{\b 165}{\par replace command, }{\b 84}{, 85\par replace same command, }{\b 85}{\par RESEQUAL command, }{\b 166}{\par reserved symbols, }{\b 233}{\par reserved words, }{\b 233}{\par resource description file, 196, 199\par resource fork, 136, 140, 230\par resources, 140, 143, 166, 167, 195\endash 232. see Rez\par restartability, 124, 137\par restartable programs, 106\par return characters, 175\par return key, 73, 81, 83, 87, 358\par return statement, 326, 331\par revert to saved command, }{\b 77}{\par rewind, 372\par Rez, 143\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {append statement, 222\par arrays, 209, 212, 216\par built-in functions, 215, 225\par change statement, 211\par comments, 196\par conditional compilation, 219\par data statement, 202\par define statement, 218\par delete statement, 211\par escape characters, 228\par expressions, 225\par if statement, 219\par include statement, 109, 199, 222\par labels, 214, 216, 217\par macros, 218\par options, 230\par printf statement, 220\par read statement, 201\par resource attributes, 200\par resource statement, 212, 223\endash 30\par resource types, 202\par strings, 205, 227, 228\par switch statement, 209, 212\par symbols, 210\par type statement, 202\par undef statement, 218\par variables, 225\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {REZ command, }{\b 167}{\par Rez compiler, }{\b 195}{\endash }{\b 232}{\par Rez:, 218\par ROM disks, 436\par root file, 263\par ruler, 75, 87\par RUN command, 64, 116, 128, }{\b 167}{\par run menu, 11, }{\b 88}{\endash }{\b 95}{\par run-time errors, 257, 353, 409\par run-time stack, 261, 266\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 S\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {S16 files, 107\par Samples folder, 11\par SANE, 240, 258, 266, 269, 270, 321\par save command, }{\b 76}{, }{\b 77}{\par scalars, 16, 81\par scanf, 367\par scope, }{\b 290}{\endash }{\b 92}{, 325\par script files\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {linker, 160\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {scripts, 437\par segment statement, 261, 332\par select all command, 71, }{\b 79}{\par selecting a document, 71\par selecting lines, 70\par selecting text, 70\par selecting words, 71\par separate compilation, 93, 272, 273, 275, 294\par SET command, 114, 160, }{\b 167}{, 171\par set/clear break points command, }{\b 97}{\par setbuf, 390\par setjmp, 391\par setvbuf, 390\par shell, 1, 2, 57\endash 68, 70, 89, 91, 93, 98, 99, 103\endash 72, 437\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {command table, 437\par commands, 58\par errors, 67\par identifier, 67\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {shell command, }{\b 98}{\par shell commands, 113\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {built-in commands, 106, 123\par command expansion, 103\par command list, 104, 105\par command types, }{\b 106}{, 123\par language names, }{\b 106}{, 123\par metacharacters, 130\par multiple commands, 105, 113\par parameters, 128, 151\par utilities, 106\par utility commands, 123, 124\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {shell prefix, 108, 123, 137, 182\par shell prompt, 105, 117\par shell variables, }{\b 114}{, 115, 151, 158\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {assigning values to, 114, 167, 171\par metacharacters, 116\par scope, 115, 152, 167\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {shell variables:, 152, 167\par shell window, 8, 9, 15, 23, 57, 58, 272\par shell window command, }{\b 80}{\par shell: variables, 272\par shellid, 392\par shift left command, }{\b 86}{\par shift right command, }{\b 86}{\par short, 269, 278, 322\par SHOW command, 111, 118, 136, 165, }{\b 168}{\par show ruler command, 75, }{\b 87}{\par SHUTDOWN command, }{\b 168}{\par signal, 392\par signed, 269\par sin, 393\par sinh, 393\par site license, 7\par sizeof operator, 313, 324\par small memory compiler, 250, 264, 433\par small memory model, 260, 332\par SOS, 158\par source files, 170\par source-level debugger, 256\par sparse files, 135\par split screen, }{\b 72}{\par sprintf, 359\par sqrt, 393\par srand, 387\par sscanf, 367\par stack command, }{\b 80}{\par stack overflow, 256\par stack repair code, 257, 264, 297, 298, 406\par stack size, 256\par standard input, 65, 66, 108, 118, 356\par standard libraries, 248. see also libraries\par standard output, 28, 58, 65, 66, 108, 118, 133, 148, 170, 365, 394\par standard prefixes, }{\b 107}{, 110, 164, 168\par startdesk, 266, 394\par startgraph, 34, 266, 394\par statements, 326\par static, 276\par static segments, 332\par stderr, 395\par stdin, 395\par stdout, 395\par step command, 11, 12, 38, }{\b 95}{, 96\par step through command, 14, }{\b 96}{\par stop command, 11, 39, 96, }{\b 97}{\par storage class, 275\par storage type, 136\par strcat, 395\par strchr, 396\par strcmp, 397\par strcpy, 397\par strcspn, 398\par strerror, 353\par string constants, 237, 239\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {trigraphs, 234\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {strings, }{\b 237}{\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {continuation, 238\par formatting, 362\par in expressions, 238\par maximum length, 238\par p-strings, 239\par scanning, 370, 371\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {strlen, 399\par strncat, 395\par strncmp, 397\par strncpy, 397\par strpbrk, 398\par strpos, 396\par strrchr, 396\par strrpbrk, 398\par strrpos, 396\par strspn, 398\par strstr, 399\par strtod, 400\par strtok, 401\par strtol, 400\par strtoul, 400\par structures, 260, 283\endash }{\b 86}{, 292, 308, 317\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {accessing elements, 284\par assigning, 284\par in functions, 284\par initialization, 288\par size, 283\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {SWITCH command, 139, }{\b 169}{\par switch statement, 326, 329, 330\par sym files, 129, 249\par symbol tables\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {linker, 129, 158\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {SysCharErrout, 338\par SysCharOut, 338\par SYSCMND file, 109, 123, 137, 437\par SYSEMAC file, 109, 176, 437\par SYSHELP file, 182, 437\par SysIOShutDown, 338\par SysIOStartup, 338\par SysKeyAvail, 338\par SysKeyin, 339\par SYSPIPEx files, 122\par SysPutback, 339\par SYSTABS file, 75, 99, 100, 108, 109, 192, 437\par system, 402\par System 6.0, 5\par system configuration, 433, 436\par SYSTEM files, 107\par SystemEnvironmentInit, 339\par SystemError, 339\par SystemErrorLocation, 340\par SystemMinStack, 340\par SystemMMShutDown, 341\par SYSTEMP file, 180, 184\par SystemPrintError, 341\par SystemQuitFlags, 341\par SystemQuitPath, 341\par SystemSANEInit, 341\par SystemSANEShutDown, 342\par SystemUserID, 342\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 T\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {tab key, }{\b 73}{, 75, 84\par tab stop, 73, }{\b 75}{, 88, 99\par tabs, 175, 178, 186, 187, 193\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {ENTAB utility, 149\par removing, 171\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {tan, 402\par tanh, 402\par terminal errors, 129, 423, 429\par terms, 305\par text based development, 1\par TEXT command, }{\b 170}{\par text environment, 23, 24, 25, 27, 42, 57\endash 68\par text files, 106, }{\b 112}{, 123, 165, 170, 171\par TEXT language, 107, 112, 170\par text programming, 443\par text screen, 443\par tile command, }{\b 79}{\par time, 135, 246, 403\par tmpfile, 403\par tmpnam, 403\par toascii, 403\par toint, 404\par token merging, 246\par tokens, }{\b 233}{\endash 41, 251\par tolower, 404\par toolbox, 4, 5, 33, 248, 266, 267, 273, 294, 337, 406\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {interface files, 37\par learning, 3, 4, 36\par reference manuals, 4\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {toolerror, 404\par TOUCH command, }{\b 170}{\par toupper, 405\par trace backs, 257\par trace command, 12, 13, 80, }{\b 96}{, 97, 98\par trigraphs, }{\b 234}{\par type casting, 322\par TYPE command, 149, }{\b 170}{\par type specifier, }{\b 277}{\endash }{\b 79}{\par typedef, 276, 278\par types, 269\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 U\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {UNALIAS command, 127, }{\b 171}{\par unary conversion rules, 321\par undo command, 70, }{\b 78}{\par ungetc, 405\par unions, 260, }{\b 286}{\endash }{\b 87}{, 292, 308, 317\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {accessing elements, 286\par in functions, 286\par initialization, 289\par size, 286\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {unlocking files, 149\par UNSET command, 114, 115, 160, 167, }{\b 171}{\par unsigned, 269, 322\par unsigned integers\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {constants, 235, 236\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {unsigned long integers\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {constants, 235, 236\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {userid, 406\par utilities, 66, 67, 438\par Utilities prefix, 106, 108, 109, 124, 155\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 V\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {va_arg, 297\par va_arg va_end va_start, 406\par variable scope. see scope\par variables, 277, 305\par variables command, 15, }{\b 80}{\par variables window, 15, 16, 80, 81, }{\b 96}{\par version\par }\pard\plain \s36\fi-180\li540\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {editor, 179\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {vfprintf, 407\par Visual Cues, 3\par void, 278, 289, 324\par volatile, 279, 282\par volume names, 111, 133, 139, 140, 150, 157, 168\par vprintf, 407\par vsprintf, 407\par }\pard\plain \s16\qj\sl223\slmult1\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard \s16\qj\sl223\slmult1\keepn\widctlpar\adjustright {\b \hich\af4\dbch\af4\loch\f4 W\par }{\par }\pard\plain \s37\fi-180\li180\widctlpar\tqr\tldot\tx3590\adjustright \f4\fs20\lang1024\cgrid {wait flag, 129\par while statement, 326, 327, 328, 330\par white space, 241\par wildcards, 63, }{\b 112}{, 134, 140, 142, 148, 151, 163, 169, 170\par windows, 9, 35\par windows menu, }{\b 79}{\endash }{\b 82}{\par word tabbing, }{\b 74}{\par work prefix, 108, 109, 122, 180, 184\par write, 407\par write protect, 141\par XCFN, 267\par XCMD, 267\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20\lang1024 \sect }\sectd \sbknone\linex-32767\headery2520\footery2520\endnhere\titlepg\pgbrdropt32\sectdefaultcl \pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid }}\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par }}