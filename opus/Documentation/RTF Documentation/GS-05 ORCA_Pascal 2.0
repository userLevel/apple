{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset2\fprq2{\*\panose 03b811100059001d74c0}Zapf Dingbats;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f23\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f25\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f26\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f27\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f28\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f34\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f35\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f37\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f38\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f40\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f41\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f42\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f44\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f45\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f46\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f47\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f48\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f49\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f50\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f51\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f52\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f53\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f55\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f56\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f57\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f58\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f60\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f61\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f62\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f63\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f64\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f65\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f66\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f67\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f68\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f69\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f78\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f80\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f81\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f82\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f86\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f87\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f88\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f89\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f90\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f91\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f92\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f93\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f96\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f97\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f98\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f99\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f100\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f101\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f102\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f103\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f104\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f105\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f106\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f107\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f108\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f109\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f110\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f112\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f113\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f114\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f115\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f116\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f117\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f118\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f119\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f121\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f122\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f123\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f124\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f125\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset2\fprq2{\*\panose 03b811100059001d74c0}Zapf Dingbats;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f23\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f25\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f26\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f27\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f28\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f34\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f35\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f37\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f38\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f40\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f41\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f42\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f44\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f45\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f46\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f47\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f48\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f49\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f50\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f51\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f52\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f53\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f55\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f56\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f57\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f58\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f60\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f61\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f62\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f63\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f64\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f65\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f66\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f67\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f68\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f69\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f78\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f80\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f81\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f82\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f86\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f87\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f88\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f89\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f90\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f91\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f92\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f93\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f96\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f97\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f98\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f99\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f100\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f101\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f102\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f103\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f104\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f105\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f106\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f107\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f108\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f109\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f110\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f112\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f113\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f114\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f115\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f116\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f117\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f118\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f119\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f121\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f122\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f123\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f124\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f125\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \f4\cgrid \snext0 Normal;}{\s1\sb240\widctlpar\adjustright \b\f5\ul\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb120\widctlpar\adjustright \b\f5\cgrid \sbasedon0 \snext0 heading 2;}{\s3\li360\widctlpar\adjustright \b\f4\cgrid \sbasedon0 \snext0 heading 3;}{\s4\li360\widctlpar\adjustright \f4\ul\cgrid \sbasedon0 \snext0 heading 4;}{\s5\li720\widctlpar\adjustright \b\f4\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\s6\li720\widctlpar\adjustright \f4\fs20\ul\cgrid \sbasedon0 \snext0 heading 6;}{\s7\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 8;}{\s9\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li5040\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 8;}{\s16\li4320\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 7;}{\s17\li3600\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 6;}{\s18\li2880\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 5;}{\s19\li2160\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 4;}{\s20\li1440\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 3;}{\s21\li720\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 2;}{\s22\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 1;}{\s23\li2160\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 7;}{\s24\li1800\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 6;}{\s25\li1440\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 5;}{\s26\li1080\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 4;}{\s27\li720\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 3;}{\s28\li360\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 2;}{\s29\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 1;}{\*\cs30 \additive \sbasedon10 line number;}{\s31\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext31 footer;}{\s32\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext32 header;}{\*\cs33 \additive \fs16\up6 \sbasedon10 footnote reference;}{\s34\widctlpar\adjustright \f4\fs20\cgrid \sbasedon0 \snext34 footnote text;}{\s35\li5760\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 9;}{\*\cs36 \additive \sbasedon10 page number;}{\s37\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 Unnamed Style;}{\s38\ri960\sb160\sl280\slmult0\keep\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext38 1text;}{\s39\sl240\slmult0\widctlpar\adjustright \f6\fs20\cgrid \sbasedon0 \snext39 cv;}{\s40\widctlpar\adjustright \cbpat9 \f7\cgrid \sbasedon0 \snext40 Document Map;}}{\*\revtbl {Unknown;}}{\info{\title ORCA/Pascal 2.0}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy4\hr18\min59}{\revtim\yr2000\mo10\dy4\hr18\min59}{\printim\yr2000\mo10\dy4\hr18\min56}{\version2}{\edmins3}{\nofpages444}{\nofwords126236}{\nofchars719550}{\*\company Byte Works, Inc.}{\nofcharsws883657}{\vern99}}\margl2160\margr2160\margt2880\margb2880 \facingp\widowctrl\ftnbj\aenddoc\hyphhotz0\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\fs20 \par }}{\headerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\tx450\tx720\adjustright \f4\cgrid {\b\fs72 \par \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\b\i\fs72 ORCA/Pascal 2.0}{\b\fs48\up20 \u8482\'aa}{\b\i\fs72  \par }\pard \qc\widctlpar\adjustright {\b\i\shad\fs36 An Object Pascal Compiler\par and Development System \par for the\par }\pard \qc\widctlpar\outlinelevel0\adjustright {\b\i\shad\fs36 Apple\~II}{\b\i\shad\scaps\fs28 GS}{\b\i\shad\fs36 \par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\b\fs36 \par }\pard \qc\widctlpar\tx450\tx720\outlinelevel0\adjustright {\b\fs36 Mike Westerfield\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\fs36 Byte Works}{\fs20\up12 \u174\'a8}{\fs36 , Inc.}{\par 4700 Irving Blvd. NW, Suite 207\par Albuquerque, NM  87114\par (505) 898-8183\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f12 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \widctlpar\tx450\tx720\adjustright \f4\cgrid {\fs20 \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\outlinelevel0\adjustright {Credits\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par }\pard \li2880\widctlpar\outlinelevel0\adjustright {\fs20 Pascal Compiler\par }\pard \li2880\widctlpar\adjustright {\fs20 \tab Mike Westerfield\par \par }\pard \li2880\widctlpar\outlinelevel0\adjustright {\fs20 Development Environment\par }\pard \li2880\widctlpar\adjustright {\fs20 \tab Mike Westerfield\par \tab Phil Montoya\par \par }\pard \li2880\widctlpar\outlinelevel0\adjustright {\fs20 Testing\par }\pard \li2880\widctlpar\adjustright {\fs20 \tab Mike Westerfield\par \par }\pard \li2880\widctlpar\outlinelevel0\adjustright {\fs20 Documentation\par }\pard \li2880\widctlpar\adjustright {\fs20 \tab Mike Westerfield\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\outlinelevel0\adjustright {\fs20 Copyright 1989, 1991, 1992, 1993\par }\pard \qc\widctlpar\tx450\tx720\adjustright {\fs20 By The Byte Works, Inc.\par All Rights Reserved\par \par }\pard \qc\widctlpar\tx450\tx720\outlinelevel0\adjustright {\fs20 Copyright 1986,1987, 1989\par }\pard \qc\widctlpar\tx450\tx720\adjustright {\fs20 Apple Computer, Inc.\par All Rights Reserved\par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\fs20 \page }{\b\fs18 Limited Warranty}{\fs18  - Subject to the below stated limitations, Byte Works, Inc. hereby warrants that the programs contained in this unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from date of purchase.  Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose.  The limits of warranty extend only to the original purchaser.\par Neither Byte Works, Inc. nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par To obtain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works, Inc. within ten (10) days of purchase.\par }{\b\fs18 Important Notice}{\fs18  - This is a fully copyrighted work and as such is protected under copyright laws of the United States of America.  According to these laws, consumers of copywritten material may make copies for their personal use only.  Duplication for any purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par This product is sold for use on a }{\i\fs18 single computer}{\fs18  at a }{\i\fs18 single location}{\fs18 .  Contact the publisher for information regarding licensing for use at multiple-workstation or multiple-computer installations.\par }{\b\fs18 Use of Libraries}{\fs18  - The enclosed subroutine libraries are fully copyrighted works.  It is the policy of Byte Works, Inc. to license these libraries to purchasers of ORCA/Pascal free of charge.  Such licenses are generally restricted to include the libraries of binary files, and do not extend to use of the source code.  For details, see Appendix D.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\fs18 ORCA/Pascal is a trademark of the Byte Works, Inc.\par The Byte Works is a registered trademark of the Byte Works, Inc.\par Apple and GS/OS are registered trademarks of Apple Computer, Inc.\par }{\fs14 \par }\pard \qc\fi540\widctlpar\tx450\tx720\outlinelevel0\adjustright {\fs18 Program, Documentation and Design\par }\pard \qc\fi540\widctlpar\tx450\tx720\adjustright {\fs18 Copyright 1984-1993\par The Byte Works, Inc.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\fs14 \par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\fs18 Apple Computer, Inc. MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITTED BY SOME STATES.  THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS.  THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE.\par GS/OS is a copyrighted program of Apple Computer, Inc. licensed to Byte Works, Inc. to distribute for use only in combination with ORCA/Pascal.  Apple software shall not be copied onto another diskette (except for archive purpose) or into memory unless as part of the execution of ORCA/Pascal.  When ORCA/Pascal has completed execution Apple Software shall not be used by any other program.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\fs18 Apple is a registered trademark of Apple Computer, Inc.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Table of Contents\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Table of Contents\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Table of Contents\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 1 \endash  Introducing ORCA/Pascal\tab 1\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 ORCA/Pascal\tab 1\par What You Need\tab 1\par About the Manual\tab 2\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Visual Cues\tab 3\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Other Books and Reference Materials\tab 3\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 2 \endash  Exploring the System\tab 7\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Backing Up ORCA/Pascal\tab 7\par The Bull's Eye Program\tab 7\par Finding Out About the Desktop\tab 8\par How Graphics and Text are Handled\tab 9\par The Languages Menu\tab 9\par What's a Debugger?\tab 10\par Using the Source-Level Debugger\tab 11\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Debugging a Simple Graphics Program\tab 11\par The Step Command\tab 11\par The Stop Command\tab 11\par The Trace Command\tab 11\par The Go Command\tab 12\par The Set Auto-Go Command\tab 12\par Break Points\tab 13\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Debugging a Program With More Than One Subroutine\tab 13\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Profile Command\tab 13\par The Step Through Command\tab 14\par The Goto Next Return Command\tab 15\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Viewing Program Variables\tab 15\par Those Other Disks\tab 16\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 3 \endash  Compiler Directives\tab 19\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 What's a Compiler Directive?\tab 19\par How Directives are Coded\tab 19\par A Brief Summary of ORCA/Pascal Compiler Directives\tab 19\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 4 \endash  Programming on the Apple\~II}{\fs18 GS}{\fs20 \tab 23\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Text Programs\tab 23\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Built-in Procedures and Functions\tab 27\par Console Control Codes\tab 28\par Stand-Alone Programs\tab 28\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Graphics Programs\tab 28\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Your First Graphics Program\tab 29\par Stand-Alone Programs\tab 30\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Programming on the Desktop\tab 31\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Learning the Toolbox\tab 31\par Hardware Requirements\tab 32\par Toolbox Interface Files\tab 32\par Debugging a Desktop Program\tab 33\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Writing New Desk Accessories\tab 35\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Debugging NDAs\tab 37\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Classic Desk Accessories\tab 38\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Debugging Classic Desk Accessories\tab 40\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Inits\tab 40\par HyperStudio NBAs\tab 41\par HyperCard XCMDs\tab 41\par Control Panel Devices (CDevs)\tab 42\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 5 \endash  Writing Assembly Language Subroutines\tab 43\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Introduction\tab 43\par The Basics\tab 43\par Returning Function Values From Assembly Language Subroutines\tab 45\par Passing Parameters to Assembly Language Subroutines\tab 46\par The Macro Solution\tab 49\par Accessing Pascal Variables from Assembly Language\tab 50\par Calling Pascal Procedures and Functions from Assembly Language\tab 51\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 6 \endash  Using the Shell\tab 53\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Another Look at the Shell Window\tab 53\par Getting Into Text\tab 53\par How Shell Commands Work\tab 54\par File Names\tab 55\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Directory Walking\tab 56\par Device Names\tab 56\par Standard Prefixes\tab 57\par Using Wild Cards\tab 59\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Required and Optional Parameters\tab 61\par Redirecting Input and Output\tab 61\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Pipelines\tab 62\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Writing Your Own Utilities\tab 62\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Installing a New Utility\tab 63\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Learning More About the Shell\tab 64\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 7 \endash  Desktop Reference\tab 65\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Basic Operations\tab 65\par The Cursor\tab 65\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Insertion Point\tab 65\par Over Strike Mode\tab 65\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Selecting Text\tab 66\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Selection By Dragging\tab 66\par Selecting Lines\tab 66\par Selecting the Entire Document\tab 67\par Selecting Words\tab 67\par Extending a Selection\tab 67\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Split Screen\tab 68\par Entering Text\tab 68\par Special Keys\tab 69\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Return Key\tab 69\par Delete Key\tab 69\par Tab Key\tab 69\par The Arrow Keys\tab 69\par Screen Moves\tab 70\par Word Tabbing\tab 70\par Moving to the Start or End of a Line\tab 70\par Moving Within the File\tab 70\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Ruler\tab 71\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Default tab stops\tab 71\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The File Menu\tab 72\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 New\tab 72\par Open\tab 72\par Close\tab 72\par Save\tab 72\par Save As\tab 73\par Revert To Saved\tab 73\par Page Setup\tab 73\par Print\tab 73\par Quit\tab 73\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Edit Menu\tab 74\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Undo\tab 74\par Cut\tab 74\par Copy\tab 74\par Paste\tab 74\par Clear\tab 75\par Select All\tab 75\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Windows Menu\tab 75\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Tile\tab 75\par Stack\tab 76\par Shell Window\tab 76\par Graphics Window\tab 76\par Variables Window\tab 76\par List of Window Names\tab 78\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Find Menu\tab 78\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Find\tab 78\par Find Same\tab 80\par Display Selection\tab 80\par Replace\tab 80\par Replace Same\tab 81\par Goto\tab 81\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Extras Menu\tab 81\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Shift Left\tab 81\par Shift Right\tab 82\par Delete to End of Line\tab 82\par Join Lines\tab 82\par Insert Line\tab 82\par Delete Line\tab 83\par Auto Indent\tab 83\par Over Strike\tab 83\par Show Ruler\tab 84\par Auto Save\tab 84\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Run Menu\tab 84\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Compile to Memory\tab 85\par Compile to Disk\tab 85\par Check for Errors\tab 86\par Compile\tab 86\par Link\tab 88\par Execute\tab 90\par Execute Options...\tab 90\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Debug Menu\tab 91\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Step\tab 91\par Step Through\tab 92\par Trace\tab 92\par Go\tab 92\par Go to Next Return\tab 92\par Stop\tab 93\par Profile\tab 93\par Set/Clear Break Points\tab 93\par Set/Clear Auto-Go\tab 94\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Languages Menu\tab 94\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Installed Languages\tab 95\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The SYSTABS File\tab 95\par Setting up Defaults\tab 96\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 8 \endash  The Command Processor\tab 99\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Line Editor\tab 99\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Command Name Expansion\tab 99\par Multiple Commands\tab 101\par Scrolling Through Commands\tab 101\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Command Types\tab 101\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Built-in Commands\tab 102\par Utilities\tab 102\par Language Names\tab 102\par Program Names\tab 103\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Standard Prefixes\tab 103\par Prefixes 0 to 7\tab 105\par File Names\tab 106\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Wildcards\tab 107\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Types of Text Files\tab 108\par EXEC Files\tab 108\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Passing Parameters Into EXEC Files\tab 109\par Programming EXEC Files\tab 110\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Redirecting Input and Output\tab 114\par The .PRINTER Driver\tab 115\par The .NULL Driver\tab 118\par Pipelines\tab 118\par The Command Table\tab 119\par Command And Utility Reference\tab 121\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 ALIAS\tab 122\par ASM65816\tab 123\par ASML\tab 124\par ASMLG\tab 127\par ASSEMBLE\tab 127\par BREAK\tab 128\par CAT\tab 128\par CATALOG\tab 129\par CC\tab 132\par CHANGE\tab 132\par CMPL\tab 132\par CMPLG\tab 133\par COMMANDS\tab 133\par COMPACT\tab 133\par COMPILE\tab 134\par COMPRESS\tab 134\par CONTINUE\tab 135\par COPY\tab 135\par CREATE\tab 137\par CRUNCH\tab 137\par DELETE\tab 138\par DEREZ\tab 139\par DEVICES\tab 141\par DISABLE\tab 141\par DISKCHECK\tab 142\par ECHO\tab 143\par EDIT\tab 144\par ELSE\tab 144\par ENABLE\tab 145\par ENTAB\tab 145\par END\tab 145\par ERASE\tab 146\par EXEC\tab 146\par EXECUTE\tab 147\par EXISTS\tab 147\par EXIT\tab 147\par EXPORT\tab 148\par EXPRESS\tab 148\par FILETYPE\tab 149\par FOR\tab 151\par HELP\tab 151\par HISTORY\tab 152\par HOME\tab 152\par IF\tab 152\par INIT\tab 153\par INPUT\tab 154\par LINK\tab 154\par LINKER\tab 156\par LOOP\tab 156\par MAKELIB\tab 157\par MOVE\tab 158\par NEWER\tab 159\par PASCAL\tab 160\par PREFIX\tab 160\par PRODOS\tab 161\par QUIT\tab 161\par RENAME\tab 161\par RESEQUAL\tab 162\par REZ\tab 163\par RUN\tab 163\par SET\tab 163\par SHOW\tab 164\par SHUTDOWN\tab 164\par SWITCH\tab 165\par TEXT\tab 166\par TOUCH\tab 166\par TYPE\tab 166\par UNALIAS\tab 167\par UNSET\tab 167\par *\tab 168\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 9 \endash  The Text Editor\tab 169\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Modes\tab 169\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Insert\tab 169\par Escape\tab 170\par Auto Indent\tab 170\par Select Text\tab 170\par Hidden Characters\tab 171\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Macros\tab 172\par Using Editor Dialogs\tab 173\par Using the Mouse\tab 175\par Command Descriptions\tab 175\par Setting Editor Defaults\tab 188\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 10 \endash  The Resource Compiler\tab 191\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Overview\tab 191\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Decompiler\tab 191\par Type Declaration Files\tab 191\par Using the Resource Compiler and DeRez\tab 192\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Structure of a Resource Description File\tab 192\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Sample Resource Description File\tab 193\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Description Statements\tab 194\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Syntax Notation\tab 194\par Include \endash  Include Resources from Another File\tab 195\par Read \endash  Read Data as a Resource\tab 197\par Data \endash  Specify Raw Data\tab 197\par Type \endash  Declare Resource Type\tab 197\par Symbol Definitions\tab 206\par Delete \endash  Delete a Resource\tab 207\par Change \endash  Change a Resource's Vital Information\tab 207\par Resource \endash  Specify Resource Data\tab 207\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Labels\tab 210\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Built-in Functions to Access Resource Data\tab 210\par Declaring Labels Within Arrays\tab 211\par Label Limitations\tab 212\par An Example Using Labels\tab 213\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Preprocessor Directives\tab 214\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Variable Definitions\tab 214\par If-Then-Else Processing\tab 215\par Printf Directive\tab 215\par Include Directive\tab 218\par Append Directive\tab 218\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Description Syntax\tab 219\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Numbers and Literals\tab 219\par Expressions\tab 220\par Variables and Functions\tab 221\par Strings\tab 223\par Escape Characters\tab 224\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Using the Resource Compiler\tab 225\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Forks and Data Forks\tab 226\par Rez Options\tab 226\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 11 \endash  Program Symbols\tab 229\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Identifiers\tab 229\par Reserved Words\tab 229\par Reserved Symbols\tab 230\par Constants\tab 231\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Integers\tab 231\par Hexadecimal Numbers\tab 231\par Real Numbers\tab 232\par Character Constants\tab 232\par String Constants\tab 233\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Separators\tab 233\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 12 \endash  Basic Data Types\tab 235\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Integers\tab 235\par Reals\tab 235\par Sets\tab 236\par Booleans\tab 237\par Characters\tab 237\par Pointers\tab 237\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 13 \endash  Derived Data Types\tab 239\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Enumerations\tab 239\par Subranges\tab 239\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Unsigned Integers\tab 240\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Arrays\tab 241\par Strings\tab 242\par Records\tab 243\par Files\tab 244\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 14 \endash  Object Pascal\tab 247\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Object Oriented Programming\tab 247\par Objects\tab 248\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Objects\tab 248\par Object Variables\tab 248\par Accessing Instance Variables in Objects\tab 249\par Methods\tab 249\par Inheritance\tab 249\par Overriding Methods\tab 250\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Methods\tab 251\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Defining Methods\tab 251\par Inheriting Previous Methods\tab 252\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Using Objects\tab 253\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Allocating Objects with New\tab 253\par Disposing of Objects with Dispose\tab 254\par Passing Messages to Objects (Calling Methods)\tab 254\par The Self Object\tab 254\par Assigning Objects\tab 255\par Files of Objects\tab 256\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 tObject\tab 256\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Copying Objects with Clone\tab 257\par Disposing of Objects with Free\tab 258\par ShallowClone and ShallowFree\tab 258\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Chapter 15 \endash  The Program\tab 259\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Chapter 16 \endash  Units\tab 261\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 17 \endash  The Definition Section\tab 263\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Uses\tab 264\par Labels\tab 265\par Constants\tab 266\par Types\tab 267\par Variables\tab 268\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 External Variables\tab 269\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 18 \endash  Procedures and Functions\tab 271\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Value Parameters\tab 272\par Variable Parameters\tab 273\par Passing Procedures and Functions as Parameters\tab 273\par Univ Parameters\tab 275\par Forward and Extern\tab 275\par Tool, UserTool, Vector and ProDOS\tab 276\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Chapter 19 \endash  The Block\tab 279\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 20 \endash  Statements\tab 281\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Assignment Statement\tab 281\par Case Statement\tab 283\par Compound Statements\tab 284\par For Statement\tab 285\par Goto Statement\tab 286\par If-Then-Else Statement\tab 286\par Repeat Statement\tab 287\par While Statement\tab 288\par With Statement\tab 289\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 21 \endash  Expressions\tab 291\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Operators\tab 291\par Operations on Integers and Long Integers\tab 292\par Operations on Reals\tab 294\par Operations of Characters\tab 295\par Operations on Strings\tab 295\par Operations on Booleans\tab 296\par Operations on Sets\tab 296\par Operations on Pointers\tab 297\par Operator Precedence\tab 298\par Type Compatibility Rules\tab 299\par Type Casting\tab 300\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 22 \endash  Built-in Procedures and Functions\tab 303\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Abs\tab 305\par ArcCos\tab 305\par ArcSin\tab 306\par ArcTan\tab 306\par ArcTan2\tab 306\par Chr\tab 307\par Close\tab 307\par CommandLine\tab 308\par Cnvds\tab 308\par Cnvis\tab 309\par Cnvrs\tab 309\par Cnvsd\tab 310\par Cnvsi\tab 310\par Cnvsl\tab 310\par Cnvsr\tab 311\par Concat\tab 311\par Copy\tab 312\par Cos\tab 312\par Delete\tab 313\par Dispose\tab 313\par EndDesk\tab 314\par EndGraph\tab 314\par Eof\tab 314\par Eoln\tab 315\par Exp\tab 316\par Get\tab 316\par Halt\tab 316\par Insert\tab 317\par Length\tab 317\par Ln\tab 318\par Member\tab 318\par New\tab 319\par Odd\tab 320\par Open\tab 321\par Ord\tab 322\par Ord4\tab 322\par Pack\tab 323\par Page\tab 324\par Pointer\tab 324\par Pos\tab 325\par Pred\tab 325\par Put\tab 325\par Random\tab 326\par RandomDouble\tab 327\par RandomInteger\tab 327\par RandomLongint\tab 328\par Read, Readln\tab 328\par Reset\tab 331\par ReWrite\tab 331\par Round\tab 332\par Round4\tab 333\par Seek\tab 333\par Seed\tab 334\par ShellID\tab 334\par Sin\tab 334\par SizeOf\tab 335\par Sqr\tab 335\par Sqrt\tab 335\par StartDesk\tab 336\par StartGraph\tab 337\par Succ\tab 337\par SystemError\tab 338\par Tan\tab 339\par ToolError\tab 339\par Trunc\tab 340\par Trunc4\tab 340\par Unpack\tab 340\par UserID\tab 341\par Write, Writeln\tab 342\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 23 \endash  Compiler Directives\tab 345\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Append\tab 345\par CDev\tab 345\par ClassicDesk\tab 346\par Copy\tab 346\par DataBank\tab 346\par Debug\tab 347\par Dynamic\tab 347\par Eject\tab 348\par Float\tab 348\par ISO\tab 349\par Keep\tab 349\par LibPrefix\tab 350\par List\tab 350\par MemoryModel\tab 351\par Names\tab 352\par NBA\tab 353\par NewDeskAcc\tab 353\par Optimize\tab 355\par RangeCheck\tab 355\par RTL\tab 356\par Segment\tab 356\par StackSize\tab 357\par Title\tab 358\par ToolParms\tab 358\par XCMD\tab 359\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Appendix A \endash  ISO Conformance and Summary of Extensions\tab 361\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 ISO Conformance\tab 361\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Errors Not Caught\tab 361\par Implementation Defined\tab 362\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Extensions to the ISO Pascal Standard\tab 363\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Compiler Directives\tab 363\par Additional Language Features\tab 364\par Additional Types\tab 365\par Additional Operators\tab 365\par Error Output\tab 366\par Strings\tab 366\par Predefined Procedures and Functions\tab 367\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Appendix B \endash  Error Messages\tab 369\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Compilation Errors\tab 369\par Terminal Compilation Errors\tab 388\par Linking Errors\tab 388\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Linker Error Levels\tab 388\par Recoverable Linker Errors\tab 389\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Terminal Linker Errors\tab 393\par Execution Errors\tab 395\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Appendix C \endash  Custom Installations\tab 399\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Installer Scripts\tab 399\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Low Memory\tab 399\par New System\tab 399\par New Text System\tab 400\par ORCA Icons\tab 400\par ORCA Pascal, C, Asm Libraries\tab 401\par Update System\tab 401\par Update Text System\tab 401\par Update Text System, No Editor\tab 402\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 RAM Disks\tab 402\par Details About Configuration\tab 402\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Appendix D \endash  Run-Time License\tab 407\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Appendix E \endash  Console Control Codes\tab 409\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Beep the Speaker\tab 409\par Cursor Control\tab 409\par Clearing the Screen\tab 411\par Inverse Characters\tab 412\par MouseText\tab 413\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Index\tab 415\par }\pard\plain \qc\fi-450\li450\widctlpar\adjustright \f4\cgrid }}\pard\plain \qc\fi-450\li450\widctlpar\adjustright \f4\cgrid {\sect }\sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 User's Manual\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 1:   Introducing ORCA/Pascal\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 1 \endash  Introducing ORCA/Pascal\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 1 \endash  Introducing ORCA/Pascal\tcl1}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 ORCA/Pascal}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ORCA/Pascal\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Welcome to ORCA/Pascal!  ORCA/Pascal is a complete, stand-alone program containing all of the software you need to write professional quality programs on the Apple\~II}{\fs18 GS}{\fs20 .  The package includes a fast, easy to use Pascal compiler, a linker that lets you create and use libraries, or even mix Pascal programs with subroutines written in other languages, and two complete development environments.  This manual is based on the most popular of the two development environments, which we refer to as the desktop development environment}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop development environment}}}{\fs20 .  The desktop development environment gives you fast graphics and mouse based editing.  The editor supports files up to the size of available memory; split screen; search and replace; cut, copy and paste; the ability to edit several files at one time; and several specialized editing features.  The desktop development environment also features a built-in debugger.  This source level debugger lets you debug Pascal programs, showing you what line is executing and the values of the variables.  It supports many advanced debugging features like step-and-trace, break points, and profiling.\par The second development environment is a UNIX-style text based development}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text based development}}}{\fs20  environment.  This is an updated version of the same environment sold by Apple Computer as Apple Programmer's Workshop (APW}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APW}}}{\fs20 ).  Many programmers who program on a daily basis prefer text environments for their speed and power.  In later chapters, you will learn how to set up and use the text based environment.  At least while you are getting started, we recommend using the desktop development environment unless you have a compelling reason to use the text environment.  You might want to consider the text environment if you are working on a computer without much memory, or if you are used to text environments and prefer them over desktop programs.\par In later chapters, as we explore the capabilities of the desktop environment, you will also find that the power of the text based shell is not lost to those who prefer the desktop environment.  The central part of the text based environment is a powerful, programmable shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 .  The shell is a program that gives you control over the files on your disks, the process of compiling programs, and where program output goes and input comes from.  You may have used simple shells before, like BASIC.SYSTEM, used with AppleSoft.  The ORCA shell shares many features with these simpler shells, but is much more powerful.\par After purchasing a new program, you would probably like to sit right down at your computer and try it out.  We encourage you to do just that, and in fact, this manual is designed to help you.  Before getting started, though, we would like to take some time to suggest how you should approach learning to use ORCA/Pascal, since the best approach is different for different people.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 What You Need}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 What You Need\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To use ORCA/Pascal, you will need an Apple\~II}{\fs18 GS}{\fs20  with at least 1.125M of memory for ROM 3 machines, or 1.25M of memory with ROM 1 machines.  You will also need at least two disk drives, and at least one of those must be a 3.5" disk drive.  To use all of the features and utilities included with ORCA/Pascal, you will need at least 1.75M of memory and a hard disk; this is the minimum system for developing desktop programs.\par You do not need to do any initialization to use ORCA/Pascal.  Simply insert the 3.5" disk labeled "Apple\~II}{\fs18 GS}{\fs20  System Disk" in your 3.5" disk and boot your computer.  After a few moments, the Finder will appear.  Eject the boot disk and insert the disk labeled "Program Disk."  Execute ORCA.Sys16, which shows up with an orca whale icon.  If you are unfamiliar with the basic operation of your computer, refer to the manuals supplied with the computer itself.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booting ORCA/Pascal}}}{\fs20 \par If you have a hard disk}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hard disks}}}{\fs20 , or if you have two 3.5" floppies and would like to use ORCA/Pascal with its programmable shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  or in combination with another language, you will want to reconfigure your system.  The Extras Disk has a copy of Apple's installer, along with several scripts that will help you install ORCA/Pascal in a variety of different configurations; these are explained in detail in Appendix C.  While these installation instructions make it easy to install ORCA/Pascal, the first few chapters of this manual assume you are running the program as we ship it.  There may be a few points that will be confusing to you until you have learned a little more about ORCA/Pascal; if you find that you are confused, you might try using the floppy-disk based system until you learn how to use ORCA/Pascal.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 About the Manual}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 About the Manual\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This manual is your guide to ORCA/Pascal.  To make it easy for you to learn about the system, this manual has been divided into three major sections.  The first part is called the "User's Guide."  It is a tutorial introduction to the development environment, showing you how to create Pascal programs under ORCA.  The second part is called the "Environment Reference Manual."  It is a working reference to provide you with in-depth information about the development environment you will use to create and test Pascal programs.  Part three is the "Language Reference Manual."  It contains information about the ORCA/Pascal programming language.  This organization also makes it easy for you to skip sections that cover material that you already know.  For example, the ORCA languages are unique on the Apple\~II}{\fs18 GS}{\fs20  in that a single development environment can be used with many different languages.  If you have already used the development environment with another ORCA language, you can skip the sections that cover the environment, and concentrate on the Pascal programming language.\par While this manual will teach you how to use ORCA/Pascal to write and test programs, it does not teach you the basics of the language itself.  Basic concepts about programming in Pascal are necessary to create useful, efficient programs.  If you are new to Pascal, you can start with our }{\fs20\ul Learn to Program in Pascal}{\fs20  course, which is written specifically for ORCA/Pascal on the Apple\~II}{\fs18 GS}{\fs20 .  You\rquote ll find some details about this course, and several other books that may be of interest, at the end of this chapter.\par If you are new to ORCA, start at the beginning and carefully read the first three chapters of the "User's Manual," along with any portions of Chapter 4 that interest you.  These sections were written with you in mind.  Work all the examples, and be sure that you understand the material in each chapter before leaving it.  ORCA is a big system, and like any sophisticated tool, it takes time to master.  On the other hand, you don't need to know everything there is to know about ORCA to create sophisticated programs, and the desktop environment makes it easy to write and test the most common kinds of Pascal programs.  The first four chapters give you enough information to create, test and debug Pascal programs using ORCA/Pascal.  After working through these chapters, you can skim through the rest of the manual to pick up more advanced features.\par From time to time, we make improvements to ORCA/Pascal.  You should return your registration card}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 registration card}}}{\fs20  so we can notify you when the software is improved.  We also notify our customers when we release new products, often offering substantial discounts to those who already have one of our programs.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Visual Cues}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Visual Cues\tcl3}}}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\xe {\b\v }{\b\v visual cues}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 In order to tell the difference between information that this manual provides and characters that you type or characters that appear on your computer screen, special type faces are used.  When you are to enter characters, the type face }{\b\f6\fs18 looks like this}{\b\f6\fs20 .  }{\fs20 When you are supposed to notice characters displayed on the computer screen}{\f6\fs20  }{\f6\fs18 they look like this}{\f6\fs20 . }{\fs20 Named keys, such as the return key, are shown in outline, }{\outl\fs18 like this}{\fs20 .\par \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs18 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}\tab ORCA/Pascal is a superset of the ISO Pascal Standard.  When the manual discusses extensions to the standard, you'll see a bullet like this one.\~\~\u8710\'c6\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Other Books and Reference Materials}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Other Books and Reference Materials\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you are new to Pascal, you will need to supplement this manual with a good beginner's book on the Pascal programming language.  A companion course is available from the Byte Works that teaches you the Pascal language and some basic techniques for programming.  The book is called }{\fs20\ul Learn to Program in Pascal}{\fs20 , and it has one distinct advantage over any other Pascal programming book: it is written specifically for ORCA/Pascal running on an Apple\~II}{\fs18 GS}{\fs20 .  Another good way to find a book that suits you, especially if you already know a little Pascal, is to visit a well-stocked bookstore and look through their selection.  There are literally hundreds of books that cover various aspects of programming in Pascal; which book you choose depends on your background.  A few of our favorites are listed below.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 learning Pascal}}}{\fs20 \par If you will be using the Apple\~II}{\fs18 GS}{\fs20  Toolbox to create your own desktop programs, you should have a copy of the }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Toolbox Reference}{\fs20 , volumes 1 through 3, and }{\fs20\ul Programmer\rquote s Reference for System 6.0}{\fs20 .  These books do not teach you about the toolbox, but they are essential references.  For an introduction to the toolbox, we suggest }{\fs20\ul Toolbox Programming in Pascal}{\fs20 , which is a complete introduction to the world of toolbox programming.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 toolbox\:learning}}}{\fs20 \par }\pard \qj\widctlpar\tx450\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Learn to Program in Pascal}{\fs20 \par Mike Westerfield\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Byte Works, Inc., Albuquerque, New Mexico\par }\pard \qj\li360\widctlpar\adjustright {\fs20 This introductory Pascal programming course is written specifically for ORCA/Pascal running on an Apple\~II}{\fs18 GS}{\fs20 .  It contains hundreds of complete programs as examples, as well as problems with solutions.\par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Toolbox Programming in Pascal}{\fs20 \par Mike Westerfield\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Byte Works, Inc., Albuquerque, New Mexico\par }\pard \qj\li360\widctlpar\adjustright {\fs20 This is the only self-paced course available for programming the Apple\~II}{\fs18 GS}{\fs20  toolbox.  Unlike the toolbox reference manuals, this is a course that teaches you how to write programs, not a catalog of the various toolbox calls available on the Apple\~II}{\fs18 GS}{\fs20 .  It includes four disks filled with toolbox source code, as well as an abridged toolbox reference manual, so you won\rquote t have to buy all of the toolbox reference manuals right away.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:learning}}}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 toolbox\:see Apple\~IIGS Toolbox}{\txe }}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Oh! Pascal!}{\fs20 \par Doug Cooper and Michael Clancy\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 W.W. Norton & Company, New York, NY\par }\pard \qj\li360\widctlpar\adjustright {\fs20 Our favorite Pascal textbook.\par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Standard Pascal User Reference Manual}{\fs20 \par Doug Cooper\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 W.W. Norton & Company, New York, NY\par }\pard \qj\li360\widctlpar\adjustright {\fs20 Our favorite Pascal reference manual.\par }\pard \qj\li720\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Technical Introduction to the Apple\~II}{\scaps\fs20\ul gs}{\fs20 \par Apple Computer\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 A good basic reference source for the Apple\~II}{\scaps\fs20 gs}{\fs20 .\par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Hardware Reference}{\fs20  and }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Firmware Reference}{\fs20 \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Apple Computer\par Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 These manuals provide information on how the Apple\~II}{\fs18 GS}{\fs20  works.\par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Programmer's Introduction to the Apple\~II}{\scaps\fs20\ul gs}{\fs20 \par Apple Computer\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 Provides programming concepts about the Apple\~II}{\scaps\fs20 gs}{\fs20 .}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:learning}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference: Volume I}{\fs20 , }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference: Volume II}{\fs20  and }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference: Volume III}{\fs20 \par Apple Computer\par Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 These volumes provide essential information on how the tools work \endash  the parameters you need to set up and pass, the calls that are available, etc.  You must have these books to use the Apple\~II}{\scaps\fs20 gs}{\fs20  toolbox effectively.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:reference manuals}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul Programmer\rquote s Reference for System 6.0}{\pard\plain \qj\li360\keepn\widctlpar\outlinelevel0\adjustright \v\f4\fs20\ul\cgrid {\xe {\v\fs20\ul Programmer\rquote s Reference for System 6.0}}}{\fs20 \par Mike Westerfield\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Byte Works, Inc., Albuquerque, New Mexico\par }\pard \qj\li360\widctlpar\adjustright {\fs20 The first three volumes of the toolbox reference manual cover the Apple\~II}{\fs18 GS}{\fs20  toolbox up through System 5.  This book covers the new features added to the toolbox and GS/OS in System 6.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:reference manuals}}}{\v\fs20 .0;}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 System 6.0}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul GS/OS}{\pard\plain \qj\li360\keepn\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20\ul GS/OS}}}{\fs20\ul  Reference\par }{\fs20 Apple Computer\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 This manual provides information on the underlying disk operating system.  It is rarely needed for Pascal programming, since Pascal has built-in subroutines for dealing with disk files.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul ORCA/M}{\pard\plain \qj\li360\keepn\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20\ul ORCA/M}}}{\fs20\ul   A Macro Assembler for the Apple\~II}{\scaps\fs20\ul gs}{\scaps\fs20 \par }{\fs20 Mike Westerfield and Phil Montoya\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Byte Works, Inc., Albuquerque, NM\par }\pard \qj\li360\widctlpar\adjustright {\fs20 ORCA/M is a macro assembler that can be used with ORCA/Pascal.  Without changing programming environments, you can create a program in Pascal, assembly language, or a combination of the two.  Chapter 5 will give you more information on how easy it is to mix the two languages.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\li360\keepn\widctlpar\outlinelevel0\adjustright {\fs20\ul ORCA/C}{\pard\plain \qj\li360\keepn\widctlpar\outlinelevel0\adjustright \v\f4\fs20\ul\cgrid {\xe {\v\fs20\ul ORCA/C}}}{\scaps\fs20 \par }{\fs20 Mike Westerfield\par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20 Byte Works, Inc., Albuquerque, NM\par }\pard \qj\li360\widctlpar\adjustright {\fs20 ORCA/C is a C compiler which can be installed in the same environment as ORCA/Pascal.  With the C compiler installed, you can write C or Pascal programs without switching environments.  You can also use library routines written in C from your Pascal programs.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C\:see also ORCA/C}{\txe }}}{\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 2:  Exploring the System\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 2 \endash  Exploring the System\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 2 \endash  Exploring the System\tcl1}}}{\v\fs20 \par }{\fs20 {\*\bkmkstart bk0}\par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Backing Up ORCA/Pascal}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Backing Up ORCA/Pascal\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter is a hands-on introduction to ORCA/Pascal.  You should read it while seated at your computer, and try the things suggested as we talk about them.  By the end of the chapter, you will have a good general feel for what Pascal programming is like using ORCA/Pascal.  The next two chapters introduce slightly more advanced topics, including control of the compiler, and how to write programs for the various environments supported on the Apple\~II}{\fs18 GS}{\fs20 .\par As with any program, the first step you should take is to make a backup copy of the original disks.  To do this, you will need five blank disks and a copy program \endash  Apple's Finder, from the System Disk, will do the job, or you can use any other copy program if you have a personal favorite.  If you are unfamiliar with copying disks, refer to the documentation that came with your computer.  As always, copies are for your personal use only.  Using the copies for any purpose besides backing up your program is a violation of federal copyright laws.  If you will be using ORCA/Pascal in a classroom or work situation where more than one copy is needed, please contact the publisher for details on our licensing policies.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 backing up the disks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 copying disks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 site license}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Bull's Eye Program}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Bull's Eye Program\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you have not yet made a backup, please do so at this time.  The steps we will take in this section will change the disk.\par The first thing we will do is run a simple sample program that draws a bull's eye on the screen.  We will use this program to get an overview of the system, and gradually build on this foundation by supplying more and more details about what is happening.  Begin by making sure that all of the disks you are using are not write protected, since ORCA/Pascal does write some information to disk as it prepares your programs.  The first step is to start ORCA/Pascal.  To do this, insert a copy of the disk labeled "Apple\~II}{\fs18 GS}{\fs20  System Disk" into your computer and boot the disk, which will boot into Apple's Finder.  Eject this disk and insert the "Program Disk," and launch the program called ORCA.Sys16 \endash  the one that shows up with the orca whale icon.  After a few moments, you will see a standard desktop \endash  you are ready to start using ORCA/Pascal.\par Go ahead and select Open from the File menu.  In the list of files you will see a folder called Samples.  Open this folder by clicking twice in rapid succession on the name, or by clicking once on the name to select the folder, and then clicking on the Open button.  You will see another, shorter list of files.  One of these is called BullsEye.pas.  This file is the source code for the Pascal program we will run.  Click twice on the file name, and the program will appear in a window on the desktop.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command}}}{\fs20 \par The bull's eye program will draw several circles, one inside the other.  ORCA/Pascal let's you see the output from your program while you look at the source code.  Naturally, to do this, you need someplace to put the output.  In the case of graphics output, the drawing appears in a special window called the Graphics Window.  To see this window, you need to do two things.  First, shrink the bull's eye program's window by holding the mouse down in the grow box (the box at the bottom right of the window) and dragging the grow box to the left.  You want to cut the width of the window to about half of the screen, so the right side of the window is just before the start of the word Run in the menu bar.  Now pull down the Windows menu and select the Graphics Window command.  The graphics window will show up in the lower right portion of the screen.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command}}}{\fs20 Positioning the windows is the hard part!  To run the program, pull down the Run menu and select the Compile to Memory command.  A third window, called Shell, will show up in the top right portion on the screen.  The system uses this window to write text error messages and keep you informed about progress as the program is compiled and linked.  The first compile of the day takes a little time, so be patient.  The desktop development environment is a multi-lingual programming environment.  Because the program doesn't know in advance what language you will be using, it waits until you compile a program to load the compiler and linker.  If you have 1.75M of memory, and haven't set aside a large RAM disk, these programs remain in memory, so subsequent compiles are much faster.  In addition, once a program has been compiled, if you try to compile it again without changing the source file, the program is simply executed.  To see this, try the Compile To Memory command again.  The executable program is loaded from disk and re-executed.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command}}}{\fs20 You might wonder why the executable program is saved to disk when you use the Compile To Memory command.  Compile To Memory refers to the intermediate files, called }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 object modules, that are passed from the compiler to the linker when your program is prepared for execution.  For some advanced applications, you will want to save these to disk, but for simple programs like the bull's eye program, the Compile To Memory command gives you faster compiles by not writing the object modules to disk.  For both Compile to Memory and Compile to Disk, though, the executable program is still saved on the disk.\par Before moving on, let's try one more command.  Pull down the Debug menu and select Trace.  Watch the left margin of your source window as the program runs \endash  you will see an arrow moving from line to line in the source code.  The ability to trace through a program is the foundation of the debugger supplied with ORCA/Pascal.  In later sections, we will explore this capability in detail.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Finding Out About the Desktop}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Finding Out About the Desktop\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As you can see, it's pretty easy to load, compile and execute programs using ORCA/Pascal.  One of the main advantages of the desktop programming environment is ease of use.  The rest of this chapter explains how to use the desktop development environment to develop programs, but it assumes that you already know how to use menus, how to manipulate windows on the desktop, and how to edit text using a mouse.  If you had any trouble understanding how to use the mouse to manipulate the menu commands and window in the last section, or if you are unfamiliar with mouse-based editors, now would be a good time to refer to Chapter 3 of the }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Owner's Guide}{\fs20 , which came with your computer.  The owner's guide has a brief tutorial introduction to using desktop programs.  Complete details on our desktop can be found in Chapter 7 of this manual, but that chapter is arranged for reference \endash  if you are completely new to desktop programs, a gentler introduction, like the one in the user's guide, is probably better.  The major features of our desktop development environment that are specific to programming, and are therefore not covered in Apple's introductory manual, will be covered in the remainder of this chapter.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menus}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 windows}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 mouse}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 How Graphics and Text are Handled}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 How Graphics and Text are Handled\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 One of the unique features of the desktop development environment is its ability to show you the program and its output at the same time.  You have already seen an example of this.  The bull's eye program produces graphics and text output (it writes the string "Bull's eye!" after the bull's eye is drawn).  Most books on Pascal teach you the language using text input and output.  As with the bull's eye program, the text will show up in a special window called the Shell window.  This window is created automatically when you compile a program, and stays around until you close it.  You can resize it \endash  even hide it behind the program window if it bothers you.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 \par The shell window is used for several other purposes besides giving your program a place to write text output.  If your program needs input from the keyboard, you will see the input echoed in the shell window.  The compiler and linker also write error messages to the shell window.  These error messages will also be shown in a dialog, so you won't miss the error even if you hide the shell window.  Writing the errors to the shell window, though, gives you a more permanent record of the errors.  Later, in Chapter 6, we will explore still more uses of the shell window.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compilation errors}}}{\fs20 \par The graphics window lets you write programs that draw pictures without doing all of the initialization required to write stand-alone programs.  For example, if you are writing a game that uses pull-down menus and windows, your program will open windows for itself.  For simple graphics tasks like drawing bull's eyes or plotting a function, though, the graphics window lets you concentrate on the algorithms and on the graphics language, without all of the fuss of learning how to create menus and windows for yourself.\par You don't need to open the graphics window unless your program uses it.  If you want to use the graphics window, just be sure to open it before running your program.  (If you forget, nothing tragic happens \endash  you just won't be able to see the graphics output from your program.)  If you need more space, you can drag the window around and size it.\par One feature of the graphics window is worth pointing out.  When your program draws to the graphics window, it does so using QuickDraw II.  The development environment does not know what commands you are using, so it cannot repaint the window.  What this means is that if you move a window on top of a drawing in the graphics window, and then move it back off, the only way to refresh the picture is to run the program again.  You might try this right now to see what we mean.  Drag the shell window down so it covers about half of the graphics window, then move it back to its original location.  The part of the graphics window that was covered will be erased.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Languages Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Languages Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 languages menu}}}{\fs20 The Languages menu shows all of the languages installed on your system.  It changes when you install or delete a programming language.  You can use this menu to find out what language is associated with a particular file, or to change the language.\par Under ORCA, all source and data files are associated with a language.  The system uses the underlying language stamp to call the appropriate compiler or assembler when you issue a compile command for a source file.  For example, if you select the BullsEye.pas source file (a window is selected by clicking anywhere on the window) and pull down the Languages menu, you will see PASCAL checked.  If you select the shell window, the language SHELL will be checked.  When you create a new program, the system tries to select the proper language automatically by assigning the language of the last file edited.  You should always check the language menu, though.  If you write a Pascal program, and the system thinks it is an assembly language source file, the assembler will give you enough errors that you will know something is wrong.  If you don't have the assembler on the disk, a dialog will appear with the message "A compiler is not available for this language."  In either case, simply pull down the Languages menu and select the appropriate language, then try compiling again.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 What's a Debugger?}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 What's a Debugger?\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A debugger helps you find errors in your program.  You can use a debugger to execute all or part of your program one line at a time, watching the values of selected variables change as the program runs.  If you know that some subroutines are working, while there are problems with other subroutines, you can execute the working routines at full speed and then trace slowly through the problem areas.  You can also set break points}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 break points}}}{\fs20  in your program and then have the debugger execute your program until it reaches the break.\par While the desktop development system supports many languages besides Pascal, not all languages that work with the development system support the source-level debugger.  If you are using another language with ORCA/Pascal, and are not sure whether or not it supports the debugger, try it.  If the language doesn't support the debugger, your program will simply execute at full speed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 There is one very important point to keep in mind about the debugger.  When you compile a program with debug on, the compiler inserts special code into your program to help the debugger decide which line it is on, where symbols are located, and so forth.  If you run a program with debug code in it from the Finder or the text-based shell, the program will crash.  For that reason, it is very important that you turn the debug option off after a program is finished.  To turn debugging off, pull down the Run menu and select the Compile command.  The dialog that appears has an option with the caption "Generate debug code."  If there is an X in the box to the left of this option, debug code is turned on; if there is no X, it is turned off.  Clicking in the box turns the option on and off.  Once you set this option the way you want it, click on the Set Options button.\par One other point about debug code deserves to be mentioned.  The debug code takes time and space.  When you turn debugging off, your program will get smaller and faster.  In programs that do lots of graphics or floating point calculations, like the bull's eye program, the difference is relatively small, but in programs that spend their time looping and doing logical operations, the difference in execution speed can be considerable.\par In the remainder of this chapter, we will look at how you can use the source-level debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  to find problems in your Pascal programs.  The examples we will use here are fairly short, simple programs.  You can debug large programs, including desktop applications.  The basic ideas are similar, but there are a few restrictions to keep in mind.  Debugging desktop programs is covered in a special section in Chapter 4.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Using the Source-Level Debugger}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using the Source-Level Debugger\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 Let's use the bull's eye program again to become familiar with the source-level debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 .  If you do not have the program open on the desktop, please pull down the File menu and use the Open command to load it from the Samples folder}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Samples folder}}}{\fs20 .  Now shrink the bull's eye window to about half its current width, as before.  If you do not have a graphics window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20  open, pull down the Windows menu and use the Graphics Window command to open a graphics window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\trowd \clvertalt\cltxlrtb \cellx7920\pard \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b Debugging a Simple Graphics Program}{\pard\plain \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Debugging a Simple Graphics Program\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile command}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run menu}}}{\fs20 Pull down the Run menu and select the Compile command.  The desktop brings up a dialog box.  For now, just ignore all of the items in the Compile window except the box in front of the "Generate debug code" option.  This box should be marked with an X, telling the compiler to produce the special code needed during debugging.  After checking the "Generate debug code" box, click on the Set Options button at the bottom of the Compile window. }{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 \par Now pull down the Debug menu.\par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b The Step Command}{\pard\plain \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Step Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\tx2880\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 Select the Step command from the Debug menu and watch the source file window.  When the program starts to run, you will see an arrow pointing to the first line in the source file.  Select Step again \endash  the arrow now moves down to the second line in the program.  You can continue to select Step from the Debug menu, or you can use the keyboard equivalent.  Holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key and typing }{\b\fs20 [}{\fs20  will also step one time.  Remembering the keystroke will be hard at first, but you can always pull down the menu to check to see what key is used:  the key is shown to the right of the menu command name.  Either way, each time you step, the arrow moves to the next line in the program, and the bull's eye is slowly painted on the graphics window}{\pard\plain \qj\fi360\widctlpar\intbl\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 , one circle at a time.\par \par \cell }\pard \widctlpar\intbl\adjustright {\fs20 \row }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Stop Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Stop Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 Any time your program is executing, you can use the Stop command to stop the program.  This also works when the debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  is paused, waiting for you to select the next debugging command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Trace Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Trace Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 At any time, you can trace your program's execution by selecting Trace from the Debug menu.  Once it starts tracing, the program will run until it finishes, or until you issue another debugging command.  Select Trace from the Debug menu, and notice the arrow in the source file window \endash  it moves through the lines of code as each line is executed.  Any of the windows which might be open as a result of debugging (the source file, shell, variables, stack, and memory windows) will be continually updated while Trace is running.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 \par To pause for a moment in the middle of a trace, move the cursor to the menu bar and press on the mouse button.  You do not have to be on a menu; in fact, it is better if you aren't.  As long as you hold down on the mouse button, the program will pause.  When you let up, execution continues.  While you have the mouse button down, if you decide to switch to step mode or stop the program, move to the Debug menu and select the appropriate command, or use the appropriate keyboard equivalent.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Go Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Go Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 go command}}}{\fs20 Experiment with the Go command in the Debug menu.  It is similar to Trace, but executes an entire program at full speed.  Unlike Trace, however, the debugging windows are not updated.  Go is especially useful for quickly seeing the results of changing your program while you are fixing bugs.  It is also useful when you are using break points and want to execute up to the location of the first break point.\par Once a program is executing, it can be stopped by using one of the debug commands in the first part of the Debug menu.  A break point or run-time error will also stop the program.  You can pause debugging at any time by moving the cursor to the right-hand area of the menu bar}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  and pressing on the mouse button.  Debugging continues as soon as you release the mouse button.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Set Auto-Go Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Set Auto-Go Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx4500\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 Now let's look at Auto-Go.  You can set lines for Auto-Go so that they will be executed at full speed, even if you are stepping or tracing.  Use the mouse to select the four lines assigning values to the rectangle, as shown in the figure.}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto-go command}}}{\fs20   Next, pull down the Debug menu and choose Set/Clear Auto-Go.  A large green dot will appear to the left of each of the selected lines.   Now use the Step command to step through the for loop.  Notice that when the arrow stepped into the block of statements you selected, it jumped to the end of the block marked for auto-go.  As you can see, Auto-Go can be very useful when you are stepping through your program, but don't want to see portions you have already debugged.\par \cell }\pard \qr\widctlpar\intbl\adjustright {\par }{{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw310\pich292\picwgoal6200\pichgoal5840\macpict\bliptag-2041883566\blipupi72{\*\blipuid 864b545296c4632b8a43a91a5479fec8}1d5200000000012401361101a00082a0008e01000a0000000002d0024098002800000000004f013800000000004f013600000000004f0136000102d90007007fdcff01f80007007fdcff01f80007007fdcff01f80007007fdcff01f80007007fdcff01f80007007fdcff01f8001c037ff8000ff8ff0bfe0e667e7f0e0ccc1f83c3c3f7ff04c0007ff8001c037ff8000ff8ff0bfe0e667e7f0e0ccc1f83c3c3f7ff04c0007ff8001b037ff9ffcff8ff08fe66667e7e667cccfffe99f7ff04cf9e7ff8001b037ff9ffcff8ff08fe66667e7e667cccfffe99f7ff04cf9e7ff8001c037ff9ffcff8ff02fe6666fe7e057cccff99999ff7ff04cf9e7ff8001c037ff9ffcff8ff02fe6666fe7e057cccff99999ff7ff04cf9e7ff8001c037ff9ffcff8ff0bfe0e667e7f0e1e1c3f8399c3f7ff04c01e7ff8001c037ff9ffcff8ff0bfe0e667e7f0e1e1c3f8399c3f7ff04c01e7ff8001c037ff9ffcff8ff0bfe66667e7fe67f3cff9f81f9f7ff04cffe7ff8001c037ff9ffcff8ff0bfe66667e7fe67f3cff9f81f9f7ff04cffe7ff8001c037ff9ffcff8ff0bfe66667e7e667f3cff9f9999f7ff04cffe7ff8001c037ff9ffcff8ff0bfe66667e7e667f3cff9f9999f7ff04cffe7ff8001c037ff8000ff8ff0bfe0f0e06070e0f3c199f99c3f7ff04c0007ff8001c037ff8000ff8ff0bfe0f0e06070e0f3c199f99c3f7ff04c0007ff80007007fdcff01f80007007fdcff01f80007007fdcff01f80007007fdcff01f80007007fdcff01f80007007fdcff01f8000a0060df00041ffffff8000a0060df00041ffffff800170d600f80061f8000104000c0030fc6ec00041ffffff800170d600f80061f8000104000c0030fc6ec00041ffffff800170d6018400618c00018c000c00618c3ec00041ffffff800170d6018400618c00018c000c00618c3ec00041ffffff800180e60180f9f98cf9f9fcf8fcf8c19c180ed00041ffffff800180e60180f9f98cf9f9fcf8fcf8c19c180ed00041ffffff8001807600f98c61f98d8dafed803cc1ac186ed00041ffffff8001807600f98c61f98d8dafed803cc1ac186ed00041ffffff80017056000dfc6181ffdd804dfcc1cc180ed0004180000180017056000dfc6181ffdd804dfcc1cc180ed0004180000180017066010d806d81818fdd8030618c306ed0004180180180017066010d806d81818fdd8030618c306ed00041801801800180e600f8fc3980fd8d8cf8fcfc31f8606ed00041806601800180e600f8fc3980fd8d8cf8fcfc31f8606ed000418066018000c0060f400000ced00fd1800000c0060f400000ced00fd18000011036000000efb000006e90004186006180011036000000efb000006e900041860061800110360000006fb00000ee9000419f81f9800110360000006fb00000ee9000419f81f9800120a600fcf860f9780060f8006e900fd180000120a600fcf860f9780060f8006e900fd1800001306601818c618d8c0fe00010606ea00fd1800001306601818c618d8c0fe00010606ea00fd180000120a601818c618d800060f8006e900fd180000120a601818c618d800060f8006e900fd1800001405601818c618d8fd00010606ea0004181ff818001405601818c618d8fd00010606ea0004181ff818001405600fcf8f0f98fd00010f06ea000418000018001405600fcf8f0f98fd00010f06ea000418000018000e0060f700000cea00041ffffff8000e0060f700000cea00041ffffff8002402600780fc0000c6fb00180f8fc000c00000060000060000c00018000006001e666678002402600780fc0000c6fb00180f8fc000c00000060000060000c00018000006001e666678002302600cc0fc0000c0fb000f18d8c000c000000600000e0000c00018fd000419999998002302600cc0fc0000c0fb000f18d8c000c000000600000e0000c00018fd000419999998002927600c0f9780178f8fce18cfc0060f8000d9c00fcf98df9f8f8006000fcf801f8f8f8e1f9e666678002927600c0f9780178f8fce18cfc0060f8000d9c00fcf98df9f8f8006000fcf801f8f8f8e1f9e66667800280a601f18d8c018c0d8c618d8fd0003019ac018fed811c618c0060018d8c018d8d8c618d999999800280a601f18d8c018c0d8c618d8fd0003019ac018fed811c618c0060018d8c018d8d8c618d9999998002927600c18d800180fd8c618cf80060f80061cc018d8dad8c618c0060018d8c018dfd8c618de666678002927600c18d800180fd8c618cf80060f80061cc018d8dad8c618c0060018d8c018dfd8c618de66667800290b600c18d8001818d8c618c0c0fe00181818c018d8ddd8c6d8c0060018d8c018d80fc618d999999800290b600c18d8001818d8c618c0c0fe00181818c018d8ddd8c6d8c0060018d8c018d80fc618d999999800290b600c0f9800180fcfcf0f9f80fe00181fdf800fcf98d8c38f800f000fcf801f8fc0cf18de66667800290b600c0f9800180fcfcf0f9f80fe00181fdf800fcf98d8c38f800f000fcf801f8fc0cf18de666678000d0060e200070f800019999998000d0060e200070f8000199999980021176000000f80060f800e0600df80001f80060300000e000006f600041e6666780021176000000f80060f800e0600df80001f80060300000e000006f600041e66667800980028004f0000009e0138004f0000009e0136004f0000009e0136000121176000001840061840060000d8c00018c00606000006000003f60004199999980021176000001840061840060000d8c00018c00606000006000003f6000419999998002218600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f700041e666678002218600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180f700041e6666780022186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f70004199999980022186000000f98c60f98c60618df98d8df80c60c1818c618d8c186f700041999999800220060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f700041e66667800220060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180f700041e66667800221860000010d806d0d8c60618d81818d818c6c61818c618d80306f700041999999800221860000010d806d0d8c60618d81818d818c6c61818c618d80306f70004199999980022056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f700041e6666780022056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606f700041e666678000e0060ea00000cf7000419999998000e0060ea00000cf700041999999800190060fd00000ef900000efe000306001fc0f400041e66667800190060fd00000ef900000efe000306001fc0f400041e66667800190060fd000006f9000006fe0003060000c0f400041999999800190060fd000006f9000006fe0003060000c0f4000419999998001f156000000fcf860f9780060f800fcf860f978006000180f400041e666678001f156000000fcf860f9780060f800fcf860f978006000180f400041e666678001f086000001818c618d8c0fe00091818c618d8c006000306f4000419999998001f086000001818c618d8c0fe00091818c618d8c006000306f4000419999998001f156000001818c618d800060f801818c618d80006000180f400041ffffff8001f156000001818c618d800060f801818c618d80006000180f400041ffffff8001e076000001818c618d8fd00041818c618d8fe000118c6f400041e000078001e076000001818c618d8fd00041818c618d8fe000118c6f400041e000078001e076000000fcf8f0f98fd00090fcf8f0f980006000f86f400041e000078001e076000000fcf8f0f98fd00090fcf8f0f980006000f86f400041e000078000e0060ed00000cf400041e000078000e0060ed00000cf400041e000078001906601ffffff9f9e7fdff053fffe7fffff9efff04fe000078001906601ffffff9f9e7fdff053fffe7fffff9efff04fe000078001601601ffeff01f9e7fdff023fffe7ecff04fe000078001601601ffeff01f9e7fdff023fffe7ecff04fe000078001c12601fffe731e0607fe87ff0307fe0707071e07ff1ff04fe000078001c12601fffe731e0607fe87ff0307fe0707071e07ff1ff04fe000078001c12601fffe739f9e73fe73fe7273fe7272739e73ff1ff04fe000078001c12601fffe739f9e73fe73fe7273fe7272739e73ff1ff04fe000078001c12601fffe539f9e73fe7ffe7273fe7202739e73ff1ff04fe000078001c12601fffe539f9e73fe7ffe7273fe7202739e73ff1ff04fe000078001c12601fffe239f9273fe7ffe7273fe727f039e73ff1ff04fe000078001c12601fffe239f9273fe7ffe7273fe727f039e73ff1ff04fe000078001c12601fffe730fc673fe7fff0307fe0703f30e73ff1ff04fe000078001c12601fffe730fc673fe7fff0307fe0703f30e73ff1ff04fe000078001001601ff4ff01f07fefff04fe000078001001601ff4ff01f07fefff04fe000078002001601ffeff01e7f9fdff03f9f8703ffeff0539fffffde03ff6ff04fe000078002001601ffeff01e7f9fdff03f9f8703ffeff0539fffffde03ff6ff04fe000078001f01601ffeff01e7f1fdff03f1f3e73ffeff043fffffe527f5ff04fe000078001f01601ffeff01e7f1fdff03f1f3e73ffeff043fffffe527f5ff04fe000078002001601ffeff11e079fff9f07ff9e7e63fe8707031e7303061f5ff04fe000078002001601ffeff11e079fff9f07ff9e7e63fe8707031e7303061f5ff04fe000078002001601ffeff01e739fdff0cf9e06520273f2739e727f8fe79f6ff04fe000078002001601ffeff01e739fdff0cf9e06520273f2739e727f8fe79f6ff04fe000078002101601ffeff12e739fff9f07ff9e7233fe7f02739e730707f3ff6ff04fe000078002101601ffeff12e739fff9f07ff9e7233fe7f02739e730707f3ff6ff04fe000078002001601ffeff01e739fdff0cf9e7273fe7e72739e73f252739f6ff04fe000078002001601ffeff01e739fdff0cf9e7273fe7e72739e73f252739f6ff04fe000078002001601ffeff01e730fdff0cf0f0607fe7f03030f0607df079f6ff04fe000078002001601ffeff01e730fdff0cf0f0607fe7f03030f0607df079f6ff04fe000078000f01601fecff00f3f6ff04fe000078000f01601fecff00f3f6ff04fe000078002101601ffeff02e7f07ffeff03f9f8703ffeff0539fffffde03ff6ff04fe000078002101601ffeff02e7f07ffeff03f9f8703ffeff0539fffffde03ff6ff04fe000078002001601ffeff02e7e73ffeff03f1f3e739feff043fffffe527f5ff04fe000078002001601ffeff02e7e73ffeff03f1f3e739feff043fffffe527f5ff04fe000078002001601ffeff11e07f3ff9f07ff9e7e639e8707031e7303061f5ff04fe000078002001601ffeff11e07f3ff9f07ff9e7e639e8707031e7303061f5ff04fe000078002101601ffeff02e73e7ffeff0cf9e06520673f2739e727f8fe79f6ff04fe000078002101601ffeff02e73e7ffeff0cf9e06520673f2739e727f8fe79f6ff04fe000078002101601ffeff12e739fff9f07ff9e72339e7f02739e730707f3ff6ff04fe000078002101601ffeff12e739fff9f07ff9e72339e7f02739e730707f3ff6ff04fe000078001d01601ffeff01e727fdff0cf9e72739e7e72739e73f252739f3ff01f8001d01601ffeff01e727fdff0cf9e72739e7e72739e73f252739f3ff01f8002101601ffeff02e7203ffeff0cf0f0607fe7f03030f0607df079f6ff04fe666678002101601ffeff02e7203ffeff0cf0f0607fe7f03030f0607df079f6ff04fe666678000f01601fecff00f3f6ff04f9999998000f01601fecff00f3f6ff04f9999998001e01601ffdff00f9fdff02fc707ffeff0539fffffdf07ff5ff04fe66667800980028009e000000ed0138009e000000ed0136009e000000ed013600011e01601ffdff00f9fdff02fc707ffeff0539fffffdf07ff5ff04fe666678001e01601ffdff00f1fdff02f8673ffeff053fffffe5273ff5ff04f9999998001e01601ffdff00f1fdff02f8673ffeff053fffffe5273ff5ff04f9999998002001601ffeff11e739fff9f07ff27f3fe8707031e730307f3ff5ff04fe666678002001601ffeff11e739fff9f07ff27f3fe8707031e730307f3ff5ff04fe666678001f01601ffeff01e739fdff0be67e60273f2739e727f8fe79f5ff04f9999998001f01601ffeff01e739fdff0be67e60273f2739e727f8fe79f5ff04f9999998001f01601ffeff10e739fff9f07fe039ffe7f02739e7307079f4ff04fe666678001f01601ffeff10e739fff9f07fe039ffe7f02739e7307079f4ff04fe666678001f01601ffeff01f279fdff0bfe67ffe7e72739e73f2527f9f5ff04f9999998001f01601ffeff01f279fdff0bfe67ffe7e72739e73f2527f9f5ff04f9999998001f01601ffeff01f8f0fdff0bfe603fe7f03030f0607de039f5ff04fe666678001f01601ffeff01f8f0fdff0bfe603fe7f03030f0607de039f5ff04fe666678000f01601fedff00f3f5ff04f9999998000f01601fedff00f3f5ff04f9999998001f01601ffdff01f07ffeff02fc707ffeff0539fffffdf07ff5ff04fe666678001f01601ffdff01f07ffeff02fc707ffeff0539fffffdf07ff5ff04fe666678001f01601ffdff01e73ffeff02f86739feff053fffffe5273ff5ff04f9999998001f01601ffdff01e73ffeff02f86739feff053fffffe5273ff5ff04f9999998002001601ffeff11e73f3ff9f07ff27f39e8707031e730307f3ff5ff04fe666678002001601ffeff11e73f3ff9f07ff27f39e8707031e730307f3ff5ff04fe666678002001601ffeff02e73e7ffeff0be67e60673f2739e727f8fe79f5ff04f9999998002001601ffeff02e73e7ffeff0be67e60673f2739e727f8fe79f5ff04f9999998001f01601ffeff10e739fff9f07fe039f9e7f02739e7307079f4ff04fe666678001f01601ffeff10e739fff9f07fe039f9e7f02739e7307079f4ff04fe666678001f01601ffeff01f267fdff0bfe67f9e7e72739e73f2527f9f5ff04f9999998001f01601ffeff01f267fdff0bfe67f9e7e72739e73f2527f9f5ff04f9999998002001601ffeff02f8e03ffeff0bfe603fe7f03030f0607de039f5ff04fe666678002001601ffeff02f8e03ffeff0bfe603fe7f03030f0607de039f5ff04fe666678000f01601fedff00f3f5ff04f9999998000f01601fedff00f3f5ff04f9999998001601601ffbff073ffffc7ff9f9e7f1eeff04fe666678001601601ffbff073ffffc7ff9f9e7f1eeff04fe666678001601601ffbff073ffff9fffff9e7fceeff04f9999998001601601ffbff073ffff9fffff9e7fceeff04f9999998001901601ffeff0af060703ffff9e731e0607ceeff04fe666678001901601ffeff0af060703ffff9e731e0607ceeff04fe666678001a01601ffeff0be7272739fff3e739f9e73e7fefff04f9999998001a01601ffeff0be7272739fff3e739f9e73e7fefff04f9999998001901601ffeff0ae027273ffff9e539f9e73ceeff04fe666678001901601ffeff0ae027273ffff9e539f9e73ceeff04fe666678001901601ffeff0ae7e72739fff9e239f9273ceeff04f9999998001901601ffeff0ae7e72739fff9e239f9273ceeff04f9999998001901601ffeff0af0273039fffc6730fc6731eeff04fe666678001901601ffeff0af0273039fffc6730fc6731eeff04fe666678000f01601ffbff00f3e7ff04f9999998000f01601ffbff00f3e7ff04f999999800180e6000001f800600060f80000e030006ed00041e66667800180e6000001f800600060f80000e030006ed00041e66667800180e60000018c000000618c00006060003ed00041999999800180e60000018c000000618c00006060003ed00041999999800190f60000018cf8e1f9f98d8cf860c178180ee00041e66667800190f60000018cf8e1f9f98d8cf860c178180ee00041e66667800190f6000001f80c618c618d8c0c60c18c186ee00041999999800190f6000001f80c618c618d8c0c60c18c186ee00041999999800190f600000180fc618c618d8cfc60c180180ee00041e66667800190f600000180fc618c618d8cfc60c180180ee00041e66667800190f6000001818c618c6d8cd98c606180306ee00041999999800190f6000001818c618c6d8cd98c606180306ee00041999999800190f600000180fcf18c38f870fcf03180606ee00041e66667800190f600000180fcf18c38f870fcf03180606ee00041e666678000e0060f300000cee000419999998000e0060f300000cee00041999999800140060fc0006c000038780000eeb00041e66667800140060fc0006c000038780000eeb00041e66667800140060fc0006c000060cc00003eb00041999999800140060fc0006c000060cc00003eb00041999999800160c6000000f9f8fc000060c0f9783eb00041e66667800160c6000000f9f8fc000060c0f9783eb00041e66667800170d60000018d8d8c6000c1f18d8c180ec00041999999800170d60000018d8d8c6000c1f18d8c180ec00041999999800160c6000001fd8d8c000060c18d803eb00041e66667800160c6000001fd8d8c000060c18d803eb00041e66667800160c6000001818d8c600060c18d803eb00041999999800160c6000001818d8c600060c18d803eb00041999999800160c6000000fd8cfc600038c0f980eeb00041e66667800160c6000000fd8cfc600038c0f980eeb00041e666678000e0060fc00000ce5000419999998000e0060fc00000ce50004199999980098002800ed00000124013800ed00000124013600ed00000124013600011d0d6000000606000e0003031f800e0efc0002060306f400041e666678001d0d6000000606000e0003031f800e0efc0002060306f400041e666678001d0060fe000906000600060318c00606fc0002060303f400041ffffff8001d0060fe000906000600060318c00606fc0002060303f400041ffffff80020166018d78e1f8f861f8c0318d8c6060fc00f98cf86030180f50004180000180020166018d78e1f8f861f8c0318d8c6060fc00f98cf86030180f500041800001800200f6018d8c60618c618cc001f18c606181ffed803c6000186f50004181ff81800200f6018d8c60618c618cc001f18c606181ffed803c6000186f50004181ff818001e16601ad806061fc618cc0018d8c6060f801fd8dfc6000180f500fd1800001e16601ad806061fc618cc0018d8c6060f801fd8dfc6000180f500fd1800001e16601dd80606d80618c60018d8c60600c0180fd800000306f500fd1800001e16601dd80606d80618c60018d8c60600c0180fd800000306f500fd1800001e166018d80f038fcf18c3001f8f8f0f1f800fc0cfc6000606f500fd1800001e166018d80f038fcf18c3001f8f8f0f1f800fc0cfc6000606f500fd180000130060f100010f80fe00000cf5000419f81f9800130060f100010f80fe00000cf5000419f81f98000a0060df000418600618000a0060df00041860061800080060df00fd180000080060df00fd1800000a0060df000418066018000a0060df000418066018000a0060df000418018018000a0060df000418018018000a0060df000418000018000a0060df0004180000180007007fdcff01f80007007fdcff01f80014036000003ffeff00e6e96607700000180000180014036000003ffeff00e6e96607700000180000180014036007003efe000079e99907f0070019ff80180014036007003efe000079e99907f0070019ff8018001203601b003efe00e866077006c019818018001203601b003efe00e866077006c0198180180014036063fe3efe000079e99907f3fe301981ff980014036063fe3efe000079e99907f3fe301981ff980012036180063efe00e8660773000c198181980012036180063efe00e8660773000c198181980014036600063efe000079e99907f3000319ff81980014036600063efe000079e99907f3000319ff81980012036180063efe00e8660773000c183001980012036180063efe00e8660773000c183001980014036063fe3efe000079e99907f3fe30183001980014036063fe3efe000079e99907f3fe3018300198001203601b003efe00e866077006c018300198001203601b003efe00e866077006c0183001980014036007003efe000079e99907f00700183fff980014036007003efe000079e99907f00700183fff980012036000003efe00e86607700000180000180012036000003efe00e86607700000180000180014036000003ffeff00f9e99907f00000180000180014036000003ffeff00f9e99907f00000180000180007007fdcff01f80007007fdcff01f80002d900a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Break Points}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Break Points\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Next let's look at how to set break points}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 break points}}}{\fs20 .  First use the Stop command to stop the program (if it hasn't already completed), and then select the program line containing the call to PaintOval.  Now choose Set/Clear Break Point from the Debug menu.  A purple X will appear to the left of the PaintOval line, indicating it is a break point.  Now select Trace from the Debug menu.  Execution stops at the PaintOval line.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 \par A break point will always cause the program to stop \endash  even if it was executing at full speed.  Break points are especially useful for debugging large programs.  You can set a break point on the first line of the area you want to examine, then execute the rest of the program at full speed.  Execution will be suspended when you reach the break point.\par Another use of break points is when you suspect that a certain portion of your program is not being executed at all.  By setting a break point, you can check where your program quits executing, and then determine if this is in the location that you thought was not being reached.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Debugging a Program With More Than One Subroutine}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Debugging a Program With More Than One Subroutine\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are several features of the debugger that are only useful in programs that have more than one subroutine.  The bull's eye program we have been using so far doesn't have any subroutines, so we will need to switch to a program that does.  If you haven't already done so, stop the bull's eye program.  After you get the main menu back, close the graphics window and the bull's eye program's source window, and then open the file Sort.pas.  Like the bull's eye program, the sort program is in the Samples folder.  The sort program compares two simple sort procedures by sorting the same array of integers using each routine.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Profile Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Profile Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 One of the advanced features of the debugger that can help you improve a program is the profiler.  The profiler collects statistics about your program to help you find bugs and "hot spots."  A hot spot is a place in your program that takes a long time to execute compared with the rest of the program.  You may have heard of a famous rule of thumb in programming which states that a program spends 90% of its time in 10% of its code.  The 10% of the code is the hot spot, and knowing where it is can help you speed up your program.\par As you can see, the sort program you just opened has two subroutines, named ShellSort and BubbleSort.  Shrink the window to about half its width.  Pull down the Debug menu and select the Profile command.  This turns the profiler on.  Next, use the Compile to Memory command to compile and execute the program, just as you did with the bull's eye program.  After the program compiles and executes, you will see the profiler's statistics printed in the shell window.  The profiler returns the following information:}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profiler}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The number of times each subroutine and main program was called.\par 2.\tab The number of heartbeats while in each subroutine and the main program.\par 3.\tab The percent of heartbeats for each subroutine and main program compared to the total number of heartbeats.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This information is in columns, and won't all be visible unless you expand the size of the shell window.  If you don't see three columns of numbers after the names of the subroutines, make the shell window larger.\par The number of times a subroutine is called is more useful than it seems at first.  For example, let's say you are testing a program that reads characters from a file and processes them \endash  a spelling checker, perhaps.  If you know that the test file has 3278 characters, but the subroutine you call to read a single character is called 3289 times, you know right away that there is a problem.  In addition, if you are really calling a subroutine 3278 times, and the subroutine is a short one that is only called from a few places, you might want to consider placing the few lines of code "in-line," replacing the subroutine calls.  Your program will get larger, and perhaps a little harder to read, but the improvement in execution speed could make these inconveniences worthwhile.\par The sort program only calls each sort one time, so the first column of information isn't very useful in this example.  We also see, however, that the sort program spent about 32% of its time in the BubbleSort subroutine, about 42% of its time in the ShellSort routine, and about 26% of its time in the main program.  At least for this type of data, then, the bubble sort is the better choice.  You should be aware that the statistics generated by the profiler are based on a random sampling.  It can be quite accurate for some types of programs, and very unreliable for others.  To get the best results, run a program several times, and try to use input data that will cause it to execute for several seconds to a few minutes.  The larger the sample, the better the results will be.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Step Through Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Step Through Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step through command}}}{\fs20 Two commands, Step Through and Goto Next Return, are designed to make debugging subroutines easier. The Step Through command is used to execute subroutines at full speed.  For instance, many times when you are writing a new program, you may have problems with one or more of the subroutines, but you know that other subroutines are working fine.  You would like to be able to pass quickly through the working routines, and then slow down and step through the problem areas of the code.  This is the reason for the Step Through command.\par To see how the Step Through command works, let's debug the Sort.pas program.  If you pull down the Debug menu, you will see that the Step Through, Go to Next Return, and Stop items are all dimmed, meaning that they cannot be selected at this time.  This is because there is nothing to step through or stop, and no return to go to.  \par Pull down the Debug menu and select the Step command.  Sort.pas is compiled and linked, and then our step arrow appears next to the for loop, which is the first statement in the main program.  To get beyond the for loop, select Step eleven times.  The step arrow is now next to the line containing the call to the ShellSort subroutine.  Now pull down the Debug menu and select Step Through.  There is a momentary pause, and then the arrow advances to the next line, another for loop.  The Step Through command has just executed the ShellSort subroutine at full speed.  If we now single-step through the for loop, we will see the sorted array values printed in the shell window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Goto Next Return Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Goto Next Return Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto next return command}}}{\fs20 The Goto Next Return command is useful when you are only debugging a portion of a subroutine.  To see how this command works, single-step through the statements in the main program until you reach the line containing the call to the BubbleSort routine.  Single-step once more to reach the beginning of the BubbleSort subroutine.  Now select Go to Next Return from the Debug menu.  The BubbleSort routine is executed, and then the step arrow appears to the left of the line following that which called the BubbleSort function.  To verify execution of the subroutine, we could use Step, Step Through, Go, or Trace to see the sorted array displayed in the shell window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Viewing Program Variables}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Viewing Program Variables\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \clvertalt\cltxlrtb \cellx4680\clvertalt\cltxlrtb \cellx7920\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 Watching a program execute, and seeing exactly when output is produced, can be very useful.  The debugger has another ability, though, which is even more important:  you can watch the values of the internal variables.}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:variables}}}{\fs20 \par To see how this works, pull down the Windows menu and select the Variables command.   The desktop brings up a Variables window in the center of the screen, like the one pictured to the right.  (The window you will see won't have any variable names in it.)}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables command}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 \cell }\pard \qr\widctlpar\intbl\adjustright {\par }{{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw270\pich152\picwgoal5400\pichgoal3040\macpict\bliptag88307961\blipupi72{\*\blipuid 054378f9bf0516b681dc75a89cc14c7c}077d000000000098010e1101a00082a0008e01000a00000000030802809800220000000000980110000000000098010e000000000098010e000102df0006007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f80b056000c0018003e60000180b056000c0018003e60000180e086020c0818183000006e90000180e086020c0818183000006e90000180b056060c26183c3e60000180b056060c26183c3e60000180f096020ca899ffb3f87ce3eea0000180f096020ca899ffb3f87ce3eea0000180f096060c0418ff336ccc633ea0000180f096060c0418ff336ccc633ea0000180f096222c081866336ccc633ea0000180f096222c081866336ccc633ea0000180f096264c04187e336ccc633ea0000180f096264c04187e336ccc633ea0000180f0960a0c0818ff336c7cf33ea0000180f0960a0c0818ff336c7cf33ea0000180b056060c0418e73e60000180b056060c0418e73e60000180b056000c0018003e60000180b056000c0018003e600001806007fe1ff00f806007fe1ff00f8090060e400031ffffff8090060e400031ffffff811036003cc0ff80001c1e0f200031800001811036003cc0ff80001c1e0f2000318000018110360030cc3f9000103c3f1000318018018110360030cc3f9000103c3f1000318018018110361f30cc3f80001c3e0f2000318066018110361f30cc3f80001c3e0f20003180660180e0363330cc3f80001c330f200fd180e0363330cc3f80001c330f200fd18110363330fc3f80001c330f2000318600618110363330fc3f80001c330f20003186006181103633300c3f80001c330f2000319f81f981103633300c3f80001c330f2000319f81f980f0361f300c3f9000203f1e0f200fd180f0361f300c3f9000203f1e0f200fd1809036003c00fe700fd1809036003c00fe700fd18060060e400fd18060060e400fd180f016180f7000103e0f10003181ff8180f016180f7000103e0f10003181ff8180d0060f6000003f00003180000180d0060f6000003f00003180000180f016380f7000103e0f100031ffffff80f016380f7000103e0f100031ffffff80e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180f016180f700010330f10003180000180f016180f700010330f10003180000180f0163c0f7000101e0f10003180000180f0163c0f7000101e0f1000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e40003181ff818090060e40003181ff818060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18090060e4000319f81f98090060e4000319f81f98090060e4000318600618090060e4000318600618060060e400fd18060060e400fd18090060e4000318066018090060e4000318066018090060e4000318018018090060e4000318018018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e4000319ff8018090060e4000319ff8018090060e4000319818018090060e4000319818018090060e400031981ff98090060e400031981ff98090060e4000319818198090060e4000319818198090060e4000319ff8198090060e4000319ff8198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e40003183fff98090060e40003183fff98090060e4000318000018090060e4000318000018090060e4000318000018090060e400031800001806007fe1ff00f806007fe1ff00f802df00a0008fa00083ff}}{\f12 \par }{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 The rectangle beneath the title bar of the Variables window contains three boxes, and an area to the right of the boxes where the name of the currently executing subroutine is displayed.  Drag the Variables window out of the way of the other windows on the desktop, and then select the source file window.\par We can't enter any variables into the Variables window unless we are executing a program.  This makes intuitive sense \endash  memory for variables isn't allocated until run-time.  The first two boxes control which subroutine we are looking at, while the third is a command button that displays all of the simple variables.  Likewise, these boxes are dimmed until they can be used.\par To see how to set up the variables we would like to view, start stepping through the program by using the Step command.  You should be at the first line in the main program.  Click anywhere in the Variables window below the title bar and function-name bar, and to the left of the scroll control.  (This area is called the content region of the window.)  A line-edit box will appear, with a flashing insertion point.  Let's enter one of the main program's variables, a[4], and then press }{\outl\fs18 return}{\fs20 .  After the carriage return, we see the current value of a[4] displayed, which is zero.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 You can enter new variable names by clicking in the content region of the Variables window, and then typing in the name.  You can change an existing variable in the window by clicking on its name, and then using the line editor to make the necessary modifications.\par Typing the name of a variable works great when we are trying to look at very specific things, like a particular element of an array, or if we just want to look at a few variables.  It\rquote s a little tedious to type the names of each and every variable, though.  If you click on the third box \endash  the one with a star \endash  all of the simple variables will be displayed in the window.  For arrays, records or pointers, though, you still have to type the specific value you want to see.\par Continue stepping through the program, and watch what happens when the program enters the ShellSort procedure.  The name ShellSort appears in the information bar of the Variables window, the up-arrow can be selected, and the variable a[4] vanishes.  If you click on the up arrow to the left of the ShellSort procedure name, you will see the variables display for the main program, and the down arrow in the Variables window can be selected.  The variable a[4], which is defined at the main program level, also reappears.  If you click on the down arrow, the Variables window switches back to the ShellSort display.  You can enter any of the ShellSort variable names whose values you wish to see whenever the program is executing in this subroutine.\par If you haven't finished executing the program, stop it now using the Stop command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 The debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  is capable of displaying any scalar quantity.  Scalar variables include integers, real numbers, strings, pointers, booleans, and characters.  Integers, reals, and strings are stored internally in a variety of formats; the debugger can display any of these formats.  The debugger can also show values pointed to by a pointer, fields within a record, or elements of an array, so long as the actual thing you are trying to display is ultimately a single value.  For example, you can use\par \par }{\f6\fs18 r.h1\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 to display one of the fields within the rectangle record in the bull\rquote s eye program, although you cannot just type }{\f6\fs18 r}{\fs20  to try to display the entire record.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The rules you use to type complex expressions are covered in detail in Chapter 7, but some simpler rules of thumb are probably all you need.  First, array subscripts must always be constant values, not expressions or variables.  To look at the value of a pointer, type it's name; to look at the value the pointer points to, type the name followed by ^, just like you would in a Pascal program.  You can use }{\f6\fs18 ^.}{\fs20  to look at a field in a record that is pointed to by a pointer, just like you do in Pascal.  Finally, you can use pointer operators (}{\f6\fs18 ^}{\fs20 ), field operators (the }{\f6\fs18 .}{\fs20  character) and array subscripts in combination.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 \par The debugger is case insensitive, just like the Pascal language.  Whether you type }{\f6\fs18 MINE}{\fs20  or }{\f6\fs18 mine}{\fs20 , you'll see the same value either way.  If you use the star button to fill in the variable values, though, they will always show up in uppercase.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:case sensitivity}}}{\fs20 \par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Those Other Disks}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Those Other Disks\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are three other disks in your ORCA/Pascal package that we haven't used yet.  Two are labeled "Extras Disk" and "More Extras Disk," these have a number of files that you can use if you install ORCA/Pascal on a hard disk, but that you don't have room for on a single 800K floppy disk.  If you are using floppy disks and happen to need one of these files, though, you aren't completely stuck: by moving some of the files that you don't happen to be using off of the program disk, you can make room for the files you do need.  The extras disk also has a copy of Apple's installer and installer scripts to help you set up a text-based version of ORCA/Pascal or to install ORCA/Pascal on a hard disk.  Installation is covered in Appendix C.  Two text files that you should eventually read are also on the extras disk.  The first, Tech.Support, gives our address, phone number, and several e-mail addresses that you can use to get in touch with us if you have any questions or problems.  The second, Release.Notes, lists changes, additions and corrections to this manual.\par The last disk is the "Samples Disk."  This disk is chock-full of actual Pascal programs, some of which illustrate useful programming techniques, some of which are used later in Chapter 4 to illustrate the various programming environments on the Apple\~II}{\fs18 GS}{\fs20 , and some of which are just plain fun.  If you have a question about how to do something on the Apple\~II}{\fs18 GS}{\fs20 , you might look on the samples disk first \endash  there just might be a program on the samples disk that does exactly what you are trying to do.\par }\pard \widctlpar\adjustright {\*\bkmkend bk0}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop development environment}{\rxe bk0}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 3:  Compiler Directives\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 3 \endash  Compiler Directives\par }\pard \keepn\widctlpar\adjustright {\fs20 {\*\bkmkstart bk1}\par \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 3 \endash  Compiler Directives\tcl1}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 What's a Compiler Directive?}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 What's a Compiler Directive?\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you learn to write programs in Pascal, most books cover relatively straight-forward text-based programs that can be written using Standard Pascal.  You don't need to use compiler directives in such simple programs.  Later, as you develop more experience, you start to wish the compiler performed just a little differently.  For example, if you are trying to write a classic desk accessory on the Apple\~II}{\fs18 GS}{\fs20 , you need a compiler that will generate a special header.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directives}}}{\fs20 \par Compiler directives are instructions to the compiler.  They give you a way to tell the compiler to do something in a slightly different way than it normally does.  With compiler directives, you can ask ORCA/Pascal to create a desk accessory, generate particular kinds of debug code, or even tell the compiler how to optimize the program.  This chapter lists the compiler directives used in ORCA/Pascal, and briefly describes what they are for.  While you don't need to be intimately familiar with each of the compiler directives to use the system, it is important that you know that they exist, and basically what they do.  That way, you will end up saying to yourself "let's see, to make the compiler do...," rather than "gee, it's too bad the compiler can't..."\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 How Directives are Coded}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 How Directives are Coded\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directives\:see compiler directives}{\txe }}}{\v\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\fs20 Compiler directives under ORCA/Pascal follow a common convention.  They look very much like a comment, except that the character right after the opening comment character is a dollar sign ($).  More than one directive can be included in a single comment by separating them with commas, or you can put each directive in a separate comment.  Most can be used anywhere in the source file.\par The following example shows how to save the object module to the file MYPROG and generate a listing.  The function of the directives themselves will be explained later \endash  this example is simply to show you the correct format.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$Keep 'MYPROG', List+\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 A Brief Summary of ORCA/Pascal Compiler Directives}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 A Brief Summary of ORCA/Pascal Compiler Directives\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The various compiler directives are explained in detail later in this book.  All of the compiler directives are described in Chapter 23, and many are explained in the next chapter, which outlines the various kinds of programs you can write with ORCA/Pascal.  The table you see below gives you a brief overview of the compiler directives so you know what is available.\par \par }\pard \qj\li360\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 directive\tab use\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 Append\tab The Append directive tells the compiler to open a new source file.  It's generally used for small, multi-lingual programs.  For example, if the file you append is an assembly language source file containing a few assembly language subroutines, the ORCA system will automatically switch to the ORCA/M assembler to assemble the new file.\par CDev\tab Used to create Control Panel Devices (CDevs).  CDevs are the small programs executed by the desktop control panel that ships with Apple's System 6.0 software.  Chapter 4 discussed CDevs.\par ClassicDesk\tab Used to create Classic Desk Accessories (CDAs).  CDAs are the text programs, like the text control panel, that you can use from virtually all programs.  Chapter 4 discusses CDAs in more detail.\par Copy\tab The Copy directive tells the compiler to include all of the source code from another file.\par DataBank\tab }{\pard\plain \qj\fi-1800\li2160\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox}}}{\fs20 When you are using the Apple\~II}{\fs18 GS}{\fs20  toolbox, there are a few cases where you need to define a function that will be called by the toolbox itself.  Pascal expects a register called the databank register to be set in a specific way, though, and the toolbox does not set the databank register.  This pragma tells ORCA/Pascal to set the databank register properly, something it normally does not need to do.\par Debug\tab ORCA/Pascal generates several kinds of debug code to support the PRIZM and ORCA/Debugger source-level debuggers.  Generally, you want to turn all of the debug code on, or turn all of it off, using command line switches or PRIZM check boxes.  This directive provides closer control of the debug process.\par Dynamic\tab You can create programs that aren't all in memory at one time.  These programs are broken up into more than one piece; each piece is called a segment.  The Dynamic directive tells the compiler that the subroutines that follow it should be put in a segment that will be left on the disk until it is needed.\par Eject\tab This directive tells the compiler to send a form feed character to the output device.  You can use it to format compiled listings that are being sent to the printer.\par Float\tab ORCA/Pascal generally uses SANE for floating-point calculations, but it can also use the Innovative Systems FPE card.  This directive disables certain direct calls to SANE so that code generated for the FPE card runs faster.\par ISO\tab ORCA/Pascal has a lot of extensions to the ISO Pascal Standard.  You can use this directive to disable all of the extensions, which will make it a lot more likely that your program will run on another compiler.\par Keep\tab The Keep directive lets you hard code a specific keep name in the source file for your program.\par LibPrefix\tab When you use a uses statement to tell the compiler to include a unit, it looks in the current directory and a special library directory.  This directive is used to tell the compiler to look somewhere else, like a special, private library.\par List\tab This directive tells the compiler to create a source listing as it compiles the program.\par MemoryModel\tab All 65816 programs must consist of chunks of code that are 64K or smaller, and ORCA/Pascal further assumes that all arrays and records are 64K or smaller.  The MemoryModel directive moves all global variables to segments that are not combined with the executable code for the program, so the total size of your global variables can exceed 64K.  It also tells the compiler not to assume that arrays and records allocated using dynamic memory are smaller than 64K.  The segment statement can also be used to break a program into smaller pieces.\par Names\tab You can use this directive to turn on trace-back code.  With this option enabled, if your program stops due to a run-time error, it will print the line that the error occurred on and what subroutines were called to get there.\par NBA\tab Used to create New Button Actions (NBAs) for HyperStudio.  NBAs are discussed in Chapter 4.\par NewDeskAcc\tab Used to create New Desk Accessories (NDAs).  NDAs are the small programs available under the Apple menu in most desktop programs.  NDAs are discussed in Chapter 4.\par Optimize\tab ORCA/Pascal is an optimizing compiler, but optimizations take time.  When you are developing a program it's generally best to turn optimizations off so the compiler compiles quicker.  Once the program is finished, turn the optimizations on.  The compiler will take a lot longer to compile the program, but the program will generally be a lot smaller and faster, too.  This directive lets you control the level of optimization.\par RangeCheck\tab The RangeCheck directive turns on some extra checks that lets the compiler check for some kinds of errors.  The include using a nil pointer, some kinds of stack overflows, indexing past the end of an array, and setting a value to something outside of the specified subrange.\par RTL\tab ORCA/Pascal programs normally return to the program that launched them using a GS/OS Quit call.  Some kinds of programs need to exit with an RTL instruction; the most common example is an Init.  This pragma tells the compiler to use an RTL instruction to exit.  Inits, and the use of this pragma, are discussed in Chapter 4.\par Segment\tab Programs on the 65816 can be any size, but each piece of the program (called a segment) has to be smaller than 64K.  This directive let's you break the program up into more than one segment.\par StackSize\tab Local variables and some information used as functions are called are stored in a special area of memory called the stack.  If your program uses too much stack space, it could crash or cause other programs (like PRIZM) to crash.  By default, your program has 4K of stack space; this pragma is used to increase or decrease the stack space.\par Title\tab The Title directive tells the compiler to print a heading on each page of a compiled listing.\par ToolParms\tab }{\pard\plain \qj\fi-1800\li2160\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox}}}{\fs20 When you are using the Apple\~II}{\fs18 GS}{\fs20  toolbox, there are a few cases where you need to define a function that will be called by the toolbox itself.  The toolbox does not return function values the same way Pascal does, though.  This directive is used to tell the Pascal compiler to create a function that returns values using the toolbox convention.  You will also need to use the databank directive.\par XCMD\tab Used to create XCMDs for HyperCard.  XCMDs are discussed in Chapter 4.\par }\pard \widctlpar\adjustright {\*\bkmkend bk1}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler directives}{\rxe bk1}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 4:  Programming on the Apple II}{\f5\fs18 GS}{\f5\fs20 \par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 4 \endash  Programming on the Apple\~II}{\b\scaps\fs36 gs}{\b\fs36  \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 4 \endash  Programming on the Apple\~IIGS\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Apple\~II}{\scaps\fs20 gs}{\fs20  is a very flexible machine.  With it, you can write programs in a traditional text environment, in a high-resolution graphics environment, or in a Macintosh-style desktop environment.  ORCA/Pascal lets you write programs for all of these environments, and also supports a number of specialty formats, like desk accessories and HyperCard XCMDs.  In this chapter, we will look at each of the programming environments in turn, examining how you use ORCA/Pascal to write programs, what tools and libraries are available, and what your programs can do in each of the environments.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Text Programs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Text Programs\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\fs20 Text programs are by far the easiest kind of programs to write.  To write characters to the shell window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 , you use the appropriate built-in subroutines, like writeln}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 writeln}}}{\fs20 .  Input is just as easy \endash  you use built-in subroutines like readln to read characters from the keyboard.  Later, when the shell is covered in detail, you will also see that text programs can be executed as a command from the shell window, or even used from the text based programming environment.\par As an example, we'll create a simple text program to show how many payments will be needed to pay off a loan for any given interest rate, loan amount, and payment.  The variables are placed at the top of the program as constants, so there is no input.\par This is actually the first time we have created a program from scratch in this manual, so we will go over the steps involved fairly carefully.  If you aren't in the development environment, boot it now.  Pull down the File menu and use the New command to open a new program window.  Be sure and check the languages menu - PASCAL should be checked.  If it is not, select PASCAL from the languages menu.  Now type in the program shown below.  If you have trouble using the editor, glance through Chapter 7 for help.\par (Note:  Although the point of this example is to show you how to type in a program from scratch, we should point out that the following example is also on the samples disk in the Text.Samples folder.)\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \{-----------------------------------------------\}\par \{                                               \}\par \{  Financing                                    \}\par \{                                               \}\par \{  This program prints the balance on an        \}\par \{  account for monthly payments, along with the \}\par \{  total amount paid so far.                    \}\par \{                                               \}\par \{-----------------------------------------------\}\par \par program Finance(output);\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 const\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    loanAmount    = 10000.0;      \{amount of the loan\}\par    payment       = 600.0;        \{monthly payment\}\par    interest      = 15;           \{yearly interest (as %)\}\par \par var\par    balance: real;                \{amount left to pay\}\par    month: integer;               \{month number\}\par    monthlyInterest: real;        \{multiplier for interest\}\par    paid: real;                   \{total amount paid\}\par \par begin\par \{set up the initial values\}\par balance := loanAmount;\par paid := 0;\par month := 0;\par monthlyInterest := 1.0 + interest/1200.0;\par \par \{write out the conditions\}\par writeln ('Payment schedule for a loan of ', loanAmount:10:2);\par writeln ('with monthly payments of ', payment:5:2, ' at an');\par writeln ('interest rate of ',interest:1,'%.');\par writeln;\par writeln ('month':15, 'balance':15, 'amount paid':15);\par writeln ('-----':15, '-------':15, '-----------':15);\par \par \{check for payments that are too small\}\par if balance*monthlyInterest - balance >= payment then\par    writeln ('The payment is too small!')\par else\par    while balance > 0 do begin\par       \{add in the interest\}\par       balance := balance*monthlyInterest;\par       \{make a payment\}\par       if balance > payment then begin\par          balance := balance-payment;\par          paid := paid+payment;\par          end \{if\}\par       else begin\par          paid := paid+balance;\par          balance := 0;\par          end; \{else\}\par       \{update the month number\}\par       month := month+1;\par       \{write the new statistics\}\par       writeln (month:15, ' ':5, balance:10:2, ' ':5, paid:10:2);\par       end; \{while\}\par end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\fs20 Once the program is typed in, you will need to save it to a work disk.  The best choice is a second disk drive, whether that disk drive is a 3.5" drive or a 5.25" drive.  Don't be concerned about the amount of disk space available \endash  a 5.25" disk drive has plenty of room for programs.  The program disk \endash  that is, the disk with the compiler and linker on it \endash  }{\i\fs20 must}{\fs20  be in a disk drive when you compile the program, and the disk where you save the program also must be in a drive.  The choice of a file name is important, too.  Because of the way the ORCA system deals with multi-lingual compiles and partial compiles, and because of some other naming conventions we won't go into now, it's best to pick a name for your program that is ten characters or less, then add .PAS to the name.  For this particular program, save it as Finance.pas.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command}}}{\fs20 With the program safely on a disk, you are ready to compile it.  As with the bull's eye program, you compile the program using Compile to Memory command from the Run menu.  If you didn't type the program in properly, an attention box will appear with the error message.  When you click OK, you will find the cursor on the exact spot where the error occurred \endash  simply make the correction and recompile.  Once the program compiles, it will print the results in the shell window.  Unless you shrink the window with your program, you won't see the source window, but the output is still there.  You will need to move the shell window and grow it to see all of the results.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\fs20 One of the classic interactive computer games of all time will serve as our second example, giving us a chance to explore text input and accessing the Apple\~II}{\fs18 GS}{\fs20  toolbox.  In this simple game, the computer will pick a distance to a target, and you pick a firing angle for a cannon.  The computer then lets you know if you hit the target, or if you missed, by how much.  The listing is show below.  Go ahead and type it in, but don't compile it yet.\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \{-----------------------------------------------\}\par \{                                               \}\par \{  Artillery                                    \}\par \{                                               \}\par \{  This classic interactive text game lets you  \}\par \{  pick the angle of your artillery gun in      \}\par \{  an attempt to knock out the enemy position.  \}\par \{  The computer picks a secret distance.  When  \}\par \{  you fire, you will be told how much you      \}\par \{  missed by, and must fire again.  The object  \}\par \{  is to hit the target with the fewest shells. \}\par \{                                               \}\par \{-----------------------------------------------\}\par \par program Artillery(input, output);\par \par uses Common, MscToolSet;\par \par const\par    blastRadius = 50.0;          \{max distance from target to get a hit\}\par    degreesToRadians = 0.01745329; \{convert from degrees to radians\}\par    velocity    = 434.6;         \{muzzle velocity\}\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    angle: real;                 \{angle\}\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    asciiTime: packed array[1..20] of char; \{time - for random #s\}\par    distance: real;              \{distance to the target\}\par    done: boolean;               \{is there a hit, yet?\}\par    time: real;                  \{time of flight\}\par    tries: integer;              \{number of shots\}\par    x: real;                     \{distance to impact\}\par    vx,vy: real;                 \{x, y velocities\}\par \par begin\par \{choose a distance to the target\}\par ReadAsciiTime (@asciiTime);\par distance := (ord(asciiTime[16])&$0F*10 + ord(asciiTime[17])&$0F)*100;\par \par \{not done yet...\}\par done := false;\par tries := 1;\par \par \{shoot 'til we hit it\}\par repeat\par    \{get the firing angle\}\par    write('Firing angle: ');\par    readln(angle);\par \par    \{compute the muzzle velocity in x, y\}\par    angle := angle*degreesToRadians;\par    vx := cos(angle)*velocity;\par    vy := sin(angle)*velocity;\par \par    \{find the time of flight\}\par    \{(velocity = acceleration*time, two trips)\}\par    time := 2.0*vy/32.0;\par \par    \{find the distance\}\par    \{(velocity = distance/time)\}\par    x := vx*time;\par \par    \{see what happened...\}\par    if abs(distance-x) < blastRadius then begin\par       done := true;\par       write('A hit, after ',tries:1);\par       if tries = 1 then\par         writeln(' try!')\par       else\par         writeln(' tries!');\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18       case tries of\par          1: writeln('(A lucky shot...)');\par          2: writeln('Phenomenal shooting!');\par          3: writeln('Good shooting.');\par }\pard \fi360\widctlpar\adjustright {\f6\fs18          otherwise: writeln('Practice makes perfect - try again.');\par          end; \{case\}\par       end \{if\}\par    else if distance > x then\par       writeln('You were short by ',round(distance-x):1,' feet.')\par    else\par       writeln('You were over by ',round(x-distance):1,' feet.');\par    tries := tries+1;\par until done;\par end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\fs20 One of the problems with interactive text programs is that, if you can't see the input, you can't run the program.  Before compiling the artillery program, be sure to arrange your windows so you can see the shell window.\par By now you've seen that the shell window will open automatically when the program starts to compile, but in a case like this one, you need to open the shell window and resize it before you start to compile the program.  There's nothing special about the shell window the system opens for you, so you could just create a new window and change the language type to Shell.  You can also open the system's shell window early, though, using the Window menu's Shell Window command.\par For the artillery program, you might try leaving the program's window at the full width of the screen, but shortening it so the bottom third of the screen is free.  The shell window can be sized to fit in the bottom third of the screen.  This arrangement works very well when both the program and it's output use most of the available screen width.\par When you run the program, you will see a prompt for the firing angle followed by a black box.  This black box is the cursor used by interactive text programs.  It lets you know that the input is being read by a program, so normal desktop editing features cannot be used.  If you make a mistake, you can use the }{\outl\fs18 delete}{\fs20  key to back space over your input.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Built-in Procedures and Functions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Built-in Procedures and Functions\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 built-in procedures}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 built-in functions}}}{\fs20 Your most important resource for writing programs that run in the text environment are the built-in procedures and functions.  These are available in any program you write \endash  you do not have to do anything special to get access to them.  Built-in procedures and functions include disk access routines like reset, read, and writeln; mathematical functions like cos, arctan, and tan; and many others, like new and dispose.  These procedures and functions are described in Chapter 22.\par Two points are worth noting about built-in procedures and functions.  First, the Standard Pascal requires some procedures and functions \endash  all of these are present in ORCA/Pascal.  Some of the required procedures and functions have extended functionality, like the ability to specify a file name when you reset a file.  Also, ORCA/Pascal adds many procedures and functions to the list of those required by the ISO standard, like a full set of string manipulation procedures.  All of these extensions are flagged as errors if you use the \{$ISO+\} directive to enforce strict compatibility with the ISO Pascal Standard.}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ISO Pascal}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Standard Pascal}}}{\fs20 \par The second point is that you may be porting a Pascal program from another Standard Pascal compiler, and that program may define a procedure or function with the same name as one of the built-in procedures and functions.  This does not cause a problem \endash  the local definition will have precedence over the predefined one, so the program will work as expected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Console Control Codes}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Console Control Codes\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 console device}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output}}}{\fs20 When you are writing text programs that will execute on a text screen, one of the things you should know about are the console control codes.  These are special characters that, when written to the standard text output device, cause specific actions to be taken.  Using console control codes, you can beep the speaker, move the cursor, or even turn the cursor off.  The console control codes are covered in Appendix E.\par Keep in mind that these console control codes only work with the text screen.  While you can write text programs and execute them from the desktop, you cannot use these console control codes to control the output in the shell window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Stand-Alone Programs}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stand-Alone Programs\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files\:see individual file types}{\txe }}}{\fs20 So far, all of the programs you have created have an executable file type of EXE.  EXE files are special in the sense that the program environment knows it does not have to shut itself down to run the program.  EXE files can also have embedded debug code, and do not have to start the tools for themselves.  Unfortunately, they cannot be executed from the Finder.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 There are two changes you need to make before any of the text programs you have created so far can run from the Finder.  The first is to turn off debug code, which you can do by disabling the "Generate debug code" check box in the Compile dialog.  The other change you must make is to change the file type to S16 in the Link dialog; you do this by selecting the S16 radio button.  In general, you should also turn off the "Execute after linking" option in the Link dialog, since it's a pretty slow process to run an S16 program directly from PRIZM.\par With these changes made, recompile one of your text programs and leave the ORCA environment.  From the Finder, you will now see the hand-in-a-diamond program icon, which tells you that you can run the program from the Finder.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Graphics Programs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Graphics Programs\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A large subset of programs need to display graphics information of some kind, but aren't necessarily worth the effort of writing a complete desktop program.  These include simple fractal programs, programs to display graphs, slide show programs, and so forth.  In this book, these programs are called graphics programs.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Your First Graphics Program}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Your First Graphics Program\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics environment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 Writing a graphics program with ORCA/Pascal is really quite easy.  In general, all you have to do is issue QuickDraw II}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 QuickDraw II}}}{\fs20  commands, and be sure the Graphics window is positioned properly before you run your program.  QuickDraw II is the largest and most commonly used tool in the Apple\~II}{\fs18 GS}{\fs20  toolbox}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  toolbox}}}{\fs20 , so it's also a good place to get started along the road to writing desktop programs.\par To learn about QuickDraw II, you will need a copy of the }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Toolbox Reference , Volume 2}{\fs20 .  This book was written by Apple Computer, and is published by Addison Wesley.  While the toolbox reference manual is a reference, and thus not an easy book to read, it is essential that you have a copy to answer your specific questions about the toolbox.  This section shows a couple of examples so you know how to create graphics programs using ORCA/Pascal, but there is a lot more to QuickDraw II than you see here.\par To get access to QuickDraw II}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 QuickDraw II}}}{\fs20 , you must include the statement\par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 uses}{\v\fs20  statement\: examples}{\v\f6\fs18 }}}{\f6\fs18 uses Common, QuickDrawII;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 in your program.  You may have noticed this statement in the first sample we ran, the bull's eye program.  The bull's eye program also showed how to use the QuickDraw II command DrawOval to draw ovals on the screen.  Our next QuickDraw II sample, which draws spirals on the graphics screen, shows the commands MoveTo, which initializes the place where QuickDraw II will start drawing from (called the pen location), and LineTo, which draws a line from the current pen location to the specified spot, moving the pen location in the process.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program spiral;\par \par uses Common, QuickDrawII;\par \par var\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    r, theta: real;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par theta := 0.0;\par r := 40.0;\par SetPenSize(2, 1);\par MoveTo(280, 40);\par while r > 0.0 do begin\par    theta := theta + 3.1415926535/20.0;\par    LineTo(round(cos(theta)*r*3) + 160, round(sin(theta)*r) + 40);\par    r := r - 0.15;\par    end; \{while\}\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Save the program as Spiral.pas.  As with the bull's eye program, reduce the width of your source code window to about half the screen width and open the graphics window before executing the program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Stand-Alone Programs}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stand-Alone Programs\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Any program that uses any of the Apple\~II}{\fs18 GS}{\fs20  toolbox must initialize the tools it uses.  ORCA/Pascal automatically initializes several tools, and opens the .CONSOLE device used for text input and output.  Graphics programs, though, are using QuickDraw II, and ORCA/Pascal does not automatically start this tool.  Before you can run a graphics program from outside of PRIZM, you will have to learn to start and shut down QuickDraw II.\par In the case of simple graphics programs, the easiest way to start QuickDraw II is to use the built-in procedure StartGraph}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 StartGraph procedure}}}{\fs20 .  StartGraph uses a single integer parameter to determine the size of screen to use.  This parameter should be either a 320 or a 640.  If you want the program to produce pictures that look the same as they do in the graphics window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 , use 640.  At the end of your program, you also need to use the built-in procedure EndGraph}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EndGraph procedure}}}{\fs20  to shut down the graphics environment.  The spiral program is shown below, changed to meet these requirements.  The changes are shown in bold-face.\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program spiral;\par \par uses Common, QuickDrawII;\par \par var\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    r, theta: real;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par }\pard \fi360\keepn\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 StartGraph(640);\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 theta := 0.0;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 r := 40.0;\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 SetPenSize(2, 1);\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 MoveTo(280, 40);\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 while r > 0.0 do begin\par    theta := theta + 3.1415926535/20.0;\par    LineTo(round(cos(theta)*r*3) + 160, round(sin(theta)*r) + 40);\par    r := r - 0.15;\par    end; \{while\}\par }\pard \fi360\keepn\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 EndGraph;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:menu bar while debugging}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20 You can still run this program from the desktop development environment.  The only change you will see is that the menu bar will vanish while the program is executing.  This happens any time you start a tool; the system is allowing your program to draw its own menu bar.  To switch back to the debugger's menu bar while your program is running, click on the double-arrow icon that appears at the right-hand side of your menu bar.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 As with a stand-alone text program, you must remember to turn off debug code and to change the file type to S16.  With these changes in place, you can compile the program, creating an executable file that will run from the Finder.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Programming on the Desktop}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Programming on the Desktop\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk2}Most people we talk to want to write programs that use Apple's desktop interface.  These programs are the ones with }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20 menu bars, multiple windows}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 windows}}}{\fs20 , and the friendly user interface popularized by the Macintosh computer.  If you fall into that group of people, this section will help you get started.  Before diving in, though, we want to let you know what you will need to do to write this kind of program.\par Anyone who tells you that writing desktop programs is easy, or can be learned by reading a few short paragraphs, or even a chapter or two of a book is probably a descendent of someone who sold snake oil to your grandmother to cure her arthritis.  It just isn't so.  Learning the Apple\~II}{\fs18 GS}{\fs20  toolbox well enough to write commercial-quality programs is every bit as hard as learning a new programming language.  In effect, that's exactly what you will be doing.  The Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference Manuals come in four large volumes.  Most of the pages are devoted to brief descriptions of the tool calls \endash  about one call per page.  It takes time to learn about all of those calls.  Fortunately, you don't have to know about each and every call to write desktop programs.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Learning the Toolbox}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Learning the Toolbox\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:learning\bxe }}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As we mentioned, learning to write desktop programs takes about the same amount of time and effort as learning to program in Pascal.  If you don't already know how to program in Pascal, }{\i\fs20 learn Pascal first!}{\fs20   Concentrate on text and graphics programs until you have mastered the language, and only then move on to desktop programming.\par This doesn't mean that you need to know everything there is to know about Pascal, but you should feel comfortable writing programs that are a few hundred lines long, and you should understand how to use records and pointers, since the toolbox makes heavy use of these features.\par The toolbox itself is very large.  The }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Toolbox Reference Manual}{\fs20  is a three volume set that is basically a catalog of the hundreds of tool calls available to you.  These three volumes cover the tools up through System 5.0; the additions in System 6.0 are covered in }{\fs20\ul Programmer's Reference for System 6.0}{\fs20 .  This four-volume set is an essential reference when you are writing your own toolbox programs.  A lot of people have tried to write toolbox programs without these manuals.  I can't name a single one that succeeded.\par A lot of people have been critical of the toolbox reference manuals because they do not teach you to write toolbox programs, but that's a lot like being critical of the Oxford English Dictionary because it doesn't teach you to write a book.  The toolbox reference manuals are a detailed, technical description of the toolbox, not a course teaching you how to use the tools.  }{\fs20\ul Toolbox Programming in Pascal}{\fs20  does teach you the toolbox, though.  This self-paced course also includes an abridged toolbox reference manual, so you can learn to use the toolbox before you spend a lot of money buying the four volume toolbox reference manual.\par All of this is not meant to frighten you away.  Anyone who can learn a programming language can learn to write desktop programs.  Unfortunately, too many people approach desktop programming with the attitude, fostered by some books and magazine articles, that they can learn to write desktop programs in an evening, or at most a weekend.  This leads to frustration and usually failure.  If you approach desktop programming knowing it will take some time, but willing to invest that time, you }{\i\fs20 will}{\fs20  succeed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Hardware Requirements}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Hardware Requirements\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Toolbox programs are big, and they bring in over a dozen very large interface files, too.  While ORCA/Pascal can be used to write programs on a fairly small Apple\~II}{\fs18 GS}{\fs20 , you cannot write toolbox programs with the minimal system.\par The first thing you need is more disk space.  To write toolbox programs, you will need access to more interface files than will fit on a floppy disk with the rest of the ORCA system.  You will also need to use Apple's Rez resource compiler, which is fairly large in it's own right.  Because of the amount of disk space you need, the only practical solution is a hard disk.\par The other thing you will need to write any large program is more than 1.25M of memory.  You can squeak by with 1.75M of memory, although you may have to reboot fairly often, break your program up into lots of pieces, or even switch to the text environment.  We recommend 2M or more of memory for toolbox programming.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Toolbox Interface Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Toolbox Interface Files\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx2880\tx4320\tx5580\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:interface files\bxe }}}{\fs20 As you look through the toolbox reference manuals, you will see that the toolbox is divided into a set of tools, each with its own name.  There is a unit for each of these tools; it contains definitions for all of the tool calls and data structures used by the tools.  In some cases, a data structure might be shared by more than one tool; in that case, the definition is in the unit Common, which is needed for almost all of the tool units.  That's why you always see Common listed before QuickDrawII, even in the short graphics programs.\par There are actually two different versions of the tool units.  One version, which you can find on the More Extras disk at the path :MoreExtras:Apple:Libraries:AppleTools, was created by Apple Computer for the MPW II}{\fs18 GS}{\fs20  Pascal compiler.  We've made sure these units will compile under ORCA/Pascal, and offer them for people who might be trying to move programs that were developed with these interfaces, or who need to develop programs under both ORCA/Pascal and MPW.  In this manual, and in our courses, though, we will use the Byte Works interfaces.\par Here's a list of the current toolbox files and the tool they define.  The name shown is the name you would use in the uses statement; on disk, the file will have .int appended, and be located at 13:ORCAPascalDefs.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCAPascalDefs}}}{\fs20   A few, like GSOS and FINDER, don't technically document the tools, but they are included here for completeness.\par \par }\pard \li1260\keepn\widctlpar\tx3780\adjustright {\pard\plain \li1260\keepn\widctlpar\tx3780\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 toolbox\:interface files}}}{\v\fs20 \par }\pard \li1260\ri1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3780\adjustright {\fs20 Uses Name\tab Tool\par }\pard \li1260\keepn\widctlpar\tx3780\adjustright {\fs20 \par ACE\tab Audio Compression/Expansion\par }\pard \li1260\widctlpar\tx3780\adjustright {\fs20 Common\tab types and constants\par ControlMgr\tab Control Manager\par DeskMgr\tab Desk Manager\par DesktopBus\tab Apple Desktop Bus\par DialogMgr\tab Dialog Manager\par EventMgr\tab Event Manager\par Finder\tab Finder Interface\par FontMgr\tab Font Manager\par GSOS\tab GS/OS Disk File Manager\par HyperStudio\tab HyperStudio Interface\par HyperXCMD\tab HyperCard Interface\par IntegerMath\tab Integer Math Tool Set\par LineEdit\tab Line Edit Tool Set\par ListMgr\tab List Manager\par MemoryMgr\tab Memory Manager\par MenuMgr\tab Menu Manager\par MIDI\tab MIDI Sound Tools\par MIDISynth\tab MIDISynth Tool Set\par MscToolSet\tab Miscellaneous Tool Set\par MultiMedia\tab Media Control Tool Set\par Sequencer\tab Note Sequencer\par Synthesizer\tab Note Synthesizer\par ORCAShell\tab ORCA Shell Interface\par PrintMgr\tab Print Manager\par PRODOS\tab ProDOS Disk File Manager\par QuickDrawII\tab QuickDraw II and QuickDraw Auxiliary\par ResourceMgr\tab Resource Manager\par Scheduler\tab Scheduler\par ScrapMgr\tab Scrap Manager\par SFToolSet\tab Standard File Operations Tool Set\par SoundMgr\tab Sound Manager\par TextEdit\tab Text Edit Tool Set\par TextToolSet\tab Text Tool Set\par ToolLocator\tab Tool Locator\par WindowMgr\tab Window Manager\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Table 4.1:  Summary of Interface Tool Files\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Debugging a Desktop Program}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Debugging a Desktop Program\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx2880\tx4320\tx5580\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright {\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop programs}}}{\fs20 Debugging a desktop program is not much more difficult than debugging a text or graphics program, but there are a few points you need to keep in mind.  These arise from the fact that both the debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 high level language debugger}}}{\fs20  and your program need the mouse, keyboard, and menu bar}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  to function.\par As soon as the debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 high level language debugger}}}{\fs20  decides that your program is a desktop program, you will see your menu bar}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  replace the desktop menu bar.  The debugger makes this decision based on tool startup calls.  If you initialize any tool in Table 4.1 except SANE, the debugger treats your program like a desktop program.  ORCA's windows are still visible, but you can no longer select them.  At the far right of your menu bar, you will see two special icons, created by the debugger.  The first is a footprint and the second is a combined left and right arrow.  The footprint is used to step through your program, one line at a time, without having to return to the desktop.  The arrows are used to return to the desktop to issue some other debugging command.   If you switch to the desktop while you are debugging your program, you will see that the special icons are also in the Desktop's menu bar.  You can select the arrows icon to return to your program.\par You }{\i\fs20 should}{\fs20  }{\i\fs20 not}{\fs20  switch menu bars while your program is creating its menu bar}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20 .  From the time you issue the first Insert Menu tool call until you draw the menu bar, your menu bar is incomplete.  This restriction should not pose any special problems if you are building standard menus, but could be troublesome in the case where you are defining your own menus.  To debug your menu bar routine, then, you will need to limit your debugging activities to clicking on the step icon.\par }{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 A second source of potential trouble lies in trying to debug your window update routine.  Again, you should not switch to the desktop during your update routine, since the debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  might need to use your routine to repaint your windows.  You should use the footprint icon to invoke the Step command to debug your update routine.\par A third problem area regards your program stack.  The debugger will be using your stack, so you need to be sure that you do not use coding tricks that depend on the values below the stack pointer remaining unchanged.  The Pascal compiler doesn't do this; it would only happen in your own assembly language subroutines.  You also need to make sure that there are at least 256 bytes of free stack space at all times.\par }{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 The fourth point is that you should not issue a Stop command in the middle of debugging, but instead let your program continue to execute until it reaches its natural conclusion.  This restriction applies to the case where you have started tools that were not started by the desktop, and a premature abort from your program will leave these tools open.  It is assumed that your program shuts down any tools it starts; the debugger looks over your shoulder and prevents startup calls for tools already initialized, and also prevents shutting down tools it needs.  The debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  does not shut down any extra tools you have initialized.  The desktop starts up the following tools:\par \par }\pard \qj\fi-270\li3420\widctlpar\adjustright {\fs20 \bullet \tab Control Manager\par \bullet \tab Desk Manager\par \bullet \tab Dialog Manager\par \bullet \tab Event Manager\par \bullet \tab Font Manager\par \bullet \tab Line Edit Tool\par \bullet \tab List Manager\par \bullet \tab Memory Manager\par \bullet \tab Menu Manager\par \bullet \tab Print Manager\par \bullet \tab QuickDraw Auxiliary\par \bullet \tab QuickDraw II\par \bullet \tab SANE\par \bullet \tab Scrap Manager\par \bullet \tab Standard File Manager\par }\pard \qj\fi-270\li3420\keepn\widctlpar\adjustright {\fs20 \bullet \tab Tool Locator\par \bullet \tab Window Manager\par }\pard \qj\keepn\widctlpar\tx2880\tx3150\tx4320\tx5580\adjustright {\fs20 \par }\pard \qc\widctlpar\tx2880\tx3150\tx4320\tx5580\outlinelevel0\adjustright {\fs20 Table 4.2 \endash  Tools started by ORCA/Desktop\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Keep in mind that since these tools are already active when your program executes, debugging may not reveal errors associated with failure to load and start these tools.\par A fifth area of trouble is switching to the desktop between paired events in your program.  For example, the code which handles mouse-down events and mouse-up events is usually closely connected.  A switch to the debugger causes a flush of the event queue.  If you switch to the desktop after detecting one kind of event, then return to your program where you await that event's paired ending, your program may go into a state of suspended animation.  You can avoid this problem by carefully considering where switches to the desktop are not dangerous.  Don't switch menu bars if you are in doubt!\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:NDA}}}{\fs20 There are two restrictions on the kind of desktop programs you can debug.  The desktop handles 640 mode only; you should use 640 mode while you are debugging your program.  The second is that the file type of your program can only be EXE or NDA (GS/OS executable file or new desk accessory, respectively).  You should change your program's file type to one of these during debugging, and then change it back to whatever you want after you have the program running.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Writing New Desk Accessories}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Writing New Desk Accessories\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 New desk accessories are those programs which can be selected from the apple menu}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 apple menu}}}{\fs20  of a desktop program.  The principal advantage of a desk accessory is that it can be used from any desktop program which follows Apple's guidelines.  Writing a desk accessory is not hard, but it does require the compiler to generate special code, so you must write a desk accessory in a special way.  For the most part, though, writing a desk accessory uses the same tools and techniques you use to write desktop programs.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 nda directive}}}{\fs20 Your desk accessory starts with the nda directive.  This directive has seven parameters.  The first four are the names of four subroutines in your program that have special meaning in a desk accessory.  The next two are the update period and event mask.  The last is the name of your desk accessory, as it will appear in the Apple menu.  The format is:\par \par }{\f6\fs18 \{$NewDeskAcc }{\i\f6\fs18 open close action init period eventMask menuLine}{\f6\fs18 \}\par }{\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 open\tab This parameter is an identifier that specifies the name of the function that is called when someone selects your desk accessory from the Apple Menu.  It must return a pointer to the window that it opens.\par \par close\tab This parameter is an identifier that specifies the name of the procedure to call when the user wants to close your desk accessory.  It must be possible to call this function even if open has not been called.\par \par action\tab The action parameter is the name of a procedure that is called whenever the desk accessory must perform some action.  It must declare two parameters.  The first is an integer parameter, which describes the action to be taken.  The second parameter is a pointer to an event record.  See page 5-7 of the }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference Manual}{\fs20  for a list of the actions that will result in a call to this function.\par \par init\tab The init parameter is the name of a procedure that is called at start up and shut down time.  This gives your desk accessory a chance to do time consuming start up tasks or to shut down any tools it initialized.  This procedure must define a single integer parameter.  The parameter will be zero for a shut down call, and non-zero for a start up call.\par \par period\tab This parameter tells the Desk Manager how often it should call your desk accessory for routine updates, such as changing the time on a clock desk accessory.  A value of -1 tells the Desk Manager to call you only if there is a reason, like a mouse down in your window; 0 indicates that you should be called as often as possible; and any other value tells how many 60ths of a second to wait between calls.\par \par eventMask\tab This value tells the Desk Manager which events your desk accessory can handle.  You are only called for events allowed by this mask.  It works the same way as the event masks we used in the Frame sample program.\par \par menuLine\tab The last parameter is a string.  It tells the Desk Manager the name of your desk accessory.  The name must be preceded by two spaces.  After the name, you should always include the characters \\H**.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 While the compiler will still expect to see the body of a program, it will never be executed, so there is no need to put anything there.  That is, you should code a  }{\f6\fs18 begin end.}{\fs20  block but you aren't required to place any statements between them.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 The format for a sample desk accessory, then, is:\par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 NewDeskAcc directive\: examples}}}{\f6\fs18 \{$NewDeskAcc StartUp ShutDown Action Init 60 1023 '  Sample\\H**'\}\par program SampleDesk;\par \par uses}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 uses}{\v\fs20  statement\: examples}{\v\f6\fs18 }}}{\f6\fs18  Common, WindowMgr;\par \par function Open: grafPortPtr;\par \par begin\par <<<open the window and assign the pointer>>>\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure ShutDown;\par \par begin\par <<<close the window>>>\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Action (event: integer; param: eventRecord);\par \par begin\par <<<handle events>>>\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Init (code: integer);\par \par begin\par if code = 0 then\par    <<<shutdown code>>>\par else\par    <<<startup code>>>\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par \{nothing goes in the program body\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end.\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 Once you have written a desk accessory, you must install it.  For the desk manager to find your desk accessory, it must be located on the boot volume in a directory called SYSTEM:DESK.ACCS.  It also has a special file type, called NDA}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\: NDA}}}{\fs20 .  To create the desk accessory, select the NDA file type from the Link dialog that appears when you use the Link command from the Run menu.  Be sure and turn debugging off for your final compile!\par For a sample desk accessory that illustrates these principles, see Clock.pas on the samples disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Debugging NDAs}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Debugging NDAs\tcl3}}}{\b \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:new desk accessories}}}{\fs20 Normally, to run a new desk accessory, you install it in the desk accessories folder.  From that time on, the desk accessory is available to any desktop program that supports desk accessories.  When you are developing a desk accessory, though, you don't want to reboot every time you change the program.  Instead, the desktop development environment allows you to execute a new desk accessory just like any other program.  Be sure and use the Link dialog box in the Run menu to change the file type of the file to NDA, though.  If the file type is not set to NDA, the desktop development environment does not know that the file is a desk accessory, and the program will almost certainly crash when you try to execute it.  When you are developing the desk accessory, you do not have to move it to the desk accessories folder, nor do you have to execute it from the Apple menu.  You can also leave the debug code}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20  turned on, and debug the desk accessory just like any other desktop program.  When you execute the desk accessory this way, the development environment simulates the same conditions that the desk accessory will face when it is executed from the Apple menu.\par Once the program is finished, you can turn off debugging and move the program to the desk accessories folder.{\*\bkmkend bk2}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop environment}{\rxe bk2}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Classic Desk Accessories}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Classic Desk Accessories\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 classic desk accessories}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ClassicDesk directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CDA}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDA}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Classic desk accessories are the utility programs that you can run by holding down the }{\outl\fs18 \u-3\'f0}{\fs20  and }{\outl\fs18 control}{\fs20  keys while you press the }{\outl\fs18 esc}{\fs20  key.  Classic desk accessories are really just a special form of text programs.  Like text programs, they use the text screen for input and output.  The advantage of a desk accessory is that it can be used from virtually any program, even programs like the text version of AppleWorks that don't even know they exist.  (If you want to create a desk accessory that will be used from ProDOS 8 programs, though, you must not use Pascal's standard disk I/O routines.)\par Classic desk accessories have a special header.  You tell the compiler to create a classic desk accessory using the ClassicDesk}{\f6\fs18  }{\fs20 directive.  This directive has a series of three parameters which tell the compiler how to build the special header required by the Apple\~II}{\fs18 GS}{\fs20 .  These parameters, in the order in which they appear in the directive, are:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 name\tab A string giving the name of the desk accessory.  This name will appear in the menu when you press }{\outl\fs18 \u-3\'f0-control-esc}{\fs20 .\par start\tab Start is the procedure that is called when your program is selected from the list of available classic desk accessories.  The start procedure serves the same purpose as the program body in a normal Pascal program.\par shut down\tab Shut down is a procedure that is called when a program stops, or just before the Apple\~II}{\fs18 GS}{\fs20  switches operating systems.  It gives your program a chance to clean up after itself, in case your program started some background task.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 classic desk accessories}}}{\fs20 The echo program from the CDA.SAMPLES folder of the samples disk shows a very simple classic desk accessory.\par \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ClassicDesk directive}{\v\f6\fs18 \: examples}{\v\fs20 }}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDA}}}{\v\fs20 \par }{\f6\fs18 \{$ClassicDesk 'Echo from Pascal' Start ShutDown\}\par \{--------------------------------------------------------------\}\par \{                                                              \}\par \{  Echo                                                        \}\par \{                                                              \}\par \{  This is about the simplest a classic desk accessory can be, \}\par \{  providing a quick framework for developing your own.  It    \}\par \{  simply reads strings typed from the keyboard and echos      \}\par \{  them back to the screen.                                    \}\par \{                                                              \}\par \{  Mike Westerfield                                            \}\par \{                                                              \}\par \{  Copyright 1987-1988                                         \}\par \{  Byte Works, Inc.                                            \}\par \{                                                              \}\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \{--------------------------------------------------------------\}\par \par program Echo (input, output);\par \par procedure Start;\par \par var\par    str: string[255];\par \par begin\par writeln ('This program echoes the strings you type from the keyboard.');\par writeln ('To quit, hit the RETURN key at the beginning of a line.');\par writeln;\par repeat\par   readln (str);                        \{ read a string \}\par   writeln (str);                       \{ write the same string \}\par until length (str) = 0;                \{ quit if the string is empty \}\par end;\par \par \par procedure ShutDown;\par \par begin\par end;\par \par begin\par \{main program - nothing goes here\}\par end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par As you can see, the directive should appear right at the top of the program.  The Start and ShutDown parameters are the actual names of the subroutines that will be called; you can use any legal Pascal function names you like.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 classic desk accessories}}}{\fs20 Once you write a classic desk accessory, there are several things you must do to make it available to your programs.  First, be sure to turn off the debug flag, so no debug code}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20  is generated.  If you miss this step, your program will crash when you try to execute it.  Next, bring up the Link dialog using the Link command from the Run menu.  You will see a series of four buttons, one for each file type supported by the desktop development environment.  One of these, CDA}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDA}}}{\fs20 , tells the system that the executable file type must be CDA.  Select this button.  In addition, deselect the "Execute after link" option; you cannot execute a classic desk accessory directly from the desktop.  At this point, you are ready to compile the program.  Once the program is compiled, copy it to the DESK.ACCS folder of the SYSTEM directory.  The next time you boot your computer, the classic desk accessory will appear in the desk accessories menu.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Debugging Classic Desk Accessories}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Debugging Classic Desk Accessories\tcl3}}}{\b \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 classic desk accessories}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:classic desk accessories}}}{\fs20 Since classic desk accessories use the text screen, they cannot be debugged from the desktop debugger.  You can however, make a very slight change to any classic desk accessory, and debug the resulting "normal" program.  To do this, turn the \{$ClassicDesk\} directive into a true comment by removing the $ character, and then add two statements to your program body, one to call the Start procedure and a second to call the ShutDown procedure.  The program body for the echo sample, shown above, would be\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par Start;\par ShutDown;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 After the program is debugged, remove the two calls, replace the $ character in the directive, and proceed with installing the desk accessory as you normally would.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Inits}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Inits\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 rtl directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Inits}}}{\v\fs20 \par }{\fs20 Initialization programs are a special kind of program that is executed as your computer boots.  There are a number of special requirements for Inits, but only two effect the way you use ORCA/Pascal.\par When most Pascal programs are complete, ORCA/Pascal makes sure a GS/OS Quit call is executed; this shuts down the program and returns control to the Finder (or whatever program launcher was used).  Initialization programs must exit with an RTL instruction, instead.  To accomplish this, place an rtl directive at the start of the program.  The rtl directive has no parameters.  The rest of the program looks just like a normal Pascal program.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:PIF}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TIF}}}{\fs20 The other special requirement is to set the file type to either PIF (for a permanent initialization program) or TIF (for a temporary initialization program).  In practice, you will also need to use the Rez compiler to create the icon that shows up when the program starts.  Since this means you have at least three steps \endash  compiling the Pascal program, compiling the resources, and setting the file type \endash  in practice initialization files are almost always built with script files.\par For an example of a very simple TIF, see the Samples disk.  For more information about the shell and script files, see Chapter 6 and Chapter 8.  The resource compiler is covered in Chapter 10.  For information about writing initialization programs that is not ORCA/Pascal-specific, see the Apple\~II}{\fs18 GS}{\fs20  File Type Notes for file types $B6 (PIF) and $B7 (TIF).\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 HyperStudio NBAs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 HyperStudio NBAs\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NBA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HyperStudio}}}{\v\fs20 \par }{\fs20 You can write HyperStudio New Button Actions (NBAs) with ORCA/Pascal with the aid of the NBA directive and the HyperStudio interface file.  The format for the NBA directive is:\par \par }{\f6\fs18 \{$nba }{\i\f6\fs18 main}{\f6\fs18 \}\par }{\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 main\tab This parameter is an identifier that specifies the name of the procedure that is called when HyperStudio calls the NBA.  This procedure accepts one parameter of type HSParamPtr.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You still need a program body, but it should not have any statements.\par The parameter that is passed to the function is a pointer to the HyperStudio parameters, contained in a record.  The structure itself is defined in the HyperStudio interface file.\par HyperStudio supports a wide range of callbacks, which are calls you can make from the NBA back to HyperStudio to perform some action.  These are called via the __NBACALLBACK procedure, which takes two parameters.  (Note: there are two _ characters at the start of the name, not one!)  The first is the callback number, while the second parameter is a pointer to a parameter record.\par You will find a constant defined for each of the callbacks in the file HyperStudio.pas, which is the source file used to create the HyperStudio interface file.  Roger Wagner Publishing distributes technical information about the callbacks themselves.\par The parameter record can be, and usually is, the same one that is passed to the NBA when it is called.  If you decide to create copies of the parameter structure, be sure you actually copy the original structure into the copy.  There are several internal fields, notably the callback address, which must be set before you make the callback.\par For an example of a simple NBA, see the Samples disk.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 HyperCard XCMDs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 HyperCard XCMDs\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 xcmd directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HyperCard\~IIGS}}}{\v\fs20 \par }{\fs20 You can write HyperCard XCMDs and XCFNs with ORCA/Pascal with the aid of the xcmd directive and the HyperXCMD interface file.  The format for the xcmd directive is:\par \par }{\f6\fs18 \{$xcmd }{\i\f6\fs18 main}{\f6\fs18 \}\par }{\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 main\tab This parameter is an identifier that specifies the name of the procedure that is called when HyperCard calls the XCMD.  This procedure accepts one parameter of type XCMDPtr.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You still need a program body, but it should not have any statements.\par The parameter that is passed to the procedure is a pointer to the HyperCard parameters, contained in a record.  The structure itself is defined in HyperXCMD interface file.\par HyperCard supports a wide range of callbacks, which are calls you can make from the XCMD back to HyperCard to perform some action.  HyperCard callbacks work like tool calls, although technically they have a unique entry point, and are not tools.  HyperXCMD has a complete set of function declarations for the HyperCard callbacks.\par HyperCard XCMDs and XCFNs are documented on the System 6.0 CD ROM.\par For an example of a simple XCMD, see the Samples disk.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Control Panel Devices (CDevs)}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Control Panel Devices (CDevs)\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cdev directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Control Panel}}}{\v\fs20 \par }{\fs20 You can write Control Panel CDevs with ORCA/Pascal with the aid of the cdev directive.  The format for the cdev directive is:\par \par }{\f6\fs18 \{$cdev }{\i\f6\fs18 main}{\f6\fs18 \}\par }{\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 main\tab This parameter is an identifier that specifies the name of the function that is called when the Control Panel calls the CDev.  This function accepts an integer parameter and two long integer parameters, in that order, and returns a long integer.  The parameters and return value are explained in the references mentioned below.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDV}}}{\fs20 For a description of the parameters and the value returned by the function, along with the other information you need to write CDevs, see the Apple\~II}{\fs18 GS}{\fs20  File Type Notes for file type $C7 (CDV).\par For an example of a simple CDev, see the Samples disk.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 5:  Writing Assembly Language Subroutines\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \keepn\widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 5 \endash  Writing Assembly Language Subroutines\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 5 \endash  Writing Assembly Language Subroutines\tcl1}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Introduction}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Introduction\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk4}By using the ORCA/M macro assembler with ORCA/Pascal, it is easy to write assembly language subroutines that can be called from Pascal programs.  This chapter describes in detail how this is done.  You do not need to know the information in this chapter to write Pascal programs.  To understand all of the information in this chapter, you must already know assembly language and how to use ORCA/M or APW.  Before continuing, you should install the ORCA/M or APW assembler in your Pascal development system.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Basics}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Basics\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Calling an assembly language subroutine from Pascal is actually quite easy.  For our first example, we will take the simplest case: a procedure defined in assembly language that has no parameters and does not use any global variables from Pascal.\par The first step is to tell the Pascal compiler that the procedure will not appear in the program, but that it will, in fact, be found by the linker.  One of the important things to remember about this is that when you start dealing with procedures and functions defined outside of the Pascal part of the program, you will always have to tell the compiler what you are doing.  The compiler is a trusting program - it will always believe you.  The compiler can check the Pascal program to make sure that it agrees with your statements about what is defined elsewhere, but it is up to you to make sure that you tell the compiler the truth.  If you lie, on purpose or by accident, the results can be dramatic!  So be careful when you tell the compiler about the procedure.\par We will define a small procedure to clear the keyboard strobe.  This is one of those tasks that is difficult to do from Pascal, yet takes only four lines of assembly language.  You might want to call this procedure from a real program - the effect is to erase any character that the user has typed, but that has not yet been processed by a read statement.\par The Pascal program must declare the procedure as }{\f6\fs18 extern}{\fs20 .  This is how you tell the compiler that the procedure appears outside of the Pascal part of the program.  A program that simply calls the procedure would look like this:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program ClearStrobe;\par \par procedure Clear; extern;\par \par begin\par Clear;\par end.\par \par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 append directive\: examples}}}{\f6\fs18 \{$append 'myprog.asm'\}\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Once you have typed the program in, save it as }{\f6\fs18 MYPROG.PAS}{\fs20 .  Be sure the file type is Pascal.  You can check this by pulling down the languages menu.\par The append directive at the end of the program is appending assembly language code to the end of a Pascal program.  The compiler is smart enough to look ahead at the language type stamped on the file being appended.  If it is an assembly language file, the compiler calls the assembler to process it.  This is one of the things that makes multi-lingual programming so easy with the ORCA development system.  If you are more familiar with separate compilation, you can, of course, use that method.\par At this point we need to add the assembly language procedure.  Create a new window, then pull down the Languages menu and select ASM65816 to change the language stamp of the window to assembly language.  With that accomplished, type in the procedure shown below.\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 ;\par ;  Clear the keyboard strobe\par ;\par Clear\tab start\par \tab sep\tab #$20\par \tab sta\tab >$C010\par \tab rep\tab #$20\par \tab rtl\par }\pard \qj\fi360\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab end\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Save the file as }{\f6\fs18 MYPROG.ASM}{\fs20 , the same name that appeared in the append directive at the end of the Pascal program.\par Now for the fun part.  Select the MYPROG.PAS window, and then use the Compile to Disk}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Compile to Disk command}}}{\fs20  command, as if the program is written entirely in Pascal.  It doesn't matter if the assembly language source file is open on the desktop or not.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\outl\f20\fs20 \u-3981\'73}{\b\fs20 \tab Important}{\fs20 \tab Be sure to use the Compile to Disk command, not the Compile to Memory command or one of the debug commands.  You must compile to disk any time more than one source file is needed to create a program.\~\~}{\outl\f20\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par What happens is this:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab ORCA looks at the file }{\f6\fs18 MYPROG.PAS}{\fs20 .  Since it is a Pascal file, the Pascal compiler is called to compile the program.\par \par 2.\tab When the compiler gets to the append directive, it looks at the file.  Since it is not a Pascal program, control is returned to the desktop development environment.\par \par 3.\tab The development environment sees that there are more source files to process.  The file is an assembly language file, so the assembler is called.  The assembler assembles the subroutine.\par \par 4.\tab The linker is called.  It links the Pascal and assembly language parts into one program and writes an executable file called }{\f6\fs18 MYPROG}{\fs20 .\par \par 5.\tab The program is executed.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Returning Function Values From Assembly Language Subroutines}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Returning Function Values From Assembly Language Subroutines\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\b\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: returning function values}}}{\fs20 Function values are returned in the registers.  This means that within your assembly language subroutine you would load the registers with the values that you want to return to your Pascal program.  Boolean, character, and integer values are returned in the accumulator as two-byte quantities.  Long integers and pointers are returned in the X and A registers, with the most significant word in X and the least significant word in A.  Real numbers are returned as pointers to floating-point values which have been stored in SANE's extended format.  This format is described in }{\fs20\ul Apple Numerics Manual}{\fs20 .  As with other types of pointers, the most significant word should be placed in X and the least significant word should be stored in A.\par Please note that characters and boolean values only require one byte of storage, but are returned in a two-byte register.  Be sure to zero the most significant byte of the value that you return.\par For a complete discussion of the internal formats of numbers, see Chapter 12.  Basically, though, they correspond to what you are used to in assembly language.\par Our next example program illustrates how to implement an assembly language function from Pascal.  The Pascal program stays in a tight loop, repeatedly calling an assembly language subroutine, named KEYPRESS to see if a key has been pressed.  Once a key has been pressed, it calls another assembly language subroutine, named CLEAR, to clear the strobe.\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program Wait;\par \par procedure Clear; extern;\par \par function Keypress: boolean; extern;\par \par begin\par while not Keypress do \{nothing\};\par Clear;\par end.\par \par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 append directive}{\v\fs20 \: examples}{\v\f6\fs18 }}}{\f6\fs18 \{$append 'myprog.asm'\}\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Once this file is entered, check to be sure its language stamp is Pascal, and save it as MYPROG.PAS.  Next, type in the following assembly language file, make sure it is stamped as ASM65816, and save it as MYPROG.ASM.\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 ;\par ;  Return the status of the keyboard strobe\par ;\par Keypress\tab start\par \tab sep\tab #$20\par \tab lda\tab >$C000\tab get keyboard key\par \tab asl\tab A\tab roll high bit to A\par \tab rep\tab #$20\par \tab lda\tab #0\par \tab rol\tab A\par \tab rtl\par }\pard \fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab end\par \par }\pard \fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 ;\par ;  Clear the keyboard strobe\par ;\par Clear\tab start\par \tab sep\tab #$20\par \tab sta\tab >$C010\par \tab rep\tab #$20\par \tab rtl\par }\pard \fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab end\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Passing Parameters to Assembly Language Subroutines}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Passing Parameters to Assembly Language Subroutines\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk3}To better understand the interaction between Pascal and assembly language in the ORCA environment, we will look at how parameters are passed from a Pascal program to an assembly language subroutine.  ORCA/Pascal places the parameters which appear in a subroutine call on the stack in the order that they appear in the parameter list.  It then issues a JSL to your subroutine.\par The value that is on the stack depends partly on the type of the value being passed and partly on the way the procedure or function header is declared.  Value parameters, including integers, booleans, sets and characters all appear on the stack as actual values, using the same format that is used to store them in main memory.  Real, double, extended and comp values are always converted to extended before being passed, so they always appear on the stack as ten-byte values.  Subranges of these values or enumerations also appear as actual values.  Any other parameter is passed as an address that points to the first byte of the value.  This includes structured value parameters, like arrays or records, as well as var parameters.  When a procedure or function is passed as a parameter, its address is placed on top of the stack.\par Notice that a structured type, like an array, is passed as an address even if the procedure or function header says it is a value parameter.  While there is nothing to stop you from changing the values in the structured type, it is confusing to do so.  If you will be changing the values of something passed as a parameter, declare the parameter as a var parameter in the Pascal program.\par Consider the Pascal program fragment below:\par }\pard \qj\fi360\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\f6\fs18 ...\par \par procedure DoSomething (i: integer; ch: char; var z: real); extern;\par \par ...\par \par i := 3;\par ch := 'a';\par z := 5.6;\par DoSomething (i, ch, z);\par \par }\pard \qj\fi360\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\f6\fs18 ...\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When DoSomething is called, the stack will look like this:\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw500\pich354\picwgoal10000\pichgoal7080\macpict\bliptag-235966565\blipupi72{\*\blipuid f1ef6f9b075faf09dfedeb4533c208c2}070effffffff016101f31101a0008201000affffffff016101f3200001006c00d9006c200001001b00d9001b220040001b510022000a001b5100a10096000c01000000020000000000000001000a001100010024001403364f0d000c2e0004000001002b021d03203131a00097a10096000c01000000020000000000000001000a002a0000003a001c280036000103203130a00097a10096000c01000000020000000000000001000a00480009005b001a2b091e0139a0009701000affffffff016101f3220076001b51002200e2001b5100220025001b09002200250063090022005b001b090022005b00630900220091006309002200ac006309002200fd001b09002200c7001b09002200ac001b09002200910024f700a10096000c01000000020000000000000001000a0012003f0025005028001e00400130a00097a10096000c01000000020000000000000001000a002d003f004000502a1b0133a00097a10096000c01000000020000000000000001000a0048003f005b00502a1b0130a00097a10096000c01000000020000000000000001000a0063003b0076004c28006f003c03276127a00097a10096000c01000000020000000000000001000a006300090076001a28006f000a0138a00097a10096000c01000000020000000000000001000a0048007e006801e3280054007f3a546865207365636f6e6420706172616d657465722069732061206368617261637465722e20204974732076616c756520697320706173736564202a10386f6e2074686520737461636b20616e6420616c736f2072657175697265732074776f206279746573206f6620737461636b2073706163652ea00097a10096000c01000000020000000000000001000a007e00090091001a28008a000a0137a00097a10096000c01000000020000000000000001000a0099000900ac001a2a1b0136a0009701000affffffff016101f32000b5001b0160001b2000b5006c0160006ca10096000c01000000020000000000000001000a00b4000900c7001a2a1b0135a00097a10096000c01000000020000000000000001000a00cf000900e2001a2a1b0134a0009701000affffffff016101f3220133001b510022014e001b5100a10096000c01000000020000000000000001000a00ea000900fd001a2a1b0133a00097a10096000c01000000020000000000000001000a010500090118001a2a1b0132a00097a10096000c01000000020000000000000001000a012000090133001a2a1b0131a00097a10096000c01000000020000000000000001000a013b0009014e001a2a1b0130a0009701000affffffff016101f322011d001b09002200fd006309002200c700630900a10096000c01000000020000000000000001000a007e007e00ae01e228008a007f3554686520746869726420706172616d6574657220697320612063616c6c206279207265666572656e6365206f662061207265616c0d2a10316e756d6265722e202048657265206120706f696e74657220746f20746865206e756d626572206973207061737365642e0d2a102b506f696e74657273207265717569726520666f7572206279746573206f6620737461636b2073706163652ea00097a10096000c01000000020000000000000001000a007d0034008d0062280089003507706f696e746572a00097a10096000c01000000020000000000000001000a009a003c00ad004d2b081d02746fa00097a10096000c01000000020000000000000001000a00b1003f00c400502b0317017aa00097a10096000c01000000020000000000000001000a00ea003500fa00682800f600360672657475726ea00097a10096000c01000000020000000000000001000a010800320118006428011400330761646472657373a0009701000affffffff016101f322011d00630900a10096000c01000000020000000000000001000a0012007e003201f228001e007f3b54686520666972737420706172616d6574657220697320616e20696e74656765722e20204974732076616c756520697320706173736564206f6e0d2a103074686520737461636b20616e642072657175697265732074776f206279746573206f6620737461636b2073706163652ea00097a10096000c01000000020000000000000001000a00ea0080011a01e42b02c83a46696e616c6c792c207765206172652063616c6c656420776974682061204a534c2c20736f207468652072657475726e2076616c75652069730d2a103661742074686520746f70206f662074686520737461636b20616e642075736573207468726565206279746573206f6620737461636b0d2a100673706163652ea0009701000affffffff016101f371001e014200810148008d014500810142008d0145008d0148008d01450081220145008d0c00a10096000c01000000020000000000000001000a013d00a7014d01322b27330d537461636b20706f696e746572a00097a00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\:direct page}}}{\fs20 In order to access the passed parameters in our assembly language subroutine, we first need to set up a local direct page, using the stack.  }{\i\fs20 Be very careful to save and restore the direct page register!  Upon entry to the subroutine, we do not know where the direct page register points \endash  failure to restore it could lead to disastrous results!}{\fs20 \par One of the simplest ways to set the direct page register equal to the stack pointer is to transfer the stack register contents to the accumulator, save the current direct page register by pushing it onto the stack, and then set the new direct page register by transferring the contents of the accumulator to the direct page register:\par \par }\pard \qj\li360\keepn\widctlpar\tx1440\adjustright {\f6\fs18 \tab tsc\par \tab phd\par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f6\fs18 \tab tcd\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Before leaving the subroutine, we can restore the old value of the direct page register by pulling it from the stack:\par \par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f6\fs18 \tab pld\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par We are now in a position to access the passed parameters as direct page locations.  Referring to the stack diagram given above, we can code a series of equates, setting the positions in the stack to local labels:\par \par }\pard \qj\li360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 i\tab equ\tab 10\par ch\tab equ\tab 8\par }\pard \qj\li360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 z\tab equ\tab 4\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\fs20 After setting up a direct page from the stack, }{\f6\fs18 i}{\fs20  and }{\f6\fs18 ch}{\fs20  can now be accessed as simple direct page values, as in \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab lda\tab i\par }\pard \qj\li360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab lda\tab ch\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 while }{\f6\fs18 z}{\fs20 , since it is a pointer, requires long indirect addressing:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab lda\tab [z]\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\fs20 Since we know the location of the return address (it is at direct page location 1 in our example), we can pop the parameters from the stack by moving the return address to the last three bytes of the parameter area and then removing bytes from the stack.  Putting this all together, the Pascal program below shows how to implement an assembly language function.  The program does little more than define an integer and then call a function to reverse the bits in the integer.  If you are not sure how the assembly language program works, make yourself a stack diagram.  If this still seems like magic, do not lose heart.  The next section covers two assembly-language macros provided with ORCA/Pascal to alleviate the burden of manipulating the stack frame from assembly language.\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \{ Demonstrate calling assembly language functions from Pascal. \}\par \par program FunctionIt (output);\par \par function reverse (a: integer): integer; extern;\par \tab \par begin\par writeln (6, reverse(6));\par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 end.\par \par \{$append 'reverse.asm'\}\par \par }\pard \qj\fi360\keepn\widctlpar\tx0\tx1440\tx2340\tx3150\tx4320\adjustright {\f6\fs18 ;\par ;  Reverse the bits in an integer\par ;\par }{\pard\plain \qj\fi360\keepn\widctlpar\tx0\tx1440\tx2340\tx3150\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: direct page}}}{\f6\fs18 Reverse\tab start\par parm\tab equ\tab 4\tab passed parameter\par ret\tab equ\tab 1\tab return address\par \par \tab tsc\tab \tab record current stack pointer\par \tab phd\tab \tab save old DP\par \tab tcd\tab \tab set new DP to stack pointer\par \tab \par \tab ldx\tab #16\tab place result in A\par lb1\tab asl\tab parm\par \tab ror\tab A\par \tab dex\par \tab bne\tab lb1\par \tab tax\tab \tab save result in X\par \tab lda\tab ret+1\tab set up stack for return from\par \tab sta\tab parm\tab  subroutine\par \tab lda\tab ret-1\par \tab sta\tab ret+1\par \tab pld\tab \tab restore old DP\par \tab pla\tab \tab set stack ptr for return\par \tab txa\tab \tab put the function result in A\par \tab rtl\par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab end\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Macro Solution}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Macro Solution\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\pard\plain \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: direct page}}}{\fs20 For most purposes, dealing directly with the stack to examine and remove parameters, return function values, and so on, can be tedious and error prone.  To make things easier, there are two macros on the distribution disk that help you in passing parameters, returning function values, and setting up direct page work space.  The macros are called SUBROUTINE and RETURN, and are located in a file called MACROS on the SAMPLES disk.\par SUBROUTINE is designed to be used right after the START directive of an assembly language subroutine.  It has two operands:  the first is a parameter list, and the second is the number of bytes of direct page work space you want for your own use.  If your assembly language subroutine is expecting more than one parameter, then you need to enclose the parameter list in parentheses. Each of the parameters starts with a number indicating how long the parameter is in bytes, and is followed by a colon and the name of the parameter.  The parameters are specified in the same order in which they are given in the call statement of the Pascal procedure or function.  The work space parameter is a number, specifying the number of bytes of work space you need.  The work space starts at direct page location zero.\par For example, let's assume that you have defined an assembly language procedure named Sample, with pass parameters as indicated below.\par \par }{\f6\fs18 procedure Sample (var i: integer; r: real; b: boolean); extern;\par }{\fs20 \par We will also assume that the assembly language subroutine needs four bytes of direct page work space for a pointer, which we will name }{\f6\fs18 PTR}{\fs20 .  Then the following equate and macro call would set things up for the assembly-language procedure:\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 Sample\tab start\par ptr\tab equ\tab 0\tab work pointer\par \par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab subroutine (4:i,4:r,2:b),4\par }{\fs20 \par Notice that since the integer }{\f6\fs18 i}{\fs20  is passed as a var parameter, the compiler passes a pointer to the integer, rather than the integer itself.  Pointers are four bytes long.  The parameter }{\f6\fs18 r}{\fs20  is described to the SUBROUTINE macro as being four bytes long.  When we are returning real values from a function, we pass a pointer to a ten-byte SANE extended format number.  When we are passing a real, double, extended or comp number as a value parameter, however, the value is first converted to an extended number, and the ten-byte extended number is placed on the stack.  Finally, boolean values require two bytes (unless they are in a packed array).\par The RETURN macro has a similar protocol.  If you are writing a procedure, don't code anything in the operand field.  If you will be returning a value, code the number of bytes being returned (this should be two for boolean, integer and character values, and four for longint and pointers), followed by a colon, and the name of the area where the value is stored.  The value must be in a direct page area or in a variable that can be accessed with absolute addressing.  For example, to return a pointer called PTR, code\par \par }{\f6\fs18 \tab return 4:ptr{\*\bkmkend bk3}}{\pard\plain \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: passing parameters}{\rxe bk3}}}{\f6\fs18 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Accessing Pascal Variables from Assembly Language}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Accessing Pascal Variables from Assembly Language\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi540\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\pard\plain \qj\fi540\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: accessing global variables}}}{\fs20 All variables defined at the program level are available from assembly language.  If you are using the small memory model, they are all accessed using absolute addressing; in the large memory model, all variables should be accessed using absolute long addressing.  Variables defined in the interface part of a unit are accessed the same way as variables in a program.  Variables defined in the implementation part of a unit are also accessed the same way, but can only be used from assembly language programs appended directly onto the end of the unit.  For details on how the variables are stored in memory, see Chapter 12.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 external variables}}}{\fs20 It is also possible to define variables in assembly language that can be accessed from Pascal.  To do that, define the variable as external in the Pascal program, using the extern directive in the variable declaration, like this:\par \par }{\f6\fs18 var\par    test: extern integer;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Then define the variable in assembly language.  The assembly language variable must be defined globally; that is, it must be the name of a code segment, or it must be declared as global via the entry directive.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Calling Pascal Procedures and Functions from Assembly Language}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Calling Pascal Procedures and Functions from Assembly Language\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\pard\plain \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: calling Pascal procedures and functions}}}{\fs20 Calling a procedure or function from assembly language is extremely straight forward.  You simply push any required parameters onto the stack, and issue a JSL to the procedure or function you want to call.  If you have called a function, two-byte values are returned to you in the accumulator; four-byte values are returned with the least significant word in the accumulator and the most significant word in the X register; and real, double, comp and extended values are returned as pointers to ten-byte SANE extended format numbers.  Real values that are passed as parameters should always be pushed as ten byte extended values.\par For example, to call a Pascal function that takes a pointer as input and returns an integer result, you could use the PH4 macro (supplied with ORCA/M) to push the pointer onto the stack, then call the function as follows:\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab ph4\tab #parm\tab push the address of the parameter\par \tab jsl\tab pasfunc\tab call the function\par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab sta\tab result\tab save the integer result\par {\*\bkmkend bk4}}{\pard\plain \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}{\rxe bk4}}}{\f6\fs18 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 6:  Using the Shell\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 6 \endash  Using the Shell\par }\pard \keepn\widctlpar\adjustright {\*\bkmkstart bk5}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 6 \endash  Using the Shell\tcl1}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Another Look at the Shell Window}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Another Look at the Shell Window\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkstart bk6}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 The desktop development environment we have dealt with so far in this manual is very easy to use.  You have probably either used or heard of some of the text based programming environments like UNIX, MS-DOS, or even the text based version of ORCA (which is included in this package).  Ease of use is, of course, the biggest advantage of the desktop development environment over the text environment.\par On the other hand, the text environment has several advantages over the desktop environment, too.  The text environment takes less time to boot, and requires less memory.  It is easy to make coding errors in Pascal that will crash the system; if you find this is true in your own programs, the shorter boot time could be significant.  The shell also provides a very powerful programming tool.  The shell gives you dozens of built-in commands, and even lets you add your own.  You get more control over the process of compiling and linking a program with the shell, and you can even write programs, called exec files}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 exec files}}}{\fs20 , that execute shell commands.\par As it turns out, you aren't forced to choose between the desktop programming environment and the shell.  You can actually use all of the features of the shell right from the desktop by simply clicking on the shell window, and typing the shell commands!\par If the programs you write are generally in a single source file, you don't build libraries}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\fs20  often, and you are not mixing Pascal with assembly language}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\fs20 , and you are not using Apple's Rez compiler, it may not be worth your effort to learn to use the shell and the shell window.  If, however, your programs fall into any of these categories, or if you would like to use the shell's impressive abilities to manage files, it would be time well spent to learn about the shell.  This chapter introduces the shell, as used from the shell window in the desktop development environment.  All of the topics covered, however, apply equally well to using the shell in the text environment.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Getting Into Text}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Getting Into Text\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 While you can use the shell commands from a window on the desktop, you may want to make use of the text environment for any number of reasons.  There are basically two ways to get into the text environment.  The first is to set up a separate, text-based copy of ORCA/Pascal, something you can do with an installer script; see Appendix C for details if you are interested in doing this.\par The other thing you can do is to set up ORCA/Pascal so you can switch between the text and desktop environment.  The only change you have to make to let you switch between the two environments is to remove one line from the LOGIN file; you can find this file in the Shell folder of the ORCA/Pascal Program Disk and load it with the desktop editor.  At the end of the file you will find two lines:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 prizm\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 quit\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 The LOGIN file is a script file that is executed when you start up the ORCA system.  The line "prizm" is a shell command that actually runs the desktop development system you have used up to this point.  When you quit from PRIZM using the Quit command, you don't go right back to the Finder; instead, the shell executes the next line of the LOGIN file.  In the LOGIN file that we ship with ORCA/Pascal, the next line tells the shell to quit back to the Finder.  If you remove the last line, quitting from PRIZM will put you into the text shell.  From there, typing quit will return you to the Finder, while typing prizm will put you back into the desktop programming environment.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 After changing the LOGIN file, you will have to reboot before the shell realizes the change has been made.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 How Shell Commands Work}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 How Shell Commands Work\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The shell is really an interpreter, just like AppleSoft BASIC.  Like AppleSoft, the shell has variables, loops, and an if statement.  You can even pass variables to programs written using the shell.  Unlike AppleSoft, the shell's commands are not intended for general programming.  Instead, the shell has commands like catalog, which produces a detailed list of the files on a disk.  The shell can manipulate files with copy (copies files or disks), move (moves files), delete (deletes files), and create (creates directories).  You can see all or part of a file using type.  You can also compile and link programs with a variety of commands.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell\: commands}}}{\fs20 You can execute shell commands from any window on the desktop.  If the window you select is a shell window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20  (that is, if the language shown in the Languages menu is Shell), you execute a command by typing the command and pressing }{\outl\fs18 return}{\fs20 .  In any other window, you use }{\outl\fs18 enter}{\fs20 .\par You can also execute groups of shell commands.  To execute more than one shell command at a time, simply select the block of text containing the shell commands, then press }{\outl\fs18 return }{\fs20 if you are in a shell window, or }{\outl\fs18 enter}{\fs20  if you are in any other kind of window.  The commands will be executed, one after the other, until all commands have executed or an error occurs.\par Many shell commands write output to the screen.  The "screen" is a somewhat vague term.  For a variety of reasons, we usually say the output is written to "standard out}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\fs20 ."  In the text environment, standard out is the text screen.  When you are using the shell from the desktop environment, standard out is whatever window the shell command is issued from.  Later in this chapter, you will learn how to change standard out, so that the output of a program can be sent to a disk file or printer.\par Some shell commands are interactive, requiring input from the keyboard.  When this happens, a cursor will appear in the window.  The cursor is an inverse space.  You can type in the response, and then press the }{\outl\fs18 return }{\fs20 key.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 File Names}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 File Names\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 folders}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 folders\:see also directories}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories\:see also folders}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names\:see also path names}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names\:see also file names}{\txe }}}{\fs20 When you use the desktop, you open and create files using dialogs that show you the files in a particular folder.  When you are using the shell, you must type the names of files instead of using these dialogs.  In all cases, the name of the file itself is the same in the shell and from the dialogs.  Under the ProDOS FST, which is the one you are probably using, file names are limited to fifteen characters.  Each name must start with an alphabetic character (one of the letters 'A' through 'Z'), and can contain alphabetic characters, numeric digits, or the period character in the remaining characters.  You can use either uppercase or lowercase letters interchangeably.\par To find a file, you need more than just the file name.  Just as with the dialogs, you need to know what disk the file is on, and what folder it is in.  (Folders are called directories in the text environment.)  The names of disks and directories follow the same conventions as file names.  The colon (or slash) character is used before the name of a disk, and between the names of disks, directories and files to separate the names from one another.  Spaces are not allowed.  For example, to specify the file MYFILE, located on a disk called MYDISK and in a directory called MYFOLDER, you would type\par \par }{\b\f6\fs18 :mydisk:myfolder:myfile}{\fs20 \par \par It would get tiring in a hurry if you were forced to specify the name of the disk, any directories, and the file every time you wanted to refer to a disk file.  Fortunately, there is a shortcut.  The shell remembers the location of the directory you are currently using.  If you want a file from the current directory, you only have to type the name of the file to specify the file.  For example, if the current directory is :mydisk:myfolder, you only have to type }{\b\f6\fs18 myfile}{\fs20  to get at the same file we referenced a moment ago.  If the current folder is :mydisk, you would type }{\b\f6\fs18 myfolder:myfile}{\fs20 .  When you type the entire path for the file, as in :mydisk:myfolder:myfile, it is called the file's path name, or sometimes its full path name.  When you use the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 current directory to avoid typing the full path name, as in }{\f6\fs18 myfolder:myfile}{\fs20 , it is called a partial path name or, if no directories need to be specified at all, the file name.\par You can set the current directory at any time using the prefix command.  Type the name of the directory you want to become the current directory right after the name of the command.  For example,\par \par }{\b\f6\fs18 prefix :mydisk:myfolder}{\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 sets the current prefix.  Now that we are in the same directory as the file myfile (from our previous example), we can access the file by simply typing }{\b\f6\fs18 myfile}{\fs20 .  The same concept applies to directory names.  Instead of using a single prefix command to set the default prefix, we could first set the prefix to the disk }{\f6\fs18 :mydisk}{\fs20 , and then change the default prefix to the directory myfolder on that disk with the commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 prefix :mydisk}{\fs20 \par }{\b\f6\fs18 prefix myfolder}{\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 In this case, the first prefix command changed the prefix to the disk }{\f6\fs18 mydisk}{\fs20  \endash  the leading colon tells the shell that the name is the name of a disk.  The second prefix command changes the prefix to the current prefix plus the folder }{\f6\fs18 myfolder}{\fs20 .  The shell knows that the second command is changing the default prefix to a directory in the current default prefix because the name given does not start with a colon.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The current prefix is shared between the shell and the desktop.  You may have noticed that when you use any of the file dialogs from the desktop, they always come up showing the folder where the last file command was executed.  The desktop uses the current prefix to do this.  If you use one of the file dialogs from the desktop, you can change the current prefix, and changing the current prefix from the shell will change the folder that is shown the next time you use a file dialog.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Directory Walking}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Directory Walking\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 Sometimes it is useful to go back a directory.  The symbol .. (two periods) means go back (or up) one directory.  Suppose that you have the directory structure shown below.\par \par }\pard \qc\li450\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex64\picscaley62\piccropl0\piccropr0\piccropt0\piccropb0\picw244\pich117\picwgoal4880\pichgoal2340\macpict\bliptag-1587465063\blipupi72{\*\blipuid a1613499b37e637377f33d9b18a457fc}018000070007007c00fb1101a00082a100960006050000000274a1009a0008fffd0000001d0000a0009801000a00070007007c00fb0300150d000a2b6e13084f55525354554646a00099a00097a100960006050000000274a1009a0008fffd0000001b0000a00098280052004a074d5950524f4753a00099a00097a100960006050000000274a1009a0008fffd000000220000a00098295a09594f555250524f4753a00099a00097220019007fee2d220019007f362da100960006050000000274a1009a0008fffd000000130000a00098280076000b0550524f4731a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829360550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829900550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009828007600a40550524f4731a00099a000972200560067c8152200560066f21422005500c5f11522005600c51914a00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Assume that the current prefix is /ourstuff/myprogs.  If you want to access prog1 in the yourprogs directory, you can use the partial path\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 ..:yourprogs:prog1\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 to get to it.  The partial path name given tells the shell to move up one directory level, from :ourstuff:myprogs to :ourstuff, and then move down the directory tree to }{\f6\fs18 yourprogs:prog1}{\fs20 .\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Device Names}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Device Names\tcl3}}}{\b \par }\pard \keepn\widctlpar\tx450\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\fs20 GS/OS assigns a device name to each I/O device currently on line.  These device names can be used as part of the path name.  Let's check to see what assignments have been made.  Enter the command:\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 show units\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command will display a table showing the device names associated with the devices on line.  For an example, suppose you have a hard disk, a floppy disk, and a RAM disk installed in your computer.  When you issue the show units command, you will see something like \par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 Units Currently On Line:\par \par     Number  Device              Name\par \par     .D1     .APPLESCSI.HD01.00  :HARD.DISK\par     .D4     .CONSOLE            <Character Device>\par     .D6     .NULL               <Character Device>\par }\pard \li360\widctlpar\adjustright {\f6\fs18     .D7     .PRINTER            <Character Device>\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx450\tx720\adjustright {\fs20 You can substitute a device name or a device number anywhere you would have used a volume name.  Thus,\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 catalog .d1}{\f6\fs18 \par }{\fs20 \par }\pard \widctlpar\adjustright {\fs20 will have the same effect as\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 catalog :hard.disk\par }{\fs20 \par Incidentally, the catalog command is a good one to know about.  The catalog command lists all of the files in a directory, along with a great deal of information about each file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Standard Prefixes}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Standard Prefixes\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\fs20 The shell provides prefixes which can be substituted for path names.  We've already looked at one of these, the default prefix.  There are a total of 31 of these prefixes.  You can obtain a listing of the standard prefixes for your system by typing the command\par \par }{\b\f6\fs18 show prefix\par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 ORCA will respond by printing a list similar to the one below.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 System Prefix:\par \par }\pard \li360\keepn\widctlpar\tx1980\adjustright {\f6\fs18 Number\tab Name\par \par *\tab :ORCA.PASCAL:\par }\pard \li360\widctlpar\tx1980\adjustright {\f6\fs18 @\tab :ORCA.PASCAL:\par 8\tab :ORCA.PASCAL:\par 9\tab :ORCA.PASCAL:\par 10\tab .CONSOLE:\par 11\tab .CONSOLE:\par 12\tab .CONSOLE:\par 13\tab :ORCA.PASCAL:LIBRARIES:\par 14\tab :ORCA.PASCAL:\par 15\tab :ORCA.PASCAL:SYSTEM:\par 16\tab :ORCA.PASCAL:LANGUAGES:\par 17\tab :ORCA.PASCAL:UTILITIES:\par 18\tab :ORCA.PASCAL:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The left-hand column of the listing is the prefix number.  The right-hand column is a path name.  The purpose of the prefix numbers is to provide you with a typing short-cut when you use path names.  For example, suppose you have a program with the file name myprog located in }{\f6\fs18 :ORCA.PASCAL}{\fs20 .  You could use the path name\par \par }{\f6\fs18 18:myprog\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 and it would have the same effect as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 :orca.pascal:myprog\par }{\fs20 \par Notice that we have used the prefix command two ways.  If you supply a prefix number followed by a path name, the prefix command changes the prefix number you give.  If you type a prefix name with no prefix number, the prefix command sets the default prefix (prefix 8).\par While you can modify prefix seven to suit your needs, the other prefixes have special, predefined uses.  For example, if you kept your programs in a directory called }{\f6\fs18 MYSTUFF}{\fs20 , you could rename prefix 18 to correspond to }{\f6\fs18 :ORCA:MYSTUFF}{\fs20  using the command:\par \par }{\b\f6\fs18 prefix 18 :orca:mystuff:\par }{\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 Now, when you want to access the program myprog, instead of using the path name\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 :orca:mystuff:myprog\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 you can use the path name\par \par }\pard \qj\li360\widctlpar\adjustright {\b\f6\fs18 18:myprog\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par As we mentioned a moment ago, many of these prefixes have predefined, standard uses, such as defining the location of the languages prefix, or telling the linker where to look for libraries.  The predefined uses are:\par \par }\pard \qj\fi-720\li1080\widctlpar\adjustright {\fs20 *\tab The asterisk indicates the boot prefix.  The boot prefix is the name of the disk that GS/OS executed from.\par \par @\tab This prefix is a special prefix used by programs that need to access user-specific information in a networked environment.\par \par 0-7\tab These seven prefixes are obsolete.  They can only hold path names up to 64 characters.  They should not be set while using ORCA/Pascal.\par \par 8\tab This is the default (or current) prefix.  Whenever you supply a partial path name to the shell, or directly to GS/OS via a program that makes GS/OS calls, the partial path name is appended to the default prefix.\par \par 9\tab Prefix 9 is the program's prefix.  Whenever a program is executed, prefix 9 is set to the directory where the program was found.\par \par 10\tab Prefix 10 is the device or file from which standard input characters are read.\par \par 11\tab Prefix 11 is the device or file to which standard output characters are written.\par \par 12\tab Prefix 12 is the device or file to which error output characters are written.\par \par 13\tab }{\pard\plain \qj\fi-720\li1080\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\fi-720\li1080\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\pard\plain \qj\fi-720\li1080\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCAPascalDefs}}}{\fs20 Prefix 13 is the library prefix.  The ORCA linker searches the library prefix for libraries when unresolved references occur in a program.  The Pascal compiler looks in this folder for another folder called ORCAPascalDefs to resolve uses statements.\par \par 14\tab Prefix 14 is the work prefix.  This is the location used by various programs when an intermediate work file is created.  If a RAM disk is available, this prefix should point to it.\par \par 15\tab Prefix 15 is the shell prefix.  The command processor looks here for the LOGIN file and command table (SYSCMND) at boot time.  If you use the text based editor, it also looks here for the editor, which in turn looks for its macro file (SYSEMAC), tab file (SYSTABS) and, if present, editor command table (SYSECMD).  The desktop development system also uses the SYSTABS file, but does not make use of the SYSEMAC file or the SYSECMD file.\par \par 16\tab Prefix 16 is the languages prefix.  The shell looks here for the linker, assembler, and compilers.\par \par 17\tab Prefix 17 is the utilities prefix.  When a utility is executed, the command processor looks here for the utility.  Help files are contained in the subdirectory HELP.\par \par 18-31\tab These prefixes do not have a predefined use.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Using Wild Cards}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Using Wild Cards\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\fs20 One of the built-in features that works with almost every command in ORCA is wild cards in file names.  Wild cards let you select several files from a directory by specifying some of the letters in the file name, and a wild card which will match the other characters.  Two kinds of wild cards are recognized, the = character and the ? character.  Using the ? wild card character causes the system to confirm each file name before taking action, while the = wild card character simply takes action on all matching file names.\par To get a firm grasp on wild cards, we will use the enable and disable commands.  These commands turn the file privilege flags on and off, something that is very much like locking and unlocking files in BASIC, but with more flexibility. The privilege flags can be examined in the catalog command display.  The flags are represented by characters under the access attribute.  First, disable delete privileges for all files on the }{\f6\fs18 :ORCA.PASCAL}{\fs20  directory.  To do this, type\par \par }{\b\f6\fs18 disable d =\par }{\fs20 \par Cataloging }{\f6\fs18 :ORCA.PASCAL}{\fs20  should show that the D is missing from the access column of each directory entry.  This means that you can no longer delete the files. Now, enable the delete privilege for the ORCA.Sys16 file.  Since the ORCA.Sys16 file is the only one that starts with the character O, you can do this by typing\par \par }{\b\f6\fs18 enable d O=\par }{\fs20 \par The wild card matches all of the characters after O. \par What if you want to specify the last few characters instead of the first few?  The wild card works equally well that way, too.  To disable delete privileges for the ORCA.Sys16, you can specify the file as =Sys16.  It is even possible to use more than one wild card.  You can use =.= to specify all files that contain a period somewhere in the file name.  Or, you could try M=.=S to get all files that start with an M, end in an S, and contain a period in between.  As you can see, wild cards can be quite flexible and useful.\par To return the }{\f6\fs18 :ORCA.PASCAL}{\fs20  disk to its original state, use the command\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 ENABLE D ?\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 This time, something new happens.  The system stops and prints each file name on the screen, followed by a cursor.  It is waiting for a Y, N or Q. Y will enable the D flag, N will skip this file, and Q will stop, not searching the rest of the files.  Give it a try! \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 edit command}}}{\fs20 Four minor points about wild cards should be pointed out before you move on.  First, not all commands support wild cards every place that a file name is accepted.  The compile}{\scaps\fs20 , }{\fs20 link}{\scaps\fs20  }{\fs20 and run}{\scaps\fs20  }{\fs20 commands don't allow them at all, and rename and copy commands allow them only in the first file name. Secondly, wild cards are only allowed in the file name portion, and not in the subdirectory part of a full or partial path name.  For example, :=:STUFF is not a legal use of a wild card.  The next point is that not all commands respect the prompting of the ? wild card.  Catalog}{\scaps\fs20  }{\fs20 does not, and new commands added to the system by separate products may not.  Finally, some commands allow wild cards, but will only work on one file. }{\scaps\fs20  }{\fs20 The edit command}{\scaps\fs20  }{\fs20 is a good example.  You can use wild cards to specify the file to edit, but only the first file that matches the wild card file name is used.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Required and Optional Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Required and Optional Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are two kinds of parameters used in shell commands, required and optional.  If you leave out an optional parameter, the system takes some default action.  For example, if you use the catalog}{\scaps\fs20  }{\fs20 command without specifying a path name, the default prefix is cataloged.  An example of a required parameter is the file name in the edit command:  the system really needs to have a file name, since there is no system default.  For all required parameters, if you leave it out, the system will prompt for it.  This lets you explore commands, or use commands without needing to look them up, even if you cannot remember the exact order of all of the required parameters.\par At first glance, it may seem strange to have an edit command}{\pard\plain \qj\fi360\widctlpar\adjustright \scaps\v\f4\fs20\cgrid {\xe {\scaps\v\fs20 }{\v\fs20 edit command}}}{\fs20  in the shell.  Its original use was to start the text editor, back in the days when the desktop development environment did not exist.  You can still use it for that in the text environment, but there is also another use.  If you use edit from a shell window, the file is loaded into a new window.  If the file was already on the desktop, it is brought to the front.  This can have several uses, especially in script files.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Redirecting Input and Output}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Redirecting Input and Output\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 input redirection}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output redirection}}}{\fs20 The Apple\~II}{\scaps\fs20 gs }{\fs20 supports two character-output devices and one character-input device.  Input redirection lets you tell ORCA to take the characters from a file instead of the .CONSOLE device (which is, basically, the text screen and keyboard).  When you write a character, you have a choice of two devices:  standard output or standard error output.  Normally, both send the characters to the screen.  ORCA lets you redirect these devices separately to either a disk file or a printer.\par For example, when you specify a help command, the output is printed on the screen.  Using redirection, the output can be moved, or redirected, somewhere else.  There are two devices that come with ORCA/Pascal that you might want to use for redirected output, or you can redirect output to any file.  The first device is }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printer device}}}{\fs20 .PRINTER}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers}}}{\fs20 , a character device driver that comes with ORCA/Pascal that can be installed in your system folder using the Installer.  Once installed, your Pascal programs can redirect output to .PRINTER to print files, or even open .PRINTER as a file from within a Pascal program to print simple text streams to your printer.  The other driver is .NULL, which accepts input and does nothing; you can redirect output to .NULL if you want to execute a command, but don't want to see the output.\par If you have a printer connected and turned on, and you have installed the .PRINTER driver, you can try a simple redirection:\par \par }{\b\f6\fs18 help delete >.printer\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 If you do not have a printer connected, the system will hang, waiting for a response from the printer.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are five types of redirect commands available on the command line.\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \fi-554\li900\keepn\widctlpar\adjustright {\fs20 <\tab Redirect input.\par >\tab Redirect output.\par >&\tab Redirect error output.\par >>\tab Redirect output and append it to the contents of an existing file.\par }\pard \fi-554\li900\widctlpar\adjustright {\fs20 >>&\tab Append error output to an existing file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Pipelines}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Pipelines\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes}}}{\fs20 Pipelines let you "pipe" the output from one process into the input for another process.  The symbol for the pipeline is a vertical bar (|).  For example, you might have two programs.  The first program will determine the students' scores for the year.  The second program will use the end-of-year scores to compute class statistics.  You could use the command\par \par }{\b\f6\fs18 prog1|prog2\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 instead of the series of commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\li540\widctlpar\adjustright {\b\f6\fs18 prog1 >data\par }{\fs20 \par }{\b\f6\fs18 prog2 <data\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par As another example, assume you have a program called UPPER which reads characters from the keyboard, converts them to uppercase, and writes them to the screen.  Then\par \par }\pard \qj\fi360\li540\widctlpar\adjustright {\b\f6\fs18 catalog | upper\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would catalog your disk in uppercase.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Unlike pipelines on multitasking systems, pipelines on the Apple\~II}{\scaps\fs20 gs }{\fs20 execute sequentially.  Each program runs to completion, sending its output to a temporary file on the work prefix.  The next program uses that file as its input, sending its output (if it is piped) to another temporary file.  The files are called SYSPIPE0, SYSPIPE1, and so on.  They are not deleted after the commands execute, so you can edit the files when debugging programs.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Writing Your Own Utilities}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Writing Your Own Utilities\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 utilities}}}{\fs20 One of the powerful features of the shell is that you can add new commands.  To do this, you simply write a normal program, then follow a few simple steps to make the shell aware of it.  The program then becomes a utility.  There are a variety of things that you need to know about programs that are designed to run from the shell which can help you write standard types of utilities that end up looking like they were always a part of the system.  This section covers those facts, as well as stepping you through the installation of a simple utility.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\fs20 Any program launcher that is capable of launching an EXE file (one kind of executable file the shell can run) is required to do some things for you.  It sets up a text device for input and output, gets a user ID number for memory management calls, and if the program launcher is a shell, like ORCA or APW}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APW}}}{\fs20 , it can pass the command line to you.\par If you are initializing tools, you will notice that many of them ask you to reserve memory for them, usually in bank zero.  When you do this, you should always use the user ID number returned by the ORCA/Pascal UserID function.  This built-in function returns an integer, and requires no parameters.  This function works from all environments, regardless of which program launcher executed your program.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 It also works for S16 files (described later).  It is very important that you use this user ID number, since failure to do so can result in memory not being deleted properly when your program has finished executing.\par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell identifier}}}{\fs20 Many program launchers, including ORCA and APW, provide an eight-character shell identifier to tell you what shell you are running under.  For both ORCA and APW, the shell identifier is BYTEWRKS.  You can read the shell identifier using the predefined procedure ShellID, which accepts an eight-character string as a parameter, and places the shell identifier into the string.  If the program launcher does not provide a shell identifier, the string is set to eight spaces.  You can use this string to see what program launcher launched you.\par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line\: reading}}}{\fs20 The last piece of information passed to you by a shell is the one most commonly used by a text based application.  When you execute a program from ORCA, you type the program name, followed by some parameters.  This command line, with any input and output redirection removed, is passed to you.  You can read the information using the predefined procedure CommandLine}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CommandLine procedure}}}{\fs20 , which takes a 255-character string as the parameter.  The characters in the command line are placed in the string, with blanks at the end.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell\: errors}}}{\fs20 When you detect a run-time error in your program, you should report the error by returning a value from main, which is the error code to be returned to the shell.   The error code is used by the shell to determine what steps need to be taken, if any, because of the error.  For example, the shell might need to stop execution of an EXEC file.  If a system error occurred, return the error number reported by the toolbox.  If an internal error was detected by your program, then you should return the value -1.  You should always return a value from main when you are writing shell utilities, returning 0 if there was no error.\par You can find a small sample program that shows these ideas at work on your Samples disk; the path is :Samples:Text.Samples:CLine.pas.  It prints the user ID number, shell identifier and command line passed to it when it executes.  It then sends a zero to indicate that no error has occurred and returns.  Try running the program with a variety of things typed after the command name, especially input and output redirection.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Installing a New Utility}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Installing a New Utility\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 utilities}}}{\fs20 Once you have an executable file that runs under the ORCA shell, you may want to install it as a utility.  The advantages of doing so are that the program can be executed from any directory without typing a full path name, and the utility shows up in the command table.  Once it is in the command table, you can use right-arrow expansion to abbreviate the command (from the text environment only), and the help command}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 help command}}}{\fs20  will list it.\par Installing the program as a utility is really quite simple.  To do so:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Place the program (the executable image) in the utility prefix.  As shipped, this is the :ORCA.PASCAL:Utilities prefix, but you may have moved it to your hard disk, if you are using one.\par \par 2.\tab Add the program name to the command table.  The command table is in the SYSTEM folder.  It is called SYSCMND.  The command table is a text file, and can be changed with the editor.  Simply edit it, and add the name of your program to the list of commands you see.  Be sure the name of your command is the same as the file name you used for the executable file, and that the command name starts in column 1.  After at least one space, type a U, which indicates that the command is a utility.\par \par \tab Be sure to put the command in the correct location.  The order that commands appear in the command table determines how right-arrow expansion works from the text based shell.  The shell expands the first command that matches all letters typed.  In general, the commands should be listed alphabetically.\par \par \tab The new command will not be in the command table until you use the COMMANDS command to reread the command table, or reboot.\par \par 3.\tab If you would like to have on-line help for the command, add a text file to the Utilities:Help folder.  The name of the file must be the same as the name of the utility.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Learning More About the Shell}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Learning More About the Shell\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 While this chapter has introduced the basic concepts needed to deal with the shell, we have really only scratched the surface of what the shell can do for you.  After you get a little experience with shell commands and file names, you should browse through Chapter 8, which covers the shell in detail.  There you will find out many more things about the shell, like how to write shell programs, and how to control the process of compiling programs more closely.\par }\pard \widctlpar\adjustright {\*\bkmkend bk5}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}{\rxe bk5}}}{\*\bkmkend bk6}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}{\rxe bk6}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\b\fs36 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Environment Reference Manual\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 7:  Desktop Reference\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\headerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}\pard\plain \qj\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 7 \endash  Desktop Reference\par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 7 \endash  Desktop Reference\tcl1}}}{\v\fs20 \par }{\fs20 {\*\bkmkstart bk14}\par \par }\pard \widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Basic Operations}{\pard\plain \widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Basic Operations\tcl2}}}{\b\fs28 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The desktop development environment is a standard implementation of a desktop program, as recommended by Apple Computer.  All of the basic operations that you have come to expect on the Apple\~II}{\fs18 GS}{\fs20  and Macintosh computers are supported.  Refer to the introductory manuals that came with your computer for information about the standard desktop interface.\par }\pard \qj\widctlpar\tx3240\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Cursor}{\pard\plain \widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Cursor\tcl2}}}{\b\fs28 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Insertion Point}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Insertion Point\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The main purpose of the mouse is to position the cursor.  Use the mouse to move the cursor around on the screen, and notice how the cursor changes in different regions.  When it is within the confines of the text portion of the window (called the content region of the window), the cursor looks like a cross-hair.  This shape allows you to use the mouse to pinpoint the location of the cursor. The selected place is called the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  \endash  any typing you now do will appear before the insertion point.  Notice that the insertion point is marked with a flashing vertical bar.\par For example, if the line\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw123\pich24\picwgoal2460\pichgoal480\macpict\bliptag-1550471424\blipupi72{\*\blipuid a395af0063573a9dcd5e0f294ada7929}0159000000000018007b1101a00082a0008e01000a0000000002d002409800100000000000180080000000000018007b000000000018007b000102f10002f10002f10002f100100c04300000018000018800018180fe00100c04300000018000018800018180fe000d010630fc00040188000180fd000d010630fc00040188000180fd00110f0733e6300383f007ebe007e38633e000110f0733e6300383f007ebe007e38633e000110f07f63630018600018e30018187763000110f07f63630018600018e30018187763000110f067636b00183e0018ff0018186b7f000110f067636b00183e0018ff0018186b7f000110d0636377001803001be0001b18636ff00110d0636377001803001be0001b18636ff00110f0613e63003c7e000ebf000e3c633f000110f0613e63003c7e000ebf000e3c633f00006f9000008fa0006f9000008fa0002f10002f10002f10002f100a0008fa00083ff}}{\f6\fs18 \tab \par }\pard \qj\widctlpar\adjustright {\fs20 \par is on the screen, you would first set the insertion point}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the position shown by moving the mouse until the cursor is positioned between the 't' and 'e,' and then click the mouse.  When you type a character, the text on the screen will be moved apart to make room for the new character, and the character that you typed will be placed in the space.  Typing an 'h' would change the line to be\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley47\piccropl0\piccropr0\piccropt0\piccropb0\picw128\pich23\picwgoal2560\pichgoal460\macpict\bliptag1673867555\blipupi72{\*\blipuid 63c531232f1185fa7ebd79f6ab0e8e25}015600000000001700801101a00082a0008e01000a0000000002d00240980010000000000017008000000000001700800000000000170080000102f10002f10002f10002f100100c08600000030000030c10000303fe00100c08600000030000030c10000303fe000d010c60fc0004030c100003fd000d010c60fc0004030c100003fd00110f0e67cc600707e00fcfd7c00fc70c67c0110f0e67cc600707e00fcfd7c00fc70c67c0110f0fec6c60030c00030c7c6003030eec60110f0fec6c60030c00030c7c6003030eec60110f0cec6d600307c0030c7fe003030d6fe0110f0cec6d600307c0030c7fe003030d6fe0110f0c6c6ee0030060036c7c0003630c6c00110f0c6c6ee0030060036c7c0003630c6c00110f0c27cc60078fc001cc77e001c78c67e0110f0c27cc60078fc001cc77e001c78c67e006f8000010fb0006f8000010fb0002f10002f10002f100a0008fa00083ff}}{\f6\fs18 \tab \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 Notice how the insertion point is now between the 'h' and 'e.'\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Over Strike Mode}{\pard\plain \qj\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Over Strike Mode\tcl3}}}{\b\fs28 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extras menu}}}{\fs20 What we have been discussing is how text is inserted into a file.  The editor is normally in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , but you can change this to over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 .  When you are using the over strike mode, new characters replace the character the cursor is on, rather than moving old text over to make room for new characters.  You can switch between the insert and over strike modes by using the Over Strike command in the Extras menu.  When you are in the over strike mode, the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  will change to a line that appears under the character that will be replaced.  Like the vertical bar, this line flashes.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Selecting Text}{\pard\plain \widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Selecting Text\tcl2}}}{\b\fs28 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Another important use of the mouse is to select text}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting text}}}{\fs20 .  There are a variety of reasons to select text, including:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 clear command}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 undo command}}}{\fs20 Selected text can be deleted using the }{\outl\fs18 delete}{\fs20  key}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 delete}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  or the Clear command.  (You can retrieve the last text that you deleted by issuing the Undo command, located in the Edit menu.)\par \bullet \tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 paste command}}}{\fs20 Selected text is replaced when you type a character from the keyboard, or when you paste text from the clipboard using the Paste command.\par \bullet \tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 print command}}}{\fs20 If any text is selected when you use the Print command, only the selected text is printed.  This lets you print part of a text window without the need to copy the part you want to print to a separate window.\par \bullet \tab If any text is selected when you use the }{\outl\fs18 enter}{\fs20  key}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 enter}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  from a text window, or the }{\outl\fs18 return}{\fs20  key from a shell window, the selected text is executed.  Without this ability, you would be limited to executing single-line shell}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Selection By Dragging}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selection By Dragging\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Your }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Owner's Manual}{\fs20  described text selection by the clicking and dragging method.  (That is, you click the mouse where you want to start selecting, and then drag the mouse until you have finished selecting.  If you move the mouse off of the text in any direction, the page will start to scroll.  This allows you to select more text than you can see in the window at any one time.)  ORCA/Desktop supports this method of text selection, and also provides some short-hand ways to choose text blocks.  A selection can be canceled with a single click of the mouse.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Selecting Lines}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selecting Lines\tcl3}}}{\b \par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting lines}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you are typing in a program, one of the most important shortcuts is selecting a line.  To select a line, start by moving the mouse to the left edge of the window.  When you have moved the mouse to the left of all of the text, but while it is still on the window, you will see the cursor change to an arrow.  Unlike the arrow that you see when you are selecting menu commands, this one points up and to the right.  This special arrow tells you that you are in the correct place to select a line.\par To actually select the line, move the mouse so it is to the left of the line you want to select, and click.  The entire line appears highlighted in inverse video.\par You can also select more than one line using this basic method.  To select more than one line, start as you did before, by moving the mouse to the left of the first line you want to select.  This time, though, hold the mouse button down and drag the mouse up or down.  As you drag the mouse, all of the lines between the original line and the line you are on will be selected.  As with dragging the mouse over characters, you let up on the mouse button to complete the selection.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Selecting the Entire Document}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selecting the Entire Document\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting a document}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 select all command}}}{\fs20 There are two ways to select all of the text in a file.  The first, and simplest, is to use the Select All command, located in the Edit menu.\par The second method is closely related to selecting lines.  As with line selections, you start by moving the cursor to the left of the text, but keeping it in the window.  The special right-arrow cursor lets you know you are in the correct place.  Now, hold down the command key (the one with the }{\outl\fs18 \u-3\'f0}{\fs20  on it) and click the mouse.  All of the text in the document is selected.  Note that it doesn't matter what line you started on.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Selecting Words}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selecting Words\tcl3}}}{\b \par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting words}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Word selection allows you to quickly isolate a single word.  To do this, move the cursor so that it is on the word you want to select, and click the mouse rapidly two times.  This is called double-clicking.  The word that the mouse was on is selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Extending a Selection}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Extending a Selection\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extending a selection}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto command}}}{\fs20 Extending a selection is a method that is generally used to select large pieces of text, although it can also be used to change the amount of text already selected.  The basic idea is fairly simple.  You place the cursor at one end of the text you want to select, or you use one of the existing selection methods to select some text.  Now move the mouse to the point in the text where the selection is to end.  (You can use scrolling or the Goto command, located in the Find menu.)  Hold down the shift key, and click the mouse or continue selecting text.  All of the text, from the original insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the new position, is selected.\par This method of selecting text is very useful when copying or deleting subroutines from a program.  While you can easily drag the selection region to select the subroutine, it can take a fair amount of time to scroll the screen on a large subroutine.  Instead, you can start by placing the cursor at the beginning of the subroutine, or perhaps by selecting the first line.  Now move to the end using whatever method is appropriate.  Holding down the shift key, select the last line in the subroutine.  All lines from the first to the last are also selected, and you can easily copy or cut the subroutine from the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Split Screen}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Split Screen\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx4500\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 split screen\bxe }}}{\fs20 How many times have you been typing in a program, and wanted to refer back to an earlier subroutine or data declaration?  Split screen is a feature designed to help you do that.  When you split the screen, you can look at two different parts of a file at the same time.\par Splitting the screen is very simple.  The screen splitting control is the small black box that appears just above the vertical scroll bar.  Move the cursor to this box, and drag it about halfway down the page.  When you release the mouse button, the screen will split.\cell }\pard \qr\widctlpar\intbl\adjustright {\fs18 \par }{{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw290\pich230\picwgoal5800\pichgoal4600\macpict\bliptag-1785404566\blipupi72{\*\blipuid 9594e36a7dcb5a56a0c1273e5602ecf9}14d10000000000e601221101a00082a0008e01000a0000000002d00240980026000000000054012800000000005401220000000000540122000102db0007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff0180001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e200050180000180000b0060e200050180000180000b0060e200050180180180000b0060e200050180180180000f046018cf9780e600050180660180000f046018cf9780e600050180660180000f046018c0d8c0e6000001fe810180000f046018c0d8c0e6000001fe810180000e036018cfd8e500050186006180000e036018cfd8e500050186006180000e03600d98d8e50005019f81f980000e03600d98d8e50005019f81f980000e0360070fd8e5000001fe810180000e0360070fd8e5000001fe810180000b0060e2000001fe810180000b0060e2000001fe81018000150060fd00000efd0002060006ee000001fe81018000150060fd00000efd0002060006ee000001fe81018000130060fd000006fb000006ee00050181ff818000130060fd000006fb000006ee00050181ff8180001c0c6000000fcf860f9786000e1f9ffe8f019780f300050180000180001c0c6000000fcf860f9786000e1f9ffe8f019780f300050180000180001c0d6000001818c618d8c0000618c618fed800c6f3000001feff0180001c0d6000001818c618d8c0000618c618fed800c6f3000001feff0180001b106000001818c618d806000618c61fd8dfd8f2000501e6666780001b106000001818c618d806000618c61fd8dfd8f2000501e6666780001c116000001818c618d800000618c6d80fd81806f3000001feff0180001c116000001818c618d800000618c6d80fd81806f3000001feff0180001c116000000fcf8f0f9800000f18c38fc0cfd806f3000501e0000780001c116000000fcf8f0f9800000f18c38fc0cfd806f3000501e000078000120060f400030f80000cf3000501e000078000120060f400030f80000cf3000501e000078000150060fc0000c6fd0002060006ef000501e000078000150060fc0000c6fd0002060006ef000501e000078000130060fc0000c0fb000006ef000501e000078000130060fc0000c0fb000006ef000501e0000780001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e0000780001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e0000780001d0e60000018c0d8c618d800000618c618fed800c6f4000501e0000780001d0e60000018c0d8c618d800000618c618fed800c6f4000501e0000780001c11600000180fd8c618cf86000618c61fd8dfd8f3000001feff0180001c11600000180fd8c618cf86000618c61fd8dfd8f3000001feff0180001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e6666780001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e666678000120060f300030f80000cf4000001fe99018000120060f300030f80000cf4000001fe990180000f0060f9000006eb000501e6666780000f0060f9000006eb000501e6666780000f0060f9000006eb000001fe990180000f0060f9000006eb000001fe99018000150a600000178600178f8fdf80ec000001feff018000150a600000178600178f8fdf80ec000001feff018000150a60000018c00018d8d80606ec00050180000180009800260054000000a801280054000000a801220054000000a801220001150a60000018c00018d8d80606ec00050180000180001409600000180600181fd806eb00050181ff8180001409600000180600181fd806eb00050181ff8180001505600000180000fe180106c6ec000001fe810180001505600000180000fe180106c6ec000001fe81018000150a600000180000180fcfc386ec000001fe81018000150a600000180000180fcfc386ec000001fe810180000f0060f800000cec000001fe810180000f0060f800000cec000001fe810180000b0060e20005019f81f980000b0060e20005019f81f980000b0060e200050186006180000b0060e200050186006180000b0060e2000001fe810180000b0060e2000001fe810180000b0060e200050180660180000b0060e200050180660180000b0060e200050180180180000b0060e200050180180180000b0060e200050180000180000b0060e200050180000180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff01800007007fdeff01800007007fdeff0180000b0060e2000001feff0180000b0060e2000001feff01800022176000000f80060f800e0600df80001f80060300000e000006f9000001feff01800022176000000f80060f800e0600df80001f80060300000e000006f9000001feff01800022176000001840061840060000d8c00018c00606000006000003f9000501800001800022176000001840061840060000d8c00018c00606000006000003f900050180000180002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa00050180180180002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa000501801801800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa000501806601800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa0005018066018000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000001fe81018000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000001fe81018000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa0005018600618000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa000501860061800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa0005019f81f9800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa0005019f81f980000f0060ea00000cfa000001fe810180000f0060ea00000cfa000001fe810180001a0060fd00000ef900000efe000306001fc0f7000001fe810180001a0060fd00000ef900000efe000306001fc0f7000001fe810180001a0060fd000006f9000006fe0003060000c0f7000001fe810180001a0060fd000006f9000006fe0003060000c0f7000001fe8101800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020086000001818c618d8c0fe00091818c618d8c006000306f7000501800001800020086000001818c618d8c0fe00091818c618d8c006000306f7000501800001800020156000001818c618d800060f801818c618d80006000180f7000001feff01800020156000001818c618d800060f801818c618d80006000180f7000001feff0180001f076000001818c618d8fd00041818c618d8fe000118c6f7000501e6666780001f076000001818c618d8fd00041818c618d8fe000118c6f7000501e6666780001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f7000001fe990180001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f7000001fe990180000f0060ed00000cf7000501e6666780000f0060ed00000cf7000501e6666780001a0060fe0002060618fd0005c00018000006f2000001fe990180001a0060fe0002060618fd0005c00018000006f2000001fe99018000160060fd00010618fd0002c00018ef000501e666678000160060fd00010618fd0002c00018ef000501e6666780001d1260000018ce1f9f8017800fcf801f8f8f8e1f80f4000001feff0180001d1260000018ce1f9f8017800fcf801f8f8f8e1f80f4000001feff0180001d1260000018c60618c018c018d8c018d8d8c618c0f4000501e0000780001d1260000018c60618c018c018d8c018d8d8c618c0f4000501e0000780001d126000001ac60618c0180018d8c018dfd8c618c0f4000501e0000780001d126000001ac60618c0180018d8c018dfd8c618c0f4000501e0000780001d126000001dc606d8c0180018d8c018d80fc618c0f4000501e0000780001d126000001dc606d8c0180018d8c018d80fc618c0f4000501e0000780001d1260000018cf0398c018000fcf801f8fc0cf18c0f4000501e0000780001d1260000018cf0398c018000fcf801f8fc0cf18c0f4000501e000078000100060f300010f80f2000501e000078000100060f300010f80f2000501e000078000200060fd00011806fd000306078fc0fe0005c60000021fc0f9000501e000078000200060fd00011806fd000306078fc0fe0005c60000021fc0f9000501e0000780001f0060fd0001180efd00030e0c18c0fe0004c000001ad8f8000001feff0180001f0060fd0001180efd00030e0c18c0fe0004c000001ad8f8000001feff018000200060fd00111f8600060f80061819c0178f8fce18cfcf9ef8000001fe9901800098002600a8000000e6012800a8000000e6012200a8000000e601220001200060fd00111f8600060f80061819c0178f8fce18cfcf9ef8000001fe99018000200060fd000118c6fd000c061f9adfd8c0d8c618d8070186f9000501e666678000200060fd000118c6fd000c061f9adfd8c0d8c618d8070186f9000501e666678000210060fd001218c600060f800618dcc0180fd8c618cf8f80c0f9000001fe99018000210060fd001218c600060f800618dcc0180fd8c618cf8f80c0f9000001fe99018000200060fd000118c6fd000c0618d8c01818d8c618c0dad8c6f9000501e666678000200060fd000118c6fd000c0618d8c01818d8c618c0dad8c6f9000501e666678000200060fd000118cffd000c0f0f9f80180fcfcf0f9f820f86f9000001fe99018000200060fd000118cffd000c0f0f9f80180fcfcf0f9f820f86f9000001fe990180000f0060eb00000cf9000001feff0180000f0060eb00000cf9000001feff018000210060fd0002180f80fe000306078fc0fe0005c60000021fc0f90005018000018000210060fd0002180f80fe000306078fc0fe0005c60000021fc0f90005018000018000200060fd00021818c0fe00030e0c18c6fe0004c000001ad8f800050181ff818000200060fd00021818c0fe00030e0c18c6fe0004c000001ad8f800050181ff818000200060fd00111f80c0060f80061819c6178f8fce18cfcf9ef8000001fe81018000200060fd00111f80c0060f80061819c6178f8fce18cfcf9ef8000001fe81018000210060fd000218c180fe000c061f9adf98c0d8c618d8070186f9000001fe81018000210060fd000218c180fe000c061f9adf98c0d8c618d8070186f9000001fe81018000210060fd001218c600060f800618dcc6180fd8c618cf8f80c0f9000001fe81018000210060fd001218c600060f800618dcc6180fd8c618cf8f80c0f9000001fe81018000200060fd000118d8fd000c0618d8c61818d8c618c0dad8c6f90005019f81f98000200060fd000118d8fd000c0618d8c61818d8c618c0dad8c6f90005019f81f98000210060fd000218dfc0fe000c0f0f9f80180fcfcf0f9f820f86f90005018600618000210060fd000218dfc0fe000c0f0f9f80180fcfcf0f9f820f86f900050186006180000f0060eb00000cf9000001fe810180000f0060eb00000cf9000001fe810180000b0060e200050180660180000b0060e200050180660180000b0060e200050180180180000b0060e200050180180180000b0060e200050180000180000b0060e2000501800001800007007fdeff01800007007fdeff01800014066000003ffffffdeb99089f000001800001800014066000003ffffffdeb99089f000001800001800014066007003e00000eeb6608670070019ff801800014066007003e00000eeb6608670070019ff80180001406601b003e00000deb99089f006c0198180180001406601b003e00000deb99089f006c01981801800014066063fe3e00000eeb6608673fe301981ff9800014066063fe3e00000eeb6608673fe301981ff9800014066180063e00000deb99089f3000c1981819800014066180063e00000deb99089f3000c1981819800014066600063e00000eeb6608673000319ff819800014066600063e00000eeb6608673000319ff819800014066180063e00000deb99089f3000c1830019800014066180063e00000deb99089f3000c1830019800014066063fe3e00000eeb6608673fe301830019800014066063fe3e00000eeb6608673fe30183001980001406601b003e00000deb99089f006c0183001980001406601b003e00000deb99089f006c01830019800014066007003e00000eeb66086700700183fff9800014066007003e00000eeb66086700700183fff9800014066000003e00000deb99089f000001800001800014066000003e00000deb99089f000001800001800014066000003ffffffeeb660867000001800001800014066000003ffffffeeb660867000001800001800007007fdeff01800007007fdeff01800002db00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can edit in either half of the window.  Simply use the cursor to position the insertion point, or scroll using either vertical scroll bar.  The active half of the screen will change automatically.  \par There is one limitation on split screens.  In order to show a complete scroll bar, you must have at least five lines of text in both the top and bottom half of the screen.  If you try to make either part of the screen smaller, the split will be moved to give the appropriate number of lines.  If the window isn't large enough to split it with five lines on both the top and bottom, the split screen control will vanish.  With this restriction in mind, you can split the screen between any two lines.\par Removing the split screen is just as easy as splitting it.  Simply drag the split screen control to the top of the window and release it.\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Entering Text}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Entering Text\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Whenever a text window is the front (active) window, and a dialog box is not active, any text you type from the keyboard will appear in the window.  In insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , the text always appears before the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 .  In over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , the character that is underlined is replaced.\par If you select some text, and then begin typing, the selected text is deleted, and the new characters appear where the selected text was located.\par If the insertion point is not on the screen when you start typing, the screen will scroll to show the insertion point, and then the characters are inserted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Special Keys}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Special Keys\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Return Key}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Return Key\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For any text window that is not a shell window, the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  breaks a line at the point where the }{\outl\fs18 return}{\fs20  key is pressed, moving all of the text from the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the end of the line to a new line.  If you are at the end of a line when you type the }{\outl\fs18 return }{\fs20 key, a new, blank line is created.  There are, however, many variations on this basic theme.  If you are in over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , the behavior of the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  changes.  Instead of breaking the line or creating a new line, the }{\outl\fs18 return }{\fs20 key functions simply as a cursor movement command \endash  the insertion point is moved to the start of the next line in the file.  Only if you are at the end of the file does the }{\outl\fs18 return }{\fs20 key create a new line.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 indenting}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extras menu}}}{\fs20 In block-structured languages like C}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\fs20  and Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20 , indenting is often used to show the structure of a program.  The major problem with indenting is moving the cursor to the correct spot in the line before starting to type in text.  The way the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  works can be changed to make this process easier.  Once changed, pressing }{\outl\fs18 return }{\fs20 causes the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to automatically space over, following the indentation of the line above the current line.  If the current line is blank, the cursor is moved to line up with the first line above the current line that is not blank.  This is called the Auto-Indent mode.  To activate auto-indent mode, select Auto Indent from the Extras menu.  Auto indent is turned off by selecting it a second time.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Delete Key}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete Key\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 clear command}}}{\fs20 If you have selected any text, the }{\outl\fs20 delete}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 delete}{\v\fs20  key}{\outl\v\fs20 \bxe }}}{\fs20  works exactly like the Clear command:  it removes the selected text from the file.  If no text is selected, the }{\outl\fs18 delete }{\fs20 key deletes the character to the left of the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 .  If the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  is at the start of a line, the remainder of the line is appended to the end of the line above.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Tab Key}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Tab Key\tcl3}}}{\b\caps \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you are in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , the }{\outl\fs18 tab}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 tab}{\v\fs20  key}{\outl\v\fs18 \bxe }}}{\fs20  inserts spaces until the insertion point reaches the next tab stop}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20 .  In over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , the }{\outl\fs18 tab }{\fs20 key simply moves the insertion point forward to the next tab stop.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Arrow Keys}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Arrow Keys\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The four arrow keys}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrow keys\bxe }}}{\fs20  can be used to move the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 .  Using the arrow keys will deselect any previously selected text without removing it from the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Screen Moves}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Screen Moves\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key while typing the up-arrow key will cause the selection point to move to the top of the window.  If the insertion point is already at the top of the window, the window will scroll up by one screen.\par Likewise, holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key while typing the down-arrow key will move the selection point to the bottom of the window.  Again, if you are already at the bottom of the window, the display scrolls down one screen full toward the end of the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Word Tabbing}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Word Tabbing\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can move to the start of the next word or previous word in the file using word tabbing}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 word tabbing\bxe }}}{\fs20 .  A word is defined as any sequence of characters other than spaces and end-of-line markers.  To move to the next word in the file, hold down the }{\outl\fs18 option}{\fs20  key and type the right-arrow key.  Using the left-arrow key instead of the right-arrow key will move to the beginning of the previous word.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Moving to the Start or End of a Line}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Moving to the Start or End of a Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can move to the start of a line by holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key and typing the left-arrow key.  This moves to the first column in the line, regardless of the current auto-indent mode.  To move to the end of the line, hold down the }{\outl\fs18 \u-3\'f0}{\fs20  key and type the right-arrow key.  This moves to the column immediately after the last non-blank character in the line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Moving Within the File}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Moving Within the File\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Typing one of the digit keys (}{\outl\fs18 1}{\fs20  to }{\outl\fs18 9}{\fs20 ) while holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key will move the display to one of nine evenly spaced intervals in the file.  }{\outl\fs18 \u-3\'f01}{\fs20  moves to the start of the file, while }{\outl\fs18 \u-3\'f09}{\fs20  moves to the end of the file.  The other keys each move to a location one-eighth of the way through the file from the previous key.\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Ruler}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Ruler\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ruler}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 show ruler command}}}{\fs20 You can see where the current tab stops are, and change them, by using the ruler.  To make the ruler visible, use the Show Ruler command in the Extras menu.  Select the same command a second time to make the ruler disappear.\par With the ruler visible, your edit window will look like the one shown on the right.\par The numbers, dots, and vertical bars across the top indicate the columns in the document.  Every ten columns, a number appears.  The twentieth column, for example, is marked with the number 2.  Halfway between each numbered column is a vertical bar.  The remaining columns are marked with a dot.\cell }\pard \qr\widctlpar\intbl\adjustright {\par }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw289\pich249\picwgoal5780\pichgoal4980\macpict\bliptag-787103515\blipupi72{\*\blipuid d115c0e52b0339d319ab2e09387432c7}15920000000000f901211101a00082a0008e01000a0000000002d00240980026000000000055012800000000005501210000000000550121000102db0007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff0180001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff018000080060df0002018000080060df0002018000140060f8000004f800000cf800001efd0002018000140060f8000004f800000cf800001efd0002018000200060fd000004fd000004fd000004fd000012fd000004fd000004fd0002018000200060fd000004fd000004fd000004fd000012fd000004fd000004fd0002018000200060fd000004fd000004fd000004fd000004fd000004fd00000cfd0002018000200060fd000004fd000004fd000004fd000004fd000004fd00000cfd0002018000210060fd0c0004fd0c0004fd0c0004fd0c0008fd0c0004fd0c01020cfe0002018000210060fd0c0004fd0c0004fd0c0004fd0c0008fd0c0004fd0c01020cfe0002018000210060fd0c0000fd0c0004fd0c0000fd0c001efd0c0000fd0c011c0cfe0002018000210060fd0c0000fd0c0004fd0c0000fd0c001efd0c0000fd0c011c0cfe0002018000140060f900000cfa00000cfa00000cf80002018000140060f900000cfa00000cfa00000cf80002018000140060f900001efa00001efa00001ef80002018000140060f900001efa00001efa00001ef80002018000140060f900003ffa00003ffa00003ff80002018000140060f900003ffa00003ffa00003ff80002018000080060df0002018000080060df000201800007007fdeff01800007007fdeff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000f046018cf9780e6000001feff0180000f046018cf9780e6000001feff0180000f046018c0d8c0e6000001feff0180000f046018c0d8c0e6000001feff0180000e036018cfd8e500050180000180000e036018cfd8e500050180000180000e03600d98d8e500050180180180000e03600d98d8e500050180180180000e0360070fd8e500050180660180000e0360070fd8e500050180660180000b0060e2000001fe810180000b0060e2000001fe81018000150060fd00000efd0002060006ee0005018600618000150060fd00000efd0002060006ee0005018600618000130060fd000006fb000006ee0005019f81f98000130060fd000006fb000006ee0005019f81f980001c0c6000000fcf860f9786000e1f9ffe8f019780f3000001fe810180001c0c6000000fcf860f9786000e1f9ffe8f019780f3000001fe810180001c0d6000001818c618d8c0000618c618fed800c6f3000001fe810180001c0d6000001818c618d8c0000618c618fed800c6f3000001fe810180001b106000001818c618d806000618c61fd8dfd8f2000001fe810180001b106000001818c618d806000618c61fd8dfd8f2000001fe810180001c116000001818c618d800000618c6d80fd81806f300050181ff8180001c116000001818c618d800000618c6d80fd81806f300050181ff8180001c116000000fcf8f0f9800000f18c38fc0cfd806f300050180000180001c116000000fcf8f0f9800000f18c38fc0cfd806f30005018000018000120060f400030f80000cf3000001feff018000120060f400030f80000cf3000001feff0180009800260055000000aa01280055000000aa01210055000000aa01210001150060fc0000c6fd0002060006ef000501e666678000150060fc0000c6fd0002060006ef000501e666678000130060fc0000c0fb000006ef000001fe99018000130060fc0000c0fb000006ef000001fe990180001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e6666780001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e6666780001d0e60000018c0d8c618d800000618c618fed800c6f4000001fe990180001d0e60000018c0d8c618d800000618c618fed800c6f4000001fe990180001c11600000180fd8c618cf86000618c61fd8dfd8f3000501e6666780001c11600000180fd8c618cf86000618c61fd8dfd8f3000501e6666780001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e6666780001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e666678000120060f300030f80000cf4000001feff018000120060f300030f80000cf4000001feff0180000f0060f9000006eb000501e0000780000f0060f9000006eb000501e0000780000f0060f9000006eb000501e0000780000f0060f9000006eb000501e000078000150a600000178600178f8fdf80ec000501e000078000150a600000178600178f8fdf80ec000501e000078000150a60000018c00018d8d80606ec000501e000078000150a60000018c00018d8d80606ec000501e0000780001409600000180600181fd806eb000501e0000780001409600000180600181fd806eb000501e0000780001505600000180000fe180106c6ec000501e0000780001505600000180000fe180106c6ec000501e000078000150a600000180000180fcfc386ec000501e000078000150a600000180000180fcfc386ec000501e0000780000f0060f800000cec000501e0000780000f0060f800000cec000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001fe990180000b0060e2000001fe990180000f046018000006e6000501e6666780000f046018000006e6000501e6666780000c016018e3000001fe990180000c016018e3000001fe990180001106601f8f8f8e1f80e8000501e6666780001106601f8f8f8e1f80e8000501e66667800011066018d8d8c618c0e8000001fe9901800011066018d8d8c618c0e8000001fe9901800011066018dfd8c618c0e8000501e66667800011066018dfd8c618c0e8000501e66667800011066018d80fc618c0e8000001fe9901800011066018d80fc618c0e8000001fe990180001106601f8fc0cf18c0e8000501e6666780001106601f8fc0cf18c0e8000501e6666780000f046000000f80e6000001fe990180000f046000000f80e6000001fe9901800012036000000efb000006ec000501e66667800012036000000efb000006ec000501e666678000120360000006fb00000eec000001fe99018000120360000006fb00000eec000001fe99018000150a600fcf860f9780060f8006ec000501e666678000150a600fcf860f9780060f8006ec000501e6666780001606601818c618d8c0fe00010606ed000001fe990180001606601818c618d8c0fe00010606ed000001fe99018000150a601818c618d800060f8006ec000501e666678000150a601818c618d800060f8006ec000501e6666780001505601818c618d8fd00010606ed000001fe990180001505601818c618d8fd00010606ed000001fe990180001505600fcf8f0f98fd00010f06ed000501e6666780001505600fcf8f0f98fd00010f06ed000501e6666780000f0060f700000ced000001fe990180000f0060f700000ced000001fe990180002202600780fc0000c6fb00160f8fc000c00000060000060000c000180001e6666780002202600780fc0000c6fb00160f8fc000c00000060000060000c000180001e6666780002202600cc0fc0000c0fb001118d8c000c000000600000e0000c000180001fe990180002202600cc0fc0000c0fb001118d8c000c000000600000e0000c000180001fe990180002725600c0f9780178f8fce18cfc0060f8000d9c00fcf98df9f8f8006000fcf801f8f81e66667800098002600aa000000f9012800aa000000f9012100aa000000f9012100012725600c0f9780178f8fce18cfc0060f8000d9c00fcf98df9f8f8006000fcf801f8f81e666678000260a601f18d8c018c0d8c618d8fd0003019ac018fed80ac618c0060018d8c018d8c1fe99018000260a601f18d8c018c0d8c618d8fd0003019ac018fed80ac618c0060018d8c018d8c1fe990180002725600c18d800180fd8c618cf80060f80061cc018d8dad8c618c0060018d8c018dfc1e6666780002725600c18d800180fd8c618cf80060f80061cc018d8dad8c618c0060018d8c018dfc1e666678000270b600c18d8001818d8c618c0c0fe00111818c018d8ddd8c6d8c0060018d8c018d801fe99018000270b600c18d8001818d8c618c0c0fe00111818c018d8ddd8c6d8c0060018d8c018d801fe99018000270b600c0f9800180fcfcf0f9f80fe00161fdf800fcf98d8c38f800f000fcf801f8fc1e666678000270b600c0f9800180fcfcf0f9f80fe00161fdf800fcf98d8c38f800f000fcf801f8fc1e6666780000b0060e2000001fe990180000b0060e2000001fe9901800022176000000f80060f800e0600df80001f80060300000e000006f9000501e66667800022176000000f80060f800e0600df80001f80060300000e000006f9000501e66667800022176000001840061840060000d8c00018c00606000006000003f9000001fe9901800022176000001840061840060000d8c00018c00606000006000003f9000001fe990180002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa000501e6666780002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa000501e66667800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa000001fe9901800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa000001fe99018000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000501e666678000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000501e666678000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa000001fe99018000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa000001fe9901800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa000501e66667800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa000501e6666780000f0060ea00000cfa000001fe990180000f0060ea00000cfa000001fe990180001a0060fd00000ef900000efe000306001fc0f7000001feff0180001a0060fd00000ef900000efe000306001fc0f7000001feff0180001a0060fd000006f9000006fe0003060000c0f700050180000180001a0060fd000006f9000006fe0003060000c0f7000501800001800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020086000001818c618d8c0fe00091818c618d8c006000306f7000001fe8101800020086000001818c618d8c0fe00091818c618d8c006000306f7000001fe8101800020156000001818c618d800060f801818c618d80006000180f7000001fe8101800020156000001818c618d800060f801818c618d80006000180f7000001fe810180001f076000001818c618d8fd00041818c618d8fe000118c6f7000001fe810180001f076000001818c618d8fd00041818c618d8fe000118c6f7000001fe810180001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f70005019f81f980001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f70005019f81f980000f0060ed00000cf700050186006180000f0060ed00000cf700050186006180000b0060e2000001fe810180000b0060e2000001fe810180000b0060e200050180660180000b0060e200050180660180000b0060e200050180180180000b0060e200050180180180000b0060e200050180000180000b0060e2000501800001800007007fdeff01800007007fdeff01800014066000003ffffffdeb99089f000001800001800014066000003ffffffdeb99089f000001800001800014066007003e00000eeb6608670070019ff801800014066007003e00000eeb6608670070019ff80180001406601b003e00000deb99089f006c0198180180001406601b003e00000deb99089f006c01981801800014066063fe3e00000eeb6608673fe301981ff9800014066063fe3e00000eeb6608673fe301981ff9800014066180063e00000deb99089f3000c1981819800014066180063e00000deb99089f3000c1981819800014066600063e00000eeb6608673000319ff819800014066600063e00000eeb6608673000319ff819800014066180063e00000deb99089f3000c1830019800014066180063e00000deb99089f3000c1830019800014066063fe3e00000eeb6608673fe301830019800014066063fe3e00000eeb6608673fe30183001980001406601b003e00000deb99089f006c0183001980001406601b003e00000deb99089f006c01830019800014066007003e00000eeb66086700700183fff9800014066007003e00000eeb66086700700183fff9800014066000003e00000deb99089f000001800001800014066000003e00000deb99089f000001800001800014066000003ffffffeeb660867000001800001800014066000003ffffffeeb660867000001800001800007007fdeff01800007007fdeff018000a0008fa00083ff}}{\par }{\fs20 \cell }\pard \widctlpar\intbl\adjustright {\fs20 \row }\pard \qj\fi360\widctlpar\adjustright {\fs20 Under some of the columns you will see an inverted triangle pointing at the column marker.  This inverted triangle is a tab stop}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop\bxe }}}{\fs20 .  When you use the }{\outl\fs18 tab}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 tab}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20 , it moves the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the next tab stop, inserting a tab character if you are in insert mode or past the end of the line in overstrike mode.\par To remove an existing tab stop, move the cursor so that the arrow points at the tab stop, and click.  To create a tab stop where none exists, move the cursor to the column on the ruler where you want a tab stop, and click.\par Moving a tab stop, then, is a two-step process.  First, remove the old tab stop, and then place a new tab stop in the proper column.  Of course, the order of these steps can be changed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Default tab stops}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Default tab stops\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20 All of the ORCA language development environments are multi-lingual; the same environment can be used with more than one language.  Tab stops that are reasonable for assembly language, however, may not be the best choice for Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20 .  The same is true for virtually any pair of languages you might pick.\par As a result, each language has a different default tab line.  When you open a new window, the tab line is set to the default tab stops for the language assigned to the new window.  If you change the language stamp, a dialog will appear that gives you the choice of changing to the new language's default tabs or sticking with the ones that are already in use.\par The default tab line is changed by making changes in the SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20 .  This is described in detail later in this chapter.  For now, the important point is that changing the tab stops with the ruler does not change the default tabs.  The next time you load the file from disk, the original tab stops will again be used.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The File Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The File Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx6120\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk7}The File menu is used to open files, save files to disk that have been created or changed with the editor, quit the program, and for various disk-based housekeeping functions.\par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \par \par }\pard \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \tx8730\adjustright {\b New}{\pard\plain \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \tx8730\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v New\tcl3}}}{\b \par }\pard \qj\widctlpar\intbl\tx8730\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\tx8730\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\tx8730\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new command}}}{\fs20 The New command opens a new window.  Until it is saved for the first time, the window will be called "Untitled X," where X is a number.  The first new window opened will be assigned a number of 1, and subsequent windows will increment the value.  You would use the New command to create new programs.\par \par }\pard \qj\widctlpar\intbl\tx8730\adjustright {\fs20 \cell }\pard \widctlpar\intbl\adjustright {\par }{{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw146\pich248\picwgoal2920\pichgoal4960\macpict\bliptag-2054001889\blipupi72{\*\blipuid 85926b1fbf2312c96fc0914fd41d49bc}0cd90000000000f800921101a00082a0008e01000a00000000030802809800140000000000f800980000000000f800920000000000f80092000102ed0008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30009057fc1cf1ffffcf30009057fc1cf1ffffcf30009057fcfff9ffffcf30009057fcfff9ffffcf30009057fcf8f9f0ffcf30009057fcf8f9f0ffcf30009057fc3cf9e67fcf30009057fc3cf9e67fcf30009057fcfcf9e07fcf30009057fcfcf9e07fcf30009057fcfcf9e7ffcf30009057fcfcf9e7ffcf30009057fcf870f0ffcf30009057fcf870f0ffcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ff1ff00f8ff0008007ff1ff00f8ff00080060f1000018ff00080060f1000018ff00080060f1000018ff00080060f1000018ff000c02600046f500020c2318ff000c02600046f500020c2318ff000c02600066f5000408331f80000c02600066f5000408331f80000e046000763cc3f70004363b1f80000e046000763cc3f70004363b1f80000e0460007e66dbf70004433f1f80000e0460007e66dbf70004433f1f80000e0460006e7edbf7000442371f80000e0460006e7edbf7000442371f80000e046000666066f700044b331f80000e046000666066f700044b331f80000e046000623c66f7000436311f80000e046000623c66f7000436311f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000667c3c7cf8000436331f80000f056000667c3c7cf8000436331f80000d016000fd66f8000443331f80000d016000fd66f8000443331f80000f05600066667e66f8000442331f80000f05600066667e66f8000442331f80000f05600066666066f800044b331f80000f05600066666066f800044b331f8000110760003c7c3c666660fa0004361e1f8000110760003c7c3c666660fa0004361e1f80000b0360000060f400021f80000b0360000060f400021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000d0360003c38f600040c619f80000d0360003c38f600040c619f80000d0360006618f6000408619f80000d0360006618f6000408619f80000f0360006018fe3cf90004366d9f80000f0360006018fe3cf90004366d9f8000100660006018666066f90004436d9f8000100660006018666066f90004436d9f8000100660006018663c7ef90004426d9f8000100660006018663c7ef90004426d9f8000100660006618660660f900044b331f8000100660006618660660f900044b331f80000d016000fc3cf9000436331f80000d016000fc3cf9000436331f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000603e631ef8000436301f80000f056000603e631ef8000436301f80000f0560003c666333f80004431e1f80000f0560003c666333f80004431e1f80000f0560000666363ff8000442031f80000f0560000666363ff8000442031f80000f05600066663630f800044b331f80000f05600066663630f800044b331f80000f0560003c3e1c1ef80004361e1f80000f0560003c3e1c1ef80004361e1f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260003cfe000101e0f800021f80000f0260003cfe000101e0f800021f80000f02600066fe00010330f800021f80000f02600066fe00010330f800021f800010086000603e631e0331e0f900021f800010086000603e631e0331e0f900021f80000f0760003c6663330333f800021f80000f0760003c6663330333f800021f8000100860000666363f03f1e0f900021f8000100860000666363f03f1e0f900021f80001008600066663630033030f900021f80001008600066663630033030f900021f8000110960003c3e1c1e0331e333fa00021f8000110960003c3e1c1e0331e333fa00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000130260007cfc000307e0003cfe000403001f8000130260007cfc000307e0003cfe000403001f80001402600066fd00043001800066fe000403001f80001402600066fd00043001800066fe000403001f800015136000663c631e367c0183c0603e631e1f001f800015136000663c631e367c0183c0603e631e1f001f8000151360007c66633338300186603c66633333001f8000151360007c66633338300186603c66633333001f8000151360006c7e363f30300186600666363f33001f8000151360006c7e363f30300186600666363f33001f8000151360006660363030360186606666363033001f8000151360006660363030360186606666363033001f800015136000663c1c1e301c0183c03c3e1c1e1f001f800015136000663c1c1e301c0183c03c3e1c1e1f001f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260007cfe000103c0f800021f80000f0260007cfe000103c0f800021f80001002600066fe0002066003f900021f80001002600066fe0002066003f900021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130260007cfe660503c663066660fc00021f8000130260007cfe660503c663066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b600060663e60066603666660fc00021f8000130b600060663e60066603666660fc00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000100060fe00003cfc000006fb00021f8000100060fe00003cfc000006fb00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460007c0060f700040c3e1f80000e0460007c0060f700040c3e1f8000100660006600000180f9000408331f8000100660006600000180f9000408331f800010066000666ce3e3e0f9000436331f800010066000666ce3e3e0f9000436331f8000100660007c70633180f90004433e1f8000100660007c70633180f90004433e1f8000100660006060633180f9000442301f8000100660006060633180f9000442301f80001006600060606331b0f900044b301f80001006600060606331b0f900044b301f8000110760006060f330e333fa000436301f8000110760006060f330e333fa000436301f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460003c0030f700040c1e1f80000e0460003c0030f700040c1e1f80000f056000660000c0f8000408331f80000f056000660000c0f8000408331f80000f056000666671f0f8000436331f80000f056000666671f0f8000436331f80000f056000666630c0f8000443331f80000f056000666630c0f8000443331f80000f056000666630c0f8000442331f80000f056000666630c0f8000442331f80000f056000666630d8f800044b331f80000f056000666630d8f800044b331f80000f0560003c3e7870f80004361e1f80000f0560003c3e7870f80004361e1f80000b02600006f40003031f80000b02600006f40003031f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000070003f0ff018000070003f0ff01800002ed00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Open}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Open\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command\bxe }}}{\fs20 The Open command is used to open a text file that already exists on a disk.  After choosing the file from the Open command's file list, it will be opened and placed in a new window.  Like all windows newly created on the desktop, this window will be as large as the screen.\par }\pard \qj\ri1980\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Close}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Close\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 close command\bxe }}}{\fs20 The Close command closes the front window.  The front window is the window that is currently highlighted.  If the file has changed since the last time it was saved, a dialog box appears before the window is closed.  The dialog box gives you a chance to save the changes to the file, or to cancel the close operation.\par This menu item will be dimmed if there are no windows open on the desktop.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \tx0\adjustright {\b Save}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \tx0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Save\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 save command\bxe }}}{\fs20 If the front window was loaded from disk, or if it has already been saved at least one time, then ORCA knows which disk file is associated with the window.  In that case, this command causes the contents of the window to be written to the disk.  After the write operation is complete, the desktop returns to its original state \endash  the file is still on the desktop, and all characteristics of the file have been preserved.\par If you use the Save command on an untitled window, it will function as though you had selected the Save As command.  The Save As command is discussed below.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Save As}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Save As\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 save as command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command}}}{\fs20 The Save As command is used to write the contents of a window to a file that is different from the original text file, or to save a new, untitled window to a file for the first time.  The Save As... dialog is the standard file save dialog, described in the manuals that come with your computer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Revert To Saved}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Revert To Saved\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 revert to saved command\bxe }}}{\fs20 The contents of the window are replaced by a copy of the file read from disk.  The cursor is moved to the first character of the first line of the file, but all other options (such as over strike or auto indent) remain the same.\par This menu will be dimmed if there have been no changes to the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Page Setup}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Page Setup\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 page setup command\bxe }}}{\fs20 The Page Setup command is used when you are ready to print the contents of one of your open windows.  The actual dialog depends on the printer driver you have selected from the chooser.  For detailed information about the Page Setup dialog, see the documentation that comes with your computer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Print}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Print\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 print command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printing files}}}{\fs20 The Print command sends the contents of the front window to your printer.  You can select only a portion of your document to be printed, or, if no text has been selected when you issue the Print command, then the entire file will be printed.\par The Print command brings up a standard dialog to control the printing process.  This dialog is documented in the manuals that came with your computer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Quit}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Quit\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 quit command\bxe }}}{\fs20 All windows on the desktop are closed.  If any of the files have changed since the last time they were saved, you are presented with a dialog box that gives you a chance to save the file or cancel the Quit command.  If you cancel the Quit command, all windows that have already been closed stay closed.  Once all windows are closed, the program returns control to the text programming environment.  From there, you can use the shell's quit command to return to the program launcher that you used to start ORCA/Pascal.\par }\pard \qj\fi540\widctlpar\adjustright {\*\bkmkend bk7}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file menu\bxe }{\rxe bk7}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Edit Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Edit Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx6480\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk8}The Edit menu provides the standard editing capabilities common to virtually all desktop programs.  You can select all of the text in the document; cut, copy or clear selected text; paste text from the current scrap; or undo changes to the file.\par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \par \par }\pard \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b Undo}{\pard\plain \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Undo\tcl3}}}{\b\fs20 \par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 undo command\bxe }}}{\fs20 The Undo command changes the file back to the state it was in before the last command that changed the file was executed.  For example, if you use the }{\outl\fs20 delete}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 delete}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20  to delete several characters of text, then use the Undo command, the deleted characters will reappear in the file.}{\v\fs20 \cell }\pard \qr\widctlpar\intbl\adjustright {\par \par }{{\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw126\pich175\picwgoal2520\pichgoal3500\macpict\bliptag1613807943\blipupi72{\*\blipuid 6030c147747206bf9ed44854c7945715}07e00000000000af007e1101a00082a0008e01000a0000000002d002409800100000000000af00800000000000af007e0000000000af007e000102f10008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008047c1f9cfffcf60008047c1f9cfffcf60008047cff9ff3fcf60008047cff9ff3fcf60008047cfc18e0fcf60008047cfc18e0fcf60008047c399cf3fcf60008047c399cf3fcf60008047cf99cf3fcf60008047cf99cf3fcf60008047cf99cf27cf60008047cf99cf27cf60008047c1c1878fcf60008047c1c1878fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60006007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80c046001100010f900024151f80c046001100010f900024151f80c046002200020f900028021f80c046002200020f900028021f80e05600111415140fb0003014041f80e05600111415140fb0003014041f80d016002fe220020fa00022081f80d016002fe220020fa00022081f80e016001fe110010fb0003040101f80e016001fe110010fb0003040101f80d016002fe220020fa0002a201f80d016002fe220020fa0002a201f80e05600141115140fb0003014151f80e05600141115140fb0003014151f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80c046002200080f900028221f80c046002200080f900028221f80d046001011140fa0003014141f80d046001011140fa0003014141f80c046002022080f900022081f80c046002022080f900022081f80c0360010111f90003040141f80c0360010111f90003040141f80c0460022220a0f90002a221f80c0460022220a0f90002a221f80d046001415040fa0003014111f80d046001415040fa0003014111f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024141f80a02600140f700024141f80a02600220f700028221f80a02600220f700028221f80e05600101414110fb0003014101f80e05600101414110fb0003014101f80d05600202222220fa00022201f80d05600202222220fa00022201f80e05600101111150fb0003040101f80e05600101111150fb0003040101f80d056002222220a0fa0002a221f80d056002222220a0fa0002a221f80e05600141414010fb0003014141f80e05600141414010fb0003014141f80c056000000200a0f9000101f80c056000000200a0f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80d05600220000080fa00028209f80d05600220000080fa00028209f80f0660011151414140fc0003014111f80f0660011151414140fc0003014111f80e066002a222008220fb000220a1f80e066002a222008220fb000220a1f80f0660010111410150fc0003040111f80f0660010111410150fc0003040111f80d056002022020a2fa0002a0a1f80d056002022020a2fa0002a0a1f80f0660010151404140fc0003014041f80f0660010151404140fc0003014041f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a0360014140f7000101f80a0360014140f7000101f80a0360022080f7000101f80a0360022080f7000101f80d0660010041415140fa000101f80d0660010041415140fa000101f80d0660020082222280fa000101f80d0660020082222280fa000101f80c05600100415111f9000101f80c05600100415111f9000101f80c05600220820222f9000101f80c05600220820222f9000101f80c016001fe410051f9000101f80c016001fe410051f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8110f6001e001c0000001e1c1c00000c1e1f8110f6001e001c0000001e1c1c00000c1e1f8110f60033000c000018330c0c000008331f8110f60033000c000018330c0c000008331f8110f600301e0c1e1e3e330c0c000036331f8110f600301e0c1e1e3e330c0c000036331f8110f6001e330c333318330c0c000043331f8110f6001e330c333318330c0c000043331f8110f600033f0c3f30183f0c0c0000423f1f8110f600033f0c3f30183f0c0c0000423f1f8110f60033300c30331b330c0c00004b331f8110f60033300c30331b330c0c00004b331f810016001fde109e0e331e1e000036331f810016001fde109e0e331e1e000036331f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8060001f3ff00f8060001f3ff00f8a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you have enough memory to hold all of the changes, repeated use of the Undo command will eventually return the file to the same condition it was in when it was originally loaded from disk.  If memory starts to run short, all but the most recent changes may be lost.  In general, you should not depend on being able to undo more than one command.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Cut}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Cut\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cut command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 paste command}}}{\fs20 The selected text is removed from the file and placed in the clipboard.  You can paste this text anywhere in a window with the Paste command, described below.  The clipboard holds only one block of text at a time.  The next Cut or Copy command will cause the contents of the clipboard to be replaced by the new selection.\par This menu item is disabled if no text has been selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Copy}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Copy\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 copy command\bxe }}}{\fs20 The selected text is copied to the clipboard, replacing the previous contents of the clipboard.  The file being edited is not affected.\par This menu item is disabled if no text has been selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Paste}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Paste\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 paste command\bxe }}}{\fs20 The contents of the clipboard are copied into the file at the current insertion point.  If any text was selected when the Paste command was issued, the selected text is cleared before the Paste is performed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Clear}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Clear\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 clear command\bxe }}}{\fs20 The selected text is removed from the file.\par Assuming that some text has been selected, this command is equivalent to using the }{\outl\fs20 delete}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 delete}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20 .\par This menu item is disabled if no text has been selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Select All}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Select All\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 select all command\bxe }}}{\fs20 All of the text in the file is selected.\par You can also select all of the text in the file by moving the mouse to the left of the text, holding down the command (}{\outl\fs18 \u-3\'f0}{\fs20 ) key, and clicking the mouse.\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk8}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 edit menu\bxe }{\rxe bk8}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Windows Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Windows Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph90\trleft-90 \clvertalt\cltxlrtb \cellx6210\clvertalt\cltxlrtb \cellx8010\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk9}The Windows menu gives you control over how the windows are displayed, and helps you find windows on a cluttered desktop.  The Tile and Stack commands sort the files on the desktop into two different pictorial formats.  The names of all windows currently open are also shown in this menu.  The front window's name is marked with a check.  You can bring any window to front by selecting its name from the window list.}{\v\fs20 \cell }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw156\pich152\picwgoal3120\pichgoal3040\macpict\bliptag-586680411\blipupi72{\*\blipuid dd07f7a59aa680b7e5b48f75d34562b5}080b000000000098009c1101a00082a0008e01000a000000000308028098001400000000009800a0000000000098009c000000000098009c000102ed0008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f7000c047f9e73fff9fdff0080f7000c047f9e73fff9fdff0080f7000c047f9e7ffff9fdff0080f7000c047f9e7ffff9fdff0080f7000d097f926383c1c33ce1ff80f7000d097f926383c1c33ce1ff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324e1ff80f7000d027f9273fe990324e1ff80f7000c027fccf3fd9902fcff80f7000c027fccf3fd9902fcff80f7000d097fcce199c1c399e1ff80f7000d097fcce199c1c399e1ff80f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70007007ff0ff01fe0007007ff0ff01fe00070060f000010e00070060f000010e00070060f000010e00070060f000010e000b0460002a20a0f400010e000b0460002a20a0f400010e000b046000100040f400010fe00b046000100040f400010fe00c056000082020a0f500010fe00c056000082020a0f500010fe00c05600010104110f500010fe00c05600010104110f500010fe00c056000082020a8f500010fe00c056000082020a8f500010fe00b046000101041f400010fe00b046000101041f400010fe00c0560000828a0a0f500010fe00c0560000828a0a0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe00d02600028fe000020f600010fe00d02600028fe000020f600010fe00d0660004410000040f600010fe00d0660004410000040f600010fe00d06600020282a2822f600010fe00d06600020282a2822f600010fe00c0360001410fe44f600010fe00c0360001410fe44f600010fe00d0660000220222028f600010fe00d0660000220222028f600010fe00c0360004414fe44f600010fe00c0360004414fe44f600010fe00d06600028082a2822f600010fe00d06600028082a2822f600010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0120b60003c600038380c318000c0fb00010fe0120b60003c600038380c318000c0fb00010fe0120b600066600018180c300000c0fb00010fe0120b600066600018180c300000c0fb00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe014096000666660181806618cfecc00c0fd00010fe014096000666660181806618cfecc00c0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0140260003cfe0007c0600000618c0006fd00010fe0140260003cfe0007c0600000618c0006fd00010fe01402600066fe0000c0fe000361800006fd00010fe01402600066fe0000c0fe000361800006fd00010fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0140360006660fecc04633030330cfd660300000fe0140360006660fecc04633030330cfd660300000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe00b0060fd0000c0f500010fe00b0060fd0000c0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0150e6000630000300180e0000030c60003fe00010fe0150e6000630000300180e0000030c60003fe00010fe01502600063fe0008018060000030c00003fe00010fe01502600063fe0008018060000030c00003fe00010fe015136000631f3670f9f060f0f036ce3e1f1e61800fe015136000631f3670f9f060f0f036ce3e1f1e61800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0140c60001c33303199986180181986fd3302000fe0140c60001c33303199986180181986fd3302000fe0140660001c1f3078f9fdf008198f331f1e33000fe0140660001c1f3078f9fdf008198f331f1e33000fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e006007fefff00e006007fefff00e0060003efff00e0060003efff00e002ed00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Tile}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Tile\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tile command\bxe }}}{\fs20 The Tile command changes all of the windows on the desktop to the same size, then places them so that none overlap.  The name comes from the fact that the windows are placed next to one another, much as tiles are laid down on a floor.\par Tiling the windows is a quick way to organize your desktop.  Once the windows are tiled, it is fairly easy to find a particular window.  On the other hand, if you have a lot windows open, they generally become too small to be useful.  That is when the zoom box, located at the top right of the window's title bar, becomes handy.  When you click this box, the window grows to take up the entire desktop.  Once you have finished with the window, and would like to select another, click the zoom box again.  The window returns to its original size and location, and you can see all of the tiled windows again.\par If there are nine windows on the desktop, the Tile command will create three rows; each row will have three windows.  If more than nine windows are on the desktop, the extras are laid on top of the first nine.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Stack}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stack\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stack command\bxe }}}{\fs20 The Stack command stacks the windows on the desktop. Each window is moved a little to the right of the window it covers, and it is also moved far enough down so that the window's name can be read.\par If there are more than seven windows open, the extra windows are stacked on top of the first seven windows.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Shell Window}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Shell Window\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window command\bxe }}}{\fs20 The Shell Window command opens the shell window.  The shell window is basically an untitled window with a few special characteristics.  The special characteristics are:  the shell window has the name Shell, rather than a name that starts with Untitled; it shows up in the top right corner of the screen; and the shell window always starts with a language stamp of Shell.\par This window will be opened automatically before any EXE program, including the compiler, is executed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Graphics Window}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Graphics Window\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window\bxe }}}{\fs20 The Graphics Window command brings up a special window where the output from graphics programs}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics programs}}}{\fs20  can be written without leaving the programming environment.  Whenever you write a graphics program, use this command to open the window before running your program.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20   If you forget to open the graphics window, the program will still run, but the graphics output will be lost.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Variables Window}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Variables Window\tcl3}}}{\b \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5040\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables command\bxe }}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 The Variables Window command brings up another special window.  You can enter the names of variables from your program, and the variable and its current value will show up in the window, updating as you step through your program.  When debugging a program, you would normally select the Variables command, and then select one of the debugging commands such as Step, Trace, or Go.  You cannot enter a variable name until the program begins execution, since variables are undefined until run-time.  Also, the variable names that you type into the Variables window can only be entered when the program is executing in the subroutine for which these variables are defined.}{\v\fs20 \cell }\pard \widctlpar\intbl\adjustright {\par \par }{{\pict{\*\picprop\shplid1037{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw270\pich152\picwgoal5400\pichgoal3040\macpict\bliptag88307961\blipupi72{\*\blipuid 054378f9bf0516b681dc75a89cc14c7c}077d000000000098010e1101a00082a0008e01000a00000000030802809800220000000000980110000000000098010e000000000098010e000102df0006007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f80b056000c0018003e60000180b056000c0018003e60000180e086020c0818183000006e90000180e086020c0818183000006e90000180b056060c26183c3e60000180b056060c26183c3e60000180f096020ca899ffb3f87ce3eea0000180f096020ca899ffb3f87ce3eea0000180f096060c0418ff336ccc633ea0000180f096060c0418ff336ccc633ea0000180f096222c081866336ccc633ea0000180f096222c081866336ccc633ea0000180f096264c04187e336ccc633ea0000180f096264c04187e336ccc633ea0000180f0960a0c0818ff336c7cf33ea0000180f0960a0c0818ff336c7cf33ea0000180b056060c0418e73e60000180b056060c0418e73e60000180b056000c0018003e60000180b056000c0018003e600001806007fe1ff00f806007fe1ff00f8090060e400031ffffff8090060e400031ffffff811036003cc0ff80001c1e0f200031800001811036003cc0ff80001c1e0f2000318000018110360030cc3f9000103c3f1000318018018110360030cc3f9000103c3f1000318018018110361f30cc3f80001c3e0f2000318066018110361f30cc3f80001c3e0f20003180660180e0363330cc3f80001c330f200fd180e0363330cc3f80001c330f200fd18110363330fc3f80001c330f2000318600618110363330fc3f80001c330f20003186006181103633300c3f80001c330f2000319f81f981103633300c3f80001c330f2000319f81f980f0361f300c3f9000203f1e0f200fd180f0361f300c3f9000203f1e0f200fd1809036003c00fe700fd1809036003c00fe700fd18060060e400fd18060060e400fd180f016180f7000103e0f10003181ff8180f016180f7000103e0f10003181ff8180d0060f6000003f00003180000180d0060f6000003f00003180000180f016380f7000103e0f100031ffffff80f016380f7000103e0f100031ffffff80e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180f016180f700010330f10003180000180f016180f700010330f10003180000180f0163c0f7000101e0f10003180000180f0163c0f7000101e0f1000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e40003181ff818090060e40003181ff818060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18090060e4000319f81f98090060e4000319f81f98090060e4000318600618090060e4000318600618060060e400fd18060060e400fd18090060e4000318066018090060e4000318066018090060e4000318018018090060e4000318018018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e4000319ff8018090060e4000319ff8018090060e4000319818018090060e4000319818018090060e400031981ff98090060e400031981ff98090060e4000319818198090060e4000319818198090060e4000319ff8198090060e4000319ff8198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e40003183fff98090060e40003183fff98090060e4000318000018090060e4000318000018090060e4000318000018090060e400031800001806007fe1ff00f806007fe1ff00f802df00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Variables window above is typical.  Under the window's title bar are an up-arrow, a down-arrow, star, and the name of the currently executing subroutine or main program.  Beneath the arrows is a list of variable names and their current values.  Along the right side of the window is a scroll bar, used to scroll through the variables list.\par The arrows next to the current subroutine's name can be used to move through the local variables in the various subroutines; they cannot be selected unless your program is executing at a point where a function call has been detected by the debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 .  For example, once you enter a subroutine from the program body, the window display changes to show the variables in the subroutine.  The up-arrow darkens, indicating that you may click on it to change the display to that of the main program.  If you select the up-arrow, you will see the variables display that you created in the program block, and the down-arrow can be selected so that you may return to the subroutine's variables display.\par The star button is a short-cut that displays all of the simple variables available from the current subroutine.  Simple variables are any variable that does not need to be dereferenced with an array subscript, pointer operator, or field name.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 You can enter variable names by clicking anywhere in the content region of the Variables window.  After clicking, a line-edit box appears under the subroutine-name box.  You can enter the name of one variable in the box, using any of the line-edit tools to type the name.  Press the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  after entering the name, and the variable's current value will be immediately displayed to the right of the name.  If you decide later that you need to edit or delete the variable name, then click on the name and use any line-edit tools you need to accomplish the task.  \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 Only the names of specific values may be entered into the Variables window; you cannot view the contents of structures or entire arrays.  It is possible to see the value of any array declared as an array of characters, however.  In that case, the debugger expects a null-terminated string.\par When you display a pointer, you will see its value printed in hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  format.  You can also look at the value if the object pointed to by the pointer.  To do this, place a }{\f6\fs20 ^ }{\fs20 character after the pointer's name.\par The contents of individual array elements can be seen in the Variables window, provided that the array elements are scalar types.  You must enter all of the indices associated with an array element (i.e. an element in a four-dimensional array requires four indices).  An array element is specified by first entering the name of the array, and then the indices enclosed in either parentheses or square brackets.  While the desktop will recognize both parentheses and square brackets, the opening and ending punctuation must match.  (i.e. use '(' with ')' and '[' with ']').\par You can look at any field within a record or object by typing the record or object name, a dot, and the name of the field.\par If a pointer points to a record or object, you can look at a field in the record or object by typing the name of the pointer, then either ^. or ->, and finally the field name.\par These dereference operators can be used in combination.  For example, it is possible to look at an element of an array that is in a record pointed at by a pointer with a sequence like this one:\par \par }{\f6\fs18 ptr^.arr[4];\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 The names entered into the variables window are case insensitive \endash  leNGTh and LEngth would be the same variable name, for example.\par Any spaces you type are left in the string for display purposes, but are otherwise ignored, even if they appear in an identifier.\par The debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  can display variables which are stored internally in any of the following formats:\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab 1-, 2-, and 4-byte integers\par \bullet \tab 4-, 8-, and 10-byte reals\par \bullet \tab Pascal style strings and null terminated strings\par \bullet \tab booleans\par \bullet \tab characters (Only the first byte of the character is examined.  Nonprinting characters are output as blanks.)\par \bullet \tab pointers (These print as hexadecimal values.)\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Table 7.1:  Variable formats\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The variables window is updated after each command is executed by a Step or Trace command.  It is also updated when a break-point is encountered.  The variables window is not updated if the Go command is used, or during the execution of a Step Through or Go To Next Return command.\par }{\v\fs20 .ib).debug menu;\par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b List of Window Names}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v List of Window Names\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As you open windows, their names appear after the Stack command in the Windows menu.  When you pull down the Windows menu, you can see a list of all of the windows on the desktop, by name.  The window that you are using when you pull the menu down is checked.\par If you would like to use a different window, you can select it from the windows list.  The window you select is placed on top of all of the other windows on the desktop, and becomes the active window.\par There is only room for eleven window names in the Windows menu.  If there are more than eleven windows on the desktop, the extra names will not be displayed in the windows list.\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk9}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 windows menu\bxe }{\rxe bk9}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Find Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Find Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5760\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk11}The Find menu helps you locate strings in a window, replace occurrences of a string with another string, find the cursor, or move to a particular line by line number.\par The Find menu does not appear on the menu bar}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  unless there is a file open on the desktop.\cell }\pard \qr\widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1038{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw182\pich176\picwgoal3640\pichgoal3520\macpict\bliptag-1027009623\blipupi72{\*\blipuid c2c913a9665fb309c98c5d6ff4295614}09ca0000000000b000b61101a00082a0008e01000a0000000002d0024098001800000000008700b800000000008700b600000000008700b6000102e90008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008047c1cfffe7cee0008047c1cfffe7cee0008047cfffffe7cee0008047cfffffe7cee0008047cf8e0f07cee0008047cf8e0f07cee0008047c3ce6667cee0008047c3ce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cf866707cee0008047cf866707cee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0007007fecff01800007007fecff018000080060ed0002018000080060ed0002018000080060ed0002018000080060ed00020180000e056003e3000180f30003c3e180000e056003e3000180f30003c3e180000e05600300000180f300038301f8000e05600300000180f300038301f8000f056003071f0f80f40004036301f8000f056003071f0f80f40004036301f8000f056003c3199980f400040433c1f8000f056003c3199980f400040433c1f8000f05600303199980f40004042301f8000f05600303199980f40004042301f8000f05600303199980f4000404b301f8000f05600303199980f4000404b301f8001006600307998f9998f50004036301f8001006600307998f9998f50004036301f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000f066002a2000080a0f4000380a1f8000f066002a2000080a0f4000380a1f8000f0660010000010110f400030111f8000f0660010000010110f400030111f80013096002020a0a8080aaa828f80004022201f80013096002020a0a8080aaa828f80004022201f800130960014111110051114444f80004041151f800130960014111110051114444f80004041151f8001209600202088880088a28a8f700032221f8001209600202088880088a28a8f700032221f800130960010111110111114440f80004041111f800130960010111110111114440f80004041111f8001309600202888a80a0aa2828f800040220a1f8001309600202888a80a0aa2828f800040220a1f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80018056003e1800007fe0002780070fe000060fd0003c3e1f80018056003e1800007fe0002780070fe000060fd0003c3e1f8001705600330000003fe0005cc0030000060fc00038331f8001705600330000003fe0005cc0030000060fc00038331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f80019176003318c0cc30cccc078cc30cccc6063333000043331f80019176003318c0cc30cccc078cc30cccc6063333000043331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f80017086003e3c78f8787c8c0fc780938f1e330000363e1f80017086003e3c78f8787c8c0fc780938f1e330000363e1f800100060fe00040c00000780f5000201f800100060fe00040c00000780f5000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000e056003e00001c0f30003c3e1f8000e056003e00001c0f30003c3e1f8000e056003300000c0f300038331f8000e056003300000c0f300038331f8001208600331e3e0c1f1e1e0f70004036331f8001208600331e3e0c1f1e1e0f70004036331f80012086003e33330c3333330f700040433e1f80012086003e33330c3333330f700040433e1f8001208600363f330c33303f0f70004042361f8001208600363f330c33303f0f70004042361f80011076003330330c33333f6000404b331f80011076003330330c33333f6000404b331f8001309600331e3e1e1f1e1e333f80004036331f8001309600331e3e1e1f1e1e333f80004036331f8000b0360000003f0000201f8000b0360000003f0000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80012056002a0000080fe00000af7000382a1f80012056002a0000080fe00000af7000382a1f8001105600110000040fe000011f6000241f8001105600110000040fe000011f6000241f8001605600220a2a080fea003200a2a0afb0004022081f8001605600220a2a080fea003200a2a0afb0004022081f800160c60014111104111111014114511fb0004041041f800160c60014111104111111014114511fb0004041041f8009800180087000000b000b80087000000b000b60087000000b000b60001160d600222a220822202a00222288a80fb00032081f800160d600222a220822202a00222288a80fb00032081f800160c60011101104111110011114510fb0004041041f800160c60011101104111110011114510fb0004041041f8001403600220a2fca0030a0a288afb0004022081f8001403600220a2fca0030a0a288afb0004022081f8000b0360000001f0000201f8000b0360000001f0000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000a026001e0ef000201f8000a026001e0ef000201f8000c046003300180f1000201f8000c046003300180f1000201f8000d05600301e3e1e0f2000201f8000d05600301e3e1e0f2000201f8000d05600373318330f2000201f8000d05600373318330f2000201f8000d05600333318330f2000201f8000d05600333318330f2000201f8000d0560033331b330f2000201f8000d0560033331b330f2000201f8000e066001e1e0e1e333f3000201f8000e066001e1e0e1e333f3000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800070001ecff01f800070001ecff01f80002e900a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Find}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Find\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 {\*\bkmkstart bk10}The Find command is used to find a sequence of characters in the current window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1039{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw342\pich194\picwgoal6840\pichgoal3880\macpict\bliptag-1735962566\blipupi72{\*\blipuid 9887503af6f6fa50ec479808ae78daea}0e230000000000c201561101a00082a0008e01000a000000000308028098002c0000000000c201580000000000c201560000000000c20156000102d50007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f8000e007fefff03f839fffceeff01f8000e007fefff03f839fffceeff01f8000e007fefff03f9fffffceeff01f8000e007fefff03f9fffffceeff01f8000e007fefff03f9f1c1e0eeff01f8000e007fefff03f9f1c1e0eeff01f8000e007fefff03f879cccceeff01f8000e007fefff03f879cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f0cce0eeff01f8000e007fefff03f9f0cce0eeff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f800070060d800011800070060d800011800070060d800011800070060d800011800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000e0160f8fc00007fe1ff03807c18000e0160f8fc00007fe1ff03807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c1800110760f803e300018060e2000401807c1800110760f803e300018060e2000401807c1800110760f8030000018060e2000401807c1800110760f8030000018060e2000401807c1800110760f803071f0f9860e2000401807c1800110760f803071f0f9860e2000401807c1800110760f803c319998060e2000401807c1800110760f803c319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f80307998f9860e2000401807c1800110760f80307998f9860e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000e0160f8fc00007fe1ff03807c18000e0160f8fc00007fe1ff03807c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800150960f806000030c330001cfc000030e800027c1800150960f806000030c330001cfc000030e800027c1800150960f806000030c330000cfc000030e800027c1800150960f806000030c330000cfc000030e800027c1800170f60f806000030db3e1e0c1e0618f1b1f0e800027c1800170f60f806000030db3e1e0c1e0618f1b1f0e800027c1800170f60f806000030db33330c3306d999c330e800027c1800170f60f806000030db33330c3306d999c330e800027c1800170f60f806000030db33330c3f06d9998330e800027c1800170f60f806000030db33330c3f06d9998330e800027c1800170f60f8060000306633330c300331998330e800027c1800170f60f8060000306633330c300331998330e800027c1800170760f8060000306633fe1e040330f181f3e800027c1800170760f8060000306633fe1e040330f181f3e800027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800180660f8060000303cfe000603c0000003000ce900027c1800180660f8060000303cfe000603c0000003000ce900027c1800170660f80600003066fe00010660fe00000ce800027c1800170660f80600003066fe00010660fe00000ce800027c18001a1260f806000030603e3c3c0603c7c3c71f1c631eeb00027c18001a1260f806000030603e3c3c0603c7c3c71f1c631eeb00027c18001a1260f8060000306066606603c66666030c0c6333eb00027c18001a1260f8060000306066606603c66666030c0c6333eb00027c18001a1260f80600003060663c7e0067e663c30c0c363feb00027c18001a1260f80600003060663c7e0067e663c30c0c363feb00027c18001a1260f8060000306666066006660660630d8c3630eb00027c18001a1260f8060000306666066006660660630d8c3630eb00027c18001b1360f8060000303c3e3c3c03c3c663c7871e1c1e30ec00027c18001b1360f8060000303c3e3c3c03c3c663c7871e1c1e30ec00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800150960f806000030c3301870ee000070f600027c1800150960f806000030c3301870ee000070f600027c1800150960f806000030c3300030ee000030f600027c1800150960f806000030c3300030ee000030f600027c1800251d60f806000030db3e38307878f87c787807879fc7c3e6c78780787ccc7c30f600027c1800251d60f806000030db3e38307878f87c787807879fc7c3e6c78780787ccc7c30f600027c1800230b60f806000030db331830ccc0fdcc080cccdb6666670ccc00fdcc0030f600027c1800230b60f806000030db331830ccc0fdcc080cccdb6666670ccc00fdcc0030f600027c1800251260f806000030db331830fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030f600027c1800251260f806000030db331830fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030f600027c1800250b60f80600003066331830c00cfecc03c00cccdbfe66030c00c0c0fecc0030f600027c1800250b60f80600003066331830c00cfecc03c00cccdbfe66030c00c0c0fecc0030f600027c1800260860f80600003066333cfe780df87c787807879b67c3e607878078fe7c0178c0f700027c1800260860f80600003066333cfe780df87c787807879b67c3e607878078fe7c0178c0f700027c1800190560f807fffff0fb0000c0fb000006fb00000cf300027c1800190560f807fffff0fb0000c0fb000006fb00000cf300027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000f0360f80000f7ff0080e700027c18000f0360f80000f7ff0080e700027c18000f0360f8001ff700007ce700027c18000f0360f8001ff700007ce700027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800220960f80770007c60003023fd00010770fd000270003cfd000238000ef600027c1800220960f80770007c60003023fd00010770fd000270003cfd000238000ef600027c1800230f60f80770006000003033000018000770fd0002700066fd000218000ef600027c1800230f60f80770006000003033000018000770fd0002700066fd000218000ef600027c1800240f60f807700060e3e1f03b1e333e000770fd00097000603e7c3c3c18000ef600027c1800240f60f807700060e3e1f03b1e333e000770fd00097000603e7c3c3c18000ef600027c1800230f60f8077000786333303f331e18000770fd0002700060fd660218000ef600027c1800230f60f8077000786333303f331e18000770fd0002700060fd660218000ef600027c1800240f60f807700060633330373f0c18000770fd00097000606666607e18000ef600027c1800240f60f807700060633330373f0c18000770fd00097000606666607e18000ef600027c1800230f60f80770006063333033301e1b000770fd00017000fd66036018000ef600027c1800230f60f80770006063333033301e1b000770fd00017000fd66036018000ef600027c1800240f60f807700060f331f0311e330e000770fd000470003c3e66fe3c01000ef600027c1800240f60f807700060f331f0311e330e000770fd000470003c3e66fe3c01000ef600027c1800180360f80770f700010770fd000070f900000ef600027c1800180360f80770f700010770fd000070f900000ef600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c18000f0360f8001ff700007ce700027c18000f0360f8001ff700007ce700027c18000f0360f80000f7ff0080e700027c18000f0360f80000f7ff0080e700027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800070060d800011800070060d800011800070060d800011800070060d80001180007007fd8ff01f80007007fd8ff01f80002d500a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you select the Find command, a dialog like the one above appears on your screen.  The Find dialog is a modal dialog that stays in place until one of the buttons is selected.  To find a string of text, enter the text in the line-edit box next to Find: and click on the Find Next button (or press the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20 ).  The window display will change as necessary to show the first occurrence of the string after the current insertion point, and the string will be selected.\par You can continue searching for the same string by continuing to click on the Find Same command.  If the end of the program is reached, the search starts over at the beginning of the file.  The only time the search will fail is if there are no occurrences of the search string in the entire document.\par There are three options that affect the way searching is conducted.  These appear as check boxes in the Find window.   The first is Whole Word.  When selected, this option will only find strings that are preceded by a non-alphanumeric character or occur at the beginning of a line, and that end in a non-alphanumeric character or the end-of-line marker.  For example, searching for the word "int" with Whole Word enabled would find a match in both of these lines:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 int i;\par \{i is int\}\par }\pard \qj\widctlpar\adjustright {\fs20 \par The characters "int" in this line, though, would not be found:\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 \{print this line\}\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Case Sensitive option makes the search case sensitive.  That is, searching for INT would not find the word int.\par In many situations, especially when programming in assembly language, you want to find two words separated by some spaces.  For example, if you want to find the line\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab \tab lda   #2\par }{\fs20 \par you really don't care if there are two or three spaces between the two words \endash  you just want to find all of the places where the accumulator is loaded with the constant 2.  In this case, you would want to use the White Space Compares Equal option.  When selected, all runs of spaces and tabs are treated as if they were a single space.\par \par {\*\bkmkend bk10}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find command}{\rxe bk10}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Find Same}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Find Same\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find same command\bxe }}}{\fs20 If you have already entered a search string using the Find command, you can search for the next occurrence of the same string using the Find Same command.  This allows you to avoid using the Find dialog, and enables searching by simply using the }{\outl\fs18 \u-3\'f0}{\fs20 G keyboard equivalent.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Display Selection}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Display Selection\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 display selection command\bxe }}}{\fs20 If the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  (or selected text) is visible on the screen, this command does nothing.  If you have used the scroll bars to move the display so that the insertion point does not appear on the screen, the Display Selection command moves the display so that you can see the insertion point.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Replace}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Replace\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 replace command\bxe }}}{\fs20 The Replace command brings up a dialog like the one shown below.  All of the buttons, check boxes, and line-edit box from the Find command are present, and are used the same way.  In addition, there are two new buttons and one new text box:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1040{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw514\pich210\picwgoal10280\pichgoal4200\macpict\bliptag901944050\blipupi72{\*\blipuid 35c292f205259ad1e3e9468584616b59}122d0000000000d202021101a00082a0008e01000a0000000002d0024098004200000000002f020800000000002f020200000000002f0202000102bf0007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800012037ff8000fe9ff04fc1ffffe3fe2ff01800012037ff8000fe9ff04fc1ffffe3fe2ff01800012037ff9ffcfe9ff04fccfffff3fe2ff01800012037ff9ffcfe9ff04fccfffff3fe2ff01800015037ff9ffcfe9ff07fcce1c1f3e0e1e1fe5ff01800015037ff9ffcfe9ff07fcce1c1f3e0e1e1fe5ff01800015037ff9ffcfe9ff07fc1ccccf3ccccccfe5ff01800015037ff9ffcfe9ff07fc1ccccf3ccccccfe5ff01800015037ff9ffcfe9ff07fc9c0ccf3cccfc0fe5ff01800015037ff9ffcfe9ff07fc9c0ccf3cccfc0fe5ff01800014037ff9ffcfe9ff06fcccfccf3ccccce4ff01800014037ff9ffcfe9ff06fcccfccf3ccccce4ff01800015037ff8000fe9ff07fcce1c1e1e0e1e1fe5ff01800015037ff8000fe9ff07fcce1c1e1e0e1e1fe5ff0180000b007fe4ff00fce0ff0180000b007fe4ff00fce0ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000d0060f800000fceff03f80180000d0060f800000fceff03f80180000e0060f800010c20cf0003180180000e0060f800010c20cf00031801800013056003e3000180fd00010c20cf00031801800013056003e3000180fd00010c20cf0003180180001305600300000180fd00010c20cf0003180180001305600300000180fd00010c20cf00031801800013056003071f0f98fd00010c20cf00031801800013056003071f0f98fd00010c20cf00031801800013056003c3199980fd00010c20cf00031801800013056003c3199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf000318018000980042002f0000005e0208002f0000005e0202002f0000005e020200011305600307998f98fd00010c20cf0003180180001305600307998f98fd00010c20cf0003180180000e0060f800010c20cf0003180180000e0060f800010c20cf0003180180000d0060f800000cce0003180180000d0060f800000cce0003180180000d0060f800000fceff03f80180000d0060f800000fceff03f8018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000d0060f800000fceff03f80180000d0060f800000fceff03f80180000d0060f800000cce0003180180000d0060f800000cce00031801800012056003e00001c0fd00000cce00031801800012056003e00001c0fd00000cce00031801800012056003300000c0fd00000cce00031801800012056003300000c0fd00000cce000318018000130a600331e3e0c1f1e1e3000cce000318018000130a600331e3e0c1f1e1e3000cce000318018000130a6003e33330c3333330000cce000318018000130a6003e33330c3333330000cce000318018000130a600363f330c33303f0000cce000318018000130a600363f330c33303f0000cce000318018000130a6003330330c3333300000cce000318018000130a6003330330c3333300000cce000318018000130a600331e3e1e1f1e1e3000cce000318018000130a600331e3e1e1f1e1e3000cce000318018000100360000003fb00000cce000318018000100360000003fb00000cce0003180180000d0060f800000cce0003180180000d0060f800000cce0003180180000d0060f800000fceff03f80180000d0060f800000fceff03f8018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c7000201800014086006000030c330001cfc000030d1000201800014086006000030c330001cfc000030d1000201800014086006000030c330000cfc000030d10002018000980042005e0000008d0208005e0000008d0202005e0000008d0202000114086006000030c330000cfc000030d10002018000160e6006000030db3e1e0c1e0618f1b1f0d10002018000160e6006000030db3e1e0c1e0618f1b1f0d10002018000160e6006000030db33330c3306d999c330d10002018000160e6006000030db33330c3306d999c330d10002018000160e6006000030db33330c3f06d9998330d10002018000160e6006000030db33330c3f06d9998330d10002018000160e60060000306633330c300331998330d10002018000160e60060000306633330c300331998330d10002018000160660060000306633fe1e040330f181f3d10002018000160660060000306633fe1e040330f181f3d100020180000c046007fffff0c700020180000c046007fffff0c70002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c70002018000130560060000303cfa000203000cd20002018000130560060000303cfa000203000cd200020180001105600600003066f900000cd100020180001105600600003066f900000cd1000201800019116006000030603e3c3c03c3c7c3c71f1c631ed4000201800019116006000030603e3c3c03c3c7c3c71f1c631ed40002018000191160060000306066606606066666030c0c6333d40002018000191160060000306066606606066666030c0c6333d400020180001911600600003060663c7e03c7e663c30c0c363fd400020180001911600600003060663c7e03c7e663c30c0c363fd40002018000191160060000306666066000660660630d8c3630d40002018000191160060000306666066000660660630d8c3630d400020180001a1260060000303c3e3c3c03c3c663c7871e1c1e30d500020180001a1260060000303c3e3c3c03c3c663c7871e1c1e30d500020180000c046007fffff0c700020180000c046007fffff0c70002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c7000201800013076006000030c33018ed000070df000201800013076006000030c33018ed000070df0002018000980042008d000000bc0208008d000000bc0202008d000000bc0202000114086006000030c3300060ee000030df000201800014086006000030c3300060ee000030df0002018000241c6006000030db3e38f87878f87c787807879fc7c3e6c78780787ccc7c30df0002018000241c6006000030db3e38f87878f87c787807879fc7c3e6c78780787ccc7c30df0002018000220a6006000030db331860ccc0fdcc080cccdb6666670ccc00fdcc0030df0002018000220a6006000030db331860ccc0fdcc080cccdb6666670ccc00fdcc0030df000201800024116006000030db331860fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030df000201800024116006000030db331860fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030df0002018000240a60060000306633186cc00cfecc03c00cccdbfe66030c00c0c0fecc0030df0002018000240a60060000306633186cc00cfecc03c00cccdbfe66030c00c0c0fecc0030df00020180002518600600003066333c387878f87c787807879b67c3e607878078fe7c0178c0e000020180002518600600003066333c387878f87c787807879b67c3e607878078fe7c0178c0e0000201800018046007fffff0fb0000c0fb000006fb00000cdc000201800018046007fffff0fb0000c0fb000006fb00000cdc0002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000e02600000efff00c0d800020180000e02600000efff00c0d800020180000e0260001fef00003ed800020180000e0260001fef00003ed8000201800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c00180004007600770007c000038fc001130000003e300018003b801c001f18000c08cfd00071c0070007c000038fe000903c3838000e0070003c0fe0006038000e00180004007600770007c000038fc001130000003e300018003b801c001f18000c08cfd00071c0070007c000038fe000903c3838000e0070003c0fe0006038000e001800042076007700066000018fd001e18300000030000018003b801c001800000c0cc000060001c00700066000018fe00090661818000e007000660fe0006018000e001800042076007700066000018fd001e18300000030000018003b801c001800000c0cc000060001c00700066000018fe00090661818000e007000660fe0006018000e0018000434160077000663c7c183e3c3c003e3e1e3e03071f0f8003b801c001838f87c0ec78ccf8001c007000663c7c183e3c3c0661818000e007000603e7c3c3c18000e0018000434160077000663c7c183e3c3c003e3e1e3e03071f0f8003b801c001838f87c0ec78ccf8001c007000663c7c183e3c3c0661818000e007000603e7c3c3c18000e00180004307600770007c666618fe66010018fe331a03c319998003b801c001e18cccc0fccc7860001c0070007c666618fe66090661818000e007000606fe6606618000e00180004307600770007c666618fe66010018fe331a03c319998003b801c001e18cccc0fccc7860001c0070007c666618fe66090661818000e007000606fe6606618000e00180004341600770006c7e661866607e0018333f33030319998003b801c001818cccc0dcfc3060001c0070006c7e661866607e07e1818000e007000606666607e18000e00180004341600770006c7e661866607e0018333f33030319998003b801c001818cccc0dcfc3060001c0070006c7e661866607e07e1818000e007000606666607e18000e001800042366007700066606618666660001b333033030319998003b801c001818cccc0ccc0786c001c007000666066186666600661818000e0070006fd6606018000e001800042366007700066606618666660001b333033030319998003b801c001818cccc0ccc0786c001c007000666066186666600661818000e0070006fd6606018000e0018000434160077000663c7c3c3e3c3c300e331e330307998f8003b801c00183ccc7c0c478cc38001c007000663c7c3c3e3c3c0663c3c000e0070003c3e663c3c3c000e0018000434160077000663c7c3c3e3c3c300e331e330307998f8003b801c00183ccc7c0c478cc38001c007000663c7c3c3e3c3c0663c3c000e0070003c3e663c3c3c000e00180002902600770fe000060fd000060f8000303b801c0f700021c0070fe000060f80001e007f80003e001800098004200bc000000d2020800bc000000d2020200bc000000d2020200012902600770fe000060fd000060f8000303b801c0f700021c0070fe000060f80001e007f80003e001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f8000180000e0260001fef00003ed800020180000e0260001fef00003ed800020180000e02600000efff00c0d800020180000e02600000efff00c0d80002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c3000201800007007fc2ff01800007007fc2ff01800002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find command}}}{\fs20 To use the Replace command, you enter a search string exactly as you would with the Find command.  In fact, if you have already used the Find command, the search string you had entered will appear in the Replace window, and the state of the check boxes will also be the same.  Enter a replacement string in the Replace: box.  You can move to this box with the cursor or with the }{\outl\fs20 tab}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 tab}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20 .  Set the options you want with the check boxes.\par If you would like to replace all occurrences of the search string with the replacement string, you can click on the Replace All button.  To examine the target strings before deciding whether to replace them, use the Find Next button.  If you decide that you do want to change the current target string, then click the Replace, then Find button.  This button will also cause the search to continue after replacement. \par After you have found and/or replaced a string, you might want to continue editing your document.  To return to your document window, you must either close the Replace window or bring your program window to front.  To use the Replace command again, you can make it the active window by clicking anywhere on the Replace window (assuming this window is visible), or you can reissue the Replace command. \par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Replace Same}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Replace Same\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 replace same command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 replace command}}}{\fs20 Once you have entered Find and Replace strings with the Replace command, you can use the Replace Same command to replace a single occurrence of the target string.  The Replace Same command is equivalent to the Replace then Find button in the Replace dialog.  This avoids use of the Replace window, and allows you to replace strings with a single keystroke (this command's keyboard equivalent is }{\outl\caps\fs18 \u-3\'f0}{\fs20 T).  In conjunction with the }{\outl\caps\fs18 \u-3\'f0}{\fs20 G keyboard equivalent for Find, you can quickly scan through a program, replacing any occurrences of a string.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Goto}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Goto\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line numbers}}}{\fs20 The Goto command lets you move to any line in the open file by specifying a line number.  The line number is entered as a decimal value in the Goto window's line-edit box.  Clicking on the Goto button causes the desired line to appear at the top of the window, with the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  changed to the beginning of this line.  The Cancel button just causes the Goto window to vanish.\par Goto is very useful when you are looking through a list of errors written to the shell window by a compiler or assembler.  Most of these listings show line numbers along with the line where the error occurred.\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk11}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find menu\bxe }{\rxe bk11}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Extras Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Extras Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5580\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\keepn\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk12}\par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 The Extras menu has several editing commands not found in the standard Edit menu.  These commands allow you to shift blocks of text from a block-structured program to the left and right, perform several complex editing operations (like deleting all characters from the cursor to the end of the line), and set several editing options.\par The Extras menu does not appear on the menu bar}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  unless there is a file open on the desktop.\cell }\pard \qr\widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw201\pich271\picwgoal4020\pichgoal5420\macpict\bliptag1305749435\blipupi72{\*\blipuid 4dd427bb2bdbe668587d652e01291714}0fb400000000010f00c91101a00082a0008e01000a0000000002d0024098001a00000000007a00d000000000007a00c900000000007a00c9000102e70008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0009017c1ffdff00feee0009017c1ffdff00feee000a027cfffcfeff00feee000a027cfffcfeff00feee000a067cf9983938387eee000a067cf9983938387eee000a067c3c3cf8f333feee000a067c3c3cf8f333feee000a067cfe7cf9f3387eee000a067cfe7cf9f3387eee000a067cfc3c99f33f3eee000a067cfc3c99f33f3eee000a067c199e39f8387eee000a067c199e39f8387eee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0007007feaff01fc0007007feaff01fc00070060ea00011c00070060ea00011c00070060ea00011c00070060ea00011c00120960014101010001000050f5000304041c00120960014101010001000050f5000304041c00130a6002220002080080008080f6000308081f80130a6002220002080080008080f6000308081f80130a6001014105150100515140f6000314101f80130a6001014105150100515140f6000314101f80130a6000a22082080080888080f6000302201f80130a6000a22082080080888080f6000302201f80120960001111040401015041f5000340101f80120960001111040401015041f5000340101f801205600222208208fd8000a0f600030a081f801205600222208208fd8000a0f600030a081f80130a6001411144050150504040f6000314041f80130a6001411144050150504040f6000314041f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80120960014101010001504004f5000304101f80120960014101010001504004f5000304101f80130a6002220002080088000202f6000308081f80130a6002220002080088000202f6000308081f80140b600101410515011141454540f7000314041f80140b600101410515011141454540f7000314041f80130a6000a220820800a0822222f6000302021f80130a6000a220820800a0822222f6000302021f80130a6000111104040110444441f6000340041f80130a6000111104040110444441f6000340041f80140b600222208208808882a22220f700030a081f80140b600222208208808882a22220f700030a081f80140b600141114405011144444140f7000314101f80140b600141114405011144444140f7000314101f800c0060fa00010280f300011f800c0060fa00010280f300011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8018046003e001c0fc000703e00060001c0c06fd00030c331f8018046003e001c0fc000703e00060001c0c06fd00030c331f80191060033000c001800018000300006000300cfc000308331f80191060033000c001800018000300006000300cfc000308331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b1960033330c3318330183303c6666066300c0633330000431e1f801b1960033330c3318330183303c6666066300c0633330000431e1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f801007600030018000c060f300030c031f801007600030018000c060f300030c031f800f02600030fe0000c0f2000308031f800f02600030fe0000c0f2000308031f80130a600031e38f80c0e3e1e1e0f6000336031f80130a600031e38f80c0e3e1e1e0f6000336031f801209600033318cc0c0633333f5000343031f801209600033318cc0c0633333f5000343031f80130a600033318cc0c06333f1e0f6000342031f80130a600033318cc0c06333f1e0f6000342031f80130a600333318cc0c063330030f600034b331f80130a600333318cc0c063330030f600034b331f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8098001a007a000000f400d0007a000000f400c9007a000000f400c90001070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8010026001e0fc00016030f500030c1e1f8010026001e0fc00016030f500030c1e1f8011026000c0fe0002030060f40003080c1f8011026000c0fe0002030060f40003080c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3330333830060319998f70003430c1f80140b6000c3330333830060319998f70003430c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c3303303036060319980f700034b0c1f80140b6000c3303303036060319980f700034b0c1f80140b6001e331e1e301c07e7998f0f70003361e1f80140b6001e331e1e301c07e7998f0f70003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8012046003e001c0fe00013018f500030c3e1f8012046003e001c0fe00013018f500030c3e1f80110860033000c001800030f4000308331f80110860033000c001800030f4000308331f80140b600331e0c1e3e1e03038f878f7000336331f80140b600331e0c1e3e1e03038f878f7000336331f80140b60033330c33183303018ccccf70003433e1f80140b60033330c33183303018ccccf70003433e1f80140b600333f0c3f183f03018ccfcf7000342331f80140b600333f0c3f183f03018ccfcf7000342331f80140b60033300c301b3003018ccc0f700034b331f80140b60033300c301b3003018ccc0f700034b331f8014016003fee106e0e1e03f3ccc78f70003363e1f8014016003fee106e0e1e03f3ccc78f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e0fe00021e0003f200011f800f026001e0fe00021e0003f200011f80120b6003300180000c0003000018f500011f80120b6003300180000c0003000018f500011f80120b60033333e1e00c3e1f1e3e3ef500011f80120b60033333e1e00c3e1f1e3e3ef500011f8011066003333183300cfd330018f500011f8011066003333183300cfd330018f500011f80120b6003f33183300c33333f3318f500011f80120b6003f33183300c33333f3318f500011f80120b60033331b3300c333330331bf500011f80120b60033331b3300c333330331bf500011f80120b600331f0e1e01e331f1e330ef500011f80120b600331f0e1e01e331f1e330ef500011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8013026001e0fe00041e00003180f600030c3e1f8013026001e0fe00041e00003180f600030c3e1f801302600330fe00043318000180f6000308301f801302600330fe00043318000180f6000308301f80140b60033318f1b0303e367198f0f7000336301f80140b60033318f1b0303e367198f0f7000336301f80140b6003331999c01e183831b198f70003433c1f80140b6003331999c01e183831b198f70003433c1f80140b600331b1f98003183031e1f8f7000342301f80140b600331b1f98003183031e1f8f7000342301f80140b600331b18180331b3031b180f700034b301f80140b600331b18180331b3031b180f700034b301f80140b6001e0e0f1801e0e307998f0f70003363e1f80140b6001e0e0f1801e0e307998f0f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e3fe00021f000ef200011f800f026001e3fe00021f000ef200011f800f02600333fe0002198006f200011f800f02600333fe0002198006f200011f80110a603303e1e6181999860f1bf400011f80110a603303e1e6181999860f1bf400011f80110a6061e33336d81f1986199cf400011f80110a6061e33336d81f1986199cf400011f80110a64c0333336d81b19861f98f400011f80110a64c0333336d81b19861f98f400011f8011016383fe3305301999861818f400011f8011016383fe3305301999861818f400011f80110a6101e331e330198f8f0f18f400011f80110a6101e331e330198f8f0f18f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8098001a00f40000010f00d000f40000010f00c900f40000010f00c90001070060ea00011f80070060ea00011f80070060ea00011f800e026001e0fe000101e0f100011f800e026001e0fe000101e0f100011f800e076003300180000330f100011f800e076003300180000330f100011f80110a60033333e1e00301f318f0f400011f80110a60033333e1e00301f318f0f400011f80110a600333318333f1e3331998f400011f80110a600333318333f1e3331998f400011f80110a6003f3318330003331b1f8f400011f80110a6003f3318330003331b1f8f400011f80110a60033331b330033331b180f400011f80110a60033331b330033331b180f400011f80110a600331f0e1e001e1f0e0f0f400011f80110a600331f0e1e001e1f0e0f0f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080060001e9ff0080060001e9ff0080a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Shift Left}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Shift Left\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shift left command\bxe }}}{\fs20 When you are programming in a block-structured language, like C}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\fs20  or Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20 , indentation is usually used to show the structure of the program at a glance.  If the structure changes, you may want to change the indentation of large blocks of text.  The Shift Left command, along with the Shift Right command described below, can help.\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 The Shift Left command is only available if you have selected some text.  Regardless of whether you selected entire lines or not, the Shift Left command works on whole lines, not on characters.  It scans all of the lines that have at least one character selected, and deletes one space from the beginning of the line.  The effect is to move a block of selected text left by one column.  Only spaces are deleted \endash  if a line has already been shifted as far to the left as possible, it is left untouched.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Shift Right}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Shift Right\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shift right command\bxe }}}{\fs20 Like the Shift Left command, described above, Shift Right is used to move blocks of text.  The Shift Right command is only available if you have selected some text.  All of the lines in the file that have at least one character selected are moved to the right by inserting a space before the first character in the line.\par If any of the lines are 255 characters long before this command is used, the last character on each of the long lines will be lost.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Delete to End of Line}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete to End of Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If any text is selected, it is cleared from the file.  Next, all of the characters from the insertion point to the end of the line are deleted.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 delete to end of line command\bxe }}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Join Lines}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Join Lines\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 join lines command\bxe }}}{\fs20 If any text is selected, it is cleared from the file.  The line after the one the cursor is on is then removed from the file, and appended to the end of the line containing the cursor.  The insertion point is placed between the two joined lines.\par If the combined line has more than 255 characters, all of the characters past the 255th character are lost.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Insert Line}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Insert Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert line command\bxe }}}{\fs20 If any text has been selected, it is cleared.  Next, a new, blank line is inserted in the file beneath the line containing the current insertion point.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Delete Line}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 delete line command\bxe }}}{\fs20 If any text has been selected, it is cleared.  Next, the line containing the current insertion point is deleted from the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Auto Indent}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Auto Indent\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto indent command\bxe }}}{\fs20 When you are writing programs in a block-structured language, like C}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\fs20  or Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20 , indentation is often used to show program structure.  The Auto Indent option can help you indent your programs.\par If the auto indent mode has not been selected, pressing the }{\outl\fs20 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 return}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20  causes the insertion point to move to the beginning of the next line.  If you are in over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , hitting the }{\outl\fs20 return }{\fs20 key will not affect the current line; the insertion point simply moves to the start of the next line in the file.  If you are in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , the current line is split, and the cursor moves to the start of a new line.  This function is provided for assembly language and other line-oriented languages.\par When you select the Auto Indent option, the }{\outl\fs20 return}{\outl\caps\fs20  }{\fs20 key works a little differently.  Instead of moving to the first column of a line, it spaces over to match the current indentation.  If over strike has also been selected, the cursor moves to the first non-blank character in the next line.  If the line is blank, the cursor is aligned with the first non-blank character in the line above.\par With the over strike option turned off, but with auto indent turned on, the cursor still moves so that it is under the first non-blank character in the line above.  If a line has been split, blanks are inserted to move the insertion point to the proper column.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Over Strike}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Over Strike\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 The editor is capable of operating in one of two modes, insert or over strike.  Insert mode is the most common mode for desktop programs, so it is the default mode.  In insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , all characters typed are inserted into the window by first inserting a new space to the left of the insertion point, then placing the new character in the space.\par Text-based editors generally use over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 .  In over strike mode, any character typed replaces the character that the cursor is on.\par You can tell which mode you are in by pulling down the Extras menu.  If the over strike option has a check mark next to it, you are in the over strike mode.  If there is no check mark, you are in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 .  You can also tell which mode you are in by looking at the insertion point.  If the insertion point marker is a flashing vertical bar, you are in the insert mode.  If it is a flashing horizontal line, you are in over strike mode.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Show Ruler}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Show Ruler\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 show ruler command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ruler}}}{\fs20 When you select the Show Ruler command, a ruler appears in an information bar at the top of the front window.  The ruler has markings which show the column numbers.  Below these, any tab stops}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20  appear as inverted triangles.  Selecting Show Ruler a second time will remove the ruler display.\par The description of the ruler, earlier in this chapter, gives more details on how to use the ruler once it is visible.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Auto Save}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Auto Save\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto save command\bxe }}}{\fs20 The Auto Save option is a safety measure.  If you execute a program, and the program crashes, you cannot return to the desktop to save your files.  Any changes that have been made to the files since the last time they were saved to the disk are lost.\par The Auto Save command can prevent this kind of catastrophe.  Before executing any program, any file on the desktop that has been changed is saved to disk.  This takes time \endash  with floppy disks, the time can be considerable.  For that reason, this feature is an option.  Whether you select it or not should depend on how often you save your files, and how likely you think it is that your program will crash.\par Keep in mind that what we mean by a crash is a catastrophic failure, where you actually end up in the monitor, or where you have to reset the computer.  Normal run-time errors in compiled programs are trapped.  These present you with an error message, but do not endanger any files on the desktop.\par One other note of caution.  Saving your files to a RAM}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM}}}{\fs20  disk provides very little protection from a nasty crash.  Often, a crash is due to a program writing to memory that it has not reserved.  This kind of bug is very common in programs that use the toolbox or that make use of Pascal's new and dispose procedures.  It can also happen if you are using arrays and index past the end of the array.  If a program is doing this, your RAM disk}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM disks}}}{\fs20  is no safer than files on the desktop.  If you want to be sure that your files will not be lost, save them to a floppy disk or hard disk.\par {\*\bkmkend bk12}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extras menu\bxe }{\rxe bk12}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Run Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Run Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5760\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk13}The Run menu contains the commands that allow you to compile a program.  There are a variety of ways to compile a program, reflecting options suited to different sizes of programs and differing personal taste.}{\v\fs20 \cell }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw183\pich200\picwgoal3660\pichgoal4000\macpict\bliptag581651325\blipupi72{\*\blipuid 22ab4b7d3738c815d779a58d7d79506e}0b610000000000c800b71101a00082a0008e01000a00000000030802809800180000000000c800b80000000000c800b70000000000c800b7000102e90008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0009017fc1feff0080ef0009017fc1feff0080ef0009017fccfeff0080ef0009017fccfeff0080ef0009057fccccc1ff80ef0009057fccccc1ff80ef0009057fc1ccccff80ef0009057fc1ccccff80ef0009057fc9ccccff80ef0009057fc9ccccff80ef0009007ffecc01ff80ef0009007ffecc01ff80ef0009057fcce0ccff80ef0009057fcce0ccff80ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0007007fecff01c00007007fecff01c000070060ec0001c000070060ec0001c000070060ec0001c000070060ec0001c000140260003cfe00011870fd000082fa00036104fc00140260003cfe00011870fd000082fa00036104fc001402600066fd00053000060000c6fa0003418cfc001402600066fd00053000060000c6fa0003418cfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc000f0060fd000030f600003cfd0001fc000f0060fd000030f600003cfd0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00160260003cfe00011870fd0002f86003fc0003618cfc00160260003cfe00011870fd0002f86003fc0003618cfc001602600066fd00073000060000cc0003fc00034198fc001602600066fd00073000060000cc0003fc00034198fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00140b60003c6000006001c00001f0f900036180fc00140b60003c6000006001c00001f0f900036180fc00140b600066600000600300000180f900034180fc00140b600066600000600300000180f900034180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc001902600060fe66096c030cce01e3870cce18fe0004021980fc001902600060fe66096c030cce01e3870cce18fe0004021980fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc0019176000666660666c030ccc0183060ccc01800000025980fc0019176000666660666c030ccc0183060ccc01800000025980fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000e0260003cfe00011870f30001fc000e0260003cfe00011870f30001fc000d02600066fd000030f30001fc000d02600066fd000030f30001fc000f086000603cfe3e383078f40001fc000f086000603cfe3e383078f40001fc000f0860006066db331830ccf40001fc000f0860006066db331830ccf40001fc000f0860006066db331830fcf40001fc000f0860006066db331830fcf40001fc000f0860006666db331830c0f40001fc000f0860006666db331830c0f40001fc00110a60003c3cdb3e3c7878ccc0f60001fc00110a60003c3cdb3e3c7878ccc0f60001fc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000c05600060300180f10001fc000c05600060300180f10001fc000c05600060000180f10001fc000c05600060000180f10001fc000c0560006071f198f10001fc000c0560006071f198f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000c056000603199e0f10001fc000c056000603199e0f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000e0360007e79fe990080f30001fc000e0360007e79fe990080f30001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00090260007cee0001fc00090260007cee0001fc000d02600060fd000060f30001fc000d02600060fd000060f30001fc000f08600060cc7878ccf878f40001fc000f08600060cc7878ccf878f40001fc000f0360007878fecc0160ccf40001fc000f0360007878fecc0160ccf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006078c0cccc6cc0f40001fc000f0860006078c0cccc6cc0f40001fc00110a60007ccc78787c3878ccc0f60001fc00110a60007ccc78787c3878ccc0f60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00100260007cfb000307800006f80001fc00100260007cfb000307800006f80001fc001102600060fd000460000cc006f70001fc001102600060fd000460000cc006f70001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc000b0060f800000cf60001fc000b0060f800000cf60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070003ecff01fc00070003ecff01fc0002e900a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Compile to Memory}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Compile to Memory\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The Compile To Memory command compiles, links and executes the program in the front window.  Object modules are not saved to disk, but the executable file is written to disk.  This command will probably be the one you will use most to compile your programs \endash  it gives the fastest turn-around time since writing the object modules to disk is avoided.  \par You should not use this command if your program is split across multiple source files, and you need the object modules to combine with other object files to form the final executable file.  (This is called separate compilation.)  You should also not use this option if your program is made up of more than one language.  For example, if you use the append directive to append an assembly language file to the end of a Pascal program, do not use this command to compile the program.  In either of these cases, use Compile to Disk.\par There are some compilers that do not support Compile to Memory.  In these cases, you must use the Compile to Disk command, or you will get linker errors.  ORCA/Pascal supports Compile to Memory.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file menu}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 languages menu}}}{\fs20 Whenever you compile a program, information about the compilation is written to a special window called the shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  window.  You can create this window yourself, by selecting New from the File menu and then giving it a language stamp of shell.  (See the description of the Languages menu below for more information about the language stamp.)  If you have not created a shell window, the desktop will do so automatically when you compile a program for the first time.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Compile to Disk}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Compile to Disk\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to disk command\bxe }}}{\fs20 This command compiles, links, and executes your program.  Unlike Compile to Memory, the program's object files are written to disk.  With that exception, it works just like the Compile To Memory command}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Compile To Memory command}}}{\fs20 .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 ORCA creates object files as a result of compiling or assembling source files; it creates executable files as the output from linking object files.  The number of object files created is typically two, while there is one executable module.  The first object file contains some compiler initialization code; ORCA attaches the suffix .}{\i\fs20 root}{\fs20  to the name it uses for this module.  The second object file contains the rest of the generated intermediate code; ORCA attaches the suffix .}{\i\fs20 a}{\fs20  to its name.  If any other object files are created, the next successive alphabetic character is appended to the file name (i.e. .b, .c, ... , .z).  Multiple object modules could be created by performing some series of partial and/or separate compilations of various source files.  \par If your source file contains a keep directive, ORCA will use the keep name in creating the object and executable files associated with compiling your program.  For example, if your keep name is OUT, then the object files}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20  will be named OUT.ROOT and OUT.A. \par For programs which do not use a keep directive, ORCA uses default names for the object and executable files created as a result of compiling and linking your program; the names are derived from the name of your source file.  If your source file's name contains a suffix (i.e. a period within the name, followed by one or more characters), then the system calls the first object file }{\i\fs20 sourcefile}{\fs20 .root, where }{\i\fs20 sourcefile}{\fs20  is the name of your source file, with the suffix stripped.  The second object file is named }{\i\fs20 sourcefile}{\fs20 .a.  The executable file is named }{\i\fs20 sourcefile}{\fs20 .  If your source file's name does not contain a suffix, then ORCA appends the four-character suffix .}{\i\fs20 obj}{\fs20  to the output files.  The first object file will have .}{\i\fs20 root}{\fs20  appended to the .}{\i\fs20 obj}{\fs20 , and the second will have .}{\i\fs20 a}{\fs20  appended to the .}{\i\fs20 obj}{\fs20 .  For example, if your source file was named FILE1, then the object files would be named FILE1.OBJ.ROOT and FILE1.OBJ.A, while the executable file would be called FILE1.OBJ.\par A word of caution:  using the ProDOS FST, GS/OS restricts file names to 15 characters.  If you will be using the default names assigned by the desktop, you need to ensure that your source file's name is not too long when the suffixes are attached to form the object and executable files' names.\par Programmers typically assign suffixes to their file names to remind them of the file's language type.  We recommend the following suffixes:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\ri5580\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\adjustright {\fs20 Language\tab Suffix\par }\pard \qj\li360\ri5580\keepn\widctlpar\tx1800\adjustright {\fs20 Pascal\tab .PAS\par assembly\tab .ASM\par BASIC\tab .BAS\par }\pard \qj\li360\ri5580\widctlpar\tx1800\adjustright {\fs20 C\tab .CC\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 BASIC}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 We strongly recommend that you not use single-character suffixes, since these can interfere with partial compiles and multi-lingual compiles.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Check for Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Check for Errors\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 check for errors command}}}{\fs20 The Check For Errors command compiles your program, but does not save the result of the compile.  This allows the compiler to scan your program quickly for errors.  Most compilers can scan for errors about twice as fast as they can compile a program.  Once all errors have been removed, you can use one of the compile commands to compile the program.\par If you use a keep directive in your program, this command will compile your program instead of just scanning for errors.  To make effective use of this command, be sure to remove any keep directives.  Note that removal of keep directives allow you to use the automatic naming for object and executable files discussed above.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Compile}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Compile\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile command}}}{\fs20 The purpose of this command is to set the default options for compilation, or to compile a program without linking.   Note that the options you choose affect all compile commands selected to compile the front window.\par Below is a picture of the dialog box brought up by the Compile command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1043{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw512\pich330\picwgoal10240\pichgoal6600\macpict\bliptag1053564528\blipupi72{\*\blipuid 3ecc1e70ce59bdaec441964701b6389d}1cd300000000014a02001101a00082a0008e01000a00000000030802809800400000000000a002000000000000a002000000000000a00200000102c10006007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe14007fe9ff0087feff06cf1ffff0fffff3e6ff00fe14007fe9ff0087feff06cf1ffff0fffff3e6ff00fe12007fe9ff0033fdff049fffe67ff3e5ff00fe12007fe9ff0033fdff049fffe67ff3e5ff00fe17007fe9ff0d3f8603838f9f0fe660e0e3c383c3e9ff00fe17007fe9ff0d3f8603838f9f0fe660e0e3c383c3e9ff00fe17007fe9ff0d3f324999cf9e67e66673f399999fe9ff00fe17007fe9ff0d3f324999cf9e67e66673f399999fe9ff00fe17007fe9ff0d3f324999cf9e07e66673f39999c3e9ff00fe17007fe9ff0d3f324999cf9e07e66673f39999c3e9ff00fe17007fe9ff0d33324999cf9e7fe66672739999f9e9ff00fe17007fe9ff0d33324999cf9e7fe66672739999f9e9ff00fe17007fe9ff0d87864983870f0ff0e0f8e1c399c3e9ff00fe17007fe9ff0d87864983870f0ff0e0f8e1c399c3e9ff00fe0e007fe6ff009ffdff00e7e4ff00fe0e007fe6ff009ffdff00e7e4ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe060060c3000006060060c3000006060060c3000006060060c3000006060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060e0160f8f200010308d70002601f060e0160f8f200010308d70002601f06160360f801e0fc00027c61c0fc00010308d70002601f06160360f801e0fc00027c61c0fc00010308d70002601f06160360f80330fc00026000c0fc00010308d70002601f06160360f80330fc00026000c0fc00010308d70002601f06190c60f80301e33363c3c060e0c1e3fd00010308d70002601f06190c60f80301e33363c3c060e0c1e3fd00010308d70002601f06190c60f801e333338666607860c330fd00010308d70002601f06190c60f801e333338666607860c330fd00010308d70002601f06190260f800fe33060607e06060c3f0fd00010308d70002601f06190260f800fe33060607e06060c3f0fd00010308d70002601f06180260f803fe33050666006060c3fc00010308d70002601f06180260f803fe33050666006060c3fc00010308d70002601f06190c60f801e1e1f303c3c060f1e1e3fd00010308d70002601f06190c60f801e1e1f303c3c060f1e1e3fd00010308d70002601f060e0160f8f200010308d70002601f060e0160f8f200010308d70002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06140360f80318fe00011180f9000003d60002601f06140360f80318fe00011180f9000003d60002601f06140360f80330fe00011980f9000003d60002601f06140360f80330fe00011980f9000003d60002601f06170b60f80360f0f1f01d8fbf878cfc000003d60002601f06170b60f80360f0f1f01d8fbf878cfc000003d60002601f06170b60f803c19999981f99b6ccc0fc000003d60002601f06170b60f803c19999981f99b6ccc0fc000003d60002601f06170b60f80361f9f9981b99b6cfc0fc000003d60002601f06170b60f80361f9f9981b99b6cfc0fc000003d60002601f06160a60f803318181981999b6ccfb000003d60002601f06160a60f803318181981999b6ccfb000003d60002601f06170b60f80318f0f1f0188fb6c78cfc000003d60002601f06170b60f80318f0f1f0188fb6c78cfc000003d60002601f06120160f8fe00010180f7000003d60002601f06120160f8fe00010180f7000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06140460f801e003fd000003fa000003d60002601f06140460f801e003fd000003fa000003d60002601f06140460f8033003fe000003f9000003d60002601f06140460f8033003fe000003f9000003d60002601f06190d60f8030333e363c667c71f0f0f18fe000003d60002601f06190d60f8030333e363c667c71f0f0f18fe000003d60002601f06180c60f801e3333386666303199998fd000003d60002601f06180c60f801e3333386666303199998fd000003d60002601f06180260f800fe330606666303199f8ffd000003d60002601f06180260f800fe330606666303199f8ffd000003d60002601f06190260f803fe33070666636319980180fe000003d60002601f06190260f803fe33070666636319980180fe000003d60002601f06190d60f801e1f3e303c3e1c7998f0f18fe000003d60002601f06190d60f801e1f3e303c3e1c7998f0f18fe000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06120260f803f900003efc000003d60002601f06120260f803f900003efc000003d60002601f06120260f803f9000033fc000003d60002601f06120260f803f9000033fc000003d60002601f06191160f80301f3e1f331f1f1e0331f36fe1e3003d60002601f06191160f80301f3e1f331f1f1e0331f36fe1e3003d60002601f06160360f80303fb3307303e3338db300003d60002601f06160360f80303fb3307303e3338db300003d60002601f06160360f80303fb3307f0303330db1e0003d60002601f06160360f80303fb3307f0303330db1e0003d60002601f06191160f803033331f33331f300303330db030003d60002601f06191160f803033331f33331f300303330db030003d60002601f06191160f803f1f33231f1f231e0301f30db1e3003d60002601f06191160f803f1f33231f1f231e0301f30db1e3003d60002601f06150160f8fe000401e00001e0fa000003d60002601f06150160f8fe000401e00001e0fa000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06270260f803f900193e00001c60000300600603c7c3c3c03c0603c463c663c3c7c780e90002601f06270260f803f900193e00001c60000300600603c7c3c3c03c0603c463c663c3c7c780e90002601f06240260f803f9000a3300003000000300600606fe660360660606fb66010cc0e90002601f06240260f803f9000a3300003000000300600606fe660360660606fb66010cc0e90002601f062c1460f80301f3e1f331f1f1e033363c7ce33303067c3efe660c06600666066766066666060c0ce90002601f062c1460f80301f3e1f331f1f1e033363c7ce33303067c3efe660c06600666066766066666060c0ce90002601f06290360f80303fb331a303e38663061e0030066660667c606600c060667e6e66666e78780e90002601f06290360f80303fb331a303e38663061e0030066660667c606600c060667e6e66666e78780e90002601f06290360f80303fb331af030307e3060c0030066660666c607e0180607e6e66667e66600c0e90002601f06290360f80303fb331af030307e3060c0030066660666c607e0180607e6e66667e66600c0e90002601f06291560f803033331f33331f3003030603061e00300666606fe660360300606fb66010cc0e90002601f06291560f803033331f33331f3003030603061e00300666606fe660360300606fb66010cc0e90002601f062c2460f803f1f33231f1f231e030303c30f3330306663e63c663c6667e67e66623c3c663c7c78ce90002601f0698004000a000000140020000a000000140020000a000000140020000012c2460f803f1f33231f1f231e030303c30f3330306663e63c663c6667e67e66623c3c663c7c78ce90002601f06150160f8fe000401e00001e0fa000003d60002601f06150160f8fe000401e00001e0fa000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06150660f8060000303cf400040e0c000030dc00011f06150660f8060000303cf400040e0c000030dc00011f06180660f80600003066fe000060f8000306000030db00011f06180660f80600003066fe000060f8000306000030db00011f06211a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8de00011f06211a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8de00011f06211a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998de00011f06211a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998de00011f06211a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998de00011f06211a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998de00011f06211a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8de00011f06211a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8de00011f06221b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980df00011f06221b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980df00011f06100560f807fffff0ed0000f0de00011f06100560f807fffff0ed0000f0de00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06180660f8060000303cf700076000380000060380dc00011f06180660f8060000303cf700076000380000060380dc00011f061c0660f80600003066fe000060fb00076000180300060180dc00011f061c0660f80600003066fe000060fb00076000180300060180dc00011f06201960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0dd00011f06201960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0dd00011f06201960f8060000306070cccc60cc0cc0c0cdb6666618030666618660dd00011f06201960f8060000306070cccc60cc0cc0c0cdb6666618030666618660dd00011f06201960f8060000306060fccc60fc0cc078ddb66666180306666187e0dd00011f06201960f8060000306060fccc60fc0cc078ddb66666180306666187e0dd00011f061f1860f8060000306660c0cc6cc00cc00c6db66666180366666186dc00011f061f1860f8060000306660c0cc6cc00cc00c6db66666180366666186dc00011f06201960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6dd00011f06201960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6dd00011f06100560f807fffff0f8000078d300011f06100560f807fffff0f8000078d300011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06160660f8078000f03cf90001c00cfc00000cda00011f06160660f8078000f03cf90001c00cfc00000cda00011f06190660f80670073066fc0004600000c00cfc00000cda00011f06190660f80670073066fc0004600000c00cfc00000cda00011f061e1760f8060e3830603c7c3c6c7cf87807c78f8cc7c078787c78db00011f061e1760f8060e3830603c7c3c6c7cf87807c78f8cc7c078787c78db00011f061b0660f80601c0306efe660470cc60cc0cfdcc00c0fdccdb00011f061b0660f80601c0306efe660470cc60cc0cfdcc00c0fdccdb00011f061e0f60f8060e3830667e667e60cc60fc0ccffecc04c0c0ccccfcdb00011f061e0f60f8060e3830667e667e60cc60fc0ccffecc04c0c0ccccfcdb00011f061e1360f8067007306660666060cc6cc00ccc0cccc7c0fecc00c0db00011f061e1360f8067007306660666060cc6cc00ccc0cccc7c0fecc00c0db00011f061f1860f8078000f03c3c663c607c387807c78f87c8c078787c78c0dc00011f061f1860f8078000f03c3c663c607c387807c78f87c8c078787c78c0dc00011f06110560f807fffff0f500010780d700011f06110560f807fffff0f500010780d700011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06180b60f8078000f0603001800007fa0002018706d900011f06180b60f8078000f0603001800007fa0002018706d900011f06170c60f80670073060000180000c18fa000003d800011f06170c60f80670073060000180000c18fa000003d800011f061e1760f8060e38306071f1980f9f3e1e3603c3cfe3e3830e3e1fdb00011f061e1760f8060e38306071f1980f9f3e1e3603c3cfe3e3830e3e1fdb00011f061e1760f80601c030603199b0198c18333806666db33183063333db00011f061e1760f80601c030603199b0198c18333806666db33183063333db00011f061e1760f8060e3830603199e0198c183f3006066db33183063333db00011f061e1760f8060e3830603199e0198c183f3006066db33183063333db00011f061e1760f806700730603199b0198c1b303006666db3318306331fdb00011f061e1760f806700730603199b0198c1b303006666db3318306331fdb00011f061f1860f8078000f07e7999980f8c0e1e3003c3cdb3e3c78f332330dc00011f061f1860f8078000f07e7999980f8c0e1e3003c3cdb3e3c78f332330dc00011f06140560f807fffff0f5000003fd00001edb00011f06140560f807fffff0f5000003fd00001edb00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06100160f8f200003ff6ff00f0e100011f06100160f8f200003ff6ff00f0e100011f06120160f8f3000107c0f600010f80e200011f06120160f8f3000107c0f600010f80e200011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06400560f80070003cfe0009187000001c0001dc000ffe0003f00000c0fd0005ee00070003c0fe000f038000e001c000f000001f000700001cfe000007fe00011f06400560f80070003cfe0009187000001c0001dc000ffe0003f00000c0fd0005ee00070003c0fe000f038000e001c000f000001f000700001cfe000007fe00011f063e0560f800700066fd000e3000001c0001dc0019800c019800c0fc0005ee0007000660fe0013018000e001c0019800c019800c00000c18000007fe00011f063e0560f800700066fd000e3000001c0001dc0019800c019800c0fc0005ee0007000660fe0013018000e001c0019800c019800c00000c18000007fe00011f06413a60f8007000603cfe3e383078001c0001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e0007fe00011f06413a60f8007000603cfe3e383078001c0001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e0007fe00011f06412360f80070006066db331830cc001c0001dc000f198c019998c0c666660000ee0007000606fe6613618000e001c000f198c019998c33330c18300007fe00011f06412360f80070006066db331830cc001c0001dc000f198c019998c0c666660000ee0007000606fe6613618000e001c000f198c019998c33330c18300007fe00011f06413a60f80070006066db331830fc001c0001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e0007fe00011f06413a60f80070006066db331830fc001c0001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e0007fe00011f06402260f80070006666db331830c0001c0001dc0019980d819998d8c666606000ee00070006fd6613018000e001c0019980d819980c33330c1b030007fe00011f06402260f80070006666db331830c0001c0001dc0019980d819998d8c666606000ee00070006fd6613018000e001c0019980d819980c33330c1b030007fe00011f06413a60f80070003c3cdb3e3c7878001c0001dc000f0f0700f1f071e3c663c000ee00070003c3e663c3c3c000e001c000f0f0701f0f0c1f1f1e0e1e0007fe00011f06413a60f80070003c3cdb3e3c7878001c0001dc000f0f0700f1f071e3c663c000ee00070003c3e663c3c3c000e001c000f0f0701f0f0c1f1f1e0e1e0007fe00011f062a0360f80070fd000030fd00031c0001dcfc00010180fb0002ee0007f80002e001c0f4000007fe00011f062a0360f80070fd000030fd00031c0001dcfc00010180fb0002ee0007f80002e001c0f4000007fe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06120160f8f3000107c0f600010f80e200011f06120160f8f3000107c0f600010f80e200011f06100160f8f200003ff6ff00f0e100011f06100160f8f200003ff6ff00f0e100011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06060060c3ff000698004001400000014a020001400000014a020001400000014a02000001060060c3ff0006060060c3ff0006060060c3ff0006060060c3000006060060c3000006060060c3000006060060c300000606007fc3ff00fe06007fc3ff00fe02c100a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The rectangular boxes next to the first five items in the Compile window are line-edit boxes.  In the Source File: box, you can enter the name of the source program that you want to compile.  A complete or partial path name may be entered here.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files\:see executable files}{\txe }}}{\fs20 The Keep Name: box is where you enter the name of the object module produced by compiling the source file; again, this can be either a full or partial path name.  Any name supplied here takes precedence over KEEP names supplied in your source file, or over the default naming of object files described earlier in this section.  Make sure the }{\caps\fs20 keep}{\fs20  name is different from the source file name to prevent linker errors when the linker tries to overwrite the source file with the object module.  \par The Subroutines: box is used for }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 partial compilation}}}{\fs20 partial compilation.  Under ORCA, once you have compiled a complete program, you can individually compile selected subroutines.  This can be very useful when you have a long program made up of several subroutines.  If you find you have made a mistake in only a few of the subroutines, then you are not forced to recompile the entire program to correct these few mistakes.  To perform a partial compile, enter the names of the subroutines needing to be recompiled, separated by a space. Not all compilers support partial compilation.  Please refer to Chapter 8 for more information about partial compilation.\par The Language Parms: box is used to tell the system about any special parameters your compiler needs.  ORCA/Pascal does not use these fields.  If you are using another compiler, your compiler reference manual will tell you if you need these options.\par The Language Prefix: box is used to tell the system that you have installed your compilers in some }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 directory other than the default Languages prefix.  The default prefix is the subdirectory named Languages contained in the directory where you installed your desktop system.  If you are using the full ORCA shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  or more than one compiler, setting up a special directory to hold your compilers, assemblers, and linker is a good idea.  You should enter either a full or partial path name here.\par The next four boxes are check boxes.  To select any or all of the options, move the cursor over the box and click once with the mouse.  To deselect an option, click on the box a second time.\par Checking the Create a source listing box causes the compiler to produce a listing of your source file as it compiles your program, and checking the Create a symbol table box causes the compiler to produce a symbol table.  A symbol table is a summary of the all of the functions and variables detected in the program.  ORCA/Pascal does not produce a symbol table.  Generate debug code calls for the compiler to produce special code that will be used by the desktop in running the source-level debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 .  The debug box should be checked while you are in the process of debugging your program, and then deactivated after your program is working properly so that the code produced by the compiler is more compact.  Link after compiling causes the desktop to invoke the linker after successful compilation of your program.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20  \par The four buttons in the bottom of the Compile window cause the desktop to take action based on the button chosen.  Clicking the Compile button starts the compilation of your source file.  Clicking the Set Options button causes the desktop to record information about future compilations based on the choices you have made in this window.  Cancel returns you to where you were before selecting the Compile command; no system action is taken.  The Set Defaults button causes the desktop to record the information you have given in this dialog.  Then, whenever you launch the desktop, the compilation options specified here will be automatically applied to the program being compiled.  See "Setting up Defaults," later in this chapter, for further information about setting system defaults.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Link}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Link\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\fs20 The purpose of the Link command is to set default options to be used when linking the front window, or to manually link object modules.\par The linker can be regarded as an advanced feature.  You do not need to understand the function of a linker to effectively use the desktop, since the compile commands are set up to automatically call the linker.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1044{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex44\picscaley45\piccropl0\piccropr0\piccropt0\piccropb0\picw512\pich280\picwgoal10240\pichgoal5600\macpict\bliptag-1585933941\blipupi72{\*\blipuid a178918b2b029059f4b61865186d765d}1e6000000000011802001101a00082a0008e01000a00000000030802809800400000000000a002000000000000a002000000000000a00200000102c10006007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe12007fe8ff08f9fcffe7ff0fffff3fe5ff00fe12007fe8ff08f9fcffe7ff0fffff3fe5ff00fe11007fe8ff07f9ffffe7fe67ff3fe4ff00fe11007fe8ff07f9ffffe7fe67ff3fe4ff00fe15007fe8ff0bf9f8e0e67e660e0e3c383c3fe8ff00fe15007fe8ff0bf9f8e0e67e660e0e3c383c3fe8ff00fe14007fe8ff0af9fce664fe66673f399999e7ff00fe14007fe8ff0af9fce664fe66673f399999e7ff00fe15007fe8ff0bf9fce661fe66673f39999c3fe8ff00fe15007fe8ff0bf9fce661fe66673f39999c3fe8ff00fe15007fe8ff0bf9fce664fe66672739999f9fe8ff00fe15007fe8ff0bf9fce664fe66672739999f9fe8ff00fe15007fe8ff0bf81866667f0e0f8e1c399c3fe8ff00fe15007fe8ff0bf81866667f0e0f8e1c399c3fe8ff00fe0b007fe3ff01fe7fe3ff00fe0b007fe3ff01fe7fe3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe060060c3000006060060c3000006060060c3000006060060c3000006060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06170560f801e30060fe00027c61c0fd00000cd50002601f06170560f801e30060fe00027c61c0fd00000cd50002601f06170360f80333fe000403006000c0fd00000cd50002601f06170360f80333fe000403006000c0fd00000cd50002601f06180c60f80333e0e3c3c7c060e0c1e3fe00000cd50002601f06180c60f80333e0e3c3c7c060e0c1e3fe00000cd50002601f06180c60f8033330666663007860c330fe00000cd50002601f06180c60f8033330666663007860c330fe00000cd50002601f06180c60f803333067e603006060c3f0fe00000cd50002601f06180c60f803333067e603006060c3f0fe00000cd50002601f06170760f8033330660663fe6000c3fd00000cd50002601f06170760f8033330660663fe6000c3fd00000cd50002601f06180c60f801e3e363c3c1c060f1e1e3fe00000cd50002601f06180c60f801e3e363c3c1c060f1e1e3fe00000cd50002601f06110560f8000001c0f700000cd50002601f06110560f8000001c0f700000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06140360f80318fe00011180fa00000cd50002601f06140360f80318fe00011180fa00000cd50002601f06140360f80330fe00011980fa00000cd50002601f06140360f80330fe00011980fa00000cd50002601f06170b60f80360f0f1f01d8fbf878cfd00000cd50002601f06170b60f80360f0f1f01d8fbf878cfd00000cd50002601f06170b60f803c19999981f99b6ccc0fd00000cd50002601f06170b60f803c19999981f99b6ccc0fd00000cd50002601f06170b60f80361f9f9981b99b6cfc0fd00000cd50002601f06170b60f80361f9f9981b99b6cfc0fd00000cd50002601f06160a60f803318181981999b6ccfc00000cd50002601f06160a60f803318181981999b6ccfc00000cd50002601f06170b60f80318f0f1f0188fb6c78cfd00000cd50002601f06170b60f80318f0f1f0188fb6c78cfd00000cd50002601f06120160f8fe00010180f800000cd50002601f06120160f8fe00010180f800000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06270460f803018cfd000903e00001c600000c00f1fef00a0f0180f1f1f0f1f0f1f1e0e50002601f06270460f803018cfd000903e00001c600000c00f1fef00a0f0180f1f1f0f1f0f1f1e0e50002601f06270460f803000cfd000303300003fe00010c01fe99049819818061fe990398618330e50002601f06270460f803000cfd000303300003fe00010c01fe99049819818061fe990398618330e50002601f06281960f803038f8d8f9b33033363c7ce33300c199999819818198061fe990398618303e50002601f06281960f803038f8d8f9b33033363c7ce33300c199999819818198061fe990398618303e50002601f06282060f803018cce199c3303e38663061e000c0199f1819818018061f1f199f061e1e0e50002601f06282060f803018cce199c3303e38663061e000c0199f1819818018061f1f199f061e1e0e50002601f06282060f803018ccc199837030307e3060c000c0199b181f81801806199b1f9b0618030e50002601f06282060f803018ccc199837030307e3060c000c0199b181f81801806199b1f9b0618030e50002601f06281160f803018ccc19981b03030603061e000c01fe99049819818061fe990398618330e50002601f06281160f803018ccc19981b03030603061e000c01fe99049819818061fe990398618330e50002601f06280860f803f3cf8c0f9823fe0314c30f33300c18f198f1998f19f8f1f1999998f1f1e3e50002601f06280860f803f3cf8c0f9823fe0314c30f33300c18f198f1998f19f8f1f1999998f1f1e3e50002601f06110160f8fb00001efa00000cd50002601f06110160f8fb00001efa00000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06120560f807fffff0e70002fffffee600011f06120560f807fffff0e70002fffffee600011f06290660f8060000303cf400040e0c000030fa0004f0001e0f80fa000070fe000438300180c0f800011f06290660f8060000303cf400040e0c000030fa0004f0001e0f80fa000070fe000438300180c0f800011f062e0660f80600003066fe000060f8000306000030f90003ce00e60cfd00000cfe0007c180000018000180f700011f062e0660f80600003066fe000060f8000306000030f90003ce00e60cfd00000cfe0007c180000018000180f700011f063b1a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8fc0016c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0fa00011f063b1a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8fc0016c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0fa00011f063b1a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998fc0016c038060f0f1999998c198198c1833380183199b0c66660fa00011f063b1a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998fc0016c038060f0f1999998c198198c1833380183199b0c66660fa00011f063b1a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998fc0016c1c7060c061f98198c1f8198c183f300183199e0c66660fa00011f063b1a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998fc0016c1c7060c061f98198c1f8198c183f300183199e0c66660fa00011f063b1a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8fc0016ce00e60c0f1819998d980198c1b30300183199b0c663e0fa00011f063b1a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8fc0016ce00e60c0f1819998d980198c1b30300183199b0c663e0fa00011f063c1b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980fd0016f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466fa00011f063c1b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980fd0016f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466fa00011f061b0560f807fffff0ed0000f0fc0002fffffeef000103c0fa00011f061b0560f807fffff0ed0000f0fc0002fffffeef000103c0fa00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06120560f807fffff0e70002fffffee600011f06120560f807fffff0e70002fffffee600011f062e0660f8060000303cf700076000380000060380fa0004f0001e0780f7000560380001c61cfd0006031800c0001f062e0660f8060000303cf700076000380000060380fa0004f0001e0780f7000560380001c61cfd0006031800c0001f06350660f80600003066fe000060fb00076000180300060180fa0004ce00e60cc0f90012300060180003000c00018000030000c0001f06350660f80600003066fe000060fb00076000180300060180fa0004ce00e60cc0f90012300060180003000c00018000030000c0001f063e1960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0fb001fc1c7060c07cc63c03c663c3c667c3e7c183c07ce0c1e03e1e01f3878cc001f063e1960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0fb001fc1c7060c07cc63c03c663c3c667c3e7c183c07ce0c1e03e1e01f3878cc001f063e1960f8060000306070cccc60cc0cc0c0cdb6666618030666618660fb0009c03806078ccc6660663cfe6612306666186603060c330183303318c0d8001f063e1960f8060000306070cccc60cc0cc0c0cdb6666618030666618660fb0009c03806078ccc6660663cfe6612306666186603060c330183303318c0d8001f063e1960f8060000306060fccc60fc0cc078ddb66666180306666187e0fb001fc1c70600ccc6c7e07e187e6066306666187e03060c3f018330331878f0001f0698004000a000000118020000a000000118020000a000000118020000013e1960f8060000306060fccc60fc0cc078ddb66666180306666187e0fb001fc1c70600ccc6c7e07e187e6066306666187e03060c3f018330331878f0001f063d1860f8060000306660c0cc6cc00cc00c6db66666180366666186fa001fce00e60cccc6c600603c606666366666186003060c3001b33033180cd8001f063d1860f8060000306660c0cc6cc00cc00c6db66666180366666186fa001fce00e60cccc6c600603c606666366666186003060c3001b33033180cd8001f063e1960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6fb001ff0001e0787c383c03c663c3c3e1c3e7c3c3c030f1e1e00e1e01f3c78ccc01f063e1960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6fb001ff0001e0787c383c03c663c3c3e1c3e7c3c3c030f1e1e00e1e01f3c78ccc01f06160560f807fffff0f8000078f10002fffffee600011f06160560f807fffff0f8000078f10002fffffee600011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f062b0860f800e00e01f333e0fe00051c01c01e0c1efe000603803803c7c3c0fe00057007008cf878e800011f062b0860f800e00e01f333e0fe00051c01c01e0c1efe000603803803c7c3c0fe00057007008cf878e800011f06290760f8030fe1818333fd0005600030333c30fe000c0c0006066666600000018000c0fecce800011f06290760f8030fe1818333fd0005600030333c30fe000c0c0006066666600000018000c0fecce800011f062a0760f8063ff8c181e3fd0005c00018300c3efe000f18000306066660000003000060eccccce800011f062a0760f8063ff8c181e3fd0005c00018300c3efe000f18000306066660000003000060eccccce800011f062b0860f8067ffcc1e0c3c0fe0005c000181e0c33fe000f18000306066660000003000060fccccce800011f062b0860f8067ffcc1e0c3c0fe0005c000181e0c33fe000f18000306066660000003000060fccccce800011f062a0760f8063ff8c181e3fd0005c00018030c33fe000f180003060667e0000003000060dcccfce800011f062a0760f8063ff8c181e3fd0005c00018030c33fe000f180003060667e0000003000060dcccfce800011f06290760f8030fe1818333fd0005600030330c33fe000c0c0006066666600000018000c0fecce800011f06290760f8030fe1818333fd0005600030330c33fe000c0c0006066666600000018000c0fecce800011f062b0860f800e00e01f333e0fe00051c01c01e3f1efe000603803803c7c660fe0005700700c4f8cce800011f062b0860f800e00e01f333e0fe00051c01c01e3f1efe000603803803c7c660fe0005700700c4f8cce800011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f061a0560f807fffff0f200031fffffc0f0000307fffff0f100011f061a0560f807fffff0f200031fffffc0f0000307fffff0f100011f06300c60f8078000f03c3c063c3c03c0f90004180000c104fb00010780f90007060000307c000060fe000103c0fa00011f06300c60f8078000f03c3c063c3c03c0f90004180000c104fb00010780f90007060000307c000060fe000103c0fa00011f06300c60f80670073066660c66660660f90004180000c18cfb00010cc0f9000c06000030660000603000000660fa00011f06300c60f80670073066660c66660660f90004180000c18cfb00010cc0f9000c06000030660000603000000660fa00011f063d1060f8060e38306060186660066c31f363c0fd0004180000c1dcfe78087c7c780cd863e6c780fd000e06000030663c3c667c3c7c0667c7c0fc00011f063d1060f8060e38306060186660066c31f363c0fd0004180000c1dcfe78087c7c780cd863e6c780fd000e06000030663c3c667c3c7c0667c7c0fc00011f063d1060f80601c0306e3c30663c066db3338660fd0007180000c1fcccc0c0fecc050cdb66670cc0fd000e060000306666606c30666606666660fc00011f063d1060f80601c0306e3c30663c066db3338660fd0007180000c1fcccc0c0fecc050cdb66670cc0fd000e060000306666606c30666606666660fc00011f063d1060f8060e3830660660660607edb33307e0fd0010180000c1acfc7878ccccfc0fdb66660fc0fd000e06000030667e3c7830666607e66660fc00011f063d1060f8060e3830660660660607edb33307e0fd0010180000c1acfc7878ccccfc0fdb66660fc0fd000e06000030667e3c7830666607e66660fc00011f063b0f60f8067007306666c066660666633306fc000f180000c18cc00c0ccc7cc00cccc6660cfc000e060000306660066c36666606666660fc00011f063b0f60f8067007306666c066660666633306fc000f180000c18cc00c0ccc7cc00cccc6660cfc000e060000306660066c36666606666660fc00011f063d1060f8078000f03c3c803c3c066661f303c0fd0004180000c18cfe78087c8c780cccc3e60780fd000e060000307c3c3c661c3c7c0667c7c6fc00011f063d1060f8078000f03c3c803c3c066661f303c0fd0004180000c18cfe78087c8c780cccc3e60780fd000e060000307c3c3c661c3c7c0667c7c6fc00011f06250560f807fffff0f200031fffffc0fc000078f6000307fffff0fb000360000606fb00011f06250560f807fffff0f200031fffffc0fc000078f6000307fffff0fb000360000606fb00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060e0160f8f5000003f5ffde00011f060e0160f8f5000003f5ffde00011f06100160f8f500007cf50000f8df00011f06100160f8f500007cf50000f8df00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f063d1660f800700060300180003800001dc000f000000f00000cfd00050ee00070003cfd000f38000e001c000f000001f000700001c0fe000070fc00011f063d1660f800700060300180003800001dc000f000000f00000cfd00050ee00070003cfd000f38000e001c000f000001f000700001c0fe000070fc00011f063c1560f800700060000180003800001dc0019800c019800cfc00050ee000700066fd001318000e001c0019800c019800c00000c180000070fc00011f063c1560f800700060000180003800001dc0019800c019800cfc00050ee000700066fd001318000e001c0019800c019800c00000c180000070fc00011f063f3860f80070006071f198003800001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e00070fc00011f063f3860f80070006071f198003800001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e00070fc00011f063e2060f8007000603199b0003800001dc000f198c019998c0c666660000ee000700060fd661318000e001c000f198c019998c33330c183000070fc00011f063e2060f8007000603199b0003800001dc000f198c019998c0c666660000ee000700060fd661318000e001c000f198c019998c33330c183000070fc00011f063f3860f8007000603199e0003800001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e00070fc00011f063f3860f8007000603199e0003800001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e00070fc00011f063e1f60f8007000603199b0003800001dc0019980d819998d8c666606000ee0007000fd66146018000e001c0019980d819980c33330c1b0300070fc00011f063e1f60f8007000603199b0003800001dc0019980d819998d8c666606000ee0007000fd66146018000e001c0019980d819980c33330c1b0300070fc00011f063f2260f80070007e799998003800001dc000f0f0700f1f071e3c663c000ee00070003c3e66fe3c12000e001c000f0f0701f0f0c1f1f1e0e1e00070fc00011f063f2260f80070007e799998003800001dc000f0f0700f1f071e3c663c000ee00070003c3e66fe3c12000e001c000f0f0701f0f0c1f1f1e0e1e00070fc00011f06270360f80070fb00043800001dc0fc000018fb00030ee00070f900020e001cf3000070fc00011f06270360f80070fb00043800001dc0fc000018fb00030ee00070f900020e001cf3000070fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06100160f8f500007cf50000f8df00011f06100160f8f500007cf50000f8df00011f060e0160f8f5000003f5ffde00011f060e0160f8f5000003f5ffde00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006060060c3000006060060c3000006060060c3000006060060c300000606007fc3ff00fe06007fc3ff00fe02c100a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The line-edit box following Object File: is where you enter the base name of the object files you wish to be linked.  The object file's name should not include any system-added file name extensions.  For example, if you had compiled a program named BULLSEYE.PAS, using a keep name of BULLSEYE, then the system would have created object modules named BULLSEYE.ROOT and BULLSEYE.A.  To link these two object modules, you would enter BULLSEYE as the name of the Object File.  Default object file names are discussed above with the Compile command.\par The Object File box can also be used to perform separate compilation}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 separate compilation}}}{\fs20 .  The first object file name you enter should contain the main program; the other names can be specified in any order.  Enter only the base names of the object files}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 , as explained in the preceding paragraph.  The linker will automatically load all of the object modules produced from compiling a single source file.  See Chapter 8 for more information about separate compilation.\par The line-edit box following Keep Name: is where you enter the name of the executable file that the system will create upon successful linking of the object modules.  It is customary, but not required, to use the same name as that given in the Object File box; the system knows which files are object modules and which are executable images because the object module names always contain system-added extensions.  Using the bull's eye example above, then, we would enter BULLSEYE for the object file and BULLSEYE for the Keep Name.  The object modules would be called BULLSEYE.ROOT and BULLSEYE.A, while the executable file would be named BULLSEYE.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\fs20 The Library Prefix: box is used to tell the system that you have installed the libraries you and your compilers use in some }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 directory other than the default library prefix.  The default prefix is the subdirectory named LIBRARIES contained in the directory where you installed your desktop system.  You must enter a full path name here.\par As with the Compile window, the next four boxes are check boxes.  The first box gives you the option of producing a listing of the link.  The second box is used to specify whether a symbol table is to be generated during linking.  The third box lets you specify whether execution of the program should immediately occur after successful linking of the object modules.  The fourth box tells the system whether or not to save the executable image to disk.  This last option is for future expansion; currently, the linker saves the file to disk if there is a keep name, and does not save the file if there is no keep name.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\fs20 The radio buttons below the check boxes allow you to set the file type of the executable image.  Different file types are used depending upon the function of the program.  If you want to execute the program without leaving the development environment, use a file type of EXE.  You must use EXE to use the debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 , shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  window, or graphics window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 If you wish to create a stand-alone program that can be launched from the Finder, change the file type to S16, turn debugging off, and compile your program.  S16 programs can be executed by the development environment, but the desktop shuts down before executing your program.  S16 programs can also be executed from the Finder; EXE programs cannot.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDA}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:NDA}}}{\fs20 Classic desk accessories}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 classic desk accessories}}}{\fs20  have a file type of CDA, while new desk accessories have a file type of NDA.  You can execute a new desk accessory from the desktop as if it were an EXE program, but you must still set the file type to NDA.  Once the desk accessory is debugged, copy the executable image to the DESK.ACCS subdirectory of the SYSTEM }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 directory.  Remember to turn debugging off before the final compilation!  After the desk accessory has been installed into the SYSTEM/DESK.ACCS directory, you can access it from the Apple menu of any desktop program.\par Classic desk accessories}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desk accessories}}}{\fs20  cannot be debugged directly from the desktop.  To debug a classic desk accessory, compile it as an EXE program with a main program that calls the initialization and action functions.  Once debugged, remove the main program from the source code, turn off debugging, change the file type to CDA, and then recompile your program.  You can then copy the finished executable program to the SYSTEM:DESK.ACCS directory, where it can be accessed by using the three-key command sequence }{\outl\caps\fs18 \u-3\'f0}{\outl\fs18 -control-esc}{\fs20 .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\fs20 The three check boxes below the radio buttons are used to set bits in the auxiliary file type; these are used by various program launchers to decide how to execute your program.  The complete description for these options is in Apple's File Type Notes for file type $B3 (S16) or $B5 (EXE).  Briefly, "GS/OS Aware" tells the program launcher that your program is a modern one that knows about the longer prefixes, and will use prefix 8 for the default prefix.  The ORCA/Pascal libraries assume you are using the new prefixes, so this option should be checked.  "Message Aware" tells the Finder that your program uses messages passed by the message center.  This would be true of most desktop programs.  "Desktop App." tells the Finder that the program is a desktop application.  In this case, the Finder shuts down the tools in a special way so the text screen doesn't flash on the screen as your program starts.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cancel button}}}{\fs20 Clicking the Link button causes the system to begin linking the object modules named in the Object File: box.  Selecting Set Options causes the information entered in the dialog to replace the previous linker defaults.  The Cancel button closes the dialog without saving the changes.  The Set Defaults button causes the desktop to record the information you have given in this dialog.  Then, whenever you launch the desktop, the linker options specified here will be automatically applied to the program being linked.  See "Setting up Defaults," later in this chapter, for further information about setting system defaults.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Execute}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Execute\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 execute command\bxe }}}{\fs20 The Execute command allows you to run an executable program.  The program's file type must be EXE, S16, or SYS.  The dialog box brought up by this command is shown below:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1045{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw426\pich250\picwgoal8520\pichgoal5000\macpict\bliptag-2064906402\blipupi72{\*\blipuid 84ec075e10059aaf74eecdb95e561f7d}18d50000000000fa01aa1101a00082a0008e01000a0000000002d0024098003600000000003901b000000000003901aa00000000003901aa000102cb0006007fcdff008006007fcdff0080070060ce00010180070060ce00010180070060ce00010180070060ce00010180070060ceff01c180070060ceff01c180070060ceff01c180070060ceff01c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180120460f80007c0fa00020f8c38dd000207c180120460f80007c0fa00020f8c38dd000207c180150360f80006fd000006fe00020c0018dd000207c180150360f80006fd000006fe00020c0018dd000207c180170f60f800060cc7878ccf87807c0c1c183cde000207c180170f60f800060cc7878ccf87807c0c1c183cde000207c180170f60f80007878cccccc60cc0cc0f0c1866de000207c180170f60f80007878cccccc60cc0cc0f0c1866de000207c180170f60f80006030fcc0cc60fc0cc0c0c187ede000207c180170f60f80006030fcc0cc60fc0cc0c0c187ede000207c180170f60f80006078c0cccc6cc00cc0c0c1860de000207c180170f60f80006078c0cccc6cc00cc0c0c1860de000207c180170f60f80007ccc78787c387807c0c1e3c3cde000207c180170f60f80007ccc78787c387807c0c1e3c3cde000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180230160f8fb000f0c7800078000000380000067c0000006fe000306000060ed000207c180230160f8fb000f0c7800078000000380000067c0000006fe000306000060ed000207c180261760f800000ff0000018cc000cc0000001800000c660000006fe0003060000c0ed000207c180261760f800000ff0000018cc000cc0000001800000c660000006fe0003060000c0ed000207c180261e60f80000300ffc0030c0780c07dfc7c183c3c18663c7c3c7cfe1f36663c180ed000207c180261e60f80000300ffc0030c0780c07dfc7c183c3c18663c7c3c7cfe1f36663c180ed000207c180251460f800003000030060c0cc078cdb666186660307c6fe66056db33386c603ec000207c180251460f800003000030060c0cc078cdb666186660307c6fe66056db33386c603ec000207c180250760f8000fffffc300fec01200ccdb666187e3c60667e666066db3330783c6ec000207c180250760f8000fffffc300fec01200ccdb666187e3c60667e666066db3330783c6ec000207c180251d60f800030000330180cccc0cccdb666186006c06660666666db33306c06cec000207c180251d60f800030000330180cccc0cccdb666186006c06660666666db33306c06cec000207c180250e60f80000c0000f01007878c787db67fec30bc807c3c663c66db1f30663c8ec000207c180250e60f80000c0000f01007878c787db67fec30bc807c3c663c66db1f30663c8ec000207c180120660f800003ffffffa000006dd000207c180120660f800003ffffffa000006dd000207c18098003600390000007201b000390000007201aa00390000007201aa0001090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c180230660f8000800ffc0ec000718030030000001c0fe000301f0c006fc0005e0000007c180230660f8000800ffc0ec000718030030000001c0fe000301f0c006fc0005e0000007c180260960f8000800c03c00f8c6ef0007180cc03000000380fe000301980006fc000570000007c180260960f8000800c03c00f8c6ef0007180cc03000000380fe000301980006fc000570000007c180270960f8000800c03f00c006ef000018fe300300000380fe00040199c3c660fd000570000007c180270960f8000800c03f00c006ef000018fe300300000380fe00040199c3c660fd000570000007c180280a60f8000800c00300c1c7c0f0000718c00c3000000380fe00040198c606c0fd000570000007c180280a60f8000800c00300c1c7c0f0000718c00c3000000380fe00040198c606c0fd000570000007c180280a60f8000800c00300f0c660f000071bf03f3000000380fe00040198c3c780fd000570000007c180280a60f8000800c00300f0c660f000071bf03f3000000380fe00040198c3c780fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe00040198c066c0fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe00040198c066c0fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe000401f1e3c660fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe000401f1e3c660fd000570000007c180200a60f8000800ffff00c1e7c0f0000018fe3003000001c0f50005e0000007c180200a60f8000800ffff00c1e7c0f0000018fe3003000001c0f50005e0000007c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c180150660f8000800ffc0ec00031ffffff0ee000207c180150660f8000800ffc0ec00031ffffff0ee000207c1801b0860f8000800c03c0078fe000060f2000318000030ee000207c1801b0860f8000800c03c0078fe000060f2000318000030ee000207c1801b0c60f8000800c03f003000003060f2000318000030ee000207c1801b0c60f8000800c03f003000003060f2000318000030ee000207c1801b0c60f8000800c0030031fc3e7c7cf2000318000030ee000207c1801b0c60f8000800c0030031fc3e7c7cf2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663666f2000318000030ee000207c1801b0c60f8000800c0030031b6663666f2000318000030ee000207c1801b0c60f8000800ffff0079b63e1c66f2000318000030ee000207c1801b0c60f8000800ffff0079b63e1c66f2000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f8000fe9ff03f8000030ee000207c180120360f8000fe9ff03f8000030ee000207c180150660f8000fff003fecff03f8000030ee000207c180150660f8000fff003fecff03f8000030ee000207c180190a60f8000fff3fc3ff07ff3ff0ff03f8000030ee000207c1809800360072000000ab01b00072000000ab01aa0072000000ab01aa0001190a60f8000fff3fc3ff07ff3ff0ff03f8000030ee000207c1801f0860f8000fff3fc0ff33eeff03f8000030fe000007f6ff00f8fe000207c1801f0860f8000fff3fc0ff33eeff03f8000030fe000007f6ff00f8fe000207c180230c60f8000fff3ffcff3326301e1ff2ff03f8000030fe0000f8f6000607c0000007c180230c60f8000fff3ffcff3326301e1ff2ff03f8000030fe0000f8f6000607c0000007c180230c60f8000fff3ffcff071f324ccff2ff07f80000300000078ff6ff06fc78000007c180230c60f8000fff3ffcff071f324ccff2ff07f80000300000078ff6ff06fc78000007c180230c60f8000fff3ffcff3f3f324c0ff2ff07f800003000000e78f60006079c000007c180230c60f8000fff3ffcff3f3f324c0ff2ff07f800003000000e78f60006079c000007c180260b60f8000fff3ffcff3f3f324cf1ff07f800003000001dc0fe000101e0fa0005ee000007c180260b60f8000fff3ffcff3f3f324cf1ff07f800003000001dc0fe000101e0fa0005ee000007c180270c60f8000fff0000ff3f3e124e1ff2ff07f800003000003b80fe00010330fa000577000007c180270c60f8000fff0000ff3f3e124e1ff2ff07f800003000003b80fe00010330fa000577000007c180210360f8000fe9ff07f800003000003b80fe00040333e1e3e0fd000577000007c180210360f8000fe9ff07f800003000003b80fe00040333e1e3e0fd000577000007c180210360f80008e900071800003000003b80fe000003fe330030fd000577000007c180210360f80008e900071800003000003b80fe000003fe330030fd000577000007c180240660f8000800ffc0ec00071800003000003b80fe0004033333f330fd000577000007c180240660f8000800ffc0ec00071800003000003b80fe0004033333f330fd000577000007c180260860f8000800c03c0078ee00071800003000003b80fe00040333330330fd000577000007c180260860f8000800c03c0078ee00071800003000003b80fe00040333330330fd000577000007c180260860f8000800c03f00ccee00071800003000003b80fe000401e3e1e330fd000577000007c180260860f8000800c03f00ccee00071800003000003b80fe000401e3e1e330fd000577000007c180270d60f8000800c00300c07cc63e3e3cf300071800003000001dc0fd000003fa0005ee000007c180270d60f8000800c00300c07cc63e3e3cf300071800003000001dc0fd000003fa0005ee000007c180230a60f8000800c0030078ccc6fe66f300071800003000000e78f60006079c000007c180230a60f8000800c0030078ccc6fe66f300071800003000000e78f60006079c000007c180240d60f8000800c003000ccc6c66667ef30007180000300000078ff6ff06fc78000007c180240d60f8000800c003000ccc6c66667ef30007180000300000078ff6ff06fc78000007c180240d60f8000800c00300cccc6c663e60f3000318000030fe0000f8f6000607c0000007c180240d60f8000800c00300cccc6c663e60f3000318000030fe0000f8f6000607c0000007c180240d60f8000800ffff00787c383e463cf3000318000030fe000007f6ff00f8fe000207c180240d60f8000800ffff00787c383e463cf3000318000030fe000007f6ff00f8fe000207c180160360f80008f900003cf2000318000030ee000207c180160360f80008f900003cf2000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801e0360f80008e9000718000030000001c0fe00011e1cfa0005e0000007c1801e0360f80008e9000718000030000001c0fe00011e1cfa0005e0000007c1801e0360f80008e900071800003000000380fe0001330cfa000570000007c1801e0360f80008e900071800003000000380fe0001330cfa000570000007c180200360f80008e900071800003000000380fe0001300cfe1efd000570000007c180200360f80008e900071800003000000380fe0001300cfe1efd000570000007c180210360f80008e900071800003000000380fe0004300c333033fd000570000007c180210360f80008e900071800003000000380fe0004300c333033fd000570000007c180210360f80008e900071800003000000380fe0004300c331e3ffd000570000007c180210360f80008e900071800003000000380fe0004300c331e3ffd000570000007c180210360f80008e900071800003000000380fe0004330c330330fd000570000007c180210360f80008e900071800003000000380fe0004330c330330fd000570000007c18098003600ab000000e401b000ab000000e401aa00ab000000e401aa00011d0360f80008e900071800003000000380fe00fc1efd000570000007c1801d0360f80008e900071800003000000380fe00fc1efd000570000007c180190360f80008e9000718000030000001c0f50005e0000007c180190360f80008e9000718000030000001c0f50005e0000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e900031ffffff0ee000207c180120360f80008e900031ffffff0ee000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e90003183ff030fe000078f600060780000007c180220360f80008e9000018fe3007000001c0000001e0fe000101c0fe0005e0000007c180220360f80008e9000018fe3007000001c0000001e0fe000101c0fe0005e0000007c180210360f80008e9000018fe30070000038000000330fd0000c0fe000570000007c180210360f80008e9000018fe30070000038000000330fd0000c0fe000570000007c180220360f80008e9000018fe300c0000038000000301f3e1e1e0c0fe000570000007c180220360f80008e9000018fe300c0000038000000301f3e1e1e0c0fe000570000007c180220360f80008e9000b1bf03f300000038000000303fe330130c0fe000570000007c180220360f80008e9000b1bf03f300000038000000303fe330130c0fe000570000007c180220360f80008e9001018c00c300000038000000303333303f0c0fe000570000007c180220360f80008e9001018c00c300000038000000303333303f0c0fe000570000007c180210360f80008e9000018fe300600000380000003fd330100c0fe000570000007c180210360f80008e9000018fe300600000380000003fd330100c0fe000570000007c180220360f80008e90010180cc03000000380000001e1f331e1e1e0fe000570000007c180220360f80008e90010180cc03000000380000001e1f331e1e1e0fe000570000007c180190360f80008e9000718030030000001c0f50005e0000007c180190360f80008e9000718030030000001c0f50005e0000007c1801a0360f80008e9000318000030fe000078f600060780000007c18098003600e4000000fa01b000e4000000fa01aa00e4000000fa01aa00011a0360f80008e9000318000030fe000078f600060780000007c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180070060ceff01c180070060ceff01c180070060ceff01c180070060ceff01c180070060ce00010180070060ce00010180070060ce00010180070060ce0001018006007fcdff008006007fcdff008002cb00a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 To execute a file, simply open it.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Execute Options...}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Execute Options...\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 execute options command\bxe }}}{\fs20 The Execute Options command allows you to set certain characteristics that effect the Execute command and programs with debug code that are executed from the shell window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1046{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw550\pich228\picwgoal11000\pichgoal4560\macpict\bliptag1419490931\blipupi72{\*\blipuid 549bb67394fb45731626b32c5d7f3e5b}0fa20000000000e402261101a00082a0008e01000a0000000003080280980046000000000094022800000000009402260000000000940226000102bb0007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80018007febff01f07ffbff000ffcff04f9fc3ffffce7ff01f80018007febff01f07ffbff000ffcff04f9fc3ffffce7ff01f80019007febff00f3fdff03f3fffe67fcff03f9f99ffce6ff01f80019007febff00f3fdff03f3fffe67fcff03f9f99ffce6ff01f80020007febff15f3e670f0e660f0fe7f0c0603c183c1f9983838f0e0f0eaff01f80020007febff15f3e670f0e660f0fe7f0c0603c183c1f9983838f0e0f0eaff01f80020007febff0bf0f0e6666673e67e7e649249fe9906f9999cfce66667eaff01f80020007febff0bf0f0e6666673e67e7e649249fe9906f9999cfce66667eaff01f80020007febff0bf3f9e067e673e07e7e649249fe9906f9999cfce66670eaff01f80020007febff0bf3f9e067e673e07e7e649249fe9906f9999cfce66670eaff01f80021007febff0bf3f0e7e6667267fe66649249fe9907f9999c9ce6667e7febff01f80021007febff0bf3f0e7e6667267fe66649249fe9907f9999c9ce6667e7febff01f80020007febff15f06670f0f078f0ff0f0c9249c199c1fc383e3870e670eaff01f80020007febff15f06670f0f078f0ff0f0c9249c199c1fc383e3870e670eaff01f8000b007fdbff00f9e5ff01f8000b007fdbff00f9e5ff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f800070060be00011800070060be00011800070060be00011800070060be00011800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800110360f801e0fc00020c0c06ca00027c1800110360f801e0fc00020c0c06ca00027c1800100360f80330fc00010c0cc900027c1800100360f80330fc00010c0cc900027c1800160e60f80301e7f3f87cf87c0c0e3e1e30cd00027c1800160e60f80301e7f3f87cf87c0c0e3e1e30cd00027c1800150660f8030336db6cfecc030c063333cc00027c1800150660f8030336db6cfecc030c063333cc00027c1800150660f8030336db6cfecc030c06333fcc00027c1800150660f8030336db6cfecc030c06333fcc00027c1800150660f8033336db6cfecc030c063330cc00027c1800150660f8033336db6cfecc030c063330cc00027c1800160e60f801e1e6db6c7ccc7c0fcf331e30cd00027c1800160e60f801e1e6db6c7ccc7c0fcf331e30cd00027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f83fc2ff03f07c18000b0260f83fc2ff03f07c18000b0260f830c20003307c18000b0260f830c20003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000b0260f830c20003307c18000b0260f830c20003307c18000b0260f83fc2ff03f07c18000b0260f83fc2ff03f07c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f807c2ff03807c18000b0260f807c2ff03807c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800180160f8f300011ff0fa000101fff60001ff80e600027c1800180160f8f300011ff0fa000101fff60001ff80e600027c1800200160f8f30003e00e00f0fc00040e00e01f80fa00040700700780e800027c1800200160f8f30003e00e00f0fc00040e00e01f80fa00040700700780e800027c18002a0460f803e003fe000320800180fe0004030fe18198fc000330001806f9000418000c0cc6e800027c18002a0460f803e003fe000320800180fe0004030fe18198fc000330001806f9000418000c0cc6e800027c1800320460f8033003fe000331800180fe0005063ff8c180f0fd000760000c061b1f1e1efd00073000060c0f878f80eb00027c1800320460f8033003fe000331800180fe0005063ff8c180f0fd000760000c061b1f1e1efd00073000060c0f878f80eb00027c1800311460f80331e3e331f03b8f0f8f180000067ffcc1b998fd000460000c061cfe33fd000730000607860cccc0eb00027c1800311460f80331e3e331f03b8f0f8f180000067ffcc1b998fd000460000c061cfe33fd000730000607860cccc0eb00027c1800310260f803fd3301303ffe9908800000063ff8c19998fd000760000c061833303ffd000730000600c60fccc0eb00027c1800310260f803fd3301303ffe9908800000063ff8c19998fd000760000c061833303ffd000730000600c60fccc0eb00027c1800321460f80333f33333303599999f800000030fe1819998fd00073000180618333330fd000718000c0cc6cc0cc0eb00027c1800321460f80333f33333303599999f800000030fe1819998fd00073000180618333330fd000718000c0cc6cc0cc0eb00027c1800310b60f80333033331f031999998fd0004e00e00f0f0fd00070e00e006181f1e1efd00070700700783878f80eb00027c1800310b60f80333033331f031999998fd0004e00e00f0f0fd00070e00e006181f1e1efd00070700700783878f80eb00027c1800270c60f803e1e3e1f230318f0f8f18fe00011ff0fa000101fff60001ff80fe00000cea00027c1800270c60f803e1e3e1f230318f0f8f18fe00011ff0fa000101fff60001ff80fe00000cea00027c18000e0160f8fd000101e0c600027c18000e0160f8fd000101e0c600027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18009800460094000000e402280094000000e402260094000000e402260001090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f807c2ff03807c18000b0260f807c2ff03807c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000f0360f80000fdff0080c700027c18000f0360f80000fdff0080c700027c18000f0360f8001ffd00007cc700027c18000f0360f8001ffd00007cc700027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c18001d0960f80770003c63000770fe000270003cfd000238000ed500027c18001d0960f80770003c63000770fe000270003cfd000238000ed500027c18001d0960f80770006666000770fe0002700066fd000218000ed500027c18001d0960f80770006666000770fe0002700066fd000218000ed500027c18001e0960f8077000666c000770fe00097000603e7c3c3c18000ed500027c18001e0960f8077000666c000770fe00097000603e7c3c3c18000ed500027c18001d0960f80770006678000770fe0002700060fd660218000ed500027c18001d0960f80770006678000770fe0002700060fd660218000ed500027c18001e0960f8077000666c000770fe00097000606666607e18000ed500027c18001e0960f8077000666c000770fe00097000606666607e18000ed500027c18001d0960f80770006666000770fe00017000fd66036018000ed500027c18001d0960f80770006666000770fe00017000fd66036018000ed500027c18001e0960f80770003c63000770fe000470003c3e66fe3c01000ed500027c18001e0960f80770003c63000770fe000470003c3e66fe3c01000ed500027c1800180360f80770fd00010770fe000070f900000ed500027c1800180360f80770fd00010770fe000070f900000ed500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c18000f0360f8001ffd00007cc700027c18000f0360f8001ffd00007cc700027c18000f0360f80000fdff0080c700027c18000f0360f80000fdff0080c700027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800070060be00011800070060be00011800070060be00011800070060be0001180007007fbeff01f80007007fbeff01f80002bb00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The command line is passed to the program as if it were typed from the shell window.  Be sure and include the name of the program, since the program will expect to find the name.  Do not use I/O redirection, piping, or multiple commands on one line.\par The "Debug Mode" radio buttons tell the debugger how to execute the program.  The three starting modes start the program at full speed ("Go"), in trace mode ("Trace") or in single-step mode ("Step").  If the program was compiled with debug code off, the setting of these buttons is ignored.\par }\pard \widctlpar\adjustright {\*\bkmkend bk13}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run menu\bxe }{\rxe bk13}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Debug Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Debug Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5580\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 The Debug menu contains commands that allow you to operate the source-level debugger.  All of the source-level debug options require the compiler to generate special debug code}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 .  Many compilers support the +d flag to generate this debug code.  If they do not, these debugging options cannot be used.  Chapter 4 has information about debugging desktop programs, as well as a tutorial on the debugger itself.}{\v\fs20 \cell }\pard \qr\widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1047{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw211\pich248\picwgoal4220\pichgoal4960\macpict\bliptag-540904951\blipupi72{\*\blipuid dfc27209380d6d4c23c3ef235c2deae4}0ebf0000000000f800d31101a00082a0008e01000a000000000308028098001c0000000000f800d80000000000f800d30000000000f800d3000102e50008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed000b037fc1ffcffeff0080ed000b037fc1ffcffeff0080ed000b037fccffcffeff0080ed000b037fccffcffeff0080ed000b077fcce1c1cce0ff80ed000b077fcce1c1cce0ff80ed0009007ffccc01ff80ed0009007ffccc01ff80ed000b027fccc0fecc01ff80ed000b027fccc0fecc01ff80ed000b077fcccfcccce0ff80ed000b077fcccfcccce0ff80ed000b077fc1e1c1e0dcff80ed000b077fc1e1c1e0dcff80ed000a007ffdff02e1ff80ed000a007ffdff02e1ff80ed0008007ffbff0080ed0008007ffbff0080ed0008007fe9ff00fcff0008007fe9ff00fcff00080060e900000cff00080060e900000cff00080060e900000cff00080060e900000cff000c0260003ced0004061e0fc0000c0260003ced0004061e0fc0000d0360006630ee000404180fc0000d0360006630ee000404180fc0000f056000607c3c7cf000041b180fc0000f056000607c3c7cf000041b180fc0000f0560003c306666f0000421980fc0000f0560003c306666f0000421980fc0000f05600006307e66f0000421180fc0000f05600006307e66f0000421180fc0000f05600066366066f0000425980fc0000f05600066366066f0000425980fc0000f0560003c1c3c7cf000041b180fc0000f0560003c1c3c7cf000041b180fc0000d0060fd000060ef00031e0fc0000d0060fd000060ef00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fe00010544fd000004f7000404000fc0001502600014fe00010544fd000004f7000404000fc000130360002220fe000082fd000008f500020fc000130360002220fe000082fd000008f500020fc000160c60004054145401054445044545f7000411000fc000160c60004054145401054445044545f7000411000fc000170960002820222200822208fe880080f80004208a8fc000170960002820222200822208fe880080f80004208a8fc000170960000410544401044404fe440040f8000401000fc000170960000410544401044404fe440040f8000401000fc000170d6000222220220082220888828880f8000420800fc000170d6000222220220082220888828880f8000420800fc00017016000fe1408540104440505404440f8000411000fc00017016000fe1408540104440505404440f8000411000fc000110060fd000020fc00010280f500020fc000110060fd000020fc00010280f500020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260007eed0004061e0fc0000c0260007eed0004061e0fc0000c02600018ed000404060fc0000c02600018ed000404060fc00010066000186c7c7878f100041b060fc00010066000186c7c7878f100041b060fc0000f0360001870feccf1000421860fc0000f0360001870feccf1000421860fc000100660001860ccc0fcf1000421060fc000100660001860ccc0fcf1000421060fc000100660001860ccccc0f1000425860fc000100660001860ccccc0f1000425860fc0001006600018607c7878f100041b060fc0001006600018607c7878f100041b060fc000090060ea00031e0fc000090060ea00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260003ced0004060c0fc0000c0260003ced0004060c0fc0000c02600066ed0004040c0fc0000c02600066ed0004040c0fc0000d036000603cee00041b0c0fc0000d036000603cee00041b0c0fc0000d0360006e66ee000421800fc0000d0360006e66ee000421800fc0000d0360006666ee000421000fc0000d0360006666ee000421000fc0000d0360006666ee000425800fc0000d0360006666ee000425800fc0000d0360003c3cee00041b000fc0000d0360003c3cee00041b000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fd000044fe00010540f7000404000fc0001502600014fd000044fe00010540f7000404000fc000150d6000220002000022000020022002f600020fc000150d6000220002000022000020022002f600020fc0001a106000401405414054144454044145444445fb000411150fc0001a106000401405414054144454044145444445fb000411150fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600022220222202220282202220222220880fc000420800fc0001b11600022220222202220282202220222220880fc000420800fc0001b0b600014140141404014441404fe4102440440fc000411000fc0001b0b600014140141404014441404fe4102440440fc000411000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000a02600014eb00020fc0000a02600014eb00020fc0000b0360002220ec00020fc0000b0360002220ec00020fc0000d05600040541454ee00020fc0000d05600040541454ee00020fc0000d05600028202222ee00020fc0000d05600028202222ee00020fc0000d05600004104444ee00020fc0000d05600004104444ee00020fc0000b016000fd22ee00020fc0000b016000fd22ee00020fc0000d016000fe140054ee00020fc0000d016000fe140054ee00020fc0000c0060fd000020ee00020fc0000c0060fd000020ee00020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000f0760007c000038c380f000020fc0000f0760007c000038c380f000020fc0000f076000660000600180f000020fc0000f076000660000600180f000020fc00010086000666c78f9c183c0f100020fc00010086000666c78f9c183c0f100020fc000100860007c70cc60c18660f100020fc000100860007c70cc60c18660f100020fc000100860006060cc60c187e0f100020fc000100860006060cc60c187e0f100020fc0000f0760006060cc60c186f000020fc0000f0760006060cc60c186f000020fc0001008600060607861e3c3c0f100020fc0001008600060607861e3c3c0f100020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000070003e8ff01c000070003e8ff01c00002e500a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Step}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Step\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command\bxe }}}{\fs20 When you select Step, Trace, or Go, the first thing that happens is the system checks to see if the program in the front window has been compiled.  If not, the front window is compiled to memory, and then executed in the selected debug mode.  If the program has already been compiled, the disk copy of the program is loaded and executed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 When you select the Step command, your program starts executing, but stops when it gets to the first executable line.  A small arrow appears in the source window, pointing to the line that will be executed next.  At this point, you can use any of the debugging commands.\par Repeated use of the Step command steps through your program, one line at a time.  As this happens, the arrow pointing to the current line will be updated.  Using this method, you can actually watch your program execute, quickly locating problem spots.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window\bxe }}}{\fs20 If you are using a Variables window, all variable values in the window are updated after each Step command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Step Through}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Step Through\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step through command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 If you encounter a function call while you are stepping through a program using the Step command, you will step right into the function, executing its commands one by one until it returns to the subroutine which called it.  Many times, you do not want to step through each line of the subroutine.  Instead, you would rather concentrate on one function, assuming that the subroutines called work correctly.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 The Step Through command helps you do this.  It works exactly like the Step command until you come to a line with a function call.  On those lines, the function is executed at full speed.  Execution of the stepped-through subroutine will be terminated if a run-time error is detected, a break point is encountered, or the Stop command is selected from the Debug menu.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Trace}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Trace\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 When you use the Trace command, the program starts stepping automatically.  The Variables window still gets updated after each line is executed, and you can still watch the flow of the program as the arrow moves through each line that is executed.  At any time, you can use the Step command to stop the trace.  That does not stop the execution of the program; it only pauses, waiting for the next debug command.  Step, Step Through, Trace, Go, Go to Next Return, and Stop can all be used.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command\bxe }}}{\fs20 \par If you want to pause during a trace, move the cursor to the right side of the menu bar}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  and hold the mouse button down.  Program execution will cease until you let up on the mouse button.  As soon as you release the mouse button, the trace will resume.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Go}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Go\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 go command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 When you select the Go command, your program starts executing at full speed.  It will continue executing until it is finished, a break point is reached, or the Stop command is issued.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Go to Next Return}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Go to Next Return\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command is used to allow a subroutine to run to completion.  If you have been stepping or tracing through a subroutine, and you get to a point where you do not need to watch the remainder of the subroutine execute, simply use the Go to Next Return command.  The program will execute at full speed until the end of the subroutine.  You will end up in step mode, with the debugging arrow pointing to the line in the source window which comes after the line which called the subroutine.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto next return command\bxe }}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Stop}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stop\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command\bxe }}}{\fs20 The Stop command terminates execution of the program.  Any program that was compiled with debugging turned on can be stopped this way, whether or not it was started using the debug commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Profile}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Profile\tcl3}}}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profile command\bxe }}}{\fs20 The Profile command helps you find the functions where your program is spending the most time.  It returns the following three statistics about the execution of your program:  the number of times each subroutine and main program was called; the number of heartbeats that occurred during each subroutine and main program; the percent of heartbeats for each subroutine and main program as a function of the total number of heartbeats generated during the entire execution.\par The Profiler is a routine which is installed into the heart-beat interrupt handler of the computer.  It maintains a stack of pointers to profiling information.  Upon entry to a new subroutine, the subroutine's name is added to the stack, and profiling counters are incremented.  When entering a subroutine which is already included in the stack, the pointer to the subroutine's information is accessed and the appropriate counters are incremented.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profiler}}}{\fs20 The information returned by Profile can be quite accurate for some programs, but be somewhat misleading for others.  The Profiler works by counting heartbeats.  A heartbeat occurs 60 times each second.  Each time a heartbeat occurs, the heartbeat counter for the current subroutine is incremented.  If the subroutines in your program are very short, they may not take enough CPU time for a heartbeat to occur.  If the program runs for a long time, the impact of this problem is reduced.  Counting heartbeats is, after all, a statistical process.  The larger your sample, the better the results will be.\par Another potential problem area is disabling interrupts.  Heartbeats are interrupts \endash  disabling interrupts stops the process of counting heartbeats.  The most common culprit is GS/OS, which disables interrupts while reading and writing to the disk.\par To obtain the best results from the Profiler, then, use it on a long execution.  Be suspicious of statistics for programs that have very short, fast subroutines, or that perform lots of disk I/O.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Set/Clear Break Points}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Set/Clear Break Points\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 set/clear break points command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 break points}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 Break points are used when you want to execute up to some predetermined place in your program, then pause.  For example, if you know that the first 500 lines of your program are working correctly, but you need to step through the 20 lines after that, it would take a great deal of time to get to the suspected bug using the Step or Trace commands.  You can, however, set a break point.  You would start by setting a break point at line 500, then execute the program using one of the Compile commands.  When your program reached line 500, execution would stop, and the arrow marker would point to line 500.  You could then use the debug commands to examine the area of interest.\par There is no limit to the number of break points that can be placed in a compiled program.\par To set a break point in a compiled program, start by selecting the line or lines in the source window where a break point is to occur.  With the lines selected, apply the Set/Clear Break Point command.  A purple X will appear to the left of the line, indicating that the line has a break point.\par To remove an existing break point, select the line and use the Set/Clear Break Point command again.  The X that indicates a break point will vanish.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Set/Clear Auto-Go}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Set/Clear Auto-Go\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There may be places in your program that you always want the Step and Trace commands to skip.  That is where the Set/Clear Auto-Go command is used.  Any lines that have been set for auto-go will execute at full speed, even if you are using the Step and Trace commands.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto-go command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 \par To mark lines for auto-go, select the lines and then invoke this command.  A green spot will appear to the left of the selected lines.  To clear auto-go, select the lines and apply the command again.\par A line cannot be marked for both auto-go and as a break point.  If you select a line for auto-go, any existing break point is removed.  Similarly, marking a line for a break point will remove its auto-go status.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Languages Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Languages Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx6660\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 The Languages menu shows all of the languages installed on your system.  It changes when you install or delete a programming language.  You can use this menu to find out what language is associated with a particular file, or to change the language.\par Under ORCA, all source and data files are associated with a language.  The system uses the underlying language stamp to call the appropriate compiler or assembler when you issue a compile command for a source file.\cell }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1048{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich248\picwgoal1920\pichgoal4960\macpict\bliptag1539573551\blipupi72{\*\blipuid 5bc4072fb4b33f59bc7a98be2b67ebde}09ff0000000000f800601101a00082a0008e01000a0000000002d0024098000c0000000000f800600000000000f800600000000000f80060000102f50007007ff8ff01800007007ff8ff01800007007ff8ff01800007007ff8ff01800007007ff8ff01800007007ff8ff01800007007cf8ff01800007007cf8ff01800007007cf8ff01800007007cf8ff0180000d0b7cfe0c1e0cce0e0e1e1f80000d0b7cfe0c1e0cce0e0e1e1f800009017cfcfacc02ff800009017cfcfacc02ff80000a017cfcfbcc030e1f80000a017cfcfbcc030e1f80000d0b7cfcccce0cccce0cffcf80000d0b7cfcccce0cccce0cffcf80000d0b7c0e0ccdce0e0dce1e1f80000d0b7c0e0ccdce0e0dce1e1f80000d0b7ffffffe1ffffe1fffff80000d0b7ffffffe1ffffe1fffff800007007ff8ff01800007007ff8ff01800006007ff7ff00c006007ff7ff00c0060060f70000c0060060f70000c0060060f70000c0060060f70000c00c066001e30001c1c0fd0000c00c066001e30001c1c0fd0000c00c066003330000c0c0fd0000fc0c066003330000c0c0fd0000fc0c06600303e1e0c0c0fd0000fc0c06600303e1e0c0c0fd0000fc0c066001e33330c0c0fd0000fc0c066001e33330c0c0fd0000fc0c0660003333f0c0c0fd0000fc0c0660003333f0c0c0fd0000fc0c066003333300c0c0fd0000fc0c066003333300c0c0fd0000fc0c066001e331e1e1e0fd0000fc0c066001e331e1e1e0fd0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc06007ff7ff00fc06007ff7ff00fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0d0b6001e1e208f1f0f060f000fc0d0b6001e1e208f1f0f060f000fc0d0b6003333319818199e18000fc0d0b6003333319818199e18000fc0d0b60033303b9f1f19861f000fc0d0b60033303b9f1f19861f000fc0d0b600331e3f99818f0619800fc0d0b600331e3f99818f0619800fc0d0b6003f03359981998619800fc0d0b6003f03359981998619800fc0d0b6003333319999998619800fc0d0b6003333319999998619800fc0d0b600331e318f0f0f1f8f000fc0d0b600331e318f0f0f1f8f000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc09036001e1e0fa0000fc09036001e1e0fa0000fc090360033330fa0000fc090360033330fa0000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc090360033330fa0000fc090360033330fa0000fc09036001e1e0fa0000fc09036001e1e0fa0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b016003fde100e0fd0000fc0b016003fde100e0fd0000fc0c066003333330c330fd0000fc0c066003333330c330fd0000fc0b056003333300c3fc0000fc0b056003333300c3fc0000fc0b056003e331e0c3fc0000fc0b056003e331e0c3fc0000fc0b05600333f030c3fc0000fc0b05600333f030c3fc0000fc0c066003333330c330fd0000fc0c066003333330c330fd0000fc0c066003e331e1e1e0fd0000fc0c066003e331e1e1e0fd0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b016003fde100e3fd0000fc0b016003fde100e3fd0000fc09016003fc33fd0000fc09016003fc33fd0000fc0c0060fe3302030333fd0000fc0c0060fe3302030333fd0000fc0c066063e331e30333fd0000fc0c066063e331e30333fd0000fc0c0664c303f03303f3fd0000fc0c0664c303f03303f3fd0000fc0a02638303fd33fd0000fc0a02638303fd33fd0000fc0d0761030331e1e333f0fe0000fc0d0761030331e1e333f0fe0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0d07600301e23319f3e0fe0000fc0d07600301e23319f3e0fe0000fc0d07600300c333318330fe0000fc0d07600300c333318330fe0000fc0d07600300c3b3618330fe0000fc0d07600300c3b3618330fe0000fc0d07600300c3f3c1e330fe0000fc0d07600300c3f3c1e330fe0000fc0d07600300c373618330fe0000fc0d07600300c373618330fe0000fc0d07600300c333318330fe0000fc0d07600300c333318330fe0000fc0d076003f1e31319f3e0fe0000fc0d076003f1e31319f3e0fe0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0d076003e3e1e3e1e1e0fe0000fc0d076003e3e1e3e1e1e0fe0000fc0b016003fc330030fe0000fc0b016003fc330030fe0000fc09016003fc33fd0000fc09016003fc33fd0000fc0d076003e3e3333331e0fe0000fc0d076003e3e3333331e0fe0000fc0d076003036333333030fe0000fc0d076003036333333030fe0000fc0c02600303fd330030fe0000fc0c02600303fd330030fe0000fc0d0760030331e3e1e1e0fe0000fc0d0760030331e3e1e1e0fe0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b056003f3e667e0fc0000fc0b056003f3e667e0fc0000fc0b056000c3066180fc0000fc0b056000c3066180fc0000fc0b056000c303c180fc0000fc0b056000c303c180fc0000fc0b056000c3c18180fc0000fc0b056000c3c18180fc0000fc0b056000c303c180fc0000fc0b056000c303c180fc0000fc0b056000c3066180fc0000fc0b056000c3066180fc0000fc0b056000c3e66180fc0000fc0b056000c3e66180fc0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b056003e667c780fc0000fc0b056003e667c780fc0000fc0b05600306660cc0fc0000fc0b05600306660cc0fc0000fc0a04600303c60cfb0000fc0a04600303c60cfb0000fc0a046003c1878cfb0000fc0a046003c1878cfb0000fc0a04600303c60cfb0000fc0a04600303c60cfb0000fc0b05600306660cc0fc0000fc0b05600306660cc0fc0000fc0b056003e667c780fc0000fc0b056003e667c780fc0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc06007ff7ff00fc06007ff7ff00fc060001f7ff00fc060001f7ff00fc02f500a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\ri2160\widctlpar\adjustright {\fs20 \par \par }\trowd \clvertalt\cltxlrtb \cellx7920\pard \widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b Shell}{\b\v ;}{\b \par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \cell }\pard \widctlpar\intbl\adjustright {\fs20 \row }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 Shell is a special entry, and so is set off from the other names in the Languages menu.  The desktop maintains a window called the shell window, whose corresponding language is the Shell.  You can create a window yourself, by first selecting the New command located in the File menu, and then selecting Shell from the Languages menu.  If you do not create a Shell window, the desktop will create one for you the first time that you compile a program.\par The desktop uses the Shell window to display information about what it is doing.  For example, when you compile a program, the results of compilation are shown in the Shell window.\par You can also use the Shell window to communicate with the ORCA shell.  You can enter any available shell commands, and then press }{\outl\fs18 return}{\fs20 .  The shell will execute the commands and then return to the desktop, displaying any text output in the shell window, as well as using the shell window for prompts and to echo text responses.  See Chapter 8 for a detailed description of the shell.  Chapter 6 has a brief introduction to the shell, describing in more detail how to use the shell from the desktop development environment.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Installed Languages}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Installed Languages\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 languages menu}}}{\fs20 Below the name Shell in the Languages menu is a list of the names of the compilers and assemblers that are currently installed in your desktop system, as well as some names used for other ASCII file types.  Each text window in the desktop will have a language stamp associated with it.  You can pull down the Languages menu to see what language stamp the front window has, or you can select a different language for the front window by selecting the appropriate language from this menu.  The language associated with the front window will be checked.\par There is always one language which is the current language; it is the same as the language of the front window.  When you change the language stamp of the front window, you also change the current system language.  New windows are stamped with the current system language.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 The languages ProDOS, Text, and Exec are special.  A file whose language stamp is ProDOS means that the file contains only ASCII text.  Data files read by a program are typically stamped as ProDOS.  The language Text is reserved for use by text editors.  The language Exec is given to shell script files.  See Chapter 8 for more information about Exec files.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The SYSTABS File}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The SYSTABS File\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20  is located in the SYSTEM prefix of the program disk.  It contains the default settings for tab stops, auto-indent mode, and cursor mode.  It is an ASCII text file that can be opened under the desktop and edited to change the default settings.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20 \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\fs20 Each language recognized by ORCA is assigned a language number.  The SYSTABS file has three kinds of lines associated with each language:\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The language number.\par 2.\tab The default settings for the different editing modes. \par 3.\tab The default tab and end-of-line-mark settings.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The first line of each set of lines in the SYSTABS file specifies the language that the next two lines apply to.  ORCA languages can have numbers from 0 to 32767 (decimal).  The language number must start in the first column; leading zeros are permitted and are not significant, but leading spaces are not allowed.\par The second line of each set of lines in the SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\v\fs20  }{\fs20 sets the defaults for various editor modes, as follows:\par }\pard \qj\fi-270\li1170\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab If the first column contains a zero, pressing }{\outl\fs18 return}{\fs20  causes the insertion point to be placed in column one in the next line.  If column one (in the SYSTABS file) contains a one, then pressing }{\outl\fs18 return }{\fs20 aligns the insertion point with the first nonspace character in the next line.  If the line is blank, then the insertion point is aligned with the first nonspace character in the line above.\par 2.\tab The second column is used by the text-based editor to indicate the selection mode.  It is not used by the desktop editor.  It can be either a zero or one.\par 3.\tab The next character indicates the wrap mode.  It is not used by the desktop editor.\par 4.\tab The fourth character is used to set the default cursor mode.  A zero will cause the editor to start out in over strike mode}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 .  A one will cause it to start in insert mode}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 .\par 5.\tab The fifth and sixth characters are used by the text based editor.\par }\pard \qj\fi-10\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The third line of each set of lines in the SYSTABS file sets default tab stops.  There are 255 zeros and ones, representing the length of lines under the desktop.  The ones indicate the positions of the tab stops.  A two in any column sets the end of the line.  The column containing the two then replaces column 255 as the default right margin when the editor is set to that language.\par For example, the following lines define the defaults for ORCA/Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20 .  Note that only the first few characters of the tab line are shown; the tab line actually contains 255 characters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs18 5\par 100110\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 0000000010000000010000000010000000010000000010\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If no defaults are specified for a language (that is, there are no lines in the SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20  for that language), then the editor assumes the following defaults:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\fs20 \bullet \tab }{\outl\fs18 return}{\fs20  sends the cursor to column one.\par \bullet \tab The editor starts in insert mode}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 .\par \bullet \tab There is a tab stop every eighth column.\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab The end of the line is at column 255.\par }\pard \qj\fi-10\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Setting up Defaults}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Setting up Defaults\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 defaults for PRIZM}}}{\fs20 You can tailor your environment on the desktop by setting various options, and saving them.  Then, whenever you run the desktop, your defaults will be automatically loaded, and your desktop will look the same from session to session.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 ORCA always saves information about your environment before it executes an S16 program, to ensure that everything will be as it was after execution.  This allows the environment to be purged while your program executes, then have everything return to its original state when your program finishes.  Automatic rebuilding of your environment saves you time, since you do not have to reopen various files and windows, size them correctly, etc.  It also allows you to quickly remember what you were doing before you left the desktop.\par ORCA records the following information about your current desktop, in a file named PRIZM.TEMP, located in the same prefix as PRIZM:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab The path name of the file displayed in the front window, and that window's size and location on the screen.\par \bullet \tab The setting of the Auto-save flag.\par \bullet \tab Where prefixes 8, 13, and 16 are located.\par \bullet \tab The settings of the compile flags for source listing, symbol table, generation of debug code}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 , and link after compile.\par \bullet \tab The settings of the link flags for source listing, symbol table, saving of the executable file, and file type of the executable file.\par \bullet \tab The setting of the Profile flag.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profiler}}}{\fs20 \par \bullet \tab The current language.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Permanent default information is stored in the file named PRIZM.CONFIG, located in the same folder as PRIZM.  The same information listed above is saved.  To set these defaults, use the Save Defaults button from the Compile or Link dialogs.  To return to the system defaults, simply delete the PRIZM.CONFIG file.\par }\pard \widctlpar\adjustright {\*\bkmkend bk14}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop development environment}{\rxe bk14}}}{\v\fs20 \par }{\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Environment Reference Manual\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 8:  The Command Processor\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 8 - The Command Processor\par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 8 \endash  The Command Processor\tcl1}}}{\fs18 {\*\bkmkstart bk17}\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter will cover the operation of the ORCA Command Processor.  A command processor is an interface between you and the operating system of a computer.  You enter a command on the command line.  The command processor will interpret your command and take some specific action corresponding to your command.  The command processor for ORCA is very powerful.  The features available to you and discussed in this chapter are:\par }\pard \qj\widctlpar\adjustright {\fs18 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab The line editor.\par \bullet \tab Command types.\par \bullet \tab Standard prefixes and file names.\par \bullet \tab EXEC files.\par \bullet \tab Input and output redirection.\par \bullet \tab Pipelines.\par \bullet \tab Command table.\par \bullet \tab Command reference.\par }\pard \widctlpar\adjustright {\fs18 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Line Editor}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Line Editor\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\fs18 {\*\bkmkstart bk15}\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When commands are issued to the shell, they are typed onto the command line using the line editor.  The line editor allows you to:\par }\pard \qj\widctlpar\tx720\adjustright {\fs18 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Expand command names.\par \bullet \tab Make corrections.\par \bullet \tab Recall the twenty most recently issued commands.\par \bullet \tab Enter multiple commands.\par \bullet \tab Use wildcards in file names.\par }\pard \qj\widctlpar\adjustright {\fs18 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Command Name Expansion}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Command Name Expansion\tcl3}}}{\b \par }\pard \qj\keep\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keep\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command expansion}}}{\v\fs20 \par }{\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 It is not necessary to enter the full command name on the command line.  Type in the first few letters of a command (don't use }{\outl\fs18 RETURN}{\fs20 ) and press the }{\outl\fs18 RIGHT-ARROW}{\fs20  key.  It will compare each of the commands in the command table with the letters typed so far.  The first command found that matches all of the characters typed is expanded in the command line.  For example, if you typed:\par }\pard \qj\widctlpar\tx720\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 CO}{\b\outl\f6\fs14 RIGHT-ARROW}{\b\f6\fs18 \par }\pard \qj\widctlpar\tx720\adjustright {\pard\plain \qj\widctlpar\tx720\adjustright \v\f4\fs18\cgrid {\xe {\v\fs18 }{\v\fs18 COMMANDS command}}}{\v\fs18 \par }{\fs18 \par }{\fs20 ORCA would match this with the command COMMANDS, and would complete the command like this:\par }{\fs18 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 COMMANDS\par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tx720\outlinelevel0\adjustright {\b Editing A Command On The Command Line\par }\pard \qj\keepn\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The available line-editing commands available are listed in the table below:\par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi-2700\li3150\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3150\adjustright {\fs20 command\tab command name and effect\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:cursor-left command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:cursor-right command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:end-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:start-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:delete-character-left command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:delete-to-end-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:insert mode}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:clear-line command}}}{\v\fs20 \par }{\outl\fs14 \par LEFT-ARROW}{\fs18 \tab }{\b\fs18 cursor left}{\fs18  - The cursor will move to the left on the command line.\par \par }{\outl\fs14 RIGHT-ARROW}{\fs18 \tab }{\b\fs18 cursor right}{\fs18  - The cursor will move to the right.  If the cursor is at the end of a sequence of characters which begin the first command on the line, the shell will try to expand the command.\par \par }{\outl\fs14 \u-3\'f0 LEFT-ARROW}{\fs18 \tab }{\b\fs18 word left}{\fs18  - The cursor will move to the start of the previous word.  If the cursor is already on the first character of a word, it moves to the first character of the previous word.\par \par }{\outl\fs14 \u-3\'f0 RIGHT-ARROW}{\fs18 \tab }{\b\fs18 word right}{\fs18  - The cursor will move to the end of the current word.  If the cursor is already on the last character in a word, it moves to the last character in the next word.\par \par }{\outl\fs14 UP-ARROW }{\fs18 or}{\outl\fs18  }{\outl\fs14 DOWN-ARROW}{\fs18 \tab }{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command list}}}{\v\fs20 .}{\b\fs18 edit command}{\fs18  - The up and down arrows are used to scroll through the 20 most recently executed commands.  These commands can be executed again, or edited and executed.\par \par }{\outl\fs14 \u-3\'f0}{\fs18 >}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 .}{\outl\fs18 \tab }{\b\fs18 end of line}{\fs18  -  The cursor will move to the right-hand end of the command line.\par \par }{\outl\fs14 \u-3\'f0}{\fs18 <}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 ,}{\outl\fs18 \tab }{\b\fs18 start of line}{\fs18  - The cursor will move to the left-hand end of the command line.\par \par }{\outl\fs14 DELETE}{\fs18 \tab }{\b\fs18 delete character left}{\fs18  - Deletes the character to the left of the cursor, moving the cursor left.\par \par }\pard \qj\fi-2700\li3150\widctlpar\tx1170\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 F or\tab }{\outl\fs14 CTRL}{\fs18 F\tab }{\b\fs18 delete character right}{\fs18  - Deletes the character that the cursor is covering, moving characters from the right to fill in the vacated character position.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \qj\fi-2700\li3150\widctlpar\tx1170\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 Y or\tab }{\outl\fs14 CTRL}{\fs18 Y\tab }{\b\fs18 delete to end of line}{\fs18  - Deletes characters from the cursor to the end of the line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 E or\tab }{\outl\fs14 CTRL}{\fs18 E\tab }{\b\fs18 toggle insert mode}{\fs18  - Allows characters to be inserted into the command line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 Z or\tab }{\outl\fs14 CTRL}{\fs18 Z\tab }{\b\fs18 undo}{\fs18  - Resets the command line to the starting string.  If you are typing in a new command, this erases all characters.  If you are editing an old command, this resets the command line to the original command string.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \qj\fi-2700\li3150\widctlpar\tx990\tx1980\tx3150\adjustright {\outl\fs14 ESC}{\fs18 X or }{\outl\fs14 CLEAR}{\fs18  or }{\outl\fs14 CTRL}{\fs18 X\tab }{\b\fs18 clear command line}{\fs18  - Removes all characters from the command line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx1530\tx3150\adjustright {\outl\fs14 RETURN}{\fs18  or }{\outl\fs14 ENTER}{\fs18 \tab }{\b\fs18 execute command}{\fs18  - Issue a command to the shell, and append the command to the list of the most recent twenty commands.\par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright {\pard\plain \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:execute command}}}{\v\fs20 \par }\pard \qc\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qc\widctlpar\tx2880\outlinelevel0\adjustright {\fs20 Table 8.1  Line-Editing Commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The shell normally starts in over strike mode; see the description of the \{Insert\} shell variable to change this default.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prompt}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The shell's command line editor prints a # character as a prompt before it accepts input.  See the description of the \{Prompt\} shell variable for a way to change this default.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Multiple Commands}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Multiple Commands\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:multiple commands}}}{\v\fs20 \par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Several commands can be entered on one line using a semicolon to separate the individual commands.  For example,\par }\pard \qj\widctlpar\tx720\adjustright {\pard\plain \qj\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RENAME command}}}{\v\fs20 \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 RENAME WHITE BLACK;EDIT BLACK\par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par would first change the name of the file WHITE to BLACK, and then invoke the editor to edit the file named BLACK.  If any error occurs, commands that have not been executed yet are canceled.  In the example above, if there was an error renaming the file WHITE, the shell would not try to edit the file BLACK.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Scrolling Through Commands}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Scrolling Through Commands\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command list}}}{\*\bkmkend bk15}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\bxe }{\rxe bk15}}}{\v\fs20 \par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Using the }{\outl\fs18 UP-ARROW}{\fs20  and }{\outl\fs18 DOWN-ARROW}{\fs20  keys, it is possible to scroll through the twenty most recent commands.  You can then modify a previous command using the line-editing features described above and execute the edited command.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Command Types}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Command Types\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command types\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Commands in ORCA can be subdivided into three major groups:  built-in commands, utilities, and language names.  All are entered from the keyboard the same way. \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Built-in Commands}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Built-in Commands\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:built-in commands}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Built-in commands can be executed as soon as the command is typed and the }{\outl\fs18 RETURN}{\fs20  key is hit, since the code needed to execute the command is contained in the command processor itself.  Apple DOS and Apple ProDOS are examples of operating systems that have only built-in commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Utilities}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Utilities\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:utilities}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CRUNCH utility}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 restartable programs}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA supports commands that are not built into the command processor.  An example of this type of command is CRUNCH, which is a separate program under ORCA.  The programs to perform these commands are contained on a special directory known as the }{\i\fs20 utilities}{\fs20  directory.  The command processor must first load the program that will perform the required function, so the }{\i\fs20 utilities}{\fs20  directory must be on line when the command is entered.  The command will also take longer to execute, since the operating system must load the utility program.  Most utilities can be restarted, which means that they are left in memory after they have been used the first time.  If the memory has not been reused for some other purpose, the next time the command is used, there is no delay while the file is loaded from disk.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The utilities themselves must all reside in the same subdirectory so that the command processor can locate them.  The name of the utility is the same as the name of the command used to execute it; the utility itself can be any file that can be executed from the shell, including script files.  Utilities are responsible for parsing all of the input line which appears after the command itself, except for input and output redirection.  The }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\fs20 command line is passed to a utility the same way it is passed to any other program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Language Names}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Language Names\tcl3}}}{\b \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:language names\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASM65816 language}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The last type of command is the language name.  All source files are stamped with a language, which can be seen when the file is cataloged under ORCA.  There is always a single system language active at any time when using ORCA.\par The system language will change for either of two reasons.  The first is if a file is edited, in which case the system language is changed to match the language of the edited file.  The second is if the name of a language is entered as a command. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\v\fs20 \par }{\fs20 Table 8.2 shows a partial list of the languages and language numbers that are currently assigned.  CATALOG and HELP will automatically recognize a language if it is properly included in the command table.  ProDOS has a special status:  it is not truly a language, but indicates to the editor that the file should be saved as a standard GS/OS TXT file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\fs20 . Language numbers are used internally by the system, and are generally only important when adding languages to ORCA.  They are assigned by Apple Computer, Inc.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language numbers\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT language}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASM6502 language}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal language}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal language}}}{\v\fs20 \par }\pard \qj\fi2340\keepn\widctlpar\tx4320\adjustright {\fs20\ul \par }\pard \qj\li2520\ri2880\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx4320\adjustright {\fs20 language\tab number\par }\pard \qj\li2520\ri2880\keepn\widctlpar\tx4320\adjustright {\fs20 \par ProDOS\tab 0\par TEXT\tab 1\par ASM6502\tab 2\par ASM65816}{\tab }{\fs20 3\par ORCA/Pascal\tab 5\par EXEC\tab 6\par ORCA/C\tab 8\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Table 8.2 A Partial list of the Languages and Language Numbers\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\fs20 You can see the list of languages currently installed in your system using the SHOW LANGUAGES command.  While all of the languages from the above table are listed, the compiler needed to compile C programs and the assembler needed to assemble ASM65816 programs are sold separately.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Program Names}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Program Names\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTEM files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS 8}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Anything which cannot be found in the command table is treated as a path name, and the system tries to find a file that matches the path name.  If an executable file is found, that file is loaded and executed.  If a source file with a language name of EXEC is encountered, it is treated as a file of commands, and each command is executed, in turn.  Note that S16 files can be executed directly from ORCA.  ProDOS 8 SYSTEM files can also be executed, provided ProDOS 8 (contained in the file P8) is installed in the system directory of your boot disk.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Standard Prefixes}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Standard Prefixes\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you specify a file on the Apple\~II}{\scaps\fs20 gs}{\fs20 , as when indicating which file to edit or utility to execute, you must specify the file name as discussed in the section \ldblquote File Names\rdblquote  in this chapter.  GS/OS provides 32 prefix numbers that can be used in the place of prefixes in path names.  This section describes the ORCA default prefix assignments for these GS/OS prefixes.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PREFIX command}}}{\v\fs20 \par }{\fs20 ORCA uses six of the GS/OS prefixes (8 and 13 through 17) to determine where to search for certain files.  When you start ORCA, these prefixes are set to the default values shown in the table below.  You can change any of the GS/OS prefixes with the shell PREFIX command, as described in this chapter.\par GS/OS also makes use of some of these numbered prefixes, as does the Standard File Manager from the Apple\~II}{\fs18 GS}{\fs20  toolbox.  Prefixes 8 through 12 are used for special purposes by GS/OS or Standard File.  Prefix 8 is used by GS/OS and Standard File to indicate the default prefix; that's the same reason ORCA uses prefix 8.  Prefix 9 is set by any program launcher (including GS/OS, ORCA, and Apple's Finder) to the directory containing the executable file.  Prefixes 10, 11 and 12 are the path names for standard input, standard output, and error output, respectively.  Use of these prefixes is covered in more detail later in this chapter.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program launchers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 boot prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Library prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Languages prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output}}}{\v\fs20 \par }\pard \qj\fi-533\li533\keep\widctlpar\tx533\tx1080\tx2880\tx5220\adjustright {\fs20 \par }\pard \li720\ri1800\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2340\tx4140\adjustright {\fs20 Prefix Number\tab Use\tab Default\par }\pard \li720\ri1800\keepn\widctlpar\tx2340\tx4140\adjustright {\fs20 \par @\tab User's folder\tab Boot prefix\par *\tab Boot prefix\tab Boot prefix\par 8\tab Current prefix\tab Boot prefix\par }\pard \li720\ri1800\keep\keepn\widctlpar\tx2340\tx4140\adjustright {\fs20 9\tab Application\tab Prefix of ORCA.Sys16\par 10\tab Standard Input\tab .CONSOLE\par 11\tab Standard Output\tab .CONSOLE\par 12\tab Error Output\tab .CONSOLE\par 13\tab ORCA library\tab 9:LIBRARIES:\par 14\tab ORCA work\tab 9:\par 15\tab ORCA shell\tab 9:SHELL:\par 16\tab ORCA language\tab 9:LANGUAGES:\par 17\tab ORCA utility\tab 9:UTILITIES:\par }\pard \qj\ri360\keep\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\ri360\keep\widctlpar\outlinelevel0\adjustright {\fs20 Table 8.3  Standard Prefixes\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The prefix numbers can be used in path names.  For example, to edit the system tab file, you could type either of the following commands:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDIT command}}}{\v\fs20 \par }\pard \qj\fi446\keepn\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 EDIT :ORCA:SHELL:SYSTABS\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 EDIT 15:SYSTABS\par }\pard \qj\ri360\keep\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 boot prefix}}}{\v\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\fs20 Each time you restart your Apple\~II}{\scaps\fs20 gs}{\fs20 , GS/OS retains the volume name of the boot disk.  You can use an asterisk (*) in a path name to specify the boot prefix.  You cannot change the volume name assigned to the boot prefix except by rebooting the system.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 networks}}}{\v\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\fs20 The @ prefix is useful when you are running ORCA from a network.  If you are using ORCA from a hard disk or from floppy disks, prefix @ is set just like prefix 9, defaulting to the prefix when you have installed ORCA.Sys16.  If you are using ORCA from a network, though, prefix @ is set to your network work folder.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 current prefix}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The current prefix (also called the default prefix) is the one that is assumed when you use a partial path name.  If you are using ORCA on a self-booting 3.5 inch disk, for example, prefix 8 and prefix 9 are both normally :ORCA:.  If you boot your Apple\~II}{\scaps\fs20 gs}{\fs20  from a 3.5-inch :ORCA disk, but run the ORCA.Sys16 file in the ORCA: subdirectory on a hard disk named HARDISK, prefix 8 would still be :ORCA: but prefix 9 would be :HARDISK:ORCA:.\par The following paragraphs describe ORCA\rquote s use of the standard prefixes.\par ORCA looks in the current prefix (prefix 8) when you use a partial path name for a file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Library prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MAKELIB utility}}}{\v\fs20 \par }{\fs20 The linker searches the files in the ORCA library prefix (prefix 13) to resolve any references not found in the program being linked.  ORCA comes with a library file that supports the standard Pascal library; you can also create your own library files.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:include statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler and the DeRez utility both look for a folder called RInclude in the library prefix when they process partial path names in include and append statements.  The path searched is 13:RInclude.  See the description of the resource compiler for details.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 units}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 uses statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCAPascalDefs}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When the compiler encounters a uses statement, and a LibPrefix directive has not been used, it searches first in 13:ORCAPascalDefs.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PREFIX command}}}{\v\fs20 \par }{\fs20 The work prefix (prefix 14) is used by some ORCA programs for temporary files.  For example, when you pipeline two or more programs so that the output of one program becomes the input to the next, ORCA creates temporary files in the work prefix for the intermediate results (pipelines are described in the section \ldblquote Pipelines\rdblquote  in this chapter).  Commands that use the work prefix operate faster if you set the work prefix to a RAM disk, since I/O is faster to and from memory than to and from a disk.  If you have enough memory in your system to do so, use the Apple\~II}{\scaps\fs20 gs}{\fs20  control panel to set up a RAM disk (be sure to leave at least 1.25M for the system), then use the PREFIX command to change the work prefix.  To change prefix 14 to a RAM disk named :RAM5, for example, use the following command:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 PREFIX 14 :RAM5\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You won't want to do this every time you boot.  You can put this command in the LOGIN file, which you will find in the shell prefix.  The LOGIN file contains commands that are executed every time you start the ORCA shell.\par ORCA looks in the ORCA shell prefix (prefix 15) for the following files:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDITOR file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSEMAC file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSCMND file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx2880\outlinelevel0\adjustright {\fs20 EDITOR\par SYSTABS\par }\pard \qj\fi360\keepn\widctlpar\tx2880\adjustright {\fs20 SYSEMAC\par SYSCMND\par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\fs20 LOGIN\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As we mentioned a moment ago, the LOGIN file is an EXEC file that is executed automatically at load time, if it is present.  The LOGIN file allows automatic execution of commands that should be executed each time ORCA is booted.\par }\pard \qj\fi-360\li360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi-360\li360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Languages prefix}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA looks in the language prefix (prefix 16) for the ORCA linker, the ORCA/Pascal compiler, and any other assemblers, compilers, and text formatters that you have installed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CRUNCH utility}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INIT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MAKELIB utility}}}{\v\fs20 \par }{\fs20 ORCA looks in the utility prefix (prefix 17) for all of the ORCA utility programs except for the editor, assembler, and compilers.  Prefix 17 includes the programs that execute utility commands, such as CRUNCH and MAKELIB.  The utility prefix also contains the HELP: subdirectory, which contains the text files used by the HELP command.  Command types are described in the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Prefixes 0 to 7}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Prefixes 0 to 7\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefix 0-7}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS aware}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The original Apple\~II}{\fs18 GS}{\fs20  operating system, ProDOS 16, had a total of eight numbered prefixes that worked a lot like the 32 numbered prefixes in GS/OS.  In fact, the original eight prefixes, numbered 0 to 7, are still in GS/OS, and are now used to support old programs that may not be able to handle the longer path names supported by GS/OS.\par When the programmers at Apple wrote GS/OS, one of the main limitations from ProDOS that they wanted to get rid of was the limit of 64 characters in a path name.  GS/OS has a theoretical limit of 32K characters for the length of a path name, and in practice supports path names up to 8K characters.  This presented a problem: existing programs would not be able to work with the longer path names, since they only expected 64 characters to be returned by calls that returned a path name.  Apple solved this problem by creating two classes of programs: GS/OS aware programs, and older programs.  When a program launcher, like Apple's Finder or the ORCA shell, launches a GS/OS aware program, prefixes 0 to 7 are cleared (if they had anything in them to start with).  The program launcher expects the program to use prefixes 8 and above.  When an old program is executed, prefixes are mapped as follows:\par \par }\pard \qj\li2160\ri2340\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3960\adjustright {\fs20 GS/OS prefix\tab old ProDOS prefix\par }\pard \qj\li2160\ri2340\keepn\widctlpar\tx3960\adjustright {\fs20 8\tab 0\par 9\tab 1\par 13\tab 2\par 14\tab 3\par 15\tab 4\par 16\tab 5\par 17\tab 6\par }\pard \qj\li2160\ri2340\widctlpar\tx3960\adjustright {\fs20 18\tab 7\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par In each case, the new, GS/OS prefix is copied into the older ProDOS prefix.  If any of the GS/OS prefixes are too long to fit in the older, 64 character prefixes, the program launcher refuses to run the old application, returning an error instead.  Assuming the old application is executed successfully, when it returns, the old ProDOS prefixes are copied into their corresponding GS/OS prefixes, and the ProDOS prefixes are again cleared.\par The ORCA shell fully supports this new prefix numbering scheme.  When you are working in the ORCA shell, and use a prefix numbered 0 to 7, the ORCA shell automatically maps the prefix into the correct GS/OS prefix.  The shell checks for the GS/OS aware flag before running any application, and maps the prefixes if the application needs the older prefix numbers.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 File Names}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 File Names\tcl2}}}{\b\fs28 \par }\pard \qj\keep\widctlpar\adjustright {\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 File name designation in ORCA follows standard GS/OS conventions.  There are some special symbols used in conjunction with file names:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 symbol\tab meaning\par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names\bxe }}}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device numbers}}}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\v\fs20 \par }{\fs20 \par .Dx\tab This indicates a device name formed by concatenating a device number and the characters '.D'.  Use the command:\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 \tab \tab SHOW UNITS\par }{\fs20 \tab \par \tab to display current assignment of device numbers.  Since device numbers can change dynamically with some kinds of devices (e.g. CD ROM drives) it is a good idea to check device numbers before using them.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\v\fs20 .PRINTER;}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.PRINTER}}}{\v\fs20 .CONSOLE;}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.CONSOLE}}}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\v\fs20 \par }{\fs20 .name\tab This indicates a device name.  As with device numbers, the "show units" command can be used to display a current list of device names.  The two most common device names that you will use are .CONSOLE and .PRINTER, although each device connected to your computer has a device name.  .CONSOLE is the keyboard and display screen, while .PRINTER is a device added to GS/OS by the Byte Works to make it easy for text programs to use the printer.\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 x\tab Prefix number.  One of the 32 numbered prefixes supported by GS/OS.  See the previous section for a description of their use.  You may use a prefix number in place of a volume name.\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directory walking\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 ..\tab When this is placed at the start of a path name, it indicates that the reference is back (or up) one directory level.\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 :\tab This symbol, when inserted in a path name, refers to a directory.  You can also use /, so long as you do not mix : characters and / characters in the same path name.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA allows the use of a physical device number in full path names.  For example, if the SHOW UNITS command indicates that the drive with the disk named :ORCA is .D1, the following file names are equivalent.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 :ORCA:MONITOR\tab .D1:MONITOR\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Here are some examples of legal path names:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 :ORCA:SYSTEM:SYSTABS\par ..:SYSTEM\par 15:SYSCMND\par .D1\par .D3:LANGUAGES:ASM65816\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 14:\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Wildcards}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Wildcards\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Wildcards may be used on any command that requires a file name.  Two forms of the wildcard are allowed, the = character and the ? character.  Both can substitute for any number of characters.  The difference is that use of the ? wildcard will result in prompting, while the = character will not. Wildcards cannot be used in the subdirectory portion of a path name.  For example,\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DELETE command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 DELETE MY=\par }\pard \qj\widctlpar\adjustright {\fs20 \par would delete all files that begin with MY.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The command,\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 DELETE MY?\par }\pard \qj\widctlpar\adjustright {\fs20 \par would delete files that begin with MY after you responded yes to the prompt for each file.  The wildcards can be used anywhere in the file name.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are limitations on the use of wildcards.  Some commands don't accept wildcards in the second file name.  These commands are:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COPY command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MOVE command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RENAME command}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par COPY\par MOVE\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 RENAME\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are some commands that only work on one file.  As a result, they will only use the first matching file name.  These commands are:\par }\pard \qj\fi446\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPILE command}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\fs20 ASML\par CMPL\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 CMPLG\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 COMPILE\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Types of Text Files}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Types of Text Files\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 GS/OS defines and uses ASCII format files with a TXT designator.  ORCA fully supports this file type with its system editor, but requires a language stamp for files that will be assembled or compiled, since the assembler or compiler is selected automatically by the system.  As a result, a new ASCII format file is supported by ORCA.  This file is physically identical to TXT files; only the file header in the directory has been changed.  The first byte of the AUX field in the file header is now used to hold the language number, and the file type is $B0, which is listed as SRC when cataloged from ORCA. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS language}}}{\v\fs20 TYPE command;\par }{\fs20 One of the language names supported by ORCA SRC files is TEXT.  TEXT files are used as inputs to a text formatter.  In addition, PRODOS can be used as if it were an ORCA language name, resulting in a GS/OS TXT file.  TXT files are also sent to the formatter if an ASSEMBLE, COMPILE, or TYPE command is issued.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 EXEC Files}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 EXEC Files\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 EXEC files\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 shell commands}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 EXEC language}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 path names}}}{\b\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can execute one or more ORCA shell commands from a command file.  To create a command file, set the system language to EXEC and open a new file with the editor.  Any of the commands described in this chapter can be included in an EXEC file.  The commands are executed in sequence, as if you had typed them from the keyboard.  To execute an EXEC file, type the full path name or partial path name (including the file name) of the EXEC file and press RETURN.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long command lines}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There is one major advantage to using an EXEC file over typing in a command from the command line.  The command line editor used by the shell restricts your input to 255 characters.  With EXEC files, you can enter individual command lines that are up to 64K characters in length.  Since it probably isn't practical or useful to type individual command lines that are quite a bit wider than what you can see on your computer screen, you can also use continuation lines.  In any EXEC file, if the shell finds a line that ends with a backslash (\\) character (possibly followed by spaces or tabs), the line is concatenated with the line that follows, and the two lines are treated as a single line.  The command is treated exactly as if the backslash character and the end of line character were replaced by spaces.  For example, the command\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 link file1 file2 file3 keep=myfile\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 could be typed into an EXEC file as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 link             \\\par    file1         \\\par    file2         \\\par    file3         \\\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    keep=myfile\par }\pard \qj\widctlpar\adjustright {\fs20 The two versions of the command would do exactly the same thing.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you execute an interactive utility, such as the ORCA Editor, from an EXEC file, the utility operates normally, accepting input from the keyboard.  If the utility name was not the last command in the EXEC file, then you are returned to the EXEC file when you quit the utility.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 branching\:EXEC files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 EXEC files are programmable; that is, ORCA includes several commands designed to be used within EXEC files that permit conditional execution and branching.  You can also pass parameters into EXEC files by including them on the command line.  These features are described in the following sections.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 EXEC files can call other EXEC files.  The level to which EXEC files can be nested and the number of variables that can be defined at each level depend on the available memory.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:multiple commands}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can put more than one command on a single line of an EXEC file; to do so, separate the commands with semicolons (;).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Passing Parameters Into EXEC Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Passing Parameters Into EXEC Files\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute an EXEC file, you can include the values of as many parameters as you wish by listing them after the path name of the EXEC file on the command line.  Separate the parameters with spaces or tab characters; to specify a parameter value that has embedded spaces or tabs, enclose the value in quotes.  Quote marks embedded in a parameter string must be doubled.\par For example, suppose you want to execute an EXEC file named FARM, and you want to pass the following parameters to the file:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi7\li360\keepn\widctlpar\adjustright {\fs20 cow\par chicken\par one egg\par }\pard \qj\fi7\li360\widctlpar\adjustright {\fs20 tom's cat\par }\pard \qj\fi-274\li533\widctlpar\tx533\tx2880\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 In this case, you would enter the following command on the command line:\par \par }\pard \fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 FARM cow chicken "one egg" "tom's cat"\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \fi360\widctlpar\outlinelevel0\adjustright {\fs20 Parameters are assigned to variables inside the EXEC file as described in the next section.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Programming EXEC Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Programming EXEC Files\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In addition to being able to execute any of the shell commands discussed in the command descriptions section of this chapter, EXEC files can use several special commands that permit conditional execution and branching.  This section discusses the use of variables in EXEC files, the operators used to form boolean (logical) expressions, and the EXEC command language.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keep\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Variables\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity\:shell}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Any alphanumeric string up to 255 characters long can be used as a variable name in an EXEC file.  (If you use more than 255 characters, only the first 255 are significant.)  All variable values and parameters are ASCII strings of 65535 or fewer characters.  Variable names are not case sensitive, but the values assigned to the variables }{\i\fs20 are }{\fs20 case sensitive.  To define values for variables, you can pass them into the EXEC file as parameters, or include them in a FOR command or a SET command as described in the section \ldblquote EXEC File Command Descriptions.\rdblquote   To assign a null value to a variable (a string of zero length), use the UNSET command.  Variable names are always enclosed in curly brackets (\{\}), except when being defined in the SET, UNSET and FOR commands.\par Variables can be defined within an EXEC file, or on the shell command line before an EXEC file is executed, by using the SET command.  Variables included in an EXPORT command on the shell command line can be used within any EXEC file called from the command line.  Variables included in an EXPORT command within an EXEC file are valid in any EXEC files called by that file; they can be redefined locally, however.  Variables redefined within an EXEC file revert to their original values when that EXEC file is terminated, except if the EXEC file was run using the EXECUTE command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:scope}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPORT command}}}{\v\fs20 \par }{\fs20 The following variable names are reserved.  Several of these variables may have number values; keep in mind that these values are literal ASCII strings.  A null value (a string of zero length) is considered undefined.  Use the UNSET command to set a variable to a null value.  Several of the predefined variables are used for special purposes within the shell.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{0\} shell variable\bxe }}}{\v\fs20 ... shell variables;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{1\}, \{2\}, ... shell variables\bxe }}}{\v\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{CaseSensitive\} shell variable\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Command\} shell variable\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Echo\} shell variable\bxe }}}{\v\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\fs20 \par \{0\}\tab The name of the EXEC file being executed.\par \par \{1\}, \{2\}, ...\tab Parameters from the command line.  Parameters are numbered sequentially in the sequence in which they are entered.\par \par \{#\}\tab The number of parameters passed.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{AuxType\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auxiliary file type}}}{\v\fs20 \par }{\fs20 \par \{AuxType\}\tab Provides automatic auxiliary file type specification.  The variable contains a single value, specified as a hex or decimal integer.  The AuxType string sets the auxiliary file type for the executable file produced by the linker.  Any value from 0 to 65535 ($FFFF) can be used.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity\:shell}}}{\v\fs20 \par }{\fs20 \par \{CaseSensitive\}\tab If you set this variable to any non-null value, then string comparisons are case sensitive.  The default value is null.\par \par \{Command\}\tab The name of the last command executed, exactly as entered, excluding any command parameters.  For example, if the command was :ORCA:MYPROG, then \{Command\} equals :ORCA:MYPROG; if the command was EXECUTE :ORCA:MYEXEC, then \{Command\} equals EXECUTE.  The \{Parameters\} variable is set to the value of the entire parameters list.\par \par \{Echo\}\tab If you set this variable to a non-null value, then commands within the EXEC file are printed to the screen before being executed.  The default value for Echo is null (undefined).\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Exit\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\v\fs20 \par }{\fs20 \par \{Exit\}\tab If you set this variable to any non-null value, and if any command or nested EXEC file returns a non-zero error status, then execution of the EXEC file is terminated.  The default value for \{Exit\} is non-null (it is the ASCII string true).  Use the UNSET command to set \{Exit\} to a null value (that is, to delete its definition).\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Insert\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }{\fs20 \par \{Insert\}\tab When you are using the shell's line editor, you start off in over strike mode.  If the \{Insert\} shell variable is set to any value, the shell's line editor defaults to over strike mode.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepName\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP directive}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\v\fs20 \par }{\fs20 \par \{KeepName\}\tab Provides an automatic output file name for compilers and assemblers, avoiding the KEEP parameter on the command line and the KEEP directive in the language.  If there is no keep name specified on the command line, and there is a non-null \{KeepName\} variable, the shell will build a keep name using this variable.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command}}}{\v\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright {\fs20 \tab \tab This keep name will be applied to all object modules produced by an assembler or compiler.  On the ASML, ASMLG and RUN commands, if no \{LinkName\} variable is used, the output name from the assemble or compile will also determine the name for the executable file.  See \{LinkName\} for a way to override this.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:metacharacters}}}{\v\fs20 \par }{\fs20 \tab \tab There are two special characters used in this variable that affect the automatic naming: % and $.  Using the % will cause the shell to substitute the source file name.  Using $ expands to the file name with the last extension removed (the last period (.) and trailing characters).\par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepType\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\v\fs20 \par }{\fs20 \par \{KeepType\}\tab Provides automatic file type specification.  The variable contains a single value, specified as a hex or decimal integer, or a three-letter GS/OS file type.  The KeepType string sets the file type for the executable file produced by the linker.  Legal file types are $B3 to $BF.  Legal file descriptors are: EXE, S16, RTL, STR, NDA, LDA, TOL, etc.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Libraries\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\v\fs20 \par }{\fs20 \par \{Libraries\}\tab When the linker finishes linking all of the files you specify explicitly, it checks to see if there are any unresolved references in your program.  If so, it searches various libraries to try and resolve the references.  If this variable is not set, the linker will search all of the files in prefix 13 that have a file type of LIB.  If this variable is set, the linker searches all of the files listed by this shell variable, and does not search the standard libraries folder.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{LinkName\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command}}}{\v\fs20 \par }{\fs20 \par \{LinkName\}\tab Provides an automatic output name for the executable file created by the link editor.  The % and $ metacharacters described for \{KeepName\} work with this variable, too.  When an ASML, ASMLG or RUN command is used, this variable determines the name of the executable file, while \{KeepName\} specifies the object file name.  This variable is also used to set the default file name for the LINK command.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Parameters\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command}}}{\v\fs20 \par }{\fs20 \par \{Parameters\}\tab The parameters of the last command executed, exactly as entered, excluding the command name.  For example, if the command was  EXECUTE :ORCA:MYEXEC, then \{Parameters\} equals :ORCA:MYEXEC.  The \{Command\} variable is set to the value of the command name.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prompt}}}{\v\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Prompt\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line\:prompt}}}{\v\fs20 \par }{\fs20 \par \{Prompt\}\tab When the shell's command line editor is ready for a command line, it prints a # character as a prompt.  If the \{Prompt\} shell variable is set to any value except the # character, the shell will print the value of the \{Prompt\} shell variable instead of the # character.  If the \{Prompt\} shell variable is set to #, the shell does not print a prompt at all.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Separator\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS}}}{\v\fs20 \par }{\fs20 \par \{Separator\}\tab Under ProDOS, full path names started with the / character, and directories within path names were separated from each other, from volume names, and from file names by the / character.  In GS/OS, both the / character and the : character can be used as a separator when you enter a path name, but the : character is universally used when writing a path name.  If you set the Separator shell variable to a single character, that character will be used as a separator whenever the shell writes a path name.  Note that, while many utilities make shell calls to print path names, not all do, and if the utility does not use the shell or check the \{Separator\} shell variable, the path names will not be consistent.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\v\fs20 \par }{\fs20 \par \{Status\}\tab The error status returned by the last command or EXEC file executed.  This variable is the ASCII character 0 ($30) if the command completed successfully.  For most commands, if an error occurred, the error value returned by the command is the ASCII string 65535 (representing the error code $FFFF).\par \par }\pard \qj\keep\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Logical Operators\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 expressions\:shell\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity\:shell}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA includes two operators that you can use to form boolean (logical) expressions.  String comparisons are case sensitive if \{CaseSensitive\} is not null (the default is for string comparisons to }{\i\fs20 not}{\fs20  be case sensitive).  If an expression result is true, then the expression returns the character 1.  If an expression result is not true, then the expression returns the character 0.  There must be one or more spaces before and after the comparison operator.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\i\fs20 str1}{\fs20  == }{\i\fs20 str2}{\fs20 \tab String comparison:  true if string }{\i\fs20 str1}{\fs20  and string }{\i\fs20 str2}{\fs20  are identical; false if not.\par }{\i\fs20 str1}{\fs20  != }{\i\fs20 str2}{\fs20 \tab String comparison:  false if string }{\i\fs20 str1}{\fs20  and string }{\i\fs20 str2}{\fs20  are identical; true if not.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Operations can be grouped with parentheses.  For example, the following expression is true if one of the expressions in parentheses is false and one is true; the expression is false if both expressions in parentheses are true or if both are false:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 IF ( COWS == KINE ) != ( CATS == DOGS )\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Every symbol or string in a logical expression must be separated from every other by at least one space.  In the preceding expression, for example, there is a space between the string comparison operator != and the left parentheses, and another space between the left parentheses and the string CATS.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Entering Comments\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comments\:EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMENT command}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printing files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To enter a comment into an EXEC file, start the line with an asterisk (*).  The asterisk is actually a command that does nothing, so you must follow the asterisk by at least one space.  For example, the following EXEC file sends a catalog listing to the printer:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi360\keepn\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 CATALOG >.PRINTER\par }\pard \fi360\widctlpar\adjustright {\b\f6\fs18 * Send a catalog listing to the printer\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use a semicolon followed by an asterisk to put a comment on the same line as a command:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 CATALOG >.PRINTER  ;* Send a catalog listing to the printer\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Redirecting Input and Output}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Redirecting Input and Output\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 appending to the end of a file\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Standard input is usually through the keyboard, although it can also be from a text file or the output of a program; standard output is usually to the screen, though it can be redirected to a printer or another program or disk file.  You can redirect standard input and output for any command by using the following conventions on the command line:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi-2160\li2160\keepn\widctlpar\tx360\tx2160\adjustright {\fs20 \tab <}{\i\fs20 inputdevice}{\fs20 \tab Redirect input to be from }{\i\fs20 inputdevice.}{\fs20 \par \tab >}{\i\fs20 outputdevice}{\fs20 \tab Redirect output to go to }{\i\fs20 outputdevice.}{\fs20 \par }\pard \fi-2160\li2160\widctlpar\tx360\tx2160\adjustright {\fs20 \tab >>}{\i\fs20 outputdevice}{\fs20 \tab Append output to the current contents of }{\i\fs20 outputdevice.}{\fs20 \par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\v\fs20 .CONSOLE;}{\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.CONSOLE}}}{\v\fs20 .PRINTER;}{\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.PRINTER}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The input device can be the keyboard or any text or source file.  To redirect input from the keyboard, use the device name .CONSOLE.\par The output device can be the screen, the printer, or any file.  If the file named does not exist, ORCA opens a file with that name.  To redirect output to the screen, use the device name .CONSOLE; to redirect output to the printer, use .PRINTER.  .PRINTER is a RAM based device driver; see the section describing .PRINTER, later in this chapter, for details on when .PRINTER can be used, how it is installed, and how you can configure it.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Both input and output redirection can be used on the same command line.  The input and output redirection instructions can appear in any position on the command line.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\fs20 For example, to redirect output from a compile of the program MYPROG to the printer, you could use either of the following commands:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:redirecting output}}}{\v\fs20 \par }\pard \qj\fi446\keepn\widctlpar\tx360\tx2070\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 COMPILE MYPROG >.PRINTER\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 COMPILE >.PRINTER MYPROG\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 appending to the end of a file}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To redirect output from the CATALOG command to be appended to the data already in a disk file named CATSN.DOGS, use the following command:\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 CATALOG >>CATSN.DOGS\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:redirection}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Input and output redirection can be used in EXEC files.  When output is redirected when the EXEC file is executed, input and output can still be redirected from individual commands in the EXEC file.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\fs20 The output of programs that do not use standard output, and the input of programs that do not use standard input, cannot be redirected.\par }{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Error messages also normally go to the screen.  They can be redirected independently of standard output.  To redirect error output, use the following conventions on the command line:\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 >&}{\i\fs20 outputdevice}{\fs20 \tab Redirect error output to go to }{\i\fs20 outputdevice.}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 >>&}{\i\fs20 outputdevice}{\fs20 \tab Append error output to the current contents of }{\i\fs20 outputdevice.\par }\pard \qj\fi-2160\li2160\widctlpar\tx360\tx2160\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Error output devices follow the same conventions as those described above for standard output.  Error output redirection can be used in EXEC files.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The .PRINTER Driver}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The .PRINTER Driver\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\v\fs20 {\*\bkmkstart bk16}.printer;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.printer}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The operating system on the Apple\~II}{\fs18 GS}{\fs20  gives you a number of ways to write to a printer, but none of them can be used with input and output redirection, nor can they be used with standard file write commands, which is the way you would write text to a printer on many other computers.  On the other hand, GS/OS does allow the installation of custom drivers, and these custom drivers can, in fact, be used with I/O redirection, and you can use GS/OS file output commands to write to a custom driver.  Our solution to the problem of providing easy to use text output to a printer is to add a custom driver called .PRINTER.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:redirecting output}}}{\v\fs20 \par }{\fs20 As described in the last section, you can redirect either standard out or error out to your printer by using the name .PRINTER as the destination file, like this:\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 TYPE MyFile >.Printer\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You can also open a file, using .PRINTER as the file name, using standard GS/OS calls.  When you write to this file, the characters appear on your printer, rather than being written to disk.  In short, as far as your programs are concerned, .PRINTER is just a write-only file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:configuration}}}{\v\fs20 \par }{\fs20 The only thing you have to watch out for is that, since .PRINTER is a RAM based driver, it must be installed on your boot disk before you can use the driver.  If you are running from the system disk we sent with ORCA/Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal}}}{\fs20 , the .PRINTER driver is already installed, and you can use it right away.  If you are booting from some other disk, you will need to install the .PRINTER driver on that disk.  There is an installer script that will move the correct file for you, or you can simply copy the files ORCA.PRINTER and PRINTER.CONFIG from the SYSTEM:DRIVERS folder of the ORCA system disk to the SYSTEM:DRIVERS folder of your system disk.\par All printers are not created equal, so any printer driver must come with some method to configure the driver.  By default, our printer driver is designed to handle a serial printer installed in slot 1.  It prints a maximum of 80 characters on one line, after which it will force a new line, and put any remaining characters on the new line.  After printing 60 lines, a form feed is issued to advance the paper to the start of a new page.  When a new line is needed, the driver prints a single carriage return character ($0D).  If any of these options are unsuitable for your printer, you can change them using either a CDev or a CDA.  Both of these programs produce a configuration file called PInit.Options, which will be placed in your System folder, so you need to be sure your boot disk is in a drive and not write protected when you configure your printer.  This file is read by an init called TextPrinterInit at boot time to configure the text printer driver, which is itself a GS/OS driver called TextPrinter.\par Figure 8.4 shows the screens you will see when you use the CDev from Apple's Control panel or when you select the CDA from the CDA menu.  The options that you can select are the same for both configuration programs; these are described in Table 8.5.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {{\pict{\*\picprop\shplid1049{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw326\pich380\picwgoal6520\pichgoal7600\macpict\bliptag1776081729\blipupi72{\*\blipuid 69dcdb41b16dd6ebf27523eee4ea197c}275200000000017c01461101a00082a0008e01000a0000000002d0024098002a00000000004b014800000000004b014600000000004b0146000102d70007007fdaff01f80007007fdaff01f800070060da00011800070060da00011800070060da00011800070060da00011800190367e7fff3f8ff01f81efc00063807c000000380f4ff019800190367e7fff3f8ff01f81efc00063807c000000380f4ff0198001a0360060030f7000c33000018000018066000000180f4000118001a0360060030f7000c33000018000018066000000180f4000118001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001a0360060030f7000c3033331838661807c666666180f4000118001a0360060030f7000c3033331838661807c666666180f4000118001b0367e60033f8ff0df83033331830661806066667e180f4ff0198001b0367e60033f8ff0df83033331830661806066667e180f4ff019800190360060030f700fe33091b306618060666660180f400011800190360060030f700fe33091b306618060666660180f4000118001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff0198001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff019800070060da00011800070060da00011800070060da00011800070060da0001180007007fdaff01f80007007fdaff01f8000e0070f6000360060060e9000118000e0070f6000360060060e900011800150070f6000360198060fd00030ffffffef100011800150070f6000360198060fd00030ffffffef100011800180370000007fbff018000fd60fd00030c000006f100011800180370000007fbff018000fd60fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f200011800160b70000007bbe0667e66600000fe660060e900011800160b70000007bbe0667e66600000fe660060e900011800160f70000006eee6667e66600000799999e0e900011800160f70000006eee6667e66600000799999e0e900011800160570000007bbe0fe0002600000fe660060e900011800160570000007bbe0fe0002600000fe660060e900011800140370000007fcff06e00000799999e0e900011800140370000007fcff06e00000799999e0e9000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc00011800180070f60004799999e060f50005030602600006fc00011800180070f60004799999e060f50005030602600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc0001180098002a004b000000960148004b000000960146004b0000009601460001280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc00011800150070fe00030199998cfd0003799999e0e900011800150070fe00030199998cfd0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001d0570000006aae0fe0006600000799999e0f1000030fd000460000018001d0570000006aae0fe0006600000799999e0f1000030fd00046000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd000930007800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd0009300078000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e00006000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd00046000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd000460000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e0000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e000001800160f70000006eee79879e6600000799999e0e900011800160f70000006eee79879e6600000799999e0e900011800160b70000007bbe00001e6600000fe660060e900011800160b70000007bbe00001e6600000fe660060e900011800160f70000006eee6667806600000799999e0e900011800160f70000006eee6667806600000799999e0e9000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c00000180098002a0096000000e101480096000000e101460096000000e1014600011c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c000001800140070fe00fef00170f0fe00fe660060e900011800140070fe00fef00170f0fe00fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e900011800150070f600fe660060fc000001f6ff00f8fb00011800150070f600fe660060fc000001f6ff00f8fb00011800170070f60003799999e0fc00010180f7000018fb00011800170070f60003799999e0fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc00011800160b700000180606040000800000fe660060e900011800160b700000180606040000800000fe660060e900011800160f70000007fe06040000800000799999e0e900011800160f70000007fe06040000800000799999e0e9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa00011800140370000001fd990098fe00fe660060e900011800140370000001fd990098fe00fe660060e900011800160070fe0004f0f0f998f8fe0003799999e0e900011800160070fe0004f0f0f998f8fe0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e900011800130070f60003799999e0f600003ff6ff02fc1800130070f60003799999e0f600003ff6ff02fc180098002a00e10000012c014800e10000012c014600e10000012c01460001140070f600037fffffe0f600013080f700020c1800140070f600037fffffe0f600013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc1800160070fe00041f98186780fe0003780001e0e900011800160070fe00041f98186780fe0003780001e0e900011800150070fe00001ffeff0080fe0002780001e8ff01f800150070fe00001ffeff0080fe0002780001e8ff01f800160070fe00041f80060780fe0003780001e2e922013800160070fe00041f80060780fe0003780001e2e922013800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00041f81860780fe0003780001e2e922013800160070fe00041f81860780fe0003780001e2e9220138001604700000079ffeff009efe0003780001e8e9880198001604700000079ffeff009efe0003780001e8e98801980016047000000780fe00071e600000780001e2e92201380016047000000780fe00071e600000780001e2e922013800150370000007fdff07fe600000780001e8e988019800150370000007fdff07fe600000780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e98801980016017607feff02e0ffe7feff04fe780001e2e92201380016017607feff02e0ffe7feff04fe780001e2e922013800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779f0e660fe664c707078726780001e2e922013800160f779f0e660fe664c707078726780001e2e922013800160f779e670f3fe0e3e7339f331e780001e8e988019800160f779e670f3fe0e3e7339f331e780001e8e9880198001604779e079f3ffee707339f033e780001e2e9220138001604779e079f3ffee707339f033e780001e2e9220138001604779e7f0f27fee70733933f3e780001e8e9880198001604779e7f0f27fee70733933f3e780001e8e988019800160f779f0e678fe7e7c333c7873e780001e2e922013800160f779f0e678fe7e7c333c7873e780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e922013800140070fd000201ff80fd0003780001e8e988019800140070fd000201ff80fd0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800160070fe000407800001e0fe0003780001e8e98801980098002a012c000001770148012c000001770146012c0000017701460001160070fe000407800001e0fe0003780001e8e988019800160070fe00041800180018fe0003780001e2e922013800160070fe00041800180018fe0003780001e2e922013800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e2e922013800160070fe00046000180006fe0003780001e2e922013800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e2e922013800160f700000018000180001800000780001e2e922013800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e2e922013800160f700000060000180000600000780001e2e922013800160f700000060000060000600000780001e8e988019800160f700000060000060000600000780001e8e988019800160f700000018000018001800000780001e2e922013800160f700000018000018001800000780001e2e922013800160f700000018000006001800000780001e8e988019800160f700000018000006001800000780001e8e988019800160070fe00046000001806fe0003780001e2e922013800160070fe00046000001806fe0003780001e2e922013800160070fe00046000000606fe0003780001e8e988019800160070fe00046000000606fe0003780001e8e988019800160070fe000018fe000018fe0003780001e2e922013800160070fe000018fe000018fe0003780001e2e922013800160070fe000407800001e0fe0003780001e8e988019800160070fe000407800001e0fe0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800140070fd000201ff80fd00037fffffe8e988019800140070fd000201ff80fd00037fffffe8e9880198000e0070f600037fffffe2e9220138000e0070f600037fffffe2e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000e0070f60003607fe062e9220138000e0070f60003607fe062e922013800120070fe00010fc6fb00fe600068e988019800120070fe00010fc6fb00fe600068e988019800110070fe000003fa00fe600062e922013800110070fe000003fa00fe600062e922013800140070fe0003030e7f0ffd00fe600068e988019800140070fe0003030e7f0ffd00fe600068e988019800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9f80fe000361801868e988019800160070fe000403066d9f80fe000361801868e988019800140070fe000303066d98fd00fe600062e922013800140070fe000303066d98fd00fe600062e922013800150070fe0003030f6d8ffd000360198068e988019800150070fe0003030f6d8ffd000360198068e9880198000e0070f6000360060062e9220138000e0070f6000360060062e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000b007ff3ff00e2e9220138000b007ff3ff00e2e9220138000f0070fd0000f0f80000e8e9880198000f0070fd0000f0f80000e8e988019800150a70001801e0f0000019800efd0000e2e922013800150a70001801e0f0000019800efd0000e2e922013800150a7000780260f00000198006fd0000e8e988019800150a7000780260f00000198006fd0000e8e988019800160b70c6180660f00000198f061ffe0000e2e922013800160b70c6180660f00000198f061ffe0000e2e922013800160f70c6180660f000001f998619800000e8e988019800160f70c6180660f000001f998619800000e8e988019800160f706c180660f00000199f8619800000e2e922013800160f706c180660f00000199f8619800000e2e922013800160f706c180640f0000019980619800000e8e988019800160f706c180640f0000019980619800000e8e988019800160b70387e6780f00000198f0f1ffe0000e2e922013800160b70387e6780f00000198f0f1ffe0000e2e92201380098002a01770000017c014801770000017c014601770000017c01460001130070fd0000f0fc000018fe0000e8e988019800130070fd0000f0fc000018fe0000e8e98801980007007fdaff01f80007007fdaff01f80002d700a0008fa00083ff}}{\tab }{{\pict{\*\picprop\shplid1050{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw387\pich378\picwgoal7740\pichgoal7560\macpict\bliptag3408740\blipupi72{\*\blipuid 00340364c76202c5ae82cc2c87d7c6bf}18e500000000017a01831101a00082a0008e01000a0000000002d0024098003200000000003f018800000000003f018300000000003f0183000105d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c0000b00c0ec00001fe80001c0000b00c0ec00001fe80001c00005d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0001009c0018060f1ffe7ffc006db0001c0001009c0018060f1ffe7ffc006db0001c0001009c001804e79ffe7ffc00edb0001c0001009c001804e79ffe7ffc00edb0001c0001009c003004ff9e0c0f9c006db0001c0001009c003004ff9e0c0f9c006db0001c0001009c0330060f9ce67ffc006db0001c0001009c0330060f9ce67ffc006db0001c0001009c01e007e79ce67f9c006db0001c0001009c01e007e79ce67f9c006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c0060f0e0f0ffc00fdb0001c0001009c00c0060f0e0f0ffc00fdb0001c0000e03c000007ffdff00c0da0001c0000e03c000007ffdff00c0da0001c0001004c001803006f30001079fe60001c0001004c001803006f30001079fe60001c0001003c0018030f200021c3180e70001c0001003c0018030f200021c3180e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c00c00300631b001803f3030003f319fb0000031b180e70001c000980032003f0000007e0188003f0000007e0183003f0000007e018300011c15c00c00300631b001803f3030003f319fb0000031b180e70001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001100c0f9000030fe000230001fe10001c0001100c0f9000030fe000230001fe10001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0000b00c0f7000030dd0001c0000b00c0f7000030dd0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c003f1f8f1f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c000312ac00c003f1f001f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c0000700c0d20001c0000700c0d20001c0000d06c001800e018180d80001c000280cc001800e018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c000280cc00300319f9f80303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c0002821c00300319f9f803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b1803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b180303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f80303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f803fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0002500c0fb001a3fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0000700c0d20001c0001104c001803f80fb0002319f3fdf0001c0001504c001803f80fb0006319f3f00003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001811c003000631b7bf001f3f0035b03186003180e30001c0001912c003000631b7bf001f3f0035b03186001b1f1fe40001c0001912c033000631b8318031b180359f3f00001b1f1fe40001c0001912c033000631b8318031b180359f3f00000631b0e40001c0001912c01e000631b0318031b1803181b186000631b0e40001c0001912c01e000631b0318031b1803181b18600063f9fe40001c000980032007e000000bd0188007e000000bd0183007e000000bd018300011912c00c000633b0318031b18031b1b18000063f9fe40001c0001a13c00c000633b0318031b18031b1b1800006300180e50001c0001a13c00c00061db031801f3180319f3f000006300180e50001c0001912c00c00061db031801f3180319f3f0000061f9fe40001c0000d00c0f20002061f9fe40001c0000700c0d20001c000120bc001800f0006180000180006dd0001c0001a0bc001800f0006180000180006fd000003fd000018e70001c0001809c0018006000018000018fb000003fd000018e70001c0001809c0018006000018000018fb000006fd00000ce70001c0001b10c00300063f0e3f001f3f378e3f1f060006fd00000ce70001c0001c15c00300063f0e3f001f3f378e3f1f06000c3f1f3f1f06e70001c0001c15c0330006318618003018380631b180000c3f1f3f1f06e70001c0001c11c0330006318618003018380631b180001831feb10083e70001c0001c11c01e0006318618001f18300631b186001831feb10083e70001c0001c15c01e0006318618001f18300631b186000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f318180000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f3181800003319f319f98e70001c0001300c0f500081f000003319f319f98e70001c0000b00c0f500001fdf0001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200bd000000fc018800bd000000fc018300bd000000fc018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200fc0000013b018800fc0000013b018300fc0000013b018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000c00c0d900010180fc0001c0000c00c0d900010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c000980032013b0000017a0188013b0000017a0183013b0000017a018300013000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0000700c0d20001c0000700c0d20001c00005d1ff01c00005d1ff01c00002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf00a0008fa00083ff}}{\par }\pard \qc\keepn\widctlpar\tqr\tx7920\adjustright {\fs20 \par }\pard \qc\widctlpar\tqr\tx7920\outlinelevel0\adjustright {\fs20 Figure 8.4:  Text Printer Configuration Screens\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li2160\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\adjustright {\fs20 Option\tab Description\par }\pard \qj\fi-1080\li2160\widctlpar\tx2520\adjustright {\fs20 \par Slot\tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:slot}}}{\fs20 This entry is the physical slot where your printer is located.\par Lines per page\par \tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:lines per page}}}{\fs20 This entry is a single number, telling the printer driver how many lines appear on a sheet of paper.  Most printers print 66 lines on a normal letter-size sheet of paper; it is traditional to print on 60 of those lines and leave the top and bottom 3 lines blank to form a margin.  When the printer driver finishes printing the number of lines you specify, it issues a form-feed character ($0C), which causes most printers to skip to the top of a new page.\par \tab \tab If you set this value to 0, the printer driver will never issue a form-feed character.\par }\pard \qj\fi-1080\li2160\widctlpar\tx2520\outlinelevel0\adjustright {\fs20 Columns per line\par }\pard \qj\fi-1080\li2160\widctlpar\tx2520\adjustright {\fs20 \tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:characters per line}}}{\fs20 This option is a single number telling the printer driver how many columns are on a sheet of paper.  Most printers print 80 columns on a normal letter-size sheet of paper.  If you use a value of -1, the printer driver will never split a line.  (Using the CDA configuration program, the value before 0 shows up as BRAM default; you can use the normal control panel printer configuration page to set the line length to unlimited.)  What your printer does with a line that is too long is something you would have to determine be trial and error.\par Delete LF\tab Some printers need a carriage-return line-feed character sequence to get to the start of a new line, while others only need a carriage-return.  Some programs write a carriage-return line-feed combination, while others only write a carriage-return.  This option lets you tell the printer driver to strip a line-feed character if it comes right after a carriage-return character, blocking extra line-feed characters coming in from programs that print both characters.\par \tab \tab You can select three options here:  Yes, No, or BRAM Default.  The Yes option strips extra line-feeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have selected using the printer configuration program in the control panel.\par Add LF\tab Some printers need a carriage-return line-feed character sequence to get to the start of a new line, while others only need a carriage-return.  This option lets you tell the printer driver to add a line-feed character after any carriage-return character that is printed.\par \tab \tab You can select three options here:  Yes, No, or BRAM Default.  The Yes option adds a line-feeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have selected using the printer configuration program in the control panel.\par }\pard \qj\fi-1080\li2160\widctlpar\tx2520\outlinelevel0\adjustright {\fs20 Turn on MSB\par }\pard \qj\fi-1080\li2160\widctlpar\tx2520\adjustright {\fs20 \tab This line is a flag indicating whether the printer driver should set the most significant bit when writing characters to the printer.  If this value is Yes the printer driver will set the most significant bit on all characters before sending the characters to the printer.  If you code any number other than 0, the most significant bit will be cleared before the character is sent to the printer.\par Init string\tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:control characters}}}{\fs20 This option sets a printer initialization string.  This string is sent to the printer when the driver is used for the first time.  With most printers and interface cards, there is some special code you can use to tell the printer that the characters that follow are special control codes.  These codes are often used to control the character density, number of lines per page, font, and so forth.  This initialization string, sent to the printer by the .PRINTER driver the first time the printer is used, is the traditional way of setting up your favorite defaults.\par \tab \tab You will find many cases when you will need to send a control character to the printer as part of this initialization string.  To do that using the CDev configuration program precede the character with a ~ character.  For example, an escape character is actually a control-[, so you could use ~[ to send an escape character to the printer.  The printer driver does not do any error checking when you use the ~ character, it simply subtracts $40 from the ASCII code for the character that follows the ~ character, and sends the result to the printer.  For example, g is not a control character, but ~g would still send a value, $27, to the printer.  From the CDA configuration program, just type the control character in the normal way; it will show up as an inverse character on the display.\par \tab \tab That manual that comes with your printer should have a list of the control codes you can use to configure the printer.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Table 8.5:  Text Printer Configuration Options\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The .PRINTER driver is a copyrighted program.  If you would like to send it out with your own programs, refer to Appendix D for licensing details.  (Licensing is free, but you need to include our copyright message.)\par }\pard \qj\fi360\keep\widctlpar\adjustright {\*\bkmkend bk16}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\bxe }{\rxe bk16}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The .NULL Driver}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The .NULL Driver\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\v\fs20 .NULL;}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.NULL}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The .NULL driver is a second driver available from GS/OS once it is installed from ORCA}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA}}}{\fs20 .  This driver is primarily used in shell scripts in situations where a shell program or command is writing output you don't want to see on the screen while the script runs.  In that case, you can redirect the output to .NULL.  The .NULL driver does nothing with the character, so the characters are effectively ignored by the system.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pipelines}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pipelines\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSPIPEx files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA lets you automatically execute two or more programs in sequence, directing the output of one program to the input of the next.  The output of each program but the last is written to a temporary file in the work subdirectory named SYSPIPE}{\i\fs20 n}{\fs20 , where }{\i\fs20 n}{\fs20  is a number assigned by ORCA.  The first temporary file opened is assigned an }{\i\fs20 n}{\fs20  of 0; if a second SYSPIPE}{\i\fs20 n}{\fs20  file is opened for a given pipeline, then it is named SYSPIPE1, and so forth.\par To }{\i\fs20 pipeline}{\fs20 , or sequentially execute programs PROG0, PROG1, and PROG2, use the following command:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 PROG0|PROG1|PROG2\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par The output of PROG0 is written to SYSPIPE0; the input for PROG1 is taken from SYSPIPE0, and the output is written to SYSPIPE1.  The input for PROG2 is taken from SYSPIPE1, and the output is written to standard output.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 SYSPIPE}{\i\fs20 n}{\fs20  files are text files and can be opened by the editor.\par For example, if you had a utility program called UPPER that took characters from standard input, converted them to uppercase, and wrote them to standard output, you could use the following command line to write the contents of the text file MYFILE to the screen as all uppercase characters:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 TYPE MYFILE|UPPER\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To send the output to the file MYUPFILE rather than to the screen, use the following command line:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 TYPE MYFILE|UPPER >MYUPFILE \par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The SYSPIPE}{\i\fs20 n}{\fs20  files are not deleted by ORCA after the pipeline operation is complete; thus, you can use the editor to examine the intermediate steps of a pipeline as an aid to finding errors.  The next time a pipeline is executed, however, any existing SYSPIPE}{\i\fs20 n}{\fs20  files are overwritten.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 The Command Table}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Command Table\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v command table\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v SYSCMND file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v Shell prefix}}}{\v \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v prefixes\:numbers}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:command types}}}{\v \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:built-in commands}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:utility commands}}}{\v \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:language names}}}{\v \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The command table is an ASCII text file, which you can change with the editor, or replace entirely.  It is named SYSCMND, and located in the SHELL prefix of your ORCA program disk.  The format of the command table is very simple.  Each line is either a comment line or a command definition.  Comment lines are blank lines or lines with a semicolon (;) in column one.  Command lines have four fields: the command name, the command type, the command or language number, and a comment.  The fields are separated by one or more blanks or tabs.  The first field is the name of the command.  It can be any legal GS/OS file name.  Prefixes are not allowed.  The second field is the command type.  This can be a C (built-in command), U (utility), or L (language).  The third field of a built-in command definition is the command number; the third field of a language is its language number; utilities do not use the third field.  An optional comment field can follow any command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ALIAS command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMANDS command}}}{\v\fs20 \par }{\fs20 Built-in commands are those that are predefined within the command processor, like the CATALOG command.  Being able to edit the command table means that you can change the name of these commands, add aliases for them, or even remove them, but you cannot add a built-in command.  As an example, UNIX fans might like to change the CATALOG command to be LS.  You would do this by editing the command table.  Enter LS as the command name, in column one.  Enter a C, for built-in command, in column two.  Enter the command number 4, obtained from looking at the command number for CATALOG in the command table, in column three.  Exit the editor, saving the modified SYSCMND file.  Reload the new command table by rebooting or by issuing the COMMANDS command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Languages prefix}}}{\fs20 Languages define the languages available on the system.  You might change the language commands by adding a new language, like ORCA/Pascal.  The first field contains the name of the EXE file stored in the LANGUAGES subdirectory of your ORCA system.  The second field is the letter L, and the third the language number.  The L can be preceded by an asterisk, which indicates that the assembler or compiler can be restarted.  That is, it need not be reloaded from disk every time it is invoked.  The ORCA/Pascal compiler, linker, and editor can all be restarted.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 restartable programs}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:utility commands}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\fs20 The last type of command is the utility.  Utilities are easy to add to the system, and will therefore be the most commonly changed item in the command table.  The first field contains the name of the utility's EXE file stored in the UTILITIES subdirectory of your ORCA system.  The second field is a U.  The third field is not needed, and is ignored if present.  As with languages, utilities that can be restarted are denoted in the command table by preceding the U with an asterisk.  Programs that can be restarted are left in memory after they have been executed.  If they are called again before the memory they are occupying is needed, the shell does not have to reload the file from disk.  This can dramatically increase the performance of the system.  Keep in mind that not all programs can be restarted!  You should not mark a program as one that can be restarted unless you are sure that it really can be safely restarted.\par As an example of what has been covered so far, the command table shipped with the system is shown in Table 8.6.\par }\pard \qc\widctlpar\adjustright {\par }\pard \li1440\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 ;\par ;  ORCA Command Table\par ;\par ALIAS\tab \tab C\tab 40\tab \tab alias a command\par ASM65816\tab *L\tab 3\tab \tab 65816 assembler\par ASML\tab \tab C\tab 1\tab \tab assemble and link\par ASMLG\tab \tab C\tab 2\tab \tab assemble, link and execute\par ASSEMBLE\tab C\tab 3\tab \tab assemble\par BREAK\tab \tab C\tab 25\tab \tab break from loop\par CAT\tab \tab C\tab 4\tab \tab catalog\par CATALOG\tab \tab C\tab 4\tab \tab catalog\par CC\tab \tab *L\tab 8\tab \tab ORCA/C compiler\par CHANGE\tab \tab C\tab 20\tab \tab change language stamp\par CMPL\tab \tab C\tab 1\tab \tab compile and link\par CMPLG\tab \tab C\tab 2\tab \tab compile, link and execute\par COMMANDS\tab C\tab 35\tab \tab read command table\par COMPACT\tab \tab *U\tab \tab \tab compact OMF files\par COMPILE\tab \tab C\tab 3\tab \tab compile\par COMPRESS\tab C\tab 32\tab \tab compress/alphabetize directories\par CONTINUE\tab C\tab 26\tab \tab continue a loop\par COPY\tab \tab C\tab 5\tab \tab copy files/directories/disks\par CREATE\tab \tab C\tab 6\tab \tab create a subdirectory\par CRUNCH\tab \tab *U\tab \tab \tab combine object modules\par DELETE\tab \tab C\tab 7\tab \tab delete a file\par DEREZ\tab \tab *U\tab \tab \tab resource decompiler\par DEVICES\tab \tab C\tab 48\tab \tab Show Devices\par DISABLE\tab \tab C\tab 8\tab \tab disable file attributes\par DISKCHECK\tab U\tab \tab \tab check integrity of ProDOS disks\par DUMPOBJ\tab \tab U\tab \tab \tab object module dumper\par EDIT\tab \tab *C\tab 9\tab \tab edit a file\par ECHO\tab \tab C\tab 29\tab \tab print from an exec file\par ELSE\tab \tab C\tab 31\tab \tab part of an IF statement\par ENABLE\tab \tab C\tab 10\tab \tab enable file attributes\par END\tab \tab C\tab 23\tab \tab end an IF, FOR, or LOOP\par ENTAB\tab \tab *U\tab \tab \tab entab utility\par ERASE\tab \tab C\tab 44\tab \tab Erase entire volume.\par EXEC\tab \tab L\tab 6\tab \tab EXEC language\par EXECUTE\tab \tab C\tab 38\tab \tab EXEC with changes to local variables\par EXISTS\tab \tab C\tab 19\tab \tab see if a file exists\par EXIT\tab \tab C\tab 27\tab \tab exit a loop\par EXPORT\tab \tab C\tab 36\tab \tab export a shell variable\par EXPRESS\tab \tab U\tab \tab \tab converts files to ExpressLoad format\par FILETYPE\tab C\tab 21\tab \tab change the type of a file\par FOR\tab \tab C\tab 22\tab \tab for loop\par GSBUG\tab \tab U\tab \tab \tab application version of debugger\par HELP\tab \tab C\tab 11\tab \tab online help\par HISTORY\tab \tab C\tab 39\tab \tab display last 20 commands\par HOME\tab \tab C\tab 43\tab \tab clear the screen and home the cursor\par IF\tab \tab C\tab 30\tab \tab conditional branch\par INIT\tab \tab C\tab 45\tab \tab initialize disks\par INPUT\tab \tab C\tab 13\tab \tab read a value from the command line\par LINK\tab \tab *C\tab 12\tab \tab link\par LINKER\tab \tab *L\tab 265\tab \tab command line linker script\par LOOP\tab \tab C\tab 24\tab \tab loop statement\par MACGEN\tab \tab U\tab \tab \tab generate a macro file\par MAKEBIN\tab \tab U\tab \tab \tab convert load file to a binary file\par MAKELIB\tab \tab U\tab \tab \tab librarian\par MOVE\tab \tab C\tab 34\tab \tab move files\par PASCAL\tab \tab *L\tab 5\tab \tab Pascal compiler\par PREFIX\tab \tab C\tab 14\tab \tab set system prefix\par PRIZM\tab \tab U\tab \tab \tab desktop development system\par PRODOS\tab \tab L\tab 0\tab \tab ProDOS language\par QUIT\tab \tab C\tab 15\tab \tab exit from ORCA\par RENAME\tab \tab C\tab 16\tab \tab rename files\par RESEQUAL\tab *U\tab \tab \tab compares resource forks\par REZ\tab \tab *L\tab 21\tab \tab resource compiler\par RUN\tab \tab C\tab 2\tab \tab compile, link and execute\par SET\tab \tab C\tab 28\tab \tab set a variable\par SHOW\tab \tab C\tab 17\tab \tab show system attributes\par SWITCH\tab \tab C\tab 33\tab \tab switch order of files\par SHUTDOWN\tab C\tab 47\tab \tab shut down the computer\par TEXT\tab \tab L\tab 1\tab \tab Text file\par TOUCH\tab \tab C\tab 46\tab \tab Update date/time\par TYPE\tab \tab C\tab 18\tab \tab list a file to standard out\par UNALIAS\tab \tab C\tab 41\tab \tab delete an alias\par }\pard \li1440\keepn\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 UNSET\tab \tab C\tab 37\tab \tab delete a shell variable\par *\tab \tab C\tab 42\tab \tab comment\par }\pard \fi-270\li720\keep\keepn\widctlpar\adjustright {\f6\fs14 \par }\pard \qc\keep\keepn\widctlpar\adjustright {\fs20 Table 8.6   System Commands\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Command And Utility Reference}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Command And Utility Reference\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each of the commands and utilities than ship with ORCA/Pascal are listed in alphabetic order.  The syntax for the command is given, followed by a description and any parameters using the following notation:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\fs20 UPPERCASE}{\fs20 \tab \tab Uppercase letters indicate a command name or an option that must be spelled exactly as shown.  The shell is not case sensitive; that is, you can enter commands in any combination of uppercase and lowercase letters.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 italics}{\fs20 \tab \tab Italics indicate a variable, such as a file name or address.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 directory}{\fs20 \tab \tab This parameter indicates any valid directory path name or partial path name.  It does }{\i\fs20 not}{\fs20  include a file name.  If the volume name is included, }{\i\fs20 directory}{\fs20  must start with a slash (/) or colon (:); if }{\i\fs20 directory}{\fs20  does not start with one of these characters, then the current prefix is assumed.  For example, if you are copying a file to the subdirectory SUBDIRECTORY on the volume VOLUME}{\i\fs20 ,}{\fs20  then the }{\i\fs20 directory }{\fs20 parameter would be:  :VOLUME:SUBDIRECTORY.  If the current prefix were :VOLUME:, then you could use SUBDIRECTORY for }{\i\fs20 pathname .}{\fs20 \par \tab \tab The device numbers .D1, .D2, ... .D}{\i\fs20 n}{\fs20  can be used for volume names; if you use a device name, do not precede it with a slash.  For example, if the volume VOLUME in the above example were in disk drive .D1, then you could enter the }{\i\fs20 directory}{\fs20  parameter as .D1:SUBDIRECTORY.\par \tab \tab GS/OS device names can be used for the volume names.  Device names are the names listed by the SHOW UNITS command; they start with a period.  You should not precede a device name with a slash.\par \tab \tab GS/OS prefix numbers can be used for directory prefixes.  An asterisk (*) can be used to indicate the boot disk.  Two periods (..) can be used to indicate one subdirectory above the current subdirectory.  If you use one of these substitutes for a prefix, do not precede it with a slash.  For example, the HELP subdirectory on the ORCA disk can be entered as 6:HELP.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 filename}{\fs20 \tab \tab This parameter indicates a file name, }{\i\fs20 not}{\fs20  including the prefix.  The device names .CONSOLE and .PRINTER can be used as file names.  Other character devices can also be used as file names, but a block device (like the name of a disk drive) cannot be used as a file name.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 pathname}{\fs20 \tab \tab This parameter indicates a full path name, including the prefix and file name, or a partial path name, in which the current prefix is assumed.  For example, if a file is named FILE in the subdirectory DIRECTORY on the volume VOLUME, then the }{\i\fs20 pathname }{\fs20 parameter would be:  :VOLUME:DIRECTORY:FILE.  If the current prefix were :VOLUME:, then you could use DIRECTORY:FILE for }{\i\fs20 pathname . }{\fs20  A full path name (including the volume name) must begin with a slash (/) or colon (:); do }{\i\fs20 not}{\fs20  precede }{\i\fs20 pathname }{\fs20  with a slash if you are using a partial path name.\par \tab \tab Character device names, like .CONSOLE and .PRINTER, can be used as file names; the device numbers .D1, .D2, ... .D}{\i\fs20 n}{\fs20  can be used for volume names; GS/OS device names can be used a volume names; and GS/OS prefix numbers, an asterisk (*), or double periods (..) can be used instead of a prefix.\par \par }{\b\fs20 |}{\fs20 \tab \tab A vertical bar indicates a choice.  For example, +L|-L indicates that the command can be entered as either +L or as -L.\par \par }{\b\fs20 A|}{\b\fs20\ul B}{\fs20 \tab \tab An underlined choice is the default value.\par \par }\pard \fi-1901\li2160\widctlpar\tx2520\adjustright {\b\fs20 [ ]}{\fs20 \tab \tab Parameters enclosed in square brackets are optional.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\fs20 \par }{\b\i\fs20 ...}{\fs20 \tab \tab Ellipses indicate that a parameter or sequence of parameters can be repeated as many times as you wish.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ALIAS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ALIAS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 ALIAS [}{\i\f6\fs20 name}{\f6\fs20  [}{\i\f6\fs20 string}{\f6\fs20 ]]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ALIAS command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ALIAS command allows you to create new commands based on existing ones.  It creates an alias called }{\i\fs20 name}{\fs20 , which can then be typed from the command line as if it were a command.  When you type the name, the command processor substitutes }{\i\fs20 string}{\fs20  for the name before trying to execute the command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DUMPOBJ utility}}}{\v\fs20 \par }{\fs20 For example, let's assume you dump hexadecimal files with the DUMPOBJ file fairly frequently.  Remembering and typing the three flags necessary to do this can be a hassle, so you might use the ALIAS command to define a new command called DUMP.  The command you would use would be\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 ALIAS  DUMP  DUMPOBJ -F +X -H\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Now, to dump MYFILE in hexadecimal format, type\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 DUMP MYFILE\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You can create a single alias that executes multiple commands by enclosing a string in quotes.  For example,\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 ALIAS GO "CMPL MYFILE.ASM; FILETYPE MYFILE S16; MYFILE"\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 creates a new command called GO.  This new command compiles and links a program, changes the file type to S16, and then executes the program.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The name and string parameters are optional.  If a name is specified, but the string is omitted, the current alias for that name will be listed.  If both the name and the string are omitted, a list of all current aliases and their values is printed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }{\fs20 Aliases are automatically exported from the LOGIN file to the command level.  This means that any aliases created in the LOGIN file are available for the remainder of the session, or until you specifically delete or modify the alias.  Aliases created in an EXEC file are available in that EXEC file and any other it calls, but not to the command level.  See the EXECUTE command for a way to override this.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNALIAS command}}}{\v\fs20 \par }{\fs20 See the UNALIAS command for a way to remove an alias.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASM65816}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASM65816\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 ASM65816\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASM65816 command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to 65816 Assembly Language.\par While you can set the language and create assembly language files, you will not be able to assemble them unless you purchase the ORCA/M macro assembler and install it with ORCA/Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASML}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASML\tcl3}}}{\b \par }\pard \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\f6\fs20 ASML\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linking a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command assembles (or compiles) and links a source file.  The ORCA shell checks the language of the source file and calls the appropriate assembler or compiler.  If the maximum error level returned by the assembler or compiler is less than or equal to the maximum allowed (0 unless you specify otherwise with the MERR directive or its equivalent in the source file), then the resulting object file is linked.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MERR directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APPEND directive}}}{\v\fs20 \par }{\fs20 You can use APPEND directives (or the equivalent) to tie together source files written in different computer languages; ORCA compilers and assemblers check the language type of each file and return control to the shell when a different language must be called.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:parameters}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPILE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command}}}{\v\fs20 \par }{\fs20 Not all compilers or assemblers make use of all the parameters provided by this command (and the ASSEMBLE, ASMLG, COMPILE, CMPL, CMPLG, and RUN commands, which use the same parameters).  The ORCA/Pascal compiler, for example, includes no language-specific options, and so makes no use of the }{\i\fs20 language}{\fs20 =(}{\i\fs20 option}{\fs20  ...) parameter.  If you include a parameter that a compiler or assembler cannot use, it ignores it; no error is generated.  If you used append statements to tie together source files in more than one language, then all parameters are passed to every compiler, and each compiler uses those parameters that it recognizes.\par Command-line parameters (those described here) override source-code options when there is a conflict.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 +D|-D\tab +D causes debug code to be generated so that the source-level debugger may be used later when debugging the program.  -D, the default, causes debug code to not be generated.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:compiler}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +E|-E\tab When a terminal error is encountered during a compile from the command line, the compiler aborts and enters the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.  From an EXEC file, the default is to display the error message and return to the shell.  The +E flag will cause the compiler to abort to the editor, while the -E flag causes the compiler to abort to the shell.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 header files}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 precompiled headers}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sym files}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 -I\tab When the ORCA/C compiler compiles a program, it normally creates a .sym file in the same location as the original source file.  This flag tells the compiler not to create a .sym file, and to ignore any existing .sym file.  This flag is not used by the ORCA/Pascal compiler.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler listings}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LIST directive}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link map}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +L|-L\tab If you specify +L, the assembler or compiler generates a source listing; if you specify -L, the listing is not produced.  The L parameter in this command overrides the LIST directive in the source file.  +L will cause the linker to produce a link map.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +M|-M\tab +M causes any object modules produced by the assembler or compiler to be written to memory, rather than to disk.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 labels\: global}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 symbol tables\:linker}}}{\v\fs20 END directive;}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END directive}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +O|-O\tab ORCA/Pascal is an optimizing compiler.  This flag can turn the optimizations on or off from the command line.  Unlike the other parameters, and optimize pragma in the source file will override this flag.\par \par +P|-P\tab The compiler, linker, and many other languages print progress information as the various subroutines are processed.  The -P flag can be used to suppress this progress information.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 header files}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 precompiled headers}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sym files}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 -R\tab ORCA/C can detect changes in the source file or object files that would make it necessary to rebuild the .sym file.  This flag bypasses the automatic check, forcing the compiler to rebuild the .sym file.  ORCA/Pascal does not use this flag.\par \par +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all global references in the object file; the assembler or compiler may also produce a symbol table, although the ORCA/Pascal compiler does not.  If you specify -S, these symbol tables are not produced.  The S parameter in this command overrides the SYMBOL directive in the source file.\par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \par }\pard \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 terminal errors}}}{\v\fs20 \par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +T|-T\tab The +T flag causes all errors to be treated as terminal errors, aborting the compile.  This is normally used in conjunction with +E.  In that case, any error will cause the compiler to abort and enter the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.}{\i\fs20 \par }{\fs20 \par }\pard \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\v\fs20 .}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:status banner}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wait flag}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\caps\v\fs20 abort}{\v\fs20  command}{\caps\v\fs20 }}}{\v\fs20 \par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +W|-W\tab Normally, the compiler continues compiling a program after an error has been found.  If the +W flag is specified, the assembler or compiler will stop after finding an error, and wait for a keypress.  Pressing }{\outl\fs20 \u-3\'f0}{\fs20 . will abort the compile, entering the editor with the cursor on the offending line.  Press any other key to continue the compile.}{\i\fs20 \par \par sourcefile}{\fs20 \tab The full path name or partial path name (including the file name) of the source file.\par \par }\pard \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 partial compilation}}}{\v\fs20 \par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 KEEP=}{\i\fs20 outfile}{\fs20   You can use this parameter to specify the path name or partial path name (including the file name) of the output file.  For a one-segment program, ORCA names the object file }{\i\fs20 outfile}{\fs20 .ROOT.  If the program contains more than one segment, ORCA places the first segment in }{\i\fs20 outfile}{\fs20 .ROOT and the other segments in }{\i\fs20 outfile}{\fs20 .A.  If this is a partial compile (or several source files with different programming languages are being compiled), then other file name extensions may be used.  If the compilation is followed by a successful link, then the load file is named }{\i\fs20 outfile.}{\fs20 \par }{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP directive}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\i\fs20 \tab \tab }{\fs20 This parameter has the same effect as placing a KEEP pragma in your source file.  If you have a KEEP pragma in the source file and you also use the KEEP parameter, this parameter has precedence.\par }{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:metacharacters}}}{\v\fs20 \par }{\fs20 \tab \tab When specifying a KEEP parameter, you can use two metacharacters to modify the KEEP name.  If the % character is found in the keep name, the source file name is substituted.  If $ is encountered, the source file name with the last extension removed is substituted.\par }{\b\fs20 \tab \tab }{\fs20 Note the following about the KEEP parameter:\par }\pard \qj\fi-360\li1800\widctlpar\tx1800\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepName\} shell variable}}}{\v\fs20 \par }\pard \qj\fi-360\li1800\widctlpar\tx1800\adjustright {\fs20 \bullet \tab If you use neither the KEEP parameter, the \{KeepName\} variable, nor the KEEP directive, then the object files are not saved at all.  In this case, the link cannot be performed, because there is no object file to link.\par }{\pard\plain \qj\fi-360\li1800\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\v\fs20 \par }{\fs20 \par \bullet \tab The file name you specify in }{\i\fs20 outfile}{\fs20  must not be over 10 characters long.  This is because the extension .ROOT is appended to the name, and GS/OS does not allow file names longer than 15 characters.\par \par \bullet \tab By default, PRIZM uses $ as the keep name.  When you are using PRIZM, do not specify the keep name any other way unless in agrees with the keep name PRIZM will generate by default.\par }{\pard\plain \qj\fi-360\li1800\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 code segment}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \par NAMES=(}{\i\fs20 seg1}{\fs20  }{\i\fs20 seg2}{\fs20  ...)  This parameter causes the assembler or compiler to perform a partial assembly or compile; the operands }{\i\fs20 seg1, seg2, ...}{\fs20  specify the names of the subroutines to be assembled or compiled.  In the case of objects, the object type name is given, and all of the methods within that object are recompiled.  Separate the names with one or more spaces.  The ORCA Linker automatically selects the latest version of each subroutine when the program is linked.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \tab \tab The object file created when you use the NAMES parameter contains only the specified subroutines.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 code segment}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object segment}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\v\fs20 \par }{\fs20 \tab \tab You must use the same output file name for every partial compilation or assembly of a program.  For example, if you specify the output file name as OUTFILE for the original compile of a program, then the compiler creates object files named OUTFILE.ROOT and OUTFILE.A.  In this case you must also specify the output file name as OUTFILE for the partial compile.  The new output file is named OUTFILE.B, and contains only the functions listed with the NAMES parameter.  When you link a program, the linker scans all the files whose file names are identical except for their extensions, and takes the latest version of each segment.\par \tab \tab No spaces are permitted immediately before or after the equal sign in this parameter.\par \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\i\fs20 language1}{\fs20 =(}{\i\fs20 option}{\b\i\fs20  }{\i\fs20 ...}{\fs20 )}{\b\fs20  }{\fs20 ...  This parameter allows you to pass parameters directly to specific compilers and assemblers running under the ORCA shell.  For each compiler or assembler for which you want to specify options, type the name of the language (exactly as defined in the command table), an equal sign (=), and the string of options enclosed in parentheses.  The contents and syntax of the options string is specified in the compiler or assembler reference manual; the ORCA shell does no error checking on this string, but passes it through to the compiler or assembler.  You can include option strings in the command line for as many languages as you wish; if that language compiler is not called, then the string is ignored.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \tab \tab No spaces are permitted immediately before or after the equal sign in this parameter.\par \tab \tab The ORCA/Pascal compiler does not use this parameter.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRINTER directive}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASMLG}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASMLG\tcl3}}}{\b \par }\pard \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright {\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linking a program}}}{\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executing a program}}}{\v\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\fs20 \par }{\f6\fs20 ASMLG\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command assembles (or compiles), links, and runs a source file.  Its function is identical to that of the ASML command, except that once the file has been successfully linked, it is executed automatically.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASSEMBLE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASSEMBLE\tcl3}}}{\b \par }\pard \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright {\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\v\fs20 \par }\pard \fi-1350\li1350\keepn\widctlpar\tx1350\adjustright {\fs20 \par }\pard \fi-1340\li1340\keepn\widctlpar\tx1340\adjustright {\f6\fs20 ASSEMBLE\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P]\par \tab [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright {\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command assembles (or compiles) a source file.  Its function is identical to that of the ASML command, except that the ASSEMBLE command does not call the linker to link the object files it creates; therefore, no load file is generated.  You can use the LINK command to link the object files created by the ASSEMBLE command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b BREAK}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v BREAK\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 BREAK\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 BREAK command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ECHO command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command is used to terminate a FOR or LOOP statement.  The next statement executed will be the one immediately after the END statement on the closest nested FOR or LOOP statement.  For example,  the EXEC file\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 FOR I IN 1 2 3\par   FOR J IN 2 3\par     IF \{I\} == \{J\}\par       BREAK\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18     END\par     ECHO \{I\}\par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18   END\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par would print\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 1\par 1\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 3\par }\pard \qj\widctlpar\adjustright {\fs20 \par to the screen.  This order results from the fact that BREAK exits from the closest loop, the }{\f6\fs18 FOR J IN 2 3}{\fs20 , not from all loops.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CAT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CAT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\tx540\adjustright {\f6\fs20 CAT\tab [-A] [-D] [-H] [-L] [-N] [-P] [-T]\par \tab [}{\i\f6\fs20 directory1 }{\f6\fs20 [}{\i\f6\fs20 directory2 ...}{\f6\fs20 ]]\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 CAT [-A] [-D] [-H] [-L] [-N] [-P] [-T] [}{\i\f6\fs20 pathname}{\f6\fs20 1 [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This internal command is an alternate name for CATALOG.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CATALOG}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CATALOG\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 current prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\v\fs20 \par }{\fs20 \par }\pard \fi-1080\li1080\keepn\widctlpar\adjustright {\f6\fs20 CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T] \par \tab [}{\i\f6\fs20 directory1 }{\f6\fs20 [}{\i\f6\fs20 directory2 ...}{\f6\fs20 ]]\par \par CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T] \par \tab [}{\i\f6\fs20 pathname}{\f6\fs20 1 [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command lists to standard output the directory of the volume or subdirectory you specify.  More than one directory or subdirectory can be listed to get more than one catalog from a single command.\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -A\tab GS/OS supports a status bit called the invisible bit.  Finder droppings files, for example, are normally flagged as invisible so they won't clutter directory listings.  The CATALOG command does not normally display invisible files when you catalog a directory; if you use the -A flag, the CATALOG command will display invisible files.\par \par -D\tab If the -D flag is used, this command does a recursive catalog of directories, showing not only the directory name, but the contents of the directory, and the contents of directories contained within the directory.\par \par -H\tab When this flag is used, the CATALOG command does not print the header, which shows the path being cataloged, or the trailer, which shows statistics about disk use.\par \par -L\tab The standard format for a directory listing is a table, with one line per file entry.  When this flag is used, the CATALOG command shows a great deal more information about each file, but the information is shown using several lines.\par \par -N\tab This flag causes the CATALOG command to show only the name of the file, omitting all other information.  Files are formatted with multiple file names per line, placing the file names on tab stops at 16 character boundaries.  The resulting table is considerably easier to scan when looking for a specific file.\par \par -P\tab The name of a file is normally displayed as a simple file name.  Use of the -P flag causes the files to be listed as full path names.  This option does make the file names fairly long, so the default tabular format may become cumbersome.  Using this option with -L or -N clears up the problem.\par \par -T\tab Most file types have a standard 3-letter identifier that is displayed by the catalog command.  For example, an ASCII file has a 3-letter code of TXT.  These 3-letter codes are displayed by the CATALOG command.  If you use the -T flag, the CATALOG command displays the hexadecimal}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  file type instead of the 3-letter file type code.\par \tab \tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\fs20 This flag also controls the auxiliary file type field, which is shown as a language name for SRC files.  When the -T flag is used, this field, too, is shown as a hexadecimal value for all file types.\par \par }{\i\fs20 directory\tab }{\fs20 The path name or partial path name of the volume, directory, or subdirectory for which you want a directory listing.  If the prefix is omitted, then the contents of the current directory are listed.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\i\fs20 \par pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file for which you want directory information.  You can use wildcard characters in the file name to obtain information about only specific files.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs18 :ORCA.DISASM:=\par \par Name            Type  Blocks  Modified        Created         Access  Subtype\par \par Desktop.DISASM  S16+     230 14 Aug 90       21 May 90        DNBWR   $DB03\par DISASM          EXE      101 15 Aug 90       15 Aug 90        DNBWR   $0100\par DISASM.Config   $5A+       2 17 May 90       30 Apr 90        DNBWR   $800A\par DISASM.Data     TXT       95 10 Aug 90       20 Oct 88        DNBWR   $0000\par DISASM.Scripts  SRC       94 23 May 90       15 Aug 89        DNBWR   $0116\par Help            DIR        1 18 Sep 89       14 Sep 89        DNBWR   $0000\par Samples         DIR        1 13 Aug 90       14 Sep 89        DNBWR   $0000\par Icons           DIR        1 17 Sep 89       14 Sep 89        DNBWR   $0000\par \par Blocks Free:   1026      Blocks used:    574      Total Blocks:   1600\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Table 8.7  Sample CATALOG Listing\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Table 8.7 shows the output from cataloging the ORCA/Disassembler 1.2 disk.  This particular disk has a good variety of file types and so forth; we'll use it to see what the CATALOG command can tell us about a disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 disassembler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 disk size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 blocks}}}{\fs20 The first line shows the path being cataloged; in this case, we are cataloging all files on the disk ORCA.DISASM.  The last line gives more information about the disk, including the number of blocks that are not used, the number that are used, and the total number of blocks on the disk.  For ProDOS format disks, a block is 512 bytes, so this disk is an 800K disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names}}}{\fs20 Between these two lines is the information about the files on the disk.  The first column is the file name.  If the file name is too long to fit in the space available, the rest of the information will appear on the line below.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 Next is the type of the file.  Most file types have a three letter code associated with them, like S16 (System 16) for a file that can be executed from the Finder or the ORCA shell, and DIR (directory) for a folder.  There is no three letter code for a file with a type of $5A, so this file type is shown as the hexadecimal number for the file type.  If a file is an extended file (i.e., if it has a resource fork), the file type is followed by a + character.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 blocks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sparse files}}}{\fs20 The column labeled "Blocks" shows the number of blocks occupied by the file on the disk.  GS/OS is clever about the way it stores files, not using a physical disk block for a file that contains only zeros, for example, and programs are not necessarily loaded all at once, so this block size does not necessarily correspond to the amount of memory that will be needed to load a file or run a program; it only tells how much space is required on the disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 time}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 date}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 creation time}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modify time}}}{\fs20 The columns labeled "Modified" and "Created" give the date and time when the file was last changed and when the file was originally created, respectively.  In this example, the time fields have been artificially set to 00:00 (something the Byte Works does for all of its distribution disks).  When the time is set to 00:00, it is not shown.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\fs20 The column labeled Access shows the values of six flags that control whether a file can be deleted (D), renamed (N), whether it has been backed up since the last time it was modified (B), whether it can be written to (W) or read from (R), and whether it is invisible (I).  In all cases, if the condition is true, the flag is shown as an uppercase letter, and if the condition is false, the flag is not shown at all.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auxiliary file type}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\fs20 The last column, labeled "Subtype", shows the auxiliary file type for the file.  For most files, this is shown as a four-digit hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  number, but for SRC files you will see the name of the language.\par \par }\pard \li2520\keepn\widctlpar\adjustright {\f6\fs18 Name         : Desktop.DISASM\par Storage Type : 5\par File Type    : S16       $B3\par Aux Type     : $DB03\par Access       : DNBWR     $E3\par Mod Date     : 14 Aug 90       \par Create Date  : 21 May 90       \par Blocks Used  : 139\par Data EOF     : $00011A6B\par Res. Blocks  : 91\par Res. EOF     : $0000B215\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Table 8.8\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EOF}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file length}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 blocks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource fork}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 storage type}}}{\fs20 The tabular form used by the CATALOG command to show information about files is compact, but doesn't provide enough room to show all of the information about a file that is available from GS/OS.  When the -L flag is used, the CATALOG command uses an expanded form to show more information about the file.  Table 8.8 shows the expanded information for the Desktop.DISASM file.  The name, file type, auxiliary file type, access, modification date and creation date fields are the same as before, although the order has changed and the fields that have a hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  equivalent are shown using both forms.  The old block count field has been expended, showing the number of blocks used by the date fork (the Blocks Used field) and the resource fork (labeled Res. Blocks) as two separate values.  In addition, the true size of the file in bytes is shown, again split between the data fork and resource fork, as the Date EOF field and the Res. EOF field.  Finally, the internal storage type used by GS/OS is listed.\par For a more complete and technical description of the various information returned by the CATALOG command, see }{\i\fs20 Apple\~II}{\i\fs18 GS}{\i\fs20  GS/OS Reference}{\fs20 , Volume 1.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CC}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CC\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 CC\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CC command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to CC, the language stamp used by the ORCA/C compiler.\par While you can set the language and create C source files, you will not be able to compile them unless you purchase the ORCA/C compiler and install it with ORCA/Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CHANGE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CHANGE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CHANGE command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 CHANGE [-P] }{\i\f6\fs20 pathname language\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This internal command changes the language type of an existing file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the source file whose language type you wish to change.  You can use wildcard characters in the file name.\par \par }{\i\fs20 language}{\fs20 \tab The language type to which you wish to change this file.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In ORCA, each source or text file is assigned the current default language type when it is created.  When you assemble or compile the file, ORCA checks the language type to determine which assembler, compiler, linker, or text formatter to call.  Use the CATALOG command to see the language type currently assigned to a file.  Use the CHANGE command to change the language type of any of the languages listed by the SHOW LANGUAGES command.\par You can use the CHANGE command to correct the ORCA language type of a file if the editor was set to the wrong language type when you created the file, for example.  Another use of the CHANGE command is to assign the correct ORCA language type to an ASCII text file (GS/OS file type $04) created with another editor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CMPL}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CMPL\tcl3}}}{\b \par }\pard \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command\bxe }}}{\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linking a program}}}{\v\fs20 \par }{\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\f6\fs20 CMPL\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles) and links a source file.  Its function and parameters are identical to those of the ASML command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CMPLG}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CMPLG\tcl3}}}{\b \par }\pard \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright {\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command\bxe }}}{\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executing a program}}}{\v\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\fs20 \par }{\f6\fs20 CMPLG\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles), links, and runs a source file.  Its function is identical to that of the ASMLG command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMMANDS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMMANDS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMANDS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command table}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSCMND file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 restartable programs}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 COMMANDS }{\i\f6\fs20 pathname\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command causes ORCA to read a command table, resetting all the commands to those in the new command table.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file containing the command table.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you load ORCA, it reads the command-table file named SYSCMND in prefix 15.  You can use the COMMANDS command to read in a custom command table at any time.  Command tables are described in the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par The COMMANDS command has one other useful side effect.  Any program that can be restarted that has been loaded and left in memory will be purged, thus freeing a great deal of memory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMPACT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMPACT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPACT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 OMF}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APW C}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 COMPACT }{\i\f6\fs20 infile}{\f6\fs20  [-O }{\i\f6\fs20 outfile}{\f6\fs20 ] [-P] [-R] [-S]}{\i\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This external command converts a load file from an uncompacted form to a compacted form. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 infile}{\fs20 \tab Input load file.  Any OMF format file is acceptable, but the only files that benefit from the COMPACT utility are the executable files, such as EXE and S16.\par \par -O }{\i\fs20 outfile}{\fs20 \tab By default, the input file is replaced with the compacted version of the same file.  If you supply an output file name with this option, the file is written to }{\i\fs20 outfile}{\fs20 .\par \par -P\tab When the -P flag is used, copyright and progress information is written to standard out.\par \par -R\tab The -R option marks any segment named ~globals or ~arrays as a reload segment.  It also forces the bank size of the ~globals segment to $10000.  These options are generally only used with APW C programs.\par \par -S\tab The -S flag causes a summary to be printed to standard out.  This summary shows the total number of segments in the file, the number of each type of OMF record compacted, copied, and created.  This information gives you some idea of what changes were made to make the object file smaller.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Compacted object files are smaller and load faster than uncompacted load files.  The reduction in file size is generally about 40%, although the actual number can vary quite a bit in practice.  In addition, if the original file is in OMF 1.0 format, it is converted to OMF 2.0.\par Files created with ORCA/Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal}}}{\fs20  are compacted by default.  The main reason for using this utility is to convert any old programs you may obtain to the newer OMF format, and to reduce their file size.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMPILE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMPILE\tcl3}}}{\b \par }\pard \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright {\pard\plain \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPILE command}}}{\pard\plain \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\v\fs20 \par }\pard \fi-1170\li1170\keepn\widctlpar\tx1170\adjustright {\fs20 \par }\pard \fi-980\li980\keepn\widctlpar\tx980\adjustright {\f6\fs20 COMPILE\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles) a source file.  Its function is identical to that of the ASML command, except that it does not call the linker to link the object files it creates; therefore, no load file is generated.  You can use the LINK command to link the object files created by the COMPILE command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMPRESS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMPRESS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPRESS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 alphabetizing directories}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 COMPRESS A | C | A C  [}{\i\f6\fs20 directory1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20  ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compresses and alphabetizes directories.  More than one directory can be specified on a single command line.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 A\tab Use this parameter to alphabetize the file names in a directory.  The file names appear in the new sequence whenever you use the CATALOG command.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 C\tab Use this parameter to compress a directory.  When you delete a file from a directory, a \ldblquote hole\rdblquote  is left in the directory that GS/OS fills with the file entry for the next file you create.  Use the C parameter to remove these holes from a directory, so that the name of the next file you create is placed at the end of the directory listing instead of in a hole in the middle of the listing.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 A C\tab You can use both the A and C parameters in one command; if you do so, you must separate them with one or more spaces.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 current prefix}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DOS}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\i\fs20 \par directory}{\fs20 \tab The path name or partial path name of the directory you wish to compress or alphabetize, }{\i\fs20 not}{\fs20  including any file name.  If you do not include a volume or directory path, then the current directory is acted on.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SWITCH command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command works only on GS/OS directories, not on other file systems such as DOS or Pascal.  Due to the design of GS/OS, the COMPRESS command will also not work on the disk volume that you boot from \endash  to modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par To interchange the positions of two files in a directory, use the SWITCH command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CONTINUE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CONTINUE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CONTINUE command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 CONTINUE\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DELETE command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command causes control to skip over the remaining statements in the closest nested FOR or LOOP statement.  For example, the EXEC file\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi720\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 FOR I\par   IF \{I\} == IMPORTANT\par     CONTINUE\par   END\par   DELETE \{I\}\par }\pard \qj\fi720\widctlpar\outlinelevel0\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par would delete all files listed on the command line when the EXEC file is executed except for the file IMPORTANT.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COPY}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COPY\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COPY command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 disk copying}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 COPY [-C] [-F] [-P] [-R] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20 ]\par COPY [-C] [-F] [-P] [-R] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20 ]\par COPY }{\i\f6\fs20 directory1}{\f6\fs20  }{\i\f6\fs20 directory2}{\f6\fs20 \par COPY [-D] }{\i\f6\fs20 volume1 volume2\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command copies a file to a new subdirectory, or to a duplicate file with a different file name.  This command can also be used to copy an entire directory or to perform a block-by-block disk copy.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab If you specify -C before the first path name, COPY does not prompt you if the target file name (}{\i\fs20 pathname2}{\fs20 ) already exists.\par \par -D\tab If you specify -D before the first path name, both path names are volume names, and both volumes are the same size, then a block-by-block disk copy is performed.  Other flags, while accepted, are ignored when this flag is used.\par \par -F\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 data fork}}}{\fs20 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -F flag is used, only the data fork is copied.  If the destination file already exists, it's resource fork is left undisturbed.  By copying the data fork of a file onto an existing file with a resource fork, it is possible to combine the data fork of the original file with the resource fork of the target file.\par \par -P\tab The COPY command prints progress information showing what file is being copied as it works through a list of files.  The -P flag suppresses this progress information.\par \par -R\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource fork}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\fs20 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -R flag is used, only the resource fork is copied.  If the destination file already exists, it's data fork is left undisturbed.  By copying the resource fork of a file onto an existing file with a data fork, it is possible to add the resource fork of the original file to the data fork of the target file.\par \par }{\i\fs20 pathname1}{\fs20  \tab The full or partial path name (including the file name) of a file to be copied.  Wildcard characters may be used in the file name.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full or partial path name (including the file name) to be given to the copy of the file}{\i\fs20 .}{\fs20   Wildcard characters can }{\i\fs20 not}{\fs20  be used in this file name.  If you leave this parameter out, then the current directory is used and the new file has the same name as the file being copied.\par \par }{\i\fs20 directory1}{\fs20 \tab The path name or partial path name of a directory that you wish to copy.  The entire directory (including all the files, subdirectories, and files in the subdirectories) is copied.\par \par }{\i\fs20 directory2}{\fs20 \tab The path name or partial path name of the directory to which you wish to copy the file or directory.  If }{\i\fs20 directory2}{\fs20  does not exist, it is created (unless }{\i\fs20 directory1}{\fs20  is empty).  If you do not include this parameter, the current directory is used.\par \par }{\i\fs20 volume1}{\fs20 \tab The name of a volume that you want to copy onto another volume.  The entire volume (including all the files, subdirectories, and files in the subdirectories) is copied.  If both path names are volume names, both volumes are the same size, }{\i\fs20 and}{\fs20  you specify the -D parameter, then a block-by-block disk copy is performed.  You can use a device name (such as .D1) instead of a volume name.\par \par }{\i\fs20 volume2}{\fs20 \tab The name of the volume that you want to copy onto.  You can use a device name instead of a volume name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you do not specify }{\i\fs20 pathname2}{\fs20 , and a file with the file name specified in }{\i\fs20 pathname1}{\fs20  exists in the target subdirectory, or if you do specify}{\i\fs20  pathname2}{\fs20  and a file named }{\i\fs20 pathname2}{\fs20  exists in the target subdirectory, then you are asked if you want to replace the target file.  Type Y and press }{\outl\fs18 RETURN}{\fs20  to replace the file.  Type N and press }{\outl\fs18 RETURN}{\fs20  to copy the file to the target prefix with a new file name.  In the latter case, you are prompted for the new file name.  Enter the file name, or press }{\outl\fs18 RETURN}{\fs20  without entering a file name to cancel the copy operation.  If you specify the -C parameter, then the target file is replaced without prompting.\par If you do not include any parameters after the COPY command, you are prompted for a path name, since ORCA prompts you for any required parameters.  However, since the target prefix and file name are not required parameters, you are }{\i\fs20 not}{\fs20  prompted for them.  Consequently, the current prefix is always used as the target directory in such a case.  To copy a file to any subdirectory }{\i\fs20 other }{\fs20 than the current one, you }{\i\fs20 must}{\fs20  include the target path name as a parameter either in the command line or following the path name entered in response to the file name prompt.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 write protect}}}{\v\fs20 \par }{\fs20 If you use volume names for both the source and target and specify the -D parameter, then the COPY command copies one volume onto another.  In this case, the contents of the target disk are destroyed by the copy operation.  The target disk must be initialized (use the INIT command) }{\i\fs20 before}{\fs20  this command is used.  This command performs a block-by-block copy, so it makes an exact duplicate of the disk.  Both disks must be the same size and must be formatted using the same FST for this command to work.  You can use device names rather than volume names to perform a disk copy.  To ensure safe volume copies, it is a good idea to write-protect the source disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CREATE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CREATE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CREATE command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 CREATE }{\i\f6\fs20 directory1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20  ...]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command creates a new subdirectory.  More than one subdirectory can be created with a single command by separating the new directory names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 directory}{\fs20 \tab The path name or partial path name of the subdirectory you wish to create.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CRUNCH}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CRUNCH\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CRUNCH utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 partial compilation}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 CRUNCH [-P] }{\i\f6\fs20 rootname\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command combines the object files created by partial assemblies or compiles into a single object file.  For example, if a compile and subsequent partial compiles have produced the object files FILE.ROOT, FILE.A, FILE.B, and FILE.C, then the CRUNCH command combines FILE.A, FILE.B, and FILE.C into a new file called FILE.A, deleting the old object files in the process.  The new FILE.A contains only the latest version of each function in the program.  New functions added during partial compiles are placed at the end of the new FILE.A.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab Suppresses the copyright and progress information normally printed by the CRUNCH utility.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 rootname}{\fs20 \tab The full path name or partial path name, including the file name but minus any file name extensions, of the object files you wish to compress.  For example, if your object files are named FILE.ROOT, FILE.A, and FILE.B in subdirectory :HARDISK:MYFILES:, you should then use :HARDISK:MYFILES:FILE for }{\i\fs20 rootname.}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DELETE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DELETE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DELETE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 DELETE [-C] [-P] [-W] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command deletes the file you specify.  You can delete more than one file with a single command by separating multiple file names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab If you delete the entire contents of a directory by specifying = for the path name, or if you try to delete a directory, the DELETE command asks for confirmation before doing the delete.  If you use the -C flag, the delete command does not ask for confirmation before doing the delete.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When you delete files using wildcards, or when you delete a directory that contains other files, the delete command lists the files as they are deleted.  To suppress this progress information, use the -P flag.\par \par -W\tab When you try to delete a file that does not exist, the DELETE command prints a warning message, but does not flag an error by returning a non-zero status code.  If you use the -W flag, the warning message will not be printed.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file to be deleted.  Wildcard characters may be used in the file name.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par If the target file of the DELETE command is a directory, the directory and all of its contents, including any included directories and their contents, are deleted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DEREZ}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DEREZ\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DEREZ command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended files\:see resources}{\txe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\tx900\adjustright {\f6\fs20 DEREZ\tab [-D[EFINE] }{\i\f6\fs20 macro}{\f6\fs20 [=}{\i\f6\fs20 data}{\f6\fs20 ]] [-E[SCAPE]] [-I }{\i\f6\fs20 pathname}{\f6\fs20 ]\par \tab [-M[AXTRINGSIZE] }{\i\f6\fs20 n}{\f6\fs20 ] [-O }{\i\f6\fs20 filename}{\f6\fs20 ]\par \tab [-ONLY }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]] [-P] [-RD]\par \tab [-S[KIP] }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]] [-U[NDEF] }{\i\f6\fs20 macro}{\f6\fs20 ]\par \tab }{\i\f6\fs20 resourceFile}{\f6\fs20  [}{\i\f6\fs20 resourceDescriptionFile}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command reads the resource fork of an extended file, writing the resources in a text form.  This output is detailed enough that it is possible to edit the output, then recompile it with the Rez compiler to create a new, modified resource fork. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f6\fs20 -D[EFINE] }{\i\f6\fs20 macro}{\f6\fs20 [=}{\i\f6\fs20 data}{\f6\fs20 ]}{\fs20    Defines the macro }{\i\fs20 macro}{\fs20  with the value }{\i\fs20 data}{\fs20 .  This is completely equivalent to placing the statement\par \par \tab \tab \tab #define }{\i\fs20 macro data}{\fs20 \par \par \tab at the start of the first resource description file.\par \tab \tab If the optional data field is left off, the macro is defined with a null value.\par \tab \tab More than one -d option can be used on the command line.\par \par }{\f6\fs20 -E[SCAPE]}{\fs20 \tab Characters outside of the range of the printing ASCII characters are normally printed as escape sequences, like \\0xC1.  If the -e option is used, these characters are sent to standard out unchanged.  Not all output devices have a mechanism defined to print these characters, so using this option may give strange or unusable results.\par \par }{\f6\fs20 -I }{\i\f6\fs20 pathname}{\fs20 \tab Lets you specify one or more path names to search for #include files.  This option can be used more than once.  If the option is used more than once, the paths are searched in the order listed.\par \par }{\f6\fs20 -M[AXTRINGSIZE] }{\i\f6\fs20 n}{\fs20    This setting controls the width of the output.  It must be in the range 2 to 120.\par \par }{\f6\fs20 -O }{\i\f6\fs20 filename}{\fs20    This option provides another way of redirecting the output.  It should not be used if command line output redirection is also used.  With the -O option, the file is created with a file type of SRC and a language type of Rez.\par \par }{\f6\fs20 -ONLY }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]}{\fs20    Lists only resources with a resource type of }{\i\fs20 typeexpr}{\fs20 , which should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is listed.  To list a range of resources, separate the starting and ending resource ID with a colon.\par \par }{\f6\fs20 -P}{\fs20 \tab When this option is used, the copyright, version number, and progress information is written to standard out.\par \par }{\f6\fs20 -RD}{\fs20 \tab Suppresses warning messages if a resource type is redeclared.\par \par }{\f6\fs20 -S[KIP] }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]}{\fs20    Lists all but the resources with a resource type of }{\i\fs20 typeexpr}{\fs20 , which should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is skipped.  To skip a range of resources, separate the starting and ending resource ID with a colon.\par \par }{\f6\fs20 -U[NDEF] }{\i\f6\fs20 macro}{\fs20    This option can be used to undefine a macro variable.\par \par }{\i\f6\fs20 resourceFile}{\fs20    This is the name of the extended file to process.  The resource fork from this file is converted to text form and written to standard out.\par \par }{\i\f6\fs20 resourceDescriptionFile}{\fs20    This file contains a series of declarations in the same format as used by the Rez compiler.  More than one resource description file can be used.  Any include (not #include), read, data, and resource statements are skipped, and the remaining declarations are used as format specifiers, controlling how DeRez writes information about any particular resource type.\par \tab \tab If no resource description file is given, or if DeRez encounters a resource type for which none of the resource description files provide a format, DeRez writes the resource in a hexadecimal}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  format.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The output from DeRez consists of resource and data statements that are acceptable to the Rez resource compiler.  If the output from DeRez is used immediately as the input to the resource compiler, the resulting resource fork is identical to the one processed by DeRez.  In some cases, the reverse is not true; in particular, DeRez may create a data statement for some input resources.\par Numeric values, such as the argument for the -only option, can be listed as a decimal value, a hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  value with a leading $, as in the ORCA assembler, or a hexadecimal value with a leading 0x, as used by the Pascal language.\par For all resource description files specified on the source line, the following search rules are applied:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab DeRez tries to open the file as is, by appending the file name given to the current default prefix.\par 2.\tab If rule 1 fails and the file name contains no colons and does not start with a colon (in other words, if the name is truly a file name, and not a path name or partial path name), DeRez appends the file name to each of the path names specified by -i options and tries to open the file.\par 3.\tab DeRez looks for the file in the folder 13:RInclude.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par For more information about resource compiler source files and type declarations, see Chapter 10.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DEVICES}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DEVICES\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DEVICES command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 DEVICES [-B] [-D] [-F] [-I] [-L] [-M] [-N] [-S] [-T] [-U] [-V]}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The DEVICES command lists all of the devices recognized by GS/OS in a tabular form, showing the device type, device name, and volume name.  Various flags can be used to show other information about the devices in an expanded form.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -B\tab Display the block size for block devices.\par \par -D\tab Display the version number of the software driver for the device.\par \par -F\tab Show the number of free blocks remaining on a block device.\par \par -I\tab Display the file system format used by the device.\par \par -L\tab Show all available information about each device.  This would be the same as typing all of the other flags.\par \par -M\tab Show the total number of blocks on the device.\par \par -N\tab Display the device number.\par \par -S\tab Display the slot number of the device.\par \par -T\tab Show the type of the device.\par \par -U\tab Show the unit number for the device.\par \par -V\tab Show the volume name for the device.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The name of the device is always displayed, but when you use any flag except -L, the device type and volume name are not shown unless you specifically use the -T and -V flags.\par See the GS/OS Technical Reference Manual for a detailed description of what devices are, and what the various fields mean in relation to any particular device.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DISABLE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DISABLE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DISABLE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 locking files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 DISABLE  [-P] D | N | B | W | R | I }{\i\f6\fs20 pathname\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This internal command disables one or more of the access attributes of a GS/OS file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par D\tab \ldblquote Delete\rdblquote  privileges.  If you disable this attribute, the file cannot be deleted.\par \par N\tab \ldblquote Rename\rdblquote  privileges.  If you disable this attribute, the file cannot be renamed.\par \par B\tab \ldblquote Backup required\rdblquote  flag.  If you disable this attribute, the file will not be flagged as having been changed since the last time it was backed up.\par \par W\tab \ldblquote Write\rdblquote  privileges.  If you disable this attribute, the file cannot be written to.\par \par R\tab \ldblquote Read\rdblquote  privileges.  If you disable this attribute, the file cannot be read.\par \par I\tab \ldblquote Visible\rdblquote  flag.  If you disable this attribute, the file will be displayed by the CATALOG command without using the -A flag.  In other words, invisible files become visible.\par \par }{\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file whose attributes you wish to disable.  You can use wildcard characters in the file name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can disable more than one attribute at one time by typing the operands with no intervening spaces.  For example, to \ldblquote lock\rdblquote  the file TEST so that it cannot be written to, deleted, or renamed, use the command\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 DISABLE DNW TEST\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENABLE command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use the ENABLE command to reenable attributes you disabled with the DISABLE command.\par When you use the CATALOG command to list a directory, the attributes that are currently enabled are listed in the access field for each file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DISKCHECK}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DISKCHECK\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DISKCHECK command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 DISKCHECK }{\i\f6\fs20 volume}{\f6\fs20 |}{\i\f6\fs20 device}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command scans the disk for active files and lists all block allocations, including both data and resource forks of any extended file types.  It will then notify you of block conflicts, where two or more files are claiming the same block(s), and provide an opportunity to list the blocks and files involved.  Finally, it will verify the integrity of the disk's bitmap.  Bitmap errors will be reported and you can choose to repair the bitmap.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\f6\fs20 volume}{\f6\fs20 |}{\i\f6\fs20 device}{\fs20    The GS/OS volume name or device name of the disk to check.  The volume name can be specified with or without a beginning colon or slash; for example,\par \par }{\f6\fs18 \tab \tab DiskCheck :HardDisk\par \tab \tab DiskCheck HardDisk\par }{\fs20 \par \tab \tab A device name requires a period before the name; for example, .SCSI1.  Volume numbers can also be used, as in .D2.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par DISKCHECK will only verify a ProDOS volume.  It will not work with an HFS volume.\par In normal display mode, data scrolls continuously on the screen.  While DISKCHECK is running, press the space bar to place DISKCHECK in single step mode.  In this mode, block allocations are displayed one at a time, each time the space bar is pressed.  Press return to return to normal display mode.\par DISKCHECK will check volumes with up to 65535 blocks of 512 bytes (32M).\par DISKCHECK makes the following assumptions:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Blocks zero and one are always used and contain boot code.\par \bullet \tab Enough disk integrity exists to make a GetFileInfo call on the volume.\par \bullet \tab Block two is the beginning of the volume directory and contains valid information regarding the number of blocks, bitmap locations, entries per block, and entry size.\par \bullet \tab All unused bytes at the end of the last bitmap block are truly unused; that is, they will be set to zero whenever the bitmap is repaired.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par DISKCHECK may not catch invalid volume header information as an error.  Likewise, DISKCHECK does not check all details of the directory structures.  Therefore, if large quantities of errors are displayed, it is likely that the volume header information or directory information is at fault.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ECHO}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ECHO\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ECHO command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 ECHO [-N] [-T] }{\i\f6\fs20 string\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command lets you write messages to standard output.  All characters from the first non-blank character to the end of the line are written to standard out.  You can use redirection to write the characters to error out or a disk file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -N\tab The -N flag suppresses the carriage return normally printed after the string, allowing other output to be written to the same line.  One popular use for this option is to write a prompt using the ECHO command, then use the INPUT command to read a value.  With the -N flag, the input cursor appears on the same line as the prompt.\par \par -T\tab By default, and tab characters in the string are converted to an appropriate number of spaces before the string is written.  If the -T flag is used, the tab characters are written as is.\par \par }{\i\fs20 string}{\fs20 \tab The characters to write.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you want to start your string with a space or a quote mark, enclose the string in quote marks.  Double the quote marks to imbed a quote in the string.  For example,\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs14 ECHO "   This string starts with 3 spaces and includes a "" character."\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EDIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EDIT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDIT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CHANGE command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 EDIT }{\i\f6\fs20 pathname1 pathname2 ...\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This external command calls the ORCA editor and opens a file to edit.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname1}{\fs20 \tab The full path name or partial path name (including the file name) of the file you wish to edit.  If the file named does not exist, a new file with that name is opened.  If you use a wildcard character in the file name, the first file matched is opened.  If more than one file name is given, up to ten files are opened at the same time.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ORCA default language changes to match the language of the open file.  If you open a new file, that file is assigned the current default language.  Use the CHANGE command to change the language stamp of an existing file.  To change the ORCA default language before opening a new file, type the name of the language you wish to use, and press }{\outl\fs18 RETURN}{\fs20 .\par The editor is described in Chapter 9.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ELSE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ELSE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE clause of IF command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 ELSE\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 ELSE IF }{\i\f6\fs20 expression}{\f6\fs20  \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This command is used as part of an IF command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ENABLE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ENABLE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENABLE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DISABLE command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 unlocking files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 ENABLE  [-P] D |  N | B | W | R | I }{\i\f6\fs20 pathname\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command enables one or more of the access attributes of a GS/OS file, as described in the discussion of the DISABLE command.  You can enable more than one attribute at one time by typing the operands with no intervening spaces.  For example, to \ldblquote unlock\rdblquote  the file TEST so that it can be written to, deleted, or renamed, use the command\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 ENABLE DNW TEST\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When a new file is created, all the access attributes are enabled.  Use the ENABLE command to reverse the effects of the DISABLE command.  The parameters are the same as those of the DISABLE command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ENTAB}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ENTAB\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENTAB utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs\:ENTAB utility}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 ENTAB [-L }{\i\f6\fs20 language}{\f6\fs20 ] [}{\i\f6\fs20 file}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command scans a text stream, converting runs of tabs and space characters into the minimum number of tabs and space characters needed to present the same information on the display screen.  Tabs are not used to replace runs of spaces in quoted strings.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par -L }{\i\fs20 language}{\fs20 \tab The ENTAB utility checks the language stamp of the input file and uses the appropriate tab line from the SYSTABS file to determine the location of tab stops.  This flag can be used to override the default language number, forcing the utility to use the tab line for some other language.  You can use either a language number or a language name as the parameter.\par \par }{\i\fs20 file}{\fs20 \tab File to process.\par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TYPE command}}}{\fs20 There is no DETAB utility, but the TYPE command can be used to strip tab characters from a file, replacing the tab characters with an appropriate number of space characters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b END}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v END\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IF command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 END\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This command terminates a FOR, IF, or LOOP command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ERASE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ERASE\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ERASE command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 formatting disks\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 ERASE [-C] }{\i\f6\fs20 device}{\f6\fs20  [}{\i\f6\fs20 name}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command writes the initialization tracks used by GS/OS to a disk that has already been formatted as a GS/OS disk.  In effect, this erases all files on the disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab Normally, the system will ask for permission (check) before erasing a disk.  The -C flag disables that check.\par \par }{\i\fs20 device}{\fs20 \tab The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted already has a volume name, you can specify the volume name instead of a device name.\par \par }{\i\fs20 name}{\fs20 \tab The new volume name for the disk.  If you do not specify }{\i\fs20 name,}{\fs20  then the name :BLANK is used.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA recognizes the device type of the disk drive specified by }{\i\fs20 device}{\fs20 , and uses the appropriate format.  ERASE works for all disk formats supported by GS/OS.\par ERASE destroys any files on the disk being formatted.  The effect of the ERASE command is very similar to the effect of the INIT command, but there are some differences.  The INIT command will work on any disk, while the ERASE command can only be used on a disk that has already been initialized.  The ERASE command works much faster than the INIT command, since the ERASE command does not need to take the time to create each block on the disk.  Finally, when the INIT command is used, each block is filled with zeros.  The ERASE command does not write zeros to the existing blocks, so any old information on the disk is not truly destroyed; instead, it is hidden very, very well, just as if all of the files and folders on the disk had been deleted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXEC}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXEC\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC language}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 EXEC\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to the EXEC command language.  When you type the name of a file that has the EXEC language stamp, the shell executes each line of the file as a shell command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXECUTE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXECUTE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 EXECUTE }{\i\f6\fs20 pathname}{\f6\fs20  [}{\i\f6\fs20 paramlist}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command executes an EXEC file.  If this command is executed from the ORCA Shell command line, then the variables and aliases defined in the EXEC file are treated as if they were defined on the command line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full or partial path name of an EXEC file.  This file name cannot include wildcard characters.\par \par }{\i\fs20 paramlist}{\fs20 \tab The list of parameters being sent to the EXEC file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXISTS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXISTS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXISTS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 EXISTS }{\i\f6\fs20 pathname}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command checks to see if a file exists.  If the file exists, the \{Status\} shell variable is set to 1; if the file does not exist, the \{Status\} shell variable is set to 0.  Several disk related errors can occur, so be sure to check specifically for either a 0 or 1 value.  When using this command in an EXEC file, keep in mind that a non-zero value for the \{Status\} variable will cause an EXEC file to abort unless the \{Exit\} shell variable has been cleared with an UNSET EXIT command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full or partial path name of a file.  More than one file can be checked at the same time by specifying multiple path names.  In this case, the result is zero only if each and every file exists.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXIT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXIT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} shell variable}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 EXIT [}{\i\f6\fs20 number}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command terminates execution of an EXEC file.  If }{\i\fs20 number}{\fs20  is omitted, the \{Status\} variable will be set to 0, indicating a successful completion.  If }{\i\fs20 number}{\fs20  is coded, the \{Status\} variable will be set to the number.  This allows returning error numbers or condition codes to other EXEC files that may call the one this statement is included in.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 number}{\fs20 \tab Exit error code.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXPORT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXPORT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPORT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:scope}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 EXPORT [}{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20  ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command makes the specified variable available to EXEC files called by the current EXEC file.  When used in the LOGIN file, the variable becomes available at the command level, and in all EXEC files executed from the command level.  More than one variable may be exported with a single command by separating the variable names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 n\tab Names of the variables to export.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXPRESS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXPRESS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPRESS command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 EXPRESS [-P] }{\i\f6\fs20 infile}{\f6\fs20  -O }{\i\f6\fs20 outfile}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The external command EXPRESS reformats an Apple\~II}{\fs18 GS}{\fs20  load file so that it can be loaded by the ExpressLoad loader that comes with Apple's system disk, starting with version 5.0 of the system disk.  When loaded with ExpressLoad, the file will load much faster than it would load using the standard loader; however, files reformatted for use with ExpressLoad can still be loaded by the System Loader.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f6\fs20 -P\tab }{\fs20 If you specify this option, EXPRESS displays progress information.  If you omit it, progress information is not displayed.\par \par }{\i\f6\fs20 infile}{\f6\fs20 \tab }{\fs20 The full or partial path name of a load file.\par \par }{\f6\fs20 -O }{\i\f6\fs20 outfile}{\f6\fs20 \tab }{\fs20 This is the full or partial path name of the file to write.  Unlike many commands, this output file is a required parameter.\par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ExpressLoad}}}{\fs20 Since the linker that comes with ORCA can automatically generate a file that is expressed, this utility is generally only used to reformat executable programs you obtain through other sources.\par EXPRESS only accepts version 2.0 OMF files as input.  You can check the version number of the OMF file using DUMPOBJ, and convert OMF 1.0 files to OMF 2.0 using COMPACT.\par ExpressLoad does not support multiple load files; therefore, you cannot use Express with any program that references segments in a run-time library.\par The following system loader calls are not supported by ExpressLoad:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab GetLoadSegInfo ($0F)  The internal data structures of ExpressLoad are not the same as those of the System Loader.\par \bullet \tab LoadSegNum ($0B)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by the System Loader.  Use the LoadSegName function instead.\par \bullet \tab UnloadSegNum ($0C)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by the System Loader.  Use the UnloadSeg ($0E) function instead.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b FILETYPE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v FILETYPE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FILETYPE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auxiliary file type}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:auxtype\:see auxiliary file type}{\txe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 FILETYPE [-P] }{\i\f6\fs20 pathname filetype }{\f6\fs20 [}{\i\f6\fs20 auxtype}{\f6\fs20 ]}{\i\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command changes the GS/OS file type, and optionally the auxiliary file type, of a file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file whose file type you wish to change.\par \par }{\i\fs20 filetype}{\fs20 \tab The GS/OS file type to which you want to change the file.  Use one of the following three formats for }{\i\fs20 filetype}{\fs20 :\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1980\adjustright {\fs20 \tab \tab \bullet \tab A decimal number 0-255.\par \par \tab \tab \bullet \tab A hexadecimal number $00-$FF.\par \par \tab \tab \bullet \tab The three-letter abbreviation for the file type used in disk directories; for example, S16, OBJ, EXE.  A partial list of GS/OS file types is shown in Table 8.13.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par }{\i\fs20 auxtype}{\fs20 \tab The GS/OS auxiliary file type to which you want to change the file.  Use one of the following two formats for }{\i\fs20 auxtype}{\fs20 :\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1980\adjustright {\fs20 \tab \tab \bullet \tab A decimal number 0-65535.\par \par \tab \tab \bullet \tab A hexadecimal number $0000-$FFFF.\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENABLE command}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS 8}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can change the file type of any file with the FILETYPE command; ORCA does not check to make sure that the format of the file is appropriate.  However, the GS/OS call used by the FILETYPE command may disable some of the access attributes of the file.  Use the CATALOG command to check the file type and access-attribute settings of the file; use the ENABLE command to reenable any attributes that are disabled by GS/OS.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepType\} shell variable}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{AuxType\} shell variable}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker can automatically set the file type and auxiliary file type of a program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \li720\ri1080\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1620\tx2340\tx3780\adjustright {\fs20 Decimal\tab Hex\tab Abbreviation\tab File Type\par }\pard \li720\keepn\widctlpar\tx1620\tx2340\tx3780\adjustright {\fs20 \par 001\tab $01\tab BAD\tab Bad blocks file\par 002\tab $02\tab PCD\tab Pascal code file (SOS)\par 003\tab $03\tab PTX\tab Pascal text file (SOS)\par 004\tab $04\tab TXT\tab ASCII text file\par 005\tab $05\tab PDA\tab Pascal data file (SOS)\par 006\tab $06\tab BIN\tab ProDOS 8 binary load\par 007\tab $07\tab FNT\tab Font file (SOS)\par 008\tab $08\tab FOT\tab Graphics screen file\par 009\tab $09\tab BA3\tab Business BASIC program file (SOS)\par 010\tab $0A\tab DA3\tab Business BASIC data file (SOS)\par 011\tab $0B\tab WPF\tab Word processor file (SOS)\par 012\tab $0C\tab SOS\tab SOS system file (SOS)\par 015\tab $0F\tab DIR\tab Directory\par 016\tab $10\tab RPD\tab RPS data file (SOS)\par 017\tab $11\tab RPI\tab RPS index file (SOS)\par 176\tab $B0\tab SRC\tab Source\par 177\tab $B1\tab OBJ\tab Object\par 178\tab $B2\tab LIB\tab Library\par 179\tab $B3\tab S16\tab GS/OS system file\par 180\tab $B4\tab RTL\tab Run-time library\par 181\tab $B5\tab EXE\tab Shell load file\par 182\tab $B6\tab STR\tab  load file\par 184\tab $B8\tab NDA\tab New desk accessory\par 185\tab $B9\tab CDA\tab Classic desk accessory\par 186\tab $BA\tab TOL\tab Tool file\par 200\tab $C8\tab FNT\tab Font file\par 226\tab $E2\tab DTS\tab Defile RAM tool patch\par 240\tab $F0\tab CMD\tab ProDOS CI added command file\par 249\tab $F9\tab P16\tab ProDOS 16 file\par 252\tab $FC\tab BAS\tab BASIC file\par 253\tab $FD\tab VAR\tab EDASM file\par 254\tab $FE\tab REL\tab REL file\par 255\tab $FF\tab SYS\tab ProDOS 8 system load file\par }\pard \fi720\li360\keepn\widctlpar\tx1350\tx2070\tx3420\adjustright {\fs20 \par }\pard \qc\li360\widctlpar\tx1350\tx2070\tx3420\outlinelevel0\adjustright {\fs20 Table 8.13.  A Partial List of GS/OS File Types\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b FOR}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v FOR\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IN clause of FOR command}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 FOR}{\b\f6\fs20  }{\i\f6\fs20 variable}{\b\f6\fs20  }{\f6\fs20 [IN}{\b\f6\fs20  }{\i\f6\fs20 value1}{\b\f6\fs20  }{\i\f6\fs20 value2}{\f6\fs20  ...}{\b\f6\fs20  }{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command, together with the END statement, creates a loop that is executed once for each parameter value listed.  Each of the parameters is separated from the others by at least on space.  To include spaces in a parameter, enclose it in quote marks.  For example, the EXEC file\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 FOR I IN GORP STUFF "FOO BAR"\par    ECHO \{I\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ECHO command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\v\fs20 \par }{\fs20 \par would print\par \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 GORP\par STUFF\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 FOO BAR\par }\pard \qj\widctlpar\adjustright {\fs20 \par to the screen.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the IN keyword and the strings that follow are omitted, the FOR command loops over the command line inputs, skipping the command itself.  For example, the EXEC file named EXECFILE\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 FOR I\par    ECHO \{I\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par would give the same results as the previous example if you executed it with the command\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 EXECFILE GORP STUFF "FOO BAR"\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b HELP}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v HELP\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command table}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 HELP [}{\i\f6\fs20 commandname1}{\f6\fs20  [}{\i\f6\fs20 commandname2}{\f6\fs20  ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command provides on-line help for all the commands in the command table provided with the ORCA development environment.  If you omit }{\i\fs20 commandname}{\fs20 , then a list of all the commands in the command table are listed on the screen.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\tx1800\adjustright {\i\fs20 commandname}{\fs20  \tab The name of the ORCA shell command about which you want information.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you specify }{\i\fs20 commandname}{\fs20 , the shell looks for a text file with the specified name in the HELP subdirectory in the UTILITIES prefix (prefix 17).  If it finds such a file, the shell prints the contents of the file on the screen.  Help files contain information about the purpose and use of commands, and show the command syntax in the same format as used in this manual.\par If you add commands to the command table, or change the name of a command, you can add, copy, or rename a file in the HELP subdirectory to provide information about the new command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b HISTORY}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v HISTORY\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HISTORY commands\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command list}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 HISTORY\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command lists the last twenty commands entered in the command line editor.  Commands executed in EXEC files are not listed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b HOME}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v HOME\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HOME commands\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 HOME\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command sends a $0C character to the standard output device.  The output can be redirected to files, printers, or error output using standard output redirection techniques.\par When the $0C character is sent to the console output device, the screen is cleared and the cursor is moved to the top left corner of the screen.  When the $0C character is sent to most printers, the printer will skip to the top of the next page.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b IF}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v IF\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IF command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE IF clause of IF command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE clause of IF command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 expressions\:shell}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 IF }{\i\f6\fs20 expression}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command, together with the ELSE IF, ELSE, and END statements provides conditional branching in EXEC files.  The expression is evaluated.  If the resulting string is the character 0, the command interpreter skips to the next ELSE IF, ELSE or END statement, and does not execute the commands in between.  If the string is anything but the character 0, the statements after the IF statement are executed.  In that case, if an ELSE or ELSE IF is encountered, the command skips to the END statement associated with the IF.\par The ELSE statement is used to provide an alternate set of statements that will be executed if the main body of the IF is skipped due to an expression that evaluates to 0.  It must appear after all ELSE IF statements.\par ELSE IF is used to test a series of possibilities.  Each ELSE IF clause is followed by an expression.  If the expression evaluates to 0, the statements following the ELSE IF are skipped; if the expression evaluates to anything but 0, the statements after the ELSE IF are executed.\par As an example, the following code will translate an Arabic digit (contained in the variable \{I\}) into a Roman numeral.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }{\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 IF \{I\} == 1\par    ECHO I\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 ELSE IF \{I\} == 2\par    ECHO II\par ELSE IF \{I\} == 3\par    ECHO III\par ELSE IF \{I\} == 4\par    ECHO IV\par ELSE IF \{I\} == 5\par    ECHO V\par ELSE\par    ECHO The number is too large for this routine.\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b INIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v INIT\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INIT command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 formatting disks\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 INIT [-C] }{\i\f6\fs20 device}{\f6\fs20  [}{\i\f6\fs20 fst}{\f6\fs20 ] [}{\i\f6\fs20 name}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This external command formats a disk as a GS/OS volume.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab Disable checking.  If the disk has been previously initialized, the system will ask for permission (check) before starting initialization.  The default is to check.\par \par }{\i\fs20 device}{\fs20 \tab The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted already has a volume name, you can specify the volume name instead of a device name.\par \par }{\i\fs20 fst}{\fs20 \tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file system translator}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FST}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS}}}{\fs20 The file system translator number.  The default FST is 1 (ProDOS).\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 name}{\fs20 \tab The new volume name for the disk.  If you do not specify }{\i\fs20 name,}{\fs20  then the name :BLANK is used.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA recognizes the device type of the disk drive specified by }{\i\fs20 device}{\fs20 , and uses the appropriate format.  INIT works for all disk formats supported by GS/OS.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file system translator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FST}}}{\fs20 GS/OS is capable of supporting a wide variety of physical disk formats and operating system file formats.  The term file system translator, or FST, has been adopted to refer to the various formats.  By default, when you initialize a disk, the INIT command uses the physical format and operating system format that has been in use by the ProDOS and GS/OS operating system since ProDOS was introduced for the Apple //e computer.  If you would like to use a different FST, you can specify the FST as a decimal number.  Apple has defined a wide variety of numbers for use as FSTs, although there is no reason to expect that all of them will someday be implemented in GS/OS; some of the FST numbers are shown in Table 8.14, and a more complete list can be found in }{\i\fs20 Apple\~II}{\i\fs18 GS}{\i\fs20  GS/OS Reference}{\fs20 , Volume 1.  Not all of these FSTs have been implemented in GS/OS as this manual goes to press.  Even if an FST has been implemented, not all FSTs can be used on all formats of floppy disks.  If you aren't sure if an FST is available, give it a try \endash  if not, you will get an error message.\par INIT destroys any files on the disk being formatted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright {\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file system translator}}}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FST}}}{\v\fs20 \par }\pard \qj\li2160\ri1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3600\adjustright {\fs20 FST Number\tab File System\par }\pard \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright {\fs20 1\tab ProDOS (Apple\~II, Apple\~II}{\fs18 GS}{\fs20 )}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS}}}{\fs20 \par \tab    and SOS (Apple ///)}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SOS}}}{\fs20 \par 2\tab DOS 3.3}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DOS (Apple)}}}{\fs20 \par 3\tab DOS 3.2\par 4\tab Apple\~II Pascal}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20 \par 5\tab Macintosh MFS}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Macintosh}}}{\fs20 \par 6\tab Macintosh HFS\par 7\tab Lisa}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Lisa}}}{\fs20 \par 8\tab Apple CP/M}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CPM}}}{\fs20 \par 10\tab MS/DOS}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MS/DOS}}}{\fs20 \par 11\tab High Sierra}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 High Sierra}}}{\fs20 \par 13\tab AppleShare}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 AppleShare}}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Table 8.14  FST Numbers\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b INPUT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v INPUT\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INPUT command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 INPUT }{\i\f6\fs20 variable}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command reads a line from standard input, placing all of the characters typed, up to but not including the carriage return that marks the end of the line, in the shell variable }{\i\fs20 variable}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 \tab Shell variable in which to place the string read from standard in.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b LINK}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v LINK\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 load files\:see executable files}{\txe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link map}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object segment}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 symbol tables\:linker}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \fi-620\li620\keepn\widctlpar\tx620\adjustright {\f6\fs20 LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile}{\f6\fs20  [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \par LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile1}{\f6\fs20  }{\i\f6\fs20 objectfile2}{\f6\fs20   ... [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ] \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command calls the ORCA linker to link object files to create a load file.  You can use this command to link object files created by assemblers or compilers, and to cause the linker to search library files.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 +B|-B\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bank relative programs}}}{\fs20 The +B flag tells the linker to create a bank relative program.  Each load segment in a bank relative program must be aligned to a 64K bank boundary by the loader.  When the current version of the Apple\~II}{\fs18 GS}{\fs20  loader loads a bank relative program, it also purges virtually all purgeable memory, which could slow down operations of programs like the ORCA shell, which allows several programs to stay in memory.  Bank relative programs take up less disk space than programs that can be relocated to any memory space, and they load faster, since all two-byte relocation information can be resolved at link time, rather than creating relocation records for each address.\par \par +C|-C\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compaction}}}{\fs20 Executable files are normally compacted, which means some relocation information is packed into a compressed form.  Compacted files load faster and use less room on disk than uncompacted files.  To create an executable file that is not compacted, use the -C flag.\par \par +L|-L\tab If you specify +L, the linker generates a listing (called a link map) of the segments in the object file, including the starting address, the length in bytes (hexadecimal) of each segment, and the segment type.  If you specify -L, the link map is not produced.\par \par +P|-P\tab The linker normally prints a series of dots as subroutines are processed on pass one and two, followed by the length of the program and the number of executable segments in the program.  The -P flag can be used to suppress this progress information.\par \par +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all global references in the object file (called a symbol table).  If you specify -S, the symbol table is not produced.\par \par +X|-X\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 expressed files}}}{\fs20 Executable files are normally expressed, which means they have an added header and some internal fields in the code image are expanded.  Expressed files load from disk faster than files that are not expressed, but they require more disk space.  You can tell the linker not to express a file by using the -X flag.\par \par }{\i\fs20 objectfile}{\fs20 \tab The full or partial path name, minus file name extension, of the object files to be linked.  All files to be linked must have the same file name (except for extensions), and must be in the same subdirectory.  For example, the program TEST might consist of object files named TEST.ROOT, TEST.A, and TEST.B, all located in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST for }{\i\fs20 objectfile.\par }{\fs20 \par }{\i\fs20 objectfile1 objectfile2,...  }{\fs20 You can link several object files into one load file with a single LINK command.  Enclose in parentheses the full path names or partial path names, minus file name extensions, of all the object files to be included; separate the file names with spaces.  Either a .ROOT file or a .A file must be present.  For example, the program TEST might consist of object files named TEST1.ROOT, TEST1.A, TEST1.B, TEST2.A, and TEST2.B, all in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST1 for }{\i\fs20 objectfile}{\fs20  and :ORCA:MYPROG:TEST2 for }{\i\fs20 objectfile1}{\fs20 .\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\v\fs20 \par }{\fs20 \tab \tab You can also use this command to specify one or more library files (GS/OS file type $B2) to be searched.  Any library files specified are searched in the order listed.  Only the segments needed to resolve references that haven\rquote t already been resolved are extracted from the standard library files.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\v\fs20 \par }{\fs20 \par KEEP=}{\i\fs20 outfile}{\fs20   Use this parameter to specify the path name or partial path name of the executable load file.\par \tab \tab If you do not use the KEEP parameter, then the link is performed, but the load file is not saved.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{LinkName\} shell variable}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you do not include any parameters after the LINK command, you are prompted for an input file name, as ORCA prompts you for any required parameters.  However, since the output path name is not a required parameter, you are }{\i\fs20 not}{\fs20  prompted for it.  Consequently, the link is performed, but the load file is not saved.  To save the results of a link, you }{\i\fs20 must}{\fs20  include the KEEP parameter in the command line or create default names using the \{LinkName\} variable.\par The linker can automatically set the file type and auxiliary file type of the executable file it creates.\par }\pard \qj\ri360\widctlpar\adjustright {\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command}}}{\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To automatically link a program after assembling or compiling it, use one of the following commands instead of the LINK command:  ASML, ASMLG, CMPL, CMPLG.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b LINKER}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v LINKER\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 LINKER\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINKER command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker\:script files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 script files\:linker}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This language command sets the shell default language for linker script files.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b LOOP}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v LOOP\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 BREAK command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} shell variable}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 LOOP\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command together with the END statement defines a loop that repeats continuously until a BREAK command is encountered.  This statement is used primarily in EXEC files.  For example, if you have written a program called TIMER that returns a \{Status\} variable value of 1 when a particular time has been reached, and 65535 for an error, you could cause the program SECURITY.CHECK to be executed each time TIMER returned 1, and exit the EXEC file when TIMER returned 65535.  The EXEC file would be\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Exit\} shell variable}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IF command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE IF clause of IF command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 UNSET EXIT\par LOOP\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    TIMER\par    SET STAT \{STATUS\}\par    IF \{STAT\} == 1\par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18       SECURITY.CHECK\par    ELSE IF \{STAT\} == 65535\par       BREAK\par    END\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b MAKELIB}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v MAKELIB\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MAKELIB utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\tx980\adjustright {\f6\fs20 MAKELIB\tab [-F] [-D] [-P] }{\i\f6\fs20 libfile  }{\f6\fs20 [ + | - | ^  }{\i\f6\fs20 objectfile1  \par \tab }{\f6\fs20 + | - | ^ }{\i\f6\fs20 objectfile2 }{\f6\fs20 ...]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This external command creates a library file.\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -F\tab If you specify -F, a list of the file names included in }{\i\fs20 libfile}{\fs20  is produced.  If you leave this option out, no file name list is produced.\par \par -D\tab If you specify -D, the dictionary of symbols in the library is listed.  Each symbol listed is a global symbol occurring in the library file.  If you leave this option out, no dictionary is produced.\par \par -P\tab Suppresses the copyright and progress information normally printed by the MAKELIB utility.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 libfile}{\fs20 \tab The full path name or partial path name (including the file name) of the library file to be created, read, or modified.\par \par +}{\i\fs20 objectfilen}{\fs20   The full path name or partial path name (including the file name) of an object file to be added to the library.  You can specify as many object files to add as you wish.  Separate object file names with spaces.\par \par -}{\i\fs20 objectfilen}{\fs20   The file name of a component file to be removed from the library.  This parameter is a file name only, not a path name.  You can specify as many component files to remove as you wish.  Separate file names with spaces.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\v\fs20 \par }{\fs20 \par ^}{\i\fs20 objectfilen}{\fs20   The full path name or partial path name (including the file name) of a component file to be removed from the library  and written out as an object file.}{\b\fs20   }{\fs20 If you include a prefix in this path name, the object file is written to that prefix.  You can specify as many files to be written out as object files as you wish.  Separate file names with spaces.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\v\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An ORCA library file (GS/OS file type $B2) consists of one or more component files, each containing one or more segments.  Each library file contains a library-dictionary segment that the linker uses to find the segments it needs.\par MAKELIB creates a library file from any number of object files.  In addition to indicating where in the library file each segment is located, the library-dictionary segment indicates which object file each segment came from.  The MAKELIB utility can use that information to remove any component files you specify from a library file; it can even recreate the original object file by extracting the segments that made up that file and writing them out as an object file.  Use the (-F) and (-D) parameters to list the contents of an existing library file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object module format}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 code segment}}}{\v\fs20 \par }{\fs20 The MAKELIB command is for use only with ORCA object-module-format (OMF) library files used by the linker.  For information on the creation and use of libraries used by language compilers, consult the manuals that came with those compilers.\par MAKELIB accepts either OMF 1 or OMF 2 files as input, but always produces OMF 2 files as output.  MAKELIB literally converts OMF 1 files to OMF 2 files before placing them in the library.  Among other things, this gives you one way to convert an OMF 1 file to an OMF 2 file:  first create a library with the OMF 1 file, then extract the file from the library.  The extracted file will be in OMF 2 format.\par To create an OMF library file using the ORCA/Pascal compiler, use the following procedure:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 1.\tab Write one or more source files in the normal way, but don't use }{\f6\fs18 main}{\fs20  as one of the functions.\par }{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASSEMBLE command}}}{\v\fs20 \par }{\fs20 \par 2.\tab Compile the programs.  Each source file is saved as two object files, one with the extension .ROOT, and one with the extension .A.\par \par 3.\tab Run the MAKELIB utility, specifying each object file to be included in the library file, but ignoring any .ROOT files.  For example, if you compiled two source files, creating the object files LIBOBJ1.ROOT, LIBOBJ1.A, LIBOBJ2.ROOT, LIBOBJ2.A, and your library file is named LIBFILE, then your command line should be as follows:\par \par }\pard \fi-450\li1440\widctlpar\outlinelevel0\adjustright {\b\f6\fs14 MAKELIB LIBFILE +LIBOBJ1.A +LIBOBJ2.A\par }\pard \qj\fi-360\li634\widctlpar\tx720\adjustright {\fs18 \par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 4.\tab Place the new library file in the LIBRARIES: subdirectory.  (You can accomplish this in step 3 by specifying 13:LIBFILE for the library file, or you can use the MOVE command after the file is created.)\par }\pard \qj\widctlpar\tx360\adjustright {\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MOVE command\bxe }}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b MOVE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v MOVE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 MOVE [-C] [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20 ]\par }\pard \keepn\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 MOVE [-C] [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command moves a file from one directory to another; it can also be used to rename a file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab If you specify -C before the first file name, then MOVE does not prompt you if the target file name (}{\i\fs20 filename2}{\fs20 ) already exists.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\i\fs20 \par }{\fs20 -P\tab The MOVE command prints progress information showing what file is being moved as it works through a list of files.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname1}{\fs20 \tab The full path name or partial path name (including the file name) of the file to be moved.  Wildcard characters may be used in this file name.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full path name or partial path name of the directory you wish to move the file to.  If you specify a target file name, the file is renamed when it is moved.  Wildcard characters can }{\i\fs20 not}{\fs20  be used in this path name.  If the prefix of }{\i\fs20 pathname2}{\fs20  is the same as that of }{\i\fs20 pathname1}{\fs20 , then the file is renamed only.\par \par }{\i\fs20 directory2}{\fs20 \tab The path name or partial path name of the directory you wish to move the file to.  If you do not include a file name in the target path name, then the file is not renamed.  Wildcard characters can }{\i\fs20 not}{\fs20  be used in this path name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If }{\i\fs20 pathname1}{\fs20  and the target directory are on the same volume, then ORCA calls GS/OS to move the directory entry (and rename the file, if a target file name is specified).  If the source and destination are on different volumes, then the file is copied; if the copy is successful, then the original file is deleted.  If the file specified in }{\i\fs20 pathname2}{\fs20  already exists and you complete the move operation, then the old file named }{\i\fs20 pathname2 }{\fs20 is deleted and replaced by the file that was moved.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b NEWER}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v NEWER\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NEWER command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modification date}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 NEWER }{\i\f6\fs20 pathname1 pathname2...}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command checks to see if any file in a list of files has been modified since the first file was modified.  If the first file is newer than, or as new as, all of the other files, the \{Status\} shell variable is set to 0.  If any of the files after the first file is newer than the first file, the \{Status\} shell variable is set to 1.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname1}{\fs20 \tab The full or partial path name of the file to be checked.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname2...}{\fs20 \tab The full or partial path name of the files to compare with the first file.  If any of the files in this list have a modification date after }{\i\fs20 pathname1}{\fs20 , \{Status\} is set to 1.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command is most commonly used in script files to create sophisticated scripts that automatically decide when one of several files in a project need to be recompiled.\par The GS/OS operating system records the modification date to the nearest minute.  It is quite possible, unfortunately, to make changes to more than one file, then attempt to rebuild a file, in less than one minute.  In this case, the command may miss a file that has been changed.  See the TOUCH command for one way to update the time stamp.\par Wildcards may be used in any path name.  If the first file is specified with a wildcard, only the first matching file is checked.  If wildcards are used in the remaining names, each matching file is checked against the first file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} variable}}}{\v\fs20 \par }{\fs20 It is possible for the NEWER command to return a value other than 0 or 1; this would happen, for example, if a disk is damaged or if one of the files does not exist at all.  For this reason, your script files should check for specific values of 0 or 1.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Exit\} variable}}}{\v\fs20 \par }{\fs20 A status variable other than zero generally causes a script file to exit.  To prevent this, be sure and unset the exit shell variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b PASCAL}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v PASCAL\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 PASCAL\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PASCAL command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to PASCAL, the language stamp used by ORCA/Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b PREFIX}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v PREFIX\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PREFIX command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 PREFIX [-C] [}{\i\f6\fs20 n}{\f6\fs20 ] }{\i\f6\fs20 directory}{\f6\fs20 [:]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This internal command sets any of the eight standard GS/OS prefixes to a new subdirectory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab The PREFIX command does not normally allow you to set a prefix to a path name that does not exist or is not currently available.  The -C flag overrides this check, allowing you to set the prefix to any valid GS/OS path name.\par \par }{\i\fs20 n}{\fs20 \tab A number from 0 to 31, indicating the prefix to be changed.  If this parameter is omitted, 8 is used.  This number must be preceded by one or more spaces.\par \par }{\i\fs20 directory}{\fs20 \tab The full or partial path name of the subdirectory to be assigned to prefix }{\i\fs20 n.}{\fs20   If a prefix number is used for this parameter, you must follow the prefix number with the : character.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Prefix 8 is the current prefix; all shell commands that accept a path name use prefix 8 as the default prefix if you do not include a colon (:) at the beginning of the path name.  Prefixes 9 through 17 are used for specific purposes by ORCA, GS/OS and the Apple\~II}{\fs18 GS}{\fs20  tools; see the section \ldblquote Standard Prefixes\rdblquote  in this chapter for details.  The default settings for the prefixes are shown in Table 8.3.  Prefixes 0 to 7 are obsolete ProDOS prefixes, and should no longer be used.  Use the SHOW PREFIX}{\i\fs20  }{\fs20 command to find out what the prefixes are currently set to.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }{\fs20 The prefix assignments are reset to the defaults each time ORCA is booted.  To use a custom set of prefix assignments every time you start ORCA, put the PREFIX commands in the LOGIN file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b PRODOS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v PRODOS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS language}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 PRODOS\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the ORCA shell default language to GS/OS text.  GS/OS text files are standard ASCII files with GS/OS file type $04; these files are recognized by GS/OS as text files.  ORCA TEXT files, on the other hand, are standard ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The ORCA language type is not used by GS/OS.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b QUIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v QUIT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 QUIT command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 QUIT\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command terminates the ORCA program and returns control to GS/OS.  If you called ORCA from another program, GS/OS returns you to that program; if not, GS/OS prompts you for the next program to load.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b RENAME}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v RENAME\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RENAME command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 RENAME }{\i\f6\fs20 pathname1}{\f6\fs20  }{\i\f6\fs20 pathname2\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command changes the name of a file.  You can also use this command to move a file from one subdirectory to another on the same volume.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname1}{\fs20  \tab The full path name or partial path name (including the file name) of the file to be renamed or moved.  If you use wildcard characters in the file name, the first file name matched is used.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full path name or partial path name (including the file name) to which }{\i\fs20 pathname1}{\fs20  is to be changed or moved.  You cannot use wildcard characters in the file name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you specify a different subdirectory for }{\i\fs20 pathname2}{\fs20  than for }{\i\fs20 pathname1}{\fs20 , then the file is moved to the new directory and given the file name specified in }{\i\fs20 pathname2.}{\fs20 \par The subdirectories specified in }{\i\fs20 pathname1}{\fs20  and }{\i\fs20 pathname2}{\fs20  must be on the same volume.  To rename a file and move it to another volume, use the MOVE command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b RESEQUAL}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v RESEQUAL\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RESEQUAL command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 RESEQUAL [-P] }{\i\f6\fs20 pathname1 pathname2}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The external command RESEQUAL compares the resources in two files and writes their differences to standard out.\par RESEQUAL checks that each file contains resources of the same type and identifier as the other file; that the size of the resources with the same type and identifier are the same; and that their contents are the same.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f6\fs20 -P\tab }{\fs20 If this flag is used, a copyright message and progress information is written to error out.\par \par }{\i\f6\fs20 pathname1}{\f6\fs20 \tab }{\fs20 The full or partial path name of one of the two files to compare.\par \par }{\i\f6\fs20 pathname2}{\f6\fs20 \tab }{\fs20 The full or partial path name of one of the two files to compare.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If a mismatch is found, the mismatch and the subsequent 15 bytes are written to standard out.  RESEQUAL then continues the comparison, starting with the byte following the last byte displayed.  The following messages appear when reporting differences:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab In 1 but not in 2\par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab The resource type and ID are displayed.\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab In 2 but not in 1\par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab The resource type and ID are displayed.\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab Resources are different sizes\par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab The resource type, resource ID, and the size of the resource in each file are displayed.\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab Resources have different contents\par \par \tab This message is followed by the resource type and ID, then by the offset in the resource, and 16 bytes of the resource, starting at the byte that differed.  If more than ten differences are found in the same resource, the rest of the resource is skipped and processing continues with the next resource.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b REZ}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v REZ\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 REZ command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 REZ}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the default language to Rez.  The resource compiler is described in Chapter 10.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b RUN}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v RUN\tcl3}}}{\b \par }\pard \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright {\pard\plain \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command\bxe }}}{\pard\plain \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\v\fs20 \par }\pard \fi-540\li540\keepn\widctlpar\tx540\adjustright {\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\f6\fs20 RUN\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\li540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles), links, and runs a source file.  Its function is identical to that of the ASMLG command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SET}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SET\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 SET [}{\i\f6\fs20 variable}{\f6\fs20  [}{\i\f6\fs20 value}{\f6\fs20 ]]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command allows you to assign a value to a variable name.  You can also use this command to obtain the value of a variable or a list of all defined variables.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 \tab The variable name you wish to assign a value to.  Variable names are not case sensitive, and only the first 255 characters are significant.  If you omit }{\i\fs20 variable}{\fs20 , then a list of all defined names and their values is written to standard output.\par \par }{\i\fs20 value}{\fs20 \tab The string that you wish to assign to }{\i\fs20 variable.}{\fs20   Values are case sensitive and are limited to 65536 characters.  All characters, including spaces, starting with the first non-space character after }{\i\fs20 variable}{\fs20  to the end of the line, are included in }{\i\fs20 value.}{\fs20   If you include }{\i\fs20 variable}{\fs20  but omit }{\i\fs20 value}{\fs20 , then the current value of }{\i\fs20 variable}{\fs20   is written to standard output.  Embed spaces within }{\i\fs20 value}{\fs20  by enclosing }{\i\fs20 value}{\fs20  in double quote marks.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A variable defined with the SET command is normally available only in the EXEC file where it is defined, or if defined on the command line, only from the command line.  The variable and its value are not normally passed on to EXEC files, nor are the variables set in an EXEC file available to the caller of the EXEC file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPORT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:scope}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\v\fs20 \par }{\fs20 To pass a variable and its value on to an EXEC file, you must export the variable using the EXPORT command.  From that time on, any EXEC file will receive a copy of the variable.  Note that this is a copy: UNSET commands used to destroy the variable, or SET commands used to change it, will not affect the original.  Variables exported from the LOGIN file are exported to the command level.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command}}}{\v\fs20 \par }{\fs20 You can cause changes to variables made in an EXEC file to change local copies.  See the EXECUTE command for details.\par Use the UNSET command to delete the definition of a variable.\par Certain variable names are reserved; see "Programming EXEC Files, earlier in this chapter, for a list of reserved variable names.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SHOW}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SHOW\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language numbers}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 SHOW [LANGUAGE] [LANGUAGES] [PREFIX] [TIME] [UNITS]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This internal command provides information about the system.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 LANGUAGE \tab Shows the current system-default language.\par \par LANGUAGES\tab Shows a list of all languages defined in the language table, including their language numbers.\par \par PREFIX\tab Shows the current subdirectories to which the GS/OS prefixes are set.  See the section \ldblquote Standard Prefixes\rdblquote  in this chapter for a discussion of ORCA prefixes.\par \par TIME\tab Shows the current time.\par \par UNITS\tab Shows the available units, including device names and volume names.  Only those devices that have formatted GS/OS volumes in them are shown.  To see the device names for all of your disk drives, make sure that each drive contains a GS/OS disk.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 More than one parameter can be entered on the command line; to do so, separate the parameters by one or more spaces.  If you enter no parameters, you are prompted for them.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SHUTDOWN}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SHUTDOWN\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHUTDOWN command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 SHUTDOWN\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 This internal command shuts down the computer, ejecting floppy disks and leaving any RAM disk intact.  A dialog will appear which allows you to restart the computer.\par Technically, the command performs internal clean up of the shell's environment, just as the QUIT command does, ejects all disks, and then does an OSShutDown call with the shut down flags set to 0.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SWITCH}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SWITCH\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SWITCH command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 SWITCH [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  }{\i\f6\fs20 pathname2}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 This internal command interchanges two file names in a directory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, the names of the two files switched are written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname1}{\fs20  \tab The full path name or partial path name (including the file name) of the first file name to be moved.  If you use wildcard characters in the file name, the first file name matched is used.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full path name or partial path name (including the file name) to be switched with }{\i\fs20 pathname1}{\fs20  .  The prefix in }{\i\fs20 pathname2}{\fs20  must be the same as the prefix in }{\i\fs20 pathname1}{\fs20 .  You cannot use wildcard characters in this file name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For example, suppose the directory listing for :ORCA:MYPROGS: is as follows in the figure below:\par }\pard \fi720\widctlpar\tx6120\adjustright {\f6\fs14 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\v\fs20 \par }\pard \fi720\keepn\widctlpar\tx6120\adjustright {\f6\fs14 :ORCA:MYPROGS:=\par Name         Type   Blocks     Modified           Created    Access  Subtype\par \par C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par ABS.OBJECT    OBJ     8    12 NOV 86 15:02    4 MAR 86 14:17  NBWR   \par }\pard \keepn\widctlpar\tx2070\tx2700\tx4230\tx5130\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Figure 8.15. CATALOG :ORCA:MYPROGS: command\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To reverse the positions in the directory of the last two files, use the following command:\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \fi-270\li720\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 SWITCH :ORCA:MYPROGS:COMMAND.FILE :ORCA:MYPROGS:ABS.OBJECT\par }\pard \widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Now if you list the directory again, it looks like this:\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \fi720\keepn\widctlpar\tx4230\adjustright {\f6\fs14 :ORCA:MYPROGS:=\par Name         Type   Blocks     Modified           Created    Access  Subtype\par \par C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par ABS.OBJECT    OBJ     8    12 NOV 86 15:02    4 MAR 86 14:17   NBWR   \par COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\fs20 Figure 8.16. CATALOG :ORCA:MYPROGS: command\par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DOS}}}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPRESS command}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can alphabetize GS/OS directories with the COMPRESS command, and list directories with the CATALOG command.  This command works only on GS/OS directories, not on other file systems such as DOS or Pascal.  Due to the design of GS/OS, the SWITCH command will also not work on the disk volume that you boot from \endash  to modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b TEXT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v TEXT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 source files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT language}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 TEXT\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\fs20 This language command sets the ORCA shell default language to ORCA TEXT.  ORCA text files are standard-ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The TEXT file type is provided to support any text formatting programs that may be added to ORCA.  TEXT files are shown in a directory listing as SRC files with a subtype of TEXT.\par Use the PRODOS command to set the language type to GS/OS text; that is, standard ASCII files with GS/OS file type $04.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\fs20 PRODOS text files are shown in a directory listing as TXT files with no subtype.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b TOUCH}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v TOUCH\tcl3}}}{\b \par }\pard \keepn\widctlpar\tx620\adjustright {\fs20 \par }{\f6\fs20 TOUCH [-P]\tab }{\i\f6\fs20 pathname}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TOUCH command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modification date}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command "touches" a file, changing the file's modification date and time stamp to the current date and time, just as if the file had been loaded into the editor and saved again.  The contents of the file are not affected in any way.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files touched is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname}{\fs20  \tab The full path name or partial path name (including the file name) of the file to be touched.  You can use wildcard characters in this file name, in which case every matching file is touched.  You can specify more than one path name in the command; separate path names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b TYPE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v TYPE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\tx620\adjustright {\f6\fs20 TYPE\tab [+N|}{\f6\fs20\ul -N}{\f6\fs20 ] [}{\f6\fs20\ul +T}{\f6\fs20 |-T] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 startline1}{\f6\fs20  [}{\i\f6\fs20 endline1}{\f6\fs20 ]] [}{\i\f6\fs20 pathname2}{\f6\fs20  \tab [}{\i\f6\fs20 startline2}{\f6\fs20  [}{\i\f6\fs20 endline2}{\f6\fs20 ]]...]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TYPE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command prints one or more text or source files to standard output (usually the screen).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 +N|-N\tab If you specify +N, the shell precedes each line with a line number.  The default is -N: no line numbers are printed.\par \par +T|-T\tab The TYPE command normally expands tabs as a file is printed; using the -T flag causes the TYPE command to send tab characters to the output device unchanged.\par \par }{\i\fs20 pathname}{\fs20  \tab The full path name or partial path name (including the file name) of the file to be printed.  You can use wildcard characters in this file name, in which case every text or source file matching the wildcard file name specification is printed.  You can specify more than one path name in the command; separate path names with spaces.\par \par }{\i\fs20 start linen}{\fs20 \tab The line number of the first line of this file to be printed.  If this parameter is omitted, then the entire file is printed.\par \par }{\i\fs20 endlinen}{\fs20 \tab The line number of the last line of this file to be printed.  If this parameter is omitted, then the file is printed from }{\i\fs20 startline}{\fs20  to the end of the file.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printing files}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 merging files}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA text files, GS/OS text files, and ORCA source files can be printed with the TYPE command.  Use the TYPE command and output redirection to merge files.  For example, to merge the files FILE1 and FILE2 into the new file FILE3, use the command:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\b\f6\fs18 \tab TYPE FILE1 FILE2 > FILE3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs\:removing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DETAB}}}{\fs20 Normally, the TYPE command functions as a DETAB utility, expanding tabs to an appropriate number of spaces as the file it sent to the output device.  The TYPE command examines the language stamp of the file being typed, reading the appropriate tab line from the SYSTABS file to determine where the tab stops are located.\par If you are using the type command to append one file to the end of another, you may not want tabs to be expanded.  In That case, the -T flag can be used to suppress tab expansions.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b UNALIAS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v UNALIAS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNALIAS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ALIAS command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 UNALIAS }{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20  ...]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The UNALIAS command deletes an alias created with the ALIAS command.  More than one alias can be deleted by listing all of them, separated by spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b UNSET}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v UNSET\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:assigning values to}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 UNSET }{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20 ...]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command deletes the definition of a variable.  More than one variable may be deleted by separating the variable names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 \tab The name of the variable you wish to delete.  Variable names are not case sensitive, and only the first 255 characters are significant.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Use the SET command to define a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b *}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v *\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMENT command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 * }{\i\f6\fs20 string}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The * command is the comment.  By making the comment a command that does nothing, you are able to rename it to be anything you wish.  Since it is a command, the comment character must be followed by a space.  All characters from there to the end of the line, or up to a ; character, which indicates the start of the next command, are ignored.\par {\*\bkmkend bk17}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}{\rxe bk17}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 9:  The Text Editor\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 9 \endash  The Text Editor\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 9 \endash  The Text Editor\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ORCA editor allows you to write and edit source and text files.  This chapter provides reference material on the editor, including detailed descriptions of all editing commands. \par The first section in this chapter, \ldblquote Modes,\rdblquote  describes the different modes in which the editor can operate.  The second section, \ldblquote Macros,\rdblquote  describes how to create and use editor macros, which allow you to execute a string of editor commands with a single keystroke.  The third section, "Using Editor Dialogs," gives a general overview of how the mouse and keyboard are used to manipulate dialogs.  The next section, \ldblquote Commands,\rdblquote  describes each editor command and gives the key or key combination assigned to the command.  The last section, \ldblquote Setting Editor Defaults,\rdblquote  describes how to set the defaults for editor modes and tab settings for each language.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Modes}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Modes\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The behavior of the ORCA editor depends on the settings of several modes, as follows:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Insert.\par \bullet \tab Escape.\par \bullet \tab Auto Indent.\par \bullet \tab Text Selection.\par \bullet \tab Hidden Characters.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Most of these modes has two possible states; you can toggle between the states while in the editor.  The default for these modes can be changed by changing flags in the SYSTABS file; this is described later in this chapter, in the section "Setting Editor Defaults."  All of these modes are described in this section.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Insert}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Insert\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:over strike mode\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert mode\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you first start the editor, it is in over strike mode; in this mode the characters you type replace any characters the cursor is on.  In insert mode, any characters you type are inserted at the left of the cursor; the character the cursor is on and any characters to the right of the cursor are moved to the right.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:line length\bxe }}}{\v\fs20 \par }{\fs20 The maximum number of characters the ORCA editor will display on a single line is 255 characters, and this length can be reduced by appropriate settings in the tab line.  If you insert enough characters to create a line longer than 255 characters, the line is wrapped and displayed as more than one line.  Keep in mind that most languages limit the number of characters on a single source line to 255 characters, and may ignore any extra characters or treat them as if they were on a new line.\par To enter or leave the insert mode, type }{\outl\fs18 \u-3\'f0}{\f6\fs18 E}{\fs20 .  When you are in insert mode, the cursor will be an underscore character that alternates with the character in the file.  In over strike mode, the cursor is a blinking box that changes the underlying character between an inverse character (black on white) and a normal character (white on black).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Escape}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Escape\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:escape mode\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:repeat counts\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\tx180\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you press the }{\outl\fs18 ESC}{\fs20  key, the editor enters the escape mode.  For the most part, the escape mode works like the normal edit mode.  The principle difference is that the number keys allows you to enter repeat counts, rather than entering numbers into the file.  After entering a repeat count, a command will execute that number of times.\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\pard\plain \qj\fi360\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert blank lines command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For example, the }{\outl\fs18 \u-3\'f0}{\fs20 B command inserts a blank line in the file.  If you would like to enter fifty blank lines, you would enter the escape mode, type 50}{\outl\fs18 \u-3\'f0}{\fs20 B, and leave the escape mode by typing the }{\outl\fs18 ESC}{\fs20  key a second time.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:escape mode}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:open Apple key}}}{\v\fs20 \par }{\fs20 Earlier, it was mentioned that the number keys were used in escape mode to enter repeat counts.  In the normal editor mode, }{\outl\fs18 \u-3\'f0}{\fs20  followed by a number key moves to various places in the file.  In escape mode, the }{\outl\fs18 \u-3\'f0 }{\fs20 key modifier allows you to type numbers.\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\pard\plain \qj\fi360\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:control underscore key\bxe }}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The only other difference between the two modes is the way }{\outl\fs18 CTRL}{\fs20 _ works.  This key is used primarily in macros.  If you are in the editor mode, }{\outl\fs18 CTRL}{\fs20 _ places you in escape mode.  If you are in escape mode, it does nothing.  In edit mode, }{\outl\fs18 \u-3\'f0CTRL}{\fs20 _ does nothing; in escape mode, it returns you to edit mode.  This lets you quickly get into the mode you need to be in at the start of an editor macro, regardless of the mode you are in when the macro is executed.\par The remainder of this chapter describes the standard edit mode.}{\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Auto Indent}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Auto Indent\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:auto-indent mode\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can set the editor so that }{\outl\fs18 RETURN}{\fs20  moves the cursor to the first column of the next line, or so that it follows indentations already set in the text.  If the editor is set to put the cursor on column 1 when you press }{\outl\fs18 RETURN}{\fs20 , then changing this mode causes the editor to put the cursor on the first non-space character in the next line; if the line is blank, then the cursor is placed under the first non-space character in the first non-blank line above the cursor.  The first mode is generally best for line-oriented languages, like assembly language or BASIC.  The second is handy for block-structured languages like C or Pascal.\par To change the return mode, type }{\outl\fs18 \u-3\'f0RETURN}{\f6\fs18 .}{\outl\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Select Text}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Select Text\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by line\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can use the mouse or the keyboard to select text in the ORCA editor.  This section deals with the keyboard selection mechanism; see "Using the Mouse," later in this chapter, for information about selecting text with the mouse.\par The Cut, Copy, Delete and Block Shift commands require that you first select a block of text.  The ORCA editor has two modes for selecting text: line-oriented and character-oriented selects.  As you move the cursor in line-oriented select mode, text or code is marked a line at a time.  In the character-oriented select mode, you can start and end the marked block at any character.  Line-oriented select mode is the default for assembly language; for text files and most high-level languages, character-oriented select mode is the default.\par While in either select mode, the following cursor-movement commands are active:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:bottom of screen command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:top of screen command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor down command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor up command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:start of line command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:screen move commands}}}{\v\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab bottom of screen\par \bullet \tab top of screen\par \bullet \tab cursor down\par \bullet \tab cursor up\par \bullet \tab start of line\par \bullet \tab screen moves\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In addition, while in character-oriented select mode, the following cursor-movement commands are active:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor left command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor right command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab left command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word right command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word left command}}}{\v\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab cursor left\par \bullet \tab cursor right\par \bullet \tab end of line\par \bullet \tab tab\par \bullet \tab tab left\par \bullet \tab word right\par \bullet \tab word left\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:RETURN key}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:ESCAPE key}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As you move the cursor, the text between the original cursor position and the final cursor position is marked (in inverse characters).  Press }{\outl\fs18 RETURN}{\fs20  to complete the selection of text.  Press }{\outl\fs18 ESC}{\fs20  to abort the operation, leave select mode, and return to normal editing.\par To switch between character- and line-oriented selection while in the editor, type }{\outl\fs18 CTRL\u-3\'f0}{\f6\fs18 x}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Hidden Characters}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Hidden Characters\tcl3}}}{\b \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tabs}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:hidden characters}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 return characters}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hidden characters}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are cases where line wrapping or tab fields may be confusing.  Is there really a new line, or was the line wrapped?  Do those eight blanks represent eight spaces, a tab, or some combination of spaces and tabs?  To answer these questions, the editor has an alternate display mode that shows hidden characters.  To enter this mode, type }{\outl\fs18 \u-3\'f0}{\fs20 =; you leave the mode the same way.  While you are in the hidden character mode, end of line characters are displayed as the mouse text return character.  Tabs are displayed as a right arrow where the tab character is located, followed by spaces until the next tab stop.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Macros}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Macros\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:macros\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can define up to 26 macros for the ORCA editor, one for each letter on the keyboard.  A macro allows you to substitute a single keystroke for up to 128}{\b\fs20  }{\fs20 predefined keystrokes.  A macro can contain both editor commands and text, and can call other macros.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:create macros command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:arrow keys}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:end macro definition command}}}{\v\fs20 \par }{\fs20 To create a macro, press}{\fs18  }{\outl\fs18 \u-3\'f0ESC}{\fs20 .  The current macro definitions for A to J appear on the screen.  The }{\outl\fs18 LEFT-ARROW}{\fs20  and }{\outl\fs18 RIGHT-ARROW}{\fs20  keys can be used to switch between the three pages of macro definitions.  To replace a definition, press the key that corresponds to that macro, then type in the new macro definition.  You must be able to see a macro to replace it - use the left and right arrow keys to get the correct page.  Press }{\outl\fs18 OPTION ESC }{\fs20 to terminate the macro definition.  You can include }{\outl\fs18 CTRL}{\i\fs20 key}{\fs20  combinations, }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20  combinations, }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20  combinations, and the }{\outl\fs18 RETURN}{\fs20 , }{\outl\fs18 ENTER}{\fs20 , }{\outl\fs20 ESC}{\fs20 , and arrow keys.  The following conventions are used to display keystrokes in macros:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:macro keystrokes\bxe }}}{\v\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\outl\fs18 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\outl\fs18 CTRL}{\i\fs20 key}{\fs20  \tab The uppercase character }{\i\fs20 key}{\fs20  is shown in inverse.\par }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20 \tab An inverse A followed by }{\i\fs20 key }{\fs20 (for example,}{\i\fs20  }{\shad\fs20 A}{\fs20 K)\par }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20 \tab An inverse B followed by }{\i\fs20 key}{\fs20  (for example,}{\i\fs20  }{\shad\fs20 B}{\fs20 K)\par }{\outl\fs18 ESC}{\fs20 \tab An inverse left bracket (}{\outl\fs18 CTRL}{\fs20  [).\par }{\outl\fs18 RETURN}{\fs20 \tab An inverse M (}{\outl\fs18 CTRL}{\fs20  M).\par }{\outl\fs18 ENTER}{\fs20 \tab An inverse J (}{\outl\fs18 CTRL}{\fs20  J).\par }{\outl\fs18 UP-ARROW}{\fs20 \tab An inverse K (}{\outl\fs18 CTRL}{\fs20  K).\par }{\outl\fs18 DOWN-ARROW}{\fs20 \tab An inverse J (}{\outl\fs18 CTRL}{\fs20  J).\par }{\outl\fs18 LEFT-ARROW}{\fs20 \tab An inverse H (}{\outl\fs18 CTRL}{\fs20  H).\par }{\outl\fs18 RIGHT-ARROW}{\fs20 \tab An inverse U (}{\outl\fs18 CTRL}{\fs20  U).\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\outl\fs18 DELETE}{\fs20 \tab A block\par }\pard \qj\fi-1800\li2160\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20  combination or }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20  combination counts as two keystrokes in a macro definition.  Although an }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20  combination looks (in the macro definition) like a }{\outl\fs18 CTRL}{\fs20  A followed by }{\i\fs20 key}{\fs20 , and an }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20  combination looks like a }{\outl\fs18 CTRL}{\fs20  B followed by }{\i\fs20 key}{\fs20 , you cannot enter }{\outl\fs18 CTRL}{\fs20  A when you want an }{\outl\fs18 \u-3\'f0}{\fs20  or }{\outl\fs18 CTRL}{\fs20  B when you want an }{\outl\fs18 OPTION}{\fs20  key.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:deleting characters in macros}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:end macro definition command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you make a mistake typing a macro definition, you can back up with \u-3\'f0}{\outl\fs18 DELETE}{\f6\fs18 .}{\fs20   If you wish to retype the macro definition, press }{\outl\fs18 OPTION}{\fs20  }{\outl\fs18 ESC}{\fs20  to terminate the definition, press the letter key for the macro you want to define, and begin over.  When you are finished entering macros, press }{\outl\fs18 OPTION}{\fs20  }{\outl\fs18 ESC}{\fs20  to terminate the last option definition, then press }{\outl\fs18 OPTION}{\fs20  to end macro entry.  If you have entered any new macro definitions, a dialog will appear asking if you want to save the macros to disk; select OK to save the new macro definitions, and Cancel to return to the editor.  If you select Cancel, the macros you have entered will remain in effect until you leave the editor.\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\pard\plain \qj\fi360\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:exit macro creation command}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSEMAC file}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Macros are saved on disk in the file SYSEMAC in the ORCA shell prefix.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:executing macros\bxe }}}{\v\fs20 \par }{\fs20 To execute a macro, hold down }{\outl\fs18 OPTION}{\fs20  and press the key corresponding to that macro.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Using Editor Dialogs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using Editor Dialogs\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The text editor makes use of a number of dialogs for operations like entering search strings, selecting a file to open, and informing you of error conditions.  The way you select options, enter text, and execute commands in these dialogs is the same for all of them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:dialogs}}}{\fs20 Figure 9.1 shows the Search and Replace dialog, one of the most comprehensive of all of the editor's dialogs, and one that happens to illustrate many of the controls used in dialogs.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1051{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.1\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:editline items}}}{\fs20 The first item in this dialog is an editline control that lets you enter a string.  When the dialog first appears, the cursor is at the beginning of this line.  You can use any of the line editing commands from throughout the ORCA programming environment to enter and edit a string in this editline control; these line editing commands are summarized in Table 9.2.\par \par }\pard \qj\fi-1340\li1700\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 command\tab command name and effect\par }\pard \qj\fi-1340\li1700\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1340\li1700\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:editline controls}}}{\v\fs20 \par }{\outl\fs14 \par }\pard \qj\fi-1340\li1700\widctlpar\adjustright {\outl\fs14 LEFT-ARROW}{\fs18 \tab }{\b\fs18 cursor left}{\fs18  - The cursor will move to the left.\par }{\outl\fs14 RIGHT-ARROW}{\fs18 \tab }{\b\fs18 cursor right}{\fs18  - The cursor will move to the right. \par }{\outl\fs14 \u-3\'f0}{\fs18 >}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 .}{\outl\fs18 \tab }{\b\fs18 end of line}{\fs18  -  The cursor will move to the right-hand end of the string.\par }{\outl\fs14 \u-3\'f0}{\fs18 <}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 ,}{\outl\fs18 \tab }{\b\fs18 start of line}{\fs18  - The cursor will move to the left-hand end of the string.\par }{\outl\fs14 \u-3\'f0}{\fs18 Y or }{\outl\fs14 CTRL}{\fs18 Y\tab }{\b\fs18 delete to end of line}{\fs18  - Deletes characters from the cursor to the end of the line.\par }\pard \fi-1340\li1700\widctlpar\adjustright {\outl\fs14 \u-3\'f0}{\fs18 Z or }{\outl\fs14 CTRL}{\fs18 Z\tab }{\b\fs18 undo}{\fs18  - Resets the string to the starting string.\par }{\outl\fs14 ESC}{\fs18  or }{\outl\fs14 CTRL}{\fs18 X\tab }{\b\fs18 exit}{\fs18  - Stops string entry, leaving the dialog without changing the default string or executing the command.\par }\pard \qj\fi-1340\li1700\widctlpar\adjustright {\outl\fs14 \u-3\'f0}{\fs18 E or }{\outl\fs14 CTRL}{\fs18 E\tab }{\b\fs18 toggle insert mode}{\fs18  - Switches between insert and over strike mode.  The dialog starts out in the same mode as the editor, but switching the mode in the dialog does not change the mode in the editor.\par }\pard \qj\fi-1340\li1700\keepn\widctlpar\adjustright {\outl\fs14 DELETE}{\fs18 \tab }{\b\fs18 delete character left}{\fs18  - Deletes the character to the left of the cursor, moving the cursor left.\par }\pard \qc\keepn\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qc\widctlpar\tx2880\outlinelevel0\adjustright {\fs20 Table 9.2  Editline Control Commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tabs}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\fs20 The Search and Replace dialog has two editline items; you can move between them using the tab key.  You may also need to enter a tab character in a string, either to search specifically for a string that contains an imbedded tab character, or to place a tab character in a string that will replace the string once it is found.  To enter a tab character in an editline string, use }{\outl\fs18 \u-3\'f0}{\fs20 tab.  While only one space will appear in the editline control, this space does represent a tab character.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:check boxes}}}{\fs20 Four options appear below the editline controls.  Each of these options is preceded by an }{\outl\fs18 \u-3\'f0}{\fs20  character and a number.  Pressing }{\outl\fs18 \u-3\'f0}{\fs20 x, where x is the number, selects the option, and causes a check mark to appear to the left of the option.  Repeating the operation deselects the option, removing the check mark.  You can also select and deselect options by using the mouse to position the cursor over the item, anywhere on the line from the }{\outl\fs18 \u-3\'f0}{\fs20  character to the last character in the label.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:buttons}}}{\fs20 At the bottom of the dialog is a pair of buttons; some dialogs have more than two, while some have only one.  These buttons cause some action to occur.  In general, all but one of these buttons will have an }{\outl\fs18 \u-3\'f0}{\fs20  character and a number to the left of the button.  You can select a button in one of several ways:  by clicking on the button with the mouse, by pressing the RETURN key (for the default button, which is the one without an }{\outl\fs18 \u-3\'f0}{\fs20  character), by pressing }{\outl\fs18 \u-3\'f0}{\fs20 x, or by pressing the first letter of the label on the button.  (For dialogs with an editline item, the last option is not available.)\par Once an action is selected by pressing a button, the dialog will vanish and the action will be carried out.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1052{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:list controls}}}{\fs20 Figure 9.3 shown the Open dialog.  This dialog contains a list control, used to display a list of files and folders.\par You can scroll through the list by clicking on the arrows with the mouse, dragging the thumb with the mouse (the thumb is the space in the gray area between the up and down arrows), clicking in the gray area above or below the thumb, or by using the up and down arrow keys.\par If there are any files in the list, one will always be selected.  For commands line Open that require a file name, you will be able to select any file in the list; for commands like New, that present the file list so you know what file names are already in use, only folders can be selected.  You can change which file is selected by clicking on another file or by using the up or down arrow keys.  If you click on the selected name while a folder is selected, the folder is opened.  If you click on a selected file name, the file is opened.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Using the Mouse}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using the Mouse\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:mouse}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 mouse}}}{\fs20 All of the features of the editor can be used without a mouse, but the mouse can also be used for a number of functions.  If you prefer not to use a mouse, simply ignore it.  You can even disconnect the mouse, and the ORCA editor will perform perfectly as a text-based editor.\par The most common use for the mouse is moving the cursor and selecting text.  To position the cursor anywhere on the screen, move the mouse.  As soon as the mouse is moved, an arrow will appear on the screen; position this arrow where you would like to position the cursor and click.\par Several editor commands require you to select some text.  With any of these commands, you can select the text before using the command by clicking to start a selection, then dragging the mouse while holding down the button while you move to the other end of the selection.  Unlike keyboard selection, mouse selections are always done in character select mode.  You can also select words by double-clicking to start the selection, or lines by triple clicking to start the selection.  Finally, if you drag the mouse off of the screen while selecting text, the editor will start to scroll one line at a time.\par The mouse can also be used to select dialog buttons, change dialog options, and scroll list items in a dialog.  See "Using Editor Dialogs" in this chapter for details.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Command Descriptions}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Command Descriptions\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section describes the functions that can be performed with editor commands.  The key assignments for each command are shown with the command description.\par Screen-movement descriptions in this manual are based on the direction the display screen moves through the file, not the direction the lines appear to move on the screen.  For example, if a command description says that the screen scrolls down one line, it means that the lines on the screen move }{\i\fs20 up}{\fs20  one line, and the next line in the file becomes the bottom line on the screen.\par }\pard \qj\ri360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 @\tab }{\b About\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:about command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:version\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Shows the current version number and copyright for the editor.  Press any key or click on the mouse to get rid of the About dialog.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 G\tab }{\b Beep the Speaker\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:beep the speaker command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ASCII control character BEL ($07) is sent to the output device.  Normally, this causes the speaker to beep.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 , or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 <\tab }{\b Beginning of Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:beginning of line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The cursor is placed in column one of the current line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 DOWN-ARROW}{\outl\fs18 \tab }{\b Bottom of Screen / Page Down}{\b\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:bottom of screen command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor moves to the last visible line on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the bottom of the screen, the screen scrolls down twenty-two lines.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 C or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 C\tab }{\b Copy\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:copy command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTEMP file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:paste command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the Copy command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\fs18 RETURN}{\fs20 .  The selected text is written to the file SYSTEMP in the work prefix.  (To cancel the Copy operation without writing the block to SYSTEMP, press }{\outl\fs18 ESC }{\fs20 instead of }{\outl\fs18 RETURN}{\fs20 .)  Use the Paste command to place the copied material at another position in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 W or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 W\tab }{\b Close\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:close command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Closes the active file.  If the file has been changed since the last update, a dialog will appear, giving you a chance to abort the close, save the changes, or close the file without saving the changes.  If the active file is the only open file, the editor exits after closing the file; if there are other files, the editor selects the next file to become the active file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 DOWN-ARROW}{\b\fs20 \tab }{\b Cursor Down\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor down command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved down one line, preserving its horizontal position.  If it is on the last line of the screen, the screen scrolls down one line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 LEFT-ARROW}{\tab }{\b Cursor Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The cursor is moved left one column.  If it is in column one, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 RIGHT-ARROW\tab }{\b Cursor Right\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor right command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved right one column.  If it is on the end-of-line marker (usually column 80), the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 UP-ARROW\tab }{\b Cursor Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor up command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved up one line, preserving its horizontal position.  If it is on the first line of the screen, the screen scrolls up one line.  If the cursor is on the first line of the file, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 X or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 X\tab }{\b Cut\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cut command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the Cut}{\i\fs20  }{\fs20 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\fs18 RETURN}{\fs20 .  The selected text is written to the file SYSTEMP in the work prefix, and deleted from the file.  (To cancel the Cut operation without cutting the block from the file, press  }{\outl\fs18 ESC}{\fs20  instead of }{\outl\fs18 RETURN}{\fs20 ).  Use the Paste command to place the cut text at another location in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 ESC}{\b\scaps\fs20 \tab }{\b Define Macros\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:define macros command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor enters the macro definition mode.  Press }{\outl\fs18 OPTION ESC}{\fs20  to terminate a definition, and }{\outl\fs18 OPTION}{\fs20  to terminate macro definition mode.  The macro definition process is described in the section \ldblquote Macros\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 DELETE}{\b\scaps\fs20 \tab }{\b Delete\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the delete}{\i\fs20  }{\fs20 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use any of the cursor movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\fs18 RETURN}{\fs20 .  The selected text is deleted from the file.  (To cancel the delete operation without deleting the block from the file, press }{\outl\fs18 ESC}{\fs20  instead of }{\outl\fs18 RETURN}{\fs20 .)\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 F or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 F\tab }{\b Delete Character\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo delete buffer}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The character that the cursor is on is deleted and put in the Undo buffer (see the description of the Undo command).  Characters to the right of the cursor are moved one space to the left to fill in the gap.  The last column on the line is replaced by a space.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 DELETE}{\b\fs20  or }{\outl\fs20 CTRL}{\b\fs20 D\tab }{\b Delete Character Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The character to the left of the cursor is deleted, and the character that the cursor is on, as well as the rest of the line to the right of the cursor, are moved 1 space to the left to fill in the gap.  If the cursor is in column one and the over strike mode is active, no action is taken.  If the cursor is in column one and the insert mode is active, then the line the cursor is on is appended to the line above and the cursor remains on the character it was on before the delete.  Deleted characters are put in the undo buffer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20  }{\b\outl\fs18 \u-3\'f0}{\b\fs20 T or }{\outl\fs20 CTRL}{\b\fs20 T\tab }{\b Delete Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The line that the cursor is on is deleted, and the following lines are moved up one line to fill in the space.  The deleted line is put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 Y or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 Y\tab }{\b Delete to EOL\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete to end of line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The character that the cursor is on, and all those to the right of the cursor to the end of the line, are deleted and put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20  }{\b\outl\fs18 \u-3\'f0}{\b\fs20 G}{\b\scaps\fs20 \tab }{\b Delete Word\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete word command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the delete word command, the cursor is moved to the beginning of the word it is on, then delete character}{\i\fs20  }{\fs20 commands are executed for as long as the cursor is on a non-space character, then for as long as the cursor is on a space.  This command thus deletes the word plus all spaces up to the beginning of the next word.  If the cursor is on a space, that space and all following spaces are deleted, up to the start of the next word.  All deleted characters, including spaces, are put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 . or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 >\tab }{\b End of Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:end of line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the last column on the line is not blank, the cursor moves to the last column.  If the last column is blank, then the cursor moves to the right of the last non-space character in the line.  If the entire line is blank, the cursor is placed in column 1.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 ? or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 /\tab }{\b Help}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:help command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSHELP file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prefix}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Displays the help file, which contains a short summary of editor commands.  Use }{\outl\fs18 ESC}{\fs20  to return to the file being edited.\par The help file is a text file called SYSHELP, found in the shell prefix.  Since it is a text file, you can modify it as desired.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 B or }{\outl\fs20 CTRL}{\b\fs20 B\tab }{\b Insert Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A blank line is inserted at the cursor position, and the line the cursor was on and the lines below it are scrolled down to make room.  The cursor remains in the same horizontal position on the screen.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 SPACEBAR}{\b\fs20 \tab }{\b Insert Space\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert space command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A space is inserted at the cursor position.  Characters from the cursor to the end of the line are moved right to make room.  Any character in column 255 on the line is lost.  The cursor remains in the same position on the screen.  Note that the Insert Space command can extend a line past the end-of-line marker.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 N or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 N\tab }{\b New\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:new command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A dialog like the one show below appears.  You need to enter a name for the new file.  After entering a name, the editor will open an empty file using one of the ten available file buffers.  The file's location on disk will be determined by the directory showing in the dialog's list box.\par While the New command requires selecting a file name, no file is actually created until you save the file with the Save command.\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1053{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw415\pich262\picwgoal8300\pichgoal5240\macpict\bliptag216033400\blipupi72{\*\blipuid 0ce06878b640b85fd7259633d8998b3d}117200000001010601a01101a00082a03039a0008e01000a0000000002d0024098003400000000003b01a000000001003b01a000000001003b01a0000106001fcfff00fc06001fcfff00fc060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003120c60000630000007f0c1c0000630db000003120c60000630000007f0c1c0000630db000003120c600006300000060000c0000630db000003120c600006300000060000c0000630db000003150f60000733e6300601c0c3e00733e773e0de000003150f60000733e6300601c0c3e00733e773e0de000003150f600007f6363007e0c0c63007f036b630de000003150f600007f6363007e0c0c63007f036b630de000003150f60000677f6300600c0c7f00673f6b7f0de000003150f60000677f6b00600c0c7f00673f6b7f0de000003140e6000063606b00600c0c600063636b6dd000003140e6000063606b00600c0c600063636b6dd000003150f60000633f3e00601e1e3f00633f633f0de000003150f60000633f3e00601e1e3f00633f633f0de000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031610600000063007e0c006000c600fe0038060df0000031610600000063007e0c006000c600fe0038060df0000031610600000077006300006000ee00c00018060df0000031610600000077006300006000ee00c00018060df0000031812600000c6b63631c3e6318d6c6c07c187e7cde0e10000031812600000c6b63631c3e6318d6c6c07c187e7cde0e1000003171160000006b63630c606600d6c6fcc618c6c6ee0000003171160000006b63630c606600d6c6fcc618c6c6ee00000031711600000c6363630c3e7c18c6c6c0c618c6fece0000003980034003b0000007601a0003b0001007601a0003b0001007601a000011711600000c6363630c3e7c18c6c6c0c618c6fece000000317116000000633f630c036600c67ec0c618c6c0ce000000317116000000633f630c036600c67ec0c618c6c0ce00000031711600000063037e1e3e6300c606c07c3c7e7ece00000031711600000063037e1e3e6300c606c07c3c7e7ece0000003100060fe000103e0fc000107c0db000003100060fe000103e0fc000107c0db000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000030c02600007ddff00f8f60000030c02600007ddff00f8f60000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe000507e0c0c630c0e700091cce06118009cf39f998fe0000031e02600018fe000507e0c0c630c0e700091cce04118009cf39f998fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018fe0004080ffe3fcfe6ff01f806f60000031502600018fe0004080ffe3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f60000031102600018fe00000fe2ff01f806f60000031102600018fe00000fe2ff01f806f60000031502600018de00091aae0043e00c1ffffff8fe0000031502600018de00091d560043e00c1ffffff8fe0000031502600018de00091aae00863009cffffff8fe0000031502600018de00091d5600863009cffffff8fe0000039800340076000000b101a00076000100b101a00076000100b101a000011502600018de00091aae03603009c81c1818fe0000031502600018de00091d5603603009c81c1818fe0000031502600018de00051aae0610e009fec900c8fe0000031502600018de00051d560410e009fec900c8fe0000031502600018de00091aae04238009c9c809c8fe0000031502600018de00091d5604238009c9c809c8fe0000031502600018de00091aae04260009c819f9c8fe0000031502600018de00091d5604260009c819f9c8fe0000031502600018de00091aae0297f00c19fc09c8fe0000031502600018de00091d560297f00c19fc09c8fe0000031502600018de00091aae0360000ff9fffff8fe0000031502600018de00091d560360000ff9fffff8fe0000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000031502600018de000d1aae0047f00c1e3ffffff80000031502600018de000d1d560047f00c1e3ffffff80000031502600018de000d1aae00803009cf3ffffff80000031502600018de000d1d5600803009cf3ffffff80000031502600018de000d1aae03606009ff3c1c1c180000031502600018de000d1d5603606009ff3c1c1c180000031502600018de000d1aae0610e009ff39c9f9c80000031502600018de000d1d560410e009ff39c9f9c80000031502600018de000d1aae04203009ff39cc18080000031502600018de000d1d5604203009ff39cc18080000031502600018de000d1aae04263009cf39cfc9f80000031502600018de000d1d5604263009cf39cfc9f80000031502600018de00061aae0293e00c1efe1c03080000031502600018de00061d560293e00c1efe1c03080000031402600018de00051aae0360000ffdff03f80000031402600018de00051d560360000ffdff03f80000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef600000398003400b1000000ec01a000b1000100ec01a000b1000100ec01a000010d02600018de00011d56f60000031402600018de000618c60040e00607fdff021c00031402600018de000618c60040e00607fdff021c00031302600018de000518c60081e004fcff029c00031302600018de000518c60081e004fcff029c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c606166004ffe4e4fce79c00031502600018de000d18c604166004ffe4e4fce79c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1bf6029060060604e606070c00031502600018de000d1bf6029060060604e606070c00031302600018de000518c603600007fcff02fc00031302600018de000518c603600007fcff02fc00030c02600007ddff00f8f60000030c02600007ddff00f8f6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031808600007f0c1c0000630e1000647f00c1ffffff8fe0000031808600007f0c1c0000630e1000647f00c1ffffff8fe00000318086000060000c0000630e10006860009cffffff8fe00000318086000060000c0000630e10006860009cffffff8fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe0000031c0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003160060f7000007e6ff04fc0360000ffeff00f8fe000003160060f7000007e6ff04fc0360000ffeff00f8fe0000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f600000398003400ec0000010601a000ec0001010601a000ec0001010601a000010c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600007ddff00fcf60000030c02600007ddff00fcf6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf00000306001fcfff00fc06001fcfff00fca0008fa00083ff}}{\par }{\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 O or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 O\tab }{\b Open\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:open command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:multiple files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor can edit up to ten files at one time.  When the open command is used, the editor moves to the first available file buffer, then brings up the dialog shown in Figure 9.4.  If there are no empty file buffers, the editor beeps, and the command is aborted.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1054{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.4\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Selecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\fs20 When you use the open button, if the selected file in the file list is a TXT or SRC file, the file is opened.  If a folder is selected, the folder is opened, and the file list changes to show the files inside the folder.  You can also open a file by first selecting a file, then clicking on it with the mouse.\par If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the file list.  If the file list was created from the root volume of a disk, the close button does nothing.\par The cancel button leaves the open dialog without opening a file.\par For information on how to use the various controls in the dialog, see "Using Editor Dialogs" in this chapter.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 V or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 V\tab }{\b Paste\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:paste command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTEMP file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The contents of the SYSTEMP file are copied to the current cursor position.  If the editor is in line-oriented select mode, the line the cursor is on and all subsequent lines are moved down to make room for the new material.  If the editor is in character-oriented select mode, the material is copied at the cursor column.  If enough characters are inserted to make the line longer than 255 characters, the excess characters are lost.\par }\pard \qj\ri360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tx1350\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 Q or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 Q}{\b \tab Quit\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:quit command\bxe }}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The quit command leaves the editor.  If any file has been changed since the last time it was saved to disk, each of the files, in turn, will be made the active file, and the following dialog will appear:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1055{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw231\pich84\picwgoal4620\pichgoal1680\macpict\bliptag1830675910\blipupi72{\*\blipuid 6d1de5c6b9fc7f2c7bf96705af84eab1}052000000000005400e71101a00082a0008e01000a0000000002d0024098001e00000000005400e800000000005400e700000000005400e7000102e30007001fe6ff01f00007001fe6ff01f000070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00140360000f80fe00010f98fc00010f80f500010c00140360000f80fe00010f98fc00010f80f500010c001403600018c0fe000118d8fc000118c0f500010c001403600018c0fe000118d8fc000118c0f500010c00160f6000180f98cf80181f0f9f8000000180f500010c00160a6000180f98cf80181f0f9ffe8f018180f500010c00150e60000f80d8d8c01818c0d8cf8f8f83f400010c00140960000f80d8d8c01818c0fdd80003f400010c001409600000cfd8dfc01818cffdd80003f400010c00150e600000cfd8dfc01818cfd8d8dfcf83f400010c001407600018d8cd980018fdd802dfcf80f400010c001507600018d8cd980018fed803cfd800c0f400010c00150e60000f8fc70fc00f98cfd8cfd800c3f400010c00150e60000f8fc70fc00f98cfd8c0cfcf83f400010c000d0060f60002cfcf80f400010c000c0060f700010f80f200010c000c0060f700010f80f200010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600004fcf393f000000c2300101390000c21c013ff9393f39e7000000c001f1d600004fcf393f00000082300101390000821c013ff9393f39e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c0007001fe6ff01f00007001fe6ff01f00002e300a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.5\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par If you select Yes, the file is saved just as if the Save command had been used.  If you select No, the file is closed without saving any changes that have been made.  Selecting Cancel leaves you in the editor with the active file still open, but if several files had been opened, some of them may have been closed before the Cancel operation took effect.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs18 CTRL}{\b\fs20 R or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 R\tab }{\b Remove Blanks\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:remove blanks command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the cursor is on a blank line, that line and all subsequent blank lines up to the next non-blank line are removed.  If the cursor is not on a blank line, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20 1 to 32767\tab }{\b Repeat Count\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:repeat counts\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When in escape mode, you can enter a }{\i\fs20 repeat count }{\fs20 (any number from 1 to 32767) immediately before a command, and the command is repeated as many times as you specify (or as many times as is possible, whichever comes first).  Escape mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 RETURN\tab }{\b Return\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:RETURN key\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:auto-indent mode}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\outl\fs18 RETURN}{\fs20  key works in one of two ways, depending on the setting of the auto-indent mode toggle:  1) to move the cursor to column one of the next line; or 2) to place the cursor on the first non-space character in the next line, or, if the line is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor.  If the cursor is on the last line on the screen, the screen scrolls down one line.\par If the editor is in insert mode, the }{\outl\fs18 RETURN}{\fs20  key will also split the line at the cursor position.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 A}{\b\fs18  or}{\b\outl\fs18  \u-3\'f0}{\b\fs20 A\tab }{\b Save As\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:save as command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Save As command lets you change the name of the active file, saving it to a new file name or to the same name in a new file folder.  When you use this command, this dialog will appear:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1056{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich264\picwgoal8340\pichgoal5280\macpict\bliptag1383067446\blipupi72{\*\blipuid 526fef36b94839b56321b6374aeff36f}132100000000010801a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000b03600003e0d2000003ff000b03600003e0d2000003ff000b0360000630d2000003ff000b0360000630d2000003ff00110960000603e633e003e3e0d8000003ff00110960000603e633e003e3e0d8000003ff001008600003e03636300036d7000003ff001008600003e03636300036d7000003ff00110960000033f637f003f3e0d8000003ff00110960000033f637f003f3e0d8000003ff00110960000636336600063030d8000003ff00110960000636336600063030d8000003ff001109600003e3f1c3f003f3e0d8000003ff001109600003e3f1c3f003f3e0d8000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe000507e0c0c630c0e700091cce06118009cf39f998fe000003ff002002600018fe000507e0c0c630c0e700091cce04118009cf39f998fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff001702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff0098003600ae000000e801a800ae000000e801a100ae000000e801a100010f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff001502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe000003ff001e0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff0098003600e80000010801a800e80000010801a100e80000010801a100010e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600007ddff00fcf6000003ff000e02600007ddff00fcf6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.6\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Selecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par When you use the Open button, the selected folder is opened.  While using this command, you cannot select any files from the list; only folders can be selected.\par If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the file list.  If the file list was created from the root volume of a disk, the close button does nothing.\par The cancel button leaves the open dialog without opening a file.\par The Save button saves the file, using the file name shown in the editline item labeled "File Name."  You can also save the file by pressing the RETURN key.\par For information on how to use the various controls in the dialog, see "Using Editor Dialogs" in this chapter.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 S}{\b\fs18  or}{\b\outl\fs18  \u-3\'f0}{\b\fs20 S\tab }{\b Save\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:save command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The active file (the one you can see) is saved to disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 -1 to }{\b\outl\fs18 \u-3\'f0}{\b\fs20 -9\tab }{\b Screen Moves\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:moving through a file\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file is divided by the editor into 8 approximately equal sections.  The screen-move commands move the file to a boundary between one of these sections.  The command }{\outl\fs18 \u-3\'f0}{\fs20 1 jumps to the first character in the file, and }{\outl\fs18 \u-3\'f0}{\fs20 9 jumps to the last character in the file.  The other seven }{\outl\fs18 \u-3\'f0}{\i\fs20 n }{\fs20 commands cause screen jumps to evenly spaced intermediate points in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 \}\tab }{\b Scroll Down One Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll down one line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor moves down one line in the file, causing all of the lines on the screen to move up one line.  The cursor remains in the same position on the screen.  Scrolling can continue past the last line in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 ]\tab }{\b Scroll Down One Page\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll down one page command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The screen scrolls down twenty-two lines.  Scrolling can continue past the last line in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 \{\tab }{\b Scroll Up One Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll up one line\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor moves up one line in the file, causing all of the lines on the screen to move down one line.  The cursor remains in the same position on the screen.  If the first line of the file is already displayed on the screen, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 [\tab }{\b Scroll Up One Page\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll up one page command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The screen scrolls up twenty-two lines.  If the top line on the screen is less than one screen\rquote s height from the beginning of the file, the screen scrolls to the beginning of the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 L\tab }{\b Search Down\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search down command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command allows you to search through a file for a character or string of characters.  When you execute this command, the prompt }{\f6\fs18 Search string:}{\fs20  appears at the bottom of the screen.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1057{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich174\picwgoal10440\pichgoal3480\macpict\bliptag-998183356\blipupi72{\*\blipuid c480ee441428365ad0fea5b85187189b}0bd80000000000ae020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180120060fd000386300630f9000003d300010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018019066000080f3fffc8fe000343e00c0ffeff01fe38d40001018019066000080f3fffc8fe000343e00c0ffeff01fe38d400010180980042008d000000ae0210008d000000ae020a008d000000ae020a00011702600009feff00c8fe0002863009fcff0038d4000101801702600009feff00c8fe0002863009fcff0038d4000101801912600009fe381c08000003667009fc181c0c1f38d4000101801912600009fe381c08000003667009fc181c0c1f38d40001018019126000083f39c9c800000616b009ffc9c9f9cf38d40001018019126000083f39c9c800000416b009ffc9c9f9cf38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d400010180170260000ffeff06f800000360000ffcff00f8d400010180170260000ffeff06f800000360000ffcff00f8d400010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018007001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.7\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par If you have previously entered a search string, the previous string appears after the prompt as a default.  Type in the string for which you wish to search, and press }{\outl\fs18 RETURN}{\fs20 .  The cursor will be moved to the first character of the first occurrence of the search string after the old cursor position.  If there are no occurrences of the search string between the old cursor position and the end of the file, an alert will show up stating that the string was not found; pressing any key will get rid of the alert.\par By default, string searches are case insensitive, must be an exact match in terms of blanks and tabs, and will match any target string in the file, even if it is a subset of a larger word.  All of these defaults can be changed, so we will look at what they mean in terms of how changing the defaults effect the way string searches work.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you look at a line like\par \par }\pard \qj\li360\widctlpar\tx980\tx1620\adjustright {\f6\fs18 lb1\tab lda\tab #4\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 without using the hidden characters mode, it is impossible to tell if the spaces between the various fields are caused by a series of space characters, two tabs, or perhaps even a space character or two followed by a tab.  This is an important distinction, since searching for lda<space><space><space>#4 won't find the line if the lda and #4 are actually separated by a tab character, and searching for lda<tab>#4 won't find the line if the fields are separated by three spaces.  If you select the "white space compares equal" option, though, the editor will find any string where lda and #4 are separated by any combination of spaces and tabs, whether you use spaces, tabs, or some combination in the search string you type.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 By default, if you search for lda, the editor will also find LDA, since string searches are case insensitive.  In C, which is case sensitive, you don't usually want to find MAIN when you type main.  Selecting the "case sensitive" option makes the string search case sensitive, so that the capitalization becomes significant.  With this option turned on, searching for main would not find MAIN.\par Sometimes when you search for a string, you want to find any occurrence of the string, even if it is imbedded in some larger word.  For example, if you are scanning your program for places where it handles spaces, you might enter a string like "space".  You would want the editor to find the word whitespace, though, and normally it would.  If you are trying to scan through a source file looking for all of the places where you used the variable i, though, you don't want the editor to stop four times on the word Mississippi.  In that case, you can select the "whole word" option, and the editor will only stop of it finds the letter i, and there is no other letter, number, or underscore character on either side of the letter.  These rules match the way languages deal with identifiers, so you can use this option to search for specific variable names \endash  even a short, common one like i.\par This command searches from the cursor position towards the end of the file.  For a similar command that searches back towards the start of the file, see the "Search Up" command.\par For a complete description of how to use the mouse or keyboard to set options and move through the dialog, see the section "Using Editor Dialogs" in this chapter.\par Once a search string has been entered, you may want to search for another occurrence of the same string.  ORCA ships with two built-in editor macros that can do this with a single keystroke, without bringing up the dialog.  To search forward, use the \u-3\'f0L macro; to search back, use the \u-3\'f0K macro.\par }\pard \qj\fi-1980\li2333\widctlpar\tx2340\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 K\tab }{\b Search Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search up command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command operates exactly like Search Down}{\i\fs20 ,}{\fs20  except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of the file; to search between the current cursor location and the end of the file, use the Search Down command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 J\tab }{\b Search and Replace Down\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search and replace down command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command allows you to search through a file for a character or string of characters, and to replace the search string with a replacement string.  When you execute this command, the following dialog will appear on the screen:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1058{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.8\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The search string, the first three options, and the buttons work just as they do for string searches; for a description of these, see the Search Down command.  The replace string is the target string that will replace the search string each time it is found.  By default, when you use this command, each time the search string is found in the file you will see this dialog:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1059{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich84\picwgoal5880\pichgoal1680\macpict\bliptag-1051516100\blipupi72{\*\blipuid c153233cf432f61985fd11443439c450}063900000000005401261101a00082a0008e01000a0000000002d00240980026000000000053012800000000005301260000000000530126000102db0007001fdeff01e00007001fdeff01e000070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f5000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f500011800100060fe000018f300010f80f200011800100060fe000018f300010f80f200011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118000e036000003ffbff00e0e8000118002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600004e067273cff27e720fe001718460030667cce40000018438027ff2727e73ce000001800270a600004e067273cff27e720fe001710460030667cce40000010438027ff2727e73ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc03030273030386000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc0303027303038600000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e00000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e000001800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de0001180007001fdeff01e00007001fdeff01e000980026005300000054012800530000005401260053000000540126000102db00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 9.9\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 If you select the Replace option, the search string is replaced by the replace string, and the editor scans forward for the next occurrence of the search string.  Choosing Skip causes the editor to skip ahead to the next occurrence of the search string without replacing the occurrence that is displayed.  Cancel stops the search and replace process.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you use the "replace all" option, the editor starts at the top of the file and replaces each and every occurrence of the search string with the target string.  On large files, this can take quite a bit of time.  To stop the process, press }{\outl\fs18 \u-3\'f0}{\fs20 .  (open-apple period).  While the search and replace is going on, you can see a spinner at the bottom right corner of the screen, showing you that the editor is still alive and well.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 H\tab }{\b Search and Replace Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search and replace up command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command operates exactly like Search and Replace Down, except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of the file; to search between the current cursor location and the end of the file, use the Search and Replace Down command.  If you use the "replace all" option, this command works exactly the same way the Search and Replace Down command does when it uses the same option.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 -}{\b\f6\fs18 \tab }{\b Select File\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select file command\bxe }}}{\v\fs20 .}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:multiple files.}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor can edit up to ten files at one time.  When you use this command, a dialog appears showing the names of the ten files in memory.  You can then move to one of the files by pressing \u-3\'f0n, where n is one of the file numbers.  You can exit the dialog without switching files by pressing ESC or RETURN.\par See also the Switch Files command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 TAB}{\b\f6\fs18 \tab }{\b Set and Clear Tabs\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear tab stops command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If there is a tab stop in the same column as the cursor, it is cleared; if there is no tab stop in the cursor column, one is set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 [}{\b\f6\fs18 \tab }{\b Shift Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:shift left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If this command is issued when no text is selected, you enter the text selection mode.  Pressing RETURN leaves text selection mode.\par At any time while text is selected, using the command shifts all of the selected text left one character.  This is done by scanning the text, one line at a time, and removing a space right before the first character on each line that is not a space or tab.  If the character to be removed is a tab character, it is first replaced by an equivalent number of spaces.  If there are no spaces or tabs at the start of the line, the line is skipped.\par If a large amount of text is selected, this command may take a lot of time.  While the editor is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pressing }{\outl\fs18 \u-3\'f0}{\fs20 ., but this will leave the selected text partially shifted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 ]}{\b\f6\fs18 \tab }{\b Shift Right\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:shift right command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If this command is issued when no text is selected, you enter the text selection mode.  Pressing RETURN leaves text selection mode.\par At any time while text is selected, using the command shifts all of the selected text right one character.  This is done by scanning the text, one line at a time, and adding a space right before the first character on each line that is not a space or tab.  If this leaves the non-space character on a tab stop, the spaces are collected and replaced with a tab character.  If a blank line is encountered, no action is taken.\par If a large amount of text is selected, this command may take a lot of time.  While the editor is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pressing }{\outl\fs18 \u-3\'f0}{\fs20 ., but this will leave the selected text partially shifted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 n}{\b\f6\fs18 \tab }{\b Switch Files\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:switch files command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:multiple files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor can edit up to ten files at one time.  Each of these files is numbered, starting from 0 and proceeding to 9.  The numbers are assigned as the files are opened from the command line.  To move from one file to the next, press \u-3\'f0n, where n is a numeric key.\par When you switch files, the original file is not changed in any way.  When you return to the file, the cursor and display will be in the same place, the undo buffer will still be active, and so forth.  The only actions that are not particular to a specific file buffer are those involving the clipboard \endash  Cut, Copy and Paste all use the same clipboard, so you can move chunks of text from one file to another.\par See also the Select File command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 TAB}{\b\scaps\fs20 \tab }{\b Tab\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In insert mode, or when in over strike mode and the next tab stop is past the last character in the line, this command inserts a tab character in the source file and moves to the end of the tab field.  If you are in the over strike mode and the next tab stop is not past the last character on the line, the Tab command works like a cursor movement command, moving the cursor forward to the next tab stop.\par Some languages and utilities do not work well (or at all) with tab stops.  If you are using one of these languages, you can tell the editor to insert spaces instead of tab characters; see the section "Setting Editor Defaults," later in this chapter, to find out how this is done.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 TAB}{\b\fs20 \tab }{\b Tab Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved to the previous tab stop, or to the beginning of the line if there are no more tab stops to the left of the cursor.  This command does not enter any characters in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 RETURN}{\b\f6\fs18 \tab }{\b Toggle Auto Indent Mode\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear auto-indent mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the editor is set to put the cursor on column one when you press }{\outl\fs18 RETURN}{\fs20 , it is changed to put the cursor on the first non-space character; if set to the first non-space character, it is changed to put the cursor on column one.  Auto-indent mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 ESC}{\b\scaps\fs20 \tab }{\b Toggle Escape Mode}{\b\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear escape mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the editor is in the edit mode, it is put in escape mode; if it is in escape mode, it is put in edit mode.  When you are in escape mode, pressing any character not specifically assigned to an escape-mode command returns you to edit mode.  Escape and edit modes are described in the section \ldblquote Modes\rdblquote  in this chapter.\par When in escape mode, }{\b\outl\fs18 \u-3\'f0}{\outl\fs18 CTRL}{\fs20 _ will return you to edit mode.  In edit mode the command has no effect.  From edit mode, }{\outl\fs18 CTRL}{\fs20 _ will place you in escape mode, but the command has no effect in escape mode.  These commands are most useful in an editor macro, where you do not know what mode you are in on entry.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 E or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 E\tab }{\b Toggle Insert Mode\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear insert mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If insert mode is active, the editor is changed to over strike mode.  If over strike mode is active, the editor is changed to insert mode.  Insert and over strike modes are described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\outl\fs20 \u-3\'f0}{\b\fs20 X\tab }{\b Toggle Select Mode\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear select mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the editor is set to select text for the Cut, Copy, and Delete commands in units of one line, it is changed to use individual characters instead; if it is set to character-oriented selects, it is toggled to use whole lines.  See the section \ldblquote Modes\rdblquote  in this chapter for more information on select mode.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 UP-ARROW}{\outl \tab }{\b Top of Screen / Page Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:top of screen command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor moves to the first visible line on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the top of the screen, the screen scrolls up twenty-two lines.  If the cursor is at the top of the screen and less than twenty-two lines from the beginning of the file, then the screen scrolls to the beginning of the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 Z or }{\b\outl\fs20 \u-3\'f0}{\b\fs20 Z\tab }{\b Undo Delete\par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\pard\plain \qj\keepn\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo delete command\bxe }}}{\pard\plain \qj\keepn\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo delete buffer}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character left command}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete line command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete to end of line command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete word command}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The last operation that changed the text in the current edit file is reversed, leaving the edit file in the previous state.  Saving the file empties the undo buffer, so you cannot undo changes made before the last time the file was saved.\par The undo operation acts like a stack, so once the last operation is undone, you can undo the one before that, and so on, right back to the point where the file was loaded or the point where the file was saved the last time.\par \par }\pard \keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs20 \u-3\'f0}{\outl\fs20 LEFT-ARROW}{\b\fs20 \tab }{\b Word Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved to the beginning of the next non-blank sequence of characters to the left of its current position.  If there are no more words on the line, the cursor is moved to the last word in the previous line or, if it is blank, to the last word in the first non-blank line preceding the cursor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 RIGHT-ARROW\tab }{\b Word Right\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word right command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved to the start of the next non-blank sequence of characters to the right of its current position.  If there are no more words on the line, the cursor is moved to the first word in the next non-blank line.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Setting Editor Defaults}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Setting Editor Defaults\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:setting defaults\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:customizing\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you start the ORCA editor, it reads the file named SYSTABS (located in the ORCA shell prefix), which contains the default settings for tab stops, return mode, insert mode, tab mode, and select mode.  The SYSTABS file is an ASCII text file that you can edit with the ORCA editor.\par Each language recognized by ORCA is assigned a language number.  The SYSTABS file has three lines associated with each language:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:modes}}}{\v\fs20 \par }\pard \qj\fi-270\li720\widctlpar\adjustright {\fs20 \par 1.\tab The language number.\par 2.\tab The default settings for the various modes.\par 3.\tab The default tab and end-of-line-mark settings.\par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The first line of each set of lines in the SYSTABS file specifies the language that the next two lines apply to.  ORCA languages can have numbers from 0 to 32767 (decimal).  The language number must start in the first column; leading zeros are permitted and are not significant, but leading spaces are not allowed.\par The second line of each set of lines in the SYSTABS file sets the defaults for various editor modes, as follows:\par }\pard \qj\fi-270\li720\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:auto-indent mode}}}{\v\fs20 \par }{\fs20 1.\tab If the first column contains a zero, pressing }{\outl\fs18 RETURN}{\fs20  in the editor causes the cursor to go to column one in the next line; if it\rquote s a one, pressing }{\outl\fs18 RETURN}{\fs20  sends the cursor to the first non-space character in the next line (or, if the line is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor).\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode}}}{\v\fs20 \par }{\fs20 2.\tab If the second character is zero, the editor is set to line-oriented selects; if one, it is set to character-oriented selects.\par 3.\tab This flag is not used by the current version of the ORCA editor.  It should be set to 0.\par 4.\tab The fourth character is used by the ORCA/Desktop editor, and is used to set the default cursor mode.  A zero will cause the editor to start in over strike mode; a one causes the editor to start in insert mode.\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab mode}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\v\fs20 \par }{\fs20 5.\tab If the fifth character is a 1, the editor inserts a tab character in the source file when the Tab command is used to tab to a tab stop.  If the character is a 0, the editor inserts an appropriate number of spaces, instead.\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:over strike mode}}}{\v\fs20 \par }{\fs20 6.\tab If the sixth character is a 0, the editor will start in over strike mode; if it is a 1, the editor starts in insert mode.  Using a separate flag for the text based editor (this one) and the desktop editor (see the fourth flag) lets you enter one mode in the desktop editor, and a different mode in the text based editor.\par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The third line of each set of lines in the SYSTABS file sets default tab stops.  There are 255 zeros and ones, representing the 255 character positions available on the edit line.  The ones indicate the positions of the tab stops.  A two in any column of this line sets the end of the line; if the characters extend past this marker, the line is wrapped.  The column containing the two then replaces the default end-of-line column (the default right margin) when the editor is set to that language.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 For example, the following lines define the defaults for ORCA Assembly Language:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 8\par }\pard \widctlpar\adjustright {\f6\fs14 100100\par 00000000100000001000000010000000100000001000000010000000000000001000000010000000100000001000000...\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The last line continues on for a total of 255 characters.\par If no defaults are specified for a language (that is, there are no lines in the SYSTABS file for that language), then the editor assumes the following defaults:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab }{\outl\fs18 RETURN}{\fs20  sends the cursor to column one.\par \bullet \tab Line-oriented selects.\par \bullet \tab Word wrapping starts in column 80.\par \bullet \tab There is a tab stop every eighth column.\par \bullet \tab The editor starts in over strike mode.\par \bullet \tab Tab characters are inserted to create tabbed text.\par }\pard \qj\fi-274\li533\widctlpar\tx533\tx2880\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Note that you can change tabs and editing modes while in the editor.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 10:  The Resource Compiler\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 10 - The Resource Compiler\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 10 \endash  The Resource Compiler\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter describes the use and operation of the resource compiler.  Key points covered in this chapter are:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 \bullet \tab Creation of resource description files (Rez source files).\par \bullet \tab Creating and using resource type statements.\par \bullet \tab Using Rez to compile a resource description file to create a resource fork.\par \bullet \tab Command, options, and capabilities of the resource compiler.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Overview}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Overview\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Resource Compiler compiles a text file (or files) called a resource description file and produces a resource file as output.  The resource decompiler, DeRez, decompiles an existing resource, producing a new resource description file that can be understood by the resource compiler.\par Resource description files have a language type of REZ.  By convention, the name of a resource description file ends with .rez.  The REZ shell command enables you to set the language type to the rez language.\par The resource compiler can combine resources or resource descriptions from a number of files into a single resource file.  The resource compiler supports preprocessor directives that allow you to substitute macros, include other files, and use if-then-else constructs.  (These are described under "Preprocessor Directives" later in this chapter.)\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Resource Decompiler}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Resource Decompiler\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }{\fs20 The DeRez utility creates a textual representation of a resource file based on resource type declarations identical to those used by the resource compiler.  (If you don't specify any type declarations, the output of DeRez takes the form of raw data statements.)  The output of DeRez is a resource description file that may be used as input to the resource compiler.  This file can be edited using the ORCA editor, allowing you to add comments, translate resource data to a foreign language, or specify conditional resource compilation by using the if-then-else structures of the preprocessor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Type Declaration Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Type Declaration Files\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler and DeRez automatically look in the 13:RInclude directory, as well as the current directory, for files that are specified by file name on the command line.  They also look in these directories for any files specified by a #include preprocessor directive in the resource description file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Using the Resource Compiler and DeRez}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Using the Resource Compiler and DeRez\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler and DeRez are primarily used to create and modify resource files.  The resource compiler can also form an integral part of the process of building a program.  For instance, when putting together a desk accessory or driver, you could use the resource compiler to combine the linker's output with other resources, creating an executable program file.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Structure of a Resource Description File}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Structure of a Resource Description File\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource description file}}}{\v\fs20 \par }{\fs20 The resource description file consists of resource type declarations (which can be included from another file) followed by resource data for the declared types.  Note that the resource compiler and resource decompiler have no built-in resource types.  You need to define your own types or include the appropriate .rez files.\par A resource description file may contain any number of these statements:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 include\tab Include resources from another file.\par read\tab Read the data fork of a file and include it as a resource.\par data\tab Specify raw data.\par type\tab Type declaration \endash  declare resource type descriptions for subsequent }{\i\fs20 resource}{\fs20  statements.\par resource\tab Data specification \endash  specify data for a resource type declared in previous }{\i\fs20 type}{\fs20  statements.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Each of these statements is described in the sections that follow.\par A type declaration provides the pattern for any associated resource data specifications by indicating data types, alignment, size and placement of strings, and so on.  You can intersperse type declarations and data in the resource description file so long as the declaration for a given resource precedes any resource statements that refer to it.  An error is returned if data (that is, a }{\i\fs20 resource}{\fs20  statement) is given for a type that has not been previously defined.  Whether a type was declared in a resource description file or in a #include file, you can redeclare it by providing a new declaration later in a resource description file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:comments}}}{\v\fs20 \par }{\fs20 A resource description file can also include comments and preprocessor directives.  Comments can be included any place white space is allowed in a resource description file by putting them within the comment delimiters /* and */.  Note that comments do not nest.  For example, this is one comment:\par \par }{\f6\fs18 /* Hello /* there */\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 The resource compiler also supports the use of // as a comment delimiter.  And characters that follow // are ignored, up to the end of the current line.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 type 0x8001 \{ // the rest of this line is ignored\par }{\fs20 \par Preprocessor directives substitute macro definitions and include files, and provide if-then-else processing before other resource compiling takes place.  The syntax of the preprocessor is very similar to that of the C-language preprocessor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Sample Resource Description File}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Sample Resource Description File\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An easy way to learn about the resource description format is to decompile some existing resources.  For example, the following command decompiles only the rIcon resources in an application called Sample, according to the declaration in 13:RInclude:Types.rez.\par \par }{\f6\fs18 derez sample -only 0x8001 types.rez >derez.out\par }{\fs20 \par Note that DeRez automatically finds the file types.rez in 13:RInclude.  After executing this command, the file derez.out would contain the following decompiled resource:\par \par }{\f6\fs18 resource 0x8001  (0x1)  \{\par       0x8000,\par       20,\par       28\par       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par       $"FFFF FF00 0000 0000 0000 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par       $"0000 0000 0000 0000 0000 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0000 0000 0000 0000 0000 0000 0000"\par \};\par }{\fs20 \par Note that this statement would be identical to the resource description in the original resource description file, with the possible exception of minor differences in formatting.  The resource data corresponds to the following type declaration, contained in types.rez:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs18 /*-------------------------- rIcon -----------------------*/\par type rIcon \{\par         hex integer;                /* Icon Type bit 15  1 = color, 0 = mono */\par image:\par }\pard \widctlpar\adjustright {\f6\fs18         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par         integer;                    /* height of icon in pixels */\par         integer;                    /* width of icon in pixels */\par         hex string [$$Word(image)]; /* icon image */\par mask:\par         hex string;                 /* icon mask */\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Type and resource statements are explained in detail in the reference section that follows.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Resource Description Statements}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Resource Description Statements\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section describes the syntax and use of the five types of resource description statements available for the resource compiler:  include, read, data, type and resource.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Syntax Notation}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Syntax Notation\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The syntax notation in this chapter follows the conventions used earlier in the book.  In addition, the following conventions are used:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Words that are part of the resource description language are shown in the Courier font to distinguish them from surrounding text.  The resource compiler is not sensitive to the case of these words.\par \par \bullet \tab Punctuation characters such as commas (,), semicolons (;), and quotation marks (' and ") are to be written as shown.  If one of the syntax notation characters (for example, [ or ]) must be written as a literal, it is shown enclosed by "curly" single quotation marks (\lquote ...\rquote ); for example,\par \par }{\f6\fs18 \tab bitstring}{\fs20  \lquote [\rquote  }{\i\fs20 length}{\fs20  \lquote ]\rquote \par \par \tab In this case, the brackets would be typed literally \endash  they do }{\i\fs20 not}{\fs20  mean that the enclosed element is optional.\par \par \bullet \tab Spaces between syntax elements, constants, and punctuation are optional they are shown for readability only.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Tokens in resource description statements may be separated by spaces, tabs, returns, or comments.\par There are three terms used in the syntax of the resource description language that have not been used earlier to describe the shell.  The are:\par \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\i\fs20 resource-ID}{\fs20 \tab A long expression.  (Expressions are defined later.)\par }{\i\fs20 resource-type}{\fs20 \tab A word expression.\par }{\i\fs20 ID-range}{\fs20 \tab A range of }{\i\fs20 resource-ID}{\fs20 s, as in }{\i\fs20 ID}{\fs20 [:}{\i\fs20 ID}{\fs20 ].\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Include \endash  Include Resources from Another File}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Include \endash  Include Resources from Another File\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource description file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:include statement}}}{\v\fs20 \par }{\fs20 The include statement lets you read resources from an existing file and include all or some of them.\par An }{\f6\fs18 include}{\fs20  statement can take the following forms:\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\fs20 \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20  [ }{\i\fs20 resource-type}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote }{\i\fs20 ID}{\fs20 [:}{\i\fs20 ID}{\fs20 ]\lquote }{\f6\fs18 )}{\fs20 \rquote ]]}{\f6\fs18 ;}{\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab Read the resource of type }{\i\fs20 resource-type}{\fs20  with the specified resource ID range in }{\i\fs20 file}{\fs20 .  If the resource ID is omitted, read all resources of the type }{\i\fs20 resource-type}{\fs20  in }{\i\fs20 file}{\fs20 .  If }{\i\fs20 resource-type}{\fs20  is omitted, read all the resources in }{\i\fs20 file}{\fs20 .\par \par \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20   }{\f6\fs18 not}{\fs20  }{\i\fs20 resource-type}{\fs20  }{\f6\fs18 ;}{\fs20 \par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab Read all resources in }{\i\fs20 file}{\fs20  that are not of the type }{\i\fs20 resource-type}{\fs20 .\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20  }{\i\fs20 resource-type1}{\fs20  }{\f6\fs18 as}{\fs20  }{\i\fs20 resource-type2}{\f6\fs18 ;}{\fs20 \par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab Read all resources of type }{\i\fs20 resource-type1}{\fs20  and include them as resources of }{\i\fs20 resource-type2}{\fs20 .\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20  }{\i\fs20 resource-type1}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote }{\i\fs20 ID}{\fs20 [:}{\i\fs20 ID}{\fs20 ]\lquote }{\f6\fs18 )}{\fs20 \rquote \par \tab \tab }{\f6\fs18 as}{\fs20  }{\i\fs20 resource-type2 }{\fs20 \lquote }{\f6\fs18 (}{\fs20 \rquote }{\i\fs20 ID}{\fs20 [}{\f6\fs18 ,}{\i\fs20 attributes...}{\fs20 ]\lquote }{\f6\fs18 )}{\fs20 \rquote }{\f6\fs18 ;}{\fs20 \par \par \tab Read the resource in }{\i\fs20 file}{\fs20  of type }{\i\fs20 resource-type1}{\fs20  with the specified ID range, and include it as a resource of }{\i\fs20 resource-type2}{\fs20  with the specified ID.  You can optionally specify resource attributes.  (See "Resource Attributes," later in this section.)\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Examples:\par \par }\pard \qj\fi720\widctlpar\tx3780\adjustright {\f6\fs18 include "otherfile";\tab /* include all resources from the file */\par include "otherfile" rIcon;\tab /* read only the rIcon resources */\par include "otherfile" rIcon (128);\tab /* read only rIcon resource 128 */\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 AS Resource Description Syntax\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The following string variables can be used in the as resource description to modify the resource information in }{\f6\fs18 include}{\fs20  statements:\par \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 $$Type}{\fs20 \tab Type of resource from include file.\par }{\f6\fs18 $$ID}{\fs20 \tab ID of resource from include file.\par }{\f6\fs18 $$Attributes}{\fs20 \tab Attributes of resource from include file.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par For example, to include all }{\f6\fs18 rIcon}{\fs20  resources from one file and keep the same information but also set the preload attribute (64 sets it):\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 INCLUDE "file" rIcon (0:40) AS rIcon ($$ID, $$Attributes | 64);\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The }{\f6\fs18 $$Type}{\fs20 , }{\f6\fs18 $$ID}{\fs20 , and }{\f6\fs18 $$Attributes}{\fs20  variables are also set and legal within a normal resource statement.  At any other time the values of these variables are undefined.\par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Resource Attributes\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource attributes}}}{\v\fs20 \par }{\fs20 You can specify attributes as a numeric expression (as described in the }{\i\fs20 Apple\~II}{\i\fs18 GS}{\i\fs20  Toolbox Reference}{\fs20 , Volume 3) or you can set them individually by specifying one of the keywords from any of the sets in Table 10.1.  You can specify more than one attribute by separating the keywords with a comma (,).\par \par }\pard \fi-3420\li3780\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1980\adjustright {\fs20 Default\tab Alternative\tab Meaning\par }\pard \fi-3420\li3780\keepn\widctlpar\tx1980\adjustright {\f6\fs18 unlocked}{\fs20 \tab }{\f6\fs18 locked}{\fs20 \tab Locked resources cannot be moved by the Memory Manager.\par }{\f6\fs18 moveable}{\fs20 \tab }{\f6\fs18 fixed}{\fs20 \tab Specifies whether the Memory Manager can move the block when it is unlocked.\par }{\f6\fs18 nonconvert}{\fs20 \tab }{\f6\fs18 convert}{\fs20 \tab Convert resources require a resource converter.\par }{\f6\fs18 handleload}{\fs20 \tab }{\f6\fs18 absoluteload}{\fs20 \tab Absolute forces the resource to be loaded at an absolute address.\par }{\f6\fs18 nonpurgeable}{\fs20 \tab }{\f6\fs18 purgeable1}{\fs20 \tab Purgeable resources can be automatically purged by \par \tab }{\f6\fs18 purgeable2}{\fs20 \tab the Memory Manager.  Purgeable3 are purged\par \tab }{\f6\fs18 purgeable3}{\fs20 \tab before purgeable2, which are purged before purgeable1.\par }{\f6\fs18 unprotected}{\fs20 \tab }{\f6\fs18 protected}{\fs20 \tab Protected resources cannot be modified by the Resource Manager.\par }{\f6\fs18 nonpreload}{\fs20 \tab }{\f6\fs18 preload}{\fs20 \tab Preloaded resources are placed in memory as soon as the Resource Manager opens the resource file.\par }{\f6\fs18 crossbank}{\fs20 \tab }{\f6\fs18 nocrossbank}{\fs20 \tab A crossbank resource can cross memory bank boundaries.  Only data, not code, can cross bank boundaries.\par }{\f6\fs18 specialmemory}{\fs20 \tab }{\f6\fs18 nospecialmemory}{\fs20 \tab A special memory resource can be loaded in banks $00, $01, $E0 and $E1.\par }{\f6\fs18 notpagealigned}{\fs20 \tab }{\f6\fs18 pagealigned}{\fs20 \tab A page-aligned resource must be loaded with a starting address that is an even multiple of 256.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Table 10.1  Resource Attribute Keywords\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Read \endash  Read Data as a Resource}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Read \endash  Read Data as a Resource\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 read}{\fs20  }{\i\fs20 resource-type}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 ,}{\fs20  }{\i\fs20 attributes}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  }{\i\fs20 file}{\fs20  }{\f6\fs18 ;}{\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:read statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\f6\fs18 read}{\fs20  statement lets you read a file's data fork as a resource.  It reads the data fork from }{\i\fs20 file}{\fs20  and writes it as a resource with the type }{\i\fs20 resource-type}{\fs20  and the resource ID }{\i\fs20 ID}{\fs20 , with the optional resource attributes.\par Example:\par \par }{\f6\fs18 read rText (0x1234, Purgeable3) "filename";\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Data \endash  Specify Raw Data}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Data \endash  Specify Raw Data\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 data}{\fs20  }{\i\fs20 resource-type}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 ,}{\fs20  }{\i\fs20 attributes}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote   \lquote }{\f6\fs18 \{}{\fs20 \rquote  \par \tab }{\i\fs20 data-string}{\fs20 \par \tab \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;}{\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:data statement}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use the }{\f6\fs18 data}{\fs20  statement to specify raw data as a sequence of bits, without any formatting.\par The data found in }{\i\fs20 data-string}{\fs20  is read and written as a resource with the type }{\i\fs20 resource-type}{\fs20  and the ID }{\i\fs20 ID}{\fs20 .  You can specify resource attributes.\par When DeRez generates a resource description, it used the data statement to represent any resource type that doesn't have a corresponding type declaration or cannot be decompiled for some other reason.\par Example:\par \par }{\f6\fs18 data rPString (0xABCD) \{\par \tab $"03414243"\par \tab \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Type \endash  Declare Resource Type}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Type \endash  Declare Resource Type\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 type}{\fs20  }{\i\fs20 resource-type}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID-range}{\fs20  \lquote }{\f6\fs18 )}{\fs20 \rquote  ]  \lquote }{\f6\fs18 \{}{\fs20 \rquote  \par \tab }{\i\fs20 type-specification...}{\fs20 \par \tab \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;}{\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:type statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource types}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources\:see Rez}{\txe }}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A type declaration provides a template that defines the structure of the resource date for a single resource type or for individual resources.  If more than one type declaration is given for a resource type the last one read before the data definition is the one that's used.  This lets you override declarations from include files of previous resource description files.\par After the type declaration, any resource statement for the type }{\i\fs20 resource-type}{\fs20  uses the declaration }{\f6\fs18 \{}{\i\fs20 type-specification...}{\f6\fs14 \}}{\fs20 .  The optional }{\i\fs20 ID-range}{\fs20  specification causes the declaration to apply only to a given resource ID or range of IDs.\par }{\i\fs20 Type-specification}{\fs20  is one or more of the following kinds of type specifier:\par \par }\pard \qj\fi360\widctlpar\tx1800\tx3240\tx4680\tx6120\adjustright {\f6\fs18 array\tab bitstring\tab boolean\tab byte\tab char\par cstring\tab fill\tab integer\tab longint\tab point\par pstring\tab rect\tab string\tab switch\tab wstring\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You can also declare a resource type that uses another resource's type declaration by using the following variant of the type statement:\par \par }{\f6\fs18 type}{\fs20  }{\i\fs20 resource-type1}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID-range}{\fs20  \lquote }{\f6\fs18 )}{\fs20 \rquote  ]  as }{\i\fs20 resource-type2}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID }{\fs20 \lquote }{\f6\fs18 )}{\fs20 \rquote  ] }{\f6\fs18 ;}{\fs20 \par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Integer, Longint, Byte and Bitstring\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 integer}{\fs20  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 longint}{\fs20  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 byte}{\fs20  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 bitstring}{\fs20  \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 ]}{\fs20 \rquote  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In each case, space is reserved in the resource for an integer or a long integer.\par If the type appears alone, with no other parameters, the resource compiler sets aside space for a value that must be given later when the resource type is used to define an actual resource.\par A type followed by a equal sign and an expression defines a value that will be preset to some specific integer.  Since the value is already given, you do not need to code the value again when the resource type is used to define a resource.\par A symbol-definition is an identifier, an equal sign, and an expression, optionally followed by a comma and another symbol definition.  It sets up predefined identifier that can be used to fill in the value.  You still have the option of coding a numeric value, or you can use one of the constants.  This is not a default value, though: you still must code either one of the constants or a numeric value when you use the resource type to define a resource.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\f6\fs18 unsigned}{\fs20  prefix signals DeRez that the number should be displayed without a sign \endash  that the high-order bit can be used for data and the value of the integer cannot be negative.  The }{\f6\fs18 unsigned}{\fs20  prefix is ignored by the resource compiler but is needed by DeRez to correctly represent a decompiled number.  The resource compiler uses a sign if it is specified in the data.  For example, $FFFFFF85 and -$7B are equivalent.\par Radix is one of the following constants:\par \par hex\tab decimal\tab octal\tab binary\tab literal\par \par }\pard \qj\widctlpar\adjustright {\fs20 The radix is used by DeRez to decide what number format to use for the output.  The radix field is ignored by the resource compiler.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each of the numeric types generates a different format of integer.  In each case, the value is in two's complement form, least significant byte first.  The various formats are:\par \par }\pard \qj\li720\ri1980\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\tx3680\adjustright {\fs20 type\tab size\tab range\par }\pard \qj\li720\keepn\widctlpar\tx2520\tx3680\adjustright {\fs20 byte\tab 1\tab -128..255\par integer\tab 2\tab -32768..65535\par longint\tab 4\tab -2147483648..4294967295\par }\pard \qj\li720\widctlpar\tx2520\tx3680\adjustright {\fs20 bitstring[length]\tab varies\tab varies\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Sizes are in bytes.  The range may seem a little odd at first; the resource compiler accepts either negative or positive values, treating positive values that would normally be too large for a signed value of the given length as if the value were unsigned.\par The bitstring type is different from most types in other languages.  It is a variable-length integer field, where you specify the number of bits you want as the length field.  If you specify a value that only fills part of a byte, then the next field will pick up where the bitstring field stopped.  For example, two bitstring[4] values, placed back to back, would require only one byte of storage in the resource file.  In general, you should be sure that bitstring fields end on even byte values so the following fields don't get bit aligned to the end of the partially filled byte.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \widctlpar\adjustright {\f6\fs18 /*---------------------- rToolStartup ---------------------*/\par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rToolStartup \{\par     integer = 0;                        /* flags must be zero */\par }\pard \li360\widctlpar\outlinelevel0\adjustright {\f6\fs18     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par }\pard \li360\widctlpar\adjustright {\f6\fs18     Integer = 0;\par     Longint = 0;\par     integer = $$Countof(TOOLRECS);      /* number of tools */\par         array TOOLRECS \{\par             Integer;                    /* ToolNumber */\par             Integer;                    /* version */\par         \};\par \};\par \par \par resource rToolStartup (1) \{\par     mode640,\par     \{\par         1,1,\tab /* Tool Locator */\par         2,1,\tab /* Memory Manager */\par         3,1,\tab /* Miscellaneous Tool Set */\par         4,1,\tab /* QuickDraw II */\par         5,1,\tab /* Desk Manager */\par         6,1,\tab /* Event Manager */\par         11,1,\tab /* Integer Math Tool Set */\par         14,1,\tab /* Window Manager */\par         15,1,\tab /* Menu Manager */\par         16,1,\tab /* Control Manager */\par         18,1,\tab /* QuickDraw II Auxiliary */\par         20,1,\tab /* LineEdit Tool Set */\par         21,1,\tab /* Dialog Manager */\par         22,1,\tab /* Scrap Manager */\par         27,1,\tab /* Font Manager */\par         28,1,\tab /* List Manager */\par         30,1,\tab /* Resource Manager */\par     \}\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Boolean\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 boolean}{\fs20  [ = }{\i\fs20 constant}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A boolean value is a one-bit value, set to either false (0) or true (1).  You can also use the numeric values.\par True and false are actually predefined constants.\par The type boolean is equivalent to\par \par }{\f6\fs18 unsigned bitstring[1]\par }{\fs20 \par Example:\par \par }{\f6\fs18 type 0x001 \{\par    boolean;\par    boolean;\par    boolean;\par    boolean;\par    bitstring[4] = 0;\par    \};\par \par resource 0x001 (1) \{\par    true, false, 0, 1\par    \};\par }{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Character\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 char}{\fs20  [ = }{\i\fs20 string}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A character value is an 8-bit value which holds a one-character string.  It is equivalent to }{\f6\fs18 string[1]}{\fs20 .\par \par Example:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 /*------------------------ rMenuItem ------------------------------*/\par type rMenuItem \{\par     integer = 0;                    /* version must be zero */\par     integer;                        /* item ID */\par     char;                           /* item char */\par     char;                           /* alt char */\par     integer;                        /* item check */\par     integer;                        /* flags */\par     longint;                        /* item titleref */\par \};\par \par resource rMenuItem (1) \{\par     256,\par     "Q","q",\par     0,\par     0,\par     1\par     \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 String, PString, WString and CString\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\i\fs20 string-type}{\fs20  [ \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 ]}{\fs20 \rquote  ] [ }{\f6\fs18 =}{\fs20  }{\i\fs20 string}{\fs20  | }{\i\fs20 symbol-value...}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:strings}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 String types are used to define a string in one of four formats.  The format of the string is determined by selecting one of the following for }{\i\fs20 string-type}{\fs20 :\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 [}{\f6\fs18 hex}{\fs20 ] }{\f6\fs18 string}{\fs20 \tab Plain string; no length indicator or terminal character is generated.  The optional }{\f6\fs18 hex}{\fs20  prefix tells DeRez to display it as a hexadecimal string.  }{\f6\fs18 String[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains n characters and is }{\i\fs20 n}{\fs20  bytes long.  The type }{\f6\fs18 char}{\fs20  is a shorthand for }{\f6\fs18 string[1]}{\fs20 .\par }{\f6\fs18 pstring}{\fs20 \tab Pascal string; a leading byte containing the number of characters in the string is generated.  }{\f6\fs18 Pstring[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains }{\i\fs20 n}{\fs20  characters and is }{\i\fs20 n}{\fs20 +1 bytes long.  Since the length must fit in a byte value, the maximum length of a pstring is 255 characters.  If the string is too long, a warning is given and the string is truncated.\par }{\f6\fs18 wstring}{\fs20 \tab Word string; this is a very large pstring.  The length of a wstring is stored in a two-byte field, giving a maximum length of 65535 characters.  }{\f6\fs18 Pstring[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains }{\i\fs20 n}{\fs20  characters and is }{\i\fs20 n}{\fs20 +2 bytes long.  The order of the bytes in the length word is least significant byte first; this is the normal order for bytes on the Apple\~II}{\fs18 GS}{\fs20 .\par }{\f6\fs18 cstring}{\fs20 \tab C string; a trailing null byte is added to the end of the characters.  }{\f6\fs18 Cstring[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains }{\i\fs20 n}{\fs20 -1 characters and is }{\i\fs20 n}{\fs20  bytes long.  A C string of length 1 can be assigned only the value "", since }{\f6\fs18 cstring[1]}{\fs20  only has room for the terminating null.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Each string type can be followed by an optional }{\i\fs20 length}{\fs20  indicator in brackets.  }{\i\fs20 length}{\fs20  is an expression indicating the string length in bytes.  }{\i\fs20 length}{\fs20  is a positive number in the range 1..2147483647 for string and cstring, in the range 1..255 for pstring, and in the range 1..65535 for wstring.\par If no length indicator is given, a pstring, wstring or cstring stores the number of characters in the corresponding data definition.  If a length indicator is given, the data may be truncated on the right or padded on the right.  The padding characters for all strings are nulls.  If the data contains more characters than the length indicator provides for, the string is truncated and a warning message is given.\par \par Examples:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 /*---------------------- rPString ----------------------*/\par type rPString \{\par         pstring;                    /* String */\par \};\par \par /*---------------------- rCString ----------------------*/\par type rCString \{\par         cstring;                    /* String */\par \};\par \par /*---------------------- rWString ----------------------*/\par type rWString \{\par         wstring;                    /* String */\par \};\par \par /*------------------------ rErrorString ----------------*/\par type rErrorString \{\par         string;\par \};\par \par resource rPString (1) \{\par }\pard \li360\widctlpar\outlinelevel0\adjustright {\f6\fs18     "p-string",\par }\pard \li360\widctlpar\adjustright {\f6\fs18     \};\par \par resource rCString (1) \{\par }\pard \li360\widctlpar\outlinelevel0\adjustright {\f6\fs18     "c-string",\par }\pard \li360\widctlpar\adjustright {\f6\fs18     \};\par \par resource rWString (1) \{\par     "GS/OS input string",\par     \};\par \par resource rErrorString (1) \{\par     "Oops",\par     \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Point and Rectangle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 point}{\fs20  [ }{\f6\fs18 =}{\fs20  }{\i\fs20 point-constant}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par rect}{\fs20  [ }{\f6\fs18 =}{\fs20  }{\i\fs20 rect-constant}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Because points and rectangles appear so frequently in resource files, they have their own simplified syntax.  In the syntax shown, a point-constant is defined like this:\par \par \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 x-integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 y-integer-expression}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote \par \par }\pard \qj\widctlpar\adjustright {\fs20 while a rect-constant looks like this:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote \par \par A point type creates a pair of integer values, with the first value corresponding to the horizontal point value and the second to the vertical point value.  A rect type is a pair of points, with the top left corner of the rectangle specified first, followed by the bottom right corner.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \widctlpar\adjustright {\f6\fs18 /*--------------------- rWindParam1 --------------------*/\par type rWindParam1 \{\par         integer = $50;              /*length of parameter list, should be $50*/\par         integer;                    /* wFrameBits */\par         longint;                    /* wTitle */\par         longint;                    /* wRefCon */\par         rect;                       /* ZoomRect */\par         longint;                    /* wColor ID */\par         point;                      /* Origin */\par         point;                      /* data size */\par         point;                      /* max height-width */\par         point;                      /* scroll ver hors */\par         point;                      /* page vers horiz */\par         longint;                    /* winfoRefcon */\par         integer;                    /* wInfoHeight */\par         fill long[3];               /* wFrameDefProc,wInfoDefProc,wContDefProc */\par         rect;                       /* wposition */\par         longint behind=0,infront=-1;/* wPlane */\par         longint;                    /* wStorage */\par         integer;                    /* wInVerb */\par \};\par \par resource rWindParam1 (1) \{\par         0x80E4,                     /* wFrameBits */\par         1,                          /* wTitle */\par         0,                          /* wRefCon */\par         \{0,0,0,0\},                  /* ZoomRect */\par         0,                          /* wColor ID */\par         \{0,0\},                      /* Origin */\par         \{416,160\},                  /* data size */\par         \{416,160\},                  /* max height-width */\par         \{0,0\},                      /* scroll ver hors */\par         \{0,0\},                      /* page vers horiz */\par         0,                          /* winfoRefcon */\par         0,                          /* wInfoHeight */\par         \{32,32,448,192\},            /* wposition */\par         infront,                    /* wPlane */\par         0,                          /* wStorage */\par         0x0200                      /* wInVerb */\par         \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Fill\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 fill}{\fs20  }{\i\fs20 fill-size}{\fs20  [ \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 [}{\fs20 \rquote  ] }{\f6\fs18 ;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource created by a resource definition has no implicit alignment.  It's treated as a bit stream, and integers and strings can start at any bit.  The fill specifier is a way of padding fields so that they begin on a boundary that corresponds to the field type.\par The fill statement causes the resource compiler to add the specified number of bits to the data stream.  The bits added are always set to 0.  }{\i\fs20 fill-size}{\fs20  is one of the following:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx1800\tx2520\tx3240\adjustright {\f6\fs18 bit\tab nibble\tab byte\tab word\tab long\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par These declare a fill of 1, 4, 8, 16 or 32 bits, respectively.  Any of these can be followed by a }{\i\fs20 length}{\fs20  modifier.  }{\i\fs20 length}{\fs20  can be any value up to 2147483647; it specifies the number of these bit fields to insert.  For example, all of the following are equivalent:\par \par }{\f6\fs18 fill word[2];\par fill long;\par fill bit[32];\par }{\fs20 \par Fill statements are sometimes used as place holders, filling in constant values of zero.  You can see an example of the fill statement used for this purpose in the rWindParam1 resource type defined in types.rez.  The example in the last section shows this resource type in use.\par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Array\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par [ }{\f6\fs18 wide}{\fs20  ] }{\f6\fs18 array}{\fs20  [ }{\i\fs20 array-name}{\fs20  | \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 ]}{\fs20 \rquote  ] \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 array-list}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:arrays}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\i\fs20 array-list}{\fs20  is a list of type specifications.  It can be repeated zero or more times.  The }{\f6\fs18 wide}{\fs20  option outputs the array data in a wide display format when the resource is decompiled with DeRez; this causes the elements that make up the }{\i\fs20 array-list}{\fs20  to be separated by a comma and space instead of a comma, return, and tab.\par Either }{\i\fs20 array-name}{\fs20  or [}{\i\fs20 length}{\fs20 ] may be specified.  }{\i\fs20 Array-name}{\fs20  is an identifier.  If the array is named, then a preceding statement should refer to that array in a constant expression with the }{\f6\fs18 $$countof(}{\i\fs20 array-name}{\f6\fs18 )}{\fs20  function, otherwise DeRez will treat the array as an open-ended array.  For example,\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rToolStartup \{\par     integer = 0;                        /* flags must be zero */\par }\pard \li360\widctlpar\outlinelevel0\adjustright {\f6\fs18     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par }\pard \li360\widctlpar\adjustright {\f6\fs18     Integer = 0;\par     Longint = 0;\par     integer = $$Countof(TOOLRECS);      /* number of tools */\par         array TOOLRECS \{\par             Integer;                    /* ToolNumber */\par             Integer;                    /* version */\par         \};\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The }{\f6\fs18 $$countof(}{\i\fs20 array-name}{\f6\fs18 )}{\fs20  function returns the number of array elements ( in this case, the number of tool number, version pairs) from the resource data.\par If length is specified, there must be exactly }{\i\fs20 length}{\fs20  elements.\par Array elements are generated by commas.  Commas are element separators.  Semicolons are element terminators.\par For an example of an rToolStartup resource, see "Integer, Longint, Byte and Bitstream," earlier in this chapter.\par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Switch\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 switch}{\fs20  \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 case-statement...}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:switch statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The switch statement lets you select one of a variety of types when you create your resource.  Each of the types within the switch statement are placed on a case label, which has this format:\par \par }{\f6\fs18 case}{\fs20  }{\i\fs20 case-name}{\fs20  }{\f6\fs18 :}{\fs20  }{\i\fs20 [case-body}{\fs20  }{\f6\fs18 ;}{\fs20  ] ...\par \par }{\i\fs20 Case-name}{\fs20  is an identifier.  }{\i\fs20 Case-body}{\fs20  may contain any number of type specifications and must include a single constant declaration per case, in this form:\par \par }{\f6\fs18 key}{\fs20  }{\i\fs20 data-type}{\fs20  }{\f6\fs18 =}{\fs20  }{\i\fs20 constant}{\fs20 \par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The key value determines which case applies.  For example,\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs18 /*------------------------ rControlTemplate ------------------------*/\par type rControlTemplate \{\par         integer = 3+$$optionalcount (Fields); /* pCount must be at least 6 */\par         longint;                                 /* Application defined ID */\par         rect;                               /* controls bounding rectangle */\par         switch \{\par         \par         case SimpleButtonControl:\par             key longint = 0x80000000;   /* procRef */\par             optional Fields \{\par                 integer;                    /* flags */\par                 integer;                    /* more flags */\par                 longint;                    /* refcon */\par                 longint;                    /* Title Ref */\par                 longint;                    /* color table ref */\par                 KeyEquiv;\par             \};\par \par         case CheckControl:\par             key longint = 0x82000000;       /* procRef */\par             optional Fields \{\par                 integer;                    /* flags */\par                 integer;                    /* more flags */\par                 longint;                    /* refcon */\par                 longint;                    /* Title Ref */\par                 integer;                    /* initial value */\par                 longint;                    /* color table ref */\par                 KeyEquiv;\par             \};\par }{\i\f6\fs18         ...and so on.\par }{\f6\fs18     \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Symbol Definitions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Symbol Definitions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:symbols}}}{\v\fs20 \par }\pard\plain \s38\qj\fi360\widctlpar\adjustright \f12\cgrid {\f4\fs20 Symbolic names for data type fields simplify the reading and writing of resource definitions.  Symbol definitions have the form\par \par }\pard\plain \qj\fi360\widctlpar\tx500\tx1280\tx1660\adjustright \f4\cgrid {\i\fs20 name}{\fs20  = }{\i\fs20 value }{\fs20  [, }{\i\fs20 name}{\fs20  = }{\i\fs20 value }{\fs20  ]\u8230\'c9\par }\pard\plain \s38\qj\fi360\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par The \ldblquote = }{\i\f4\fs20 value }{\f4\fs20 \rdblquote  part of the statement can be omitted for numeric data.  If a sequence of values consists of consecutive numbers, the explicit assignment can be left out; if }{\i\f4\fs20 value}{\f4\fs20  is omitted,}{\i\f4\fs20  }{\f4\fs20 it is assumed to be 1 greater than the previous value.  (The value is assumed to be 0 if it is the first value in the list.)  This is true for bitstrings (and their derivatives, byte, integer, and longint). For example,\par \par }\pard\plain \s39\li360\widctlpar\adjustright \f6\fs20\cgrid {\fs18 integer Emily, Kelly, Taylor, Evan, Trevor, Sparkle=8;\par }\pard\plain \s38\qj\fi360\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par In this example, the symbolic names Emily, Kelly, Taylor, Evan, and Trevor are automatically assigned the numeric values 0, 1, 2, 3, and 4.\par Memory is the only limit to the number of symbolic values that can be declared for a single field.  There is also no limit to the number of names you can assign to a given value; for example,\par \par }\pard\plain \s39\qj\fi360\keepn\widctlpar\adjustright \f6\fs20\cgrid {\fs18 integer\tab Emily=0, Kelly=1, Taylor=2, Evan=3,\par \tab \tab Trevor=16, Sparkle=0, Twinkle=1, Raphael=2,\par }\pard \s39\qj\fi360\widctlpar\adjustright {\fs18 \tab \tab Michaelangelo=3, Nagel=16;\par }\pard\plain \qj\widctlpar\adjustright \f4\cgrid {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Delete \endash  Delete a Resource}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete \endash  Delete a Resource\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 delete }{\i\fs20 resource-type}{\f6\fs18  }{\fs20 [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 :}{\fs20  }{\i\fs20 ID}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  ] }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:delete statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This statement deletes the resource of resource-type with the specified ID or ID range from the resource compiler output file.  If ID or ID range is omitted, all resources of }{\i\fs20 resource-type}{\fs20  are deleted.\par The delete function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to delete a resource while creating a new resource file from scratch.) \par You can delete resources that have their protected bit set only if you use the \endash ov option on the resource compiler command line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Change \endash  Change a Resource's Vital Information}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Change \endash  Change a Resource's Vital Information\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\f6\fs18 change}{\fs20  }{\i\fs20 resource-type1}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 :}{\fs20  }{\i\fs20 ID}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  ]\par \tab }{\i\fs20 resource-type2}{\fs20  \lquote (\rquote  }{\i\fs20 ID}{\fs20  [ , }{\i\fs20 attributes... }{\fs20 ] \lquote }{\f6\fs18 )}{\fs20 \rquote  }{\f6\fs18 ;}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:change statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This statement changes the resource of }{\i\fs20 resource-type1}{\fs20  with the specified ID or ID range in the resource compiler output file to a resource of }{\i\fs20 resource-type2}{\fs20  and the specified ID.  If ID or ID range is omitted, all resources of }{\i\fs20 resource-type1}{\fs20  are changed.\par The change function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to change resources while creating a new resource file from scratch.) \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Resource \endash  Specify Resource Data}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Resource \endash  Specify Resource Data\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 resource}{\fs20   }{\i\fs20 resource-type}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ , }{\i\fs20 attributes}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  \lquote }{\f6\fs18 \{}{\fs20 \rquote \par \tab [ }{\i\fs20 data-statement}{\fs20   [ , }{\i\fs20 data-statement}{\fs20   ]\u8230\'c9 ]\par \tab \lquote }{\f6\fs18 \}}{\fs20 \rquote ;\par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Resource statements specify actual resources, based on previous type declarations.\par This statement specifies the data for a resource of type }{\i\fs20 resource-type}{\fs20  and ID }{\i\fs20 ID}{\fs20 .  The latest type declaration declared for resource-type is used to parse the data specification.\par Data statements specify the actual data; data-statements appropriate to each resource type are defined in the next section.\par The resource definition generates an actual resource.  A resource statement can appear anywhere in the resource description file, or even in a separate file specified on the command line or as an #include file, as long as it comes after the relevant type declaration.\par For examples of resource statements, see the examples following the various data statement types, earlier in this chapter.\par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Data Statements\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The body of the data specification contains one data statement for each declaration in the corresponding type declaration.  The base type must match the declaration.\par \par }\pard \qj\li720\ri2520\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 Base type\tab Instance types\par }\pard \qj\li720\widctlpar\tx2160\adjustright {\fs20 string\tab string, cstring, pstring, wstring, char\par bitstring\tab boolean, byte, integer, longint, bitstring\par rect\tab rect\par point\tab point\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Switch data\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:switch statement}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Switch data statements are specified by using this format:\par \par }{\i\fs20 switch-name  data-body\par }{\fs20 \par For example, the following could be specified for the rControlTemplate type used in an earlier example:\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 CheckControl \{ enabled, "Check here" \},\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Array data\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:arrays}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Array data statements have this format:\par \par \lquote }{\f6\fs18 \{}{\fs20 \rquote  [ }{\i\fs20 array-element}{\fs20  [ , }{\i\fs20 array-element}{\fs20  ]\u8230\'c9 ] \lquote }{\f6\fs18 \}}{\fs20 \rquote \par \par }\pard \qj\widctlpar\adjustright {\fs20 where an }{\i\fs20 array-element}{\fs20  consists of any number of data statements separated by commas.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For example, the following data might be given for the rStringList resource (the type is shown so you won't have to refer to types.rez, where it is defined):\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rStringList \{\par         integer = $$Countof(StringArray);\par         array StringArray \{\par                 pstring;            /* String           */\par         \};\par \};\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 resource rStringList (280) \{\par     \{\par         "this",\par         "is",\par         "a",\par         "test"\par     \}\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Sample resource definition\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section describes a sample resource description file for an icon. (See the Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference, Volume 3 for information about resource icons.)  The type statement is included for clarity, but would normally be included using an include statement.\par \par }{\f6\fs18 type rIcon \{\par         hex integer;            /* icon type bit 15  1 = color, \par                                    0 = mono */\par image:\par         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par         integer;                    /* height of icon in pixels */\par         integer;                    /* width of icon in pixels */\par         hex string [$$Word(image)]; /* icon image */\par mask:\par         hex string;                 /* icon mask */\par \};\par \par resource rIcon (1) \{\par         0x8000,                                /* Kind */\par         9,                                     /* Height */\par         32                                     /* Width */\par         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par         $"FFFFFF00000000000000FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00000000000000FFFFFFFFFFFF"\par         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par         $"00000000000000000000000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000000000000000000000000000000"\par \};\par }{\fs20 \par This data definition declares a resource of type rIcon, using whatever type declaration was previously specified for rIcon.  The 8 in the resource type specification (0x8000) identifies this as a color icon.  \par The icon is 9 pixels high by 32 pixels wide.\par The specification of the icon includes a pixel image and a pixel mask.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Labels}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Labels\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Labels support the more complicated resources.  Use labels within a resource type declaration to calculate offsets and permit accessing of data at the labels.  The rIcon resource, for example, uses labels to specify the pixel image and mask of the icon.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 The syntax for a label is:\par \par }\pard \qj\fi360\keepn\widctlpar\tx2160\adjustright {\f6\fs18 label ::=\tab character \{alphanum\}* ':'\par character ::=\tab '_' | A | B | C \u8230\'c9\par alphanum ::=\tab character | number \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 number ::=\tab 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Labeled statements are valid only within a resource type declaration.  Labels are local to each type declaration.  More than one label can appear on a statement.\par Labels may be used in expressions.  In expressions, use only the identifier portion of the label (that is, everything up to, but excluding, the colon).  See \ldblquote Declaring Labels Within Arrays\rdblquote  later in this chapter for more information.\par The value of a label is always the offset, in bits, between the beginning of the resource and the position where the label occurs when mapped to the resource data.  In this example,\par \par }{\f6\fs18 type 0xCCCC \{\par     cstring;\par endOfString:\par     integer = endOfString;\par \};\par \par resource 0xCCCC (8) \{\par   "Neato"\par \}\par }\pard \qj\widctlpar\adjustright {\fs20 \par the integer following the cstring would contain:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 ( len("Neato") [5] + null byte [1] ) * 8 [bits per byte] = 48.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Built-in Functions to Access Resource Data}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Built-in Functions to Access Resource Data\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:built-in functions}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In some cases, it is desirable to access the actual resource data to which a label points.  Several built-in functions allow access to that data:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab }{\f6\fs18 $$BitField (label, startingPosition, numberOfBits)}{\fs20 \par \par \tab Returns the }{\i\fs20 numberOfBits}{\fs20  (maximum of 32) bitstring found }{\i\fs20 startingPosition}{\fs20  bits from }{\i\fs20 label}{\fs20 .\par \par \bullet \tab }{\f6\fs18 $$Byte (label)}{\fs20 \par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab Returns the byte found at }{\i\fs20 label}{\fs20 .\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab }{\f6\fs18 $$Word (label)}{\fs20 \par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab Returns the word found at }{\i\fs20 label}{\fs20 .\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab }{\f6\fs18 $$Long (label)}{\fs20 \par \par }\pard \qj\fi-360\li720\widctlpar\outlinelevel0\adjustright {\fs20 \tab Returns the long word found at }{\i\fs20 label}{\fs20 .\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par For example, the resource type rPString could be redefined without using a pstring.  Here is the definition of rPString from Types.rez:\par \par }{\f6\fs18 type rPString \{\par     pstring;\par \};\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Here is a redefinition of rPString using labels:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 type rPString \{\par len:  byte = (stop - len) / 8 - 1;\par       string[$$Byte(len)];\par stop: ;\par \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Declaring Labels Within Arrays}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Declaring Labels Within Arrays\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:arrays}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Labels declared within arrays may have many values.  For every element in the array there is a corresponding value for each label defined within the array.  Use array subscripts to access the individual values of these labels.  The subscript values range from 1 to n where n is the number of elements in the array.  Labels within arrays that are nested in other arrays require multidimensional subscripts.  Each level of nesting adds another subscript.  The rightmost subscript varies most quickly.  Here is an example:\par \par }{\f6\fs18 type 0xFF01 \{\par \tab integer = $$CountOf(array1);\par \tab array array1 \{\par \tab \tab integer = $$CountOf(array2);\par \tab \tab array array2 \{\par foo:\tab \tab \tab integer;\par \tab \tab \};\par \tab \};\par \};\par resource 0xFF01 (128) \{\par \tab \{\par \tab \tab \{1,2,3\},\par \tab \tab \{4,5\}\par \tab \}\par \};\par }{\fs20 \par In the example just given, the label foo takes on these values:\par \par }\pard \qj\fi360\widctlpar\tx2520\adjustright {\f6\fs18 foo[1,1] = 32\tab $$Word(foo[1,1]) = 1\par foo[1,2] = 48\tab $$Word(foo[1,2]) = 2\par foo[1,3] = 64\tab $$Word(foo[1,3]) = 3\par foo[2,1] = 96\tab $$Word(foo[2,1]) = 4\par foo[2,2] = 112\tab $$Word(foo[2,2]) = 5\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Another built-in function may be helpful in using labels within arrays:\par \par }{\f6\fs18 $$ArrayIndex(}{\i\fs20 arrayname}{\f6\fs18 )\par }{\fs20 \par This function returns the current array index of the array }{\i\fs20 arrayname}{\fs20 .  An error occurs if this function is used anywhere outside the scope of the array }{\i\fs20 arrayname}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Label Limitations}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Label Limitations\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Keep in mind the fact that the resource compiler and DeRez are basically one-pass compilers.  This will help you understand some of the limitations of labels.\par To decompile a given type, that type must not contain any expressions with more than one undefined label.  An undefined label is a label that occurs lexically after the expression.  To define a label, use it in an expression before the label is defined.\par This example demonstrates how expressions can have only one undefined label:\par \par }{\f6\fs18 type 0xFF01 \{\par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 \tab /* In the expression below, start is defined, next is undefined. */\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 start:\tab integer = next - start;\tab \par \tab /* In the expression below, next is defined because it was used\par \tab    in a previous expression, but final is undefined. */\par middle:\tab integer = final - next;\par next:\tab integer;\par final:\par \};\par }{\fs20 \par Actually, the resource compiler can compile types that have expressions containing more than one undefined label, but the DeRez cannot decompile those resources and simply generates data resource statements.\par The label specified in }{\f6\fs18 $$BitField()}{\fs20 , }{\f6\fs18 $$Byte()}{\fs20 , }{\f6\fs18 $$Word()}{\fs20 , and }{\f6\fs18 $$Long()}{\fs20  must occur lexically before the expression; otherwise, an error is generated.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b An Example Using Labels}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v An Example Using Labels\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the following example, the definition for the rIcon resource uses the labels image and mask.\par \par }{\f6\fs18 \tab type rIcon \{\par \tab      hex integer;      /* Icon Type bit 15  1 = color, 0 = mono */\par \tab image:\par \tab      integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par \tab      integer;                    /* height of icon in pixels */\par \tab      integer;                    /* width of icon in pixels */\par \tab      hex string [$$Word(image)]; /* icon image */\par \tab mask:\par \tab      hex string;                 /* icon mask */\par \tab \};\par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 In the data corresponding to that definition, pixel images are provided for the image and mask.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 resource rIcon (1) \{\par \tab \tab 0x8000,\tab \tab \tab \tab /* Kind */\par \tab \tab 9,\tab \tab \tab \tab \tab /* Height */\par \tab \tab 32\tab \tab \tab \tab \tab /* Width */\par \tab \tab $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \tab \tab $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par \tab \tab $"00000000000000000000000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000000000000000000000000000000"\par \};\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Preprocessor Directives}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Preprocessor Directives\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Preprocessor directives substitute macro definitions and include files and provide if-then-else processing before other resource compiler processing takes place.\par The syntax of the preprocessor is very similar to that of the C-language preprocessor.  Preprocessor directives must observe these rules and restrictions:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Each preprocessor statement must begin on a new line, be expressed on a single line, and be terminated by a return character.\par \bullet \tab The pound sign (#) must be the first character on the line of a preprocessor statement (except for spaces and tabs).\par \bullet \tab Identifiers (used in macro names) may be letters (A\endash Z, a\endash z), digits (0\endash 9), or the underscore character ( _ ).\par \bullet \tab Identifiers may be any length.\par \bullet \tab Identifiers may not start with a digit.\par \bullet \tab Identifiers are not case sensitive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Variable Definitions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Variable Definitions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:define statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:undef statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:macros}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The #define and #undef directives let you assign values to identifiers:\par \par }{\f6\fs18 #define }{\i\fs20 macro data}{\f6\fs18 \par #undef }{\i\fs20 macro}{\f6\fs18 \par }{\fs20 \par The #define directive causes any occurrence of the identifier }{\i\fs20 macro}{\fs20  to be replaced with the text }{\i\fs20 data}{\fs20 .  You can extend a macro over several lines by ending the line with the backslash character (\\), which functions as the resource compiler\rquote s escape character.  Here is an example:\par \par }{\f6\fs18 #define poem "I wander \\\par thro\\' each \\\par charter\\'d street"\par }{\fs20 \par Quotation marks within strings must also be escaped.  See "Escape Characters: later in this chapter for more information about escape characters.\par The #undef directive removes the previously defined identifier macro.  Macro definitions can also be removed with the \endash undef option on the resource compiler command line.\par The following predefined macros are provided:\par \par }\pard \qj\li360\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\adjustright {\fs20 Variable\tab Value\par }\pard \qj\li360\widctlpar\tx1440\adjustright {\fs20 true\tab 1\par false\tab 0\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\li360\widctlpar\tx1440\adjustright {\fs20 rez\tab 1 or 0 (1 if the resource compiler is running, 0 if DeRez is running)\par derez\tab 1 or 0 (0 if the resource compiler is running, 1 if DeRez is running)\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b If-Then-Else Processing}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v If-Then-Else Processing\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:conditional compilation}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:if statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 These directives provide conditional processing:\par \par }{\f6\fs18 #if }{\i\fs20 expression}{\f6\fs18 \par }{\fs20 [ }{\f6\fs18 #elif }{\i\fs20 expression }{\fs20  ]}{\f6\fs18 \par }{\fs20 [ }{\f6\fs18 #else}{\fs20  ]}{\f6\fs18 \par #endif\par }{\fs20 \par }{\i\fs20 Expression}{\fs20  is defined later in this chapter.\par When used with the #if and #elif directives, }{\i\fs20 expression}{\fs20  may also include one of these terms:\par \par }{\f6\fs18 defined}{\fs20  }{\i\fs20 identifier}{\fs20 \par }{\f6\fs18 defined}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 identifier}{\fs20  \lquote }{\f6\fs18 )}{\fs20 \rquote \par \par The following may also be used in place of #if:\par \par }{\f6\fs18 #ifdef}{\fs20  }{\i\fs20 macro}{\fs20 \par }{\f6\fs18 #ifndef}{\fs20  }{\i\fs20 macro}{\fs20 \par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 For example,\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 #define Thai\par Resource  rPstring  (199)  \{\par #ifdef English\par \tab "Hello"\par #elif defined (French)\par \tab "Bonjour"\par #elif defined (Thai)\par \tab "Sawati"\par #elif defined (Japanese)\par \tab "Konnichiwa"\par #endif\par \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Printf Directive}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Printf Directive\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:printf statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The #printf directive is provided to aid in debugging resource description files.  It has the form\par \par }{\f6\fs18 #printf(}{\i\fs20 formatString}{\f6\fs18 , }{\i\fs20 arguments\u8230\'c9}{\f6\fs18 )\par }{\fs20 \par The format of the #printf statement is exactly the same as that of the printf statement in the C language, with one exception: There can be no more than 20 arguments.  This is the same restriction that applies to the }{\f6\fs18 $$format}{\fs20  function.  The #printf directive writes its output to diagnostic output.  Note that the #printf directive does not end with a semicolon.\par Here\rquote s an example:\par \par }{\f6\fs18 #define\tab \tab Tuesday\tab \tab 3\par #ifdef Monday\par #printf("The day is Monday, day #%d\\n", Monday)\par #elif defined(Tuesday)\par #printf("The day is Tuesday, day #%d\\n", Tuesday)\par #elif defined(Wednesday)\par #printf("The day is Wednesday, day #%d\\n", Wednesday)\par #elif defined(Thursday)\par #printf("The day is Thursday, day #%d\\n", Thursday)\par #else\par #printf("DON'T KNOW WHAT DAY IT IS!\\n")\par #endif\par }{\fs20 \par The file just listed generates this text:\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 The day is Tuesday, day #3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\i\fs20 Formatstring}{\fs20  is a text string which is written more or less as is to error out.  There are two cases when the string is not written exactly as typed: escape characters and conversion specifiers.\par Escape sequences are used to encode characters that would not normally be allowed in a string.  The examples show the most commonly used escape sequence, \\n.  The \\ character marks the beginning of an escape sequence, telling the resource compiler that the next character is special.  In this case, the next character is n, which indicates a newline character.  Printing \\n is equivalent to a writeln in Pascal or a PutCR macro from assembly language.  For a complete description of escape sequences, see "Escape Characters," later in this chapter.\par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Conversion Specifiers\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Conversion specifiers are special sequences of characters that define how a particular value is to be printed.  While the resource compiler actually accepts all of the conversion specifiers allowed by the C language (it is written in C, and uses C's sprintf function to format the string for this statement), many of the conversion specifiers that are used by C are not useful in the resource compiler, and some of the others are not commonly used.  For example, technically the resource compiler supports floating-point output, but it does not have a floating point variable type, so the conversion specifiers for floating point values are not of much use.  Only those conversion specifiers that are generally used in the resource compiler will be covered here.\par Each conversion specifier starts with a % character; to write a % character, code it twice, like this:\par \par }{\f6\fs18 printf("100%%\\n");\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Conversion specifiers are generally used to write string or numeric arguments.  For example, the %n conversion specifier is used to write a two-byte integer.  You can put one of several characters between the % characters that starts a conversion specifier and the letter character that indicates the type of the argument; each of these additional characters modifies the format specifier in some way.  The complete syntax for a format specifier is\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 % }{\i\fs20 flag}{\f6\fs18  }{\fs20 [}{\f6\fs18  }{\i\fs20 field-width}{\f6\fs18  }{\fs20 ]}{\f6\fs18  }{\fs20 [}{\f6\fs18  }{\i\fs20 size-specifier}{\f6\fs18  }{\fs20 ]}{\f6\fs18  }{\i\fs20 conversion}{\fs20 \par \par }{\i\fs20 Flag}{\fs20  is one or more of the characters -, 0, + or a space.  The entire field is optional.  These flags effect the way the output is formatted:\par \par }\pard \qj\fi-720\li1080\widctlpar\adjustright {\fs20 -\tab If a formatted value is shorter than the minimum field width, it is normally right-justified in the field by adding characters to the left of the formatted value.  If the - flag is used, the value is left-justified.\par 0\tab If a formatted value is shorter than the minimum field width, it is normally padded with space characters.  If the 0 flag is used, the field is padded with zeros instead of spaces.  The 0 pad character is not used if the value is left-justified.\par +\tab Forces signed output, adding a + character before positive integers.\par space\tab Adds a space before positive numbers (instead of a +) so they line up with collimated negative numbers.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\i\fs20 Field-width}{\fs20  gives the number of characters to use for the output field.  If the number of characters needed to represent a value is less than the field width, spaces are added on the left to fill out the field.  For example, the statement\par \par }{\f6\fs18 printf("%10n%10n\\n", a, b);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 could be used to print two columns of numbers, where each column  is ten characters wide and the numbers are right-justified.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\i\fs20 size-specifier}{\fs20  gives the size of the operand.  If the }{\i\fs20 size-specifier}{\fs20  is omitted, the resource compiler expects to find an integer parameter in the parameter list when it processes any of the numeric conversion specifiers.  If the size specifier is h, a byte is expected, while l indicates that the resource compiler should look for a longint value.\par }{\i\fs20 Conversion}{\fs20  tells what size and type of operand to expect and how to format the operand:\par \par }\pard \qj\li720\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 Conversion\tab Format\par }\pard \qj\li720\keepn\widctlpar\tx2160\tx3600\adjustright {\f6\fs18 d}{\fs20 \tab signed integer\par }{\f6\fs18 u}{\fs20 \tab unsigned integer\par }{\f6\fs18 o}{\fs20 \tab unsigned octal}{\pard\plain \qj\li720\keepn\widctlpar\tx2160\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 octal}}}{\fs20  integer\par }{\f6\fs18 x}{\fs20 \tab unsigned hexadecimal}{\pard\plain \qj\li720\keepn\widctlpar\tx2160\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  number; lowercase letters are used\par }{\f6\fs18 X}{\fs20 \tab unsigned hexadecimal number; uppercase letters are used\par }{\f6\fs18 c}{\fs20 \tab character\par }{\f6\fs18 s}{\fs20 \tab c-string\par }{\f6\fs18 p}{\fs20 \tab p-string\par }\pard \qj\li720\widctlpar\tx2160\tx3600\adjustright {\f6\fs18 %}{\fs20 \tab write a single % character\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You must include exactly one parameter after the format string for each conversion specifier in the format string, and the types of the parameters must agree exactly with the types indicated by the conversion specifiers.  Parameters are matched with conversion specifiers on a left-to-right basis.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Include Directive}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Include Directive\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:include statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The #include directive reads a text file:\par \par }{\f6\fs18 #include "}{\i\fs20 filename}{\f6\fs18 "\par }{\fs20 \par The directive behaves as if all of the lines in }{\i\fs20 file}{\fs20  were placed in the current source file, replacing the line with the directive.  The maximum nesting is to ten levels.  For example,\par \par }{\f6\fs18 #include ($$Shell("ORCA")) "MyProject MyTypes.rez"\par }{\fs20 \par Note that the #include preprocessor directive (which includes a file) is different from the previously described include statement, which copies resources from another file.\par The #include directive will look up to three places for the file, in order:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The current directory.\par 2.\tab The directory where the source file is located (generally the current directory, but not always).\par 3.\tab The directory 13:RInclude.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Append Directive}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Append Directive\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:append statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This directive allows you to specify additional files to be compiled by the resource compiler.  The format is:\par \par }{\f6\fs18 #append "}{\i\fs20 filename}{\f6\fs18 "}{\fs20 \par \par This directive must appear between resource or type statements.  The }{\i\fs20 filename}{\fs20  variable is the name of the next file to be compiled.  The same search rules apply here that apply to the #include directive.  Normally you should place this directive at the end of a file because everything after it is ignored.  Do not place a #append directive in an include file.\par If you use more than one #append directive, the order in which you put them is important.  When the resource compiler sees an #append directive, it checks the language type of the appended file.  If it is the same language, that is, REZ, the effect is the same as if the files had been concatenated into a single file.  If they are in different languages, the shell quits the resource compiler and begins a new assembly or compilation.  Two examples will illustrate why the order is important.\par In the first example, suppose you have the following three files, each appended to the preceding file.\par \par }{\f6\fs18 file1.rez\par file2.rez\par file3.asm\par }{\fs20 \par The Compile command calls the resource compiler to process file1.rez because the language is REZ.  When the resource compiler encounters the #append directive for file2.rez it continues processing as if file.rez and file2.rez had been concatenated into a single file.  When it encounters the #append directive for file3.asm, the resource compiler finishes processing and returns control to the shell which calls the assembler to assemble file3.asm.\par The result is different if the order of the files is changed, as follows:\par \par }{\f6\fs18 file1.rez\par file3.asm\par file2.rez\par }{\fs20 \par The resource compiler processes file1.rez.  When it encounters the #append directive for file3.asm, the resource compiler finishes processing and returns control to the ORCA shell because the language stamp is different.  The shell calls the assembler to processes file3.asm.  When the assembler is finished processing, it returns control to the shell which calls the resource compiler to process file2.rez.  However, since this is a separate compilation from that of file1.rez, the resource compiler knows nothing about symbols from file1.rez when compiling file2.rez.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 DeRez handles #append directives differently from the resource compiler.  For DeRez the file being appended must have a language stamp of REZ or DeRez will treat the #append directive as an end-of-file marker.  DeRez will not return control to the shell after finishing processing.  Therefore, in the previous example, DeRez would process file1.rez only and then finish processing.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Resource Description Syntax}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Resource Description Syntax\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 {\*\bkmkstart bk18}This section describes the details of the resource description syntax.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Numbers and Literals}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Numbers and Literals\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 All arithmetic is performed as 32-bit signed arithmetic.  The basic formats are shown in Table 10.2.\par \par }\pard \qj\fi-2340\li2700\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\adjustright {\fs20 Numeric Type\tab Form\tab Meaning\par }\pard \qj\fi-2340\li2700\widctlpar\tx1800\adjustright {\fs20 Decimal\tab nnn\u8230\'c9\tab Signed decimal constant between 2,147,483,647 and \endash 2,147,483,648.  Do not use a leading zero.  (See octal.)\par Hexadecimal}{\pard\plain \qj\fi-2340\li2700\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Hexadecimal}}}{\fs20 \tab 0Xhhh\u8230\'c9\tab Signed hexadecimal constant between 0X7FFFFFFF and 0X80000000.\par \tab $hhh\u8230\'c9\tab Alternate form for hexadecimal constants.\par Octal\tab 0ooo\u8230\'c9\tab Signed octal}{\pard\plain \qj\fi-2340\li2700\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 octal}}}{\fs20  constant between 017777777777 and 020000000000.  A leading zero indicates that the number is octal.\par Binary\tab 0Bbbb\u8230\'c9\tab Signed binary constant between 0B11111111111111111111111111111111 and 0B10000000000000000000000000000000.\par Literal\tab 'aaaa'\tab One to four printable ASCII characters or escape characters.  If there are fewer than four characters in the literal, the characters to the left (high bits) are assumed to be $00.  Characters that are not in the printable character set, and are not the characters \\' and \\\\ (which have special meanings), can be escaped according to the character escape rules.  (See \ldblquote Strings\rdblquote  later in this section.)\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Table 10.2: Numeric Constants\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Literals and numbers are treated in the same way by the resource compiler.  A literal is a value within single quotation marks; for instance, 'A' is a number with the value 65; on the other hand, "A" is the character A expressed as a string.  Both are represented in memory by the bitstring 01000001.  (Note, however, that "A" is not a valid number and 'A' is not a valid string.) The following numeric expressions are all equivalent:\par \par }\pard \qj\fi360\widctlpar\tx1800\tx3240\adjustright {\f6\fs18 'B'\tab 66\tab 'A'+1\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Literals are padded with nulls on the left side so that the literal 'ABC' is stored as shown in Figure 10.3.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1060{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw125\pich26\picwgoal2500\pichgoal520\macpict\bliptag-1142544067\blipupi72{\*\blipuid bbe6293d761fe5ac1c2897935ea6b8f0}015300070007002100841101a00082a0008c01000a000700070021008434000c0039001f008238a10096000605000000023da1009a0008fffe000000160000a000982c000a001607436f75726965720300160d00092b0b16082741424327203d20a00099a00097a0008ca0008c0a000000000000000034000a0037001d004a38a10096000606000000023da1009a0008fffe000000070000a00098292e03243030a00099a00097a0008da0008c34000a0049001d005c38a10096000606000000023da1009a0008fffe000000030000a0009829170141a00099a00097a0008da0008c34000a005b001d006e38a10096000606000000023da1009a0008fffe000000030000a0009829120142a00099a00097a0008da0008c34000a006d001d008038a10096000606000000023da1009a0008fffe000000030000a0009829120143a00099a00097a0008da0008da0008da00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 10.3: Padding of Literals\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Expressions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Expressions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:expressions}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An expression may consist of simply a number or a literal.  Expressions may also include numeric variables, labels, and system functions.\par Table 10.3 lists the operators in order of precedence with highest precedence first \endash  groupings indicate equal precedence.  Evaluation is always left to right when the priority is the same.\par \par }\pard \qj\fi-2520\li2880\ri1080\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\adjustright {\fs20 Precedence\tab Operator\tab Meaning\par }\pard \qj\fi-2520\li2880\widctlpar\tx1440\adjustright {\fs20 1.\tab ( expr )\tab Forced precedence in expression calculation\par 2.\tab -expr\tab Arithmetic (two\rquote s complement) negation of expr\par \tab ~expr\tab Bitwise (one\rquote s complement) negation of expr\par \tab !expr\tab Logical negation of expr\par 3.\tab expr1 * expr2\tab Multiplication\par \tab expr1 / expr2\tab Integer division\par \tab expr1 % expr2\tab Remainder from dividing expr1 by expr2\par 4.  \tab expr1 + expr2\tab Addition\par \tab expr1 - expr2\tab Subtraction\par 5.\tab expr1 << expr2\tab Shift left; shift expr1 left by expr2 bits\par \tab expr1 >> expr2\tab Shift right; shift expr1 right by expr2 bits \par 6.\tab expr1 > expr2\tab Greater than\par \tab expr1 >= expr2\tab Greater than or equal to\par \tab expr1 < expr2\tab Less than\par \tab expr1 <= expr2\tab Less than or equal to\par 7.\tab expr1 == expr2\tab Equal\par \tab expr1 != expr2\tab Not equal\par 8.\tab expr1 & expr2\tab Bitwise AND\par 9.\tab expr1 ^ expr2\tab Bitwise XOR\par 10.\tab expr1 | expr2\tab Bitwise OR\par 11.\tab expr1 && expr2\tab Logical AND\par }\pard \qj\fi-2520\li2880\keepn\widctlpar\tx1440\adjustright {\fs20 12.\tab expr1 || expr2\tab Logical OR\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Table 10.3: Resource Description Operators\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The logical operators !, >, >=, <, <=, ==, !=, &&, and || evaluate to 1 (true) or 0 (false).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Variables and Functions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Variables and Functions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:variables}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:built-in functions}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are several predefined variables that are preset by the resource compiler, or that take on specific meaning based on how they are used in your resource description file.  Some of these resource compiler variables also contain commonly used values.  All Rez variables start with $$ followed by an alphanumeric identifier.\par The following variables and functions have string values:\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs18 $$Date}{\fs20 \tab Current date.  It is useful for putting time-stamps into the resource file.  The format of the string is: weekday, month dd, yyyy.  For example, August 10, 1989.\par \par }{\f6\fs18 $$Format("}{\i\fs20 formatString}{\f6\fs18 ", }{\i\fs20 arguments}{\f6\fs18 )}{\fs20 \par \tab Works just like the #printf directive except that }{\f6\fs18 $$Format}{\fs20  returns a string rather than printing to standard output.  (See \ldblquote Print Directive\rdblquote  earlier in this chapter.)\par \par }{\f6\fs18 $$Resource("}{\i\fs20 filename}{\f6\fs18 ",'}{\i\fs20 type}{\f6\fs18 ',}{\i\fs20 ID}{\f6\fs18 )}{\fs20 \par \tab Reads the resource }{\f6\fs18 '}{\i\fs20 type}{\f6\fs18 '}{\fs20  with the ID }{\i\fs20 ID}{\fs20  from the resource file }{\i\fs20 filename}{\fs20 , and returns a string.\par \par }{\f6\fs18 $$Shell("}{\i\fs20 stringExpr}{\fs20  }{\f6\fs18 ")}{\fs20 \tab Current value of the exported shell variable \{stringExpr \}.  Note that the braces must be omitted, and the double quotation marks must be present.\par \par }{\f6\fs18 $$Time}{\fs20 \tab Current time.  It is useful for time-stamping the resource file.  The format is: "hh:mm:ss".\par \par }{\f6\fs18 $$Version}{\fs20 \tab Version number of the resource compiler.  (\ldblquote V1.0\rdblquote )\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par These variables and functions have numeric values:\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs18 $$Attributes}{\fs20 \tab Attributes of resource from the current resource.\par \par }{\f6\fs18 $$BitField(}{\i\fs20 label}{\f6\fs18 , }{\i\fs20 startingPosition}{\f6\fs18 , }{\i\fs20 numberOfBits}{\f6\fs18 )}{\fs20 \par \tab Returns the }{\i\fs20 numberOfBits}{\fs20  (maximum of 32) bitstring found }{\i\fs20 startingPosition}{\fs20  bits from }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$Byte(}{\i\fs20 label}{\f6\fs18 )}{\fs20 \tab Returns the byte found at }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$CountOf (}{\i\fs20 arrayName}{\f6\fs18 )}{\fs20 \tab Returns the number of elements in the array }{\i\fs20 arrayName}{\fs20 .\par \par }{\f6\fs18 $$Day}{\fs20 \tab Current day (range 1\endash 31).\par \par }{\f6\fs18 $$Hour}{\fs20 \tab Current hour (range 0\endash 23).\par \par }{\f6\fs18 $$ID}{\fs20 \tab ID of resource from the current resource.\par \par }{\f6\fs18 $$Long(}{\i\fs20 label}{\f6\fs18 )}{\fs20 \tab Returns the long word found at }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$Minute}{\fs20 \tab Current minute (range 0\endash 59).\par \par }{\f6\fs18 $$Month}{\fs20 \tab Current month (range 1\endash 12).\par \par }{\f6\fs18 $$OptionalCount (}{\i\fs20 OptionalName}{\f6\fs18 )}{\fs20 \par \tab Returns the number of items explicitly specified in the block }{\i\fs20 OptionalName}{\fs20 .\par \par }{\f6\fs18 $$PackedSize(}{\i\fs20 Start}{\f6\fs18 , }{\i\fs20 RowBytes}{\f6\fs18 , }{\i\fs20 RowCount}{\f6\fs18 )}{\fs20 \par \tab Given an offset (}{\i\fs20 Start}{\fs20 ) into the current resource and two integers, }{\i\fs20 RowBytes}{\fs20  and }{\i\fs20 RowCount}{\fs20 , this function calls the toolbox routine UnpackBytes }{\i\fs20 RowCount}{\fs20  times.  }{\f6\fs18 $$PackedSize( )}{\fs20  returns the unpacked size of the data found at }{\i\fs20 Start}{\fs20 .  Use this function only for decompiling resource files.  An example of this function is found in Pict.rez.\par \par }{\f6\fs18 $$ResourceSize}{\fs20 \tab Current size of resource in bytes.  When decompiling, }{\f6\fs18 $$ResourceSize}{\fs20  is the actual size of the resource being decompiled.  When compiling, }{\f6\fs18 $$ResourceSize}{\fs20  returns the number of bytes that have been compiled so far for the current resource.\par \par }{\f6\fs18 $$Second}{\fs20 \tab Current second (range 0\endash 59).\par \par }{\f6\fs18 $$Type}{\fs20 \tab Type of resource from the current resource.\par \par }{\f6\fs18 $$Weekday}{\fs20 \tab Current day of the week (range 1\endash 7, that is, Sunday\endash Saturday).\par \par }{\f6\fs18 $$Word(}{\i\fs20 label}{\f6\fs18 )}{\fs20 \tab Returns the word found at }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$Year}{\fs20 \tab Current year.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Strings}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Strings\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:strings}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are two basic types of strings:\par \par }\pard \qj\fi-2880\li3240\widctlpar\tx2160\adjustright {\fs20 Text string\tab }{\f6\fs18 "a\u8230\'c9"}{\fs20 \tab The string can contain any printable character except \lquote  " \rquote  and \lquote \\\rquote .  These and other characters can be created through escape sequences.  (See Table\~10-4.)  The string "" is a valid string of length 0.\par Hexadecimal string\tab }{\f6\fs18 $"hh\u8230\'c9"}{\fs20 \tab Spaces and tabs inside a hexadecimal}{\pard\plain \qj\fi-2880\li3240\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  string are ignored.  There must be an even number of hexadecimal digits.  The string $"" is a valid hexadecimal string of length\~0.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Any two strings (hexadecimal or text) will be concatenated if they are placed next to each other with only white space in between.  (In this case, returns and comments are considered white space.)\par Figure 10.4 shows a p-string declared as\par \par }{\f6\fs18 pstring [10];\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 whose data definition is\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 "Hello"\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1061{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw347\pich37\picwgoal6940\pichgoal740\macpict\bliptag-681597899\blipupi72{\*\blipuid d75fa435775d57667f6a6b69c5828a3e}025100070007002c01621101a00082a0008ca0008c01000a00070007002c01620a000000000000000034000a000a002a002a3834000a0048002a00683834000a0067002a00873834000a0029002a004938a0008da100960006060000000202a1009a0008fffd000000070000a000980300210d00092b121e03243035a00099a00097a100960006060000000202a1009a0008fffd000000030000a0009829230148a00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291f0165a00099a00097a100960006060000000202a1009a0008fffd000000010000a000982921016ca00099a00097a0008c34000a0086002a00a63834000a00c4002a00e43834000a00e3002a01033834000a00a5002a00c538a0008da100960006060000000202a1009a0008fffd000000010000a00098291f016ca00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291d016fa00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291b03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a0009734000a0102002a01223834000a0140002a01603834000a0121002a014138a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a0008da00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Figure 10.4: Internal Representation of a P-string\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par In the input file, string data is surrounded by double quotation marks (").  You can continue a string on the next line.  A separating token (for example, a comma) or brace signifies the end of the string data.  A side effect of string continuation is that a sequence of two quotation marks ("") is simply ignored.  For example,\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 "Hello ""out "\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 "there."\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 is the same string as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 "Hello out there.";\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par To place a quotation mark character within a string, precede the quotation mark with a backslash, like this:\par \par }{\f6\fs18 \\"\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Escape Characters}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Escape Characters\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:escape characters}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The backslash character (\\) is provided as an escape character to allow you to insert nonprintable characters in a string.  For example, to include a newline character in a string, use the escape sequence\par \par }{\f6\fs18 \\n\par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Valid escape sequences are shown in Table 10.4.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\li1440\ri1080\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2700\tx4680\tx5940\adjustright {\fs20 Escape \tab \tab Hexadecimal\tab Printable \par Sequence\tab Name\tab Value\tab Equivalent\par }\pard \qj\li1440\keepn\widctlpar\tx2700\tx4680\tx5940\adjustright {\fs20 \\t\tab Tab\tab $09\tab None\par \\b\tab Backspace\tab $08\tab None\par \\r\tab Return\tab $0A\tab None\par \\n\tab Newline\tab $0D\tab None\par \\f\tab Form feed\tab $0C\tab None\par \\v\tab Vertical tab\tab $0B\tab None\par \\?\tab Rub out\tab $7F\tab None\par \\\\\tab Backslash\tab $5C\tab \\\par \\'\tab Single quotation mark\tab $27\tab '\par \\"\tab Double quotation mark\tab $22\tab "\par \par }\pard \qc\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Table 10.4: Resource Compiler Escape Sequences\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Note to C programmers:  The escape sequence \\n produces an ASCII code of 13 in the output stream, while the \\r sequence produces an ASCII code of 10.  This is backwards from the way the C language uses these two characters, so if you are creating string resources that will be used with stdio functions from the standard C library, be sure and use \\r in your resource file any time you would use \\n in C, and use \\n in your resource file any time you would use \\r in C.\par You can also use octal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 octal}}}{\fs20  escape sequences, hexadecimal escape sequences, decimal escape sequences and binary escape sequences to specify characters that do not have predefined escape equivalents.  The forms are:\par \par }\pard \qj\li360\ri2880\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\tx2880\tx3780\outlinelevel0\adjustright {\fs18 \tab Number\par }\pard \qj\li360\ri2880\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\tx2880\tx3780\adjustright {\fs18 Base\tab Form\tab Digits\tab Example\par }\pard \qj\li360\ri2880\keepn\widctlpar\tx1440\tx2880\tx3780\adjustright {\fs20 2}{\fs18 \tab \\0Bbbbbbbbb\tab }{\fs20 8}{\fs18 \tab \\0B01000001\par }{\fs20 8}{\fs18 \tab \\ooo\tab }{\fs20 3}{\fs18 \tab \\101\par }{\fs20 10}{\fs18 \tab \\0Dddd\tab }{\fs20 3}{\fs18 \tab \\0D065\par }{\fs20 16}{\fs18 \tab \\0Xhh\tab }{\fs20 2}{\fs18 \tab \\0X41\par }\pard \qj\li360\ri2880\widctlpar\tx1440\tx2880\tx3780\adjustright {\fs20 16\tab \\$hh\tab 2\tab \\$41\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Since escape sequences are imbedded in strings, and since these sequences can contain more than one character after the \\ character, the number of digits given for each form is an important consideration.  You must always code exactly the number of digits shown, using leading zeros if necessary.  For example, instead of }{\f6\fs18 "\\0x4"}{\fs20 , which only shows a single hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  digit, you must use }{\f6\fs18 "0x04"}{\fs20 .  This rule avoids confusion between the numeric escape sequence and any characters that might follow it in the string.\par Here are some examples:\par \par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\f6\fs18 \\077\tab /* 3 octal digits */\par \\0xFF\tab /* \lquote 0x\rquote  plus 2 hex digits */\par \\$F1\\$F2\\$F3\tab /* \lquote $\rquote  plus 2 hex digits */\par \\0d099\tab /* \lquote 0d\rquote  plus 3 decimal digits */\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can use the DeRez command-line option \endash e to print characters that would otherwise be escaped (characters preceded by a backslash, for example).  Normally, only characters with values between $20 and $7E are printed as Apple\~II}{\fs18 GS}{\fs20  characters.  With this option, however, all characters (except null, newline, tab, backspace, form-feed, vertical tab, and rub out) will be printed as characters, not as escape sequences.\par {\*\bkmkend bk18}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource statement}{\rxe bk18}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Using the Resource Compiler}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using the Resource Compiler\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Resource Compiler is a one-pass compiler; that is, in one pass it resolves preprocessor macros, scans the resource description file, and generates code into a code buffer.  It then writes the code to a resource file.\par The resource compiler is invoked by the shell's compile (or assemble) command, just as you would assemble a program.  This command checks the language type of the source file (in this case, rez) and calls the appropriate compiler or assembler (in this case, the resource compiler).  In short, with the exception of a few resource compiler specific options, you use the same commands to create a resource fork from a resource description file that you would use to assemble a program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Resource Forks and Data Forks}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Resource Forks and Data Forks\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource fork}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 data fork}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Files on the Apple\~II}{\fs18 GS}{\fs20  actually have two distinct parts, known as the data fork and the resource fork.  The data fork is what is traditionally a file on other computers; this is where the executable program is stored, where ASCII text is placed for a text file, and so forth.  When the resource compiler writes resources, it writes them to the resource fork of the file.  Writing to the resource fork of an existing file does not change the data fork in any way, and writing to the data fork does not change the resource fork.  The implications of this can speed up the development cycle for your programs.  When you compile a resource description file to create a resource fork for your program, you can and should have the resource compiler save the resource fork to the same file in which the linker places the executable code.  When you make a change to your assembly language source code, you will normally assemble and link the changed program, creating an updated data fork for your program.  If the resource description file has not changed, you do not need to recompile the resource description file.  The same is true in reverse:  if you make a change to the resource description file, you need to recompile it, but you do not need to reassemble or relink your assembly language source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Rez Options}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Rez Options\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:options}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler supports the e, s, and t flags from the assemble or compile command.  It ignores all other flags.\par The resource compiler supports a number of language dependent options.  These are coded as the name of the language, an equal sign, and the option list, enclosed in parenthesis.  Like the other parameters for the compile command, no spaces are allowed outside of the parenthesis.\par For example, the following compile command uses the options list to specify the -p flag, which turns on progress information.\par \par }{\f6\fs18 compile resources keep=program rez=(-p)\par }{\fs20 \par The resource compiler will accept up to 31 options in the options list.  Any others are ignored.\par Here's a complete list of the options that can be used in this options field:\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs18 \endash a[ppend]}{\fs20 \tab This option appends the resource compiler\rquote s output to the output file's resource fork, rather than replacing the output file's resource fork.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs18 \endash d[efine] }{\i\fs20 macro}{\f6\fs18  [=}{\i\fs20 data }{\f6\fs18 ]}{\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 \tab This option defines the macro variable }{\i\fs20 macro}{\fs20  to have the value }{\i\fs20 data}{\fs20 .  If data is omitted, macro is set to the null string \endash  note that this still means that macro is defined.  Using the \endash d option is the same as writing \par \par }{\f6\fs18 \tab #define macro [ data ]\par }{\fs20 \par \tab at the beginning of the input.\par \par }{\f6\fs18 \endash flag SYSTEM}{\fs20 \tab This option sets the resource file flag for the system.\par \par }{\f6\fs18 \endash flag ROM}{\fs20 \tab This option sets the resource file flag for ROM.\par \par }{\f6\fs18 \endash i }{\i\fs20 pathname(s)}{\fs20 \tab This option searches the following path names for #include files.  It can be specified more than once.  The paths are searched in the order they appear on the command line.  For example,\par \par }\pard \fi-1800\li2160\widctlpar\adjustright {\f6\fs18 \tab \u8230\'c9rez=(\endash i 13:rinclude:stuff.rez\par \tab       \endash i 13:rinclude:newstuff.rez)\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \endash m[odification]}{\fs20 \tab Don\rquote t change the output file\rquote s modification date.  If an error occurs, the output file\rquote s modification date is set, even if you use this option.\par \par }{\f6\fs18 \endash ov}{\fs20 \tab This option overrides the protected bit when replacing resources with the \endash a option.\par \par }{\f6\fs18 \endash p[rogress]}{\fs20 \tab This option writes version and progress information to diagnostic output.\par \par }{\f6\fs18 \endash rd}{\fs20 \tab This option suppresses warning messages if a resource type is redeclared.\par \par }{\f6\fs18 \endash s }{\i\fs20 pathname(s)}{\fs20 \tab This option searches the following path names for resource include files.\par \par }{\f6\fs18 \endash t[ype] }{\i\fs20 typeExpr}{\fs20 \tab This option sets the type of the output load file to }{\i\fs20 filetype}{\fs20 .  You can specify a hexadecimal number, a decimal number, or a mnemonic for the file type.  If the \endash t option is not specified, the file type of the load file is $B3.\par \par }{\f6\fs18 \endash u[ndef] }{\i\fs20 macro}{\fs20 \tab This option undefines the macro variable }{\i\fs20 macro}{\fs20 .  It is the same as writing \par \par }{\f6\fs18 \tab #undef macro \par }{\fs20 \par \tab at the beginning of the input.  It is meaningful to undefine only the preset macro variables.\par \par \tab Note: A space is required between an option and its parameters.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Language Reference Manual\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 11:  Program Symbols\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s31\qr\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\f5\fs20 \chpgn }{\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 11 - Program Symbols\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 11 \endash  }{\v\fs20 Program Symbols}{\v \tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tokens}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 identifiers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants}}}{\fs20 Pascal programs are made up of a series of program symbols called tokens.  Tokens are the words used to write a program.  They consist of identifiers, symbols, and constants.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Identifiers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Identifiers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20         identifier\par \par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1062{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley70\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich141\picwgoal6960\pichgoal2820\macpict\bliptag68964979\blipupi72{\*\blipuid 041c5273d0d2f6054eaaf5fb51636c88}029100070007009401631101a0008201000a00070007009401630a00000000000000000b001b001b44007f00e200920107484400400064005300894834003700d9004a011038a100960006060000000258a1009a0008fffd000000030000a0009803364f0d000c2b734c015fa00099a00097a100960006060000000258a1009a0008fffd000000030000a000982b7e3f015fa00099a00097a000aa61002400400038005400f6003022002e000a3700a000ad22001300490036a000ab6100090052001d006600f600302200130053f600a000ada000ab61003f005b0053006f00f60030220049005ced00a000ad220013006d120022004900881b00a000aa61002401570038016b00f6003020002e00a3002e0158a000ada000aa610024009a003800aeffe8003022001300a30013a000ada000ab69009c003022003600a30013a000ada000ab61002400b5003800c9009c003022003600be0052a000ad22008800e2dc00a000aa61005a00b5006e00c90042003022006400d9ed00a000ada000aa61003600b5004a00c90042003022004000d9ed00a000ad22002e012a005aa000ab61007e00fd0092011100420030220088010e1c00a000ada000ab61005a0106006e011a0042003022006401171300a000ada000ab6100380106004c011a0042003022004201171300a000ad34000a005b001d009238a100960006060000000258a1009a0008fffd0000000a0000a000980d000a280016006c066c6574746572a00099a00097a100960006060000000258a1009a0008fffd0000000a0000a000982b7e2d066c6574746572a00099a0009734005b00d9006e011038a100960006060000000258a1009a0008fffd000000090000a000982b0124056469676974a00099a0009722001300911200a00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 identifiers\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\fs20 Identifiers are the names that you create to represent variables, types, procedures, and so on.  Identifiers always begin with an alphabetic character or underscore.  They are followed by zero or more alphabetic characters, numeric characters, and underscore characters.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity}}}{\fs20 Pascal is a case-insensitive language, which means that the identifiers }{\f6\fs18 Name}{\fs20  and }{\f6\fs18 name}{\fs20  represent the same item.  The underscore character is significant, however, so that }{\f6\fs18 name}{\fs20  and }{\f6\fs18 name_}{\fs20  are not the same identifiers.\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1063{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab The use of the underscore character in ORCA/Pascal is an extension to Standard Pascal.  If portability is an issue, avoid the use of the underscore character.\~\~\u8710\'c6\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Identifiers can be any length in Pascal, and all characters are significant.  ORCA/Pascal limits the length of a source line to 255 characters.  Since identifiers must appear on a single source line, this gives an effective limit of 255 characters for a single identifier.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 identifiers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 source line}}}{\scaps\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Reserved Words}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Reserved Words\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 reserved words\bxe }}}{\fs20 Forty-four identifiers are reserved in ORCA/Pascal.  They can only be used in the context specified by the Pascal language.  They can never be redefined.  A reserved word can be used as a part of another identifier, so long as it is not used alone.  For example, }{\f6\fs18 myprocedure}{\fs20  is a legal Pascal identifier.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 The reserved words are:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx2340\tx3960\tx5580\tx7200\adjustright {\f6\fs14 \tab and\tab end\tab inherited\tab packed\tab type\par \tab array\tab file\tab label\tab procedure\tab unit\par \tab begin\tab for\tab mod\tab program\tab univ\par \tab case\tab function\tab nil\tab record\tab until\par \tab const\tab goto\tab not\tab repeat\tab uses\par \tab div\tab if\tab object\tab set\tab var\par \tab do\tab implementation\tab of\tab string\tab while\par \tab downto\tab in\tab or\tab then\tab with\par \tab else\tab interface\tab otherwise\tab to\par }\pard \qj\widctlpar\tx720\tx2160\tx3600\tx5040\adjustright {\f6\fs18 \par }\pard \widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1064{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 uses statement}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 otherwise clause}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case statement}}}{\fs20 The reserved words }{\f6\fs18 object}{\fs20 , }{\f6\fs18 inherited}{\fs20 , }{\f6\fs18 string}{\fs20 , }{\f6\fs18 uses}{\fs20 , }{\f6\fs18 interface}{\fs20 , }{\f6\fs18 implementation}{\fs20 , }{\f6\fs18 unit, univ, }{\fs20 and }{\f6\fs18 otherwise}{\fs20  are extensions to Standard Pascal.  Avoid their use if portability is an issue.\~\~\u8710\'c6\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Reserved Symbols}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Reserved Symbols\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 reserved symbols\bxe }}}{\fs20 The reserved symbols are the punctuation marks and mathematical symbols used in Pascal.  Each reserved symbol must be typed without intervening spaces.  The reserved symbols are:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab +\tab -\tab *\tab /\tab =\tab <\tab >\tab !\tab ~\par \tab [\tab ]\tab .\tab ,\tab :\tab ;\tab ^\tab <<\tab |\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab (\tab )\tab <>\tab <=\tab >=\tab :=\tab ..\tab >>\tab &\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The caret character }{\f6\fs18 ^}{\fs20  will appear as an up-arrow in some type faces.  The up-arrow and caret character are equivalent.  Pascal also allows the use of alternate symbols for three of the reserved symbols.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 alternate symbols}}}{\fs20 The reserved symbols that have alternate forms, and their alternates, are:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\ri4600\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\adjustright {\fs20 Symbol\tab Alternate\par }\pard \qj\li720\ri4600\keepn\widctlpar\tx2520\adjustright {\f6\fs18 ^\tab @\par [\tab (.\par }\pard \qj\li720\ri4600\widctlpar\tx2520\adjustright {\f6\fs18 ]\tab .)\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The alternate reserved symbols can be exchanged for the normal reserved symbol without changing the meaning of the program.  Both the alternate and normal forms can be mixed in the same program.\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1065{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 @ operator}}}{\fs20 The @ character can only be used as a substitute for the ^ character if the ISO+ directive has been declared in your program.  If it has not, the @ character is a reserved symbol used to extract the address of a structure.\~\~\u8710\'c6\par \par }{\fs20 {\pict{\*\picprop\shplid1066{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 << operator}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >> operator}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ~ operator}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 | operator}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ! operator}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 & operator}}}{\fs20 The reserved symbols <<, >>, ~, |, ! and & are extensions to Standard Pascal.  Avoid their use if portability is an issue.\~\u8710\'c6\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Comments are not normally considered reserved symbols, nor are the characters that delimit comments.  See the section on separators, below, for a discussion of comment characters.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Constants}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Constants\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\bxe }}}{\fs20 The last class of token is the constant.  There are five kinds of constants that can be entered in a Pascal program:  integers, hexadecimal numbers, real numbers, characters, and strings.\par }\pard \qj\widctlpar\adjustright {\fs18 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Integers}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Integers\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20           signed integer\par }{\fs18 \par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1067{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex63\picscaley57\piccropl0\piccropr0\piccropt0\piccropb0\picw339\pich78\picwgoal6780\pichgoal1560\macpict\bliptag-101053293\blipupi72{\*\blipuid f9fa0c938063360044a378a0f216ac9b}0185000700070055015a1101a00082a000aa01000a000700070055015a610024014e0038016200f6003022002e010f4000a000ad0a00000000000000000b001b001b44000a0064001d0089484400400064005300894834002500d90038011038a100960006060000000258a1009a0008fffd000000030000a0009803364f0d000c2b7349015fa00099a0009720002e000a002e00d922001300490036a000ab610009005b001d006f00f60030220013005ced00a000ada000ab61003f005b0053006f00f60030220049005ced00a000ad22001300881b0022004900881b00a000aa610024009a003800aeffe8003022001300a30013a000ada000ab69009c003022003600a30013a000ada100960006060000000258a1009a0008fffd000000090000a000980d000a28003100eb056469676974a00099a00097a100960006060000000258a1009a0008fffd000000030000a000982800160073012ba00099a0009722002e012a00e5239400a000aa61002400b5003800c9ffe80030230013a000ada00083ff}}{\par }\pard \qj\keep\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: integer\bxe }}}{\fs20 Integers are made up of a series of digits.  They come in two sizes:  two-byte integers and four-byte integers.  A complete discussion of integers and their sizes can be found in Chapter 12.  The important point here is that two-byte integers must be in the range -32767..32767, while four-byte integers can be in the range -2147483647..2147483647.  Four-byte integers are implemented as an extension to Standard Pascal.  They are not valid if the ISO+ directive has been used to force conformance with Standard Pascal.  In that case, integer constants outside of the range -32767..32767 will be flagged as an error.  Some legal integer constants are:\par }\pard \qj\widctlpar\adjustright {\fs18 \par }{\f6\fs18 \tab 1\tab \tab 32767\tab \tab 99\tab \tab \tab -100000\par }{\fs14 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Hexadecimal Numbers}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Hexadecimal Numbers\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20    hexadecimal digit\par \par }\pard \qc\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1068{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex63\picscaley58\piccropl0\piccropr0\piccropt0\piccropb0\picw384\pich87\picwgoal7680\pichgoal1740\macpict\bliptag-315817012\blipupi72{\*\blipuid ed2d03cc9578210a0584f4d3138f45b9}01db00070007005e01871101a0008201000a00070007005e018720005b0145005b0088a000ab610009007f001d0093009c003022001b00880040a000ada000ab610009017b001d018f00f60030200013017c0013006da000ada000aa61005100b5006500c9ffe8003022004000be0013a000ada000aa6100090040001d005400f60030220013000a3700a000ada000aa61005100f400650108ffe8003022004000fd0013a000ad2200400145001ba000aa61002400b5003800c9ffe8003022001300be0013a000ada000aa61002400f400380108ffe8003022001300fd0013a000ada000aa610024013c00380150ffe8003022001301450013a000ad0a00000000000000000b001b001b44000a0049001d006e4844002e00ac004100d148a100960006060000000258a1009a0008fffd000000020000a0009803364f0d000a2b59160124a00099a00097a100960006060000000258a1009a0008fffd000000080000a000982b5e2404302e2e39a00099a0009744002e0133004101584844002e00eb0041011048a100960006060000000258a1009a0008fffd000000090000a00098293d04412e2e46a00099a00097a100960006060000000258a1009a0008fffd000000060000a00098294b04612e2e66a00099a00097a00083ff}}{\par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1069{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Hexadecimal constants are an extension to Standard Pascal.  Avoid their use if portability is an issue.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: integer}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: hexadecimal}}}{\fs20 Hexadecimal numbers can be used anywhere an integer constant would be used.  They are coded by beginning them with a dollar sign ($), and following with one or more hexadecimal digits (0 - 9, a - f, A - F).  The constant is stored as an integer if there are four or fewer hexadecimal digits, or as a longint if are five or more digits.\par There are two ways to interpret a hexadecimal value in the range $8000..$FFFF.  If $FFFF is interpreted as a two-byte integer, it's value is -1.  Interpreting the same number as a four-byte value, the value would be 65535.  Since this hexadecimal constant is coded with four digits, the first meaning is used.  To code 65535 as a four-byte, positive hexadecimal value, write the constant as $0FFFF.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Real Numbers}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Real Numbers\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\b \par }{\fs20 signed real\par \par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1070{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley69\piccropl0\piccropr0\piccropt0\piccropb0\picw456\pich96\picwgoal9120\pichgoal1920\macpict\bliptag170466691\blipupi72{\*\blipuid 0a291d8310568da534f053cc30783c3a}02db00070007006701cf1101a0008201000a00070007006701cf0a000000000000000034001c00c7002f00ec380b001b001b44001c0088002f00ad48a100960006060000000258a1009a0008fffd000000090000a0009803364f0d000a2bd028056469676974a00099a0009744001c0121002f01464822000a0106001b22004000f4c100a000aa61001b00be002f00d200f6003022002500ac1300a000ada000aa61001b0118002f012c00f6003022002500eb2e00a000ad20000a0106000a01baa000aa61001b00f4002f0108ffe8003022000a00fd0013a000ada000aa61001b01b1002f01c5ffe8003022000a01ba0013a000ad22000a0076001ba000ab61001b0152002f016600f600302200250153f200a000ad20000a00fd000a0076a000aa61001b01c3002f01d700f6003022002501ad1700a000ada000ab61001b00ac002f00c0009c003022002d00b50013a000ad22002500f4001ba100960006060000000258a1009a0008fffd000000020000a0009829610165a00099a00097a000aa61001b007f002f009300f60030220025006d1300a000ada100960006060000000258a1009a0008fffd000000030000a000980d000c280028009702202ea00099a00097a000aa61001b0017002f002b00f60030220025000a0e00a000ada000ab61001b0145002f0159009c003022002d014e002ea000ad22005b012f0900220025010f0036a000aa61005101180065012c00f60030230a00a000ad22005b0145090034001c0021002f007338a100960006060000000258a1009a0008fffd0000001b0000a000980d000a280028002e0e7369676e656420696e7465676572a00099a0009734001c015c002f01ae38a100960006060000000258a1009a0008fffd0000001b0000a0009828002801690e7369676e656420696e7465676572a00099a0009744005201210065014648a100960006060000000258a1009a0008fffd000000030000a0009828005e01300145a00099a00097a00083ff}}{\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: real numbers\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 exponents}}}{\fs20 Real numbers consist of an integer followed by a decimal point, a fraction part, an }{\f6\fs18 e}{\fs20  or }{\f6\fs18 E}{\fs20 , and a signed integer.  The decimal point and fraction part can be left out if the exponent is coded, or the exponent can be left out if there is a fractional part.  One of the two must appear to distinguish the real constant from an integer.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 These rules mean that the following real constants are not legal.\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab 1.\tab \tab \tab \{fraction part is missing\}\par \tab .3\tab \tab \tab \{integer part is missing\}\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab 8.4e\tab \tab \tab \{missing exponent\}\par }{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Some legal real constants are:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab 3276.8e10\tab \tab 1.0\tab \tab \tab 0.3\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab 3.14159\tab \tab \tab 1e-10\tab \tab \tab 14.5E+16\par }{\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Character Constants}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Character Constants\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\b \par }{\fs20                  character constant\par \par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1071{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley58\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich24\picwgoal5880\pichgoal480\macpict\bliptag686103615\blipupi72{\*\blipuid 28e51c3f79025f954a250b559796879d}013300070007001f012d1101a00082a000aa01000a00070007001f012d6100090121001d013500f6003022001301061c00a000ada000ab6100090025001d003900f600302200130026e400a000ada000aa61000900d9001d00ed00f6003022001300c71300a000ada000aa6100090064001d007800f6003022001300521300a000ad0a000000000000000034000a006d001d00c838a100960006060000000258a1009a0008fffd000000110000a0009803364f0d000a2b891609636861726163746572a00099a000970b001b001b44000a00e2001d010748a100960006060000000258a1009a0008fffd000000010000a00098296a0127a00099a0009744000a002e001d005348a100960006060000000258a1009a0008fffd000000010000a00098280016003f0127a00099a00097a00083ff}}{\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: characters\bxe }}}{\fs20 Character constants consist of any keyboard character surrounded by single quote marks.  If the character is a single quote mark, double it.  The following are all legal character constants:\par \par }\pard \qj\li720\ri3420\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2880\adjustright {\f6\fs18 Character constant \tab Character value\par }\pard \qj\li720\ri3420\widctlpar\tx2880\adjustright {\fs20 \par }{\f6\fs18 ' '\tab < blank >\tab \par ''''\tab '\tab \tab \par ';'\tab ;\tab \tab \par 'A'\tab A\tab \tab \par 'a'\tab a\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity}}}{\fs20 Note that, although the Pascal language is case insensitive, character constants are not.  }{\f6\fs18 'A'}{\fs20  is not the same as }{\f6\fs18 'a'}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b String Constants}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v String Constants\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\b \par }{\fs20                  string constant\par \par }\pard \qc\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1072{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley63\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich42\picwgoal5880\pichgoal840\macpict\bliptag-727729533\blipupi72{\*\blipuid d49fba83f979a56e036f668776252589}0153000700070031012d1101a00082a000aa01000a000700070031012d61001b0121002f013500f6003022002501061c00a000ada000ab61001b0025002f003900f600302200250026e400a000ada000aa61001b00d9002f00ed00f6003022002500c71300a000ada000aa61001b0064002f007800f6003022002500521300a000ad0a000000000000000034001c006d002f00c838a100960006060000000258a1009a0008fffd000000110000a0009803364f0d000a2b892809636861726163746572a00099a000970b001b001b44001c00e2002f010748a100960006060000000258a1009a0008fffd000000010000a00098296a0127a00099a0009744001c002e002f005348a100960006060000000258a1009a0008fffd000000010000a00098280028003f0127a00099a00097a000ab61001b0052002f0066ffe8003022001d005b00eda000ad23750023001ba00083ff}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1073{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Standard Pascal does not allow the use of a null string (a string with no characters).  ORCA Pascal allows the null string.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: strings\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity}}}{\fs20 Strings are keyboard characters enclosed in quote marks.  Like character constants, quote marks in strings are doubled, and strings are case sensitive.  The string and its surrounding quote marks must appear on a single source line, which effectively limits the number of characters in a single string to 253.  Character constants and strings with one character are distinguishable by the context in which they are used.  The following are legal strings in Pascal:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab 'Now''s the time to program.'\par \tab '   '\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab '!@#$%^&*()'\par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 For a discussion on the internal format of a string constant, see "Strings" in the next chapter.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Separators}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Separators\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 separators\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comments}}}{\fs20 Separators consist of blanks, the end of a line, and comments.  Separators can be used between any two tokens, or before the first token of a program.  All separators are completely interchangeable.  You can type a Pascal program on one line (if it is short enough), or place every token on a new line.  The program will execute the same way.\par Separators must be used between any two adjacent labels, numbers, reserved words or identifiers.\par Comments begin with a }{\f6\fs18 \{}{\fs20  character and end with a }{\f6\fs18 \}}{\fs20  character.  The characters between the comment characters can be any keyboard characters except }{\f6\fs18 \}}{\fs20  or }{\f6\fs18 *)}{\fs20 .  Comments are for your convenience only \endash  replacing a comment with a space will have no effect on the finished program.  Note that nested comments are not allowed.  }{\f6\fs18 \{\{...\}\}}{\fs20  is not a legal comment in Pascal.\par Both for compatibility with older versions of Pascal and for use on machines that may not have the }{\f6\fs18 \{}{\fs20  and }{\f6\fs18 \}}{\fs20  characters, }{\f6\fs18 (*}{\fs20  can be substituted for }{\f6\fs18 \{}{\fs20 , and }{\f6\fs18 *)}{\fs20  can be substituted for }{\f6\fs18 \}}{\fs20 .  The two forms of comment symbols can be freely intermixed.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Some legal comments are:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab \{A simple comment\}\par \tab (*The alternate form*)\par \tab \{The two can be mixed*)\par \tab (*in either direction\}\par \tab \{*)\par \tab (*\}\par \tab \{\{\{\{\{\{\{\{\{\{\}\par \tab \{-----------\}\par \tab \{\}\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab (**)\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Unlike any token in the Pascal language, comments can be spread over more than one source line.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 12:   Basic Data Types\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 12 - Basic Data Types\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 12 \endash  Basic Data Types\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\fs20 Pascal has a rich variety of data types, many of which are defined when a program is written.  This chapter describes those Pascal data types which are built into the language.  The next chapter covers derived and defined data types.  Chapter 14 covers objects, which are part data and part procedure and function declaration.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 data formats}}}{\fs20 Some of the information in this chapter deals with the way that information is stored internally in the program.  This information is provided for very advanced programmers who need to write assembly language subroutines that will deal with Pascal data, or who need to do strange and dangerous tricks with the data to work with the machine at the hardware level.  You do not need to understand this information to use ORCA/Pascal for normal Pascal programming.  If it does not make sense to you, or if you will not be using the information, simply ignore it.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Integers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Integers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\fs20 Integers are whole numbers.  Valid values for integers range from -32767 to 32767.  Each integer variable requires two bytes of storage.  In this implementation of ORCA/Pascal, integers are stored in two's complement form with the least significant byte first.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1074{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab The types longint and byte are not a part of Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 longint\:see long integers}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 ORCA/Pascal supports an extended integer data type, called longint.  Longint values require four bytes of storage.  The can range from -2147483647 to 2147483647.  Longint values can generally be used anywhere that an integer value is allowed.  A variable of type longint }{\i\fs20 cannot}{\fs20  be used as a }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays}}}{\fs20 subscript, as the incrementing variable in a FOR statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR statement}}}{\fs20 , or in a set}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 .  When longint values appear in expressions with integer values, the two-byte integer is first promoted to a four-byte value, then the operation is performed.\par ORCA/Pascal also supports a predefined subrange of integer, named byte}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\fs20 .  Values of type byte range from 0 to 255. While byte requires only eight bits of storage, you should use the type sparingly, since the code generated by the compiler to access and manipulate a single byte of memory on the Apple\~II}{\scaps\fs20 gs}{\fs20  outweighs any savings in memory gained from using this type of data.  We suggest that the byte type be limited to large arrays, files, and toolbox parameters.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Reals}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Reals\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers\bxe }}}{\fs20 Real numbers are a limited precision, limited range subset of real numbers from mathematics.  Real numbers range in absolute value from 1.2e-38 to 3.4e+38.  They can, of course, have either a positive or a negative sign.  Real numbers are accurate to seven significant figures.\par Internally, real numbers are represented using the format specified by the IEEE floating-point standard}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IEEE floating-point standard}}}{\fs20 .  Each real number requires four bytes of storage.  The exact format will not be specified here, since it has no real bearing on programs written entirely in Pascal - for details, see the IEEE floating-point standard, the SANE reference manual, or the ORCA/M assembly language reference manual.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1075{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab The types double, extended and comp are not a part of Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal provides three extensions to real numbers.  The first is double, which is represented internally using the IEEE floating-point format.  Each double-precision}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\fs20  number requires eight bytes of storage.  Double-precision numbers range in absolute value from 2.3e-308 to 1.7e+308, and can be either positive or negative.  Double values are accurate to fifteen significant digits.\par The second is extended, which is represented internally using an extended form of the IEEE floating-point format.  Each extended-precision}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\fs20  number requires ten bytes of storage.  Extended-precision numbers range in absolute value from 1.7e-4932 to 1.1e+4932, and can be either positive or negative.  Extended values are accurate to nineteen significant digits.\par The extended format is the format used internally by Apple's SANE floating point routines, which are called by ORCA/Pascal.  In some cases, a program will actually run faster if the numbers are extended than if they are real, since the number doesn't need to be converted back and forth between the internal formats.\par The last of the real types is comp, which is represented internally as an eight-byte integer.  Comp numbers range from about -9.2e18 to 9.2e18.\par The four types or real numbers are completely interchangeable.  All intermediate results are manipulated internally in extended format.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Sets}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Sets\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets\bxe }}}{\fs20 A set is essentially a list of the items from a given base type that are contained in a given set variable.  For example, a set can be defined as a }{\f6\fs18 set of 1..10}{\fs20 , in which case the set variable can hold integers in [1..10].  Sets can then be manipulated using a special group of set operations.\par The base type of a set must be a }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 scalar.  Sets in ORCA/Pascal can hold up to 2048 elements.  The apparent range of the scalar variables must be in [0..2047].\par Internally, sets are actually variable length.  When the set is declared, the largest value that can be an element of the set determines the size of the set variable.  Eight set elements are held in each byte, counting from zero, so if }{\f6\fs18 large}{\fs20  is the value of the largest set element, then the set is\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab large mod 8 + 1\par }{\fs20 \par bytes long.  Within each byte, the sets are assigned to bits counting from the least significant bit position, so that set element number 0 will be the least significant bit of the first byte of a set variable, and set element number 7 will be the most significant bit of the same byte.  A bit is set to one if the value that it corresponds to is in the set, and zero if it is not.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For example, the set constant [0,3..6,10] would require two bytes of storage.  Recalling that two-byte values on the Apple\~II}{\scaps\fs20 gs}{\fs20  are stored least significant byte first, the set's binary representation is\par \par }\pard \qj\widctlpar\adjustright {\fs20 \tab 01111001  00000100\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Booleans}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Booleans\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 true}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 false}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: boolean}}}{\fs20 Boolean variables take on the value of true or false.  }{\f6\fs18 True}{\fs20  and }{\f6\fs18 false}{\fs20  are, in fact, predefined boolean constants.\par Boolean variables require two bytes of storage each.  The ordinal value of a true boolean variable is one, while the ordinal value of a false boolean variable is zero.\par Boolean values which are stored in a packed array}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed arrays}}}{\fs20  only require one byte of storage each.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Characters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Characters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: characters}}}{\fs20 Characters are members of the ASCII character set.  Their ordinal values range from 0 to 127.\par Pascal requires that the ordinal values of the digits be sequential.  That is, for every character in ['0','1','2','3','4','5','6','7','8','9'], adding one to the ordinal value of the digit must give the ordinal value of the next higher digit, and subtracting one must give the ordinal value of the next lower digit.  Pascal does not require the same to be true for the alphabetic characters, although it is in fact true in this implementation.  If portability to computers that do not use the ASCII character set is an issue, your program should not depend on the ordinal values of the alphabetic characters being sequential.  They are, however, required to be properly ordered, }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord function}}}{\fs20 so }{\f6\fs18 ord('z') > ord('a')}{\fs20 .\par The first thirty-two characters and the last character in the ASCII character set}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\fs20  are not printing characters, so you cannot represent them as character constants.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 In strings that do not have a length byte, ORCA/Pascal treats an ASCII zero as an end-of-string character.  This allows you to use C-style strings for string-compare and string-copy operations.  Note that an ASCII zero embedded in a string will cause a Pascal write operation to stop at the null character.\par A character variable requires two bytes of storage, unless it is stored in a packed array, in which case it only requires one byte of storage per array element.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed arrays}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pointers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pointers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers\bxe }}}{\fs20 Each pointer requires four bytes of storage.  It points to a memory location in the heap.  The value that the pointer points to is stored in the byte whose address is given by the pointer, and in the bytes that follow if the value requires more that one byte of storage.  Pointers are stored least significant byte first.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: pointers}}}{\fs20 Pascal has a predefined pointer constant called nil.  While the ordinal value of this constant is not defined by Pascal (and, indeed, the concept of an ordinal value is not allowed in Standard Pascal), it is 0 in this implementation.  This fact is especially useful when dealing with the toolbox, which frequently allows a pointer value of zero when passing a pointer value.  In all such cases, nil may be used.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 13:   Derived Data Types\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 13 - Derived Data Types\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 13 \endash  Derived Data Types\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter deals with data types that are derived from those discussed in the last chapter.  All of the data types discussed here are represented internally as one or more of the types from Chapter 12.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Enumerations}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Enumerations\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 enumerations\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 Pascal allows the declaration of a list of variables that become ordered members of a new data type.  For example, you could define a new type\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab color = (red,orange,yellow,green,blue,violet)\par }{\fs20 \par as the colors of a rainbow.  Variables can be defined which have the type }{\f6\fs18 color}{\fs20 .  Certain operations can also be performed.  The operations are limited to comparisons, assignment, and using the variable (or one of the constants, such as red) as the argument to }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 succ function}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pred function}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord function}}}{\fs20 the }{\f6\fs18 succ}{\fs20 , }{\f6\fs18 pred}{\fs20 , or }{\f6\fs18 ord}{\fs20  functions.  Enumerated variables can also be passed as arguments to user-defined procedures and functions, and can be the return type of a user-defined function.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Enumerations are ordered.  In the above list, }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 < operator}}}{\f6\fs18 red < orange}{\fs20 , for example.  The ordinal value of the first name in the list is zero, with the ordinal value for each succeeding item increasing by one.  Thus, }{\f6\fs18 ord(violet) = 5}{\fs20 .  Variables are represented internally as integers.  This means that an enumeration can have up to 32768 entries.}{\b\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Subranges}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Subranges\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 subranges\bxe }}}{\fs20 Subranges specify a limited, sequential range of a scalar data type.  The scalar data types include integers, long integers, characters, booleans, enumerations, and other subranges.  Whenever a value is assigned to a variable that is declared as a subrange, the value is checked to ensure that it is in the range specified.  If it is not, an error will be flagged.  The error is occasionally caught during the compile or code generation phase, but in general results in a run-time error.  The internal representation and storage requirements for a subrange match those of the base type that the variable is a subrange of.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab warmcolors = red..yellow;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Checking for subrange exceeded errors takes a substantial amount of code and time.  For that reason, checking for this type of error is optional at run-time.  The }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RangeCheck directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ISO directive}}}{\fs20 \{$RangeCheck\} directive is used to turn this checking on or off.  The \{$ISO+\} directive will also turn range checking on.  Range checking defaults to off.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Unsigned Integers}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Unsigned Integers\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 subranges}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 unsigned operations}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 optimize directive}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Subranges of integers and longints get special treatment if all of the allowed values are greater than or equal to zero.  In some cases, the compiler can generate more efficient unsigned operations, which can save space and execution time \endash  especially for compares, like the ones typically used in while and repeat loops.\par The operations which are faster when unsigned math is used are multiplication, division, modulus, compares other than for equality or inequality (i.e. >, >=, <, <=) and the shift right operation.  If both of the operands for these instructions are unsigned, and if peephole optimization is enabled, ORCA/Pascal will use the faster, unsigned version of each operation.\par The main issue is detecting when unsigned operations are allowed.  The compiler checks each operand to see if it is unsigned, using these rules:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab For variables, the operand is unsigned if the variable is a subrange with the lower limit greater than or equal to zero.  The easiest way to take advantage of this is to declare two types:\par \par }\pard \qj\li1080\keepn\widctlpar\adjustright {\f6\fs18 type\par    unsigned = 0..maxint;\par }\pard \qj\li1080\widctlpar\adjustright {\f6\fs18    unsigned4 = 0..maxint4;\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab and then to use these types when declaring variables that will never be less than zero.  You need to take some care, though, especially with loops.  It's easy to make a mistake like\par \par }\pard \qj\li1080\keepn\widctlpar\adjustright {\f6\fs18 var\par    count: unsigned;\par \par begin\par count := 10;\par while count >= 0 do begin\par    DoSomething(count);\par    count := count-1;\par }\pard \qj\li1080\widctlpar\adjustright {\f6\fs18    end; \{while\}\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab This will cause an infinite loop, since count will drop to -1.  As an unsigned value, -1 is interpreted as 65535, and the loop keeps going.\par \par 2.\tab For some operations, the result is always treated as an unsigned value.  The operations include any value cast to an unsigned integer, as well as the results of the functions abs, sqr, sqrt.\par \par 3.\tab For some operations, the result is always treated as a signed value, even if the operands are not signed.  This includes subtraction, unary negation, and the result of any function not mentioned in #2.\par \par \tab If you know the result of such an operation is unsigned, you can cast the result to an unsigned subrange to get the benefit of shorter operations for the remainder of the expression.  For example, in the expression\par \par }\pard \qj\li1080\widctlpar\adjustright {\f6\fs18 a := (b-4)*c;\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab if a, b and c are unsigned, and the value of b is known to be greater than or equal to 4, you could use\par \par }\pard \qj\li1080\widctlpar\adjustright {\f6\fs18 a := unsigned(b-4) * c;\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab to get an unsigned multiply.\par \par 4.\tab Constants are treated as unsigned operands if the value is greater than or equal to 0.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Arrays}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Arrays\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays\bxe }}}{\fs20 Arrays are numbered groupings of similar data elements.  You can define an array of any data type, including a derived data type.  Each array has a subscript type, which is the type of variable used as the index to select from the various array elements.  The subscript type can be any scalar type.  The array also has a data type, which is the type of each element of the array.  This type can be another array, which is how Pascal deals with multiply subscripted arrays.\par Arrays are indexed using either integers or long integers, as appropriate.  With the small memory model (which is the default), arrays are limited to 64K each, although there is no limit to the total amount of space that can be used by arrays, other than available memory.  With the large memory model, the only limitation on the size of an array is available memory.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\f20\fs20 \u-3981\'73}{\b\fs20 \tab Warning}{\fs20 \tab If any array or record exceeds 64K, even if the array or record is allocated dynamically with the new procedure or with NewHandle, you must use the large memory model.\~\~}{\f20\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Arrays are stored in memory with the rightmost index incrementing the fastest.  For example, for the array\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab matrix: array [1..3,1..3] of real;\par }{\fs20 \par the elements would appear in memory in this order:\par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab matrix[1,1]\par \tab matrix[1,2]\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab matrix[1,3]\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab matrix[2,1]\par \tab matrix[2,2]\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab matrix[2,3]\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab matrix[3,1]\par \tab matrix[3,2]\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab matrix[3,3]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The memory requirement for an array is the product of the number of elements in the subscript and the size of an array element.  In the above example, }{\f6\fs18 matrix}{\fs20  would require 3*3*4 bytes of memory.\par Pascal allows the definition of packed arrays, which tells the compiler that an array should be stored in a way that conserves memory, even at the expense of extra instructions when the array is accessed.  In most cases in ORCA/Pascal there is no difference in the internal representation used for packed and unpacked arrays of the same type.  Char and boolean arrays are treated specially, however. In unpacked char or boolean arrays, each element occupies two bytes of memory.  In packed char or boolean arrays, each element occupies one byte of storage.\par Packed arrays of characters can have special meanings and properties.  See Strings, later in this chapter, for details.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Strings}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Strings\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings\bxe }}}{\fs20 In Pascal, strings are a particular kind of array that gets special handling.  The general form for a string variable is\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab packed array[n..m] of char\par }{\fs20 \par where n is either 0 or 1, and m is greater than 1.  }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 In Standard Pascal, n is always 1, and the second is in the range 2..maxint.  If you define a string this way, it will be compatible with other implementations of Standard Pascal.  ORCA/Pascal extends the ASCII character set to define the character chr(0) to mean the end of the string, allowing strings whose length can change dynamically.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The second form of string uses 0 for the first subscript.  When this form is used, m must be limited to the range 2..255.  In the toolbox reference manual, strings of this format are described as "Pascal strings."  (Curiously, this is despite the fact that Jensen & Wirth, ISO Pascal and ANSI Pascal all define a string the other way.  No accepted Pascal standard supports what the toolbox refers to as a Pascal string!)\par If you do not care what the internal format is, you can use either form of string.  All operations on strings, including the string manipulation procedures and functions, will work on either format.  If you do care what format is used, a starting subscript of 0 gives a UCSD string (with a length byte) and a starting subscript of 1 gives a Standard Pascal string (no length byte).\par There is a short-hand way to define a string.  In the short-hand form, the type is string, optionally followed by a constant in brackets, as in\par }\pard \qj\widctlpar\adjustright {\fs20 \tab \par }{\f6\fs18 \tab string[200]\par }{\fs20 \par The constant specifies the number of characters the string can hold - in effect, this is the maximum subscript range for the packed array of characters.  If you use this form, the compiler will generate a string with a length byte for strings whose length is less than 256 characters.  For strings with a length of 256 or more characters, a length byte is no longer possible, and the compiler automatically switches to Standard Pascal strings.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: strings}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 @ operator}}}{\fs20 There is one place where the specific format of the string may be important to you.  When you extract the address of a string, as in the QuickDraw call\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\f6\fs18 \tab DrawString(@'Hello, world.');\par }\pard \qj\widctlpar\adjustright {\fs20 \par the compiler returns a pointer to a length byte, followed by the ASCII characters, and then a null terminator.  For most toolbox calls, the address operator returns what you want: a pointer to a string with a length byte.  If you need a C string (null terminated), you can get it by adding 1 to the address, as in\par \par }{\f6\fs18 \tab }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 @}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 DrawCString(pointer(ord4(@'Hello, world.')+1));\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you pass a string as a }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 parameters}}}{\fs20 parameter to a function or procedure, you must insure that both the parameter and the string are in the same format.  String constants are automatically coerced to the appropriate format.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Records}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Records\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records\bxe }}}{\fs20 Records are collections of unlike data elements.  Like arrays, records appear in memory as a series of primitive data types.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records\: variant}}}{\fs20 Pascal allows the definition of a variant record.  A variant record is a record that can contain different kinds of data at different points during the program's execution.  Pascal also allows the}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new procedure}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 heap}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dynamic variables}}}{\fs20  }{\f6\fs18 new}{\fs20  procedure, which sets aside space for a dynamic variable from a heap, to be called with or without a list that specifies the structure for a given variant record.  ORCA/Pascal takes advantage of the knowledge available when }{\f6\fs18 new}{\fs20  is called, and sets aside only enough space to satisfy the request.  For example, for\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab v: record\par \tab    case realvar: boolean of\par \tab       true: (r: real);\par \tab       false: (i: integer);\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab       end;\par }{\fs20 \par the call\par \par }{\f6\fs18 \tab }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 new}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 new(v,true);\par }{\fs20 \par would allocate six bytes of memory - two for the variant selector and four for the real variable.  However, the call\par \par }{\f6\fs18 \tab new(v,false);\par }{\fs20 \par allocates only four}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\fs20  bytes of memory.  This can be very useful, but leaves the possibility of an assignment like\par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab new(v,false);\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab v.r := 1.0;\par }{\fs20 \par which can lead to disastrous results.  If the variable will hold more than one kind of data, don't specify the variant part in the call to new.  That way, the largest amount of memory that can ever be used will be allocated.  For example,\par \par }{\f6\fs18 \tab new(v);\par }{\fs20 \par allocated six bytes of storage, so that either an integer or real can be stored.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tag fields}}}{\fs20 When a variant record is defined, it is legal to omit the tag variable.  For example, if you will not be setting or reading the variable realvar from the record shown earlier, the variable can be left out.  This changes the internal format of the record:  since the variable is not set or used, no space is reserved for it.  Without a tag variable, the variant record looks like this:\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab v: record\par \tab    case boolean of\par \tab       true: (r: real);\par \tab       false: (i: integer);\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab       end;\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Instead of four or six bytes of storage, this record will require two or four bytes.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records\: size limits}}}{\fs20 Under ORCA/Pascal, if you are using the small memory model, each record must use less than 65536 bytes of memory.  The only limit on the total amount of memory used by all records is the available memory in your computer.  If you are using the large memory model, the only limit on the size of a record is available memory.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\f20\fs20 \u-3981\'73}{\b\fs20 \tab Warning}{\fs20 \tab If any array or record exceeds 64K, even if the array or record is allocated dynamically with the new procedure or with NewHandle, you must use the large memory model.\~\~}{\f20\fs14 \u-3981\'73}{\b\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Files}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Files\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files\bxe }}}{\fs20 File variables represent sequentially accessed lists of variables.  Each of the variables in a file must be of the same type, but unlike an array, the values cannot be accessed in a random order.  A file is always available for reading or writing, but in Standard Pascal, never both.  When reading from a file, you start by reading the first element and continue until the last element is read.  When writing to a file, you always start with an empty file and add values to the list.\par In ORCA/Pascal, files are always stored on disk.  If no file name has been given when the file is reset or rewritten, a name is assigned by forming a file name with the characters "SYSPAS" and a four-digit number, starting with "SYSPAS0001".  Each time a new file variable is reset or rewritten, the number is incremented.  These files will end up on the work prefix}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\fs20 .  They are not deleted when program execution ends, so you can access them later.  Files declared with the predefined file type }{\f6\fs18 text}{\fs20  will show up as }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\: TXT}}}{\fs20 ProDOS TXT files, while any other file type is a }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\: BIN}}}{\fs20 binary (BIN) file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1076{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab ORCA/Pascal supports some extensions that allow more flexible use of files.  See }{\f6\fs18 seek}{\fs20  for a way to access file elements randomly, and }{\f6\fs18 open}{\fs20  for a way to open a file for both input and output.  These are discussed in Chapter 22.  You also have complete access to the primitives available from ProDOS.\~\~\u8710\'c6\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 14:   Object Pascal\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 14 \endash  Object Pascal\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\fs20 }{\b\v\fs20 Chapter 14 \endash  Object Pascal\tcl1}}}{\b\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 {\*\bkmkstart bk20}\par \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \f4\fs20\cgrid {\object\objemb\objw260\objh260{\*\objclass Word.Picture.8}{\*\objdata 01000100020000000f000000576f72642e506963747572652e38000000000000000000004c0000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000a00000001000000feffffff0000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffff0c00000003000000040000000500000006000000070000000800000009000000fefffffffefffffffefffffffeffffff0e0000000f0000001000000011000000120000001300000014000000feffffff160000001700000018000000190000001a0000001b0000001c000000feffffff1e0000001f0000002000000021000000220000002300000024000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000500ffffffffffffffff020000000709020000000000c0000000000000460000000000000000000000000050e441352ec0010b000000c00000000000000031005400610062006c006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000201ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000020000000010000000000000010043006f006d0070004f0062006a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120002010100000004000000ffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000580000000000000003004f0062006a0049006e0066006f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000002000000040000000000000012000f000a0001005b000f00020003000300030028000040f1ff02002800000006004e006f0072006d0061006c000000020000000800434a18006d4809040000000000000000000000000000000000003c004140f2ffa1003c0000001600440065006600610075006c0074002000500061007200610067007200610070006800200046006f006e00740000000000000000000000000000000000020000000700000c00000600ffffffff010000000420ffff01000000000000000000020000000000000000000004000002040000030000000004000002040000040000000004000002040000050000000f0000f098000000000006f0180000000404000002000000030000000100000001000000040000002f0001f058000000420007f0240000000304026616e4353164ff9836931ff8b7c02cff000502000000000000ffffffff0000b87c420007f0240000000304cd0fb35a49b8200f27f086a04e893f12ff00f301000001000000220c00000000b87c40001ef110000000ffff00000000ff0080808000f7000010000f0002f0dc000000100008f00800000002000000030400000f0003f07a0000000f0004f028000000010009f01000000000000000000000000000000000a0090002000af00800000000040000050000000f0004f042000000b2040af00800000003040000000a000033000bf012000000044102000000bf0100001000ff0100000800000010f00400000000000000000011f004000000000000010f0004f04200000012000af00800000001040000000e000053000bf01e000000bf0100001000cb0100000000ff01000008000403090000003f0301000100000011f004000000000000010000000002000000030400000000000000000000fc000000fc00000074000000000000000000040000000700ff40010001000000000002000000747b2403010001000000000005000000000000000000000001000100350271020210000000000000000200000070000008004000000400000047069001000002020603050405020304000000030000000000000000000000000100000000000000540069006d006500730020004e0065007700200052006f006d0061006e00000035069001020002000500000000000000000000001000000000000000000000000000008000000000530079006d0062006f006c000000330690010000020b060402020202020400000003000000000000000000000000010000000000000041007200690061006c00000033069001000002000500000000000000000000030000000000000000000000000100000000000000540069006d0065007300000022000400f00888180000d002000068010000000030ad498631ad4986000000000200010000000000000000000000010001000000040003100100000000000000000000000100010000000100000000000000210300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a506c007b400b4008000123000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000020000006002ffff1200000000000000000000000000000010004d0069006b00650020005700650073007400650072006600690065006c00640010004d0069006b00650020005700650073007400650072006600690065006c0064000000000000000000000000000000000000000000000000a10064000c574f524400000000001c001c001e0001000a00000000001c001c0098000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff028000000afe00007ffaff02c000000a02000001f9ff02f000000a02000003f9ff02f800000a02000007f9ff02fc00000a0200000ff9ff02fe0000090200001ff8ff010000090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f7200084465627567537472000440343330000440333334000440323338000c5042484f70656e4173796e63000c496e697450726f634d656e75000100082e7763737062726b00104c4d4765744465736b5061747465726e000849734d65747269630008666c757368766f6c000c2e4765744461746554696d65000c2e476574466f6e74496e666f000440343331001c5f5f64745f5f5132337374643132616c6c6f6361746f723c773e4676000c4c4d53657453505072696e740004657266630001001053494f55584472617747726f77426f7800105f5f74656d705f66696c655f6d6f646500145f5f66696e645f756e6f70656e65645f66696c650004403433320004666d6178000100082e5f5f73696e69740010706f6f6c5f616c6c6f632e6d61632e6300086c67657463656c6c00044034333300144c47657443656c6c446174614c6f636174696f6e000100102e5f5f696e69745f706f6f6c5f6f626a00044034333400046572666600242e5f5f63745f5f513233737464366c6f63616c65465243513233737464366c6f63616c65002c646f5f646563696d616c5f706f696e745f5f51323373746431356d6f6e657970756e63743c632c313e43467600010010535042536574446576696365496e666f0010444d556e6d6972726f72446576696365000440343335001443524d476574314e616d65645265736f75726365000100086c696e6550726f6300102e5f5f736f6d5f636865636b5f6e657700142e53494f5558446f436f6e74656e74436c69636b000c415350557365725772697465000100082e776d656d636d70001043617074757265436f6d706f6e656e74000c736574775f5f337374644669000100102e4765744d656e754974656d5465787400082e7374727866726d0008697377616c7068610028646f5f646563696d616c5f706f696e745f5f51323373746431316e756d70756e63743c773e43467600782e756e696e697469616c697a65645f66696c6c5f6e3c5050513333737464366c6f63616c653566616365742c556c2c50513333737464366c6f63616c653566616365743e5f5f33737464465050513333737464366c6f63616c65356661636574556c524350513333737464366c6f63616c65356661636574002043616c6c436f6d706f6e656e7446756e6374696f6e5769746853746f72616765000c5f5f776c6f7765725f6d6170000c5042476574454f4653796e63000100384465736361727465733a50726f6a656374733a50616c6d20576f72643a44726f70444f433a536f757263653a44726f70444f432e7273726300085f5f6c646578706c00185f5f76745f5f5132337374643130636f6c6c6174653c633e000440363331000c2e4f70656e4465736b416363000c415350476574537461747573000100086f76616c50726f630008737464696e53656c00087365746a6d702e6300104c4d53657443757241705265664e756d0008544d5363726f6c6c000846696c6c4352676e00442e7265706c6163653c5132337374643130636f6c6c6174653c773e3e5f5f513333737464366c6f63616c6533696d704652435132337374643130636f6c6c6174653c773e000c496e69744170706c5a6f6e6500046572666c000100104c4d536574546f704d656e754974656d00084c4d476574564941000c2e73706c69745f626c6f636b002c646f5f646563696d616c5f706f696e745f5f51323373746431356d6f6e657970756e63743c772c313e4346760024646f5f66616c73656e616d655f5f51323373746431316e756d70756e63743c633e434676000100502e65726173655f5f513233737464353962617369635f737472696e673c632c5132337374643134636861725f7472616974733c633e2c5132337374643132616c6c6f6361746f723c633e3e46556c556c00205f5f63745f5f51323373746431356d6f6e657970756e63743c632c313e46556c000440363334000c4c4d4765744b62644c617374001443524d5061727365434150535265736f75726365000c53657454534d437572736f72000100082e5445436c69636b0008436f707942697473000c2e5365745465787456696577000000000000000000000000000000000000006c2e7573655f66616365743c51323373746436366d6f6e65795f7075743c632c51323373746434356f73747265616d6275665f6974657261746f723c632c5132337374643134636861725f7472616974733c633e3e3e3e5f5f33737464465243513233737464366c6f63616c65000c4c6f61645265736f7572636500044d6f766500010010536e644368616e6e656c5374617475730008544d53747265616d000440373432001c5f5f525454495f5f513233737464313273747273747265616d627566000100082e5f5f6c6f67326c001050424847657456496e666f4173796e6300085074496e5265637400046469737000044036333700242e646f5f776964656e5f5f5132337374643863747970653c773e43465043635043635077000100082e5365745265637400082e6973677261706800105f5f6d7369706c5f72645f5f3373746400082e5f5f6d6f6432690008476574436f6c6f72000844726177546578740008496e69745a6f6e6500104154507265466c696768744576656e74000c2e5042526561644173796e63000100086974656d4c697374001050424847657446496e666f4173796e6300104c4d4765744170706c536372617463680004706f7274000100084672616353717274001c5f5f64745f5f513233737464313274696d6570756e63743c773e4676001453657445646974696f6e466f726d61744d01000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100feff02000100ffffffff0709020000000000c000000000000046170000004d6963726f736f667420576f7264205069637475726500feffffff4e4236570f000000576f72642e506963747572652e380000000000000072666600242e5f5f63745f5f513233737464366c6f63616c65465243513233737464366c6f63616c000003006f5f646563696d616c5f706f696e745f5f51323373746431356d6f6e657970756e63743c632c313e43467600010010535042536574446576696365496e666f0010444d556e6d6972726f72446576696365000440343335001443524d476574314e616d65645265736f75726365000100086c696e6550726f6300102e5f5f736f6d5f636865636b5f6e657700142e53494f5558446f436f6e74656e74436c69636b000c415350557365725772697465000100082e776d656d636d70001043617074757265436f6d706f6e656e74000c736574775f5f337374644669000100102e4765744d656e754974656d5465787400082e7374727866726d0008697377616c7068610028646f5f646563696d616c5f706f696e745f5f51323373746431316e756d70756e63743c773e43467600782e756e696e697469616c697a65645f66696c6c5f6e3c5050513333737464366c6f63616c653566616365742c556c2c50513333737464366c6f63616c653566616365743e5f5f337374644650504f0062006a0065006300740050006f006f006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160001000300000006000000ffffffff00000000000000000000000000000000000000000050e441352ec0010050e441352ec00100000000000000000000000057006f007200640044006f00630075006d0065006e007400000000000000000000000000000000000000000000000000000000000000000000000000000000001a000200ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000d00000000100000000000000500530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e000000000000000000000000000000000000000000000000000000280002010500000007000000ffffffff000000000000000000000000000000000000000000000000000000000000000000000000150000000010000000000000050044006f00630075006d0065006e007400530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e000000000000000000000038000200ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000001d0000000010000000000000eca5c1006300090400000012bf000000000001110001000100040000020400000e006a626a62f053f05300000000000000000000000000000000000009041600150e00009a3100009a3100000200000000000000000000000000000000000000000000000000000000000000ffff0f000000000000000000ffff0f000000000000000000ffff0f00000000000000000000000000000000005d0000000000960000000000000096000000960000000000000096000000000000009600000000000000960000000000000096000000140000000000000000000000c600000000000000c600000000000000c600000000000000c600000000000000c60000000c000000d20000000c000000c600000000000000de020000ea000000ea00000000000000ea00000000000000ea00000000000000ea00000000000000ea000000000000009102000000000000910200000000000091020000000000009b020000020000009d020000000000009d020000000000009d020000000000009d020000000000009d020000000000009d0200002c000000c8030000f4010000bc0500006a000000c9020000150000000000000000000000000000000000000096000000000000009102000000000000000000000000000000000000000000006f02000022000000910200000000000091020000000000009102000000000000c9020000000000009b0200000000000096000000000000009600000000000000ea000000000000000000000000000000ea00000085010000ea000000000000009b020000000000009b020000000000009b02000000000000910200000a0000009600000000000000ea000000000000009600000000000000ea000000000000009b0200000000000000000000000000000000000000000000aa0000000e000000b80000000e000000960000000000000096000000000000009600000000000000960000000000000091020000000000009b020000000000009b020000000000009b0200000000000000000000000000009b020000000000009600000000000000960000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009b020000000000000000000000000000de0000000c0000002d79f0b500000000c600000000000000c6000000000000009b020000000000009b020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000104000002040000f80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d036a000000005508016d48000400020004000002040000fd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100040000020400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000169001801fb0c04e20b0c04e21b0dd2622b0de262390dd262490de2625b0000020541cf0eb010000cd0fb35a49b8200f27f086a04e893f120e05000000000000000000006c0000006c000000d0ed1400d0ed1400b901000000fe789c7594518ed33010867fc7b0ee56b0161720e2061c00c9af1c86071e786fb805c709372937b0b45a30bbae87df76d3d869a91bcdf7254e94d833f3fa01f9f785e3dd206f2089f6f97cecf00adff0b5cc780f85fde5cc0f3c90517839b744353c62f782c1c914711fa18d488cd847e09004f309fb13a04e025fd1125345170553c2ee8417c13161cfd7d1c450d110232f13c767a9e7dcb30c130a1e883371e0e3ffcae02b6a62a86888b1a225f2967be218445572a4a9d0813437b4e38c3fa28e1914c167d084d08121c40c969056300ae36f411b1de3d4c403e3bc8d77c01317e21cec5b251ece6bcb20e2b327253f7f5999bdab2e5ab4b7a2a35d3c9960934926bb967c250fce0b8b271b46f9beba583e6d6e5cb67e3cf04f37e5f9678fd5393899b72cae363eb9de8fb677af7b8fe85de07a9fc7debded3d98dea3ee3de9f6fda3932b2fdf7fc3cb7a8ca237eba7bbf535a98c8b2f338a27153f0457f62fd4fdfdf431ef6d3eeea0b8ed57a14d89ff25ce8d04eb12f03a45dbecbd4eec4bced72ab855227d01d5a26a2a6d537f4d552eb5da54f05ad75dad9febbfe90a6ba758bbc7a6a72c9d66ed3f6b53baf429f62c40fe014bff2ff537204170706c69636174696f6e00000042000000900000004200060001000000000006000050726f67494400000001000000000000001300000014457863656c2e4170706c69636174696f6e2e380000000052000000910000005200180001000000000018000056657273696f6e496e646570656e64656e7450726f67494400000001000000000000001100000012457863656c2e4170706c69636174696f6e00000002200000009200000220000b000400000000000c00004c6f63616c53657276657200000000010000000000000010000000105843454c202f6175746f6d6174696f6e0000000300000000000201310000006a4d6163696e746f736820484400000000ffffe6c00000000000000000000000000000b23912456e676c6973682044696374696f6e617279800b302ea00b896a870b896a7003c5353003c5366403c5354c03c5354c000000010000000103c535e8ffffffffaba78158000100000001000000006a4d6163696e746f73682048440000207200003b7e0000000000000000000000000000b2390d4d53205370656c6c696e67203200a7fffff5800b302ea00b896a870b896a7003c5353003c5366403c5354c03c5354c000000010000000103c535e8ffffffffaba78158000100000001000000006a4d6163696e746f736820484400000000feff0000030a01000000000000000000000000000000000001000000e0859ff2f94f6810ab9108002b27b3d930000000680100001000000001000000880000000200000090000000030000009c00000004000000a800000005000000c400000007000000d000000008000000e000000009000000fc00000012000000080100000a000000240100000c000000300100000d0000003c0100000e000000480100000f000000500100001000000058010000130000006001000002000000102700001e00000001000000006f00731e00000001000000006f00731e000000110000004d696b65205765737465726669656c64007200641e0000000100000000696b651e000000070000004e6f726d616c00731e000000110000004d696b65205765737465726669656c64007200641e0000000200000032006b651e000000130000004d6963726f736f667420576f726420382e300064400000000046c323000000004000000000f00a853f24c001400000000036cea83f24c001030000000100000003000000000000000300000000000000030000000000000065744469616c6f67526573494400104c4d5365744375724163746976617465000c2e507253746c4469616c6f67000c6174657869745f66756e637300342e5f5f64745f5f513233737464333562617369635f696f733c632c5132337374643134636861725f7472616974733c633e3e4676000440313433000c5f5f696e697469616c697a650001001043524d5265616c546f4c6f63616c494400104c4d4765744453416c6572745265637400084145507574507472000c74656d705f6e616d65243130000100082e536574506f72740008736e7072696e74660008536176654261636b00046974656d000c2e6d657267655f626c6f636b000465786563000c5f5f7763747970655f6d6170000440313435001c5f5f76745f5f5132337374643134636f64656376743c632c632c693e004c69645f5f51323373746436346e756d5f7075743c772c51323373746434356f73747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e000100086461795f6e616d6500086469666674696d6500104c4d476574536372617048616e646c650008436861725479706500084269745368696674000c2e4275696c644469616c6f6700044031343600542e6666696c6c3c632c5132337374643134636861725f7472616974733c633e3e5f5f337374644652513233737464333562617369635f696f733c632c5132337374643134636861725f7472616974733c633e3e69000c544544656163746976617465000c697564617465737472696e67000100104765745368617265644c69627261727900044039333700044031343700010008666449636f6e494400082e5072436c6f736500082e5f5f6d6f64327500082e5f5f61636f736c000846696c6c43417263000440313438000440323434000c505043577269746553796e63000c505043526561644173796e63000100104c4d536574537973466f6e7453697a65000c2e446f4469736b4576656e74000c2e5042436c6f736553796e63000440313439000440323435000c4c4d4765745468654d656e75000100086974656d52656374000440323436001443727372446576446973706f736544657669636500010008736372704661636500082e697364696769740008636c656172657272000845476574496e666f00542e5f5f63745f5f51323373746436366d6f6e65795f7075743c632c51323373746434356f73747265616d6275665f6974657261746f723c632c5132337374643134636861725f7472616974733c633e3e3e46556c000c444253746172745175657279000100082e5445506173746500205f5f696e69745f5f69645f5f513233737464313274696d6570756e63743c633e000844424765744572720010437273724465764e65774465766963650010544547657453637261704c656e677468000c2e496e69744469616c6f6773000440343430000c537973427265616b46756e63000c536c6565705152656d6f7665000c536574546167427566666572000100605f5f63745f5f513233737464353962617369635f737472696e673c632c5132337374643134636861725f7472616974733c633e2c5132337374643132616c6c6f6361746f723c633e3e4652435132337374643132616c6c6f6361746f723c633e0008466978324672616300104c4d476574537973466f6e7453697a650004403434310001000876696577526563740008434d494f4b696c6c0008636f70797369676e000c4c4d476574435055466c6167000100086269747350726f6300382e5f5f64745f5f513233737464333962617369635f6973747265616d3c632c5132337374643134636861725f7472616974733c633e3e467600104c4d5365744c6173745350457874726100105042445441646449636f6e4173796e630004696e666f000c2e45786974546f5368656c6c000c50616c657474653243546162000100082e66777363616e6600046e616d65000c41454372656174654c697374000100082e5f5f6c6c6d6f6400482e7265706c6163653c513233737464313274696d6570756e63743c633e3e5f5f513333737464366c6f63616c6533696d70465243513233737464313274696d6570756e63743c633e001054454765745374796c6548616e646c650008436c69705265637400044035343100547365656b6f66665f5f513233737464343162617369635f73747265616d6275663c632c5132337374643134636861725f7472616974733c633e3e466c51333373746438696f735f62617365377365656b64697273000100082e476574506f727400185f5f7468726f77735f6261645f616c6c6f635f5f3373746400084765744c6162656c00142e53657443757272656e744469726563746f7279000c556e686f6c644d656d6f7279000c4765744e65774469616c6f67000c4c4d5365745363724852657300010008667258466c616773000440343437000c2e5f5f70746d665f63617374000c496e73657274535254526563000c556e6c6f636b4d656d6f7279000c4c4d5365744b626454797065000100082e76777363616e6600082e72656d71756f6600082e5f5f6365696c6c000440353434001453494f55585570646174655363726f6c6c62617200044034343800044036343000545f5f696e69745f5f69645f5f51323373746436346e756d5f6765743c632c51323373746434356973747265616d6275665f6974657261746f723c632c5132337374643134636861725f7472616974733c633e3e3e000100387573655f66616365743c51323373746431356d6f6e657970756e63743c632c303e3e5f5f33737464465243513233737464366c6f63616c6500084f70656e506f727400044035343500044036343100b42e7265706c6163653c51323373746436366d6f6e65795f6765743c772c51323373746434356973747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e3e5f5f513333737464366c6f63616c6533696d7046524351323373746436366d6f6e65795f6765743c772c51323373746434356973747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e000c496e76616c4d656e75426172000c4c4d53657453637256526573000c4c4d476574446c67466f6e74000100102e53494f5558446f41626f7574426f780008436f6d7036746f31000440353436000440363432000c4765744d61736b5461626c6500145365744469616c6f6744656661756c744974656d00010010535042476574446576696365496e666f0004403534370004403634330001000862617365416464720008746f776c6f77657200082e5f5f72696e746c0018776861745f5f513233737464386261645f6361737443467600104d494449576f726c644368616e67656400046d61696e000440353438001c5f5f64745f5f51333373746438696f735f6261736534496e69744676000c4c4d53657452414d42617365000c4145436f6572636544657363000100105f5f6765745f66696c655f6d6f64657300044035343900546672657365743c632c5132337374643134636861725f7472616974733c633e3e5f5f337374644652513233737464333562617369635f696f733c632c5132337374643134636861725f7472616974733c633e3e6c006c2e7573655f66616365743c51323373746436366d6f6e65795f6765743c632c51323373746434356973747265616d6275665f6974657261746f723c632c5132337374643134636861725f7472616974733c633e3e3e3e5f5f33737464465243513233737464366c6f63616c65000c4c4d47657446434253507472000c4c4d5365745350506f727441000c444d4e6577446973706c6179000100102e53494f5558446f45646974436f7079000853657446496e666f000c4c4d476574535056616c6964000c4c4d5365745350506f727442000c43524d526573657276655246000c5769646553756274726163740001000866725363726f6c6c00485f5f64745f5f36325f526566436f756e7465645074723c513333737464366c6f63616c6533696d702c32365f53696e676c653c513333737464366c6f63616c6533696d703e3e4676000848436c7252426974000440363437000c536869656c64437572736f72000c676574696e64737472696e67000100382e45785050435f556e77696e64537461636b5f5f465031325468726f77436f6e746578745031354d57457863657074696f6e496e666f5076001045646974696f6e486173466f726d617400104c4d5365744453416c65727452656374000440383430000000000000000000000000000000000000000000b42e7265706c6163653c51323373746436366d6f6e65795f7075743c772c51323373746434356f73747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e3e5f5f513333737464366c6f63616c6533696d7046524351323373746436366d6f6e65795f7075743c772c51323373746434356f73747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e000440363438000c4765744f5344656661756c7400010004403735350004403634390014736574707265636973696f6e5f5f337374644669000c4c4d53657453504d69736332000c6665686f6c64657863657074000100087265637450726f6300085f5f6174616e326c0008544d43686f6f7365000440383432000c4c4d5365744b62644c617374000c5042484d6170494453796e630001000853617665466f7265003c78737075746e5f5f513233737464333962617369635f66696c656275663c632c5132337374643134636861725f7472616974733c633e3e4650436369000440383433000c4c4d4765744772617952676e000c476574436172657454696d65000c43616c634d656e7553697a65000100087763747970652e63000866777072696e746600202e5f5f63745f5f5132337374643134636f64656376743c632c632c693e46556c001067feff0000030a0100000000000000000000000000000000000200000002d5cdd59c2e1b10939708002b2cf9ae4400000005d5cdd59c2e1b10939708002b2cf9ae3c010000f80000000c00000001000000680000000f00000070000000050000008c0000000600000094000000110000009c00000017000000a40000000b000000ac00000010000000b400000013000000bc00000016000000c40000000d000000cc0000000c000000d900000002000000102700001e000000110000004279746520576f726b732c20496e632e00300030030000000100000003000000010000000300000000000000030000003a1308000b000000000000000b000000000000000b000000000000000b000000000000001e1000000100000001000000000c100000020000001e000000060000005469746c6500030000000100000000980000000300000000000000200000000100000036000000020000003e00000001000000020000000a0000005f5049445f47554944000200000010270000410000004e0000007b00330045004500320033003900380031002d0039003000300030002d0031003100440034002d0039003100370037002d004300420039003900350036003000340041003100320043007d000000000000000440313534000c47657449636f6e537569746500010010416c6c6f775075726765506978656c7300084c446973706f7365000c696f4472466e6472496e666f0004403834390004403135350001000c2e53797374656d436c69636b000440323532000440313536000c436c6f736552657346696c65000c5365744f5344656661756c74000c50424f70656e574453796e630001000853686f7748696465000100082e6273656172636800282e5f5f63745f5f513233737464366c6f63616c65465243513233737464366c6f63616c6550436369000c684469737061746368526563000440313538000c4c4d5365745468655a6f6e65000100082e5f5f666d696e6c00085f5f6c6f6731706c00505f5f76745f5f51323373746436366d6f6e65795f7075743c632c51323373746434356f73747265616d6275665f6974657261746f723c632c5132337374643134636861725f7472616974733c633e3e3e00505f5f76745f5f51323373746436366d6f6e65795f6765743c772c51323373746434356973747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e00104c4d476574427566546746426b4e756d001050424469724372656174654173796e63000c2e56416374696f6e50726f63000c5f5f72656d61696e6465726c000440313539000100086974656d48616e6400082e5f5f657266636c00084f70656e536c6f74000c2e5f5f70746d665f63616c6c000100087374726572726f7200282e646f5f67726f7570696e675f5f51323373746431356d6f6e657970756e63743c772c303e4346760010537472696e67546f457874656e64656400242e646f5f747275656e616d655f5f51323373746431316e756d70756e63743c633e434676000463657870000100082e746d7066696c650010536e644d616e61676572537461747573000c50416464526573706f6e7365000c4c4d5365745265734c6f616400010008746f77757070657200104f666673637265656e56657273696f6e00010008666453637269707400387573655f66616365743c51323373746431356d6f6e657970756e63743c632c313e3e5f5f33737464465243513233737464366c6f63616c6500085356657273696f6e0010504244544765744150504c4173796e63000474656c6c00442e45785050435f44657374726f794d656d62657241727261795f5f465031325468726f77436f6e746578745043323165785f64657374726f796d656d6265726172726179000100082e5f5f657870326c000c2e496e69744d656e75426172000c2e5472756e63537472696e67001c2e776861745f5f51323373746431306261645f747970656964434676000c436f756e7453796d626f6c73000100044035353000044034353400142e736574696f73666c6167735f5f33737464466c004c7365656b706f735f5f513233737464343162617369635f73747265616d6275663c632c5132337374643134636861725f7472616974733c633e3e465132337374643973747265616d706f7373000c576964654269745368696674000c4e657749636f6e5375697465000100082e6973616c70686100082e66676574706f7300505f5f64745f5f51323373746436346e756d5f7075743c772c51323373746434356f73747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e467600205f5f63745f5f51323373746431356d6f6e657970756e63743c772c303e46556c00104c4d476574546f6f6c5363726174636800044035353100044034353500046361726700046e616e6600010008436f70794d61736b00105365744f535472617041646472657373000440353532002c646f5f74686f7573616e64735f7365705f5f51323373746431356d6f6e657970756e63743c632c313e434676000c4c4d5365745350416c61726d00145365745465787453657276696365437572736f72001c436f6d706f6e656e7446756e6374696f6e496d706c656d656e7465640001001053494f5558497341707057696e646f7700085f5f6174657869740008697378646967697400082e5f5f74616e686c00302e45785050435f4973496e53706563696669636174696f6e5f5f46506350313665785f73706563696669636174696f6e000440353533006c2e726573697a655f5f5132337374643638766563746f723c50513333737464366c6f63616c653566616365742c5132337374643331616c6c6f6361746f723c50513333737464366c6f63616c653566616365743e3e46556c50513333737464366c6f63616c65356661636574001457726974655061727469616c5265736f75726365000c535072696d617279496e6974000c4c4d536574414e756d626572000c4145526573657454696d6572000100086f6e65243137323000285f5f63745f5f51323373746432335f47656e657269635f636f64656376743c772c632c693e46556c00104d6561737572654a7573746966696564000440353534000c4472617731436f6e74726f6c000c4c4d53657444727651486472000100086973776469676974000440363531000472616e64000c476574496e64537472696e67000465787032000100086d7946696c74657200082e776d656d7365740028646f5f646563696d616c5f706f696e745f5f51323373746431316e756d70756e63743c633e4346760010504248536574464c6f636b4173796e63000872696e74746f6c6c000c2e47657450656e5374617465000c696f466c466e6472496e666f00642e5f5f63745f5f513233737464353962617369635f737472696e673c772c5132337374643134636861725f7472616974733c773e2c5132337374643132616c6c6f6361746f723c773e3e46556c7752435132337374643132616c6c6f6361746f723c773e000c4b696c6c436f6e74726f6c730014496e697469616c697a6544696374696f6e617279000100082e5f5f6173696e6c00202e5f5f64745f5f513233737464313563747970655f62796e616d653c633e4676000843616c634d61736b000474696d65000c616e73695f66696c65732e63000440353537002c646f5f74686f7573616e64735f7365705f5f51323373746431356d6f6e657970756e63743c772c303e43467600046e616e6c000100082e5379734265657000102e504244697243726561746553796e63001869645f5f513233737464313274696d6570756e63743c633e0018414553757370656e6454686543757272656e744576656e7400104c4d5365745350436c696b4361726574000474616e66000440353538003c2e78736765746e5f5f513233737464333962617369635f66696c656275663c632c5132337374643134636861725f7472616974733c633e3e465063690004403635340001000873656c537461727400102e5374616e6461726450757446696c650008696f41435573657200085f5f6578706d316c00104c4d476574447261675061747465726e0010504244544164644150504c4173796e6300546677696474683c632c5132337374643134636861725f7472616974733c633e3e5f5f337374644652513233737464333562617369635f696f733c632c5132337374643134636861725f7472616974733c633e3e69000440363535004c69645f5f51323373746436346e756d5f7075743c632c51323373746434356f73747265616d6275665f6974657261746f723c632c5132337374643134636861725f7472616974733c633e3e3e0004403535390014414553657454686543757272656e744576656e74000100082e4e65774d656e7500084465627567676572000440373632000440363536000c4c4d47657456434251486472000474616e68000100082e6d656d6d6f7665001043616c6c436f6d706f6e656e74555050000c2e53494f5558636c72736372000440373633000461746f66000440363537000c4272696e67546f46726f6e740004636162730001000873656c6563746f7200082e5f5f737172746c0020656e645f667265655f5f5132337374643134626173655f616c6c6f6361746f72000440383530000440373634003c2e6f766572666c6f775f5f513233737464333962617369635f66696c656275663c632c5132337374643134636861725f7472616974733c633e3e4669004c5f5f76635f5f513233737464353962617369635f737472696e673c772c5132337374643134636861725f7472616974733c773e2c5132337374643132616c6c6f6361746f723c773e3e46556c00000000000000044036353800010008667372656e616d65000c6469724f70656e2431363038000440373635000c2e5f5f6765745f636c6f636b000c4c4d476574524f4d42617365000100082e5f5f6c6c64697600505f5f525454495f5f51323373746436346e756d5f6765743c772c51323373746434356973747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e0008537973427265616b001053657449636f6e43616368654461746100105265616c6c6f6361746548616e646c65000477686174000477507472000440373636000461746f69000474616e6c000100685f5f63745f5f513233737464333962617369635f6f73747265616d3c632c5132337374643134636861725f7472616974733c633e3e4650513233737464343162617369635f73747265616d6275663c632c5132337374643134636861725f7472616974733c633e3e00185f5f72656769737465725f676c6f62616c5f6f626a656374000470486974000440373637006c2e7573655f66616365743c51323373746436366d6f6e65795f7075743c772c51323373746434356f73747265616d6275665f6974657261746f723c772c5132337374643134636861725f7472616974733c773e3e3e3e5f5f33737464465243513233737464366c6f63616c65000c2e5f5f7465726d696e617465000c4145436f7501000100050000000f000000576f72642e506963747572652e3800030000006e050000056e00000000000e000c001102ff0c00fffe0000012c0000012c000000000000003b00360000000000a101f200044d53574400a10096000604000000000000a0009700a1008c00080004ffff003c003700a101f200044d53574400a10096000604000000000000a1008c0008ffffffff00400040001e0001000a00050000003b00360098000e0008000000740070000800040074007000050000003b0036000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff028000000afe00007ffaff02c000000a02000001f9ff02f000000a02000003f9ff02f800000a02000007f9ff02fc00000a0200000ff9ff02fe0000090200001ff8ff010000090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000090200001ff8ff0100000a0200000ff9ff02fe00000a02000007f9ff02fc00000a02000003f9ff02f800000a02000001f9ff02f000000afe00007ffaff02c000000afe00003ffaff0280000008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f3000000a0008d00a0008d00a10096000604000000000000ff}{\result {\fs20 {\pict{\*\picprop\shplid1077{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureGray}{\sv 0}}{\sp{\sn pictureBiLevel}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fHitTestFill}{\sv 1}}{\sp{\sn fillShape}{\sv 1}}{\sp{\sn fillUseRect}{\sv 0}}{\sp{\sn fNoFillHitTest}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw13\pich13\picwgoal260\pichgoal260\macpict\bliptag293932706\blipupi71{\*\blipuid 11850ea29b023122ca853b233680ed96}053600000000000d000d001102ff0c00ffffffff0000000000000000000d0000000d00000000000000a101f200044d53574400a10096000604000000000000a1008c0008ffffffff00400040001e0001000a00000000000d000d0098000e0008000000740070000800040074007000000000000d000d000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff028000000afe00007ffaff02c000000a02000001f9ff02f000000a02000003f9ff02f800000a02000007f9ff02fc00000a0200000ff9ff02fe0000090200001ff8ff010000090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000090200001ff8ff0100000a0200000ff9ff02fe00000a02000007f9ff02fc00000a02000003f9ff02f800000a02000001f9ff02f000000afe00007ffaff02c000000afe00003ffaff0280000008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f3000000a0008d00ff}}}}}{\fs20 \tab All of the features discussed in this chapter are extensions to Standard Pascal.  They are almost identical to the object extensions found on Macintosh Pascal compilers, but if you will be porting your program to any other platform, you should avoid these features.\~\~\u8710\'c6\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Object Oriented Programming}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Object Oriented Programming\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal supports object oriented programming, implementing the object extensions used by Apple Computer on the Macintosh.  There are three advantages to using this proven object technology:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Since the object extensions and underlying Pascal language are almost identical on the Macintosh and Apple\~II}{\fs18 GS}{\fs20 , you can learn object oriented programming from Macintosh Pascal books.\par 2.\tab The Macintosh toolbox and Apple\~II}{\fs18 GS}{\fs20  toolbox are very similar in overall design and implementation, even though there are many differences in individual calls.  Using the same object extensions makes it easier to port programs between the Macintosh and Apple\~II}{\fs18 GS}{\fs20 .  In fact, with some carefully designed objects that hide the differences between the tools on the two computers, you could write the same program and simply compile it on the different computers.\par 3.\tab Because we're using a proven design that has worked well for years, you can feel confident that the object oriented extensions you see in ORCA/Pascal are robust and complete.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The other chapters in this portion of the ORCA/Pascal reference manual assume you know Pascal well, and are looking up specific information.  This chapter does not assume you already know Object Pascal.  If you refer to an individual section in the chapter, you will find all of the information you need about a particular feature of the compiler, but it will generally be a little wordier than other parts of the language reference.  If you read this chapter front to back, you'll get a quick but complete overview of Object Pascal and how it is used.\par Object Pascal is really two things, though.  This chapter describes the mechanics of the Object Pascal extensions, but to use them effectively, you need to learn some of the ideas behind object oriented programming.  There are many books available that teach the design principles of object oriented programming.  The Macintosh Pascal books are one good source of information.  There are also a number of books that teach the ideas behind object oriented programming without dealing with a specific language.  If you intend to use these extensions, it would be a good idea to get one or more of these books to learn some of the ideas, and get tips on good object oriented program design.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Objects}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Objects\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section describes the mechanics of declaring objects.  An object is a data type that, superficially at least, looks and works like a record.  This section starts with the definition of a record, and gradually introduces objects by discussing the various differences between objects and records.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Objects}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Objects\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Like a record, and object has zero or more fields.  A simple object type declaration looks exactly like a record with the reserved word }{\f6\fs18 object}{\fs20  used instead of the reserved word }{\f6\fs18 record}{\fs20 .\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par    box = object\par       top, bottom, left, right: integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par }{\fs20 \par Unlike a record, an object type can only be declared as a type; you cannot create an object variable and place the type right after it.  For example, this definition is legal for a record, but the same form cannot be used for an object:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    box: record  \{objects cannot be defined like this\}\par       top, bottom, left, right: integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par }{\fs20 \par Object types also have to be declared at the program level of a program, or in the implementation or interface part of a unit.  Object types cannot be defined in the type part of a procedure or function.\par There's a certain amount of terminology that goes along with object oriented programming, and it helps to match those terms up with what you are doing in object Pascal so you can understand what the object oriented programming books, magazines, and so forth are talking about.  The object type is actually called a }{\b\fs20 class}{\fs20 , not an object.  The }{\b\fs20 object}{\fs20  is more closely associated with the variable, as opposed to the type.  As you'll see in a moment, though, more than one variable can refer to the same object.  Fields in an object are called }{\b\fs20 instance variables}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Object Variables}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Object Variables\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An object is defined just like any other variable.  Objects are not restricted to the program level, like the class is.  Unlike records, though, objects must be initialized before they can be used.  We'll look at how objects are initialized in the section "Allocating Objects with New," later in this chapter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    abox: box;\par }{\fs20 \par The object abox is called an }{\b\fs20 instance}{\fs20  of the class box.  It's also proper to call the object a }{\b\fs20 member}{\fs20  of the class, although this term can apply to some other situations, too.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Accessing Instance Variables in Objects}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Accessing Instance Variables in Objects\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You use and assign values to the instance variables in an object as if it were a field in a record.  All of the same rules apply, and the dot operator is still used to dereference the instance variables.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Methods}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Methods\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 methods}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A }{\b\fs20 method}{\fs20  is a procedure or function which is declared in the class and defined later in the program.  The declaration of the methods must follow the declaration of all of the instance variables in the class.  With the exception of where it is located, a method declaration looks and works just like a procedure or function declaration in the interface part of a unit.\par Here's the box class, with three methods added.  We'll see how to define the method in "Defining Methods," later in this chapter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par    box = object\par       top, bottom, left, right: integer;\par       function Area: integer;\par       procedure Fill (ptop, pleft, pbottom, pright: integer);\par       procedure Grow (size: integer);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par }{\fs20 \par Adding methods to an object gives us a neat, tidy, portable way to collect all of the information about a class into one place.  While it's possible to access the instance variables of an object from anywhere in a program where the object itself can be accessed, in general, only the methods in a class use the variables.  In this case, we've defined three methods.  Fill is used to set up the top, bottom, left and right sides of the box.  Area returns the area of the box.  If we're careful to follow the rule that only the methods use the instance variables, we can set up Fill so it always makes sure left is less than right and top is greater than bottom, then use those assumptions in Area to make that method more efficient.  Grow is a method that expands the size of the box by multiplying each instance variable by }{\f6\fs18 size}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Inheritance}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Inheritance\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 inheritance}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can create a class that is based on an existing class.  The process of creating a class based on one that already exists is called }{\b\fs20 inheritance}{\fs20 .  The original class is placed right after }{\f6\fs18 object}{\fs20 , and is enclosed in parenthesis.  All of the instance variables and methods from the original class become a part of the new class.  You can add new instance variables and new methods; it's also possible to replace a method with a newer one.\par Here's the framework for a new class, based on the class box that we've been using throughout this chapter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    cube = object (box)\par       front, back: integer;\par       function Volume: integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par }{\fs20 \par Cube is called a }{\b\fs20 descendent}{\fs20  of box; it's also a }{\b\fs20 subclass}{\fs20 .  Box is the }{\b\fs20 ancestor}{\fs20  of cube; it's also called the }{\b\fs20 superclass}{\fs20 .  Since box doesn't have any ancestors, it's also called a }{\b\fs20 root class}{\fs20 .\par This class still has all of the original instance variables and methods from box, so you can set and read a total of six instance variables (top, bottom, left, right, front and back).  All of the original methods are still there, too, along with the new one, Volume.  This is a very powerful concept, since it lets us create something called a box, and define and work on it in a sensible way, then go back and define a new class that's sort of like a box, but with some new features.  That's really what a cube is, too: a box with a new dimension.  We did this by adding two new variables and a new method, none of which were needed, or made any sense, for a box.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Overriding Methods}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Overriding Methods\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 override}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the last section, we looked at cube, a subclass of box.  Cube was created by adding two variables and a method to an existing class.  The problem is that two of the old methods don't quite work the same way for a cube and a box.  Area still works, and makes sense, but Fill needs to handle six variables instead of four, and Grow will need to deal with the new instance variables, too.\par Replacing existing methods with a different version of the method is called }{\b\fs20 overriding}{\fs20  the method.  To override the method, declare it just like it was new, but follow it with the directive override, like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    cube = object (box)\par       front, back: integer;\par       function Volume: integer;\par       procedure Fill (ptop, pleft, pbottom, pright,\par                       pfront, pback: integer); override;\par       procedure Grow (size: integer); override;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Methods}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Methods\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 {\*\bkmkstart bk19}\par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Defining Methods}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Defining Methods\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For the most part, defining a method works just like defining a procedure in the implementation part of a unit when it has already been declared in the interface part.  In both cases, the definition doesn't list the parameters or function return results a second time.  In fact, the only difference is the name.  The method name is a combination of the class name, a period, and the name of the method itself.  It looks sort of like a record with a field access.  This naming convention is needed so you can distinguish between methods that have the same name, but are declared in two different objects.  It's also perfectly legal to have a normal procedure or function with the same name as a method.\par Here are some of the methods for the box and cube classes.  If you look closely, you'll see that these methods are using the instance variables from the class without using the class or object name; we'll discuss why that works in "The Self Object," later in this chapter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function box.Area;\par \par begin \{Area\}\par Area := (top-bottom)*(right-left);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Area\}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure box.Fill;\par \par begin \{Fill\}\par if ptop < pbottom then begin\par    top := pbottom;\par    bottom := ptop;\par    end \{if\}\par else begin\par    top := ptop;\par    bottom := pbottom;\par    end; \{else\}\par if pright < pleft then begin\par    right := pleft;\par    left := pright;\par    end \{if\}\par else begin\par    right := pright;\par    left := pleft;\par    end; \{else\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Fill\}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure box.Grow;\par \par begin \{Grow\}\par top := top*size;\par bottom := bottom*size;\par left := left*size;\par right := right*size;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Grow\}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function cube.Volume;\par \par begin \{Volume\}\par Volume := (top-bottom)*(right-left)*(back-front);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Volume\}\par }{\fs20 \par All of the normal rules for defining procedures and functions apply to methods, too.  You can, for example, define new procedures and functions that are nested within the method.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\f21\fs20 }{\b\fs20 \tab Note}{\fs20 \tab Macintosh compilers allow the parameter list to be listed a second time, so long as the parameter list exactly matches the one in the class.  They also allow the parameter list to be omitted.  ORCA/Pascal follows the ideas for forward declared procedures in Standard Pascal, which does not allow the parameter list to appear a second time.\~\~}{\f21\fs18 }{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Inheriting Previous Methods}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Inheriting Previous Methods\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 inheritance}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In our example, cube contains two methods that override methods in its ancestor, box.  When we define the methods for cube, we have a choice.  We can create the method from scratch, just like we did for }{\f6\fs18 cube.Volume}{\fs20  in the last section, or we can inherit the previous method, then add any new statements, like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure cube.Fill;\par \par begin \{Fill\}\par inherited Fill(ptop, pleft, pbottom, pfront);\par if pback < pfront then begin\par    back := pfront;\par    front := pback;\par    end \{if\}\par else begin\par    back := pback;\par    front := pfront;\par    end; \{else\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Fill\}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure cube.Grow;\par \par begin \{Grow\}\par inherited Grow(size);\par front := front*size;\par back := back*size;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Grow\}\par }{\fs20 \par Using the inherited method lets us reuse the older method instead of duplicating all of the effort.  There's another even more important advantage to inheriting the older method that really doesn't become obvious until you're using objects that were written a long time ago, or perhaps by someone else: you don't have to know anything at all about the old method, other than what it does.  }{\i\fs20 How}{\fs20  it does what it does is not your problem, and in fact, the original author can make changes and improvements to the original method, and you get the advantages of those improvements by just relinking your program.  If that sounds sort of like a desktop program getting the advantages of a new version of the toolbox, it is \endash  and that's one of the reasons object oriented programming and toolbox programming fit together so well.\par {\*\bkmkend bk19}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 methods}{\rxe bk19}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Using Objects}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using Objects\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Allocating Objects with New}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Allocating Objects with New\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new procedure}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Before looking at how objects are actually used, it might help to understand a little about how they are implemented internally.  When you define an object variable, as in \par \par }{\f6\fs18 var\par    abox: box;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the compiler sets aside four bytes of storage.  It's quite literally a pointer to the object, not the object itself.  Just as with a file, which is also a pointer to a value, you have to take steps to initialize the object \endash  in this case, you have to allocate the memory with the new procedure:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 new(abox);\par }{\fs20 \par New sets aside space for the object, and does some internal initialization so you can call methods.  It does not initialize the instance variables in any way.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\f21\fs20 }{\b\fs20 \tab Note}{\fs20 \tab Macintosh compilers implement objects as handles, not pointers.\~\~}{\f21\fs18 }{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Disposing of Objects with Dispose}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Disposing of Objects with Dispose\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dispose procedure}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Just as with any other variable allocated with new, it's up to the program to dispose of the object when it is no longer needed, like this:\par \par }{\f6\fs18 dispose(abox);\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Passing Messages to Objects (Calling Methods)}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Passing Messages to Objects (Calling Methods)\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 messages}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 methods}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Once an object has been allocated with new, you can call the various methods.  The correct object oriented term for calling a method is passing a}{\b\fs20  message}{\fs20  to the object.  Here's the body of a simple program to set up a box object and calculate the area, before and after growing the object:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par new(abox);\par abox.Fill(10, 10, 0, 0);\par writeln(abox.Area);\par abox.Grow(2);\par writeln(abox.Area);\par dispose(abox);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b The Self Object}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Self Object\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 methods}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Methods are designed to work on the instance variables in an object, but there is no obvious way for the method to know }{\i\fs20 which}{\fs20  object it is supposed to work on.  This is actually handled with the self variable, which is predefined in every method.  The self variable is the object that the message is being sent to.  In the case of\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 abox.Grow(2);\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the message is being sent to the object abox, so self refers to abox.  It's as if there is an implied parameter for every method, and that parameter is the object.  The method itself has an implied with statement, so you don't have to type }{\f6\fs18 self.top}{\fs20  to get at the instance variable top.  In effect, a method acts like it is defined this way:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure cube.Fill (self: cube);\par \par begin \{Fill\}\par with cube do begin\par    ...\par    end; \{with\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Fill\}\par }{\fs20 \par All of the implications of defining this with statement apply, too.  For example, the cube class defined an instance variable called }{\f6\fs18 front}{\fs20 .  If the method defined a variable called }{\f6\fs18 front}{\fs20 , it will be impossible to access that variable, since the compiler would always treat }{\f6\fs18 front}{\fs20  as }{\f6\fs18 self.front}{\fs20 .\par You can use the self parameter explicitly, too.  It's legal, for example, to write Grow this way:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure cube.Grow;\par \par begin \{Grow\}\par inherited Grow(size);\par self.front := self.front*size;\par self.back := self.back*size;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Grow\}\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Assigning Objects}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Assigning Objects\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you assign one object to another, internally, the compiler actually assigns the pointer to the object, not the object itself.  Thinking of this in terms of records, it's like assigning a pointer to a record to another pointer to a record, not like assigning one record to another.  What you end up with, in object oriented programming terms, is two instances of the same object.\par For example, let's define a program that uses two instances of the class box.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    abox, bbox: box;\par \par begin\par new(abox);\par abox.Fill (10, 10, 0, 0);\par writeln(abox.Area);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 bbox := abox;\par }{\fs20 \par One thing that should jump out is that we never used new to initialize bbox.  Thinking about how objects are handled internally, this makes sense: we've assigned a pointer to an object that has already been initialized, so there is no need to call new a second time.  Continuing with the program:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 abox.Grow(2);\par writeln(abox.Area);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 writeln(bbox.Area);\par }{\fs20 \par Both of these writeln statements will print the same value, since abox and bbox are instances of the same object.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 dispose(abox);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end.\par }{\fs20 \par There is no need to dispose of both abox and bbox, since they refer to the same object.  In fact, disposing of the object twice isn't even legal, and would generally lead to a crash or corrupted memory.\par You can make a copy of an object; see "Copying Objects with Clone," later in this chapter, for details.\par It's also possible to assign objects that aren't from the same class, as long as the object being assigned is a descendent of the object being assigned to.  Assuming cube is a descendent of box, all of these assignments are legal:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    abox, bbox: box;\par    acube, bcube: cube;\par \par begin\par new(abox);\par bbox := abox;\par new(acube);\par bcube := acube;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 abox := acube;\par }{\fs20 \par Finally, you can assign nil to an object:\par \par }{\f6\fs18 bcube := nil;\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Files of Objects}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Files of Objects\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 It is legal to create a file of objects, but keep in mind that the objects themselves \endash  in other words, the pointers \endash  are written, not the instances of the objects.  If you want to write the instance variables, you need to write them individually.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 tObject}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 tObject\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tObject}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Assigning objects creates two instances of the same object.  There are many cases where you really need to create a copy of the original object, instead.  The library object tObject can do this; it also has facilities for disposing of objects.\par tObject is defined in the unit ObjIntf, and you do need to put a uses statement in your program to get access to this object.  The uses statement is\par \par }{\f6\fs18 uses ObjIntf;\par }{\fs20 \par The object itself is defined like this:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par    tObject = object\par       function ShallowClone: tObject;\par       function Clone: tObject;\par       procedure ShallowFree;\par       procedure Free;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18       end;\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Copying Objects with Clone}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Copying Objects with Clone\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Clone method}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you send a Clone message to an object, it makes a copy of the object and returns the copy.  To use Clone, you have to declare your own classes as subclasses of tObject.  Here's a previous example, rewritten to use tObject to make a copy of the object.  Compare how this works with the original example, which used an assignment statement instead of sending a Clone message.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 uses\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    ObjIntf;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par    box = object (tObject)\par       top, bottom, left, right: integer;\par       function Area: integer;\par       procedure Fill (ptop, pleft, pbottom, pright: integer);\par       procedure Grow (size: integer);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par \par    \{define the methods here\}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    abox, bbox: box;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par new(abox);\par abox.Fill (10, 10, 0, 0);\par writeln(abox.Area);\par bbox := box(abox.Clone);\par abox.Grow(2);\par writeln(abox.Area);\par writeln(bbox.Area);\par dispose(abox);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end.\par }{\fs20 \par In this example, the area printed for bbox will be different from the area printed for abox, since there are two different object involved, and only the object abox has grown.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Disposing of Objects with Free}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Disposing of Objects with Free\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Free method}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Free method gives you another way to dispose of an object.  Free is generally used when you need to do more than just dispose of the object.  For example, if one of the instance variables in an object is a window pointer, you might want to close the window as a part of disposing of the object.  By overriding Free with your own version, you can easily add the code to dispose of the window.\par That may seem like a lot of trouble, but it helps stick with the object oriented programming paradigm.  If you use Free to dispose of all of your objects, your methods don't have to deal with any special cases, or even know if any special cases exist.  Whether there is any extra work to do when disposing of an object or not, Free will always do the job completely and accurately.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ShallowClone and ShallowFree}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ShallowClone and ShallowFree\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ShallowClone method}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ShallowFree method}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Clone and Free are there for your program to override.  You can override Clone to do additional initialization on objects, like opening new windows.  You can override Free to do additional work before disposing of an object, like closing windows.\par ShallowClone and ShallowFree do the same thing as Clone and Free, but you should not override these methods.  These methods are the primitives.  You should leave them available and unmodified, so you have a safe way to create a new object or dispose of an old one when you need to avoid any additional initialization.\par }\pard \widctlpar\adjustright {\*\bkmkend bk20}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}{\rxe bk20}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 15:   The Program\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 15 - The Program\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 15 \endash  The Program\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20  program\par \par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1078{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex74\picscaley74\piccropl0\piccropr0\piccropt0\piccropb0\picw435\pich194\picwgoal8700\pichgoal3880\macpict\bliptag1979661620\blipupi72{\*\blipuid 75ff3d34e65ba2e52deb1c4083881da7}04330000000000c201b31101a10064000c574f52440000000000c201b301000a0000000000c201b322001500ed24000a00000000000000000b001b001b44000c0111001f0124484400ae00a500c100b84844008a00ed009d01124834008a009c009d00d33844008a0050009d007e4844003001590043016c4834003000ff004301363844003000d2004300e5483400300078004300af3844003000270043005e48a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002b333b0770726f6772616da00097a10096000c0300000001000000000000002b51010a6964656e746966696572a00097a10096000c03000000010000000000000029850a6964656e746966696572a00097a10096000c030000000100000000000000295a0129a00097a10096000c030000000100000000000000280096005d05626567696ea00097a10096000c03000000010000000000000029460973746174656d656e74a00097a10096000c030000000100000000000000295603656e64a00097a10096000c0300000001000000000000002800ba00ad013ba00097a10096000c03000000010000000000000028003c00db0128a000970affffffffffffffff64002f001e0043003200f6003022003900031c0064002f006f0043008300f60030220039005d1300a10096000c0300000001000000000000002800180119012ca0009764002f00c9004300dd00f6003022003900ae1c0064002f00f60043010a00f6003022003900e4130064002f01500043016400f6003022003901351c00220054001e0012220039014700dc64000b011a001f012e00420030220015012b1c00200054001e005401a12300ee64005c00420070005600f60030220066001e250022006600ed120023001b6400890093009d00a700f60030220093007d170064008900e4009d00f800f6003022009300d21300640089011f009d013300f6003022009301110f006400890150009d016400f60030220093013e13006400ad00ae00c100c2004200302200b700bf1c0022009300db00242200b7008a1b0064002f01880043019c00f60030220039016b1e00220039019d090022003900c000ca21000301740a000000000000000034005d004b007000ee380affffffffffffffff64002f016b0043017fffe8003023002e64002f00e4004300f8ffe8003022001500ed001c0a00000000000000004400300191004301b248a10096000c0300000001000000000000002b8724013ba00097200081001e008100ff0affffffffffffffff6400890081009d0095009c003022009b008a001ca10096000c0300000001000000000000002800690081106465636c61726174696f6e2070617274a00097220081001e00126400890046009d005a00f600302329000a000000000000000044008a0128009d014448a10096000c0300000001000000000000002bb32d012ea00097ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 external variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 blocks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program header}}}{\fs20 A Pascal program consists of a program header, a declarations section, a block, and a period.  The program header consists of the reserved word }{\f6\fs18 program}{\fs20 , followed by an identifier that is the program name, a possibly empty list of external variables separated by commas and enclosed in parentheses, and a semicolon.  The format for the declarations section and block are covered in future chapters.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program name}}}{\fs20 The name of the program is defined at the program level.  It has no further significance, and can be reused later in the program.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 errorOutput}}}{\fs20 External variables are variables whose value is assigned at program execution time.  The mechanism is left unspecified by Pascal, and in fact no mechanism is required to exist.  In ORCA/Pascal, with the exception of the predeclared file variables }{\f6\fs18 input}{\fs20 , }{\f6\fs18 output}{\fs20  and}{\f6\fs18  errorOutput}{\fs20 , there is no difference between a program that declares variables in the program header and one that does not.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files\: input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files\: output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 errorOutput}}}{\fs20 Two predeclared file variables are required in Standard Pascal, }{\f6\fs18 input}{\fs20  and }{\f6\fs18 output}{\fs20 .  In addition, ORCA/Pascal supports }{\f6\fs18 errorOutput}{\fs20 , which functions exactly like output, except that the characters are sent to the Apple\~II}{\fs18 GS}{\fs20  error output device, rather than the standard output device.  If these files are used in a program, they must appear in the program header.  When }{\f6\fs18 input}{\fs20  is included in the program header, it becomes defined as a text variable.  It is implicitly initialized with a}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 reset procedure}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 input redirection}}}{\fs20  }{\f6\fs18 reset(input)}{\fs20 .  Further applications of }{\f6\fs18 reset}{\fs20  to the input file have no effect.  In most cases, characters read from }{\f6\fs18 input}{\fs20  will come from the keyboard.\par The second predeclared file variable is }{\f6\fs18 output}{\fs20 .  If output appears in the program header, a }{\f6\fs18 rewrite(output)}{\fs20  is generated by the compiler.  Further applications of}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 rewrite procedure}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output redirection}}}{\fs20  }{\f6\fs18 rewrite}{\fs20  to the output file have no effect.  Output generally goes to the text screen, but like input, output can be redirected.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1079{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab The file }{\f6\fs18 erroroutput}{\fs20  is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The last predeclared file variable is }{\f6\fs18 erroroutput}{\fs20 .  It functions exactly like }{\f6\fs18 output}{\fs20 , except that characters sent to }{\f6\fs18 erroroutput}{\fs20  are passed to the Apple\~II}{\scaps\fs20 gs}{\fs20  error output device, rather than the standard output device.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output redirection}}}{\fs20 \par With the exception of }{\f6\fs18 input}{\fs20 , }{\f6\fs18 output}{\fs20  and }{\f6\fs18 erroroutput}{\fs20 , all variables listed in the program header must be declared in the declaration part of the program block.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example programs:\par \par }{\f6\fs18 \tab \{the smallest legal Pascal program\}\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab program s;begin end.\par \par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab \{the classic first program\}\par \tab program greetings(output);\par \par \tab begin\par \tab writeln('Hello, world...');\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab end.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 16:  Units\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 16 - Units\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 16 \endash  Units\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 unit\par }\pard \qc\widctlpar\adjustright {\fs18 {\pict{\*\picprop\shplid1080{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex63\picscaley63\piccropl0\piccropr0\piccropt0\piccropb0\picw375\pich456\picwgoal7500\pichgoal9120\macpict\bliptag-1540546393\blipupi72{\*\blipuid a42d20a7aacb0b5051f0599444278142}08420007000701cf017e1101a00082a0008c01000a0007000701cf017e0a00000000000000000b001b001b4400e2002e00f5009b48a100960006060000000202a1009a0008fffd000000220000a000980300150d000a2b42ee0e696d706c656d656e746174696f6ea00099a00097a0008da0008c34002e002e0041007738a100960006060000000202a1009a0008fffd000000140000a0009828003a003e09757365732070617274a00099a00097a0008da0008c340052002e006500bf38a100960006060000000202a1009a0008fffd000000330000a000982b062418636f6e7374616e7420646566696e6974696f6e2070617274a00099a00097a0008da0008c340076002e0089009b38a100960006060000000202a1009a0008fffd000000290000a00098280082003b147479706520646566696e6974696f6e2070617274a00099a00097a0008da0008c34009a002e00ad00bf38a100960006060000000202a1009a0008fffd000000340000a000982b0824197661726961626c65206465636c61726174696f6e2070617274a00099a00097a0008da0008c3400be002e00d100bf38a100960006060000000202a1009a0008fffd0000003f0000a000982800ca00381a70726f6365647572652d66756e6374696f6e2068656164696e67a00099a00097a0008da000aa6100090025001d003900f60030220013000a1c00a000ad22003700765a00230012a000aa61003f001300530027004200302100490024a000ad200025001c00eb001ca000aa61005100250065003900f6003022005b001c0a00a000ad22005b00be1200230012a000ab6100630013007700270042003020006d0024006d00d0a000ada000aa61007500250089003900f6003022007f001c0a00a000ad22007f009a3600230012a000aa6100870013009b0027004200302100910024a000ada0008c44000a002e001d007748a100960006060000000202a1009a0008fffd000000080000a00098280016004a04756e6974a00099a00097a0008da0008c34000a0088001d00e338a100960006060000000202a1009a0008fffd000000130000a0009829580a6964656e746966696572a00099a00097a0008da0008c54000a00fd001d011058a100960006060000000202a1009a0008fffd000000020000a000982963013ba00099a00097a0008da000aa610009007f001d009300f6003022001300760a00a000ada000aa61000900f4001d010800f6003022001300e21300a000ada000aa6100090118001d012c00f60030220013010f0a00a000ad220013017b0012210025001ca000aa61002d00250041003900f60030220037001c0a00a000ada000aa610099002500ad003900f600302200a3001c0a00a000ad2200a300be1200230012a000ab6100ab001300bf0027004200302000b5002400b500d0a000ada000aa6100bd002500d1003900f600302200c7001c0a00a000ad2200c700be1200230012a000aa6100cf001300e30027004200302100d90024a000ad2200eb001c0000a000aa6100e1002500f5003900f60030230a00a000ad2200eb009a24002300122100fd001ca0008c340106002e0119007738a100960006060000000202a1009a0008fffd000000140000a00098280112003e09757365732070617274a00099a00097a0008da0008c34012a002e013d00bf38a100960006060000000202a1009a0008fffd000000330000a000982b062418636f6e7374616e7420646566696e6974696f6e2070617274a00099a00097a0008da0008c34014e002e0161009b38a100960006060000000202a1009a0008fffd000000290000a0009828015a003b147479706520646566696e6974696f6e2070617274a00099a00097a0008da0008c340172002e018500bf38a100960006060000000202a1009a0008fffd000000340000a000982b0824197661726961626c65206465636c61726174696f6e2070617274a00099a00097a0008da0008c340196002e01a900e338a100960006060000000202a1009a0008fffd0000004e0000a000982801a2003a2270726f6365647572652d66756e6374696f6e206465636c61726174696f6e20706172299a0174a00099a00097a0008d22010f00765a00230012a000aa6101170013012b0027004200302101210024a000ada000aa6101290025013d003900f60030220133001c0a00a000ad22013300be1200230012a000ab61013b0013014f0027004200302001450024014500d0a000ada000aa61014d00250161003900f60030220157001c0a00a000ad220157009a3600230012a000aa61015f001301730027004200302101690024a000ada000aa61010500250119003900f6003022010f001c0a00a000ada000aa61017100250185003900f6003022017b001c0a00a000ad22017b00be1200230012a000ab6101830013019700270042003020018d0024018d00d0a000ada000aa610195002501a9003900f6003022019f001c0a00a000ad22019f00e212002300122000fd001c01c3001ca000aa6101a7001301bb0027004200302001b100f401b10024a000ada000aa6101b9002501cd003900f600302201c3001c0a00a000ada0008c4401ba002e01cd007748a100960006060000000202a1009a0008fffd000000090000a000982801c6004903656e64a00099a00097a0008da0008c44000a0121001d016a48a100960006060000000202a1009a0008fffd000000130000a00098280016013209696e74657266616365a00099a00097a0008d22001301691200a0008c5401ba009101cd00a458a100960006060000000202a1009a0008fffd000000020000a000982801c60099012ea00099a00097a0008da000aa6101b9008801cd009c00f600302201c300761300a000ada000aa6101b900b501cd00c900f600302201c300a31300a000ada00083ff}}{\fs18 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1081{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Units are an extension to Standard Pascal.  They are not available on many mainframe implementations of the language.\~\~\u8710\'c6\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkstart bk21}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 separate compilation}}}{\fs20 UCSD Pascal made several additions to Standard Pascal.  One of the most universally adopted is the unit.  Like programs, units consist of declarations of constants, types, variables, procedures and functions, but unlike programs, a unit cannot be executed.  Instead, units are used to create libraries, or to break large programs up into smaller, modular collections of similar procedures and functions.  While a unit cannot be executed, it is certainly possible to create a program which executes procedures and functions from the unit.\par A unit consists of three parts.  The first part is the unit header.  The header starts with the reserved word }{\f6\fs18 unit}{\fs20 , and is followed by the name of the unit and a semicolon.  Like the name of a program, the name of the unit has no significance in the rest of the source file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox\:interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS interfaces}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extern directive}}}{\fs20 The next part of the unit is the interface part.  The interface part starts with the reserved word }{\f6\fs18 interface}{\fs20 .  It contains a constant, type and variable section that is coded exactly like the corresponding sections in a program.  All of these may be accessed from the remainder of the unit, or from any unit that uses the unit where they are defined.  The remainder of the unit consists of procedure and function headers.  These headers are coded exactly like forward declared procedures in a program, with the exception that the directive forward is omitted.  Externally declared procedures, tool interfaces and ProDOS interfaces may also be declared in this section.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extern directive}}}{\fs20 Immediately after the interface section is the implementation section.  It starts with the reserved word }{\f6\fs18 implementation}{\fs20 .  The implementation section consists of a constant section, a type section, a variable section, and procedures and functions.  These sections follow the same rules as the corresponding sections in a program.  Any procedure or function defined in the interface part that was not defined as external, a tool, or a ProDOS interface must appear in the implementation part.  As with the definition of a forward declared procedure, the parameter list and function return type are not repeated in the declaration.  Any constants, types or variables that appear in the implementation section, and any procedures and functions whose header did not appear in the interface part, can only be used from within the unit.  Their names are hidden from other units and from the program that uses the unit.  It is even possible, for example, to create two units, each of which has a procedure or function with the same name, so long as all but one of the procedures or functions appears only in the implementation part.\par The structure of units is such that a program using units resembles a tree.  While a unit can be, and often is, used by more that one other unit in a complex program, there are cases when a procedure or function is needed in a unit that is used by the unit where it is defined.  For example, unit A may declare a procedure called GotoXY, but GotoXY may need some output routine defined in unit B.  If unit B has a procedure that calls GotoXY, the structure of the unit starts to break down.  There are several programming strategies that can be used to handle this situation.  First, the two units can be combined.  From the standpoint of creating a well-structured set of units, this is usually the best solution.  The second possibility is to create a third unit which has GotoXY and the procedure or function from unit B that GotoXY calls.  This solution usually works best with constants, types and variables.  In a program that consists of multiple units, there is generally one unit (we call it Common) that contains constants, types, variables and a few low-level procedures and functions that are used throughout the program.  As a last resort, the procedure used by GotoXY can be declared as an }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extern directive}}}{\fs20 external procedure in the implementation part of unit A.  So long as a procedure or function appears in the interface part of some unit, or in the main program, it can be defined as external from any other part of the program, and used successfully.  The only caveat is to insure that the external definition is in the implementation part of the unit.  If the external definition appears in the interface part, the definition may conflict with the definition of the actual procedure.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox\:interface files}}}{\fs20 For samples of units that are used as toolbox interface files, see the TOOL.INTERFACE folder of the extras disk.  See the section on the uses statement in the next chapter for details on how to use a unit from another unit or from a program.{\*\bkmkend bk21}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 units}{\rxe bk21}}}{\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 17:  The Definition Section\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 17 - The Definition Section\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 17 \endash  The Definition Section\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 definition section\par }\pard \qc\widctlpar\adjustright {\b\fs20 {\pict{\*\picprop\shplid1082{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex75\picscaley75\piccropl0\piccropr0\piccropt0\piccropb0\picw296\pich356\picwgoal5920\pichgoal7120\macpict\bliptag-1362321769\blipupi72{\*\blipuid aecc9e971a36ad662ae351a35d7a5478}034800000000016401281101a10064000c574f5244000000000164012801000a00000000016401280a000000000000000034006f0056008200f938a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002b7b7b1b202020636f6e7374616e7420646566696e6974696f6e2070617274a000973400a5005600b800f93820000c0029015900290affffffffffffffff640002004d0016006100f6003022000c00034b0064001d0020003100340042003020002700310027010a22000c00f8120023001b640038004d004c006100f600302200420029250064006e004d0082006100f60030220078002925006400a4004d00b8006100f600302200ae0029250064014f01130163012700f600302001590029015901140a00000000000000003400390056004c00f9383400030056001600f938a10096000c03000000010000000000000028000f009409757365732070617274a0009722004200f812000affffffffffffffff6400530020006700340042003020005d0031005d010aa10096000c0300000001000000000000002800450085166c6162656c206465636c61726174696f6e2070617274a00097220042010a001b22007800f8120023001b6400890020009d00340042003020009300310093010aa10096000c0300000001000000000000002b046c147479706520646566696e6974696f6e2070617274a000972200ae00f8120023001b6400bf002000d30034004200302000c9003100c9010a6400da004d00ee006100f600302200e4002925000a00000000000000003400db005600ee00f9382200e400f8120023001b0affffffffffffffff6400f5002001090034004200302000ff003100ff010aa10096000c0300000001000000000000002800e6007c197661726961626c65206465636c61726174696f6e2070617274a00097640110004d0124006100f6003022011a002925000a00000000000000003401110056012400f93822011a00f8120023001b0affffffffffffffff64012b0020013f00340042003020013500310135010aa10096000c03000000010000000000000028011d005f2570726f63656475726520262066756e6374696f6e206465636c61726174696f6e2070617274a00097ff}}{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 definition section}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 blocks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 labels}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\v\fs20 \par }{\fs20 The first part of a block is the definition section.  It is here that the variables, constants, types, labels, procedures and functions that are used by the block are defined.  This chapter discusses all of these except for the declaration of procedures and functions - those are discussed in the next chapter.\par One point worth noting is that the order of the parts in the header of the block must not be changed.  While procedures and functions can be mixed, labels, if used, must come before any other part of the header; constants, if used, must come next; and so on.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Uses}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Uses\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1083{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab }{\pard\plain \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 uses statement\bxe }}}{\fs20 The uses statement is an extension to Standard Pascal.  It is used to access interfaces to units which have already been compiled.  Units are covered in Chapter 16.\~\~\u8710\'c6\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 units}}}{\fs20 The uses statement must appear before any other declarations in the block, including declarations of labels.  After the uses keyword, a list of the units to use appears, with multiple units separated by commas.  The statement ends with a semicolon.  Each of the units listed is opened, in turn, and the declarations from that unit are processed.\par It is possible for a unit to include a uses for another unit.  For example, a unit can be defined which contains all of the types and constants that are used in the other portions of a separately compiled program.  A simple example is a unit that declares several string sizes:\par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\pard\plain \qj\li360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 units\: examples}}}{\f6\fs18 unit Common;\par \par interface\par \par type\par    string20  = string[20];\par    string80  = string[80];\par    string255 = string[255];\par    stringMax = string[maxint];\par \par    string255Ptr = ^string255;\par    stringMaxPtr = ^stringMax;\par \par implementation\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Another unit in the program might declare a string search function which accepts two parameters, a pointer to a target string of type string255, and a pointer to a string to search of type stringMax.  This unit might look like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 unit Strings;\par \par interface\par \par uses Common;\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 function Find (target: string255Ptr; buffer: stringMaxPtr): integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 implementation\par \par function Find;\par \par begin\par \{code for Find goes here\}\par end;\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end.\par }{\fs20 \par If another part of the program will be using the strings unit, the common unit must also be listed in the uses statement, and must appear before the strings unit.  This is because the interface part needs the type definitions from the common unit, which are not available unit after the header for the common unit has been processed.  If the strings unit is used before the common unit, an error will result.  The correct statement, then, for a unit or program that needs access to the strings unit, is\par \par }{\f6\fs18 uses Common, Strings;\par }{\fs20 \par More than one unit may be used in the same block by coding one uses statement immediately after another.  The previous example can also be coded as\par \par }{\f6\fs18 uses Common;\par uses Strings;\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCAPascalDefs}}}{\fs20 When you use a unit, the compiler actually looks for an interface file created when the unit was compiled.  The compiler begins its search by looking in the library prefix}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\fs20 , using the pathname 13:ORCAPascalDefs.  If the interface file is not found there, the compiler continues the search with the default prefix, 8:.  You can use the LibPrefix directive to tell the compiler to look in some other folder.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Labels}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Labels\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\fs20 label declaration part\par }\pard \qc\keepn\widctlpar\adjustright {\f12 {\pict{\*\picprop\shplid1084{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley67\piccropl0\piccropr0\piccropt0\piccropb0\picw321\pich69\picwgoal6420\pichgoal1380\macpict\bliptag-1890162076\blipupi72{\*\blipuid 8f566a64b1572bc6cb5079264fc6852a}01cf00070007004c01481101a00082a000aa01000a00070007004c0148610009002c001d004000f60030220013000a2300a000ada000aa610009009a001d00ae00f60030220013006f2c00a000ada000aa6100090104001d011800f6003022001300d92c00a000ada000aa610009013c001d015000f6003022001301211c00a000ad0a00000000000000000b001b001b44000a010d001d01244844000a0035001d00704834000a00a3001d00da3822002500915100a000ab6100090088001d009c009c003022001b0091000aa000ada100960006060000000258a1009a0008fffd000000020000a0009803364f0d000a2800160117013ba00099a00097a100960006060000000258a1009a0008fffd000000090000a000982800160049056c6162656ca00099a00097a100960006060000000258a1009a0008fffd000000090000a00098296d056469676974a00099a0009744003700b3004a00ca4822001300e20012a000ab6100090076001d008a009c003022001b007f0025a000ad22004000b3cc00a000ab61003600c0004a00d40042003022004000d12300a000ad22001300f4002da100960006060000000258a1009a0008fffd000000020000a000982b072d012ca00099a00097a00083ff}}{\f12 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 labels\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto statement}}}{\fs20 Labels are used as the destination for the goto statement.  They have no other use in Pascal.  Any label used in a block must be declared in this part of the header.  Each label is an integer ranging from 1 to 9999.  A label cannot be declared twice in the same header.\par If a label is listed in the header, it must occur in the block.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }{\f6\fs18 \tab lab\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab    1,03,999;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Constants}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Constants\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 constant definition\par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1085{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex75\picscaley74\piccropl0\piccropr0\piccropt0\piccropb0\picw429\pich176\picwgoal8580\pichgoal3520\macpict\bliptag-629458352\blipupi72{\*\blipuid da7b3a5046e104e5b590026a0be1c40a}03870000000000b001ad1101a10064000c574f52440000000000b001ad01000a0000000000b001ad64001400150028002900f6003022001e000313000a00000000000000000b001b001b440015001e002800554844001500f60028010948340015008a002800d3380affffffffffffffff64001400810028009500f6003022001e00542e0064001400ed0028010100f6003022001e00d21c00a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002b9b200a6964656e746966696572a00097a10096000c0300000001000000000000002963013da000970a000000000000000034006f00db008201363834004b00db005e01363844006f00780082008b4822001e0108120023001b21003900420affffffffffffffff64004a006f005e008300f6003022005400541c0064005c00b7007000cb00f600302200660042760064006e006f0082008300f6003022007800541c00220078008a1b00a10096000c030000000100000000000000280020003105636f6e7374a00097220054008a1b0064005c009c007000b0ffe8003023000a6c009c003022006e00a5000a220054005400242200390042006c22005400c0002464006e00d2008200e600f6003023130064004a00d2005e00e600f6003022005400c0130064004a0162005e017600f6003022005401352e0064006e01470082015b00f6003022007801351300a10096000c0300000001000000000000002bb5370f756e7369676e6564206e756d626572a00097a10096000c03000000010000000000000028007a00e513636f6e7374616e74206964656e746966696572a000970a000000000000000034009c005d00af00b838a10096000c0300000001000000000000002800a800661263686172616374657220636f6e7374616e74a0009744004b0078005e008b48a10096000c030000000100000000000000280057007f012ba00097a10096000c0300000001000000000000002b0224012da000970affffffffffffffff64009b005400af006800f600302200a5004213002000a500b700a5015064004a0147005e015b009c00302300b7640014005d00280071ffe80030220016006600ed21000301860a000000000000000044004b016b005e017e480affffffffffffffff64004a0198005e01ac00f60030220054017d1c00220054018600afa10096000c0300000001000000000000002800560174013ba00097ff}}{\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\bxe }}}{\fs20 The constant part of the header is used to assign names to values used in the statement part of the block.  Constants can be defined for any }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 scalar type, including reals, integers, characters, booleans, subranges and enumerations.  Constant strings are also valid.  A leading + or - sign is valid on real and integer constants, but no other operations are allowed.  You cannot, for example, define a constant as another constant plus one.  Internally, integer constants are stored in two bytes if the specified value is within the range -maxint to +maxint.  An integer  constant  which  is  less  than -maxint or greater than +maxint will be stored in four bytes.  An integer constant which is not within the range -maxint4 to +maxint4 will be flagged as an error by the compiler.  All real constants are represented internally in the SANE 10-byte extended format.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 const\par    one            = 1;\par    minusone       = -one;\par    pi             = +3.141593;\par    filename       = 'myfile';\par    failing        = 'F';\par    sky_is_falling = false;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    best_color     = red;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Types}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Types\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 type declaration part\par }\pard \qc\li120\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1086{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex68\picscaley68\piccropl0\piccropr0\piccropt0\piccropb0\picw384\pich492\picwgoal7680\pichgoal9840\macpict\bliptag2061375224\blipupi72{\*\blipuid 7ade16f8599b40e7b3e1bd54181e5ff2}07ff0007000701f301871101a0008201000a0007000701f301870a000000000000000034017b0091018e00da383401600091017300e338a000aa610009001c001d003000f60030220013000a1300a000ad0b001b001b44000a0025001d005c4844000a00fd001d01104834000a0091001d00da38a000aa6100090088001d009c00f60030220013005b2e00a000ada000aa61000900f4001d010800f6003022001300d91c00a000ada100960006050000000258a1009a0008fffd000000130000a0009803364f0d000a2ba4160a6964656e746966696572a00099a00097a100960006060000000258a1009a0008fffd000000020000a000982960013da00099a00097a0008c3400400091005300da38a100960006050000000202a1009a0008fffd000000130000a0009828004c00a40a6964656e746966696572a00099a00097a0008da0008c34006400be0077010738a100960006050000000202a1009a0008fffd000000130000a000982b2d240a6964656e746966696572a00099a00097a0008da100960006050000000258a1009a0008fffd0000000a0000a0009828001600380474797065a00099a0009744008800d9009b00ec484400640091007700a44844006401210077013448a000ab610009005b001d006f009c003020001b006401d50064a000ad220013010f120023001b21002e006d21019f006da000aa61003f00880053009c00f60030220049006d1c00a000ad20004900d90049017ba000aa61006300880077009c00f6003022006d006d1c00a000ada000aa61006300b5007700c900f6003022006d00a31300a000ada000aa61006301180077012c00f6003022006d01061300a000ad22006d010f002423dc0022009100d9d30022006d00ac0024a000aa61006301720077018600f6003022006d01334000a000ada000aa6101b0017201c40186ffe80030200049017b01b2017ba000ada000aa6100ab008800bf009c00f600302200b5006d1c00a000ada0008c4401ba017201cd018548a100960006060000000202a1009a0008fffd000000010000a000982801c6017a013ba00099a00097a0008d4400d0009100e300a4484400ac00f400be011048a000aa6100ab00eb00bf00ff00f600302200b500d91300a000ada000aa6100ab011800bf012c00f600302200b5010f0a00a000ad3401450091015800e338a0008c3400d000c700e3011038a100960006050000000202a1009a0008fffd000000130000a000982800dc00da0a6964656e746966696572a00099a00097a0008da000aa6100ab017200bf018600f600302200b501690a00a000ada0008c3400ac009100bf00da38a100960006050000000202a1009a0008fffd000000120000a000982800b800a408636f6e7374616e74a00099a00097a0008da100960006060000000258a1009a0008fffd000000010000a0009828007000990128a00099a00097a100960006060000000258a1009a0008fffd000000010000a0009829900129a00099a00097a100960006060000000258a1009a0008fffd000000010000a0009828009400e1012ca00099a00097a100960006050000000258a1009a0008fffd000000070000a000982b1d24022e2ea00099a00097a100960006060000000258a1009a0008fffd000000010000a000982800dc0099015ea00099a00097a0008c3400ac012100bf016a38a100960006050000000202a1009a0008fffd000000120000a000982800b8013408636f6e7374616e74a00099a00097a0008da000aa6100cf008800e3009c00f600302200d9006d1c00a000ada000aa6100cf00be00e300d200f600302200d900a31c00a000ada000aa6100cf017200e3018600f600302200d9010f6400a000ada000aa6101170088012b009c00f60030220121006d1c00a000ad4401180091012b00d148a100960006050000000258a1009a0008fffd0000000f0000a0009828012400a4067061636b6564a00099a00097a000a022012100d0120023001ba000a1a000ab6101320064014600780042003022013c00756d00a000ada000aa61015f00880173009c00f60030220169006d1c00a000ada000aa61014400880158009c00f6003022014e006d1c00a000ada100960006050000000258a1009a0008fffd000000150000a000982b032b0a61727261792074797065a00099a00097a100960006050000000258a1009a0008fffd000000170000a0009828016c00a40b7265636f72642074797065a00099a00097a100960006050000000258a1009a0008fffd000000110000a000982a1b087365742074797065a00099a00097a0008c3400f40091010700e338a100960006050000000202a1009a0008fffd000000170000a0009828010000a40b737472696e672074797065a00099a00097a0008da000aa61017a0088018e009c00f60030220184006d1c00a000ad340196009101a900da38a000aa610195008801a9009c00f6003022019f006d1c00a000ada100960006050000000258a1009a0008fffd000000120000a000982aa20966696c652074797065a00099a000972001d5006401d5017ba000aa61014401720158018600f6003020014e00e2014e0173a000ada000aa61015f01720173018600f6003020016900e201690173a000ada000aa61017a0172018e018600f6003020018400d901840173a000ada000aa610195017201a9018600f6003020019f00d9019f0173a000ada000aa6100f301720107018600f600302000fd00e200fd0173a000ada000aa6101e6017201fa0186ffe800302201cc017b001ca000ada000aa6100f300880107009c00f600302200fd006d1c00a000ada00083ff}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types\bxe }}}{\fs20 The type section allows you to define a type that can be used later to declare variables or other types.   An identifier used as a type can be any of the types provided by ORCA/Pascal, or it can be a user-defined type.  The predefined basic types in ORCA/Pascal include integer, longint, byte, char, real, double, extended, comp and set.  The predefined derived types in ORCA/Pascal are enumerations, subranges, arrays, records, objects and files.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 The type string is not really a new type; rather, it is mnemonic for }{\f6\fs18 packed array [0..n] of char}{\fs20 , where }{\f6\fs18 n}{\fs20  is greater than one and less than 256, or }{\f6\fs18 array [0..n] of char}{\fs20  when n is greater than 255.  The syntax for specifying variables of type string is }{\f6\fs18 string[size]}{\fs20 .  If size is omitted, then the string is defined to be of length 80 characters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par }{\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    name = string[20];\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 records\: examples}}}{\f6\fs18 House = record\par       bedrooms: integer;\par       baths: integer;\par       den,kitchen,dining_room: boolean;\par       price: real;\par       end;\par    matrix = packed array[1..10,1..10] of real;\par    address = integer;\par    phone_number = record\par       area_code, prefix: 0..999;\par       number: 0..9999;\par       end;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    car = (Ford,GM,Iococa);}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Variables}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Variables\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 variable declaration\par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1087{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley69\piccropl0\piccropr0\piccropt0\piccropb0\picw465\pich105\picwgoal9300\pichgoal2100\macpict\bliptag1513134541\blipupi72{\*\blipuid 5a3099cdd118d26be38f3b3768f0901b}02da00070007007001d81101a00082a000aa01000a00070007007001d861002d01cc004101e000f6003022003701b11c00a000ada000aa61002d002e0041004200f60030220037000a2500a000ad0a00000000000000000b001b001b44002e00370041006e4844002e00fd004101104844000a00ac001d00bf4834002e0091004100da3834002e01330041016a3844002e019f004101b24834005201330065017c38a000aa61002d00880041009c00f60030220037006d1c00a000ada000aa61002d00f40041010800f6003022003700d91c00a000ada000aa61002d012a0041013e00f60030220037010f1c00a000ad22003701210024a000aa610051012a0065013e00f60030230a00a000ada000aa61002d0196004101aa00f6003022003701692e00a000ada000ab61002d017b0041018f009c003022003f0184001ca000ad22005b017b090022003700eb00dca000ab61000900b5001d00c90042003022001300c62500a000ada000ab61002d00760041008affe8003022002f007f00e4a000ad232d0022003701ba003621006d0076a000ab61002d006d00410081009c003022003f0076002ea000ada100960006060000000240a1009a0008fffd000000060000a0009803364f0d000a2b4c3a03766172a00099a00097a100960006050000000240a1009a0008fffd000000130000a0009829580a6964656e746966696572a00099a00097a100960006050000000240a1009a0008fffd0000000a0000a0009829a20474797065a00099a00097a100960006050000000240a1009a0008fffd000000130000a000982a240a6964656e746966696572a00099a00097a100960006060000000240a1009a0008fffd000000010000a0009828003a01a7013ba00099a00097a100960006060000000240a1009a0008fffd000000010000a0009828003a0105013aa00099a00097a100960006060000000240a1009a0008fffd000000010000a0009828001600b4012ca00099a00097a00083ff}}{\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables\bxe }}}{\fs20 The variable part is used to declare the variables which are used in a block.  The variables are not initialized in any way - to be sure of the value they contain, you must assign them a value.  Variables exist for the length of the activation of the block.  This means that if you call a procedure once and assign values to variables declared within that procedure, the variables may not have the same values originally assigned when the procedure is called a second time.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    i,j,k: integer;\par    my_car: car;\par    my_residence: }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 records\: examples}}}{\f6\fs18 record\par       myhouse: house;\par       myphone: phone;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b External Variables}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v External Variables\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 external variables\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1088{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab External variables are an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal supports external variables.  To create an external variable, place the word }{\f6\fs18 extern}{\fs20  or }{\f6\fs18 external}{\fs20  right before the type of the variable, like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 i,j,k: extern integer;\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par This tells the compiler that the variables (in this case, i, j and k) are available, but the compiler will not reserve space for the variables.  Instead, the compiler expects the linker to find the proper variables, just as it would for an external procedure or function.\par The variables themselves can be defined several ways.  From Pascal, the variables could be defined in a unit or in the main program.  If the variables are defined in a unit, they must be defined in the interface part of the unit, not the implementation part, since the linker will only use variables from another unit that appear in the public part of that unit.  From C, the variables should be declared as normal, external variables, but the names of the variables must not contain any lowercase letters.  From assembly language, the variables must be global, so the names must be declared with a START or ENTRY directive.\par There are two common uses for external variables.  The first is to gain access to a variable that was declared in a unit that you either can't access with a uses statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 uses statement}}}{\fs20 , or don't find it convenient to access that way.  For example, if unit A uses unit B, and unit B needs access to a variable in unit A, you could declare the variable as external in unit B.  (Of course, an even better solution is to move the variable to unit B.)\par The other common use for external variables is for initialized tables, which are sometimes easier to declare in assembly language or C.  In that case, declaring the variable as external gives the program direct access to the variables from the other language.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 18:  Procedures and Functions\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 18 - Procedures and Functions\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 18 \endash  Procedures and Functions\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 procedure/function declaration\par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1089{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex69\picscaley69\piccropl0\piccropr0\piccropt0\piccropb0\picw547\pich221\picwgoal10940\pichgoal4420\macpict\bliptag955701136\blipupi72{\*\blipuid 38f6d790d6bda5f0c6f9c1a6f4363c7f}04b50000000000dd02231101a10064000c574f52440000000000dd022301000a0000000000dd02230a00000000000000000b001b001b440081004b00940094484400c9004b00dc008b483400030027001600a638a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002b300e1a70726f6365647572652d66756e6374696f6e2068656164696e67a0009744003901f2004c020548a10096000c03000000010000000000000028004401fa013ba000970affffffffffffffff640002001f0016003300f6003022000c00031d00640038020e004c022200f6003022004202040b0022000c00a5120064003801ea004c01fe00f60030200042008a004201eba10096000c03000000010000000000000028008c005f0665787465726ea00097a10096000c0300000001000000000000002b054804746f6f6ca000970a00000000000000004400c901bc00dc01cf48a10096000c0300000001000000000000002800d401c50129a000974400a5013500b8014848a10096000c0300000001000000000000002800b0013e0129a000974400c9009c00dc00af48a10096000c0300000001000000000000002800d400a50128a000974400a500a500b800b848a10096000c0300000001000000000000002800b000ae0128a000974400c9012c00dc013f48a10096000c0300000001000000000000002b8623012ca00097200027002700d200270affffffffffffffff64005c00430070005700f6003022006600271d0064008000430094005700f6003022008a00271d006400a4004300b8005700f600302200ae00271d006400c8004300dc005700f600302200d200271d006400a4009d00b800b100f600302200ae00930b006400c8009400dc00a800f600302200d2008a0b006400a400c100b800d500f600302200ae00b70b006400c800b800dc00cc00f600302200d200ae0b006400a4012d00b8014100f600302200ae01230b0064003801cf004c01e3009c00302000d201d7004a01d86400a401cf00b801e300f600302000ae014700ae01d064005c01cf007001e300f600302000660093006601d064008001cf009401e300f6003020008a0093008a01d06400c8012400dc013800f600302200d2011a0b006400380043004c005700f6003022004200271d002000270027002700b722000c00b7001b6400c8014800dc015c00f600302200d2013e0b006400c801b400dc01c800f600302200d201aa0b002200d201ce09000a0000000000000000340039004b004c008b38a10096000c030000000100000000000000280044006205626c6f636ba0009744005d004b0070009448a10096000c030000000100000000000000280068006007666f7277617264a000974400a5004b00b8009448a10096000c0300000001000000000000002800b0005e0670726f646f73a000973400a500c900b8012438a10096000c030000000100000000000000297610756e7369676e65642d696e7465676572a000973400c9015000dc01ab38a10096000c0300000001000000000000002b892410756e7369676e65642d696e7465676572a000973400c900c000dc011b38a10096000c0300000001000000000000002800d400cb10756e7369676e65642d696e7465676572a00097ff}}{\par }\pard \qj\widctlpar\adjustright {\par }{\fs20 procedure/function heading\par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1090{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex69\picscaley70\piccropl0\piccropr0\piccropt0\piccropb0\picw555\pich94\picwgoal11100\pichgoal1880\macpict\bliptag-753671049\blipupi72{\*\blipuid d313e4777b9d66a21dcbc7821c5ea2cf}034600000000005e022b1101a10064000c574f524400000000005e022b01000a00000000005e022b640002006f0016008300f6003022000c005d13000a00000000000000000b001b001b44000300270016005e483400030078001600c138a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002b8c0e0a6964656e746966696572a000970affffffffffffffff640002001e0016003200f6003022000c00031c00a10096000c03000000010000000000000028000e002e0970726f636564757265a000970a000000000000000034000300db0016013f38a10096000c03000000010000000000000029b715666f726d616c20706172616d65746572206c697374a000974400390162004c017548a10096000c0300000001000000000000002b8536013aa000973400390078004c00c138a10096000c030000000100000000000000280044008c0a6964656e746966696572a0009734003900db004c013f38a10096000c0300000001000000000000002b580115666f726d616c20706172616d65746572206c697374a000973400390186004c01cf38a10096000c03000000010000000000000028004401990a6964656e746966696572a000974400390027004c005e48a10096000c03000000010000000000000028004400330866756e6374696f6ea000970affffffffffffffff640038006f004c008300f60030220042005d130064000200d2001600e600f6003022000c00c0130064003800d2004c00e600f6003022004200c0130064000201e9001601fd00f6003020000c013e000c01ea22000c00c9001b64000201470016015b009c00302200140150001320002700c90027015020005d00c9005d015022004200c9001b6400380147004c015b009c003022004a015000136400380159004c016d00f60030220042013e1c00640038017d004c019100f6003022004201740a0022000c00150036640038001e004c003200f60030230a0022004201ce090064000201ce001601e2009c003022001401d7002e0a000000000000000044000301f20016020548a10096000c03000000010000000000000028000e01fb013ba000970affffffffffffffff64000202160016022a00f6003022000c02041300ff}}{\par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions\bxe }}}{\fs20 Procedures and functions are defined in the header part of a block, right after variables.  Procedure and function declarations can be mixed in any order you choose.  As seen from the syntax diagrams above, each procedure or function has a name, an optional parameter list, and its own declaration and statement part.  The declaration part can contain more variables, constants, types, labels, procedures and functions.  Any identifiers declared here are available only within the local block.  Identifiers declared before the procedure or function are available within the procedure or function, so long as the identifier is not redeclared.  In that case, the local definition has precedence.\par For example, consider this procedure:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure nest;\par \par var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    a,b: integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    procedure inside;\par \par    var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       b,c: integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    begin\par    \{code\}\par    end;\par \par begin\par \{code\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables\: scope}}}{\fs20 The variable }{\f6\fs18 a}{\fs20  can be accessed from the statement part of both procedures.  Since }{\f6\fs18 c}{\fs20  is declared in }{\f6\fs18 inside}{\fs20 , it can only be accessed from there - it is not available from the procedure }{\f6\fs18 nest}{\fs20 .  Finally, }{\f6\fs18 b}{\fs20  is declared in both procedures, so both procedures can use a variable called }{\f6\fs18 b}{\fs20 , but it will not be the same variable - the variable defined in }{\f6\fs18 nest}{\fs20  is different from the one defined in }{\f6\fs18 inside}{\fs20 .}{\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Value Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Value Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk22}Pascal is capable of passing variables by value or by reference.  When a variable is passed by value, the parameter is declared as if it were in a }{\f6\fs18 var}{\fs20  declaration part of a header.  The variable is then available within the procedure as if it were declared locally to that procedure.  Any changes made to the variable in the procedure have no effect on the value passed when the procedure was called.\par For example, the following function can be used to make sure a character is uppercase only.  Note that this function assumes that we are using the ASCII character set.  This is true for ORCA/Pascal, but may not be true for Pascal compilers on other computers.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function upper(ch: char): char;\par \par begin\par if (ch >= 'a') and (ch <= 'z') then\par    ch := chr(ord(ch)-ord('a')+ord('A'));\par upper := ch;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;}{\fs20 \par \par Despite the fact that the variable }{\f6\fs18 ch}{\fs20  is changed within the function, it does not change the value of the variable which corresponds to }{\f6\fs18 ch}{\fs20  in the calling procedure.  If the above function is called like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 for i := 1 to linelen do\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    write (upper(line[i]));\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 then the values of the characters in }{\f6\fs18 line}{\fs20  remain unchanged.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Variable Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Variable Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The only difference between the definition of a value parameter and a var parameter is that the var parameter is prefixed by the reserved word }{\f6\fs18 var}{\fs20 . Rewriting our function from above by using a var parameter:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function upper(var ch: char): char;\par \par begin\par if (ch >= 'a') and (ch <= 'z') then\par    ch := }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 chr}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 ord}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 chr(ord(ch)-ord('a')+ord('A'));\par upper := ch;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;}{\fs20 \par \par If we called upper the same way we did before, the characters in }{\f6\fs18 line}{\fs20  would be shifted to uppercase.  Since var parameters must be objects whose values can be changed, you must pass a variable, not the result of an expression, when using a var parameter.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Passing Procedures and Functions as Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Passing Procedures and Functions as Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Pascal allows procedures and functions to be passed as parameters to other procedures and functions.  There are some restrictions that must be observed when doing this:\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The procedure or function being passed must be declared at the program level.  That is, it must be declared in the header section of the program block, not in the header of another procedure or function.\par 2.\tab Predefined procedures and functions cannot be passed as parameters.  These include Standard Pascal procedures and functions, as well as those provided with ORCA/Pascal.\par 3.\tab Tool calls and ProDOS calls cannot be passed as parameters.\par 4.\tab The parameter list for the procedure or function must match the declared parameter list exactly.\par }\pard \qj\fi-1170\li1170\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Unlike the older Jensen & Wirth Pascal, ISO Pascal requires that the parameter list be specified for a function or procedure passed as a parameter.\par The last of the above requirements is very strict.  It means that the parameter lists must be identical in form, and that the parameters must be type compatible as well.  For example, if a procedure is declared as\par \par }{\f6\fs18 procedure proc(a: integer; b: integer; c: integer);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 then it cannot be passed as a parameter to this procedure:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 procedure nope(procedure pass (i,j,k: integer));\par }{\fs20 \par As an example of a practical application of this capability, here is a program that uses a Pascal function to integrate a mathematical function.  Rather than writing the integration procedure twice, we write it once and pass the function to integrate as a parameter.\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$keep 'stuff'\}\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 program demo(output);\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18   function f1(x: real): real;\par   begin\par   f1 := sqrt(abs(x));\par }\pard \fi360\widctlpar\adjustright {\f6\fs18   end;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18   function f2(x: real): real;\par   begin\par   f2 := exp(x/2.0);\par }\pard \fi360\widctlpar\adjustright {\f6\fs18   end;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18   function integrate(a,b: real; steps: integer;\par                      function f(x: real): real): real;\par \par   \{Trapezoidal integration\}\par   var\par     i: integer;                         \{loop variable\}\par     sum,                                \{area under curve so far\}\par     x,                                  \{center of current trapezoid\}\par     dx: real;                           \{width of a trapezoid\}\par \par   begin\par   sum := 0.0;\par   dx := (b-a)}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 /}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 /steps;\par   x := }{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 +}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 a + dx/2.0;\par   for i := 1 to steps do begin\par     sum := sum + f(x)*dx;}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 *}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par     x := x + dx;\par     end;\par   integrate := sum;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18   end; \{integrate\}\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 begin \{demo\}\par }{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 writeln}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 writeln (integrate(0.0, 1.0, 50, f1));\par writeln (integrate(0.0, 10.0, 100, f2));\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Univ Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Univ Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1091{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Univ parameters are an extensions to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal supports a method of bypassing type checking called a universal parameter.  When you define a procedure or function, simply place the key word }{\f6\fs18 univ}{\fs20  before the type of the parameter.  The compiler will then accept anything as a parameter that is the same size as the parameter defined in the procedure or function header.\par For example, if you define a procedure with the header\par \par }{\f6\fs18 procedure Strange(var r: univ MyRec; i: univ integer);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 you could then call it with any of the following statements.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 Strange(nil, 400);\par Strange(100000, 'c');\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 Strange(}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 @}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 @'mystring', true);{\*\bkmkend bk22}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 parameters}{\rxe bk22}}}{\f6\fs18 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Forward and Extern}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Forward and Extern\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Occasionally, it is necessary to deal with procedures and functions that cannot be specified so that they are defined before use, or that are not actually defined in the Pascal program itself.  These problems are overcome by the use of special directives.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 forward directive\bxe }}}{\fs20 The ISO Pascal standard requires that the }{\f6\fs18 forward}{\fs20  directive be provided.  When you declare a procedure or function as forward, you write the declaration the same way that you normally would, but the header and statement parts are replaced by }{\f6\fs18 forward}{\fs20 .  Later in the declaration part, the procedure or function must be declared again, this time with no parameter list or return type, but with a declaration part and a statement part.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure used (a: integer); forward;\par \par procedure callit (a: integer);\par \par begin\par if a < 0 then used(a);\par end;\par \par procedure used;\par \par begin\par callit(-a);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }{\fs20 \par The }{\f6\fs18 extern}{\fs20  directive is used when a procedure or function is defined outside of the Pascal program or unit.  This occurs in two common cases:\par \par }\pard \fi-360\li720\widctlpar\adjustright {\fs20 1.\tab A }{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\fs20 procedure or function is written in assembly language.\par 2.\tab }{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\fs20 A library of common procedures or functions are available and called from several programs, and you decide to use the extern directive rather than using the interface file with a uses statement.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When any of these occur, the procedure or function declaration must be made at the program level.  As with the }{\f6\fs18 forward}{\fs20  directive, the }{\f6\fs18 extern}{\fs20  directive replaces the header and statement parts.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 procedure doit (x, y: integer); extern;\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1092{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Standard Pascal does not require the }{\f6\fs18 extern}{\fs20  directive.  While many compilers support it, its use must be considered to be nonstandard.  ORCA/Pascal also allows the spelling external for compatibility purposes.  While the shorter name is more common, a few programs being ported from other machines may use the longer name.\~\~\u8710\'c6\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Tool, UserTool, Vector and ProDOS}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Tool, UserTool, Vector and ProDOS\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1093{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab The directives described in this section are extensions to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS\: interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS\: interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell calls}}}{\v\fs20 \par }{\fs20 ORCA/Pascal provides four other directives which are similar to }{\f6\fs18 extern}{\fs20 , named }{\f6\fs18 ProDOS}{\fs20 , }{\f6\fs18 tool}{\fs20 , }{\f6\fs18 UserTool}{\fs20 , and }{\f6\fs18 vector}{\fs20 .\par }{\f6\fs18 ProDOS}{\fs20  is placed immediately after a procedure or function heading, and requires an integer-valued parameter, enclosed in parentheses.  (The parenthesis are optional for compatibility with other Pascals, but should always be coded.)  It is used to tell the compiler that the procedure or function just declared is a ProDOS 16 system call, a GS/OS system call, or an ORCA/Shell call, and the integer value is the number of the system call.  The call numbers are given in the }{\fs20\ul ProDOS Technical Reference Manual}{\fs20 , }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  GS/OS Reference}{\fs20 , and }{\fs20\ul ORCA/M Reference Manual}{\fs20 , respectively.\par \par }\pard \qj\widctlpar\adjustright {\fs20 Example:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 buffer: char;\tab \tab \tab \{call ProDOS to read from a file\}\par readDCB = record\par    rdRef: integer;\par    rdBuff: ^buffer;\par    rdCount: longint;\par    rdReq: longint\par end;\par \par procedure read (var dcb: readDCB); ProDOS(47);\par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox\:interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tool directive}}}{\f6\fs18 Tool}{\fs20  is placed immediately after a procedure or function heading, and requires two integer-valued parameters, enclosed in parentheses.  (Again, the parenthesis are optional for compatibility, but should always be coded.)  It is used to tell the compiler that the procedure or function just declared is a tool call.  The first parameter is the tool number, and the second parameter is the number of the tool call.  The tool and call numbers are given in the }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference}{\fs20  manuals, volumes 1 through 3, and }{\fs20\ul Programmer's Reference for System\~6.0}{\fs20 .\par }{\f6\fs18 UserTool}{\fs20  looks just like a }{\f6\fs18 Tool}{\fs20  directive, but tells the compiler to generate a call to a user tool, rather than a system tool.  User tools are discussed in the }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference}{\fs20  manuals.\par \par }\pard \qj\widctlpar\adjustright {\fs20 Example:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 function IMVersion: versionNumber;  tool(11, 4);\par \par \{integer math tool call to determine version number of integer \}\par \{math tool set                                                 \}\par \par }{\fs20 Vector is used to make tool-like calls to programs that do not use the tool or user tool vectors.  One example of such a program is HyperCard\~II}{\fs18 GS}{\fs20 .  This directive also uses two parameters enclosed in parenthesis.  The first is a longint; this is the address of the vector to call.  The second parameter is the tool number.  The net effect of this directive is to tell the compiler to use toolbox conventions for passing parameters and returning function values; and to make the call by loading the X register with the tool number (the first parameter), then doing a JSL to the vector address (the first parameter).  You can find examples of this directive in HyperXCMD.pas, which is the interface file for HyperCard\~II}{\fs18 GS}{\fs20 .\par }{\f6\fs18 Tool, UserTool, Vector }{\fs20 and}{\f6\fs18  ProDOS }{\fs20 calls are designed to be used with the interface files provided with ORCA/Pascal.  These files are described in Chapter 4.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 19:  The Block\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 19 - The Block\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 19 \endash  The Block\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qc\widctlpar\adjustright {\f12 {\pict{\*\picprop\shplid1094{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley68\piccropl0\piccropr0\piccropt0\piccropb0\picw393\pich85\picwgoal7860\pichgoal1700\macpict\bliptag1625266871\blipupi72{\*\blipuid 60df9ab7541f89d458fee508d9a94dac}022e00070007005c01901101a0008201000a00070007005c01900a00000000000000000b001b001b44002101450035016a484400470106005a01194834002100f40035012b3844002100a3003500d148340022002e0035008038a100960006050000000298a1009a0008fffd000000200000a000980300140d000a2b382e106465636c61726174696f6e2070617274a00099a00097a100960006050000000298a1009a0008fffd0000000d0000a0009828002d00ad05626567696ea00099a00097a100960006050000000298a1009a0008fffd000000150000a0009829510973746174656d656e74a00099a00097a100960006050000000298a1009a0008fffd000000070000a000982b1226013ba00099a00097a100960006050000000298a1009a0008fffd000000080000a0009828002d014f03656e64a00099a00097a000aa61002100250035003900f6003022002b000a1c00a000ada000aa610021009a003500ae00f6003022002b007f1c00a000ada000aa61002100eb003500ff00f6003022002b00d01c00a000ada000aa610021013c0035015000f6003022002b012a1300a000ada000aa61002101840035019800f6003022002b01691c00a000ad22002b01330024a000ab610045010f005901230042003022004f01201300a000ada000ab61002100d0003500e4009c003022003300d9001ca000ad232d00a100960006050000000298a1009a0008fffd0000000d0000a00098280013000b05626c6f636ba00099a00097a00083ff}}{\f12 \par }\pard \qj\widctlpar\adjustright {\scaps\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 block\bxe }}}{\fs20 A block is the part of a procedure, function or program that contains local declarations and the statements to execute.  It consists of a declaration part, the keyword }{\f6\fs18 begin}{\fs20 , zero or more program statements separated by semicolons, and the keyword }{\f6\fs18 end}{\fs20 .  The statements are executed one after another until the end of the block is reached.  When the end of the block is reached, all local declarations cease to exist and control returns to the calling program, procedure or function.  If the block is the program block, control returns to the shell or program launcher.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 20:  Statements\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 20 - Statements\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 20 \endash  Statements\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 statement\par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1095{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex66\picscaley67\piccropl0\piccropr0\piccropt0\piccropb0\picw429\pich455\picwgoal8580\pichgoal9100\macpict\bliptag691973439\blipupi72{\*\blipuid 293ead3f5d9f5eb63a53ff495ea4a58a}05d00000000001c701ad1101a10064000c574f52440000000001c701ad01000a0000000001c701ad0a000000000000000034000c0039001f009d38a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002b4d1710756e7369676e65642d696e7465676572a000973400390039004c008238a10096000c0300000001000000000000002b032d087661726961626c65a000973400810039009400a638a10096000c03000000010000000000000028008c00491470726f636564757265206964656e746966696572a000973400a5003900b800af38a10096000c0300000001000000000000002a2412636f6d706f756e642073746174656d656e74a000973400ed00390100009438a10096000c0300000001000000000000002800f800480e636173652073746174656d656e74a0009734011100390124009d38a10096000c0300000001000000000000002b03240f7768696c652073746174656d656e74a0009734013500390148009d38a10096000c030000000100000000000000280140004a107265706561742073746174656d656e74a000973401590039016c009438a10096000c0300000001000000000000002b02240d666f722073746174656d656e74a0009734017d00390190009438a10096000c030000000100000000000000280188004b0e776974682073746174656d656e74a000973401a1003901b4009438a10096000c0300000001000000000000002801ac00460e676f746f2073746174656d656e74a000970b001b001b44003900d2004c00ee48a10096000c03000000010000000000000028004400de023a3da0009754000c00b7001f00ca58a10096000c03000000010000000000000028001700bf013aa000973400390108004c015a38a10096000c0300000001000000000000002b5e2d0a65787072657373696f6ea0009734008100c00094011b38a10096000c03000000010000000000000028008c00d30e706172616d65746572206c697374a0009734005d00390070009438a10096000c03000000010000000000000028006800441366756e6374696f6e206964656e746966696572a000973400c9003900dc008b38a10096000c0300000001000000000000002b096c0c69662073746174656d656e74a000970affffffffffffffff64000b0030001f004400f6003022001500151c0064000b00ae001f00c200f60030220015009c1300200003001501aa001522001500c9120023001220000300030003018f6400380030004c004400f6003022004200151c0064005c00300070004400f6003022006600151c0064003800c9004c00dd00f600302200420081490022006600931b0064003800a5004c00b9009c003022004a00ae001c64003800ff004c011300f6003022004200ed13006400380186004c019a00f6003022004201592e0064008000300094004400f6003022008a00151c0064008000b7009400cb00f6003022008a00a5130064008001860094019a00f6003022008a011a6d006400c8003000dc004400f600302200d200151c006400a4003000b8004400f600302200ae00151c006400ec00300100004400f600302200f600151c006400a4018600b8019a00f600302000ae00ae00ae01876400c8018600dc019a00f600302000d2008a00d201876400ec01860100019a00f600302000f6009300f6018764011000300124004400f6003022011a00151c0064013400300148004400f6003022013e00151c006401580030016c004400f6003022016200151c006401580186016c019a00f6003020016200930162018764011001860124019a00f6003020011a009c011a018764017c00300190004400f6003022018600151c006401a0003001b4004400f600302201aa00151c00200003018f01bc018f64013401860148019a00f6003020013e009c013e01872001aa009301aa018f64017c01860190019a00f6003020018600930186018764001d000c0031002000420030200027001d002700db6401b2019801c601ac00f600302201bc018f0a00ff}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Assignment Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Assignment Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assignment statement\bxe }}}{\fs20 The assignment statement allows a value to be assigned to a variable.  The value can be a constant, another variable, or a more complicated expression.  General rules for coding the expression part are covered in the next chapter.  The variable can be a simple variable, a dynamic variable pointed to by a pointer, an array, an array element, a record, an element of a record, an object, or the name of a user-defined function.  \par The assignment statement is coded as a variable followed by the assignment operator and an expression.  The value of the expression is calculated and the result replaces the value of the variable.\par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 type compatibility}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assignment statement\: type compatibility}}}{\fs20 Pascal is a strongly typed language.  The type of the expression must be assignment compatible with the type of the variable or the compiler will flag an error.  An expression V2 is type compatible with a variable V1 if any of the following conditions are met:1.\tab They are the same type.2.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 subranges}}}{\fs20 One is a subrange of the other, or they are both subranges of the same host type.3.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed arrays}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed records}}}{\fs20 Their ordinal base types are compatible, and either both types are packed, or neither type is packed.4.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Both types are strings.5.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\fs20 Both values are one of the real types; these include real, double, comp and extended.}{\fs20 {\pict{\*\picprop\shplid1096{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab In Standard Pascal, strings are fixed length arrays of characters.  If \{$ISO+\} has been specified, the strings must also have the same number of components.\~\~\u8710\'c6The second type of compatibility is assignment compatibility.  V1 is assignment compatible with V2 if one of the conditions stated below is met.  If V1 is assignment compatible with V2, then you can assign V2 to V1, as in V1 := V2.1.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 V1 and V2 are the same type, but they are not file types and do not have components that are file types.2.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 V1 is one of the real types (real, double, comp, extended) and V2 is integer or longint.3.\tab V1 and V2 are type compatible ordinal types, and the of value of V2 falls in the range of values valid for V1.4.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 V1 and V2 are type compatible sets, and the members of the set V2 fall in the range of legal members for set V1.5.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 V1 and V2 are type compatible string types.6.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20  long integers}}}{\fs20 V1 is longint, and V2 is integer.7.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 If \{$ISO+\} has not been specified, then V1 can be a string, and V2 a character.8.\tab }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}}}{\fs20 If \{$ISO+\} has not been specified, then V1 can be an object, and V2 can be an object of the same type, or of a type that is a descendent of the type of V1, or V2 can be nil.Two results derived from this definition of assignment compatibility differ from some other common languages, and so deserve special mention.  }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 type conversion}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assignment statement}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 First, very little automatic type conversion takes place.  In fact, the only time types are converted during assignment is when:  the expression is an integer type and the variable is one of the real types (real, double, comp, extended); the expression is a longint type and the variable is integer; the expression is an integer type and the variable is longint.  }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assigning structured types}}}{\fs20 Secondly, Pascal allows the assignment of structured types.  So long as two structured types are compatible, the assignment takes place as a single statement, often replacing a loop in other languages.  For example, with the declaration}{\f6\fs18 a,b: array[1..10, 1..10] of real;}{\fs20 the assignments}{\f6\fs18 a := b;a[3] := a[10];}{\fs20 are legal.}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\fs20 The type byte is a subrange of type integer; therefore values of type byte can be assigned to integer variables.   An integer expression which falls within the range 0..255 can be assigned to a byte variable.}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 The type longint is an entirely new type.  Expressions of type longint can be assigned to byte or integer variables, but only if the }{\f6\fs18 ord}{\fs20  operation given below is applied first.  Expressions of type byte or integer can be assigned to longint variables, however.  To assign a longint value to an integer, you can use the following operation:}{\f6\fs18 integerValue  :=  ord (longintExpression)\tab \tab }{\fs20 }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comp}}}{\fs20 The types real, double, extended and comp are treated as the same type.  Although the various formats use differing amounts of storage, all operations are performed using extended format numbers.}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}}}{\fs20 Assigning one object to another does not copy the contents of one object to a new spot, as it would for a record assignment.  Instead, when you assign one object to another, both variables refer to the same object.  See Chapter 14 for a complete discussion of object assignment.}{\b\fs28 Case Statement}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Case Statement\tcl2}}}{\b\fs28 }{\fs20 }{\fs20 {\pict{\*\picprop\shplid1097{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley75\piccropl0\piccropr0\piccropt0\piccropb0\picw492\pich132\picwgoal9840\pichgoal2640\macpict\bliptag-2084060942\blipupi72{\*\blipuid 83c7c0f2ef04a2612a08e3e6a948771d}03cb00070007008b01f31101a00082a0008c01000a00070007008b01f30a000000000000000034004000fd0053015838a100960006050000000202a1009a0008fffd000000150000a0009803364f0d000a28004c01190973746174656d656e74a00099a00097a0008da000aa61003f00f40053010800f6003022004900e21300a000ada000aa610009001c001d003000f60030220013000a1300a000ada000aa610009006d001d008100f60030220013005b1300a000ada000aa61000900c7001d00db00f6003022001300b51300a000ada000aa61003f00c7005300db00f6003022004900a32500a000ada0008c34000a0076001d00b638a100960006050000000202a1009a0008fffd000000170000a0009828001600800a65787072657373696f6ea00099a00097a0008da0008c0b001b001b44000a0025001d005c48a100960006050000000202a1009a0008fffd0000000a0000a0009828001600380463617365a00099a00097a0008da0008c44004001b1005301d648a100960006050000000202a1009a0008fffd000000080000a0009828004c01bb03656e64a00099a00097a0008da0008c44000a00d0001d00ec48a100960006050000000202a1009a0008fffd000000070000a0009828001600da026f66a00099a00097a0008da0008c340040005b005300a438a100960006050000000202a1009a0008fffd000000120000a0009828004c006e08636f6e7374616e74a00099a00097a0008da0008c44006400760077008948a100960006060000000202a1009a0008fffd000000010000a000982b1024012ca00099a00097a0008da0008c44004000d0005300e348a100960006060000000202a1009a0008fffd000000010000a0009828004c00d8013aa00099a00097a0008da0008c44004001720053018548a100960006060000000202a1009a0008fffd000000010000a0009829a2013ba00099a00097a0008d22001300eb120023001b21002e002e23001ba000aa61003f00520053006600f60030232500a000ada000aa61003f01e7005301fb00f6003022004901d51300a000ada000aa61003f01a8005301bc00f6003022004901842500a000ada000aa61003f01690053017d00f6003022004901571300a000ad220049016000e5a000ab61003f0196005301aaffe80030220041019f00eda000ad22002e01603f00220049018d003fa000ab61003f002e00530042009c003022005100370037a000ada000ab61003f004000530054009c00302200510049001ca000ad232d0022004900b50024a000ab610063007f007700930042003022006d00902500a000ad20008800370088018da00083ff}}{\fs20 }{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case statement\bxe }}}{\fs20 The case statement allows you to choose one item from a list of possible alternatives.  The type of the expression must be compatible with the type of the case constants.  The expression is first evaluated.  Control is then passed to the statement after the corresponding case constant.  It is an error if there is no corresponding case constant.  You can avoid this error by using the otherwise clause}{\pard\plain \qj\fi-720\li720\ri720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 otherwise clause}}}{\fs20 .  If none of the case constants matches the expression, the otherwise clause is executed.  After the appropriate statement has been executed, the statement after the case statement is executed.Some Pascal compilers do not allow the colon after the otherwise clause.  We recommend using the colon, but it is actually optional in ORCA/Pascal.}{\fs20 {\pict{\*\picprop\shplid1098{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Using otherwise in a case statement is an extension to Standard Pascal.  In Standard Pascal, it is illegal to execute a case statement when there is no case label that matches the case value, and the compiler is expected to stop with a run-time error if this happens.  ORCA/Pascal will, in fact, stop with a run-time error if you execute a case statement with no matching case label and no otherwise clause.\~\~\u8710\'c6\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 case i of\par    1,3,5: writeln('odd');\par    2,4,6: writeln('even');\par    otherwise: writeln('neither')\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end;}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Compound Statements}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Compound Statements\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1099{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley69\piccropl0\piccropr0\piccropt0\piccropb0\picw339\pich87\picwgoal6780\pichgoal1740\macpict\bliptag301511408\blipupi72{\*\blipuid 11f8b2f068ca16f6137578af3c957327}01ef00070007005e015a1101a00082a0008c01000a00070007005e015a0a00000000000000000b001b001b44004900ac005c00bf48a100960006060000000202a1009a0008fffd000000010000a0009803364f0d000a2bb455013ba00099a00097a0008da0008c3400250088003800e338a100960006050000000202a1009a0008fffd000000150000a0009828003100a40973746174656d656e74a00099a00097a0008da0008c440025002e0038006548a100960006050000000202a1009a0008fffd0000000d0000a00098280031004105626567696ea00099a00097a0008da0008c44002501060038013448a100960006050000000202a1009a0008fffd000000080000a0009829d803656e64a00099a00097a0008da000aa610024007f0038009300f6003022002e00641c00a000ada000aa61002400fd0038011100f6003022002e00e21c00a000ada000aa610024014e0038016200f6003022002e01331c00a000ada000aa61002400250038003900f6003022002e000a1c00a000ada000aa61004800b5005c00c90042003022005200ebdb00a000ad22002e00eb0024a000ab610024006d00380081009c00302200360076001ca000ad22000a006d0024a000aa61002400eb003800ffffe8003022000a00f4001ca000ad20000a006d000a00f422005200763600a00083ff}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compound statements\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 begin}}}{\fs20 There are many places in Pascal where it is useful to group a series of statements into a single syntactic unit.  For example, you might want a for loop to include several statements instead of just one.  The compound statement allows for this.  Anywhere that a statement is legal in Pascal, a compound statement can be used.  The compound statement takes the form of the keyword }{\f6\fs18 begin}{\fs20 , a series of statements separated by semicolons, and the keyword }{\f6\fs18 end}{\fs20 .  The statements are then treated as a block, as illustrated in the following loop that initializes arrays.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 for i := 1 to 10 do begin\par    a[i] := 0;\par    b[i] := maxint;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 For Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 For Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1100{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley70\piccropl0\piccropr0\piccropt0\piccropb0\picw447\pich114\picwgoal8940\pichgoal2280\macpict\bliptag-673905245\blipupi72{\*\blipuid d7d505a340721ab08e106284c5b280c8}038600070007007901c61101a00082a0008c01000a00070007007901c60a000000000000000034006400eb0077014638a100960006050000000202a1009a0008fffd000000150000a0009803364f0d000a28007001070973746174656d656e74a00099a00097a0008da000aa6100090145001d015900f60030220013012a1c00a000ada000aa610009001c001d003000f60030220013000a1300a000ad22001301330024a0008c340064006d007700ad38a100960006050000000202a1009a0008fffd000000170000a0009828007000770a65787072657373696f6ea00099a00097a0008da000aa610009005b001d006f00f6003022001300520a00a000ada000aa61000900b5001d00c900f6003022001300ac0a00a000ada000aa61006300b5007700c900f6003022006d00ac0a00a000ada000aa61000900e2001d00f600f6003022001300d90a00a000ada0008c0b001b001b44000a00be001d00da48a100960006050000000202a1009a0008fffd000000070000a0009828001600c8023a3da00099a00097a0008da0008c44006400be007700da48a100960006050000000202a1009a0008fffd000000070000a000982a5a02646fa00099a00097a0008da0008c44000a0025001d005348a100960006050000000202a1009a0008fffd000000070000a00098280016003803666f72a00099a00097a0008da0008c34000a00eb001d012b38a100960006050000000202a1009a0008fffd000000170000a0009829bd0a65787072657373696f6ea00099a00097a0008da0008c44000a014e001d016a48a100960006050000000202a1009a0008fffd000000070000a00098296302746fa00099a00097a0008da0008c34000a0064001d00ad38a100960006050000000202a1009a0008fffd000000130000a0009828001600770a6964656e746966696572a00099a00097a0008da0008c44002e014e0041018e48a100960006050000000202a1009a0008fffd000000100000a000982bea2406646f776e746fa00099a00097a0008da000aa61002d01450041015900f6003022003701331300a000ad22001301694800220037018d1200a000aa6100090196001d01aa009c00302300e4a000ad22001301b1003f210052005b23001ba000aa61006300640077007800f60030230a00a000ada000aa61006300e2007700f600f6003022006d00d90a00a000ada000aa61006301ba007701ce00f6003022006d01457600a000ada00083ff}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 for statement\bxe }}}{\fs20 The for loop allows for repetitive looping when the exact number of times to execute the loop can be computed before the loop starts.  At execution time, the loop control variable is assigned the starting value specified by the expression.  The second expression is then evaluated, and the result saved.  Next, the looping process starts.  Each loop begins by testing to see if the value of the loop variable is less than or equal to the termination value specified by the second expression (or greater than or equal for a downto loop).  If it is, the statement is executed, the loop control variable is incremented (or decremented, for downto) and the process repeats.\par It is possible for a loop to not be executed.  This happens when the loop control variable starts out larger than the termination value.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 for loop control variable}}}{\fs20 Pascal protects the loop variable by requiring that it not be placed in danger of being changed while the loop is in progress.  This means that you cannot assign a value to the loop control variable while inside the loop.  You cannot use the same loop control variable for two nested loops (although you can use the same variable on successive loops), and you cannot pass the loop control variable to a procedure or function as a var parameter.  Pascal also requires that the loop control variable be defined locally.\par The value of the loop variable is not defined after the loop terminates.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Some examples of for loops are:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 for i := 0 to 100 do\par    writeln(i);\par \par for i := 1 to 10 do\par    for j := 1 to 10 do\par       matrix[i,j] := 0.0;\par \par for time := 10 downto 0 do\par    writeln\par }\pard \fi360\widctlpar\adjustright {\f6\fs18       ('T minus ',time:1,' seconds, and counting.');\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Goto Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Goto Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1101{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex74\picscaley73\piccropl0\piccropr0\piccropt0\piccropb0\picw267\pich23\picwgoal5340\pichgoal460\macpict\bliptag-679264919\blipupi72{\*\blipuid d7833d6962677940b4ef1a0f49543964}00f8000000000017010b1101a10064000c574f5244000000000017010b01000a000000000017010b0a00000000000000000b001b001b44000300270016005e48a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002b3b0e04676f746fa000970affffffffffffffff640002001e0016003200f6003022000c00031c00640002006f0016008300f6003022000c005d130064000200f60016010a00f6003022000c00db1c000a00000000000000003400030078001600dc38a10096000c030000000100000000000000294e10756e7369676e65642d696e7465676572a00097ff}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\scaps\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto statement\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 labels}}}{\fs20 The goto statement allows control to be passed to another statement in the program.  The reserved word }{\f6\fs18 goto}{\fs20  is followed by a label number.  The label must have been declared in the declaration section, and must appear in exactly one place in the block.\par It is illegal to jump into a structure via a goto statement, such as into the middle of a for loop, a begin-end block, or the body of a case statement.  It is illegal to branch from an if statement into its else clause with a goto.  It is not illegal to branch out of a structure with a goto statement.  For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 for statement\: examples}}}{\f6\fs18 for i := 1 to 10 do begin\par    read(line[i]);\par    if eoln then goto 1;\par    end;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 1:;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 is legal, but you could not branch from outside the loop into the loop.  It is also legal to branch from one procedure or function into its enclosing procedure or function.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure infinite_loop;\par \par label 1;\par \par    procedure strange;\par    begin\par    goto 1;\par    end;\par \par begin\par 1: strange;   \{a very strange infinite loop\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 If-Then-Else Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 If-Then-Else Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1102{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex69\picscaley68\piccropl0\piccropr0\piccropt0\piccropb0\picw537\pich50\picwgoal10740\pichgoal1000\macpict\bliptag-1846750729\blipupi72{\*\blipuid 91ecd1f78d4b3281eae97912470028a1}021400000000003202191101a10064000c574f5244000000000032021901000a00000000003202190a000000000000000034001e00db0031013638a10096000c0300000001000000000000002c000c00150948656c7665746963610300150d00092e0004000000002bf7290973746174656d656e74a000970affffffffffffffff64001d01470031015b00f600302200270135130064001d02040031021800f6003022002701f2130064001d000c0031002000f6003022002700030a00220003013e002464001d01f200310206ffe8003022000301fb001c200003013e000301fb0a000000000000000034001e0198003101f338a10096000c03000000010000000000000029bf0973746174656d656e74a000970b001b001b44001e0093003100ca48a10096000c03000000010000000000000028002900a9047468656ea0009744001e01500031018748a10096000c03000000010000000000000029bc04656c7365a0009734001e00420031008238a10096000c030000000100000000000000280029004d0a65787072657373696f6ea0009744001e00150031003148a10096000c0300000001000000000000002800290022026966a000970affffffffffffffff64001d00390031004d00f6003022002700300a0064001d008a0031009e00f6003022002700810a0064001d018f003101a300f6003022002701860a0064001d00d2003100e600f6003022002700c90a00ff}}{\fs20 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 if statement\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 else clause}}}{\fs20 The if statement allows a statement to be executed only if a condition is met.  It has two forms, one when an alternate statement should be executed if the condition is not met (an else is used) and one where nothing is done if the condition is not met.  The expression must result in a boolean value.  Examples of }{\f6\fs18 if}{\fs20  statements are:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 if a = 10 then\par    a := 1\par else\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    a := a+1;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 if today = Monday then\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    let_it_rain;\par }{\fs20 \par Probably the most common error in coding an if statement is to place a semicolon before the else clause.  Keep in mind that the semicolon separates statements, it does not terminate them.  Finally, a useful construct is the nested if statement, which is often used when all values of a variable cannot be listed for a case statement.\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 if month in \par    [January,March,May,July,August,October,December] \par    then days := 31\par else if month in [April,June,September,November] then\par    days := 30\par else begin\par    if leapyear then\par       days := 29\par    else\par       days := 28\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Repeat Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Repeat Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1103{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley69\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich96\picwgoal8760\pichgoal1920\macpict\bliptag-1306656879\blipupi72{\*\blipuid b21dff9104b00cb37884da25890644fc}024a00070007006701bd1101a00082a0008c01000a00070007006701bd0a00000000000000003400250091003800ec38a100960006050000000202a1009a0008fffd000000150000a0009803364f0d000a2bad310973746174656d656e74a00099a00097a0008d22005b007f3600a000aa61002400250038003900f6003022002e000a1c00a000ada000ab61002400760038008a009c0030220036007f0025a000ada000aa61002400880038009c00f6003022002e006d1c00a000ad20000a0076000a00fda000aa61002401b1003801c500f6003022002e019f1300a000ada0008c3400250160003801a038a100960006050000000202a1009a0008fffd000000170000a0009829bd0a65787072657373696f6ea00099a00097a0008da0008c0b001b001b440025002e0038006e48a100960006050000000202a1009a0008fffd0000000d0000a00098280031004106726570656174a00099a00097a0008da0008c440025010f0038014648a100960006050000000202a1009a0008fffd0000000b0000a0009829e105756e74696ca00099a00097a0008da0008c44005200b5006500c848a100960006060000000202a1009a0008fffd000000010000a0009828005e00bd013ba00099a00097a0008da000aa61002401060038011a00f6003022002e00eb1c00a000ada000aa61002401570038016b00f6003022002e01451300a000ad22002e00f4002da000ab61005100be006500d20042003022005b00cf2500a000ad22000a00760024a000aa61002400f400380108ffe8003022000a00fd001ca000ada00083ff}}{\fs20 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 repeat statement\bxe }}}{\fs20 The repeat statement is used when a loop must be executed at least one time, but the number of times to loop cannot be computed when the loop starts.  First, the body of the repeat statement is executed.  The expression is then evaluated.  The expression must be boolean.  If its value is false, the loop is executed again; otherwise, the statement after the repeat statement is executed.\par The repeat statement is rather unusual in Pascal, in that the body of the loop does not need to be a single statement.  Like the compound statement, the loop body can be a series of statements separated by semicolons.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 repeat\par    read(myfile,ch);\par    process(ch)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 until eof(myfile);\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 repeat\par    getmove;\par    makemove;\par    update_board\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 until game_done;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 While Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 While Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1104{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley58\piccropl0\piccropr0\piccropt0\piccropb0\picw393\pich24\picwgoal7860\pichgoal480\macpict\bliptag-1878177061\blipupi72{\*\blipuid 900d4adb9754ead9fd7987b4ef0594cd}01a100070007001f01901101a00082a0008c01000a00070007001f01900a000000000000000034000a010f001d016a38a100960006050000000202a1009a0008fffd000000150000a0009803364f0d000a280016012b0973746174656d656e74a00099a00097a0008da000aa610009001c001d003000f60030220013000a1300a000ada0008c34000a007f001d00bf38a100960006050000000202a1009a0008fffd000000170000a0009828001600890a65787072657373696f6ea00099a00097a0008da000aa6100090076001d008a00f6003022001300641300a000ada0008c0b001b001b44000a00d9001d00f548a100960006050000000202a1009a0008fffd000000070000a00098295a02646fa00099a00097a0008d44000a0025001d006548a100960006050000000258a1009a0008fffd0000000d0000a000982800160038057768696c65a00099a00097a000aa61000900d0001d00e400f6003022001300be1300a000ada000aa6100090106001d011a00f6003022001300f41300a000ada000aa6100090184001d019800f6003022001301691c00a000ada00083ff}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 while statement\bxe }}}{\fs20 The while statement is used when the body of a loop may not need to be executed at all.  The boolean expression is evaluated.  If its result is true, the statement is executed and the process repeats.  If it is false, the statement after the while statement is executed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 while not eoln(myfile) do begin\par    read(myfile, ch);\par    process(ch);\par    end;\par \par \{draw a circle\}\par a := delta;\par }\pard \fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18 MoveTo(mid_x + length, mid_y);}{\pard\plain \fi360\keepn\widctlpar\outlinelevel0\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 +}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 while a <= twopi do begin}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 <=}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    x := round(mid_x + cos(a)*length);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 *}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 cos}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    y := round(mid_y + sin(a)*length);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 round}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18    LineTo(x, y);}{\pard\plain \fi360\keepn\widctlpar\outlinelevel0\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 sin}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18    a := a + delta;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 With Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 With Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\f6\fs18 {\pict{\*\picprop\shplid1105{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley67\piccropl0\piccropr0\piccropt0\piccropb0\picw384\pich69\picwgoal7680\pichgoal1380\macpict\bliptag-65615055\blipupi72{\*\blipuid fc16cb31c8fd4511c1098d27070981b9}021500070007004c01871101a00082a000aa01000a00070007004c01876100090025001d003900f60030220013000a1c00a000ada000aa6100090076001d008a00f6003022001300641300a000ada000aa610009017b001d018f00f6003022001301601c00a000ada0008c0a00000000000000000b001b001b44000a002e001d006548a100960006050000000202a1009a0008fffd0000000b0000a0009803364f0d000a2b41160477697468a00099a00097a0008da0008c44000a00e2001d00fe48a100960006050000000202a1009a0008fffd000000070000a0009829ab02646fa00099a00097a0008da0008c34000a007f001d00c838a100960006050000000202a1009a0008fffd000000110000a000982800160092087661726961626c65a00099a00097a0008da0008c34000a0118001d016138a100960006050000000202a1009a0008fffd000000150000a0009829990973746174656d656e74a00099a00097a0008da0008c540037009a004a00ad58a100960006060000000202a1009a0008fffd000000010000a0009828004300a2012ca00099a00097a0008da000aa610009010f001d012300f6003022001300fd1300a000ada000aa61000900d9001d00ed00f6003022001300c71300a000ada000ab6100090064001d0078009c003022001b006d0025a000ad232d00a000ab61003600a3004a00b70042003022004000b41c00a000ad22001300d0002da00083ff}}{\f6\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 with statement\bxe }}}{\fs20 The with statement provides a shorthand method for accessing the fields within a record.  The variables specified in the with statement are the names of variables of type record, and these names are implied to be prefixed to any field names occurring within the statement portion of the with.  The with statement is applied to the variables in the order in which they occur.  This rule is important when two or more variables have the same record type.  For example, consider the following declarations and assignments:\par \par }{\f6\fs18 type\par    outfit = record\par       shirtSize: integer;\par       pantSize: integer\par       end;\par \par var\par    man1, man2: outfit;\par \par begin\par with man1, man2 do\par    shirtSize := 15;\par    ...\par }{\fs20 \par The field }{\f6\fs18 shirtSize}{\fs20  refers to the variable }{\f6\fs18 man2}{\fs20 .  To set the }{\f6\fs18 shirtSize}{\fs20  field for }{\f6\fs18 man1}{\fs20 , the following code would have to be used:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 with man1, man2 do begin\par    shirtSize := 15;\par    man1.shirtSize := 15\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The with statement example above could also be written as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 with man1 do\par    with man2 do\par       shirtSize := 15;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 This structure more clearly shows the scope rules applied to with variables, and thus how }{\f6\fs18 shirtSize}{\fs20  is "local" to }{\f6\fs18 man2}{\fs20 .\par }\pard \widctlpar\adjustright {\b\fs36 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 21:  Expressions\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 21 - Expressions\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 21 \endash  Expressions\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operators}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operators\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 operations\bxe }}}{\fs20 There are a variety of operators which can be used to manipulate data.  These are summarized in the table below.  The functions they perform are discussed in sections dealing with the data types that the operators work on.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1106{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab With ORCA/Pascal, all operations defined for values of type real are also defined for values of type double, extended and comp.  All operations defined for type integer are also defined for values of type byte and longint.\~\~\u8710\'c6\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\ri360\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\tx5580\adjustright {\fs20 Binary Operators\tab Types\tab Operation\par }\pard \qj\li720\ri360\keepn\widctlpar\tx2520\tx5580\adjustright {\fs20 +\tab integer, real, set\tab addition\par -\tab integer, real, set\tab subtraction\par *\tab integer, real, set\tab multiplication\par /\tab integer, real\tab division\par **\tab integer, real\tab exponentiation\par div\tab integer\tab integer division\par mod\tab integer\tab modulus arithmetic\par in\tab scalar, set\tab test inclusion\par =\tab integer, character, string, real, set\tab test equality\par <>\tab integer, character, string, real, set\tab test inequality\par <=\tab integer, character, string, real, set\tab test less than or equal\par >=\tab integer, character, string, real, set\tab test greater than or equal\par <\tab integer, character, string, real\tab test less than\par >\tab integer, character, string, real\tab test greater than\par and\tab boolean\tab logical and\par or\tab boolean\tab logical or\par &\tab integer\tab bitwise and\par |\tab integer\tab bitwise or\par !\tab integer\tab bitwise exclusive or\par <<\tab integer\tab bit shift left\par }\pard \qj\li720\ri360\widctlpar\tx2520\tx5580\adjustright {\fs20 >>\tab integer\tab bit shift right\par }\pard \qj\widctlpar\tx630\tx2520\tx5760\adjustright {\fs20 \par }\pard \qj\li720\ri360\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\tx5580\adjustright {\fs20 Unary Operators\tab Types\tab Operations\par }\pard \qj\li720\ri360\keepn\widctlpar\tx2520\tx5580\adjustright {\fs20 -\tab integer, real\tab negation\par +\tab integer, real\tab ensure value is positive\par not\tab boolean\tab logical not\par @\tab any variable or structure\tab take address of \par }\pard \qj\li720\ri360\widctlpar\tx2520\tx5580\adjustright {\fs20 ~\tab integer\tab bitwise not\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operations on Integers and Long Integers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations on Integers and Long Integers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 + operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 - operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 * operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 The operators +, -, and * perform addition, subtraction, and multiplication, respectively, in the normal mathematical sense.  \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 / operator}}}{\fs20 The / operator performs division in the normal mathematical sense.  Both operands can be of type integer or longint, but the result will be real.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ** operator}}}{\fs20 The ** operator raises the first operand to the power given in the second operand.  Both operands can be of type integer or longint, but the result will be of type real.  The first operand must be greater than zero.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 div operator}}}{\fs20 The div operator performs integer division in the normal way - that is, the result is the same as performing a mathematical division and then truncating the fractional part of the result.  \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 mod operator}}}{\fs20 The mod operator returns the remainder resulting from the division of two integer quantities.  The }{\f6\fs18 mod}{\fs20  operator for }{\f6\fs18 i mod j}{\fs20  is defined as the smallest positive number that can result from the expression }{\f6\fs18 (i - (k * j))}{\fs20 , where }{\f6\fs18 k}{\fs20  is also an integer.  The examples below illustrate how these operators work.\par \par }\pard \qj\li720\ri4680\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\adjustright {\f6\fs18 Operation\tab Result\par }\pard \qj\li720\ri4680\keepn\widctlpar\tx2520\adjustright {\f6\fs18 1 + 2\tab 3\par 1 - 2\tab -1\par 10 * 20\tab 200\par 5 / 2\tab 2.5\par 2 ** 3\tab 8.0\par 22 div 10\tab 2\par 10 div 22\tab 0\par (-41) div 10\tab -4\par 10 mod 3\tab 1\par (-7) mod 5\tab 2\par }\pard \qj\li720\ri4680\widctlpar\tx2520\adjustright {\f6\fs18 9 mod 3\tab 0\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The following restrictions must be observed, or a run-time error will result.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \fi-360\li720\keepn\widctlpar\adjustright {\fs20 1.\tab }{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 maxint}}}{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 maxint4}}}{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 The result of any operation involving at least one longint value must be in the range [-maxint4 - 1 .. maxint4]; otherwise, the result for only integer operands must be in the range [-maxint -1 .. maxint].  Maxint is defined as 32767; maxint4 is defined as 2147483647.\par 2.\tab The second operand of the div operator must not be zero.}{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 div operator}}}{\fs20 \par }\pard \fi-360\li720\widctlpar\adjustright {\fs20 3.\tab The second operand of the mod operator must be greater than zero.}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 mod operator}}}{\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comparisons}}}{\fs20 Integer and longint values can also be compared.  The comparison operators take two integer arguments and produce a boolean result. These examples illustrate the results produced by the comparison operators.\par \par }\pard \qj\li720\ri4320\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\adjustright {\f6\fs18 Operation\tab Result\par }\pard \qj\li720\ri4320\keepn\widctlpar\tx2520\adjustright {\f6\fs18 1 < 2\tab true}{\pard\plain \qj\li720\ri4320\keepn\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 < operator}}}{\f6\fs18 \par 2 < -3\tab false\par 2 < 2\tab false\par 1 > 2\tab false}{\pard\plain \qj\li720\ri4320\keepn\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 > operator}}}{\f6\fs18 \par 2 > -3\tab true\par 2 > 2\tab false\par 100 >= 99\tab true}{\pard\plain \qj\li720\ri4320\keepn\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >= operator}}}{\f6\fs18 \par 100 >= 100\tab true\par -4 >= 5\tab false\par 100 <= 99\tab false}{\pard\plain \qj\li720\ri4320\keepn\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <= operator}}}{\f6\fs18 \par 100 <= 100\tab true\par -4 <= 5\tab true\par }\pard \qj\li720\ri4320\keepn\widctlpar\tx2520\outlinelevel0\adjustright {\f6\fs18 14 = 14\tab true\par }\pard \qj\li720\ri4320\keepn\widctlpar\tx2520\adjustright {\f6\fs18 -10 = 10\tab false}{\pard\plain \qj\li720\ri4320\keepn\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 = operator}}}{\f6\fs18 \par 14 <> 14\tab false\par }\pard \qj\li720\ri4320\widctlpar\tx2520\adjustright {\f6\fs18 -10 <> 10\tab true}{\pard\plain \qj\li720\ri4320\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <> operator}}}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par All of the operators discussed so far, except div and mod, can also be used with real operands, or with a mixture of real and integer operands.  See the section discussing operations on reals for details.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 The bit operators work only with integer and long integer operands.  These operators cannot generate run-time errors.  The table below illustrates how they work:\par \par }\pard \qj\li720\ri2520\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\tx4320\adjustright {\f6\fs18 Operation\tab Example\tab Result\par }\pard \qj\li720\ri2520\widctlpar\tx2520\tx4320\adjustright {\f6\fs18 and\tab 4 & 3\tab 0}{\pard\plain \qj\li720\ri2520\widctlpar\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 & operator}}}{\f6\fs18 \par \tab 7 & 5\tab 5\par or\tab 4 | 3\tab 7}{\pard\plain \qj\li720\ri2520\widctlpar\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 | operator}}}{\f6\fs18 \par \tab 7 | 5\tab 7\par eor\tab 4 ! 3\tab 7\par \tab 7 ! 5\tab 2}{\pard\plain \qj\li720\ri2520\widctlpar\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ! operator}}}{\f6\fs18 \par shift left\tab 3 << 2\tab 12}{\pard\plain \qj\li720\ri2520\widctlpar\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 << operator}}}{\f6\fs18 \par \tab 6 << 4\tab 96\par shift right\tab 7 >> 2\tab 1}{\pard\plain \qj\li720\ri2520\widctlpar\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >> operator}}}{\f6\fs18 \par \tab 240 >> 4\tab 15\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par All of the unary operators except not can be applied to integers.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 + operator}}}{\fs20 The + operator actually has no effect on the program.  While there are certain places where it cannot be used due to the syntax of the Pascal language, in can always be replaced by a space without affecting the program produced by the compiler.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 - operator}}}{\fs20 The - operator negates the value.  This has the effect of subtracting the argument from zero, so that\par \par }{\f6\fs18 -i\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 will produce the same result as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 0 - i\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ~ operator}}}{\fs20 The ~ operator performs a bitwise negation of an integer.  That is, in the binary representation of the number all zeroes are converted to ones, and all ones are converted to zeroes.  For example,\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 ~15 = -16\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Operations on Reals}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations on Reals\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1107{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab All operations defined for real numbers are also valid for data of type double, extended or comp.\~\~\u8710\'c6\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\fs20 The binary operators }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 + operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 - operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 * operator}}}{\f6\fs18 +, -,}{\fs20  and}{\f6\fs18  *}{\fs20  take two real arguments or one real and one integer argument and produce a real result.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 / operator}}}{\fs20 The }{\f6\fs18 /}{\fs20  operator and the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ** operator}}}{\fs20 ** operator take any combination of real or integer operands and produce a real result.  If the result is not in the range of numbers that can be represented by a real number, a run-time error will occur.\par These operators perform addition, subtraction, multiplication, division, and raise one number to the power of another in the normal mathematical sense.  The examples below illustrate how the operators work.\par \par }\pard \qj\li720\ri3960\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2880\adjustright {\f6\fs18 Operation\tab Result\par }\pard \qj\li720\ri3960\keepn\widctlpar\tx2880\adjustright {\f6\fs18 1.0 + 3.4\tab 4.4\par 3.14 - 0.6\tab 2.54\par 2.3 - 3.0\tab -0.7\par 1.0 / 0.4\tab 2.5\par 1/2\tab 0.5\par 3 * 4.1\tab 12.3\par 3 ** 4\tab 81.0\par }\pard \qj\li720\ri3960\widctlpar\tx2880\adjustright {\f6\fs18 2 ** 0.5\tab 1.414213\par }\pard \qj\widctlpar\adjustright {\fs20 \par The operations are performed using a limited precision subset of the real numbers, as are all  computations  on  a  computer.  This  can  lead  to  some  unexpected  results.   For  example, 1.0+1e-20 is not 1.00000000000000000001, as you might expect; it is still 1.0.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The following restrictions must be observed, or a run-time error will result.\par \par }\pard \fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The result of any operation must be in the subset of real numbers that can be represented.\par 2.\tab The second operand of the }{\f6\fs18 /}{\fs20  operator must not be zero.}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 / operator}}}{\fs20 \par 3.\tab The first operand of the exponentiation operator must be greater than zero.}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ** operator}}}{\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\fs20 Reals can also be compared to other reals, or to integers.  The comparison operators take two real arguments, or one real argument and one integer argument, and produce a boolean result.  When a real value is compared to an integer or longint value, the integer is first converted to a real, and then the comparison takes place as if the comparison was of two real arguments.\par Two of the unary operators can be applied to reals.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 + operator}}}{\fs20 The + operator actually has no effect on the program.  While there are certain places where it cannot be used due to the syntax of the Pascal language, in can always be replaced by a space without affecting the program produced by the compiler.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 - operator}}}{\fs20 The - operator negates the value.  This has the effect of subtracting the argument from zero, so that\par \par }{\f6\fs18 -3.14\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 will produce the same result as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 0.0 - 3.14\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operations of Characters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations of Characters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\fs20 The only operations valid on characters are comparisons.  Testing for equality or inequality is straight forward.  Testing for greater than or less than implies some ordering of the character set.  The ordering used in ORCA/Pascal is the same as for the ASCII character set.  In all cases, comparing two characters c1 and c2 will give the same result as comparing ord(c1) and ord(c2).}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 < operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 > operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 = operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <> operator}}}{\fs20 \par Standard Pascal requires that the digits be ordered sequentially.  For example, ord('0')+1 must be equal to ord('1').  The standard requires that alphabetic characters be ordered, but it makes no requirement that they be sequential.  Thus, 'A' must be less than 'B', but there is no requirement that ord('A')+1 be equal to ord('B').  The ISO standard does not specify the ordering of ordinal values of uppercase and lowercase letters.\par ORCA/Pascal on the Apple\~II}{\scaps\fs20 gs}{\fs20  uses the ASCII character set, so alphabetic characters are both ordered and sequential.  Uppercase characters are less than lowercase characters, so that 'A' < 'a'.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Operations on Strings}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations on Strings\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 < operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 > operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 = operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <> operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 The only operations valid on strings are comparisons.  The comparison is performed character by character until a difference occurs.  Thus, 'apple' is greater than 'able,' but less that 'ax.'\par If two strings are different in length but identical up to the last character in the shorter string, the shorter string is less than the longer one.  For example, 'apple' is less than 'apples.'\par \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1108{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab If the \{$ISO+\} directive has not been specified, strings of different lengths can be compared, and strings can be compared to characters.  In both cases, the comparison functions as if the shorter structure is extended to the length of the longer structure with characters whose ordinal values are zero.\~\~\u8710\'c6\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operations on Booleans}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations on Booleans\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\fs20 There are two binary boolean operators, both giving boolean results.  And gives a result of true if both arguments are true, and a result of false if either argument is false.  Or gives a result of true if either argument is true, and a result of false if both arguments are false.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 and operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 or operator}}}{\fs20 \par Not is the only unary operator that takes a boolean argument.  It gives true if the argument is false, and false if the argument is true.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 not operator}}}{\fs20 \par \par }\pard \qj\li720\ri4320\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2880\adjustright {\f6\fs18 Operations\tab Result\par }\pard \qj\li720\ri4320\keepn\widctlpar\tx2880\adjustright {\f6\fs18 false and false\tab false\par false and true\tab false\par true and false\tab false\par true and true\tab true\par false or false\tab false\par false or true\tab true\par true or false\tab true\par true or true\tab true\par not true\tab false\par }\pard \qj\li720\ri4320\widctlpar\tx2880\adjustright {\f6\fs18 not false\tab true\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Operations on Sets}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations on Sets\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 + operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 - operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 * operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 Three binary operators take set arguments and yield set results.  The + operator performs a set union.  The - operator gives the difference between two sets.  The * operation gives the intersection of two sets.\par \par }\pard \qj\li720\ri3960\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2880\adjustright {\f6\fs18 Operation\tab Result\par }\pard \qj\li720\ri3960\keepn\widctlpar\tx2880\adjustright {\f6\fs18 [1,2,4] + [1,3,4]\tab [1,2,3,4]\par [1,2,4] - [1,3,4]\tab [2]\par }\pard \qj\li720\ri3960\widctlpar\tx2880\adjustright {\f6\fs18 [1,2,4] * [1,3,4]\tab [1,4]\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par One binary operator, in, }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 in operator}}}{\fs20 takes a scalar for the first argument, a set for the second, and produces a boolean result.  It tests to see if the scalar is a member of the set.\par \par }\pard \qj\li720\ri3880\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2880\adjustright {\f6\fs18 Operation\tab Result\par }\pard \qj\li720\ri3880\keepn\widctlpar\tx2880\adjustright {\f6\fs18 1 in [1,2,4]\tab true\par }\pard \qj\li720\ri3880\widctlpar\tx2880\adjustright {\f6\fs18 3 in [1,2,4]\tab false\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Sets can be tested for equality and inequality.  Two sets are equal if they have the same members.  Sets can also be tested to see if all of the members of one set are also members of the other set.  }{\f6\fs18 S1 <= s2}{\fs20  is true if all members of the set }{\f6\fs18 s1}{\fs20  appear in the set }{\f6\fs18 s2}{\fs20 . }{\f6\fs18  S1 >= s2}{\fs20  is true if all members of }{\f6\fs18 s2}{\fs20  are in }{\f6\fs18 s1}{\fs20 .  The < and > comparisons are not defined for sets.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 = operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <> operator}}}{\fs20 \par \par }\pard \qj\li720\ri3960\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2880\adjustright {\f6\fs18 Operation\tab Result\par }\pard \qj\li720\ri3960\keepn\widctlpar\tx2880\adjustright {\f6\fs18 [1,2,4] = [1,3,4]\tab false\par [1,2,4] = [1,2,4]\tab true\par [1,2,4] <> [1,3,4]\tab true\par [1,2,4] <> [1,3,4]\tab false\par [1,2,4] <= [1,2,3,4]\tab true\par [1,2,3,4] <= [1,2,4]\tab false\par [1,2,4] <= [1,2,4]\tab true\par [1,2,4] >= [1,2,3,4]\tab false\par [1,2,3,4] >= [1,2,4]\tab true\par }\pard \qj\li720\ri3960\widctlpar\tx2880\adjustright {\f6\fs18 [1,2,4] >= [1,2,4]\tab true\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operations on Pointers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations on Pointers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1109{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Using @ as an operator to extract an address is an extension to Standard Pascal.  In Standard Pascal, @ is used as an alternate character for ^, which is not available in some character sets.  In ORCA/Pascal, unless the ISO directive has been used to enforce strict compliance with the ISO standard, the @ operator can be used for either purpose.  The compiler picks between the two uses based on context.\~\~\u8710\'c6\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 @ operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\fs20 The @ operator returns the address of a data object.  It can be used to obtain the address of a }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 procedure, function, variable, record, array, record element, array element, or string constant.  The value returned is a pointer that is type-compatible with nil; that is, it is assignment-compatible with any pointer.\par The example below shows how pointer arithmetic can be performed to randomly access the elements of an array.  Other than addition and subtraction of integers, it is not recommended that you apply mathematical functions to pointers.  For instance, the addition of two pointers is somewhat meaningless; the square root of a pointer value is truly nonsense.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure PointerMath (var num: array [0..99] of integer);\par \par var \par    p: ^integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    x, i: integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par p := @num;\par x := 1;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 offset := 5;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{ Loop to place a value in every 5th position of the array num. \}\par for i := 0 to 19 do begin\par    p^ := x;\par    x := x * 3;\par    p := pointer ( ord4(p) + (2 * offset) )\tab \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }{\fs20 \par The }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord4 function}}}{\f6\fs18 ord4}{\fs20  operation turns }{\f6\fs18 p}{\fs20  into a longint so that arithmetic may be performed.  Adding}{\f6\fs18  2 * offset}{\fs20  to }{\f6\fs18 p}{\fs20  moves }{\f6\fs18 p}{\fs20  forward in the array to access the next integer (each integer is two bytes long) that is }{\f6\fs18 offset}{\fs20  elements away.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Operator Precedence}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operator Precedence\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 operator precedence}}}{\fs20 Operator precedence is what causes 1 + 2 * 3 to be 7 instead of 9.  In Pascal, expressions that have several operators in a row, with each operator of equal precedence, are evaluated from left to right.  For example, the integer math operation 100 div 3*2 gives 66 if the div operation is performed first, and 16 if the multiplication comes first.  In Pascal, the div is performed first.\par The operators are shown below, with the highest precedence shown first.  Operators with the same precedence are shown on the same line.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 not operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ~ operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ** operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 @ operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 * operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 / operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 & operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 << operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >> operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 div operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 mod operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 and operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 + operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 - operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 | operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ! operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 or operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 = operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >= operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 < operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 > operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 <> operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 in operator}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab not\tab ~\tab **\tab @\par \tab *\tab /\tab &\tab <<\tab >>\tab div\tab mod\tab and\tab \par \tab +\tab -\tab |\tab !\tab or\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab =\tab <=\tab >=\tab <\tab >\tab <>\tab in\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The order in which the operands of a binary operator are evaluated is implementation dependent.  For example, consider the function }{\f6\fs18 changeit}{\fs20 :\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function changeit(var x: integer): integer;\par \par begin\par changeit := x div 2;\par x := x div 3;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Now consider how it is used in this expression:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 x * changeit(x)\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 If }{\f6\fs18 x}{\fs20  is 5, and the left term is evaluated first, then the value of the expression is 10.  If, however, the function is called first, the value of the expression is 2.  The ISO standard says that the order of evaluation is implementation dependent, which means that each implementation of Pascal can choose the order in which the terms are evaluated.  In ORCA/Pascal, the left term is always evaluated first.  If you plan to move your programs to other compilers, you should not write expressions that depend on the implementation-defined order of evaluation, like the one above.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Type Compatibility Rules}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Type Compatibility Rules\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 type compatibility\bxe }}}{\fs20 There are two kinds of type compatibility rules in Pascal.  The first defines when two types are compatible. When two types are compatible, they may be substituted for one another as parameters to procedures and functions, and used as operands to the various operators described above.  If they are not type compatible, and you attempt to use them this way, an error will be flagged.  For two types to be compatible, they must satisfy one of the following conditions:\par \par }\pard \fi-270\li1350\keepn\widctlpar\adjustright {\fs20 1.\tab They are the same type.\par 2.\tab One is a subrange of the other, or they are both subranges of the same host type.}{\pard\plain \fi-270\li1350\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 subranges}}}{\fs20 \par 3.\tab Their ordinal base types are compatible, and either both types are packed, or neither type is packed.}{\pard\plain \fi-270\li1350\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed arrays}}}{\pard\plain \fi-270\li1350\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed records}}}{\fs20 \par }\pard \fi-270\li1350\widctlpar\adjustright {\fs20 4.\tab Both types are strings.}{\pard\plain \fi-270\li1350\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 \par 5.\tab Both values are one of the real types; these include real, double, comp and extended.}{\pard\plain \fi-270\li1350\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \fi-270\li1350\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \fi-270\li1350\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\pard\plain \fi-270\li1350\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comp}}}{\fs20 \par }\pard \qj\fi-1170\li1170\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1110{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Standard Pascal does not support variable length strings.  If \{$ISO+\} has been specified, the strings must have the same number of components.\~\~\u8710\'c6\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The second type of compatibility is assignment compatibility.  V1 is assignment compatible with V2 if one of the conditions stated below is met.  If V1 is assignment compatible with V2, then you can assign V2 to V1, as in V1 := V2.\par \par }\pard \fi-360\li720\keepn\widctlpar\adjustright {\fs20 1.\tab V1 and V2 are the same type, but they are not file types and do not have components that are file types.\par 2.\tab V1 is real and V2 is integer.}{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\fs20 \par 3.\tab V1 and V2 are type compatible ordinal types, and the  of value of V2 falls in the range of values valid for V1.\par 4.\tab V1 and V2 are type compatible sets, and the members of the set V2 fall in the range of legal members for set V1.}{\pard\plain \fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par }\pard \fi-360\li720\widctlpar\adjustright {\fs20 5.\tab V1 and V2 are type-compatible string types.}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 \par 6.\tab V1 is longint, and V2 is integer.}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 \par 7.\tab If \{$ISO+\} has not been specified, then V1 can be a string, and V2 a character.}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\fs20 \par 8.\tab }{\pard\plain \fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}}}{\fs20 If \{$ISO+\} has not been specified, then V1 can be an object, and V2 can be an object of the same type, or of a type that is a descendent of the type of V1, or V2 can be nil.\par }\pard \fi-1080\li1080\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Under ORCA/Pascal, an operation defined for integers will accept operands which are any combination of types integer, longint, or byte.  If one of the operands is a longint value, then the result will also be of type longint.}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 Any scalar value can be coerced into an integer by the operation:\par \par }{\f6\fs18 ord (scalar)}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord function}}}{\f6\fs18 \par }{\fs20 \par }\pard \widctlpar\adjustright {\fs20 If the scalar value is of type longint, you will need to check if the value is within the range -maxint to maxint}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 maxint}}}{\fs20  before performing the coercion to avoid causing a run-time error.  The operation ord(pointer) will always fail unless the address is in bank zero.\par }\pard \fi360\widctlpar\adjustright {\fs20 An integer may be converted to a character value using the function chr, which takes a single integer argument, and returns a character result.}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 chr function}}}{\fs20 \par Any scalar value can be coerced into a longint by the operation:\par \par }{\f6\fs18 ord4 (scalar)}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord4 function}}}{\f6\fs18 \par }{\fs20 \par }\pard \widctlpar\adjustright {\fs20 This operation is especially useful for converting a pointer into a longint so that pointer arithmetic may be performed, as in\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 ord4 (pointer)}{\pard\plain \fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 pointers}}}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The types real, double, comp and extended are treated as the same type.  All of these types are converted to extended before calculations are performed, then converted back to the proper format for storing.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comp}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Type Casting}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Type Casting\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1111{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley58\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich24\picwgoal5880\pichgoal480\macpict\bliptag1078778187\blipupi72{\*\blipuid 404cd94bd905017793d701869f5b4355}019b00070007001f012d1101a00082a0008c01000a00070007001f012d0a000000000000000034000a0025001d007738a100960006060000000202a1009a0008fffd0000001f0000a000980300150d000a2b2f160f747970652d6964656e746966696572a00099a00097a0008da0008c54000a0088001d009b58a100960006060000000202a1009a0008fffd000000020000a0009829610128a00099a00097a0008da0008c34000a00ac001d00f538a100960006060000000202a1009a0008fffd000000190000a0009829280a65787072657373696f6ea00099a00097a0008da0008c54000a0106001d011958a100960006060000000202a1009a0008fffd000000020000a0009829560129a00099a00097a0008da000aa610009001c001d003000f60030220013000a1300a000ada000aa610009007f001d009300f6003022001300760a00a000ada000aa61000900a3001d00b700f60030220013009a0a00a000ada000aa61000900fd001d011100f6003022001300f40a00a000ada000aa6100090121001d013500f6003022001301180a00a000ada00083ff}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1112{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Type casting is an extension to Standard Pascal.  It is not available if the ISO directive has been used to enforce strict compliance with the ISO Pascal standard.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 type casting\bxe }}}{\fs20 Type casting lets you change the type of any scalar or pointer to any other scalar or pointer.  The result can appear anywhere that a variable or expression of that value may be used.  Type casting tells the compiler to treat one value as if it is of a different type.  Unlike the built-in functions that convert from one type to another in Pascal, such as ord and chr, type casting does not convert from one value to another.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\f20\fs20 \u-3981\'73}{\b\fs20 \tab Warning}{\fs20 \tab The fact that type casting is not a conversion operation has very important implications.  For example, if you cast a longint value to an int, and pass the result as a parameter, you have told the compiler to push four bytes onto the run-time stack, but to treat it as if only two bytes were pushed.\par \par \tab \tab Type casting should never be used when a type conversion function exists to do the same job.  Type casting exists in Pascal for pointer type conversions and for tricks with overlaying records.  Using type casting routinely when a data conversion function should be used can cause unexpected results or crashes.\~\~}{\f20\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par For example, let's assume that you have defined a record as follows:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 long = record\par    lsw,msw: integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end;\par }{\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 Then, using type casting, you could extract the most significant word of a long integer by\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    x: integer;\par \tab    l: longint;\par \par begin\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 x := long(l).msw;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 In this example, specifying }{\f6\fs18 long}{\fs20  tells the compiler to treat the value as a record with the format of the record long.  Once the type is converted this way, you can extract either word of the four byte argument.  Another common use of type casting is to convert an integer into an enumerated type.  For example:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par    color = (red, blue, green);\par \par var\par    c: color;\par \par begin\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 c := color(1);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 assigns }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 enumerations}}}{\fs20 the color blue to the variable c.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 While type casting is an advanced concept, it can be very useful.  In the first example, assuming long is a global variable, the code generated for the entire construct would be the single machine language instruction, }{\f6\fs18 LDA LONG+2}{\fs20 .\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 22:   Built-in Procedures and Functions\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 22 - Built-in Procedures and Functions\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 22 \endash  Built-in Procedures and Functions\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter covers the procedures and functions that are built into the compiler, and do not need to be declared as extern to be available.  They are not all required by the ISO Pascal standard.  When the functions or procedures are not a part of Standard Pascal, this fact is noted in the subroutine description by marking it with an ISO bullet. Use of a nonstandard procedure or function, along with the \{$ISO+\} directive in your program, will cause the extended procedure/function to be flagged as an error.\par Table 22.1 lists the procedures and functions in functional groups.  The descriptions themselves are alphabetized for easy reference.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 heap}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory management}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dynamic variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stack frames}}}{\fs20 The memory management calls refer to the heap.  The heap is the area of memory that can be used for variables.  The heap is used in two distinct ways:  as a stack frame area and for dynamic variables.  Stack frames are the memory set aside for local variables that must be allocated each time a procedure or function is called.  Dynamic variables are variables allocated by the program via calls to the procedure new.\par As dynamic variables are allocated and deallocated, unused space can appear between the currently allocated dynamic variables.  This space is reused when new variables are allocated.  There is no garbage collection as such.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li2520\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Heap Management\tab Use\par }\pard \qj\fi-1800\li2520\keepn\widctlpar\adjustright {\fs20 dispose\tab return allocated memory to free memory pool\par new\tab allocate memory from free memory pool\par }\pard \qj\fi-1800\li2520\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li2520\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Input and Output\tab Use\par }\pard \qj\fi-1800\li2520\keepn\widctlpar\adjustright {\fs20 close\tab close a file\par eof\tab true if at end of file\par eoln\tab true if at end of line\par get\tab primitive read\par open\tab open a file for both input and output\par page\tab write an ASCII form-feed character to an output file or standard output\par put\tab primitive write\par read, readln\tab read from file or standard input\par reset\tab open a file for input\par rewrite\tab open a file for output\par seek\tab go to random position in a file\par }\pard \qj\fi-1800\li2520\widctlpar\adjustright {\fs20 write, writeln\tab write to a file, standard output, or standard error output\par \par }\pard \qj\fi-1800\li2520\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Mathematics\tab Use\par }\pard \qj\fi-1800\li2520\keepn\widctlpar\adjustright {\fs20 abs\tab absolute value of argument\par arccos\tab arc cosine of argument\par arcsin\tab arc sine of argument\par }\pard \qj\fi-1800\li2520\widctlpar\adjustright {\fs20 arctan\tab arc tangent of argument\par arctan2\tab arc tangent of two arguments\par cos\tab cosine of argument\par exp\tab exponent of argument\par ln\tab natural logarithm of argument\par odd\tab true if argument is an odd number\par random\tab returns pseudo-random real number\par RandomDouble\tab returns pseudo-random double-precision real number\par RandomInteger\tab returns pseudo-random integer\par RandomLongint\tab returns pseudo-random four-byte integer\par round\tab round argument to nearest whole number (returns an integer)\par round4\tab round argument to nearest whole number (returns a longint)\par seed\tab initialize random number generator\par sin\tab sine of argument\par }\pard \qj\fi-1800\li2520\keepn\widctlpar\adjustright {\fs20 sqr\tab square of argument\par sqrt\tab square root of argument\par tan\tab tangent of argument\par trunc\tab truncate fractional part of real number (returns an integer)\par }\pard \qj\fi-1800\li2520\widctlpar\adjustright {\fs20 trunc4\tab truncate fractional part of real number (returns a longint)\par \par }\pard \qj\fi-1800\li2520\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 String Manipulation\tab Use\par }\pard \qj\fi-1800\li2520\keepn\widctlpar\adjustright {\fs20 concat\tab concatenate two strings\par copy\tab extract substring from string\par delete\tab remove substring from string\par insert\tab insert a string within another string\par length\tab current length of a string, in characters\par }\pard \qj\fi-1800\li2520\widctlpar\adjustright {\fs20 pos\tab position in string where substring begins\par \par }\pard \qj\fi-1800\li2520\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Miscellaneous\tab Use\par }\pard \qj\fi-1800\li2520\widctlpar\adjustright {\fs20 chr\tab convert integer to character equivalent\par CommandLine\tab returns command line entered when program was executed\par cnvis\tab convert integer to string\par cnvrs\tab convert real to string\par cnvsd\tab convert string to double-precision real value\par cnvsi\tab convert string to integer\par cnvsl\tab convert string to longint value\par cnvsr\tab convert string to single-precision real value\par EndDesk\tab shut down the desktop environment\par EndGraph\tab shut down the graphics environment\par halt\tab abort program by issuing a ProDOS QUIT call\par member\tab see if an object is a member of an object family\par ord\tab convert character to integer equivalent\par ord4\tab convert ordinal value to longint equivalent\par pack\tab move values from unpacked array into packed array\par pointer\tab convert pointer to untyped pointer\par pred\tab value in collating sequence of ordinal object which precedes argument object\par seed\tab initialize the random number generator\par ShellID\tab identifier of shell under which program was executed\par SizeOf\tab returns the size of a variable or type\par StartDesk\tab initialize desktop environment\par StartGraph\tab initialize graphics environment\par succ\tab value in collating sequence of ordinal object which succeeds argument object\par SystemError\tab trap run-time errors\par ToolError\tab number of error generated by last tool call made\par unpack\tab move values from packed array into unpacked array\par UserID\tab identification number assigned to program by loader\par \par }\pard \widctlpar\tx1080\outlinelevel0\adjustright {\fs20 \tab Table 22.1  Summary of the Built-in Procedures and Functions\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Abs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Abs\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function abs (x: real): real;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The absolute value function takes a single argument.  It returns the absolute value of the argument.  The argument must be assignment-compatible with the types real, longint, or integer.  The result type is extended if the argument was real, double or comp; integer if the argument was integer; and longint if the argument was of type longint.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 abs function\bxe }}}{\fs20 \par \par Example:}{\f6\fs18 a := abs(a);}{\fs20 }{\b\fs28 ArcCos}{\pard\plain \qj\fi360\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ArcCos\tcl2}}}{\b\fs28 }{\fs20 }{\f6\fs20 function arccos (x: real): real;}{\fs20 {\pict{\*\picprop\shplid1113{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab ArcCos is an extension to Standard Pascal.\~\~\u8710\'c6}{\b\fs20 }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arccos function\bxe }}}{\fs20 The arccos function returns the arc cosine of the argument.  The argument must be assignment-compatible with a real value.  The result is expressed in radians, and will be in the range 0 .. \u960\'b9.  The result is an extended value.Example:}{\f6\fs18 angle := arccos(z); }{\fs20 }{\b\fs28 ArcSin}{\pard\plain \qj\fi360\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ArcSin\tcl2}}}{\b\fs28 }{\fs20 }{\f6\fs20 function arcsin (x: real): real;}{\fs20 {\pict{\*\picprop\shplid1114{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab ArcSin is an extension to Standard Pascal.\~\~\u8710\'c6}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arcsin function\bxe }}}{\fs20 The arcsin function returns the arc sine of the argument.  The argument must be assignment-compatible with a real number.  The result is expressed in radians, and will be in the range -\u960\'b9/2 .. \u960\'b9/2.  The result is an extended value.Example:}{\f6\fs18 angle := arcsin(z);}{\fs20 }{\b\fs28 ArcTan}{\pard\plain \qj\fi360\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ArcTan\tcl2}}}{\b\fs28 }{\fs20 }{\f6\fs20 function arctan (x: real): real;}{\b\fs20 }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arctan function\bxe }}}{\fs20 The arctan function returns the arc tangent of the argument.  The result is expressed in radians, and will be in the range -\u960\'b9/2 .. \u960\'b9/2.  The argument must be assignment-compatible with a real value, and must be expressed in radians.  The result is an extended value.\par It is an error to take the arctan(0).\par See the library function arctan2, below, for an alternate version of this function.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 angle := arctan(x/y);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ArcTan2}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ArcTan2\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function arctan2 (x, y: real): real;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1115{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab ArcTan2 is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arctan2 function\bxe }}}{\fs20 The arctan2 function returns the arc tangent of two arguments.  The first argument is the x coordinate of a point in a Cartesian coordinate system, and the second argument is the y coordinate of the point.  The arguments must be assignment-compatible with a real value. The result is expressed in radians, and will be in the range -\u960\'b9 .. \u960\'b9; it represents the angle between the positive x-axis and the point.  The result is an extended value.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Chr}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Chr\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function chr (x: integer): char;\par }{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 chr function\bxe }}}{\fs20 The chr function converts an integer into a character.  The integer must be in the valid range for a character, which is 0 to 127.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function upper(ch: char): char;\par \par \{return an uppercase character\}\par \par begin\par if ch in ['a'..'z'] then}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 sets\: examples}}}{\f6\fs18 \par    ch := chr(ord(ch) - ord('a') + ord('A'));}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 ord}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par upper := ch;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 chr}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Close}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Close\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure close (f: fileVariable);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1116{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Close is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 close procedure\bxe }}}{\fs20 Close is a nonstandard procedure used to close a file.  It is not necessary to close a file under most conditions, since the compiler will close it automatically when execution of the block in which the file was declared is complete.  The only time you really need to close a file is if you need to use a ProDOS function that requires the file be closed before it will work.  The close call accepts one parameter, the file variable assigned to the opened file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 close(f);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 CommandLine}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 CommandLine\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure CommandLine (var cmndLine: string[size]);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1117{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab CommandLine is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CommandLine procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 utilities}}}{\fs20 The CommandLine procedure accepts a var parameter, which is a string that will hold the command line passed to the program when the program was executed.  The command line includes the name of the program and any parameters, with I/O redirection stripped and handled by the shell.  The size of the string must be large enough to hold the characters typed.  The maximum size of the command line is 255 characters.  If no command line was passed, the string will be null.  \par }\pard \qj\widctlpar\adjustright {\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure handleParms;\par \par var\par    cmndLine: string[255];\par \par begin\par CommandLine (cmndLine[255])\par \{ Put code to handle parameters here \}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }\pard \widctlpar\adjustright {\fs18 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cnvds}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cnvds\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cnvds (x: extended; width, digits:integer; ): string[size];\par }{\f6\fs18 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1118{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Cnvds is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cnvds function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Returns the character string equivalent of the real argument.  If the string is not large enough to hold the floating-point representation then truncation occurs at the end of the string.  If the string will be formatted in exponential notation, then the string should be at least nine characters long.  The second parameter specifies the field width for the number to be written in the string.  If it is zero, then the string is to be written in exponential format.  The third parameter gives the number of digits to written after the decimal point.\par }\pard \qj\widctlpar\adjustright {\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:  \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 x := 3.5e3;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 str := cnvds (x, 5, 1);\par }\pard \qj\widctlpar\adjustright {\fs18 \par }{\fs20 would set str to the characters 3500.0.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cnvis}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cnvis\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cnvis (i: integer): string[size];\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1119{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Cnvis is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cnvis function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Returns the character string equivalent of the integer argument.  If the string is not large enough to hold the converted value, then truncation occurs at the end of the string.  The string should be at least six characters long.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    str: string[2];\par    number: string[5];\par \par begin\par str :=  cnvis (157);\par number := cnvis (157);\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would set str to '15' and number to '157.'\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cnvrs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cnvrs\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cnvrs (x: real; width, digits: integer): string[size];\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1120{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Cnvrs is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cnvrs function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Returns the character string equivalent of the real argument.  If the string is not large enough to hold the floating-point representation then truncation occurs at the end of the string.  If the string will be formatted in exponential format, the string should be at least nine characters long.  The second parameter specifies the field width of the number to be written in the string.  If it is zero, then the string is to be written in exponential format.  The third parameter specifies the number of digits to be written after the decimal point.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:  \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 x := 3.5e3;\par str := cnvrs (x, 6,1);\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would set str to the characters  3500.0.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cnvsd}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cnvsd\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cnvsd (s: string): extended;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1121{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Cnvsd is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cnvsd function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Cnvsd returns real number represented by the input string argument.  A string too large to be represented in an extended value will be flagged as an error.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 z := cnvsd ('34.4e5');\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cnvsi}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cnvsi\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cnvsi (s: string): integer; \par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1122{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Cnvsi is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cnvsi function\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Returns the integer represented by the input argument string.  If the string is too large to be represented in an integer, an error will be flagged.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 k := cnvsi ('36');\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cnvsl}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cnvsl\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cnvsl (s: string): longint;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1123{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Cnvsl is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cnvsl function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Returns the long integer representation of the string.  If the string is too large to be represented in a longint value, then an error is flagged.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 xl := cnvsl ('1234567'); \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cnvsr}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cnvsr\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cnvsr (s: string): real;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1124{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Cnvsr is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cnvsr function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Returns the single-precision floating-point representation of the input string argument.  If the string is too large to be represented in a real value, an error is flagged.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 x := cnvsr ('333.5');\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Concat}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Concat\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function concat (str1: string[size1]; str2: string[size2]; ... ): \tab \tab \tab rstr[rsize];\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1125{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Concat is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 concat function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 The concat function accepts two or more strings as parameters, and returns a string as a result.  The first string is placed into the beginning of the resulting string, the second string is appended to the end of the first string, the third string is appended to the end of the second string, and so on. Thus, the string that is returned is the concatenation of all of the string parameters.  The length of the new string is the combined length of all of the parameters.  If the string that will be receiving the result of the concatenation is not large enough, truncation will occur at the end of the string. For example:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    s1, s2: string[5];\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    s3: string[7];\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par s1 := 'pas';\par s2 := 'cal';\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 s3 := concat (s1, s2);  \par }\pard \qj\widctlpar\adjustright {\fs20 \par would result in s3 being set to pascal.  If, however, s3 had been defined as\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 s3: string[4];\par }\pard \qj\widctlpar\adjustright {\fs20 \par the concat operation would result in s3 being set to }{\f6\fs18 pasc}{\fs20 .\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Copy}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Copy\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function copy (str: string[size]; index, count: integer):\par    string[rsize];\par }{\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1126{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Copy is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 copy function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 The copy function accepts three parameters and returns a string.  The first parameter is a string from which a substring is to be copied into the resulting string.  The second parameter is an integer, and denotes the character in the string where copying is to begin.  The third parameter is an integer, and gives the number of characters to copy.  If }{\i\fs20 index}{\fs20  exceeds the length of }{\i\fs20 str}{\fs20 , then the null string is returned.  If the resulting string is not large enough to hold the substring, then truncation occurs from the end of the string.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    str1: string[5];\par    str2: string[10];\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    str3: string[3];\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par str1 := 'apple';\par str2 := copy (str1, 2, 3);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 str3 := copy (str1, 1, 4);\par }\pard \qj\widctlpar\adjustright {\fs20 \par would result in str2 being set to ppl and in str3 being set to app. \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cos}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cos\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function cos (x: real): real;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cos function\bxe }}}{\fs20 The cos function returns the cosine of the argument, expressed in radians.  The argument must be assignment-compatible with a real variable.  The result is an extended value.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function secant(r: real): real;\par \par begin\par secant := 1.0/cos(r);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Delete}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Delete\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure delete (var str: string[size]; index, count: integer);\par }{\b \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1127{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Delete is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 delete procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 The delete procedure accepts three parameters.  The first is a string from which characters are to be deleted.  The second is an integer which specifies the character at which deletion is to begin.  The third is an integer which gives the number of characters to be removed.   If }{\i\fs20 index}{\fs20  exceeds the length of }{\i\fs20 str}{\fs20 , the string is left intact.  If }{\i\fs20 index+count}{\fs20  is greater than the length of the string, then characters are removed from }{\i\fs20 index}{\fs20  to the end of the string.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var str: string[10];\par \par begin\par str := 'upside ';\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 delete (str, 4, 10);\par }\pard \qj\widctlpar\adjustright {\fs20 \par would result in str being set to ups.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Dispose}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Dispose\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure dispose (var p: pointer;\par    v1, v2, ..., vn: variantConstants);\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dispose procedure\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dynamic variables}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 heap}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The dispose procedure releases the memory allocated to a pointer variable or object, removing it from the heap and freeing the heap space for future use by other dynamic variables.  The first parameter is a pointer to the area to be disposed.  The remaining parameters, if specified, are constants from a variant record declaration.  Standard Pascal requires that this list of variant record constants match the list that was used when the dynamic variable was allocated with new, but does not require compilers to verify that the restriction is met.  ORCA/Pascal does not check to make sure that the lists match.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 dispose(ptr);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 dispose(ptr, reccons, recconst2);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 EndDesk}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 EndDesk\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure EndDesk;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1128{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab EndDesk is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EndDesk procedure\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox}}}{\fs20 Shuts down any tools started by the StartDesk procedure, described later in this section, and returns the program to the text environment.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 EndGraph}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 EndGraph\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure EndGraph;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1129{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab EndGraph is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EndGraph procedure\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox}}}{\fs20 Shuts down any tools started by the StartGraph procedure, described later in this section, and returns the program to the text environment.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Eof}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Eof\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function eof (f: fileVariable): boolean;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 eof function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 Eof tests a file variable to see if the last value read from the file was the last one in the file.  The parameter, which is optional, is a file variable.  If the parameter is left off, eof tests to see if an end-of-file character has been encountered from standard input.  Under ORCA/Pascal, if standard input is defined as the keyboard, then the end-of-file character is the two-key sequence }{\outl\fs18 control}{\fs20 @.  All other characters read from the keyboard cause eof to return false.  If the standard input has been redirected to a file, eof will report an end-of-file condition as for an opened file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 while not eof do begin\par    getchar;\par    processchar;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 while not eof(myfile) do begin\par    getchar;\par    processchar;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Eoln}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Eoln\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function eoln (f: fileVariable): boolean;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 eoln function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 The eoln function takes an optional file variable as a parameter and returns a boolean result.  The file variable must be a text file.  If the parameter is left off, the file is assumed to be the standard input}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\fs20 .  The result is true if the last character read was the last character on the line, and false if it was not.  Testing for eoln and getting a true result does not mean that the end-of-line character has already been read - it means that the next character in the file is the end-of-line marker.  When you read the end-of-line mark, the character returned is always a space.\par It is an error to call eoln for a file in which eof is true.\par The following sample program illustrates the use of eoln and eof by reading a file from disk and listing it on the screen.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program list (output);\par \par var\par    ch: char;\par    f: text;\par \par begin\par reset(f,'myfile');}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 reset}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par while not eof(f) do begin}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 eof}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    if eoln(f) then begin}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 eoln}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       readln(f);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 readln}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       writeln;}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 writeln}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       end\par    else begin}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 if statement\: examples}}}{\f6\fs18 \par       read(f, ch);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 read}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       write(ch);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 write}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       end;\par    end;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 keyboard}}}{\fs20 When the file is the standard input, and the input is coming from the keyboard, things work a little differently.  In that case, lazy I/O is used.  Lazy I/O provides a way for a Pascal program to read characters from an interactive device and give them to the program immediately.  With normal file input, Pascal must read one character ahead to see if the next character is an end-of-file or end-of- line mark.  Lazy I/O gets around this by reading the character and giving it to the program right away.  Lazy I/O sets }{\f6\fs18 eof}{\fs20  true when CTRL@ is entered from the keyboard; eoln is true when the }{\outl\fs18 return}{\fs20  key is pressed.  The character returned for the end-of-line mark will still be a space.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Exp}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Exp\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function exp (x: real): real;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 exp function\bxe }}}{\fs20 The exp function returns the exponent of the argument.  The argument must be assignment- compatible with a real value.  The result is an extended value.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function power (x, y: real): real;\par \par \{ raise x to the y power                                        \}\par \par begin \{power\}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 *}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par power := exp(y*ln(x))}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 exp}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{power\}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 ln}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Get}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Get\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure get (f: fileVariable);\par }{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 get procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 The get procedure takes a file variable as a parameter.  It places the current file element into the internal read buffer, and then advances the file by one file element, so that the file pointer points to the next file element.  It is an error to call get on a file that has reached the last element - i.e., for a file for which eof is true.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 get(f);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Halt}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Halt\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure halt (errorNumber: integer);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1130{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Halt is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 halt procedure\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 The halt procedure is used to abort execution of a program and/or report a run-time error to the shell.  Internally, halt issues a ProDOS QUIT call.  If halt is used to simply exit a program early, the }{\i\fs20 errorNumber}{\fs20  parameter should be set to zero to inform the shell that no error occurred.  If halt is used to exit upon detection of a serious error, }{\i\fs20 errorNumber}{\fs20  should be set to the error number as returned by a shell, ProDOS, or tool call.  If the error is internal to the program, set }{\i\fs20 errorNumber}{\fs20  to -1.  The shell uses the error number to determine if it needs to take some action, such as exiting an EXEC file.  If portability is an issue, avoid use of halt.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 if x < maxint then\par    z := x * 2;\par else\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    halt(-1);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Insert}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Insert\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure insert(str1: string[size1]; var str2: string[size2];\par    index: integer);\par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1131{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Insert is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 The insert procedure allows }{\i\fs20 str1}{\fs20  to be inserted into }{\i\fs20 str2}{\fs20 , starting at }{\i\fs20 index}{\fs20 .  If the insertion causes }{\i\fs20 str2}{\fs20  to overflow, the extra characters are lost at the end of the string.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    str1, str2: string[20];\par \par begin\par str2 := 'up and away';\par str1 := ', up';\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 insert (str1, str2, 3);\par }\pard \qj\widctlpar\adjustright {\fs20 \par would result in str2 being set to up, up and away.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Length}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Length\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function length (str: string[size]): integer;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1132{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Length is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 length function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Length returns the current length of the string.  If a null character has been embedded in a c-string, the length of the string is the number of characters up to, but not including, the null character.  If null has not been written to the string, then the length of the string is the maximum size given when the string was defined.  For length strings, the length is always the same as ord(str[0]), even if the string has imbedded null characters.  If portability is an issue, avoid the use of length.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    x: integer;\par    str: string[10];\par \par begin\par str := 'hey';\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 x := length (str);\par }\pard \qj\widctlpar\adjustright {\fs20 \par would set x to 3. \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Ln}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Ln\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function ln (x: real): real;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ln function\bxe }}}{\fs20 The ln function returns the natural logarithm of the argument.  The argument must be assignment-compatible with a real value.  The result is an extended value.  It is an error if the argument is less than or equal to zero.  See exp for an example.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Member}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Member\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function member (obj: objectType; otype: objectType): boolean;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1133{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Member is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 member function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}}}{\fs20 Member checks to see if an object is a member of an object family.  The first parameter is an object variable; this is the object that will be checked.  The second parameter is an object type.  Member returns true if the object is the same type as the object type, or if the object is a descendent of the object type.  (The object is a descendent of the object type of the type of the object is formed by inheriting the object type, or if there is an inheritance chain back to the object type.)  If the object variable is nil, or if it is not a descendent of the object type, Member returns false.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par    obj1 = object\par       end;\par    obj2 = object (obj1)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18       end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    v1: obj1;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    v2: obj2;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par new(v1);\par new(v2);\par writeln(Member(v1, obj2)); \{prints false\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 writeln(Member(v2, obj1)); \{prints true\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 New}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 New\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure new (var p: pointer; v1, v2, ..., vn: variantConstant); \par }{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new procedure\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 heap}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dynamic variables}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 New is used to allocate dynamic variables and objects from the heap.  One parameter is required; it is either a pointer or an object.\par If the required parameter is a pointer, other parameters may be given after the pointer, which refer to the variant portions of a record if the pointer is to contain the address of a variant record.  The type of the pointer determines how much space new will allocate from the heap.  New returns a pointer to a heap area.  It is an error if there isn't enough room on the heap for the allocation.  The area returned is not initialized in any way.\par Further control over the amount of memory that is allocated is available with the optional additional parameters.  Normally, new will allocate the maximum amount of space that can ever be needed by a variant record.  For example,\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type\par    data = (str, int);\par    variant = record\par       case kind: data of\par          str: (string80: string[80]);\par          int: (i: integer);\par    end;\par \par var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    p: ^variant;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\fs20 defines a pointer p that can point to an integer, which requires two bytes of storage, or a string, which requires eighty-one.  If p will point to either kind of data, it should be allocated like this:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 new (p);\par }{\fs20 \par This application of new to a variant record allows for allocation of the maximum amount of memory that will ever be needed (83 bytes in our example \endash  81 bytes for the string plus two bytes for the variant selector, data).  If, however, you know that once it is allocated, p will always point to an integer, you may use the call\par \par }{\f6\fs18 new (p, int);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 In this case, new would only allocate four bytes from the heap, two for the integer and two for the variant selector, data.  If you do this, however, be sure that you do not store a string in p^.str later.  Doing so will damage the heap, with unpredictable results.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 objects}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the required parameter is an object, new allocates space for a new object and initializes the space so the methods associated with the object type will be used when messages are sent to the object.  Fields in the object are not initialized in any way.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Odd}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Odd\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function odd (k: integer): boolean;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 odd function\bxe }}}{\fs20 The odd function takes an integer argument and returns a boolean result.  The result is true if the argument is odd, and false if it is even.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure BinOut (i: integer);\par \par \{ recursively write an integer as a binary number                 \}\par \{                                                                 \}\par \{ parameters:                                                     \}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{    i - integer to write                                         \}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    procedure BitOut (i, c: integer);\par \par    \{ write the bits                                               \}\par    \{                                                              \}\par    \{ parameters:                                                  \}\par    \{    i - integer containing bits                               \}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    \{    c - number of bits left to write                          \}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    begin \{BitOut\}\par    if c > 1 then}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 >}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       BitOut(i div 2, c - 1);}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 div}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 -}{\v\fs20  operator}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    write(chr(ord('0') + ord(odd(i))))}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 chr}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 ord}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 odd}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 write}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end; \{BitOut\}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin \{BinOut\}\par BitOut(i, 16)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{BinOut\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Open}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Open\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure open (f: fileVariable, s: string);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1134{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Open is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRINTER device}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CONSOLE device}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers}}}{\fs20 Open is a nonstandard procedure that opens a file for both input and output.  The first parameter is a file variable.  An optional second parameter can be coded.  It is a string which contains the path name of the file.  The path name ends with the first space, null character (ASCII zero), or end of the string, whichever comes first.  That is, a file name of 's ' would cause the file named S in the current prefix to be opened.  If you are programming under the ORCA or APW shells, the string can also contain device numbers, prefix numbers, and .. , or .printer or .console.  Note that .printer can only be used with output and erroroutput, and that .console can only be used with input, output, and erroroutput.  Input, output, and erroroutput are specified in the program declaration part of the program.\par If no file name is given in the open call, open will assign a unique file name.  That file name will start with the characters "SYSPAS," and will have a four-digit number appended to "SYSPAS."  The number will increment for each new file variable that is opened with reset, open or rewrite, and that does not have a programmer-assigned file name.  For example, the first file created without an assigned file name will be given the name "SYSPAS0001."  The file will be created on the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\fs20 work prefix, prefix 3.\par The file pointer points to the first element of the file.  If there was already information in the file, all old information remains.  If there was no file by the given name, one is created and opened.  Along with seek and the Standard Pascal I/O functions, open gives full access to files for both input and output, and allows random access to the elements of the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    myfile: file of stuff;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    f: file of integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 open(myfile);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 open(f, '/mydata/data1');\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Ord}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Ord\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function ord (x: ordType): integer;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 enumerations}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\fs20 The ord function converts any ordinal type into an integer.  The ordinal types include integers, enumerations, characters, and booleans.  For enumerations, the value will be the number you get when you count the enumeration constants, starting from zero.  For example, for the definition\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 color = (red,orange,yellow,green,blue,violet);\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 the ordinal values of each of the enumeration constants are:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\keepn\widctlpar\tx1800\adjustright {\fs20 red\tab 0\par orange\tab 1\par yellow\tab 2\par green\tab 3\par blue\tab 4\par }\pard \qj\li720\widctlpar\tx1800\adjustright {\fs20 violet\tab 5\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The ordinal values for characters are given by the ASCII character set.  For boolean values, }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\fs20 ord(true) = 1 and ord(false) = 0.\par Ord can be used to force the conversion of a long integer into an integer.  This is occasionally necessary if you want to use a long integer value in a place where they are normally not allowed, such as for subscripting arrays.\par See Type Casting in Chapter 21 for ways to convert from an integer to another ordinal type.\par See chr for an example.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Ord4}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Ord4\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function ord4 (x: ordType): longint;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1135{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Ord4 is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord4 function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\fs20 The functionality of ord4 is identical to the Standard Pascal function ord, except that it returns a long (four-byte) integer instead of a two-byte integer.  Ord4 is especially useful for converting any pointer into an integer so that pointer arithmetic may be employed.  If portability is an issue, avoid use of ord4.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    nums: array [1..maxint] of integer;\par    p, q: ^integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    x: integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par p := @nums;\par q := pointer (ord4(p) + 2);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 x := q^;\par }\pard \qj\widctlpar\adjustright {\fs20 \par would set x equal to the second element of the array nums.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pack}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pack\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure pack (UnpackedArray: array[n..m] of someType;\par    start: integer;\par    var PackedArray: packed array [n1..m1] of someType);\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pack procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed arrays}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays}}}{\fs20 The pack procedure moves values from an unpacked array into a packed array.  Let Packed_Array be a packed array, and Unpacked_Array be an unpacked array, with both arrays having elements of the same type.  We will also need a starting subscript, which we will call Start.  The starting subscript must be assignment-compatible with the index type of the unpacked array.  With these assumptions, the call to pack\par \par }{\f6\fs18 pack(Unpacked_Array, Start, Packed_Array);}{\f6\fs20 \par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 will move components from the unpacked array into the packed array.  The first component moved will be the component with subscript Start.  Components are placed in the packed array starting with the first element in the packed array and continuing until the packed array is full.  It is an error if there are not enough components in the unpacked array to fill the packed array.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Another way of looking at all this is to examine a piece of code that does the same thing as the pack procedure.  With the declarations\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 Unpacked_Array: array[1..100] of components;\par Packed_Array: packed array[Lower..Upper] of components;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 Start: integer;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the call to pack shown earlier is completely equivalent to this code:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par j := Start;\par for i := Lower to Upper do begin\par    Packed_Array[i] := Unpacked_Array[j];\par    if i <> Upper then j := j+1;\par    end; \{for\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }{\fs20 \par It is easy to see several points about packed arrays from this code.  First, the packed and unpacked arrays do not have to be the same size.  The also do not have to have the same type of index variable.  Finally, it is easier to see why the unpacked array must have enough components to fill the packed array.\par While the pack procedure is equivalent to the code shown above, it is considerably faster to use pack that it is to use the code shown.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Page}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Page\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure page (f: fileVariable);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 page procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\fs20 The page procedure writes an ASCII form-feed character (the ordinal value is 12) to the output file specified by the parameter.  If no parameter is given, standard output is assumed.\par The action that results from writing a form-feed character depends on the device that it goes to.  If the device is the CRT screen, and if the screen has been initialized for Pascal output (which it has, if you are running under the ORCA text environment) then the screen is cleared and the cursor is placed at the top left corner of the screen.  If the device is a printer, most printers}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers}}}{\fs20  will perform a page eject.  The next character printed will be at the top of a new page.  If the output is going to a disk file, a form-feed character is written to the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 page (myfile);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pointer}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pointer\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function pointer (x: pointerType): anonymousPointer;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1136{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Pointer is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointer function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 type compatibility}}}{\fs20 The pointer function bypasses type-checking for pointers.  Its parameter is any pointer, integer, or longint.  It returns a pointer whose type is equivalent to the predefined constant nil.  That is, it is type-compatible with any pointer.  This procedure does not result in any generated code unless the argument is of type integer, in which case the two-byte integer is extended to four bytes.  Avoid the use of pointer if portability is an issue.  See ord4 for an example.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pos}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pos\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function pos (target: string[tsize]; source: string[ssize]):\par    integer;\par }{\b \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1137{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Pos is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pos function\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 The function pos searches the }{\i\fs20 source}{\fs20  string for the first occurrence of the }{\i\fs20 target}{\fs20  string.  If }{\i\fs20 target}{\fs20  is found, it returns the number of the character where }{\i\fs20 target}{\fs20  begins.  If }{\i\fs20 target}{\fs20  is not found, it returns zero.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 str := 'big program';\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 x := pos ('gram', str);\par }\pard \qj\widctlpar\adjustright {\fs20 \par would set x to 8.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pred}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pred\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function pred (x: ordinalType): ordinalType;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pred function\bxe }}}{\fs20 The pred function returns the value before the argument.  The argument can be any ordinal value, and the result type matches the argument type.  Ordinal values include integers, characters, enumerations, and booleans.  It is an error if the value before the argument does not exist - for example, pred(false) is an error, since there is no value before false.  Pred(true), however, is false.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 newcolor := pred(oldcolor);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Put}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Put\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure put (f: fileVariable);\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 put procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 The value pointed to by the file pointer is written to the output file.  It is an error to call }{\f6\fs18 put}{\fs20  for a file that has reached end-of-file or that was opened for input.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program count;\par \{writes integers to an integer output file\}\par \par var\par    f: file of integer;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    i: integer;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par rewrite(f, 'numbers');}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 rewrite}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par for i := 1 to 100 do begin}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 for statement\: examples}}}{\f6\fs18 \par    f^ := i;\par    put(f);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 put}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    end;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Random}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Random\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function random: real;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1138{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Random is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 random function\bxe }}}{\fs20 The random function returns a pseudo-random real number in the range -1.0 .. 1.0, exclusive.  The seed procedure, discussed later in this chapter, can be used to initialize the sequence of numbers generated.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Simulation(i: integer);\par \par var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    time: real;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin \{Simulation\}\par seed(i);}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 seed}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par time := random;\par beginSim (time)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Simulation\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RandomDouble}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 RandomDouble\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function RandomDouble: extended;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1139{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab RandomDouble is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RandomDouble function\bxe }}}{\fs20 The RandomDouble function returns a pseudo-random real  number  in  the  range -1.0 .. 1.0, exclusive.  The seed procedure, discussed later in this chapter, can be used to initialize the sequence of numbers generated.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Simulation (i: integer);\par \par var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    time: real;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin \{Simulation\}\par seed(i);}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 seed}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par time := RandomDouble;\par beginSim (time)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Simulation\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RandomInteger}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 RandomInteger\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function RandomInteger: integer;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1140{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab RandomInteger is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RandomInteger function\bxe }}}{\fs20 The RandomInteger function returns a pseudo-random integer in the range -maxint .. maxint, exclusive.  The seed procedure, discussed later in this chapter, can be used to initialize the sequence of numbers generated.   \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Simulation (i: integer);\par \par var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    people: integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin \{Simulation\}\par seed(i);}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 seed}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par people:= RandomInteger;\par beginSim (people)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Simulation\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RandomLongint}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 RandomLongint\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function RandomLongint: longint;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1141{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab RandomLongint is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RandomLongint function\bxe }}}{\fs20 The RandomLongint function returns a pseudo-random longint number in the range -maxint4 .. maxint4, exclusive.  The seed procedure, discussed later in this section, can be used to initialize the sequence of numbers generated.   \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Simulation (i: integer);\par \par var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    population: longint;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin \{Simulation\}\par seed(i);}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 seed}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par population := RandomLongint;\par beginSim (population)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Simulation\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Read, Readln}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Read, Readln\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure read ( [f: fileVariable;] d1, d2, ..., dn: fileData);\par procedure readln ( [f: fileVariable;] d1, d2, ..., dn: fileData);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 readln procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 read procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 Read is the easiest way to read from an input file.  Read can take several parameters - the first can be a file variable.  If the first parameter is not a file variable, it is assumed that the input will come from the standard input file, input.  The remaining parameters are variables that are assignment-compatible with the type of the file.  Values are read from the file and placed sequentially into the specified variables.  Thus, read is really just a shorthand way of doing gets, and letting the compiler worry about assignments to the file buffer.  For example, with a file defined as\par \par }{\f6\fs18 myfile: file of stuff;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 and variables\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 v1, v2, v3: stuff;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the call\par \par }{\f6\fs18 \tab read (myfile,v1,v2,v3);\par }{\fs20 \par is completely equivalent to\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 v1 := myfile^;\par get (myfile);\par v2 := myfile^;\par get (myfile);\par v3 := myfile^;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 get (myfile);\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1142{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab In Standard Pascal, the read statement cannot be used to read strings from a text file.\~\~\u8710\'c6\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Read has some special abilities when the file is a text file.  (The standard file input is one such file.)  In that case, the variable can be a character, integer, real or string.  If the variable is a character, one character is read and assigned to the variable.  If the variable is an integer or real, read starts by skipping all spaces, end-of-line markers, and any control characters until it gets to a printing ASCII character.  It is an error if that character is not the start of a number.  Read then reads in the number, which stops with the first character that is not a part of the number, and assigns the value to the variable.  For a string, read will read all characters up to the end of the line, or up to the length of the string, whichever is shorter.  If the line was shorter than the string, and the string is a standard Pascal string, the remaining string characters are set to chr(0).  If the string has a length byte, the length byte is set to the length of the string.\par For example, consider a file produced by the following program:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program MakeFile;\par \par \{create a file of integers\}\par \par var\par    i, j: integer;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    f: text;\par \par begin\par rewrite(f,'intfile');}{\pard\plain \fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 rewrite}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 for i := 1 to 10 do begin}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 for statement\: examples}}}{\f6\fs18 \par    for j := 1 to 10 do\par       write(f,(i-1)*10+j:10);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 write}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    writeln(f);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 writeln}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par }\pard \fi360\widctlpar\adjustright {\f6\fs18    end;\par end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par When the file is read, there is no need to keep track of where the end-of-line markers are.  This program reads the file created by the last example program and writes each integer on a separate line:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 program writeint (output);\par \par \{writes the file created by the last program\}\par \par var\par    f: text;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    i: integer;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par reset(f,'intfile');}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 reset}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par while not eof(f) do begin}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 eof}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    if eoln(f) then}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 eoln}{\v\fs20  function}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       readln(f)}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 readln}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par    else begin\par       read(f, i);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 read}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       writeln(i);}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 writeln}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par       end;\par    end;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Readln functions exactly like read, except that after the read is finished, characters are skipped until eoln becomes true, then the end-of-line marker itself is skipped.  Readln can be coded with only a file variable, or with no parameters at all.  If only a file variable is coded, characters are skipped until the end-of-line has been passed.  If no parameters are coded, the same is done for the standard input.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Reset}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Reset\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure reset (f: fileVariable; s: string);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1143{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab The use of a string to set the file name is an extension to Standard Pascal.  This extension is common in microcomputer based Pascals, but mainframe implementations of Pascal generally provide some other way to associate a file variable with a name.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 reset procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 input}}}{\fs20 Reset opens a file for input.  The first parameter is a file variable.  An optional second parameter is optional.  It is a string which contains the path name of the file.  The path name ends with the first space, null character (ASCII zero), or end of the string, whichever comes first.  That is, a file name of 's ' would cause the file named S in the current prefix to be opened.  If you are programming under the ORCA or APW shells, the string can also contain device numbers, prefix numbers, and .. , or .console.  Note that .console can only be used with the file input, which is specified in the program declaration part of the program.  \par If no file name is given in the reset call, ORCA/Pascal will open the file last associated with the file variable given as the first parameter to reset.  This file can be one named by the programmer, or it can be a system-provided default name.  The default name starts with "SYSPAS" and has a four-digit number appended to "SYSPAS."  The number is incremented with each call to open, reset, or rewrite that does not use an assigned file name.  See the open and rewrite procedures in this section for more information about associating an external file name with a file variable.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\fs20 \par It is an error if the file does not exist.  The file pointer is assigned the first value from the file.  Resetting the standard input is legal, but has no effect.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 reset(f);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 reset(g, '/mydata/data4');\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ReWrite}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ReWrite\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure rewrite (f: fileVariable; s: string);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1144{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab The use of a string to set the file name is an extension to Standard Pascal.  This extension is common in microcomputer based Pascals, but mainframe implementations of Pascal generally provide some other way to associate a file variable with a name.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 rewrite procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output}}}{\fs20 Rewrite opens a file for output.  The first parameter is a file variable.  An optional second parameter is optional.  It is a string which contains the path name of the file.  The path name ends with the first space, null character (ASCII zero), or end of the string, whichever comes first.  That is, a file name of 's ' would cause the file named S in the current prefix to be opened.  If you are programming under the ORCA or APW shells, the string can also contain device numbers, prefix numbers, and .. , or .console or .printer.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CONSOLE device}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRINTER device}}}{\fs20 Note that .console and .printer can only be used with the files output and erroroutput, which are specified in the program declaration part of the program.\par If the file exists, all of its old contents are first deleted.  The first put will write a value to the first position in the file.  Rewriting the standard output is allowed, but is ignored.\par If no file name is given in the rewrite call, rewrite will assign a unique file name.  That file name will start with the characters "SYSPAS,"  and will have a four-digit number appended to "SYSPAS."  The number will increment for each new file variable that is open or rewritten, and that does not have a programmer-assigned file name.  For example, the first file created without an assigned file name will be given the name "SYSPAS0001."  The file will be created on the work prefix, prefix 3.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\fs20 \par The type of the file depends on the type of the file variable.  If the file variable was declared as text, the file created will be a ProDOS TXT file.  If the file variable was declared as anything else, even file of char, the output file will be a ProDOS BIN file with an aux field of zero.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:BIN}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 rewrite(f);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 rewrite(g, '../myoutput/outfile1');\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Round}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Round\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function round (x: real): integer;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 round function\bxe }}}{\fs20 The argument is converted  to  the  nearest  integer.  If  the  nearest  integer  is  outside  the  range -maxint to maxint, an error results.    The argument can be real, double, comp, extended, integer, or longint.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 round(2.5) = 3\par round(-2.5) = -3\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 round(17.3) = 17\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Round4}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Round4\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function round4 (x: real): longint;\par }{\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1145{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Round4 is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 round4 function\bxe }}}{\fs20 The argument is converted  to  the  nearest  longint.  If  the  nearest  longint is  outside  the  range -maxint4 to maxint4, an error results.    The argument can be real, double, comp, extended, integer, or longint.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 round4(2.5) = 3\par round4(-2.5) = -3\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 round4(100000.3) = 100000\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Seek}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Seek\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure seek (f: fileVariable; fptr: longint);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1146{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Seek is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 seek procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 random access files}}}{\fs20 The seek procedure provides a way to position the file pointer.  This allows random access I/O.  Seek takes two parameters - a file variable and an integer.  The next value written to or read from the file will be the ith element, counting from zero.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\outl\f20\fs20 \u-3981\'73}{\b\fs20 \tab Important}{\fs20 \tab Seek positions the file pointer, but does not do a get.  To read a specific value from a file, you must first do a seek, then do a get, and then dereference the value.  Using read statements, you would use seek to position the file pointer, then use read to fetch the value, then use read a second time to actually read the value.\~\~}{\outl\f20\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 seek(f,pos+10);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Seed}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Seed\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure seed (x: integer);\par }{\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1147{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Seed is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 seed procedure\bxe }}}{\fs20 The seed procedure is used to initialize the random number generator.  For any given seed, the random number generator will generate the same sequence of numbers.  For example, if you use the seed 4 each time you run a program, you will get exactly the same results.  This is handy when you are debugging a program.  Once the program is complete, you should use some semi-random source to initialize the random number generator.  One such source is the system clock; for an example of this, see the Artillery program in Chapter 4.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ShellID}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ShellID\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure ShellID (var id: string[8]);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1148{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab ShellID is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ShellID procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 Each shell running on the Apple\~II}{\scaps\fs20 gs}{\fs20  computer has a unique eight-character identifier.  The shell identifier for ORCA and APW is BYTEWRKS.  The procedure ShellID returns the string assigned to the shell that a program was executed under.  If portability is an issue, avoid use of ShellID.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par    str: string[8];\par \par begin\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 ShellID(str);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Sin}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Sin\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function sin (x: real): real;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sin function\bxe }}}{\fs20 The sin function returns the sine of the argument, which is expressed in radians.  The argument must be assignment-compatible with a real value.  The result is an extended value.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function cosecant(r: real): real;\par \par begin\par cosecant := 1.0/sin(r)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 SizeOf}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 SizeOf\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function SizeOf (value): integer;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1149{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab SizeOf is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SizeOf function\bxe }}}{\fs20 The SizeOf function returns the size, in bytes, of any type or variable.  The parameter is a type name or a variable name.  If the parameter is a type, SizeOf returns the number of bytes that would be required to hold a variable of the given type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 size := SizeOf(myRecord);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Sqr}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Sqr\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function sqr (x: real): real;\par function sqr (k: integer): integer;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sqr function\bxe }}}{\fs20 The result is the square of the argument.  The result is an extended value.  It is an error is the result is too large to be represented.  See sqrt for an example.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Sqrt}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Sqrt\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function sqrt (x: real): real;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sqrt function\bxe }}}{\fs20 The sqrt function returns the square root of the argument.  The result is an extended value.  The argument can be real, double, comp, extended, integer, or longint.  The argument must be positive or zero, or an error will result.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 function len (x, y: real): real;\par \par \{ find the length of a vector                                       \}\par \par begin \{Len\}\par len := sqrt(sqr(x) + sqr(y))\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Len\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 StartDesk}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 StartDesk\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure StartDesk (x: integer);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1150{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab StartDesk is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 StartDesk procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop programs}}}{\fs20 The StartDesk procedure is included with ORCA/Pascal to help simplify the task of writing desktop applications.  The procedure accepts a single integer parameter of either 320 or 640, the graphics mode in which the application is to run.  StartDesk initializes these tools:\par \par }\pard \qj\li360\widctlpar\tx2880\tx5760\adjustright {\fs20 Miscellaneous Tools\tab QuickDraw II\tab Desk Manager\par Event Manager\tab Integer Math Tool Set\tab Window Manager\par Menu Manager\tab Control Manager\tab QuickDraw II Auxiliary\par LineEdit Tool Set\tab Dialog Manager\tab Scrap Manager\par Standard File Tool Set\tab Font Manager\tab List Manager\par Resource Manager\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par SANE and the Memory Manager are started in all C programs, so they are not started explicitly by StartDesk.\par The procedure EndDesk will shut these tools down.\par StartDesk also opens your program's resource fork, if there is one, and makes it the current resource fork.  The resource fork is opened with read access.\par After using StartDesk, Pascal's standard input and output subroutines (like readln and writeln) draw characters to the graphics screen using the current font and pen position.\par If your application needs any other tools, you are responsible for initializing and shutting them down.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 StartDesk(320);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 StartGraph}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 StartGraph\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure StartGraph (x: integer);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1151{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab StartGraph is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 StartGraph procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics programs}}}{\fs20 The procedure StartGraph is provided with ORCA/Pascal to make writing graphics applications easier.  It accepts a single integer parameter of either 320 or 640, the graphics mode desired for the application.  StartGraph initializes QuickDrawII, clears the graphics screen and then sets it to black, sets the pen color to white and puts the pen in "or" mode, and sets the foreground color to white and the background color to black.  An example of a graphics program is given in Chapter 4.\par After using StartGraph, Pascal's standard input and output subroutines (like readln and writeln) draw characters to the graphics screen using the current font and pen position.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 StartGraph (640);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Succ}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Succ\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function succ (x: ordinalType): ordinalType;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 succ function\bxe }}}{\fs20 The succ function returns the value after the argument.  The argument can be any ordinal value, and the result type matches the argument type.  Ordinal values include integers, characters, enumerations, and booleans.  It is an error if the value after the argument does not exist - for example, succ(true) is an error, since there is no value after true.  Succ(false), however, is true.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{write the printing ASCII characters\}\par ch := ' ';\par while ch <= '~' do begin\par    write(ch);\par    ch := succ(ch);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    end; \{while\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 SystemError}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 SystemError\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure SystemError (errorNumber: integer);\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1152{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab SystemError is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SystemError procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 When a run-time error occurs, the program can call a procedure named SystemError to handle it.  By placing this procedure in your program, you can prevent your program from stopping with a terminal error.  Once you have handled the error, you can exit the procedure where the error occurred, whereupon execution will pick up where it left off, or you can call another procedure in your program.  The errorNumber corresponds to the number of the error, as given in the table below.\par You can flag the error in either of two ways.  First, you can print your own error message (or print no message at all).  Second, you can call a system procedure called SystemPrintError}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SystemPrintError}}}{\fs20  with the error number.  This procedure will print a text error message to error out and return to you.\par If you decide to stop program execution, this can be done in one of two ways.  First, you can use the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 halt procedure}}}{\fs20 halt procedure to stop, returning an error code to the shell if you wish.  Second, you could call the system procedure SystemErrorLocation}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SystemErrorLocation}}}{\fs20 , which will print the line number and procedure or function name where the error occurred, and a trace back showing what calls were made.  If you have turned off line numbers and procedure names using the names compiler directive, the call will produce no output.  SystemErrorLocation causes your program to halt execution.\par \par }\pard \qj\li720\ri2520\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 Error Number\tab Error\par }\pard \qj\li720\ri2520\keepn\widctlpar\tx2160\adjustright {\fs20 1\tab Subrange exceeded\par 2\tab File not open\par 3\tab Read while at end of file\par 4\tab I/O error\par 5\tab Out of memory\par 6\tab EOLN while at end of file\par 7\tab Set overflow\par 8\tab Jump to undefined case statement label\par }{\i\fs20 \tab This error cannot be recovered from!\par }{\fs20 9\tab Integer math error\par 10\tab Real math error\par 11\tab Underflow\par 12\tab Overflow\par 13\tab Divide by zero\par 14\tab Inexact\par 15\tab Stack overflow\par 16\tab Stack error\par \par }\pard \widctlpar\tx1440\adjustright {\fs20 \tab Table 22.2  Run-time errors\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tan function\bxe }}}{\fs20 \par These three procedures \endash  SystemError, SystemErrorLocation and SystemPrintError \endash  are not predefined in Pascal, like the other procedures defined in this chapter.  If you want to call one of these procedures from your program, you must define the procedure as external.  To replace the procedure that is normally used, place the replacement procedure in your program just like you would any other globally accessible procedure.\par For a detailed explanation of these run-time errors, see "Execution Errors" in Appendix B.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Tan}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Tan\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function tan (x: real): real;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1153{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Tan is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tan function\bxe }}}{\fs20 The tan function returns the tangent of the argument, expressed in radians.  The argument must be assignment-compatible with a real value.  The result is an extended value.  It is an error to take the tangent of an angle which is a multiple of \u960\'b9/2.  Avoid the use of tan if portability is an issue.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 z := tan(x/y);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ToolError}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ToolError\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function ToolError: integer;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1154{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab ToolError is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ToolError function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 ToolError returns the error number returned by the last call to a tool, ProDOS, or the shell, or zero if no error occurred.  If a tool call produced an error, but then a subsequent tool call did not result in an error, a call to ToolError would yield a zero.  Note also that many of the tool calls do not report errors of any kind.  If portability is an issue, avoid use of ToolError.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par }{\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 k := ToolError;\par if k <> 0 then\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    halt(k); \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Trunc}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Trunc\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function trunc (x: real): integer;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trunc function\bxe }}}{\fs20 Truncates the real argument, returning an integer result.  The result is the largest integer that is less than or equal to the argument for positive arguments, and the smallest integer greater than or equal to the argument for negative arguments.  The result must be in the valid range for integers or an error will result.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 trunc(1.9) = 1\par trunc(-1.9) = -1\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 trunc(0) = 0\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Trunc4}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Trunc4\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function trunc4 (x: real): integer;\par }{\fs20 \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1155{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab Trunc4 is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trunc4 function\bxe }}}{\fs20 Truncates the real argument, returning a longint result.  The result is the largest long integer that is less than or equal to the argument for positive arguments, and the smallest long integer greater than or equal to the argument for negative arguments.  The result must be in the valid range for long integers or an error will result.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 trunc4(100000.9) = 100000\par trunc4(-1.9) = -1\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 trunc4(0) = 0\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Unpack}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Unpack\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure unpack (packedArray: packed array [n..m] of someType; \par          unpackedArray: array [n..m] of someType; start: integer);\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 unpack procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed arrays}}}{\fs20 The unpack procedure moves values from a packed array into an unpacked array. Let Packed_Array be a packed array, and Unpacked_Array be an unpacked array, with both arrays having elements of the same type.  We will also need a starting subscript, which we will call Start.  The starting subscript must be assignment compatible with the index type of the unpacked array.  With these assumptions, the call to unpack\par \par }{\f6\fs18 unpack(Packed_Array,Unpacked_Array,Start);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 will move all of the components of the packed array into the unpacked array.  The first component moved will replace the component of the unpacked array whose subscript is }{\f6\fs18 Start}{\fs20 .  Components are placed in the unpacked array starting with the first element in the packed array and continuing until the packed array is empty.  It is an error if there are not enough components in the unpacked array to accept all of the components of the packed array.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Another way of looking at all this is to examine a piece of code that does the same thing as the unpack procedure.  With the declarations\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 Unpacked_Array: array[1..100] of components;\par Packed_Array:  packed array[Lower..Upper] of components;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 Start: integer;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the call to unpack shown earlier is completely equivalent to this code:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par j := Start;\par for i := Lower to Upper do begin\par    Unpacked_Array[j] := Packed_Array[i];\par    if i <> Upper then j := j+1;\par    end; \{for\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par }{\fs20 \par It is easy to see several points about packed arrays from this code.  First, the packed and unpacked arrays do not have to be the same size.  They also do not have to have the same type of index variable.  Finally, it is easier to see why the unpacked array must have enough components to accept all of the packed array.\par While the unpack procedure is equivalent to the code shown above, it is considerably faster to use unpack that it is to use the code shown.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 UserID}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 UserID\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 function UserID: integer;\par \par }\pard \qj\fi-720\li720\ri720\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1156{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab UserID is an extension to Standard Pascal.\~\~\u8710\'c6\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UserID function\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory management}}}{\fs20 The function UserID returns the number assigned to your program by the loader (a part of ProDOS 16) when it loaded your program.  The UserID is required for some tool calls, most notably the memory manager.  You should always allocate memory using the user ID returned by this function.  This allows the shell to deallocate memory allocated by your program if your program terminates early.\par The UserID returned by this function is the user ID for your program ored with $0100.  This allows you to easily dispose of all memory allocated since your program started.  The new procedure uses this user ID also, but you should not use the toolbox's memory manager to deallocate all memory for your user ID if you are using new.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 x := UserID;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Write, Writeln}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Write, Writeln\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure write ( [f: fileVariable;] d1, d2, ..., dn: fileData);\par procedure writeln ( [f: fileVariable;] d1, d2, ..., dn: fileData);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 write procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 writeln procedure\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 Write gives a shorthand way to write values to a file.  It takes a variable number of parameters.  The first can be a file variable - if so, the values are written to the indicated file.  If the first parameter is not a file variable, the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output}}}{\fs20 standard output file output is assumed.  Each of the remaining parameters, of which there must be at least one, must be assignment-compatible with the data pointed to by the file pointer.  The data is written to the file in the order given.  Thus, with the declarations\par }{\b\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 myfile: file of stuff;\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 v1, v2: stuff;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the call\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 write (myfile, v1, v2);\par }\pard \qj\widctlpar\adjustright {\b\fs20 \par }{\fs20 is completely equivalent to\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 myfile^ := v1;\par put (myfile);\par myfile^ := v2;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 put (myfile);\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\fs20 Writeln works just like a write, except that, after the values have all been written, an end-of-line marker is written.  ORCA/Pascal writes the ASCII RETURN character (ordinal value 13) to mark the end of a line.  Writeln is only valid with text files.  It is legal to omit the value parameters with writeln, or to omit all of the parameters.  Thus,\par \par }{\f6\fs18 writeln;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 writes a carriage return to the standard output.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 field width}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 formatted output}}}{\fs20 When used with text files, write has some special properties.  First, the types of the parameters can be mixed.  They can include characters, strings, integers, reals, and booleans.  Each of these can optionally be followed by a colon and a positive integer that gives the width of the field in which the value will be written.  If the field width is larger than the number of  characters needed to represent the value, spaces are written to right-justify the value in the field.  If no field width is specified, a default size is used.  The default varies with the type of the output value.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\ri4140\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 Type\tab Default Field Width\par }\pard \qj\li720\ri4140\keepn\widctlpar\tx2160\adjustright {\fs20 char\tab 1\par boolean\tab 8\par byte\tab 8\par integer\tab 8\par longint\tab 16\par real\tab 16\par double\tab 16\par extended\tab 16\par comp\tab 16\par string\tab length of the string\par \par }\pard \widctlpar\tx720\outlinelevel0\adjustright {\fs20 \tab Table 22.3  Default output field widths\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the field width is too small to write the complete value, and the value to be written is not a string or boolean, the field width is ignored and all characters are written.  If the output value is a string, characters are removed from the end of the string until it fits in the field.  This is an internal operation \-\endash  a string variable is not modified by a write operation.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\fs20 Characters written to the screen are those from the ASCII character set, exactly as expected.  The same is true for strings.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\fs20 A boolean value of true is written as the string 'true.'  Like string output, if the field is too small, the end characters are truncated, so write(true:1) would write the character 't' to the file.  A boolean value of false is written as the string 'false,' with truncation applied as for true boolean values.\par Integers are written with a leading minus sign if the value is negative, followed by the character representation for the integer value.  No leading zeros are written.  Long integers are written in the same way as integers.\par If the field width of a real, double, comp or extended value is not specified, the number is written in scientific notation, using the default field width.  If the number is negative, it starts with a minus sign.  If the number is positive, the first character in the field is blank.  This is followed by a digit, a decimal point, seven more digits, and an exponent.  The exponent is written as an 'e', followed by a signed three-digit exponent value. For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18  3.1415930e+000\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 -1.0000000e-047\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 The smallest field width possible for one of the real types is nine, since the format required for scientific notation is\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 +/-d.de+/-ddd\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comp}}}{\fs20 If a field width is given which is less than nine, the field width is ignored and the default format is written.  If the field width is larger than nine, digits are written after the decimal point to bring the field size to the width specified.  The largest field width possible under ORCA/Pascal is limited by 80 columns.  That is, if the number begins at the start of a new line, then the maximum field size is exactly 80.  You should also be aware that real numbers contain a maximum of seven significant digits.  For field widths larger than 16, the extra digits after the seventh digit are inexact.  Double values contain a maximum of 15 significant digits.  For field widths larger than 22, the extra digits after the fifteenth digit are inexact.  Extended values contain a maximum of 19 significant digits.\par Real, double, comp and extended values can have another width after the field width.  Like the field width, it is coded as a colon and a positive integer.  The integer specifies the number of fractional digits, which is the number of digits to the right of the decimal place.  When this parameter is coded, the number is no longer written in scientific notation.  This might be used to write dollar amounts, as in\par \par }{\f6\fs18 write('$',yourmoney:1:2);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 which would print a suitably large number to the screen (We hope!):\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18      $12593.16\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 write (f,v1,v2,v3);}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 write}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par writeln ('Hello, world.');}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 writeln}{\v\fs20  procedure}{\v\f6\fs18 \: examples}}}{\f6\fs18 \par writeln (output,'Hello, world.');\tab \{same effect as writeln above\}\par write (f,10,20,30,30+10);\par write ('c','string',true,10,10.0);\par write ('c':1,'string':6,true:8,10:8,10.0:16);\par    \{same effect as write above\}\par write ('c',string,true:4,10:2,10.0:4:1);\tab \{all run together\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 write (10.0:1:2);\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 23:  Compiler Directives\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Chapter 23 - Compiler Directives\par }\pard \qj\widctlpar\adjustright {\*\bkmkstart bk23}{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 23 \endash  Compiler Directives\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comments}}}{\v\fs20 .}{\fs20 Compiler directives are used to control the output of the compiler.  They are coded much like a comment, with the opening token being \{$ or (*$.  No spaces are allowed between the opening comment character, \{ or (* , and the dollar sign character, $.  What follows the name of the directive depends on which directive is used.  Any directive can be followed by a comma and another directive, except for }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 append directive}}}{\fs20 append and }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 copy directive}}}{\fs20 copy.  Some directives must appear before the beginning of the program, while others are allowed to appear anywhere in the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-720\li720\ri720\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1157{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw28\pich28\picwgoal560\pichgoal560\macpict\bliptag-1202484914\blipupi72{\*\blipuid b853894eff99158934c6d23fb901450c}04fb00000000001c001c1101a10064000c574f524400000000001c001c01000a00000000001c001c98000e0008000000740070000800040074007000000000001b001b000102f30008fb00023fff80fc0009fc000307fffffcfc000afc00007ffeff00c0fd000afd000001fdff00f0fd000afd00000ffdff00fefd000afd00003ffcff0080fe0008fd00fbff00e0fe000afe000003fbff00f8fe000afe000007fbff00fcfe0008fe00001ffafffe000afe00003ffaff0080ff000afe00007ffaff00c0ff000a02000001f9ff00f0ff000a02000003f9ff00f8ff000a02000007f9ff00fcff000a0200000ff9ff00feff00080200001ff8ffff00090200003ff8ff018000090200007ff8ff01c000090200007ff8ff01c00008010000f7ff01e00008010001f7ff01f00008010003f7ff01f80008010003f7ff01f80008010007f7ff01fc000801000ff7ff01fe000801000ff7ff01fe000701001ff6ff00000701001ff6ff00000701003ff6ff00800701003ff6ff00800701007ff6ff00c00701007ff6ff00c00701007ff6ff00c0060000f5ff00e0060000f5ff00e00f0d01fff0003ff0030ffff000fffff00f0d01fffe01ffc1e10fffc0f03ffff00f0d01ffff03ff03f00fff03fc0ffff00f0d01ffff03fe07f80ffe07fe07fff00f0d03ffff03fc0ffc0ffc0fff03fff80f0d03ffff03fc0ffe0ff81fff81fff80f0d03ffff03fc0fff0ff03fffc0fff80f0d03ffff03fc0ffffff03fffc0fff80f0d03ffff03fc0fffffe07fffe07ff80f0d07ffff03fe07ffffe07fffe07ffc0f0d07ffff03ff03ffffc0fffff03ffc0f0d07ffff03ff01ffffc0fffff03ffc0f0d07ffff03ff803fffc0fffff03ffc0f0d07ffff03ffe00fffc0fffff03ffc0f0d07ffff03fff003ffc0fffff03ffc0f0d07ffff03fffc00ffc0fffff03ffc0f0d07ffff03ffff003fc0fffff03ffc0f0d07ffff03ffffc01fc0fffff03ffc0f0d07ffff03fffff00fc0fffff03ffc0f0d07ffff03fffff807c0fffff03ffc0f0d07ffff03fffffc03c0fffff03ffc0f0d07ffff03fffffe03e07fffe07ffc0f0d07ffff03fc3fff03e07fffe07ffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d07ffff03fc3fff03f03fffc0fffc0f0d03ffff03fc1fff03f81fff81fff80f0d03ffff03fc0fff03fc0fff03fff80f0d03ffff03fc07fe07fe07fe07fff80f0d03ffff03fc03fc0fff03fc0ffff80f0d03fffe01fc21f83fffc0f03ffff80f0d01fff0003c3000fffff000fffff0060001f5ff00f0060001f5ff00f0060001f5ff00f0060000f5ff00e0060000f5ff00e00701007ff6ff00c00701007ff6ff00c00701007ff6ff00c00701003ff6ff00800701003ff6ff00800701001ff6ff00000701001ff6ff00000801000ff7ff01fe000801000ff7ff01fe0008010007f7ff01fc0008010003f7ff01f80008010003f7ff01f80008010001f7ff01f00008010000f7ff01e000090200007ff8ff01c000090200007ff8ff01c000090200003ff8ff018000080200001ff8ffff000a0200000ff9ff00feff000a02000007f9ff00fcff000a02000003f9ff00f8ff000a02000001f9ff00f0ff000afe00007ffaff00c0ff000afe00003ffaff0080ff0008fe00001ffafffe000afe000007fbff00fcfe000afe000003fbff00f8fe0008fd00fbff00e0fe000afd00003ffcff0080fe000afd00000ffdff00fefd000afd000001fdff00f0fd000afc00007ffeff00c0fd0009fc000307fffffcfc0008fb00023fff80fc0002f300ff}}{\fs20 \tab While most compilers will provide some method of doing the things these directive do, the ISO standard does not require these directives.  For that reason, the directives will need to be changed if you port the program to another compiler.\~\~\u8710\'c6\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Append}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Append\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 append directive\bxe }}}{\fs20 The append directive is followed by a string.  The string contains the path name of a source file.  The path name can contain device numbers, prefix numbers, and }{\b\fs20 ..}{\fs20  .  If the path name contains only a file name, then the current prefix is assumed. The current source file is closed and processing continues with the specified source file.  Any characters after the append in the original source file are ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$append 'myfile'\}\par \{$append '/mypascal/project.x/file1'\}\par \{$append '../file53'\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$append '.d4/prog4.pas' *)\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 CDev}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 CDev\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CDev directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Control Panel Devices}}}{\fs20 The CDev directive tells the compiler to create a control panel device (CDev) rather than a normal program.  CDevs are programs called under the control of Apple's Control Panel NDA.  The directive must appear before the program statement to have any effect.  The program must still have a body, but there should be no statements in the program body, and it is not executed.\par The directive itself has a single parameter, the name of a function that the Control Panel will call.\par For a short sample CDev, see the CDEV.SAMPLES folder of your ORCA/Pascal samples disk.  For a complete technical description of CDevs and how to write them, see }{\fs20\ul Apple\~II File Type Notes}{\fs20  for file type $C7.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ cdev main \}\tab \tab \tab \{ Create a CDev \}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ClassicDesk}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ClassicDesk\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDA}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ClassicDesk directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 classic desk accessories}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CDA}}}{\fs20 The ClassicDesk directive tells ORCA/Pascal that your program is a classic desk accessory, and that  the compiler needs to generate some special code.  This directive must appear before the program token.  The directive has three parameters.  The first is a string; this is the name that will be displayed in the classic desk accessory menu.  The next two are the names of two procedures, the startup procedure and the shutdown procedure.  The format is:\par \par }{\f6\fs18 \{$ClassicDesk 'name' Start ShutDown\}\par }{\fs20 \par Refer to Chapter 4 or the }{\fs20\ul Apple\~IIGS Toolbox Reference Manual:Volume 1}{\fs20  for more information about writing classic desk accessories.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Copy}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Copy\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 copy directive\bxe }}}{\fs20 The copy directive is followed by a string.  The string contains the path name of a source file.  The path name can contain device numbers, prefix numbers, and }{\b\fs20 ..}{\fs20  .  If the path name contains only a file name, the current prefix is assumed.  The compiler checks to make sure that the next token is a *) or \}, then closes the current source file and opens the one specified.  Once the end of the new source file has been reached, the old source file is reopened, and the compiler continues from the character after the end of the comment token containing the copy directive. \par Copied files can copy other files.  The level of nesting is limited only by available memory.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$copy '/mypascal/project/file99'\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$copy '5/prog3' *)\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 DataBank}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 DataBank\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DataBank directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox}}}{\fs20 Pascal assumes that the data bank register is correct - that is, that it points to the bank where the global variables are located.  There are occasions where a Pascal procedure or function will be called by some other language, and this assumption may not be a good one.  The most common case is when a procedure or function is called from an Apple\~II}{\fs18 GS}{\fs20  tool.  This directive tells the compiler to generate code at the start of each procedure or function to set the data bank to the global variable bank upon entering the procedure or function.  The original data bank value is restored before returning to the caller.\par Using this directive does not prevent a procedure or function from being called directly from Pascal.  It does, however, increase the size of code and decrease execution speed a little.  See the ToolParms directive for an example of the DataBank directive.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Debug}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Debug\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug directive\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The debug directive is used to turn source level debugging on and off from inside the program.  The directive currently supports two flags.  If bit 0 is set (a value of 1), the compiler generates debug code and symbol tables for the source-level debugger.  If bit 1 is set (a value of 2), the compiler generates only the debug information used by the profiler, so the program runs at a speed that is closer to true speed.  You can use both flags together.\par This directive may be expended in the future,  If so, it will be expended in such a way that \{$debug -1\} gives all available debugging, while \{$debug 0\} turns off all debug code.\par While the directive can be used anywhere in a program, debug code should be turned on and off only between program level procedures and functions.  There are a few tricks you can do by turning debug code off and pack on in the middle of a subroutine, but be sure each subroutine ends with the same debug options in effect that were in effect when the subroutine started.\par See the description of the ASML command in Chapter 8 for a way to turn debug code on and off from the shell or from a script file.  See the description of the Compile... dialog in Chapter 7 for a way to turn debug code on and off from the PRIZM desktop development environment.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$debug -1\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Dynamic}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Dynamic\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dynamic directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 segments}}}{\fs20 The dynamic directive looks, and for the most part works, like the segment directive, described later in this chapter.  The only difference between the two is that static segments (like those created with the segment directive) are loaded when the program starts to execute, while dynamic segments are only loaded if one of the procedures or functions in the dynamic segment is called.  In addition, by using Apple's loader (described in }{\fs20\ul Apple\~IIGS GS/OS Reference}{\fs20 ), you can unload dynamic segments to free memory for other uses.\par See the description of the segment directive for a general discussion of segments.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Eject}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Eject\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 eject directive\bxe }}}{\fs20 If the compiler listing has been redirected to a file or to the printer, then the eject directive causes a form-feed character (ASCII 12) to be written to the compiler listing.  There are no operands for this directive.  This directive has no effect if output is going to the console.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$eject\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$eject *)\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Float}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Float\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 float directive\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 floating-point}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FPE Card}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 68881 chip}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The 68881 floating-point card is supported under the 2.0 ORCA languages via an alternate SysFloat library.  There are two required steps and one optional step involved in using the FPE card.\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab You must replace the SysFloat library in your libraries folder with the FPE version of this library.  The FPE version of the library is located on the Extras disk at the path :Extras:FPE:SysFloat.  This file should be moved to your libraries folder, replacing the file 13:SysFloat.\par \par 2.\tab You must define and call a procedure that sets the slot number.  This procedure must be called before any floating-point calculations are performed.  The procedure is defined and called like this:\par \par }\pard \qj\li1080\keepn\widctlpar\adjustright {\f6\fs18 procedure SetFPESlot (slot: integer); extern;\par \par ...\par \par begin\par }\pard \qj\li1080\widctlpar\adjustright {\f6\fs18 SetFPESlot(3);\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab Making this call will }{\i\fs20 not}{\fs20  hurt if you are using the standard SysFloat library, which contains a dummy version of this subroutine.\par \par 3.\tab In addition, you can also use this directive:\par \par }\pard \qj\li1080\widctlpar\adjustright {\f6\fs18 \{$Float 1\}\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab This tells the compiler to generate code for the Innovative Systems FPE card.  The other alternative, and the default, is\par \par }\pard \qj\li1080\widctlpar\adjustright {\f6\fs18 \{$Float 0\}\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab which tells the compiler to generate code for SANE.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In ORCA/Pascal 2.0, the only thing this directive actually does is tell the compiler not to use certain shortcuts that generate direct calls to SANE for some simple binary math operations.\par Incidentally, in ORCA/Pascal 2.0, once the compiler has been told to generate code for the 68881, no direct calls to SANE are made by any code generated by the compiler.  All SANE dependencies lie in the libraries, which can be replaced for cross development to other machines.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ISO}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ISO\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ISO directive\bxe }}}{\fs20 The ISO directive is immediately followed by + or -.  If + is used, an error is flagged whenever a feature is used which is not specifically required to be in the language by the ISO Pascal standard.  The default is iso-.  The iso directive is useful for detecting any ORCA/Pascal extensions that may be included in your source program, helping you to port the program to run under another compiler.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$ISO+\} \tab \tab \{ Use only ISO (Standard) Pascal\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ISO-\} \tab \tab \{ Allow ORCA/Pascal extensions\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Keep}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Keep\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 keep directive\bxe }}}{\fs20 The keep directive is followed by a string.  The string contains the path name to use as the output file for the intermediate code produced by the compiler.  The object module will be written to the keep file name.  The path name can contain device numbers, prefix numbers, and can start with the directory walking characters }{\b\fs20 ..}{\fs20  .  If the path name contains only a file name, then the default prefix is assumed. \par This directive must appear before the program token.  Only one keep directive is allowed in a source file.\par The keep directive is not normally used from the desktop environment.\par From the text environment, if the keep directive is not used, you should use a keep parameter when compiling the program or set the shell keep variable to some default file name in order to cause the object module to be saved.  If no keep file name is established by any of the three methods mentioned, no object module is created, and the link and execute steps cannot be performed.  The keep parameter, keep variable, and the compilation process are discussed in Chapter 8.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$keep '../myprog'\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$keep '9:file3.exe'\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 LibPrefix}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 LibPrefix\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCAPascalDefs}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LibPrefix directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 interface files}}}{\fs20 When you use the }{\f6\fs18 uses}{\fs20  statement in Pascal, the compiler looks for the file in a special subdirectory of the library prefix called ORCAPascalDefs; the actual prefix name used is 13:ORCAPascalDefs:..  This is where the interface files for the Apple\~II}{\scaps\fs20 gs}{\fs20  tool kit, the ORCA shell, and GS/OS are located.  You can also add your own interface files there.  If the compiler does not find the interface file in ORCAPascalDefs, it will then look in the current prefix.\par If you want the compiler to look somewhere else for interface files, you need a way to tell the compiler where to look.  That is the purpose of the LibPrefix directive.  Once used, the compiler will look in the directory specified by this directive for all future interface files.  If you need to switch back to searching the standard ORCAPascalDefs directory, code this directive again with a null string for the prefix name.\par You can specify a full or partial path name as the string.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 units}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 uses statement}}}{\fs20 If the unit you are trying to use has been placed in a library file in the system library prefix, or if it is in the current prefix, you do not have to do anything special when you link the program.  If, however, you leave the unit as an object file, you will need to include it in the list of object modules when you link the program.  See the section entitled Units for details.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 List}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 List\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 list directive\bxe }}}{\fs20 The list directive is followed by + or -.  If + is used, subsequent lines of the compiler listing are written to standard output.  If - is used, subsequent lines are not included in the compiler listing.  The default is -.  You can also cause a listing to be produced from the shell's command line by including the +L option when compiling the source program.  From the desktop, you can set a flag in the Compile dialog to create a listing.  Unlike the list directive, these options does not give control over lines to be included in the listing \endash  all lines in the program will be written to the listing file.  You can use the list directive to select lines to be written to the listing file, as shown in the example below.\par The list directive is generally used in conjunction with redirecting output to the printer to print only a portion of the program.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$list+\}\par \{ These lines will be written to the listing file.\}\par program example;\par var x, y: real;\par (*$list- *)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (* This line won't be written to the listing file. *)\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 MemoryModel}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 MemoryModel\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MemoryModel directive\bxe }}}{\fs20 The MemoryModel directive is used to tell the compiler whether you will be using the small memory model or the large memory model.  The directive accepts an operand of 0 to indicate the small model, and 1 to request the large model.  This directive must appear before the program token.\par The CPU used on the Apple\~II}{\scaps\fs20 gs}{\fs20 , the 65816, requires that code be segmented into pieces that can fit into one bank of memory, which is defined as 64K bytes in length.  This is because the CPU cannot execute across a bank boundary.  If the size of your combined program and data exceed 64K, you will start getting error messages from the linker during the link edit phase.  The errors will report addresses outside of the current bank, or segments larger than 64K in length.  You will know that you need the large memory model when these errors occur.\par The small memory model assumes that all records, objects and arrays are smaller than 64K.  This does not imply any restriction on the total amount of space used by your data; using dynamically allocated memory, you can easily allocate all of available memory using the small memory model, so long as no single array, record or object exceeds 64K.\par The small memory model also assumes that all global arrays and variables are small enough to fit in a single 64K segment, and uses absolute addressing to access the global data.\par Under the large memory model, the program is placed in its own 64K bank, and the data is divided into two other areas.  All arrays and records are placed in a segment named ~ARRAYS, and any other global variables are placed in an area called ~GLOBALS.  Since the data areas are not restricted to a single bank, the ~ARRAYS segment can be as large as available memory permits.  The ~GLOBALS area is limited to a size of 64K bytes.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\f20\fs20 \u-3981\'73}{\b\fs20 \tab Warning}{\fs20 \tab If any array or record exceeds 64K, even if the array or record is allocated dynamically with the new procedure or with NewHandle, you must use the large memory model.\~\~}{\f20\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Should you find that you need more memory than 64K bytes for your program, you can use the segment directive, described later in this chapter, to further subdivide your program so that it will all fit into memory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\fs20 {\pict{\*\picprop\shplid1158{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley86\piccropl0\piccropr0\piccropt-19\piccropb-19\picw15\pich12\picwgoal300\pichgoal240\macpict\bliptag-1801394586\blipupi72{\*\blipuid 94a0e666f0b409cfbf5fc6b8a42dc802}419900000000000c000f11010a000000000000000034ffffffff00000000a000bea000c22900010da100c000122f2c2031323820737472696e67206465660da100c000357b63757272656e7466696c65202c2072656164737472696e67207b282c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c29207365617263680da100c0004b7b706f7020706f7020706f70207b63757272656e7466696c652072656164207b3436206571207b657869747d2069667d207b657869747d206966656c73657d206c6f6f7020657869747d0da100c0002b7b706f707d206966656c73657d207b706f7020657869747d206966656c73657d2062696e64206c6f6f700da000bf01000a00000000000c000f3c90000200000000000c000f00000000000c000f00000000000c000f00030000008005c007e00fe01ff01ff03ff83ffc7fe07fe0000090000200000000000c000f00000000000c000f00000000000c000f00010000008005c007600f201e301e103c183ffc7fe07fe0000001000a00000000000000003ca000bea000c22900010da100c000922c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2e0da000bf01000a00000000000c000f3ca000bea000c22900010da100c0002e2525426567696e446f63756d656e743a2041646f626520496c6c7573747261746f7220383828544d2920312e360da100c00018252150532d41646f62652d322e3020455053462d312e320da100c00028252543726561746f723a2041646f626520496c6c7573747261746f7220383828544d2920312e360da100c0001b2525466f723a202853616e6465652920284d616e75616c2033290da100c0002425254372656174696f6e446174653a2028342f31322f3839292028383a343720504d290da100c0002a2525446f63756d656e7450726f63536574733a2041646f62655f7061636b65646172726179203020300da100c000322525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f7061636b65646172726179203020300da100c000282525446f63756d656e7450726f63536574733a2041646f62655f636d796b636f6c6f72203020300da100c000302525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f636d796b636f6c6f72203020300da100c000242525446f63756d656e7450726f63536574733a2041646f62655f6373686f77203020300da100c0002c2525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f6373686f77203020300da100c0002a2525446f63756d656e7450726f63536574733a2041646f62655f637573746f6d636f6c6f72203020300da100c000322525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f637573746f6d636f6c6f72203020300da100c0002e2525446f63756d656e7450726f63536574733a2041646f62655f496c6c7573747261746f725f383831203020300da100c000362525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f496c6c7573747261746f725f383831203020300da100c0001a2525436f6c6f7255736167653a20426c61636b2657686974650da100c0001f2525446f63756d656e7450726f63657373436f6c6f72733a20426c61636b0da100c0001e2525426f756e64696e67426f783a3236342034303320323739203431350da100c0001e252554656d706c617465426f783a3238382033363020323838203336300da100c0001a252554696c65426f783a2d35353220373330203020313436300da100c0000e2525456e64436f6d6d656e74730da100c0000f2f73686f77706167657b7d6465660da100c0000f2f636f7079706167657b7d6465660da100c000125b3236342034313520323739203430335d0da100c0001c5b6e65777061746820636c697070617468207061746862626f785d0da100c0000d32206469637420626567696e0da100c0000c2f642065786368206465660da100c0000c2f732065786368206465660da100c0001a642030206765742064203120676574207472616e736c6174650da100c0002c642032206765742064203020676574207375622073203220676574207320302067657420737562206469760da100c0002c642033206765742064203120676574207375622073203320676574207320312067657420737562206469760da100c000067363616c650da100c0002273203020676574206e65672073203120676574206e6567207472616e736c6174650da100c00004656e640da100c000262525426567696e50726f635365743a2041646f62655f7061636b65646172726179203020300da100c0001825207061636b65646172726179204f70657261746f72730da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c000317573657264696374202f41646f62655f7061636b65646172726179203520646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c000132f7061636b656461727261792077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c000190941646f62655f7061636b6564617272617920626567696e0da100c000130941646f62655f7061636b656461727261790da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c00018090975736572646963742033203120726f6c6c207075740da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c000067d206465660da100c000322f7061636b6564617272617909092520617267756d656e747320636f756e74207061636b656461727261792061727261790da100c000027b0da100c000166172726179206173746f726520726561646f6e6c790da100c000067d206465660da100c000252f7365747061636b696e670909092520626f6f6c65616e207365747061636b696e67202d0da100c000027b0da100c00004706f700da100c000067d206465660da100c000282f63757272656e747061636b696e67090925202d207365747061636b696e6720626f6f6c65616e0da100c000027b0da100c0000666616c73650da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000d2525456e6450726f635365740da100c0002741646f62655f7061636b65646172726179202f696e697469616c697a652067657420657865630da100c000232525426567696e50726f635365743a41646f62655f636d796b636f6c6f72203020300da100c000162520636d796b636f6c6f72204f70657261746f72730da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c0002f7573657264696374202f41646f62655f636d796b636f6c6f72203420646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c000142f736574636d796b636f6c6f722077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c00035097573657264696374202f41646f62655f636d796b636f6c6f725f76617273203220646963742064757020626567696e207075740da100c0000f092f5f736574726762636f6c6f720da100c0001809092f736574726762636f6c6f72206c6f6164206465660da100c00013092f5f63757272656e74726762636f6c6f720da100c0001c09092f63757272656e74726762636f6c6f72206c6f6164206465660da100c000170941646f62655f636d796b636f6c6f7220626567696e0da100c000110941646f62655f636d796b636f6c6f720da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c0000a0909706f7020706f700da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c0000509656e640da100c000170941646f62655f636d796b636f6c6f7220626567696e0da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c0001f63757272656e74646963742041646f62655f636d796b636f6c6f722065710da100c00003097b0da100c0000509656e640da100c00006097d2069660da100c000067d206465660da100c0003a2f736574636d796b636f6c6f72090925206379616e206d6167656e74612079656c6c6f7720626c61636b20736574636d796b636f6c6f72202d0da100c000027b0da100c0000f31207375622034203120726f6c6c0da100c00002330da100c00003097b0da100c0001a093320696e64657820616464206e6567206475702030206c740da100c0000409097b0da100c000080909706f7020300da100c0000709097d2069660da100c0000a0933203120726f6c6c0da100c0000a097d207265706561740da100c0002c41646f62655f636d796b636f6c6f725f76617273202f5f736574726762636f6c6f722067657420657865630da100c00004706f700da100c000077d20646566200da100c000412f63757272656e74636d796b636f6c6f720925202d2063757272656e74636d796b636f6c6f72206379616e206d6167656e74612079656c6c6f7720626c61636b0da100c000027b0da100c0003041646f62655f636d796b636f6c6f725f76617273202f5f63757272656e74726762636f6c6f722067657420657865630da100c00002330da100c00003097b0da100c00014093120737562206e65672033203120726f6c6c0da100c0000a097d207265706561740da100c00002300da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c000202525426567696e50726f635365743a2041646f62655f6373686f77203020300da100c0001125206373686f77204f70657261746f720da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c0002b7573657264696374202f41646f62655f6373686f77203320646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c0000d2f6373686f772077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c00031097573657264696374202f41646f62655f6373686f775f76617273203120646963742064757020626567696e207075740da100c0001a092f5f6373686f77090925202d205f6373686f772070726f630da100c0000909097b7d206465660da100c000130941646f62655f6373686f7720626567696e0da100c0000d0941646f62655f6373686f770da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c00018090975736572646963742033203120726f6c6c207075740da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c0000509656e640da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c000067d206465660da100c000202f6373686f77090909092520737472696e672070726f63206373686f77202d0da100c000027b0da100c0001141646f62655f6373686f775f766172730da100c0000e0965786368202f5f6373686f770da100c0000a0965786368207075740da100c00003097b0da100c00027093020302041646f62655f6373686f775f76617273202f5f6373686f772067657420657865630da100c0000a097d20666f72616c6c0da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c000262525426567696e50726f635365743a2041646f62655f637573746f6d636f6c6f72203020300da100c000192520437573746f6d20436f6c6f72204f70657261746f72730da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c000317573657264696374202f41646f62655f637573746f6d636f6c6f72203520646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c000162f736574637573746f6d636f6c6f722077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c000190941646f62655f637573746f6d636f6c6f7220626567696e0da100c000130941646f62655f637573746f6d636f6c6f720da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c0000a0909706f7020706f700da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c000190941646f62655f637573746f6d636f6c6f7220626567696e0da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c0002163757272656e74646963742041646f62655f637573746f6d636f6c6f722065710da100c00003097b0da100c0000509656e640da100c00006097d2069660da100c000067d206465660da100c000512f66696e64636d796b637573746f6d636f6c6f720925206379616e206d6167656e74612079656c6c6f7720626c61636b206e616d652066696e64636d796b637573746f6d636f6c6f72206f626a6563740da100c000027b0da100c0000e35207061636b656461727261790da100c000077d20206465660da100c000302f736574637573746f6d636f6c6f72090925206f626a6563742074696e7420736574637573746f6d636f6c6f72202d0da100c000027b0da100c00005657863680da100c0000e616c6f616420706f7020706f700da100c00002340da100c00003097b0da100c00016093420696e646578206d756c2034203120726f6c6c0da100c0000a097d207265706561740da100c0000e35202d3120726f6c6c20706f700da100c0000d736574636d796b636f6c6f720da100c000067d206465660da100c000282f7365746f7665727072696e7409092520626f6f6c65616e207365746f7665727072696e74202d0da100c000027b0da100c00004706f700da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c000292525426567696e50726f635365743a2041646f62655f496c6c7573747261746f72383831203020300da100c00020252041646f626520496c6c7573747261746f722028544d292050726f6c6f670da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c000357573657264696374202f41646f62655f496c6c7573747261746f7238383120373220646963742064757020626567696e207075740da100c000112520696e697469616c697a6174696f6e0da100c000202f696e697469616c697a650909090925202d20696e697469616c697a65202d0da100c000027b0da100c0003a7573657264696374202f41646f62655f496c6c7573747261746f723838315f7661727320323920646963742064757020626567696e207075740da100c0001125207061696e74206f706572616e64730da100c0000f2f5f6c70202f6e6f6e65206465660da100c0000c2f5f7066207b7d206465660da100c0000c2f5f7073207b7d206465660da100c0000d2f5f707366207b7d206465660da100c0000d2f5f707373207b7d206465660da100c00010252074657874206f706572616e64730da100c0000d2f5f61206e756c6c206465660da100c0000e2f5f6173206e756c6c206465660da100c000112f5f74742032206172726179206465660da100c000112f5f746c2032206172726179206465660da100c000102f5f746d206d6174726978206465660da100c0000a2f74207b7d206465660da100c000112520636f6c6f72206f706572616e64730da100c0000e2f5f6766206e756c6c206465660da100c000112f5f63662034206172726179206465660da100c0000e2f5f6966206e756c6c206465660da100c0000f2f5f6f662066616c7365206465660da100c0000c2f5f6663207b7d206465660da100c0000e2f5f6773206e756c6c206465660da100c000112f5f63732034206172726179206465660da100c0000e2f5f6973206e756c6c206465660da100c0000f2f5f6f732066616c7365206465660da100c0000c2f5f7363207b7d206465660da100c0000d2f5f69206e756c6c206465660da100c0001b41646f62655f496c6c7573747261746f7238383120626567696e0da100c0001541646f62655f496c6c7573747261746f723838310da100c00003097b0da100c0000c096475702078636865636b0da100c0000409097b0da100c00007090962696e640da100c0000709097d2069660da100c0000909706f7020706f700da100c0000a097d20666f72616c6c0da100c00004656e640da100c00004656e640da100c0001b41646f62655f496c6c7573747261746f7238383120626567696e0da100c0002041646f62655f496c6c7573747261746f723838315f7661727320626567696e0da100c000086e6577706174680da100c000067d206465660da100c0001e2f7465726d696e6174650909090925202d207465726d696e617465202d0da100c000027b0da100c00004656e640da100c00004656e640da100c000067d206465660da100c000172520646566696e6974696f6e206f70657261746f72730da100c000122f5f090909090925202d205f206e756c6c0da100c000096e756c6c206465660da100c0001c2f646465660909090925206b65792076616c75652064646566202d0da100c000027b0da100c0002741646f62655f496c6c7573747261746f723838315f766172732033203120726f6c6c207075740da100c000067d206465660da100c000242f787075740909090925206b65792076616c7565206c69746572616c2078707574202d0da100c000027b0da100c00026647570206c6f616420647570206c656e6774682065786368206d61786c656e6774682065710da100c00003097b0da100c000120964757020647570206c6f6164206475700da100c0001c096c656e6774682032206d756c206469637420636f7079206465660da100c00006097d2069660da100c000136c6f616420626567696e2064656620656e640da100c000067d206465660da100c0001a2f6e706f70090909092520696e7465676572206e706f70202d0da100c000027b0da100c00003097b0da100c0000509706f700da100c0000a097d207265706561740da100c000067d206465660da100c0001425206d61726b696e67206f70657261746f72730da100c000252f7377090909090925206178206179206c656e67746820737472696e67207377207820790da100c000027b0da100c0000c737472696e6777696474680da100c00025657863682035202d3120726f6c6c203320696e646578203120737562206d756c206164640da100c0002034203120726f6c6c2033203120726f6c6c203120737562206d756c206164640da100c000067d206465660da100c0002a2f7373090909090925206178206179206c656e67746820737472696e67206d6174726978207373202d0da100c000027b0da100c0000e33202d3120726f6c6c20706f700da100c0000934203120726f6c6c0da100c00003097b0da100c000110932206e706f702028302920657863680da100c00017093220636f7079203020657863682070757420706f700da100c000070967736176650da100c000100966616c73652063686172706174680da100c0000e0963757272656e74706f696e740da100c00013093420696e646578207365746d61747269780da100c00008097374726f6b650da100c0000a0967726573746f72650da100c00008096d6f7665746f0da100c00010093220636f707920726d6f7665746f0da100c00009097d206373686f770da100c0000733206e706f700da100c000067d206465660da100c00011252070617468206f70657261746f72730da100c000232f7370090909090925206178206179206c656e67746820737472696e67207370202d0da100c000027b0da100c000096578636820706f700da100c00003097b0da100c000110932206e706f702028302920657863680da100c00017093220636f7079203020657863682070757420706f700da100c000100966616c73652063686172706174680da100c00010093220636f707920726d6f7665746f0da100c00009097d206373686f770da100c0000732206e706f700da100c000067d206465660da100c0001e25207061746820636f6e737472756374696f6e206f70657261746f72730da100c000152f706c0909090909252078207920706c207820790da100c000027b0da100c0000a7472616e73666f726d0da100c0001d302e32352073756220726f756e6420302e32352061646420657863680da100c0001d302e32352073756220726f756e6420302e32352061646420657863680da100c0000b697472616e73666f726d0da100c000067d206465660da100c000172f7365747374726f6b6561646a7573742077686572650da100c000027b0da100c00019706f702074727565207365747374726f6b6561646a7573740da100c0001e2f6309090909252078312079312078322079322078332079332063202d0da100c000027b0da100c000086375727665746f0da100c000067d206465660da100c000032f430da100c0000c2f63206c6f6164206465660da100c000182f7609090909252078322079322078332079332076202d0da100c000027b0da100c0001e63757272656e74706f696e742036203220726f6c6c206375727665746f0da100c000067d206465660da100c000032f560da100c0000c2f76206c6f6164206465660da100c000182f7909090909252078312079312078322079322079202d0da100c000027b0da100c0000f3220636f7079206375727665746f0da100c000067d206465660da100c000032f590da100c0000c2f79206c6f6164206465660da100c000102f6c090909092520782079206c202d0da100c000027b0da100c000076c696e65746f0da100c000067d206465660da100c000032f4c0da100c0000c2f6c206c6f6164206465660da100c000102f6d090909092520782079206d202d0da100c000027b0da100c000076d6f7665746f0da100c000067d206465660da100c000027d0da100c000027b0da100c000032f630da100c000027b0da100c0000b706c206375727665746f0da100c000067d206465660da100c000032f430da100c0000c2f63206c6f6164206465660da100c000032f760da100c000027b0da100c0002163757272656e74706f696e742036203220726f6c6c20706c206375727665746f0da100c000067d206465660da100c000032f560da100c0000c2f76206c6f6164206465660da100c000032f790da100c000027b0da100c00012706c203220636f7079206375727665746f0da100c000067d206465660da100c000032f590da100c0000c2f79206c6f6164206465660da100c000032f6c0da100c000027b0da100c0000a706c206c696e65746f0da100c000067d206465660da100c000032f4c0da100c0000c2f6c206c6f6164206465660da100c000032f6d0da100c000027b0da100c0000a706c206d6f7665746f0da100c000067d206465660da100c000097d206966656c73650da100c0001a252067726170686963207374617465206f70657261746f72730da100c000192f640909090909252061727261792070686173652064202d0da100c000027b0da100c00008736574646173680da100c000067d206465660da100c000182f6366090909090925202d20636620666c61746e6573730da100c0001063757272656e74666c6174206465660da100c000162f6909090909092520666c61746e6573732069202d0da100c000027b0da100c0000964757020302065710da100c00003097b0da100c0000809706f702063660da100c00006097d2069660da100c00008736574666c61740da100c000067d206465660da100c000162f6a090909090925206c696e656a6f696e206a202d0da100c000027b0da100c0000c7365746c696e656a6f696e0da100c000067d206465660da100c000152f4a090909090925206c696e65636170204a202d0da100c000027b0da100c0000b7365746c696e656361700da100c000067d206465660da100c000182f4d090909090925206d697465726c696d6974204d202d0da100c000027b0da100c0000e7365746d697465726c696d69740da100c000067d206465660da100c000172f77090909090925206c696e6577696474682077202d0da100c000027b0da100c0000d7365746c696e6577696474680da100c000067d206465660da100c0001a252070617468207061696e74696e67206f70657261746f72730da100c0000f2f48090909090925202d2048202d0da100c000077b7d206465660da100c0000f2f68090909090925202d2068202d0da100c000027b0da100c0000a636c6f7365706174680da100c000067d206465660da100c0000f2f4e090909090925202d204e202d0da100c000027b0da100c000086e6577706174680da100c000067d206465660da100c0000f2f6e090909090925202d206e202d0da100c0000c2f4e206c6f6164206465660da100c0000f2f46090909090925202d2046202d0da100c000027b0da100c000045f70660da100c000067d206465660da100c0000f2f66090909090925202d2066202d0da100c000027b0da100c0000a636c6f7365706174680da100c00002460da100c000067d206465660da100c0000f2f53090909090925202d2053202d0da100c000027b0da100c000045f70730da100c000067d206465660da100c0000f2f73090909090925202d2073202d0da100c000027b0da100c0000a636c6f7365706174680da100c00002530da100c000067d206465660da100c0000f2f42090909090925202d2042202d0da100c000027b0da100c00011677361766520462067726573746f72650da100c00002530da100c000067d206465660da100c0000f2f62090909090925202d2062202d0da100c000027b0da100c0000a636c6f7365706174680da100c00002420da100c000067d206465660da100c0000f2f57090909090925202d2057202d0da100c000027b0da100c00005636c69700da100c000067d206465660da100c0001a252074657874207061696e74696e67206f70657261746f72730da100c0002f2f7461090909090925206c656e67746820737472696e67207461206178206179206c656e67746820737472696e670da100c000027b0da100c0000b5f6173206d6f7665746f0da100c000185f747420616c6f616420706f702034202d3220726f6c6c0da100c000067d206465660da100c000112f746c090909090925202d20746c202d0da100c000027b0da100c000185f746c20616c6f616420706f70207472616e736c6174650da100c000067d206465660da100c000152f6173090909090925202d2061732061727261790da100c000027b0da100c000027b0da100c000043020300da100c000027d0da100c000027b0da100c000223220636f7079205f747420616c6f616420706f702034202d3220726f6c6c2073770da100c0001e65786368206e65672032206469762065786368206e65672032206469760da100c000027d0da100c000027b0da100c000223220636f7079205f747420616c6f616420706f702034202d3220726f6c6c2073770da100c0001265786368206e65672065786368206e65670da100c000027d0da100c000027b0da100c000043020300da100c000027d0da100c0000c7d2063766c6974206465660da100c000312f7a090909090925206c69746572616c2073697a65206c656164696e6720747261636b696e6720616c69676e207a202d0da100c000027b0da100c0000e2f5f61206578636820646465660da100c000142f5f6173206173205f612067657420646465660da100c000085f612032206c650da100c00003097b0da100c000120930205f7474206173746f726520706f700da100c0001b09302065786368206e6567205f746c206173746f726520706f700da100c00003097d0da100c00003097b0da100c0001b09302065786368206e6567205f7474206173746f726520706f700da100c00016096e65672030205f746c206173746f726520706f700da100c0000a097d206966656c73650da100c00025657863682066696e64666f6e742065786368207363616c65666f6e7420736574666f6e740da100c000067d206465660da100c000162f746d090909090925206d617472697820746d202d0da100c000027b0da100c000165f746d2063757272656e746d617472697820706f700da100c00007636f6e6361740da100c000067d206465660da100c000142f49090909090925206d61747269782049202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c000070974612073700da100c0000409746c0da100c00008097d20646465660da100c000067d206465660da100c000142f6f090909090925206d6174726978206f202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c0000b0974612034206e706f700da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c000142f65090909090925206d61747269782065202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c00009097461205f7073660da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c000142f72090909090925206d61747269782072202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c0000d097461205f746d205f7073730da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c000142f61090909090925206d61747269782061202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c00008093220636f70790da100c00009097461205f7073660da100c00009096e6577706174680da100c0000d097461205f746d205f7073730da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c0000f2f54090909090925202d2054202d0da100c000027b0da100c0000e5f746d207365746d61747269780da100c000067d206465660da100c000112520666f6e74206f70657261746f72730da100c0002d2f5a090909090925206172726179206c69746572616c206c69746572616c20646972656374696f6e205a202d0da100c000027b0da100c00004706f700da100c0000f66696e64666f6e7420626567696e0da100c0002863757272656e746469637420647570206c656e677468203120616464206469637420626567696e0da100c00003097b0da100c00011093120696e646578202f464944206e650da100c0000409097b0da100c0000609096465660da100c0000409097d0da100c0000409097b0da100c00009090932206e706f700da100c0000b09097d206966656c73650da100c0000a097d20666f72616c6c0da100c000232f466f6e744e616d6520657863682064656620647570206c656e6774682030206e650da100c00003097b0da100c00027092f456e636f64696e6720456e636f64696e672032353620617272617920636f7079206465660da100c00008093020657863680da100c0000409097b0da100c0001809096475702074797065202f6e616d65747970652065710da100c000050909097b0da100c00024090909456e636f64696e67203220696e646578203220696e6465782070757420706f700da100c0000909090931206164640da100c000050909097d0da100c000050909097b0da100c0000c0909096578636820706f700da100c0000c0909097d206966656c73650da100c0000b09097d20666f72616c6c0da100c0000a097d20696620706f700da100c0001863757272656e74646963742064757020656e6420656e640da100c000222f466f6e744e616d6520676574206578636820646566696e65666f6e7420706f700da100c000067d206465660da100c00012252067726f7570206f70657261746f72730da100c0000f2f75090909090925202d2075202d0da100c000077b7d206465660da100c0000f2f55090909090925202d2055202d0da100c000077b7d206465660da100c0000f2f71090909090925202d2071202d0da100c000027b0da100c0000667736176650da100c000067d206465660da100c0000f2f51090909090925202d2051202d0da100c000027b0da100c0000967726573746f72650da100c000067d206465660da100c000122520706c616365206f70657261746f72730da100c0002b2f60090909090925206d6174726978206c6c78206c6c79207572782075727920737472696e672060202d0da100c000027b0da100c0000e2f5f69207361766520646465660da100c0001036203120726f6c6c2034206e706f700da100c00007636f6e6361740da100c0000f757365726469637420626567696e0da100c000112f73686f7770616765207b7d206465660da100c0001366616c7365207365746f7665727072696e740da100c00004706f700da100c000067d206465660da100c0000f2f7e090909090925202d207e202d0da100c000027b0da100c00004656e640da100c0000b5f6920726573746f72650da100c000067d206465660da100c000122520636f6c6f72206f70657261746f72730da100c000122f4f09090909092520666c6167204f202d0da100c000027b0da100c0000530206e650da100c0000f2f5f6f66206578636820646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000122f5209090909092520666c61672052202d0da100c000027b0da100c0000530206e650da100c0000f2f5f6f73206578636820646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000122f6709090909092520677261792067202d0da100c000027b0da100c0000f2f5f6766206578636820646465660da100c000052f5f66630da100c000027b0da100c0000d5f6c70202f66696c6c206e650da100c00003097b0da100c00012095f6f66207365746f7665727072696e740da100c0000d095f676620736574677261790da100c00011092f5f6c70202f66696c6c20646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70660da100c000027b0da100c000045f66630da100c0000566696c6c0da100c000077d20646465660da100c000062f5f7073660da100c000027b0da100c000045f66630da100c000096578636820706f700da100c000066173686f770da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000122f4709090909092520677261792047202d0da100c000027b0da100c0000f2f5f6773206578636820646465660da100c000052f5f73630da100c000027b0da100c0000f5f6c70202f7374726f6b65206e650da100c00003097b0da100c00012095f6f73207365746f7665727072696e740da100c0000d095f677320736574677261790da100c00013092f5f6c70202f7374726f6b6520646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70730da100c000027b0da100c000045f73630da100c000077374726f6b650da100c000077d20646465660da100c000062f5f7073730da100c000027b0da100c000045f73630da100c0000373730da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000272f6b090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b206b202d0da100c000027b0da100c0000f5f6366206173746f726520706f700da100c000052f5f66630da100c000027b0da100c0000d5f6c70202f66696c6c206e650da100c00003097b0da100c00012095f6f66207365746f7665727072696e740da100c0001c095f636620616c6f616420706f7020736574636d796b636f6c6f720da100c00011092f5f6c70202f66696c6c20646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70660da100c000027b0da100c000045f66630da100c0000566696c6c0da100c000077d20646465660da100c000062f5f7073660da100c000027b0da100c000045f66630da100c000096578636820706f700da100c000066173686f770da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000272f4b090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b204b202d0da100c000027b0da100c0000f5f6373206173746f726520706f700da100c000052f5f73630da100c000027b0da100c0000f5f6c70202f7374726f6b65206e650da100c00003097b0da100c00012095f6f73207365746f7665727072696e740da100c0001c095f637320616c6f616420706f7020736574636d796b636f6c6f720da100c00013092f5f6c70202f7374726f6b6520646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70730da100c000027b0da100c000045f73630da100c000077374726f6b650da100c000077d20646465660da100c000062f5f7073730da100c000027b0da100c000045f73630da100c0000373730da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000312f78090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b206e616d6520677261792078202d0da100c000027b0da100c0000f2f5f6766206578636820646465660da100c0001466696e64636d796b637573746f6d636f6c6f720da100c0000f2f5f6966206578636820646465660da100c000052f5f66630da100c000027b0da100c0000d5f6c70202f66696c6c206e650da100c00003097b0da100c00012095f6f66207365746f7665727072696e740da100c00023095f6966205f6766203120657863682073756220736574637573746f6d636f6c6f720da100c00011092f5f6c70202f66696c6c20646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70660da100c000027b0da100c000045f66630da100c0000566696c6c0da100c000077d20646465660da100c000062f5f7073660da100c000027b0da100c000045f66630da100c000096578636820706f700da100c000066173686f770da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000312f58090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b206e616d6520677261792058202d0da100c000027b0da100c0000f2f5f6773206578636820646465660da100c0001466696e64636d796b637573746f6d636f6c6f720da100c0000f2f5f6973206578636820646465660da100c000052f5f73630da100c000027b0da100c0000f5f6c70202f7374726f6b65206e650da100c00003097b0da100c00012095f6f73207365746f7665727072696e740da100c00023095f6973205f6773203120657863682073756220736574637573746f6d636f6c6f720da100c00013092f5f6c70202f7374726f6b6520646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70730da100c000027b0da100c000045f73630da100c000077374726f6b650da100c000077d20646465660da100c000062f5f7073730da100c000027b0da100c000045f73630da100c0000373730da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c0001a25206c6f636b6564206f626a656374206f70657261746f72730da100c000132f410909090909252076616c75652041202d0da100c000027b0da100c00004706f700da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c0000c2525456e6450726f6c6f670da100c0000d2525426567696e53657475700da100c000010da100c0002541646f62655f636d796b636f6c6f72202f696e697469616c697a652067657420657865630da100c0002141646f62655f6373686f77202f696e697469616c697a652067657420657865630da100c0002741646f62655f637573746f6d636f6c6f72202f696e697469616c697a652067657420657865630da100c0002a41646f62655f496c6c7573747261746f72383831202f696e697469616c697a652067657420657865630da100c0000b2525456e6453657475700da100c0000430204f0da100c000043020670da100c000043020520da100c000043020470da100c00003302069a100c0000120a100c0000330204aa100c0000120a100c0000330206aa100c0000120a100c00005302e352077a100c0000120a100c0000334204da100c00002205ba100c000045d302064a100c000010da100c0000825254e6f74653a0da100c000123236352e323738203430342e363834206d0da100c000113236392e373835203431322e3133204c0da100c000123237342e323931203430342e363834204c0da100c000123236352e323738203430342e363834204c0da100c00002660da100c000043120670da100c00005302e312077a100c000010da100c000123236382e343337203430362e313837206d0da100c000113237322e3735203431332e333132204c0da100c000123237372e303632203430362e313837204c0da100c000123236382e343337203430362e313837204c0da100c00002620da100c0000a2525547261696c65720da100c0002941646f62655f496c6c7573747261746f72383831202f7465726d696e6174652067657420657865630da100c0002641646f62655f637573746f6d636f6c6f72202f7465726d696e6174652067657420657865630da100c0002041646f62655f6373686f77202f7465726d696e6174652067657420657865630da100c0002441646f62655f636d796b636f6c6f72202f7465726d696e6174652067657420657865630da100c000010da100c0000e2525456e64446f63756d656e740da100c000010da000bfff}}{\b\fs20 \tab Tip}{\fs20 \tab In general, you should use the segment directive, not the large memory model, to split a program up into smaller pieces.  The large memory model is only needed when you are using individual arrays, records or objects that exceed 64K, or when all of your global data exceeds 64K.\~\~}{\fs20 {\pict{\*\picprop\shplid1159{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw10\pich8\picwgoal200\pichgoal160\macpict\bliptag101738056\blipupi72{\*\blipuid 061066488a53a5f184dcaf6c03ed13ea}418f000000000008000a11010a000000000000000034ffffffff00000000a000bea000c22900010da100c000122f2c2031323820737472696e67206465660da100c000357b63757272656e7466696c65202c2072656164737472696e67207b282c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c29207365617263680da100c0004b7b706f7020706f7020706f70207b63757272656e7466696c652072656164207b3436206571207b657869747d2069667d207b657869747d206966656c73657d206c6f6f7020657869747d0da100c0002b7b706f707d206966656c73657d207b706f7020657869747d206966656c73657d2062696e64206c6f6f700da000bf01000a000000000008000a3c900002000000000008000a000000000008000a000000000008000a0003000006001e001f003f003f807e000000900002000000000008000a000000000008000a000000000008000a0001000006001e001f0039003f807e00000001000a00000000000000003ca000bea000c22900010da100c000922c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2e0da000bf01000a000000000008000a3ca000bea000c22900010da100c0002e2525426567696e446f63756d656e743a2041646f626520496c6c7573747261746f7220383828544d2920312e360da100c00018252150532d41646f62652d322e3020455053462d312e320da100c00028252543726561746f723a2041646f626520496c6c7573747261746f7220383828544d2920312e360da100c0001b2525466f723a202853616e6465652920284d616e75616c2033290da100c0002425254372656174696f6e446174653a2028342f31322f3839292028383a343720504d290da100c0002a2525446f63756d656e7450726f63536574733a2041646f62655f7061636b65646172726179203020300da100c000322525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f7061636b65646172726179203020300da100c000282525446f63756d656e7450726f63536574733a2041646f62655f636d796b636f6c6f72203020300da100c000302525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f636d796b636f6c6f72203020300da100c000242525446f63756d656e7450726f63536574733a2041646f62655f6373686f77203020300da100c0002c2525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f6373686f77203020300da100c0002a2525446f63756d656e7450726f63536574733a2041646f62655f637573746f6d636f6c6f72203020300da100c000322525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f637573746f6d636f6c6f72203020300da100c0002e2525446f63756d656e7450726f63536574733a2041646f62655f496c6c7573747261746f725f383831203020300da100c000362525446f63756d656e74537570706c69656450726f63536574733a2041646f62655f496c6c7573747261746f725f383831203020300da100c0001a2525436f6c6f7255736167653a20426c61636b2657686974650da100c0001f2525446f63756d656e7450726f63657373436f6c6f72733a20426c61636b0da100c0001e2525426f756e64696e67426f783a3237302033353720323830203336350da100c0001e252554656d706c617465426f783a3238382033363020323838203336300da100c0001a252554696c65426f783a2d35353220373330203020313436300da100c0000e2525456e64436f6d6d656e74730da100c0000f2f73686f77706167657b7d6465660da100c0000f2f636f7079706167657b7d6465660da100c000125b3237302033363520323830203335375d0da100c0001c5b6e65777061746820636c697070617468207061746862626f785d0da100c0000d32206469637420626567696e0da100c0000c2f642065786368206465660da100c0000c2f732065786368206465660da100c0001a642030206765742064203120676574207472616e736c6174650da100c0002c642032206765742064203020676574207375622073203220676574207320302067657420737562206469760da100c0002c642033206765742064203120676574207375622073203320676574207320312067657420737562206469760da100c000067363616c650da100c0002273203020676574206e65672073203120676574206e6567207472616e736c6174650da100c00004656e640da100c000262525426567696e50726f635365743a2041646f62655f7061636b65646172726179203020300da100c0001825207061636b65646172726179204f70657261746f72730da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c000317573657264696374202f41646f62655f7061636b65646172726179203520646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c000132f7061636b656461727261792077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c000190941646f62655f7061636b6564617272617920626567696e0da100c000130941646f62655f7061636b656461727261790da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c00018090975736572646963742033203120726f6c6c207075740da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c000067d206465660da100c000322f7061636b6564617272617909092520617267756d656e747320636f756e74207061636b656461727261792061727261790da100c000027b0da100c000166172726179206173746f726520726561646f6e6c790da100c000067d206465660da100c000252f7365747061636b696e670909092520626f6f6c65616e207365747061636b696e67202d0da100c000027b0da100c00004706f700da100c000067d206465660da100c000282f63757272656e747061636b696e67090925202d207365747061636b696e6720626f6f6c65616e0da100c000027b0da100c0000666616c73650da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000d2525456e6450726f635365740da100c0002741646f62655f7061636b65646172726179202f696e697469616c697a652067657420657865630da100c000232525426567696e50726f635365743a41646f62655f636d796b636f6c6f72203020300da100c000162520636d796b636f6c6f72204f70657261746f72730da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c0002f7573657264696374202f41646f62655f636d796b636f6c6f72203420646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c000142f736574636d796b636f6c6f722077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c00035097573657264696374202f41646f62655f636d796b636f6c6f725f76617273203220646963742064757020626567696e207075740da100c0000f092f5f736574726762636f6c6f720da100c0001809092f736574726762636f6c6f72206c6f6164206465660da100c00013092f5f63757272656e74726762636f6c6f720da100c0001c09092f63757272656e74726762636f6c6f72206c6f6164206465660da100c000170941646f62655f636d796b636f6c6f7220626567696e0da100c000110941646f62655f636d796b636f6c6f720da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c0000a0909706f7020706f700da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c0000509656e640da100c000170941646f62655f636d796b636f6c6f7220626567696e0da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c0001f63757272656e74646963742041646f62655f636d796b636f6c6f722065710da100c00003097b0da100c0000509656e640da100c00006097d2069660da100c000067d206465660da100c0003a2f736574636d796b636f6c6f72090925206379616e206d6167656e74612079656c6c6f7720626c61636b20736574636d796b636f6c6f72202d0da100c000027b0da100c0000f31207375622034203120726f6c6c0da100c00002330da100c00003097b0da100c0001a093320696e64657820616464206e6567206475702030206c740da100c0000409097b0da100c000080909706f7020300da100c0000709097d2069660da100c0000a0933203120726f6c6c0da100c0000a097d207265706561740da100c0002c41646f62655f636d796b636f6c6f725f76617273202f5f736574726762636f6c6f722067657420657865630da100c00004706f700da100c000077d20646566200da100c000412f63757272656e74636d796b636f6c6f720925202d2063757272656e74636d796b636f6c6f72206379616e206d6167656e74612079656c6c6f7720626c61636b0da100c000027b0da100c0003041646f62655f636d796b636f6c6f725f76617273202f5f63757272656e74726762636f6c6f722067657420657865630da100c00002330da100c00003097b0da100c00014093120737562206e65672033203120726f6c6c0da100c0000a097d207265706561740da100c00002300da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c000202525426567696e50726f635365743a2041646f62655f6373686f77203020300da100c0001125206373686f77204f70657261746f720da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c0002b7573657264696374202f41646f62655f6373686f77203320646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c0000d2f6373686f772077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c00031097573657264696374202f41646f62655f6373686f775f76617273203120646963742064757020626567696e207075740da100c0001a092f5f6373686f77090925202d205f6373686f772070726f630da100c0000909097b7d206465660da100c000130941646f62655f6373686f7720626567696e0da100c0000d0941646f62655f6373686f770da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c00018090975736572646963742033203120726f6c6c207075740da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c0000509656e640da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c000067d206465660da100c000202f6373686f77090909092520737472696e672070726f63206373686f77202d0da100c000027b0da100c0001141646f62655f6373686f775f766172730da100c0000e0965786368202f5f6373686f770da100c0000a0965786368207075740da100c00003097b0da100c00027093020302041646f62655f6373686f775f76617273202f5f6373686f772067657420657865630da100c0000a097d20666f72616c6c0da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c000262525426567696e50726f635365743a2041646f62655f637573746f6d636f6c6f72203020300da100c000192520437573746f6d20436f6c6f72204f70657261746f72730da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c000317573657264696374202f41646f62655f637573746f6d636f6c6f72203520646963742064757020626567696e207075740da100c0001f2f696e697469616c697a6509090925202d20696e697469616c697a65202d0da100c000027b0da100c000162f736574637573746f6d636f6c6f722077686572650da100c00003097b0da100c0000509706f700da100c00003097d0da100c00003097b0da100c000190941646f62655f637573746f6d636f6c6f7220626567696e0da100c000130941646f62655f637573746f6d636f6c6f720da100c0000409097b0da100c0000d09096475702078636865636b0da100c000050909097b0da100c0000809090962696e640da100c000080909097d2069660da100c0000a0909706f7020706f700da100c0000b09097d20666f72616c6c0da100c0000509656e640da100c000190941646f62655f637573746f6d636f6c6f7220626567696e0da100c0000a097d206966656c73650da100c000067d206465660da100c0001d2f7465726d696e61746509090925202d207465726d696e617465202d0da100c000027b0da100c0002163757272656e74646963742041646f62655f637573746f6d636f6c6f722065710da100c00003097b0da100c0000509656e640da100c00006097d2069660da100c000067d206465660da100c000512f66696e64636d796b637573746f6d636f6c6f720925206379616e206d6167656e74612079656c6c6f7720626c61636b206e616d652066696e64636d796b637573746f6d636f6c6f72206f626a6563740da100c000027b0da100c0000e35207061636b656461727261790da100c000077d20206465660da100c000302f736574637573746f6d636f6c6f72090925206f626a6563742074696e7420736574637573746f6d636f6c6f72202d0da100c000027b0da100c00005657863680da100c0000e616c6f616420706f7020706f700da100c00002340da100c00003097b0da100c00016093420696e646578206d756c2034203120726f6c6c0da100c0000a097d207265706561740da100c0000e35202d3120726f6c6c20706f700da100c0000d736574636d796b636f6c6f720da100c000067d206465660da100c000282f7365746f7665727072696e7409092520626f6f6c65616e207365746f7665727072696e74202d0da100c000027b0da100c00004706f700da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c000292525426567696e50726f635365743a2041646f62655f496c6c7573747261746f72383831203020300da100c00020252041646f626520496c6c7573747261746f722028544d292050726f6c6f670da100c00017252056657273696f6e20312e3020352f392f313938380da100c0001b2520436f707972696768742028432920313938372c20313938380da100c0001d252041646f62652053797374656d7320496e636f72706f72617465640da100c000162520416c6c205269676874732052657365727665640da100c0001f63757272656e747061636b696e672074727565207365747061636b696e670da100c000357573657264696374202f41646f62655f496c6c7573747261746f7238383120373220646963742064757020626567696e207075740da100c000112520696e697469616c697a6174696f6e0da100c000202f696e697469616c697a650909090925202d20696e697469616c697a65202d0da100c000027b0da100c0003a7573657264696374202f41646f62655f496c6c7573747261746f723838315f7661727320323920646963742064757020626567696e207075740da100c0001125207061696e74206f706572616e64730da100c0000f2f5f6c70202f6e6f6e65206465660da100c0000c2f5f7066207b7d206465660da100c0000c2f5f7073207b7d206465660da100c0000d2f5f707366207b7d206465660da100c0000d2f5f707373207b7d206465660da100c00010252074657874206f706572616e64730da100c0000d2f5f61206e756c6c206465660da100c0000e2f5f6173206e756c6c206465660da100c000112f5f74742032206172726179206465660da100c000112f5f746c2032206172726179206465660da100c000102f5f746d206d6174726978206465660da100c0000a2f74207b7d206465660da100c000112520636f6c6f72206f706572616e64730da100c0000e2f5f6766206e756c6c206465660da100c000112f5f63662034206172726179206465660da100c0000e2f5f6966206e756c6c206465660da100c0000f2f5f6f662066616c7365206465660da100c0000c2f5f6663207b7d206465660da100c0000e2f5f6773206e756c6c206465660da100c000112f5f63732034206172726179206465660da100c0000e2f5f6973206e756c6c206465660da100c0000f2f5f6f732066616c7365206465660da100c0000c2f5f7363207b7d206465660da100c0000d2f5f69206e756c6c206465660da100c0001b41646f62655f496c6c7573747261746f7238383120626567696e0da100c0001541646f62655f496c6c7573747261746f723838310da100c00003097b0da100c0000c096475702078636865636b0da100c0000409097b0da100c00007090962696e640da100c0000709097d2069660da100c0000909706f7020706f700da100c0000a097d20666f72616c6c0da100c00004656e640da100c00004656e640da100c0001b41646f62655f496c6c7573747261746f7238383120626567696e0da100c0002041646f62655f496c6c7573747261746f723838315f7661727320626567696e0da100c000086e6577706174680da100c000067d206465660da100c0001e2f7465726d696e6174650909090925202d207465726d696e617465202d0da100c000027b0da100c00004656e640da100c00004656e640da100c000067d206465660da100c000172520646566696e6974696f6e206f70657261746f72730da100c000122f5f090909090925202d205f206e756c6c0da100c000096e756c6c206465660da100c0001c2f646465660909090925206b65792076616c75652064646566202d0da100c000027b0da100c0002741646f62655f496c6c7573747261746f723838315f766172732033203120726f6c6c207075740da100c000067d206465660da100c000242f787075740909090925206b65792076616c7565206c69746572616c2078707574202d0da100c000027b0da100c00026647570206c6f616420647570206c656e6774682065786368206d61786c656e6774682065710da100c00003097b0da100c000120964757020647570206c6f6164206475700da100c0001c096c656e6774682032206d756c206469637420636f7079206465660da100c00006097d2069660da100c000136c6f616420626567696e2064656620656e640da100c000067d206465660da100c0001a2f6e706f70090909092520696e7465676572206e706f70202d0da100c000027b0da100c00003097b0da100c0000509706f700da100c0000a097d207265706561740da100c000067d206465660da100c0001425206d61726b696e67206f70657261746f72730da100c000252f7377090909090925206178206179206c656e67746820737472696e67207377207820790da100c000027b0da100c0000c737472696e6777696474680da100c00025657863682035202d3120726f6c6c203320696e646578203120737562206d756c206164640da100c0002034203120726f6c6c2033203120726f6c6c203120737562206d756c206164640da100c000067d206465660da100c0002a2f7373090909090925206178206179206c656e67746820737472696e67206d6174726978207373202d0da100c000027b0da100c0000e33202d3120726f6c6c20706f700da100c0000934203120726f6c6c0da100c00003097b0da100c000110932206e706f702028302920657863680da100c00017093220636f7079203020657863682070757420706f700da100c000070967736176650da100c000100966616c73652063686172706174680da100c0000e0963757272656e74706f696e740da100c00013093420696e646578207365746d61747269780da100c00008097374726f6b650da100c0000a0967726573746f72650da100c00008096d6f7665746f0da100c00010093220636f707920726d6f7665746f0da100c00009097d206373686f770da100c0000733206e706f700da100c000067d206465660da100c00011252070617468206f70657261746f72730da100c000232f7370090909090925206178206179206c656e67746820737472696e67207370202d0da100c000027b0da100c000096578636820706f700da100c00003097b0da100c000110932206e706f702028302920657863680da100c00017093220636f7079203020657863682070757420706f700da100c000100966616c73652063686172706174680da100c00010093220636f707920726d6f7665746f0da100c00009097d206373686f770da100c0000732206e706f700da100c000067d206465660da100c0001e25207061746820636f6e737472756374696f6e206f70657261746f72730da100c000152f706c0909090909252078207920706c207820790da100c000027b0da100c0000a7472616e73666f726d0da100c0001d302e32352073756220726f756e6420302e32352061646420657863680da100c0001d302e32352073756220726f756e6420302e32352061646420657863680da100c0000b697472616e73666f726d0da100c000067d206465660da100c000172f7365747374726f6b6561646a7573742077686572650da100c000027b0da100c00019706f702074727565207365747374726f6b6561646a7573740da100c0001e2f6309090909252078312079312078322079322078332079332063202d0da100c000027b0da100c000086375727665746f0da100c000067d206465660da100c000032f430da100c0000c2f63206c6f6164206465660da100c000182f7609090909252078322079322078332079332076202d0da100c000027b0da100c0001e63757272656e74706f696e742036203220726f6c6c206375727665746f0da100c000067d206465660da100c000032f560da100c0000c2f76206c6f6164206465660da100c000182f7909090909252078312079312078322079322079202d0da100c000027b0da100c0000f3220636f7079206375727665746f0da100c000067d206465660da100c000032f590da100c0000c2f79206c6f6164206465660da100c000102f6c090909092520782079206c202d0da100c000027b0da100c000076c696e65746f0da100c000067d206465660da100c000032f4c0da100c0000c2f6c206c6f6164206465660da100c000102f6d090909092520782079206d202d0da100c000027b0da100c000076d6f7665746f0da100c000067d206465660da100c000027d0da100c000027b0da100c000032f630da100c000027b0da100c0000b706c206375727665746f0da100c000067d206465660da100c000032f430da100c0000c2f63206c6f6164206465660da100c000032f760da100c000027b0da100c0002163757272656e74706f696e742036203220726f6c6c20706c206375727665746f0da100c000067d206465660da100c000032f560da100c0000c2f76206c6f6164206465660da100c000032f790da100c000027b0da100c00012706c203220636f7079206375727665746f0da100c000067d206465660da100c000032f590da100c0000c2f79206c6f6164206465660da100c000032f6c0da100c000027b0da100c0000a706c206c696e65746f0da100c000067d206465660da100c000032f4c0da100c0000c2f6c206c6f6164206465660da100c000032f6d0da100c000027b0da100c0000a706c206d6f7665746f0da100c000067d206465660da100c000097d206966656c73650da100c0001a252067726170686963207374617465206f70657261746f72730da100c000192f640909090909252061727261792070686173652064202d0da100c000027b0da100c00008736574646173680da100c000067d206465660da100c000182f6366090909090925202d20636620666c61746e6573730da100c0001063757272656e74666c6174206465660da100c000162f6909090909092520666c61746e6573732069202d0da100c000027b0da100c0000964757020302065710da100c00003097b0da100c0000809706f702063660da100c00006097d2069660da100c00008736574666c61740da100c000067d206465660da100c000162f6a090909090925206c696e656a6f696e206a202d0da100c000027b0da100c0000c7365746c696e656a6f696e0da100c000067d206465660da100c000152f4a090909090925206c696e65636170204a202d0da100c000027b0da100c0000b7365746c696e656361700da100c000067d206465660da100c000182f4d090909090925206d697465726c696d6974204d202d0da100c000027b0da100c0000e7365746d697465726c696d69740da100c000067d206465660da100c000172f77090909090925206c696e6577696474682077202d0da100c000027b0da100c0000d7365746c696e6577696474680da100c000067d206465660da100c0001a252070617468207061696e74696e67206f70657261746f72730da100c0000f2f48090909090925202d2048202d0da100c000077b7d206465660da100c0000f2f68090909090925202d2068202d0da100c000027b0da100c0000a636c6f7365706174680da100c000067d206465660da100c0000f2f4e090909090925202d204e202d0da100c000027b0da100c000086e6577706174680da100c000067d206465660da100c0000f2f6e090909090925202d206e202d0da100c0000c2f4e206c6f6164206465660da100c0000f2f46090909090925202d2046202d0da100c000027b0da100c000045f70660da100c000067d206465660da100c0000f2f66090909090925202d2066202d0da100c000027b0da100c0000a636c6f7365706174680da100c00002460da100c000067d206465660da100c0000f2f53090909090925202d2053202d0da100c000027b0da100c000045f70730da100c000067d206465660da100c0000f2f73090909090925202d2073202d0da100c000027b0da100c0000a636c6f7365706174680da100c00002530da100c000067d206465660da100c0000f2f42090909090925202d2042202d0da100c000027b0da100c00011677361766520462067726573746f72650da100c00002530da100c000067d206465660da100c0000f2f62090909090925202d2062202d0da100c000027b0da100c0000a636c6f7365706174680da100c00002420da100c000067d206465660da100c0000f2f57090909090925202d2057202d0da100c000027b0da100c00005636c69700da100c000067d206465660da100c0001a252074657874207061696e74696e67206f70657261746f72730da100c0002f2f7461090909090925206c656e67746820737472696e67207461206178206179206c656e67746820737472696e670da100c000027b0da100c0000b5f6173206d6f7665746f0da100c000185f747420616c6f616420706f702034202d3220726f6c6c0da100c000067d206465660da100c000112f746c090909090925202d20746c202d0da100c000027b0da100c000185f746c20616c6f616420706f70207472616e736c6174650da100c000067d206465660da100c000152f6173090909090925202d2061732061727261790da100c000027b0da100c000027b0da100c000043020300da100c000027d0da100c000027b0da100c000223220636f7079205f747420616c6f616420706f702034202d3220726f6c6c2073770da100c0001e65786368206e65672032206469762065786368206e65672032206469760da100c000027d0da100c000027b0da100c000223220636f7079205f747420616c6f616420706f702034202d3220726f6c6c2073770da100c0001265786368206e65672065786368206e65670da100c000027d0da100c000027b0da100c000043020300da100c000027d0da100c0000c7d2063766c6974206465660da100c000312f7a090909090925206c69746572616c2073697a65206c656164696e6720747261636b696e6720616c69676e207a202d0da100c000027b0da100c0000e2f5f61206578636820646465660da100c000142f5f6173206173205f612067657420646465660da100c000085f612032206c650da100c00003097b0da100c000120930205f7474206173746f726520706f700da100c0001b09302065786368206e6567205f746c206173746f726520706f700da100c00003097d0da100c00003097b0da100c0001b09302065786368206e6567205f7474206173746f726520706f700da100c00016096e65672030205f746c206173746f726520706f700da100c0000a097d206966656c73650da100c00025657863682066696e64666f6e742065786368207363616c65666f6e7420736574666f6e740da100c000067d206465660da100c000162f746d090909090925206d617472697820746d202d0da100c000027b0da100c000165f746d2063757272656e746d617472697820706f700da100c00007636f6e6361740da100c000067d206465660da100c000142f49090909090925206d61747269782049202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c000070974612073700da100c0000409746c0da100c00008097d20646465660da100c000067d206465660da100c000142f6f090909090925206d6174726978206f202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c0000b0974612034206e706f700da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c000142f65090909090925206d61747269782065202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c00009097461205f7073660da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c000142f72090909090925206d61747269782072202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c0000d097461205f746d205f7073730da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c000142f61090909090925206d61747269782061202d0da100c000027b0da100c00003746d0da100c000032f740da100c00003097b0da100c00008093220636f70790da100c00009097461205f7073660da100c00009096e6577706174680da100c0000d097461205f746d205f7073730da100c0000409746c0da100c00009096e6577706174680da100c00008097d20646465660da100c000067d206465660da100c0000f2f54090909090925202d2054202d0da100c000027b0da100c0000e5f746d207365746d61747269780da100c000067d206465660da100c000112520666f6e74206f70657261746f72730da100c0002d2f5a090909090925206172726179206c69746572616c206c69746572616c20646972656374696f6e205a202d0da100c000027b0da100c00004706f700da100c0000f66696e64666f6e7420626567696e0da100c0002863757272656e746469637420647570206c656e677468203120616464206469637420626567696e0da100c00003097b0da100c00011093120696e646578202f464944206e650da100c0000409097b0da100c0000609096465660da100c0000409097d0da100c0000409097b0da100c00009090932206e706f700da100c0000b09097d206966656c73650da100c0000a097d20666f72616c6c0da100c000232f466f6e744e616d6520657863682064656620647570206c656e6774682030206e650da100c00003097b0da100c00027092f456e636f64696e6720456e636f64696e672032353620617272617920636f7079206465660da100c00008093020657863680da100c0000409097b0da100c0001809096475702074797065202f6e616d65747970652065710da100c000050909097b0da100c00024090909456e636f64696e67203220696e646578203220696e6465782070757420706f700da100c0000909090931206164640da100c000050909097d0da100c000050909097b0da100c0000c0909096578636820706f700da100c0000c0909097d206966656c73650da100c0000b09097d20666f72616c6c0da100c0000a097d20696620706f700da100c0001863757272656e74646963742064757020656e6420656e640da100c000222f466f6e744e616d6520676574206578636820646566696e65666f6e7420706f700da100c000067d206465660da100c00012252067726f7570206f70657261746f72730da100c0000f2f75090909090925202d2075202d0da100c000077b7d206465660da100c0000f2f55090909090925202d2055202d0da100c000077b7d206465660da100c0000f2f71090909090925202d2071202d0da100c000027b0da100c0000667736176650da100c000067d206465660da100c0000f2f51090909090925202d2051202d0da100c000027b0da100c0000967726573746f72650da100c000067d206465660da100c000122520706c616365206f70657261746f72730da100c0002b2f60090909090925206d6174726978206c6c78206c6c79207572782075727920737472696e672060202d0da100c000027b0da100c0000e2f5f69207361766520646465660da100c0001036203120726f6c6c2034206e706f700da100c00007636f6e6361740da100c0000f757365726469637420626567696e0da100c000112f73686f7770616765207b7d206465660da100c0001366616c7365207365746f7665727072696e740da100c00004706f700da100c000067d206465660da100c0000f2f7e090909090925202d207e202d0da100c000027b0da100c00004656e640da100c0000b5f6920726573746f72650da100c000067d206465660da100c000122520636f6c6f72206f70657261746f72730da100c000122f4f09090909092520666c6167204f202d0da100c000027b0da100c0000530206e650da100c0000f2f5f6f66206578636820646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000122f5209090909092520666c61672052202d0da100c000027b0da100c0000530206e650da100c0000f2f5f6f73206578636820646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000122f6709090909092520677261792067202d0da100c000027b0da100c0000f2f5f6766206578636820646465660da100c000052f5f66630da100c000027b0da100c0000d5f6c70202f66696c6c206e650da100c00003097b0da100c00012095f6f66207365746f7665727072696e740da100c0000d095f676620736574677261790da100c00011092f5f6c70202f66696c6c20646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70660da100c000027b0da100c000045f66630da100c0000566696c6c0da100c000077d20646465660da100c000062f5f7073660da100c000027b0da100c000045f66630da100c000096578636820706f700da100c000066173686f770da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000122f4709090909092520677261792047202d0da100c000027b0da100c0000f2f5f6773206578636820646465660da100c000052f5f73630da100c000027b0da100c0000f5f6c70202f7374726f6b65206e650da100c00003097b0da100c00012095f6f73207365746f7665727072696e740da100c0000d095f677320736574677261790da100c00013092f5f6c70202f7374726f6b6520646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70730da100c000027b0da100c000045f73630da100c000077374726f6b650da100c000077d20646465660da100c000062f5f7073730da100c000027b0da100c000045f73630da100c0000373730da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000272f6b090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b206b202d0da100c000027b0da100c0000f5f6366206173746f726520706f700da100c000052f5f66630da100c000027b0da100c0000d5f6c70202f66696c6c206e650da100c00003097b0da100c00012095f6f66207365746f7665727072696e740da100c0001c095f636620616c6f616420706f7020736574636d796b636f6c6f720da100c00011092f5f6c70202f66696c6c20646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70660da100c000027b0da100c000045f66630da100c0000566696c6c0da100c000077d20646465660da100c000062f5f7073660da100c000027b0da100c000045f66630da100c000096578636820706f700da100c000066173686f770da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000272f4b090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b204b202d0da100c000027b0da100c0000f5f6373206173746f726520706f700da100c000052f5f73630da100c000027b0da100c0000f5f6c70202f7374726f6b65206e650da100c00003097b0da100c00012095f6f73207365746f7665727072696e740da100c0001c095f637320616c6f616420706f7020736574636d796b636f6c6f720da100c00013092f5f6c70202f7374726f6b6520646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70730da100c000027b0da100c000045f73630da100c000077374726f6b650da100c000077d20646465660da100c000062f5f7073730da100c000027b0da100c000045f73630da100c0000373730da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000312f78090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b206e616d6520677261792078202d0da100c000027b0da100c0000f2f5f6766206578636820646465660da100c0001466696e64636d796b637573746f6d636f6c6f720da100c0000f2f5f6966206578636820646465660da100c000052f5f66630da100c000027b0da100c0000d5f6c70202f66696c6c206e650da100c00003097b0da100c00012095f6f66207365746f7665727072696e740da100c00023095f6966205f6766203120657863682073756220736574637573746f6d636f6c6f720da100c00011092f5f6c70202f66696c6c20646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70660da100c000027b0da100c000045f66630da100c0000566696c6c0da100c000077d20646465660da100c000062f5f7073660da100c000027b0da100c000045f66630da100c000096578636820706f700da100c000066173686f770da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c000312f58090909090925206379616e206d6167656e74612079656c6c6f7720626c61636b206e616d6520677261792058202d0da100c000027b0da100c0000f2f5f6773206578636820646465660da100c0001466696e64636d796b637573746f6d636f6c6f720da100c0000f2f5f6973206578636820646465660da100c000052f5f73630da100c000027b0da100c0000f5f6c70202f7374726f6b65206e650da100c00003097b0da100c00012095f6f73207365746f7665727072696e740da100c00023095f6973205f6773203120657863682073756220736574637573746f6d636f6c6f720da100c00013092f5f6c70202f7374726f6b6520646465660da100c00006097d2069660da100c000077d20646465660da100c000052f5f70730da100c000027b0da100c000045f73630da100c000077374726f6b650da100c000077d20646465660da100c000062f5f7073730da100c000027b0da100c000045f73630da100c0000373730da100c000077d20646465660da100c000102f5f6c70202f6e6f6e6520646465660da100c000067d206465660da100c0001a25206c6f636b6564206f626a656374206f70657261746f72730da100c000132f410909090909252076616c75652041202d0da100c000027b0da100c00004706f700da100c000067d206465660da100c0001d63757272656e746469637420726561646f6e6c7920706f7020656e640da100c0000b7365747061636b696e670da100c0000d2525456e6450726f635365740da100c0000c2525456e6450726f6c6f670da100c0000d2525426567696e53657475700da100c000010da100c0002541646f62655f636d796b636f6c6f72202f696e697469616c697a652067657420657865630da100c0002141646f62655f6373686f77202f696e697469616c697a652067657420657865630da100c0002741646f62655f637573746f6d636f6c6f72202f696e697469616c697a652067657420657865630da100c0002a41646f62655f496c6c7573747261746f72383831202f696e697469616c697a652067657420657865630da100c0000b2525456e6453657475700da100c0000430204f0da100c000043020670da100c000043020520da100c000043020470da100c00003302069a100c0000120a100c0000330204aa100c0000120a100c0000330206aa100c0000120a100c00005302e352077a100c0000120a100c0000334204da100c00002205ba100c000045d302064a100c000010da100c0000825254e6f74653a0da100c000143237312e37323331203335382e34303436206d0da100c000143237342e32353833203336322e35393239204c0da100c000143237362e37393239203335382e34303436204c0da100c000143237312e37323331203335382e34303436204c0da100c00002660da100c000043120670da100c00005302e312077a100c000010da100c0000f3237332e35203335392e3235206d0da100c000143237352e39323631203336332e32353738204c0da100c000123237382e33353136203335392e3235204c0da100c0000f3237332e35203335392e3235204c0da100c00002620da100c0000a2525547261696c65720da100c0002941646f62655f496c6c7573747261746f72383831202f7465726d696e6174652067657420657865630da100c0002641646f62655f637573746f6d636f6c6f72202f7465726d696e6174652067657420657865630da100c0002041646f62655f6373686f77202f7465726d696e6174652067657420657865630da100c0002441646f62655f636d796b636f6c6f72202f7465726d696e6174652067657420657865630da100c000010da100c0000e2525456e64446f63756d656e740da100c000010da000bfff}}{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$MemoryModel 0\}\tab \{Use the small memory model \endash  this is the default\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$MemoryModel 1*)\tab \{Use the large memory model\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Names}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Names\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 names directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace backs}}}{\fs20 The names directive is followed by + or -.  If + is used, the compiler generates code to keep track of the name of the current procedure or function and the current line number.  If a run-time error is encountered, the error message is followed by the line number and name of the procedure or function where the error occurred, as well as a trace back.  The trace back shows the sequence of calls, given as procedure or function names, which resulted in the call to the subroutine where the error occurred.  This list is given starting with the error and proceeds backward to the main program.  The default is +.  \par You should be aware that keeping track of all of this information requires time and space.  While in the development stages of writing your program, you will probably want to set trace back on.  After the program is running, you will probably want to turn trace back off, so that the compiler may generate the most efficient code that it can.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \{$ names+\}\tab \tab \tab \{ Set trace back on \}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ names-\}\tab \tab \tab \{ Set trace back off\}\par }{\fs20 \par The following sample listing was produced with the RUN shell command, and with the list and names directives enabled in the program.  The compiler listing is shown first, followed by the output from the linker.  The program output then  begins with the odd/even messages.  \par A run-time error was purposely introduced into the program.  When i reaches 7 in the for loop of the main program, the call to the call procedure has an undefined case constant of 7.  The trace back shows first the error that caused execution to stop.  This is the "Jump to undefined case statement label" message.  It next gives the line number in the program where the error occurred, as well as the name of the offending procedure.  Finally, it lists the sequence of calls which resulted in the error.  The trace back shows that die was called from call, and that call was called from the main program, named ~_PASMAIN in ORCA/Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 ORCA/Pascal 1.2\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 Copyright 1987-1988, Byte Works, Inc.\par \par    1 \{$list+,names+,keep 'RunTimeBug'\}\par    2 program bug(output);\par    3 \par    4 var\par    5   i: integer;\par    6 \par    7   procedure call(parm: integer);\par    8 \par    9     procedure die(parm: integer);\par   10 \par   11     begin\par   12     case parm of\par   13       1,3,5: writeln(parm,'   odd');\par   14       2,4,6: writeln(parm,'  even');\par   15       end; \{case\}\par   16     end;\par   17 \par   18   begin\par   19   die(parm);\par   20   end;\par   21 \par   22 begin\par   23 for i := 1 to 7 do\par   24   call(i);\par   25 end.\par \par 0 errors found\par \par \par }\pard \fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 Link Editor 1.0a\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \par Pass 1: .............................\par Pass 2: .............................\par \par }\pard \fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 There are 2 segments, for a combined length of $000009CF bytes.\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18        1   odd\par        2  even\par        3   odd\par        4  even\par        5   odd\par        6  even\par Jump to undefined case statement label\par Error occurred at line 15 in procedure die\par \par }\pard \fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs18   Line  Name\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18   ----  ----\par     19  call\par }\pard \fi360\widctlpar\adjustright {\f6\fs18     24  ~_PASMAIN\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 NBA}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 NBA\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NBA directive\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new button actions}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HyperStudio}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The NBA directive creates a program which has the correct calling sequence and environment for a HyperStudio New Button Action.  This directive is discussed in detail in Chapter 4.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 NewDeskAcc}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 NewDeskAcc\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:NDA}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NewDeskAcc directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop programming}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NDA}}}{\fs20 The NewDeskAcc directive tells ORCA/Pascal that your program is a new desk accessory, and that  the compiler needs to generate some special code.  This directive must appear before the program token.  The directive has seven parameters.  The first four are the names of four procedures in your program that have special meaning in a desk accessory.  The next two are the update period and event mask.  The last is the name of your desk accessory, as it will appear in the Apple menu.  The format is:\par \par }{\f6\fs18 \{$NewDeskAcc open close action init period eventMask menuLine\}\par }{\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\i\fs20 open}{\fs20 \tab This parameter is an identifier that specifies the name of the function that is called when someone selects your desk accessory from the Apple Menu.  It must return a pointer to the window that it opens.\par \par }{\i\fs20 close}{\fs20 \tab This parameter is an identifier that specifies the name of the procedure to call when the user wants to close your desk accessory.  It must be possible to call this procedure even if open has not been called.\par \par }{\i\fs20 action}{\fs20 \tab The action parameter is the name of a procedure that is called whenever the desk accessory must perform some action.  It must declare two parameters.  The first is a single integer parameter, which defines the action that the procedure should take.  The second is an even record.  See the }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference Manual}{\fs20  for a list of the actions that will result in a call to this procedure.\par \par }{\i\fs20 init}{\fs20 \tab The init parameter is the name of a procedure that is called at start up and shut down time.  This gives your desk accessory a chance to do time consuming start up tasks or to shut down any tools it initialized.  This procedure must define a single integer parameter.  The parameter will be zero for a shut down call, and non-zero for a start up call.\par \par }{\i\fs20 period}{\fs20 \tab This parameter tells the desk manager how often it should call your desk accessory for routine updates, such as changing the time on a clock desk accessory.  A value of -1 tells the desk manager to call you only if there is a reason; 0 indicates that you should be called as often as possible; and any other value tells how many 60ths of a second to wait between calls.\par \par }{\i\fs20 eventMask}{\fs20 \tab This value tells the desk manager what events to call you for.  See the }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference Manual}{\fs20  for details.\par \par }{\i\fs20 menuLine}{\fs20 \tab The last parameter is a string.  It tells the desk manager what the name of your desk accessory is.  The name must be preceded by two spaces.  After the name, you should always include the characters \\H**.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Refer to Chapter 4 for more information about writing desk accessories.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Optimize}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Optimize\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 optimize directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 optimization}}}{\fs20 ORCA/Pascal is an optimizing compiler.  Optimization is the process of improving the object code that would be generated by a simple compiler.  The optimize directive accepts an integer operand; the value is used as a bit mask to turn individual optimizations on and off.  In general, you should use either 0, which turns all optimizations off (and is the default) or -1, which turns all optimizations on.  The bits used in ORCA/Pascal 2.0, and the optimizations they control, are:\par \par }\pard \qj\fi-1440\li2160\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\adjustright {\fs20 bit\tab value\tab optimization\par }\pard \qj\fi-1440\li2160\widctlpar\tx1440\adjustright {\fs20 0\tab 1\tab Intermediate code peephole optimization.\par 1\tab 2\tab Native code peephole optimization.\par 2\tab 4\tab Register use optimizations.\par 3\tab 8\tab Common subexpression elimination.\par 4\tab 16\tab Loop invariant removal and other loop optimizations.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par This directive can appear anywhere in the program, but it is applied to an entire program level procedure or function and all of the procedures and functions imbedded in it at one time.  For clarity, then, it is best to use the optimize directive between program level procedures or functions, or better still, to put a single optimize directive at the start of the source file.\par Optimization takes time.  If you want compilation to be faster, you can turn optimizations off.  This is typically what you would do in a school environment, or during the development phase of a program.\par When you want the compiler to produce the smallest, fastest program it can, you should turn optimizations on.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\tx3600\adjustright {\f6\fs18 \{$ optimize 0\}\tab \{ Turn optimizations off \}\par }\pard \qj\fi360\widctlpar\tx3600\adjustright {\f6\fs18 \{$ optimize -1\}\tab \{ Turn optimization on \}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RangeCheck}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 RangeCheck\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RangeCheck directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 The RangeCheck directive can be set to on (+) or off (-).  It is used to force the compiler to check for the following:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Ensures subranges are valid.\par 2.\tab Checks for integer math errors.\par 3.\tab Checks if integers are equal to -maxint - 1.\par 4.\tab Checks if long integers are equal to -maxint4 - 1.\par 5.\tab Checks for real math errors.\par 6.\tab Checks for use of nil pointers or objects.\par 7.\tab Checks for array subscripts out of bounds.\par 8.\tab Checks for stack overflows.\par 9.\tab Ensures characters have ordinal values between 0 and 127, inclusive.\par 10.\tab Ensures boolean values have ordinal values of 0 or 1.\par }\pard \qj\fi260\widctlpar\adjustright {\fs20 \par This type of checking requires a great deal of extra time and space during compilation; hence, the default is for range checking to be off.  You will typically want to enable range checking during the debugging phases of program development, and then disable the feature after the program is running.\par The ISO standard requires that range checking be included in a Pascal compiler.  In order to avoid using range checking, you will need to explicitly set }{\f6\fs18 RangeCheck}{\fs20  off if you are also using the }{\f6\fs18 \{$ISO+\}}{\fs20  directive.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$ iso+, rangecheck-\} \{ Enforce ISO standard, turn range checking off \}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ rangecheck+\}       \{ Set range checking on \}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RTL}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 RTL\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RTL directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 initialization programs}}}{\fs20 The RTL directive tells the compiler to create a program that exits via the RTL assembly language instruction, rather than by making a call to the GS/OS procedure Quit.  The directive must appear before the program statement to have any effect.\par This directive is usually used to create Temporary Initialization Files (TIFs) and Permanent Initialization Files (PIFs).  See the Apple\~IIGS Technical Notes for details about TIFs and PIFs.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ rtl \}\tab \tab \tab \{ Exit with an RTL \}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Segment}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Segment\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 segment directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 segments}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory model}}}{\fs20 The segment directive allows you to place procedures and functions in different load segments.  A load segment is a block of executable code that is placed into memory by the loader.  The directive accepts a string as an operand, which gives the name of the segment.  The string can contain from one to ten characters, and the characters can be any printing characters.  Note that segment names are case sensitive!  That is, Seg1 is not the same segment name as seg1.\par The segment directive is designed for use with programs that exceed 64K bytes in size, exclusive of the variables required by the program.  All procedures and functions following a segment directive are placed into the named load segment.  The same name can be reused in different parts of the program.  The last segment named before the main program body causes the main program to be placed in that segment.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 program k;\par \par procedure x;\par begin\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$ segment 'x'\}\par \par procedure z;\par begin\par \{$ segment '33'\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end.\par }\pard \qj\widctlpar\adjustright {\fs20 \par would cause procedure x to be placed in the 'blank' segment.  This is the default name used by the loader if no segment directive has been used in the program, or if some parts of the program are not placed in a named segment with the segment directive.  Procedure z would be placed in segment x, and the main program would be placed in segment 33.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 StackSize}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 StackSize\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 StackSize directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory model}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 The StackSize directive is used to request that the compiler allot a specific size of stack.  It accepts a single operand, the number of bytes that the stack may use, given as an integer.  One of the first things that the compiler looks for is a StackSize directive, which must appear before the program token.\par Local variables, parameters, and temporary variables allocated by the compiler are allocated from the stack.  By default, the stack is 4K long.  If you run out of stack space, you will get "Stack overflow" errors at run-time if range checking is on, or the program will crash if range checking is off.\par Stack space is allocated from a special area of memory known as bank zero.  The amount of memory actually available varies, depending on the version of GS/OS and tools in use, what program launcher was used, and so on.  In general, you can get about 32K (32768 bytes) in any environment.\par Stack space is actually allocated by creating a direct page segment.  This causes the apparent size of your program to go up by the stack size, but no actual code has been added.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$ stacksize 4096\}\tab \tab \{ Default stack size \}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ stacksize 10000\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Title}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Title\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 title directive\bxe }}}{\fs20 The title directive is followed by a quoted string.  The string is the title that is to appear at the top of each page of the compiler listing.  Title also causes page numbers to be printed at the top of each page of the listing.\par }\pard \qj\widctlpar\adjustright {\fs20 \par Examples:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ title 'Project X:  TOP SECRET'\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ToolParms}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ToolParms\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ToolParms directive\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop programming}}}{\fs20 This directive is used to force the compiler to create a function that is called with the protocols used by the Apple\~II}{\scaps\fs20 gs}{\fs20  toolbox.  It is needed whenever you write a function that will be called by a tool, such as when you create your own control using the Control Manager.\par Normally parameters are placed on the stack, and the procedure or function is called.  Upon return, function values are in the registers, or, in the case of real, double, comp or extended results, they are on the stack.\par The tools use a different method.  When a tool is called, space for the function result is placed on the stack, then the parameters are placed on the stack, and finally, the function is called.  The value returned by the function is always on the stack.  Tools that allow you to create functions that they will call expect your function to return the value on the stack.  To cause ORCA/Pascal to do this, use the directive\par \par }{\f6\fs18 \{$ToolParms+\}\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 before the function header.  Be sure and place the directive\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ToolParms-\}\par }\pard \qj\widctlpar\adjustright {\fs20 \par after the function, so that any functions in the rest of the program will use standard parameter passing methods.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Since Pascal expects any functions it calls to use the standard parameter passing convention, any function defined while this option is turned on cannot be called directly from Pascal.  The function must be called only by the tools.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \{$ToolParms+,DataBank+\}\par \par function MyFunc: integer;\par \par begin\par \{function body goes here\}\par end;\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \{$ToolParms-,DataBank-\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 XCMD}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 XCMD\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 XCMD directive\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HyperCard\~IIGS}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The XCMD directive creates a program which has the correct calling sequence and environment for a HyperCard\~II}{\fs18 GS}{\fs20  XCMD.  This directive is discussed in detail in Chapter 4.\par }\pard \widctlpar\adjustright {\*\bkmkend bk23}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler directives}{\rxe bk23}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendices\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix A:  ISO Conformance and Summary of Extensions\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Appendix A - ISO Conformance and Summary of Extensions\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Appendix A \endash  ISO Conformance and Summary of Extensions\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 ISO Conformance}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ISO Conformance\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ISO Pascal}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ANSI Pascal}}}{\fs20 ORCA/Pascal V1.2 for the Apple\~II}{\fs18 GS}{\fs20  complies with the requirements of level 0 of ISO 7185.\par ORCA/Pascal V1.2 for the Apple\~II}{\fs18 GS }{\fs20 compiles with the requirements of ANSI/IEEE 770 X3.97-1983.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Errors Not Caught}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Errors Not Caught\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ISO 7185 defines an error in a somewhat peculiar way.  An error is something which a perfect implementation of Pascal would catch, but that some compilers may not be able to catch because doing so would drastically increase the code size or running time of programs.  A compiler can still be in full conformance to the standard, even if all of these errors are not caught, but all of the errors that are not caught must be listed.  This section fulfills that requirement.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab It is an error to access any component of a variant record if that part of the record is not active.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\fs20 \par 2.\tab It is an error to allocate space for a variant record using the form }{\f6\fs18 new(p,V1,V2,...)}{\fs20  and then to use the variable in an assignment or as an actual parameter to a procedure or function call.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\fs20 \par 3.\tab It is an error to change the value of a file variable }{\f6\fs18 f}{\fs20  when a reference to its buffer variable }{\f6\fs18 f^}{\fs20  exists.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 \par 4.\tab It is an error to try to reference a variable through an undefined pointer.  If the pointer has been deallocated using dispose, this error will be caught.  It is not always caught if the pointer has never been allocated.  The error is never caught if two pointers point to the same area, and one is disposed of, and then the other is accessed.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\fs20 \par 5.\tab It is an error to try to dispose of a heap area while a reference to it exists.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 heap}}}{\fs20 \par 6.\tab When a variable has been allocated with the form new(p,V1,V2,...), where V1, V2, ..., indicate variant portions of a record, it is an error to try to change one of the variant parts that were specified (although a variant part at a deeper level can be changed).}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\fs20 \par }\pard \qj\fi360\li720\keepn\widctlpar\adjustright {\fs20 For example, if a variant record had been defined as\par \par }{\f6\fs18 record\par    case b: boolean of\par       true:  (i: integer);\par        false: (r: real)\par }\pard \qj\fi360\li720\widctlpar\adjustright {\f6\fs18     end;\par }{\fs20 \par }\pard \qj\li720\widctlpar\adjustright {\fs20 then an allocation of memory for the record using the statement\par }\pard \qj\fi360\li720\widctlpar\adjustright {\fs20 \par }{\f6\fs18 new (p, true);\par }{\fs20 \par }\pard \qj\li720\widctlpar\adjustright {\fs20 would result in the variable i being defined and a total of four bytes of memory being allocated.  A later assignment such as\par }\pard \qj\fi360\li720\widctlpar\adjustright {\fs20 \par }{\f6\fs18 p^.b := false;\par }{\fs20 \par }\pard \qj\li720\widctlpar\adjustright {\fs20 is clearly an error.  This type of error will not be caught by ORCA/Pascal.}{\pard\plain \qj\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 7.\tab It is an error to allocate a heap variable with one parameter list like new(p,V1,V2), and then deallocate with another, like dispose(p,VA,VB).  The parameter lists must be identical.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new procedure}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 dispose procedure}}}{\fs20 \par 8.\tab It is an error for the result of pred or succ to not exist.  ORCA/Pascal will only catch this error if the result is assigned to a variable of the same type as that upon which the pred or succ operation is performed.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pred function}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 succ function}}}{\fs20   For example, consider the following code fragment:\par \par }\pard \qj\fi-360\li1440\keepn\widctlpar\tx3600\adjustright {\f6\fs18 digits = 0..9;\par d, e: digits;\par }\pard \qj\fi-360\li1440\widctlpar\tx3600\adjustright {\f6\fs18 i: integer;\par \par }\pard \qj\fi-360\li1440\keepn\widctlpar\tx3600\adjustright {\f6\fs18 d := 9;\par i := succ(d);\tab \{would not be caught \endash  d and i are of \} \tab \{different types\}\par }\pard \qj\fi-360\li1440\widctlpar\tx3600\adjustright {\f6\fs18 \par }\pard \qj\fi-360\li1440\keepn\widctlpar\tx3600\adjustright {\f6\fs18 e := succ(d);\tab \{would be caught \endash  e and d are of \}\par }\pard \qj\fi-360\li1440\widctlpar\tx3600\adjustright {\f6\fs18 \tab \tab \{the same type\}\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par 9.\tab It is an error for the result of a function call to be undefined.  ORCA/Pascal will only detect this error if there are no assignments in the function body.  If at least one assignment exists, but there is a path through the function that does not execute the assignment, the error will not be caught.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Implementation Defined}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Implementation Defined\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ISO standard specifies some items which can change from one implementation of Pascal to another, but for which some definition must exist.  In ORCA/Pascal, these are:\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Maxint = 32767.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 maxint}}}{\fs20 \par 2.\tab Char variables can be assigned ordinal values in [0..127].  The characters associated with these ordinal values are defined by the ASCII character set.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 char variables}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\fs20 \par 3.\tab Real numbers can range from -3.4e38 to -1.2e-38 and from 1.2e-38 to 3.4e38.  Computations are accurate to seven decimal digits.  Double-precision real numbers can range from -2.3e-308 to -1.7e+308 and from 2.3e-308 to 1.7e+308.  Computations are accurate to fifteen decimal digits.  Extended-precision real numbers can range from -1.7e-4932 to -1.1e+4932 and from 1.7e-4932 to 1.1e+4932.  Computations are accurate to nineteen decimal digits.  Comp numbers can range from -9.2e18 to 9.2e18; they are always integer values.  Computations are accurate to eighteen decimal digits.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comp}}}{\fs20 \par 4.\tab Sets may contain up to 2048 elements, with ordinal values in [0..2047].}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par 5.\tab Default field widths for the write and writeln procedures are:}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 write procedure}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 writeln procedure}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comp}}}{\fs20 \par }\pard \qj\fi-360\li720\widctlpar\tx1080\adjustright {\fs20 \par }\pard \qj\li1080\widctlpar\tx2340\adjustright {\fs20 byte\tab 8\par integer\tab 8\par longint\tab 16\par boolean\tab 8\par real\tab 16\par double\tab 16\par extended\tab 16\par comp\tab 16\par }\pard \qj\fi-360\li720\widctlpar\tx1080\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 6.\tab Exponents are written as the character }{\f6\fs18 e}{\fs20  followed by a three-digit signed integer value, as in \par }\pard \qj\fi-360\li720\widctlpar\tx1080\adjustright {\fs20 \par }{\f6\fs18 \tab \tab 3.141593e+000\par }{\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 7.\tab The page procedure writes the ASCII form-feed character to the specified file.  The ordinal value of the form-feed character is 12.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 page procedure}}}{\fs20 \par 8.\tab Variables listed in the program header are not bound to external files or values, except for the required identifiers input, which is bound to standard input (usually the keyboard) and output, which is bound to standard output (usually the CRT screen), and the identifier erroroutput, which behaves like output but sends characters to the error output hook.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 input}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 errorOutput}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program header}}}{\fs20 \par 9.\tab Use of the Standard Pascal procedures reset or rewrite on input, output, and erroroutput is ignored.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 errorOutput}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 input}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 reset procedure}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 rewrite procedure}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Extensions to the ISO Pascal Standard}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Extensions to the ISO Pascal Standard\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Compiler Directives}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Compiler Directives\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extensions}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler directives}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\tx4320\adjustright {\fs20 Compiler directives give you control over the way the compiler processes your program.  Compiler directives appear in the source as if they were comments, except that the character after the comment character is a $ character.  No spaces can separate the opening comment character from the $ character.  See Chapter 23 for descriptions of the directives, as well as details on the syntax and error checking used while processing compiler directives, including how to code more than one in a single comment.\par \par }\pard \qj\li360\widctlpar\tx4320\adjustright {\f6\fs18 \{$Append 'filename'\}\par \{$ClassicDesk 'name', start, shutdown\}\par \{$CDev name\}\par \{$Copy 'filename'\}\par \{$DataBank+\}\tab \{$DataBank-\}\par \{$Dynamic 'segmentName'\}\par \{$Eject\}\par \{$ISO+\}\tab \{$ISO-\}\par \{$Keep 'filename'\}\par \{$LibPrefix 'directory'\}\par \{$List+\}\tab \{$List-\}\par \{$MemoryModel 0\}\tab \{MemoryModel 1\}\par \{$Names+\}\tab \{$Names-\}\par \{$NewDeskAcc open close action init period eventMask menuLine\}\par \{Optimize -1\}\tab \{Optimize 0\}\par \{$RangeCheck+\}\tab \{$RangeCheck-\}\par \{$RTL\}\par \{$Segment 'segmentName'\}\par \{$StackSize n\}\par \{$ToolParms+\}\tab \{ToolParms-\}\par \{$Title 'any string'\}\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Additional Language Features}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Additional Language Features\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The case statement has been extended to allow the use of an otherwise clause.  The otherwise clause is executed if the input value for the case statement is not specified as a case label.  For example, the loop\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 for i := 1 to 5 do\par   case i of\par     1: writeln('1st');\par     2: writeln('2nd');\par     3: writeln('3rd');\par     otherwise: writeln(i:1,'th');\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18     end; \{case\}\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would write\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 1st\par 2nd\par 3rd\par 4th\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 5th\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 to the screen.  The otherwise clause can occur anywhere in the body of the case statement, but only one otherwise is allowed.  Under ORCA/Pascal otherwise is a reserved word, unless the \{$ISO+\} directive has been used.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal supports a uses statement to import declarations from a separate file.  Note that under ORCA/Pascal uses is a reserved word, unless the \{$ISO+\} directive has been used.  \par The extern, ProDOS, Tool, UserTool and Vector directives can be used to control importing and exporting of global variables.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Additional Types}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Additional Types\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 Four additional predefined types exist in ORCA/Pascal.  Longint is an extended form of the type integer.  Longint variables require four bytes of storage.  They can represent integer numbers in the range -2147483647 to 2147483647.  The companion predefined constant maxint4 is also defined, with a value of 2147483647.  With a few minor exceptions, longint constants and variables can be used anywhere that integer constants and variables can appear.  For the most part, you can think of longint as if it was the Standard Pascal type integer, and integer as if it is a predefined subrange of longint.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bytes}}}{\fs20 Byte is a subrange of the standard type integer.  A value of type byte can range from 0 to 255, and occupies one byte of storage.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended-precision}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comp}}}{\fs20 There are three predefined real types in addition to the required type real; they are double, extended and comp.  Variables and constants of type double, extended and comp can be used anywhere that a real variable or constant appears.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 Finally, ORCA/Pascal supports strings.  Strings are actually not a new type, but rather a mnemonic for packed array [n..m] of char, with n 0 or 1, and m greater than one.  If no length is specified, a maximum length of eighty characters is assumed.  Any length in the range 2..maxint is supported.  \par ORCA/Pascal supports two internal formats for strings.  Either format may be used interchangeably within Pascal; it is only when you are dealing with the toolbox, or for some other reason need to use one format or the other, that you must be concerned with which format is used.  Standard Pascal strings are implemented in ORCA/Pascal along the lines of strings in the C programming language.  That is, an ASCII zero (null character) can be placed anywhere within a string to mark its end.  The length of a string is the number of characters up to but not including the null character, or it is the maximum size given when the string was defined, whichever is shorter.  Strings with a leading length byte are also supported.  This format limits the length of strings to 255 characters, while Standard Pascal strings can be up to 32767 characters long.\par See the section on strings, below, for a package of extensions that give a great deal of added power to strings in ORCA/Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Additional Operators}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Additional Operators\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Six operators have been added to allow bit manipulations of integers, bytes, and long integers.  They are:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\keepn\widctlpar\adjustright {\fs20 &\tab Bitwise and.}{\pard\plain \qj\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 & operator}}}{\fs20 \par |\tab Bitwise or.}{\pard\plain \qj\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 | operator}}}{\fs20 \par !\tab Bitwise exclusive or.}{\pard\plain \qj\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ! operator}}}{\fs20 \par ~\tab Bitwise not.}{\pard\plain \qj\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ~ operator}}}{\fs20 \par <<\tab Shift left.}{\pard\plain \qj\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 << operator}}}{\fs20 \par }\pard \qj\li720\widctlpar\adjustright {\fs20 >>\tab Shift right.}{\pard\plain \qj\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 >> operator}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par The operators work exactly like their C language counterparts.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal also supports the exponentiation operator **.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ** operator}}}{\fs20 This returns an extended result.\par Finally, the @ }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 @ operator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\fs20 operator can be used to return the address of a variable, function, or procedure, or the address of an element of an array or record.  The type of the result is assignment compatible with any pointer type.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 operator precedence}}}{\fs20 The precedence of these operators, compared with the operators from Standard Pascal, are:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\fs20 not\tab ~\tab **\tab @\par div\tab mod\tab and\tab *\tab /\tab &\tab <<\tab >>\par or\tab +\tab -\tab |\tab !\par }\pard \qj\fi720\widctlpar\adjustright {\fs20 in\tab =\tab <>\tab <\tab >\tab <=\tab >=\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Error Output}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Error Output\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output}}}{\fs20 In addition to the predefined files input and output, ORCA/Pascal also supports the predefined file erroroutput.  Its characteristics are identical to the characteristics of output.  The difference is that characters written to output are sent to the Apple\~II}{\scaps\fs20 gs}{\fs20  standard output hooks, while characters written to erroroutput are written to the Apple\~II}{\scaps\fs20 gs}{\fs20  error output hooks.  You can write error messages to erroroutput, and they will appear on the console even if output has been redirected.  You can also separately redirect erroroutput.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Strings}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Strings\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 ORCA/Pascal has extended the definition of strings to allow reading a string using the read and readln procedures, assigning strings of different lengths, support for assigning a zero length string, and changing the current length of a string.\par There are two internal formats for strings, either of which may be used anyplace Pascal allows a string.  One format is a length byte followed by up to 255 characters.  This format is coded as\par \par }{\f6\fs18 packed array [0..n] of char\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 where n is in the range 2..255.  The other format is the format used in ISO, ANSI, and Jensen & Wirth \endash  in other words, Standard Pascal strings.  Standard strings are coded as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 packed array [1..n] of char\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 where n is in the range 2..maxint.  Some extensions to Standard Pascal strings are also supported.  The specific addition made to Standard Pascal strings are:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab A string can be assigned to a string that was defined with a different length.  If the target string is shorter than the source string, extra characters are truncated.  If the target string is longer, a chr(0) character is inserted after the last character copied from the shorter string.\par 2.\tab The character chr(0) is interpreted to mean the end of the string.  The three places where this has an effect are:\par }\pard \qj\fi-360\li720\widctlpar\tx1080\adjustright {\fs20 \par }\pard \qj\fi-360\li1440\widctlpar\adjustright {\fs20 a.\tab When a string is written to an output device, encountering a chr(0) has the effect of canceling the output of the remainder of the string.\par b.\tab When the length of a string is computed using the length function, scanning stops when a chr(0) is encountered.\par c.\tab A chr(0) character is inserted after the last character read from a file using read or readln, and after the last character copied when a short string is copied into a longer one.\par }\pard \qj\fi-360\li720\widctlpar\tx1080\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 3.\tab The null string }{\f6\fs18 "}{\fs20  can be assigned to a string.  The affect is to set the first character of the string to chr(0).\par 4.\tab A character can be assigned to a string.  In that case, the character is placed in the first element of the string, and chr(0) becomes the second element of the string.\par 5.\tab A string can be read from a file using the procedures read and readln.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The two string formats may be used interchangeably.  Strings of one format may be assigned to strings of another format, and the two formats may be mixed freely when using the built-in procedures and functions that handle strings.  When passing parameters, normal assignment compatibility does have an effect, however.  Strings passed as parameters must be of the same format as the parameter; i.e., they must have the same length and be of the same type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Predefined Procedures and Functions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Predefined Procedures and Functions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section gives an overview of the procedures and functions available from ORCA/Pascal that are not included with Standard Pascal, or that have additional features not provided in the Standard Pascal implementation.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 built-in procedures}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 built-in functions}}}{\fs20 For more details on any of these functions, or on the functions and procedures of Standard Pascal, see Chapter 22, or refer to the index or table of contents for specific page numbers.\par }\pard \qj\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20 function arccos (x: real): real;\par function arcsin (x: real): real;\par function arctan2 (x, y: real): real;\par procedure close (f: file);\par procedure CommandLine (var string[size]);\par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs20 function cnvds (x: extended; width, digits: integer):\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20                 string[size];\par function cnvis (x: integer): string[size];\par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs20 function cnvrs (x: extended; width, digits: integer)\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20                 string[size];\par function cnvsd (str: string[size]): extended;\par function cnvsi (str: string[size]): integer;\par function cnvsl (str: string[size]): longint;\par function cnvsr (str: string[size]): real;\par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 function concat (str1: string[size1]; str2: string[size2]):\par }\pard \li360\widctlpar\adjustright {\f6\fs20                  string[rsize];\par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs20 function copy (str: string[size]; index, count: integer):\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20                string[rsize];\par procedure delete (str: string[size]; index, count: integer);\par procedure EndDesk;\par procedure EndGraph;\par procedure halt (errorCode: integer);\par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 procedure insert (str1: string[size1]; str2: string[size2];\par }\pard \li360\widctlpar\adjustright {\f6\fs20                   index: integer);\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20 function length (str: string[size]): integer;\par function member (obj: objectType; otype: objectType): boolean;\par procedure open (f: file; name: string[size]);\par function ord4 (x: <any ordinal value>): longint;\par }\pard \li360\widctlpar\adjustright {\f6\fs20 function pointer (x: <any pointer>):<anonymous pointer>;\par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 function pos (target: string[tsize]; source: string[size]):\par }\pard \li360\widctlpar\adjustright {\f6\fs20               integer;\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20 function random: real;\par function randomdouble: extended;\par function randominteger: integer;\par function randomlongint: longint;\par procedure reset (f: file; name: string[size]);\par procedure rewrite (f: file; name: string[size]);\par function round4 (x: real): longint;\par procedure seed (x: integer);\par procedure seek (f: file; loc: integer);\par procedure shellid (var string[size]);\par function SizeOf (value): integer;\par procedure StartDesk (resolution: integer);\par procedure StartGraph (resolution: integer );\par procedure SystemError (errno: integer);\par function tan (x: real): real;\par function ToolError: integer;\par function trunc4 (x: real): longint;\par function userID: integer;\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix B:  Error Messages\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Appendix B - Error Messages\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Appendix B \endash  Error Messages\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compilation errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 The errors flagged during the development of a program are of three basic types:  compilation errors, linking errors, and execution errors.  Compilation errors are those that are flagged by the compiler when it is compiling your program.  These are generally caused by mistakes in typing or simple omissions in the source code.  Compilation errors are divided into four categories:  those that are marked with a caret (^) on the line in which they occurred; those where the exact position of the error cannot be determined or is not well defined, such as declaring a label but then not using it in the body of a block; those which are due to the restrictions imposed by the ORCA/Pascal compiler; and those which are so serious that compilation cannot continue.  Each of the error types is treated in its own subsection of compilation errors.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link errors}}}{\fs20 Linking errors are those that are reported by the linker when it is processing the object modules produced by the compiler.  These are typically caused by lack of memory for the object code or  data, or by incorrectly linking files when separate compilation has been used.  If you receive "Out of memory" messages from the linker, try using the large memory model available with the compiler, or you can break up your program into different load segments.  When the linker issues "Unresolved reference" or "Duplicate reference" errors, you have probably made a mistake in your external declarations.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 Execution errors occur when your program is running.  These can be detectable mistakes, such as division by zero, or can be severe enough to cause the computer to crash, such as accessing memory in unexpected ways, as with pointer variables containing invalid addresses. \par Error levels are associated with compilation and linking.  Compiler error levels are explained at the beginning of the section describing the errors you can receive during compilation; linker error levels are described at the beginning of the section describing linker errors. \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Compilation Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Compilation Errors\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 ')' Expected\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a right parenthesis but did not see one.  Compilation continued as though a ')' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 ':' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a colon but did not see one.  Compilation continued as though a ':' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 '(' Expected}{\b \par }{\b\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a left parenthesis but did not see one.  Compilation continued as though a '(' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 '[' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a left bracket but did not see one.  Compilation continued as though a '[' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 ']' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a right bracket but did not see one.  Compilation continued as though a ']' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 ';' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a semicolon but did not see one.  Compilation continued as though a ';' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 '=' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an equal sign but did not see one.  Compilation continued as though a '=' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 ',' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a comma but did not see one.  Compilation continued as though a ',' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 '.' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a period but did not see one.  Compilation continued as though a '.' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 ':=' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an assignment symbol but did not see one.  Compilation continued as though a ':=' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 '..' Expected}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a range symbol but did not see one.  Compilation continued as though a '..' had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Actual Parameter Must Be A Variable}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A parameter to a procedure or function has been declared as a var parameter, but an attempt has been made to pass a constant or expression.  Values passed as var parameters must be variables, array elements, or record elements.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 var parameters}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Again Forward Declared}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A procedure or function has been declared as forward more than one time, or has been declared as forward after being declared in the interface part of a unit.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Assignment Of Files Not Allowed\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A file variable has been assigned to another variable.  This is not allowed in Pascal.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Assignment To Formal Function Is Not Allowed}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A function name was passed as a parameter to another function or procedure, and an attempt was then made to assign a value to the passed parameter..}{\v\fs20 i.functions;}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6 Assignment To Function Identifier Not Allowed Here\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to assign a value to a function, but the assignment statement did not occur within the body of the function.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Assignment To Standard Function Is Not Allowed}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt was made to assign a value to one of the built-in functions.  These can be either the standard ISO functions, or one provided with ORCA/Pascal.  For example, sin := x.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 built-in functions}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Base Type Must Be Scalar Or Subrange}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When defining a set, an element of the set has been specified which is of a type that is invalid for membership, such as a pointer or another set.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Base Type Must Not Be Real\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When defining a set, the base type has been given as real, double, comp or extended.  Real numbers cannot be used as elements of sets in Pascal.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Begin' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword }{\f6\fs18 begin}{\fs20  but did not see it.  Compilation continued as though begin had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Body Must Appear in Implementation Part\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A function or procedure in the interface part has a body (the begin and end, plus the statements in between).  The body for the procedure or function must be moved to the implementation part of the unit.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Cannot Modify Control Variable\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt was made to assign a value to the looping control variable in a }{\f6\fs18 for}{\fs20  statement, as in}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 for statement}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 for k := 1 to 5 do\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    k := 10;\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Cannot Use As Formal Parameter\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A parameter has been declared as a var parameter to a function or a procedure, and an attempt has been made to pass an illegal variable as the parameter.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 var parameters}}}{\fs20 The kinds of variables which cannot be passed as var parameters include elements of packed arrays, tag fields of variant records, and the control variables of for loops, from within the for loop itself.  Each of the parameters passed below to the procedure }{\f6\fs18 WrongCall}{\fs20  are illegal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type clothes = record \{gender is tag field\}\par   case gender: integer of\tab \tab \par     female: (blouse, skirt: integer);\par     male: (shirt, pants, jacket: integer);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par   letters: packed array [1..20] of char;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   k: integer;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par for k := 1 to 5 do\par   \{k is control variable of for loop\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   WrongCall (k, letters[3], gender);\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \par }{\fs20 where WrongCall has been defined as:\par }{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 procedure WrongCall(var x: integer; var ch: char; var y: integer);\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Casted Expression Must Be Scalar or Pointer\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A value that cannot be safely type cast has been type cast, or a type cast to a type that cannot be used has been attempted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Code Generation Error\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This error should only occur in the presence of other errors.  Correcting the other errors will cause this one to go away, too.  If this error occurs by itself, report it as a bug to the Byte Works.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Compiler Error\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This error generally indicates that the symbol table has been corrupted, due to the compiler becoming confused after an earlier error.  You should not receive this error except after receiving at least one other error.  Correcting the other error(s) will make this one go away, too.  Should the error occur by itself, report it as a bug to the Byte Works.\par Note that this error is sometimes reported first, and an error the compiler detects a few tokens later is the cause.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Control Var Must Be Declared At This Level\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to use a looping variable in a for loop which was not declared in the procedure or function that contains the for loop.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 for statement}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Digit Expected\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A number has been found which is immediately followed by a character, with no intervening spaces.  Pascal requires that identifiers, reserved words, and numeric constants be separated from one another by at least one space.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Do' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword do but did not see it.  Compilation continued as though do had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Duplicate Label\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This error should only occur in the presence of other errors.  Correcting the other errors will cause this one to go away, too.  If the error occurs by itself, report it as a bug to the Byte Works.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Element Expression Out Of Range\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 An element in a set constant is outside of the range 0..2047.}{\pard\plain \qj\fi360\widctlpar\outlinelevel0\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'End' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword end but did not see it.  Compilation continued as though end had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Base Set\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A set was defined in such a manner that the base type was out of bounds for its ordinal range.  For example, set of [2000..3000] is invalid because the ordinal value of each set element must be within the range 0..2047 under ORCA/Pascal.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Constant\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An error was detected in the construction of a constant.  This is typically caused by a typographical error when coding a constant value.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Declaration Part\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The declaration section of a block has been coded in such a way that the compiler thought that the declaration section was complete, yet it found that the section continued.  Check that you have listed your declarations in the correct order (uses, label, const, type, var, subroutine heading, begin).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Factor\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An error was detected in the construction of a factor.  This is typically caused by a typographical error when coding an unsigned constant value, an identifier, a variable, a function call, an expression enclosed in parentheses, or a subrange specification. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Field-List\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 A record specification was incorrectly constructed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Parameter List\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A parameter list for a procedure or function call was incorrectly constructed.  This is usually caused by omitting a closing parenthesis.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Simple Type\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An incorrect array or set specification was given.  After encountering the key words }{\f6\fs18 array}{\fs20  or }{\f6\fs18 set of}{\fs20 , followed by a left square bracket, the compiler expected to see a type identifier, a list of identifiers enclosed in parentheses, or a subrange.  Check the specification enclosed in square brackets.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Type\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A syntax error was detected during compilation of the type declaration section of the block.  Check the type declaration.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Type Of Standard Function Parameter}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A parameter of the wrong type was used when calling a built-in function.  For example, }{\f6\fs18 sin(setValue)}{\fs20  rather than }{\f6\fs18 sin(realValue)}{\fs20 .  The built-in routines include those prescribed by Standard Pascal as well as the extended functions provided with ORCA/Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Type Of Standard Procedure Parameter\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A parameter of the wrong type was used when calling a built-in procedure.  For example, }{\f6\fs18 reset(stringType)}{\fs20  rather than }{\f6\fs18 reset(filePointer)}{\fs20 .  The built-in routines include those prescribed by Standard Pascal as well as the extended procedures provided with ORCA/Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Uses\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A syntax error was detected during compilation of a }{\f6\fs18 uses}{\fs20  file.  Check file referred to in the }{\f6\fs18 uses}{\fs20  directive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Error In Variable\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An error was detected in the construction of a variable.  This is typically caused by a typographical error when coding a variable declaration.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Expression Is Not Of Set Type\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The right-hand operand of an }{\f6\fs18 in}{\fs20  operator was not a set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Extern Allowed At Program Level Only\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A procedure or function declaration, with an attached }{\f6\fs18 extern}{\fs20  directive, was found, and the procedure or function is not callable from the main program.  External subroutines can only be declared in the declaration section of the main program.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extern directive}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 External Variable Cannot Be Procedure Or Function\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the program declaration section of the source file, an identifier was used which was later declared as the name of a procedure or function.  For example, \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 program ex (wrong);}{\fs20  \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 procedure wrong;\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 F-Format For Real Only\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The output format for a variable or expression in a write statement has been specified using the }{\f6\fs18 :integer :integer}{\fs20  notation, but the variable or expression is not of type real.  For example, }{\f6\fs18 write(4:3:2)}{\fs20  would generate this error, since the value to be written (4) is an integer, and Pascal forbids the specification of the number of digits to be written for an integer value.  }{\f6\fs18 Write(4.0:3:2)}{\fs20  is legal, however, because the value to be written is a real number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 File Cannot Contain Another File}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A file variable has been declared with a type that contains another file variable.  Files cannot contain other files.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 File Comparison Not Allowed}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A comparison of two files was encountered.  This type of comparison is not allowed in Standard Pascal.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 File Value Parameter Not Allowed\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A file pointer variable was passed to a procedure or function as a value parameter.  Only file pointers which are var parameters may be passed to procedures or functions.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Forward Declared Function; Cannot Repeat Type\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A function has been declared with a forward directive attached to the declaration.  The same function has been encountered later in the block with the return type repeated.  The second appearance of the function should not include the return type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 Forward Declared; Repetition of Parameter List Not Allowed\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A procedure or function has been declared with a forward directive attached to the declaration.  The same procedure or function has been encountered later in the block with the parameter list repeated.  The second appearance of the procedure or function definition should not include the parameter list.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Forward Reference Not Resolved\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A procedure or function was declared with an attached forward directive, but the body of the procedure or function was never found.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 Function Result Type Must be Scalar, Subrange, or Pointer\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The type to be returned by a function was of an inappropriate type, such as a set or file.  For example, you cannot declare a function as \par \par }{\f6\fs18 function f: set of 1..10;}{\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 in Standard Pascal.\par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Further Errors Suppressed\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal reports a maximum of ten errors per line of source code.  All errors will be counted, however, and reflected in the total shown at the end of the compilation.  If more than ten errors are found in a single source line, this is the last error message shown for the line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Identifier Declared Twice\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An identifier has been used twice in the declaration section of a block.  Check the names you have given to types, variables, and constants in this block.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Identifier Expected\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an identifier, but found some other token.  This is generally caused by a typographical error. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Identifier Is Not Of Appropriate Class\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An identifier has been incorrectly given as the name of a type.  This can be caused by a typographical error when coding the identifier, or omitting the identifier in the type declaration section of a block.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Identifier Not Declared\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An identifier has been used in a statement without declaring the identifier in the declaration section of a block.  This can be caused by a typographical error when coding the identifier, failure to define a variable, or omission of a function or procedure declaration.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 uses statement}}}{\fs20 If this error occurs in a uses statement, the compiler is telling you that the uses statement uses a type that has not been defined.  This could occur, for example, if the segment you are including included another segment and used some definitions from that segment, then you use the segment without first using the other segments it needs.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Goto\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A goto statement was found which attempted to jump to a label defined within a structure.  Standard Pascal forbids branching to a label which is attached to a line contained within a statement of any kind.  For example, you cannot go to a label defined within a for loop, a begin/end block, or a case statement.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto statement}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Parameter Substitution\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A type conflict exists between the parameter(s) in a procedure or function call, and the type specified when the procedure or function was defined.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Symbol\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found a character that did not belong in the place it was found.  This can be caused by an invalid character anywhere in the source file, such as %, or a symbol used in the wrong context, such as an underscore by itself rather than as part of an identifier.  The error can also be issued if a string is improperly formed, or if you have coded an incorrect symbol as the operand of a directive, such as a -1 for a directive which expected either a + or a -.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Type Of Expression\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An expression has been used in a case or for statement which is not an ordinal type.  For example, }{\f6\fs18 case i of 3.4}{\fs20  or }{\f6\fs18 for k := 12.9}{\fs20 .  Ordinal types include char, boolean, integer, enumerations, and subranges.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Type Of Loop Control Variable\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The loop variable in a for loop was of the wrong type.  The loop variable must be an ordinal type:  boolean, integer, char, enumeration, or subrange.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 for statement}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Type Of Operand(s)\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An operation was encountered whose operand(s) were of the wrong type, such as }{\f6\fs18 real div integer}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Implementation' Expected\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the reserved word implementation, signaling the start of the implementation part of a unit, but encountered some other symbol.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Implementation Restriction\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal imposes the following restrictions on sizes of variables:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Variant records are limited to 32767 tags.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\fs20 \par 2.\tab Arrays cannot be larger than 64K bytes long.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays}}}{\fs20 \par 3.\tab Records cannot be larger than 64K bytes long.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 This error occurs when one of these limits is exceeded.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 Implementation Restriction: String Space Exhausted\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each program level procedure or function is limited to 8K of total string space.  String space is used by string constants and by debug code.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Incompatible Subrange Types\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The type of the first constant does not match the type of the second constant in a subrange declaration, such as }{\f6\fs18 true..4}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Incompatible With Tagfield Type\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The type of an expression in a case statement of a variant record definition does not match the type of the variable used as the selector.  For example:  }{\f6\fs18 case a: boolean of 4}{\fs20 .  The boolean value }{\f6\fs18 a}{\fs20  cannot be equal to }{\f6\fs18 4}{\fs20  \endash  it can only be either }{\f6\fs18 true}{\fs20  or }{\f6\fs18 false}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Index Type Is Not Compatible With Declaration\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 A subscript was applied to an array, and the subscript is not of the type defined for the array.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Index Type Must Be Scalar Or Subrange\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An array subscript has been used which is of the wrong type.  Index types for arrays must be ordinal types (integer, boolean, character, enumeration, or subrange) and cannot be of type longint.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Integer Constant Exceeds Range\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A constant integer was found which is outside of the range -maxint4..maxint4 (-2147483647 to 2147483647).}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integer constants}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Integer Expected\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an integer but encountered some other token.  This is generally caused by a typographical error when coding a subrange.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Interface' Expected\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the reserved word interface, signaling the start of the interface part of a unit, but encountered some other symbol.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Label Space Exhausted \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal places all of the labels (procedure and function names, user-defined type, variables, etc.) defined in any particular program-level procedure or function into one area known as the label table.  Generally, there is enough room in the label table for a single procedure or function that is approximately 2000 lines long.  When this error is received, you should break up the procedures and functions, or the main program itself if necessary, into smaller procedures and functions that can be called from the main program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Label Type Incompatible With Selecting Expression}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A case constant is of a different type than that used in the defining expression, as in }{\f6\fs18 case k of 'a':}{\fs20  where }{\f6\fs18 k}{\fs20  has been defined to be of type integer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Low Bound Exceeds High Bound\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The first constant is larger than the second constant in a subrange declaration.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Methods Must Be Declared at the Program Level\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Methods cannot be imbedded in other procedures or functions.  They can be declared at the program level of a program, or in the interface or implementation part of a unit.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Misplaced Directive\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A directive was used in a place or in a situation in which it was not valid.  See the description of the directive for details about how it can be used.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Missing Corresponding Variant Declaration\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A call to the standard procedures }{\f6\fs18 new}{\fs20  or }{\f6\fs18 dispose}{\fs20  has included a reference to an undefined variant field.  For example, }{\f6\fs18 new (p, V1, V2)}{\fs20 , where }{\f6\fs18 V2}{\fs20  is not a part of the record pointed to by the variable }{\f6\fs18 p}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Missing 'Input' In Program Heading\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A read, readln, eof, or eoln call has been issued which does not use a file variable as its first parameter, and the special file }{\f6\fs18 input}{\fs20  was not defined in the program heading of the source file.  If you intend for input to be entered from standard input, you must include the keyword }{\f6\fs18 input}{\fs20  in the program heading.  If }{\f6\fs18 input}{\fs20  does not appear in the program heading, you must code a file variable as the first parameter of a read, readln, eof or eoln call.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Missing 'Output' In Program Heading\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A write, writeln, or page call has been issued which does not use a file variable as its first parameter, and the special file output was not defined in the program heading of the source file.  If you intend for output to be sent to standard output, you must include the keyword output in the program heading.  If output does not appear in the program heading, you must code a file variable as the first parameter of a write, writeln, or page call.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Missing Result Type In Function Declaration\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A subroutine has been declared as a function, but the type of value returned by the function has been omitted from the declaration.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Multideclared Label\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The same label has been defined more than once in a label declaration statement.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Multidefined Case Label\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The same case label has been used more than once in the body of a case statement.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Multidefined Label\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 The same label has been used more than once in the body of a procedure or function.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Multidefined Record Variant\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The same variant field name has been used more than once within the case statement of a variant record declaration.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 No Assignment To Function Found\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 An assignment of a value to the function identifier was omitted from the body of the function.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 No Such Field In This Record\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A variable name was followed by a period, but the identifier after the period was not declared as being an element of the record named by the variable preceding the period.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Not A Known Object\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to define a method for an object class, but the object class has not been declared.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Not ISO Standard\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The iso+ directive has been coded, and an attempt to use an ORCA/Pascal extension has been made.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Number Expected\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a number but encountered some other token.  This is generally caused by a typographical error when coding a real or integer constant.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 Number Of Parameters Does Not Agree With Declaration}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A procedure or function has been called with a parameter list that is longer or shorter than the parameter list given when the procedure or function was declared.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Objects Cannot Have a Variant Part}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Unlike records, objects and classes cannot have a variant part, but a case statement which appears to start a variant part has been found in an object class declaration.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Objects Must Be Declared as a Named Type}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Object classes must be declared in a type statement at the program level, but an object class declaration was found on another context.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Object Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An object class declaration contains an opening parenthesis that appears to be the start of an inherited object sequence, but the next symbol is not an identifier.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Of' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword }{\f6\fs18 of }{\fs20 but did not see it.  Compilation continued as though }{\f6\fs18 of }{\fs20 had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6 Only Extern, Forward, ProDOS, Or Tool Allowed In Uses File\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A complete procedure or function was encountered within a uses file.  These types of files require that references to procedures or functions be declarations only; the body of a procedure or function cannot be included in a uses file.   The ORCA/Pascal directives which indicate that a subroutine is external to the file in which they are declared include extern,  ProDOS, Tool, UserTool and Vector.  The directive denoting that a subroutine body will be given later in the source file is forward.  The procedure or function headings included in a uses file must be declared as either extern, forward, Tool, UserTool, Vector or ProDOS.\par }\pard \qj\widctlpar\adjustright {\fs20  \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Only Tests Of Equality Allowed\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A comparison of two pointers was detected, and the comparison operator was neither = nor <>.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Parameter Size Must Be Constant\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The standard procedure new or dispose has been called with a parameter that should have been the name of a variant field, but instead has been coded as an expression, as in new (p,4).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Pointer Cannot Be Resolved\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A variable has been declared as a pointer to an identifier, but the identifier was not declared later in the same block.  For example, }{\f6\fs18 type fptr = ^foo}{\fs20  requires that an identifier called foo be declared later in the block.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Pointer References A File\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A pointer variable has been assigned the address of a file variable.  For example,}{\f6\fs18  fptr := ^foo;}{\fs20  where foo is a file variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Previous Declaration Was Not Forward\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A procedure or function has been declared twice, and the first declaration did not include a forward directive. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Program' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword program but did not see it.  Compilation continued as though program had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Quoted File Name Expected\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A copy directive, append directive, or a uses statement was given which did not include a file name.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 Result Type of Function Does Not Agree with Declaration\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The value assigned to a function is not of the same type as that specified when the function was defined.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Set Element Type Must Be Scalar Or Subrange\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 A set constant has been defined which contains an element of the wrong type, such as real.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Set Element Types Not Compatible\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 A set constant has been defined which contains elements of different types, such as }{\f6\fs18 [4,'a']}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Sign Not Allowed\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A plus or minus sign preceded a constant value which was not a real or integer value, or two sign symbols in a row were detected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Strict Inclusion Not Allowed\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A comparison of two sets was detected and the comparison operator was either < or >.  Set}{\f6\fs18  s1 <}{\fs20  set }{\f6\fs18 s2}{\fs20  implies that }{\f6\fs18 s1}{\fs20  is completely included in }{\f6\fs18 s2}{\fs20 ; this type of comparison is not allowed in Standard Pascal.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 String Constant Must Not Exceed Source Line\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A string constant has been found which continues for more than one line of source code.  This is usually caused be forgetting to close the string with an ending quote mark.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 String Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A compiler directive requires a string parameter, but either found some other symbol, or did not find any other symbols in the directive at all.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 String Space Exhausted\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Too many strings have been defined in any one procedure or function.  ORCA/Pascal limits the total amount of characters occupied by all strings in one procedure or function to 8000.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Subrange Bounds Must Be Scalar\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A subrange was found whose defining bounds were not of a scalar type.  In Pascal, a scalar type is synonymous with an ordinal type:  char, boolean, integer, enumeration or subrange.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Subrange Exceeded\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to assign a value outside of the defined bounds for a subrange variable.  For example, \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 i: [1..10];\par . . .\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 i := 11;\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 This error will only occur if the }{\f6\fs18 RangeCheck}{\fs20  directive has been enabled.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Tagfield Type Must Be Scalar Or Subrange\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The type of the variable used as the selector for a variant record is real, double, comp or extended.  Only selectors of type char, boolean, or integer may be used. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Then' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword }{\f6\fs18 then }{\fs20 but did not see it.  Compilation continued as though }{\f6\fs18 then }{\fs20 had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 There Is No Method to Inherit}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The inherited reserved word has been used in a method, but the identifier that followed was not the name of a method that was available to be inherited.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'To' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword }{\f6\fs18 to }{\fs20 but did not see it.  Compilation continued as though }{\f6\fs18 to }{\fs20 had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Too Many Nested Procedures And/Or Functions\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Pascal allows nesting of procedures and functions to a level of ten deep, counted from the main program level.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Too Many Nested Scopes Of Identifiers}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A with statement, defined at the program level, can have a maximum of 20 record identifiers.  One is subtracted from this maximum for each level of procedure or function nesting.  That is, if a with statement is used in a procedure that is nested five levels deep from the main program level, then the with can have a maximum of 15 record identifiers.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 with statement}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Conflict\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An expression has been given in a case or for statement that is not of the same type as the case constant  or for looping  variable.  For  example, }{\f6\fs18 case k of 3}{\fs20 , where }{\f6\fs18 k}{\fs20  is of type boolean, or }{\f6\fs18 for m := 1 to 5}{\fs20 , where }{\f6\fs18 m}{\fs20  is of type char.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Conflict Of Operands\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A binary operation is to be performed but the operands for the operation are of incompatible types, such as }{\f6\fs18 string <= 4}{\fs20 . \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Must Not Be Real}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A real constant was used in a declaration where real values are not permitted, such as in the range specification for a set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Of Operand Must Be Boolean\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 A not operator was found whose operand was not of type boolean.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Of Variable Is Not Array\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 A subscript was applied to a variable which has not been defined as an array.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Of Variable Is Not Record\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A variable name was encountered which was followed by a period, but the variable was not defined as being of type record.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Of Variable Must Be File Or Pointer\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Assignment to a variable immediately followed by a pointer symbol, as in }{\f6\fs18 f^ :=}{\fs20 , was detected, but the variable was not defined as being of type file or pointer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Type Of Variable Must Be Object\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An object class declaration contains an identifier in parenthesis, but the identifier is not an object, or it has never been declared.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Undeclared External Variable\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the program declaration section of the source file, an identifier was used which was never declared as a variable.  For example, }{\f6\fs18 program ex (wrong);}{\fs20  where wrong was not declared as a variable in the main program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Undeclared Label\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A label has been referenced in a goto statement, but the label was not defined in a label declaration statement, or a label has been coded in the body of a procedure or function but was not defined in a label declaration statement.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Undeclared Method\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to override or define a method, but the method was not declared in the object class.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Undefined Label\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A label was referenced in the declaration section of a block, but was never used in the statement portion of the block.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Unexpected End Of File\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The end of the source file was encountered before the end of the program was detected.  This usually indicates invalid construction of the main program.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 'Until' Expected}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the keyword }{\f6\fs18 until }{\fs20 but did not see it.  Compilation continued as though }{\f6\fs18 until }{\fs20 had been inserted into the source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Uses Allowed At Program Level Only\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A uses directive has been coded inside a procedure or function which is not callable from the main program.  This directive must occur in the main program block.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Wrong Number Of Selectors\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A variant record has been defined, but each of the possible values for the selector has not been listed.  Note that if you define a variant record such as\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var allNumbers:  record\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    case integer of\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 then you must list all of the possible  integers,  which,  under  ORCA/Pascal,  would  range  from \par -maxint to +maxint (-32767 to 32767).}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variant records}}}{\fs20 \par \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Zero String Not Allowed\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Strict conformance to the ISO standard has been requested with the iso+ directive, and an attempt to assign null to a string has been found.  Standard Pascal does not allow zero length strings. \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Terminal Compilation Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Terminal Compilation Errors\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 terminal errors}}}{\fs20 A terminal error encountered during compilation will abort the compile.  If you have compiled the program from the command line without using the -E switch, the compiler will enter the editor with the cursor on the offending line, and the error message will be displayed in the editor's information bar.  If you have used the -E flag, the compiler will abort to the shell.  If you compiled the program from an EXEC file, the default action is to display the error message and return to the shell.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Non-Pascal File Opened At An Inappropriate Time\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Somewhere before the end of the program a source file written in a language other than Pascal was opened by means of the }{\f6\fs18 append}{\fs20  directive.  If you are chaining to a source file written in another language, the }{\f6\fs18 append}{\fs20  directive should be placed after the end of the Pascal program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Not Enough Bank Zero Memory\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This error is usually caused by running a program prior to compilation of the current program, and the previous program has allocated a large amount of bank zero (direct page) memory without releasing it upon terminate.  You must reboot the system in order to clean up memory.  The error can also be caused by requesting more bank zero memory than is available.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Out Of Memory\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There is not enough memory to compile the program.  This can be caused by running programs which allocate memory and then fail to release it upon termination, or by lack of extended memory in your computer.  ORCA/Pascal compiler requires 1.25M of memory.  You can make more memory available by deallocating or reducing the size of any RAM disks you may have set up, and by temporarily removing disk caching programs and classic desk accessories.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 User Termination\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The user has entered the two-key abort command }{\outl\fs18 \u-3\'f0}{\b\fs18 .}{\fs18  }{\fs20 (hold down the open-Apple key and then type a period).  This does no harm to the program, it merely terminates compilation.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Linking Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Linking Errors\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Linker Error Levels}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Linker Error Levels\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error levels}}}{\fs20 For each error that the linker can recover from, there is an error level which gives an indication of the gravity of the error.  The table below lists the error levels and their meaning.  Each error description shows the error level in brackets, immediately following the message.  The highest error level found is printed at the end of the link edit.  Many of these errors can only result if your program is written in more than one language, such as a combination of Pascal and assembly language.  All linker errors are included here for completeness.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Severity\tab Meaning\par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 \par 2\tab Warning - things may be OK.\par 4\tab Error - an error was made, but the linker thinks it knows the programmer's intent and has corrected the mistake.  Check the result carefully!\par 8\tab Error - no correction is possible, but the linker knew how much space to leave.  A debugger can be used to fix the problem without recompiling.\par 16\tab Serious Error - it was not even possible to tell how much space to leave.  Recompiling and linking will be required to fix the problem.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Recoverable Linker Errors}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Recoverable Linker Errors\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 When the linker detects a nonfatal error, it prints\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 1.\tab The name of the segment that contained the error.\par 2.\tab How far into the segment (in bytes) the error point lies.\par 3.\tab A text error message, with the error-level number in brackets immediately to the right of the message.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Addressing Error}{\b\f6\fs20  [16]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A label could not be placed at the same location on pass 2 as it was on pass 1.\par This error is almost always accompanied by another error, which caused this one to occur; correcting the other error will correct this one.  If there is no accompanying error, check for disk errors by doing a full assembly and link.  If the error still occurs, report the problem as a bug.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Address Is Not In Current Bank}{\b\f6\fs20  [8]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The (most-significant-truncated) bytes of an expression did not evaluate to the value of the current location counter.\par For short-address forms (6502-compatible), the truncated address bytes must match the current location counter.  This restriction does not apply to long-form addresses (65816 native-mode addressing).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Address Is Not Zero Page}{\b\f6\fs20  [8]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The most significant bytes of the evaluated expression were not zero, but were required to be zero by the particular statement in which the expression was used.\par This error occurs only when the statement requires a direct page address operand (range = 0 to 255).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Alignment Factor Must Be A Power Of Two}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An alignment factor that was not a power of 2 was used in the source code.  In ORCA Assembly language, the ALIGN directive is used to set an alignment factor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6 Alignment Factor Must Not Exceed Segment Align Factor}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 An alignment factor specified inside the body of an object segment is greater than the alignment factor specified before the start of the segment.  For example, if the segment is aligned to a page boundary (ALIGN = 256), you cannot align a portion of the segment to a larger boundary (such as ALIGN = 1024).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Code Exceeds Code Bank Size}{\b\f6\fs20  [4]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The load segment is larger than one memory bank (64K bytes).  You have to divide your program into smaller load segments.  See the description of the segment statement and MemoryModel directive for ways to do this.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Data Area Not Found}{\b\f6\fs20  [2]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A USING directive was issued in a segment from the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  assembler, and the linker could not find a DATA segment with the given name.  Ensure that the proper libraries are included, or change the USING directive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Duplicate Label}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 A label was defined twice in the program.  Remove one of the definitions.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Expression Operand Is Not In Same Segment}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An expression in the operand of an instruction or directive includes labels that are defined in two different relocatable segments.  The linker cannot resolve the value of such an expression.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Evaluation Stack Overflow}{\b\f6\fs20  [8]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 1.  There may be a syntax error in the expression being evaluated.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Check to see if a syntax error has also occurred; if so, correct the problem that caused that error.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 2.  The expression may be too complex for the linker to evaluate.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Simplify the expression.  An expression would have to be extremely complex to overflow the linker\rquote s evaluation stack, particularly if the expression passed the assembler or compiler without error.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Expression Syntax Error}{\b\f6\fs20  [16]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The format of an expression in the object module being linked was incorrect.\par This error should occur only in the company of another error; correct that error and this one should be fixed automatically.  If there are no accompanying errors, check for disk errors by doing a full assembly and link.  If the error still occurs, report the problem as a bug.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Invalid Operation On Relocatable Expression}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ORCA linker can resolve only certain expressions that contain labels that refer to relocatable segments.  The following types of expressions }{\i\fs20 cannot}{\fs20  be used in an assembly-language operand involving one or more relocatable labels:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\widctlpar\outlinelevel0\adjustright {\fs20 A bit-by-bit NOT\par }\pard \qj\li360\widctlpar\adjustright {\fs20 A bit-by-bit OR\par A bit-by-bit EOR\par A bit-by-bit AND \par A logical NOT, OR, EOR, or AND \par Any comparison (<, >, <>, <=, >=, ==)\par Multiplication\par Division\par Integer remainder (MOD)\par }\pard \qj\widctlpar\adjustright {\fs20 \par The following types of expressions involving a bit-shift operation }{\i\fs20 cannot}{\fs20  be used:\par \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 The number of bytes by which to shift a value is a relocatable label.\par A relocatable label is shifted more than once.\par A relocatable label is shifted and then added to another value.\par You cannot use addition where both values being added are relocatable (you }{\i\fs20 can}{\fs20  add a constant to a relocatable value).\par You cannot subtract a relocatable value from a constant (you }{\i\fs20 can}{\fs20  subtract a constant from a relocatable value).\par You cannot subtract one relocatable value from another defined in a different segment (you }{\i\fs20 can}{\fs20  subtract two relocatable values defined in the same segment).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Only JSL Can Reference Dynamic Segment}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You referenced a dynamic segment in an instruction other than a JSL.  Only a JSL can be used to reference a dynamic segment.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 ORG Location Has Been Passed}{\b\f6\fs20  [16]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker encountered an ORG directive (created using the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  macro assembler) for a location it had already passed.\par Move the segment to an earlier position in the program.  This error applies only to absolute code, and should therefore be rarely encountered when writing for the Apple\~II}{\scaps\fs20 gs}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Relative Address Out Of Range}{\b\f6\fs20  [8]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The given destination address is too far from the current location.\par Change the addressing mode or move the destination code closer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Segment Header MEM Directive Not Allowed}{\b\f6\fs20  [16]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker does not support the MEM directive.  If you are trying to use the MEM directive, you have probably made a mistake.  MEM does not make sense in a relocatable load file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Segment Header ORG Not Allowed}{\b\f6\fs20  [16]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If there is no ORG (created using the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  macro assembler) specified at the beginning of the source code, you cannot include an ORG within the program.  The linker generates relocatable code unless it finds an ORG before the start of the first segment.  Once some relocatable code has been generated, the linker cannot accept an ORG. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6 Shift Operator Is Not Allowed On JSL To Dynamic Segment}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The operand to a JSL includes the label of a dynamic segment that is acted on by a bit-shift operator.  You probably typed the wrong character, or used the wrong label by mistake.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Undefined Opcode}{\b\f6\fs20  [16]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The linker encountered an instruction that it does not understand.  There are four possible reasons:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 1.\tab The linker is an older version than that required by the assembler or compiler; in this case, a Linker Version Mismatch error should have occurred also.  Update the linker.\par 2.\tab An assembly or compilation error caused the generation of a bad object module.  Check and remove all assembly/compilation errors.\par 3.\tab The object module file has been physically damaged.  Recompile to a fresh disk.\par 4.\tab There is a bug in the assembler, compiler or linker.  Please report the problem for correction.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Unresolved Reference}{\b\f6\fs20  [8]\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker could not find a segment referenced by a label in the program.\par If the label is listed in the global symbol table after the link, make sure the segment that references the label has issued a USING directive for the segment that contains the label.  Otherwise, correct the problem by: (1) removing the label reference, (2) defining it as a global label, or (3) defining it in a data segment.\par Multiple unresolved reference errors are generally caused by the libraries not being in the correct order.  Use the command\par \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs18 COMPRESS A C 2/\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 to properly order the libraries.  Commercial libraries supplied with compilers not developed by the Byte Works should not be included in the same library directory used by an ORCA language product.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Terminal Linker Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Terminal Linker Errors\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 terminal errors}}}{\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Could Not Open File }{\b\i\f6 filename}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 GS/OS could not open the file }{\i\fs20 filename}{\fs20 , which you specified in the command line.\par Check the spelling of the file name you specified.  Make sure the file is present on the disk and that the disk is not write-protected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Could Not Overwrite Existing File }{\b\i\f6 filename}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker is only allowed to replace an existing output file if the file type of the output file is one of the executable types.  It is not allowed to overwrite a TXT, SRC, or OBJ file, thus protecting the unaware user.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Could Not Write The Keep File }{\b\i\f6 filename}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A GS/OS error occurred while the linker was trying to write the output file }{\i\fs20 filename}{\fs20 .\par This error is usually caused by a full disk.  Otherwise, there may be a bad disk or disk drive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Dictionary File Could Not Be Opened\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The dictionary file is a temporary file on the work prefix that holds information destined for the load file\rquote s relocation dictionary.  For some reason, this file could not be opened.\par Use the SHOW PREFIX command to find out what the work prefix is.  Perhaps you have assigned the work prefix to a RAM disk, but do not have a RAM disk on line.  Have you removed the volume containing the work prefix from the disk drive?  Is the disk write-protected?\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Expression Recursion Level Exceeded\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 It is possible for an expression to be an expression itself; therefore, the expression evaluator in the linker is recursive.  Generally, this error occurs when the recursion nest level exceeds ten.  This should not happen very frequently.  If it does, check for expressions with circular definitions, or reduce the nesting of expressions.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 File Read Error\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An I/O error occurred when the linker tried to read a file that was already open.  This error should never occur.  There may be a problem with the disk drive or with the file.  You might have removed the disk before the link was complete.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 File Not Found }{\b\i\f6 filename}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file }{\i\fs20 filename}{\fs20  could not be found.\par Check the spelling of the file name in both the KEEP directive and the LINK command.  Make sure the .ROOT or .A file has the same prefix as the file specified in those commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Header Value\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker checks the segment headers in object files to make sure they make sense.  This error means that the linker has found a problem with a segment header.\par This error should not occur.  Your file may have been corrupted, or the assembler or compiler may have made an error.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Illegal Segment Structure\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There is something wrong with an object segment.\par This error should not occur.  Your file may have been corrupted, or the assembler or compiler may have made an error.  This can also be caused by a bad disk or bad memory chip.  Try changing to a different disk and recompiling.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Invalid File Name }{\b\i\f6 filename}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file }{\i\fs20 filename}{\fs20  does not adhere to GS/OS file naming conventions.\par Make sure the file name you supply on the command line is a valid one.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Invalid file type }{\b\i\f6 filename}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file }{\i\fs20 filename}{\fs20  is not an object file or library file.\par Check the shell command line to make sure you didn't list any files that are not object files or library files.  Check your disk directory to make sure there isn\rquote t a non-object file with the same root name as a file you are linking.  For example, if you are linking object files name MYFILE.ROOT and MYFILE.A, make sure there is no (unrelated) file on the disk with the name MYFILE.B.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Invalid Keep Type\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker can generate several kinds of output files.  The type of the output file must be one of the executable types.  Since it is possible to set the keep type with a shell variable, this error can occur from a command line call.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Linker Version Mismatch\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The object module format version of the object segment is more recent than the version of the linker you are using.\par Check with the Byte Works to get the latest version of ORCA.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Must Be An Object File }{\b\i\f6 filename}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\i\fs20 Filename}{\fs20  is not an object file or a library file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Object Module Read Error\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A GS/OS error occurred while the linker was trying to read from the currently opened object module.\par This error may occur after a nonfatal error; correcting the nonfatal errors may correct this one.  Otherwise, it may be caused by a bad disk or disk drive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Out Of Memory\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 All free memory has been used; the memory needed by the linker is not available.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Execution Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Execution Errors\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each of the following errors can be trapped by the built-in procedure SystemError.  The error numbers returned by SystemError are printed after the error message in the descriptions below.  Each error description explains the action that will be taken by the system.  You can use this to decide how to handle a particular error.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Subrange Exceeded  }{\b [1]}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A value has been assigned to a variable, and the value exceeds the bounds defined for the variable.  This error can generally be detected during compilation by enabling the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RangeCheck directive}}}{\fs20 RangeCheck directive.  For variables of type byte, the value was not within the range 0..255.  For boolean variables, the value was neither a 0 nor a 1.  For char variables, the value was not within 0..127.  This sort of error occurring for other types of variables will be flagged by different error messages.\par The results of the assignment, and thus whether execution should continue, depend upon the variable type.  If the variable is an element of a char or boolean array that is being indirectly accessed, as by assignment to a var parameter, the value will be stored into the least significant byte of the element.  If the array is being accessed directly, then an entire word will be stored into the element.\par Use of char or boolean values beyond their defined range will produce unpredictable results.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 File Is Not Open  [2]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A file operation has been coded, such as a }{\f6\fs18 read(filePointer)}{\fs20  or }{\f6\fs18 write(filePointer),}{\fs20  but the requested file has not been opened with an open, reset, or rewrite call, or has been closed with a }{\f6\fs18 close}{\fs20  call.  The action taken by the system is to not perform the operation; the file variable value is undefined.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Read While At End Of File  }{\b [3]}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file pointer attached to a particular file is pointing to the end-of-file marker.  The area pointed to by the input buffer pointer is unpredictable.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 I/O Error  }{\b [4]}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A ProDOS I/O error has been detected, such as disk full, write error, etc., or an illegal file operation has been coded.  The system ignores the operation.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Out Of Memory  }{\b [5]}{\b\f6 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An allocation of memory using the built-in procedure new was attempted, but no free memory is available.  The system will set the pointer to the memory to nil.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory management}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new procedure}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 EOLN While At End Of File}{\fs20   }{\b [6]}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In Pascal, input files always have an end-of-line marker preceding the end-of-file marker.  The program failed to check for EOF after detecting an EOLN.  If input is coming from a file, EOF will remain true.  If input is coming from the keyboard, EOF will be set to false.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Set Overflow}{\fs20   }{\b [7]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An operation on a set caused the set to exceed the size allocated to it.  All set overflows will be detected if range checking is enabled.  You should be aware that some set overflows will not be caught when range checking is off, however.  If a set occupies an exact amount of bytes, then an element out of range will always be detected.  If a set does not occupy an exact number of bytes, then the compiler may fail to find an illegal assignment with range checking off.  This could occur, for example, if the set had been defined as }{\f6\fs18 var s1: set of 0..10;}{\fs20  and then }{\f6\fs18 s1}{\fs20  was assigned an 11.  }{\f6\fs18 S1}{\fs20  occupies two bytes, and 11 falls within the bits marked for assignment to }{\f6\fs18 s1}{\fs20 .\par If you trap this error and return control to the executing program, the extra bytes in the set value are truncated.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Jump To Undefined Case Statement Label}{\fs20   }{\b [8]}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This error cannot be recovered from.  Your program can avoid this error by including an otherwise clause in the case statement.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case statement}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Integer Math Error}{\fs20  }{\b  [9]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An overflow has occurred as a result of an addition, subtraction, or multiplication, or an attempt has been made to divide by zero, in either a division or div operation.  The action taken by the system depends upon the operation, but the result is neither valid nor predictable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Real Math Error}{\fs20  }{\b  [10]}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An exception has been raised due to one of the following invalid conditions:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Addition or subtraction of values whose magnitudes are considered infinities.\par 2.\tab Multiplication by infinity.\par 3.\tab Division by zero, or division of infinity by infinity.\par 4.\tab Taking the square root of a negative value.\par 5.\tab Conversion of a real number to an integer value such that the real number is of a magnitude considered to be infinity.\par 6.\tab Comparison of two values, using the operators < or >, where one of the values is considered to be NaN (not a number).\par 7.\tab Any operation involving an NaN.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\outlinelevel0\adjustright {\fs20 The system returns NaN as the result of the operation.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Underflow}{\fs20   }{\b [11]}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A value is too close to zero to be represented in the accuracy of the underlying format.  The system returns a value of zero.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Overflow}{\fs20   }{\b [12]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A value is too large to be represented in the accuracy of the underlying format.  The system returns a value of infinity (INF).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Divide By Zero}{\fs20   }{\b [13]}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 An attempt has been made to divide by zero.  The system returns NaN (not a number).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Inexact}{\fs20  }{\b  [14]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to perform an otherwise legitimate trigonometric function, such as sin(x), with numbers of excessive magnitude.  The system returns its best guess at the true answer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Stack Overflow}{\fs20  }{\b  [15]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When range checking is enabled, code is generated to check to see if there is enough room on the stack to form a new stack frame when a procedure or function is called.  This error is flagged if there is not enough room.  The stack has not yet been damaged, so it is safe to simply exit the program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\outlinelevel0\adjustright {\b\f6 Stack Error}{\fs20  }{\b  [16]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\fs20 The stack has overflowed, overwriting memory that does not belong to your program.  This could cause crashes or other odd behavior.  The best course of action upon detecting this error is to call SysFailMgr in the Miscellaneous Tool Set to force a reboot.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix C:  Custom Installations\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Appendix C \endash  Custom Installations \par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Appendix C \endash  Custom Installations\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 system configuration}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 installing ORCA/Pascal}}}{\fs20 This appendix is designed to help you install ORCA/Pascal to take advantage of your specific hardware configuration.  As shipped, ORCA/Pascal is set up for people who have one or two 3.5 inch floppy disk drives and who want to use the desktop programming environment.  If that describes your system, you should make copies of the original disks, and use them just as they were shipped.  If you have a hard disk or prefer a text-based programming environment, you can use Apple's Installer program to create an ORCA/Pascal environment that suits your needs.  Finally, this appendix describes the principal files that make up the ORCA development environment and the Pascal compiler; by studying this section, you can learn why we configured ORCA/Pascal the way we did, and adjust the installation to suite your needs.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Installer Scripts}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Installer Scripts\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Apple's Installer can be used to create a floppy-disk based text programming environment or to install ORCA/Pascal on your hard disk, either as a separate language or in combination with other ORCA languages.  To run the installer, execute the Installer file from the ORCA/Pascal Extras disk.  There are several installer scripts listed in the window that appears; these are described below.  Select the one you want, select the disk that you want to install the program on from the right-hand list, and click on the Install button.\par Please note that with the current version of Apple's Installer, you will have to select the installation script before you can pick a folder from the right-hand list.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Low Memory}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Low Memory\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 small memory compiler}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This installation script should be used after one of the other scripts that installs ORCA/Pascal.  It installs a smaller version of the ORCA/Pascal compiler.  The smaller compiler ignores the optimize directive.  Individual subroutines are also limited to 16K rather than 64K.  The small memory compiler can be used when memory is tight, though, and should always be used if PRIZM is being used on any system with less than 1.75M.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b New System}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v New System\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This is the basic, all-purpose installation script.  It installs the full ORCA/Pascal system, including the desktop development system, the text based editor, and all of the interface files and help files that you don't have enough room for from a floppy-disk based system.  You will need a hard disk to install the full ORCA/Pascal system.  In addition, you should have at least 1.75M of memory; if not, see the "Low Memory" script, described below.\par If you run a lot of software, you probably boot into the Finder or some other program launcher.  In that case, you should probably install ORCA/Pascal in a folder that is not at the root level of your hard disk.\par If you plan to use your computer primarily for programming, you can set things up so you boot directly into ORCA/Pascal.  To do that, start by installing Apple's system disk without a Finder.  (Apple's installer, shipped on their system disk and available free from your local Apple dealer, has an installation option to install the system with no Finder.)  Next, install ORCA/Pascal at the root level of your boot volume, making sure that ORCA.Sys16 is the first system file on the boot disk.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SYS}}}{\fs20 System files are those files with a file type of S16 that end with the characters ".Sys16", as well as the files with a file type of SYS that end in the characters ".SYSTEM".\par See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries," below.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b New Text System}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v New Text System\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This script is ideal if you plan to do "standard" Pascal programming, and prefer a UNIX-like text environment.  The text system is small enough to fit on a single 800K floppy disk, although you can install it on a hard disk as well.  The desktop development system is not installed.  Tool header files are not installed, but you can copy any you plan to use manually.  You can use any copy program to copy the interface files, which are located in the folder "Libraries/ORCAPascalDefs" on the ORCA.Pascal disk and the Extras disk.  Copy any of them that you want to the same folder wherever you installed ORCA/Pascal.\par If you run a lot of software, you probably boot into the Finder or some other program launcher.  In that case, you should probably install ORCA/Pascal in a folder that is not at the root level of your hard disk.\par If you plan to use your computer primarily for programming, you can set things up so you boot directly into ORCA/Pascal.  To do that, start by installing Apple's system disk without a Finder.  (Apple's installer, shipped on their system disk and available free from your local Apple dealer, has an installation option to install the system with no Finder.)  Next, install ORCA/Pascal at the root level of your boot volume, making sure that ORCA.Sys16 is the first system file on the boot disk.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SYS}}}{\fs20 System files are those files with a file type of S16 that end with the characters ".Sys16", as well as the files with a file type of SYS that end in the characters ".SYSTEM".\par See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries," below.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b ORCA Icons}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ORCA Icons\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you use Apple's Finder as a program launcher, be sure and install the ORCA Icons.  ORCA itself will show up as a whale, while the various source files, object files, and utilities will be displayed with distinctive icons.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ORCA Pascal, C, Asm Libraries}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ORCA Pascal, C, Asm Libraries\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you are using ORCA/Pascal with the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  macro assembler, installing ORCA/Pascal gives you all of the libraries you need.\par If you are using ORCA/C and ORCA/Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal}}}{\fs20  together on the same system, you must have a total of four library files in your library folder, and they must appear in the correct order.  If you are missing any of the libraries, or if they are in the wrong order, you will get linker errors with either C, Pascal, or possibly with both languages.  This installer script installs the libraries for C, Pascal, and assembly language in the correct order.  (The libraries used by the assembler are also used by C and Pascal, so you get them anytime you use C or Pascal.)  You can use this installer script before or after any of the other scripts.\par You should not use this script unless you are installing C and Pascal together.  Installing the Pascal libraries takes up a little more room on your disk; slows link times a little, since the linker has to scan an extra library; and uses up a little extra memory, since the library header is loaded by the linker.\par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Update System}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Update System\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This script will update an old Pascal system or add Pascal to an existing ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  or ORCA/Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal}}}{\fs20  system.  All of the executable files from the Pascal disk are copied to your old system, but the LOGIN file, SYSCMND file, SYSEMAC file, SYSTABS file and SYSHELP file are not updated, since all of these may have been customized in your old system.  Of course, if you are installing Pascal into an existing system that does not already have Pascal, you will need to add the Pascal language to your SYSCMND file.  If you are installing Pascal in an existing Pascal system, be sure and follow up this step with the "ORCA Pascal, C, Asm Libraries" script, described above.\par This installation option should not be used to update a Pascal 1.0 system to Pascal 2.0.  It can be used to update any 2.0 level ORCA installation, but you should install ORCA/Pascal in a new folder if your current version is prior to 2.0.\par See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries."\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright {\b Update Text System}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \outlinelevel0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Update Text System\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This script will update an old Pascal system or add Pascal to an existing ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  or ORCA/Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal}}}{\fs20  system.  This script does not install or update the PRIZM desktop development system, nor does it install the interface files for the Apple\~II}{\fs18 GS}{\fs20  toolbox, ProDOS, GS/OS or the ORCA shell.  All of the executable files except those used only for the PRIZM desktop development system are copied to your old system, but the LOGIN file, SYSCMND file, SYSEMAC file, SYSTABS file and SYSHELP file are not updated, since all of these may have been customized in your old system.  Of course, if you are installing Pascal into an existing system that does not already have Pascal, you will need to add the Pascal language to your SYSCMND file.  If you are installing Pascal in an existing Pascal system, be sure and follow up this step with the "ORCA Pascal, C, Asm Libraries" script, described above.\par While the interface files are not installed, you can copy any of them that you would like to use after updating the basic text system.  You can use any copy program to copy the headers, which are located in the folder "Libraries/ORCAPascalDefs" on the ORCA.Pascal disk and the Extras disk.  Copy any of them that you want to the same folder wherever you installed ORCA/Pascal.\par This installation option should not be used to update a Pascal 1.0 system to Pascal 2.0.  It can be used to update any 2.0 level ORCA installation, but you should install ORCA/Pascal in a new folder if your current version is prior to 2.0.\par See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries."\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Update Text System, No Editor}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Update Text System, No Editor\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This installation script is basically the same as the "Update Text System" script, described above, but it doesn't install the text editor.  It may seem silly at first to install a text system with no text editor, but there are a number of text-based editors available from third party sources; this installation option installs Pascal without removing your existing text editor.\par See also "ORCA Icons" and "ORCA Pascal, C, Asm Libraries."\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 RAM Disks}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 RAM Disks\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 RAM disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM disks}}}{\fs20  come in a variety of sizes and flavors.  One of the most common is a RAM disk allocated from the control panel of your computer.\par \par }\pard \fi-1800\li1800\ri720\widctlpar\tx440\adjustright {\outl\f20\fs20 \u-3981\'73}{\b\fs20 \tab Important}{\fs20 \tab We do not recommend using a RAM disk of this kind unless you have only one 3.5" floppy disk, and then we recommend keeping it small and using it only for temporary storage.\~\~}{\outl\f20\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par These RAM disks are allocated from the memory of your computer.  ORCA/Pascal can make very effective use of that memory if you let it \endash  the system will perform better than if you try to copy parts of ORCA to your RAM disk.  In addition, RAM disks allocated from main memory are easy to destroy from a program that is accidentally writing to memory that it has not allocated.  While this is unusual in commercial programs, you may find that your own programs do this frequently during the development cycle.  RAM disks that are not allocated from main memory, like Apple's "Slinky" RAM disk, are good for work space and even source code.  The so-called ROM disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ROM disks}}}{\fs20 , or battery-backed RAM disks, should be treated as small hard disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hard disks}}}{\fs20 .  See the sections on installing ORCA/Pascal on a hard disk for effective ways of using ROM disks.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Details About Configuration}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Details About Configuration\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 system configuration}}}{\fs20 In this section, we will explore why ORCA/Pascal is configured the way it is by looking at what happens when you run ORCA/Pascal, when ORCA looks for files, and where it looks for files.  The material in this section is advanced information for experienced programmers.  You do not need to understand this material for beginning and intermediate programming, and the entire section can safely be skipped.\par }{\v\fs20 .Sys16;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA.Sys16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 Whether you are using the text or desktop programming system, you always start ORCA/Pascal by running the ORCA.Sys16 file.  This file contains the UNIX-like text based shell.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSCMND file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell\:command table}}}{\fs20 The first thing the shell does after starting is to look for a folder called Shell; this folder must be in the same location as the ORCA.Sys16 file.  Inside this folder, the shell looks for an ASCII file (it can be stamped as a ProDOS TXT file or an ORCA SRC file) with the name SYSCMND; this is the command table.  It is loaded one time, and never examined again.  The shell must get at least this far, successfully loading the SYSCMND table, or it will stop with a system error.\par The next step taken by the shell is to set up the default prefixes.  Prefix 8 is not changed if it has already been set by the program launcher, but the shell will set it to the same prefix as prefix 9 if prefix 8 is initially empty.  The remaining prefixes default to prefix 9 plus some subdirectory, as show in the table below.\par \par }\pard \qj\li1260\ri4320\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 prefix\tab set to\par }\pard \qj\li1260\ri4320\keepn\widctlpar\adjustright {\f6\fs18 13\tab 9:libraries\par 14\tab 9\par 15\tab 9:system\par 16\tab 9:languages\par }\pard \qj\li1260\ri4320\widctlpar\adjustright {\f6\fs18 17\tab 9:utilities\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scripts}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 alias command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRIZM}}}{\fs20 The last step taken by the shell is to look in prefix 15 for a script file named LOGIN.  To qualify, this file must have a file type of SRC, and a language stamp of EXEC.  If the shell does not find a valid LOGIN file, it simply moves on; in other words, you can leave out the LOGIN file if you choose.  Typically, this script file is used to set up custom aliases, set up shell variables, change the default prefixes listed above to other locations, and to execute PRIZM, the desktop development system.  One thing this shows is that, as far as ORCA is concerned, the PRIZM desktop development system is actually nothing more than an application that you run from within the shell.  Systems that default to the desktop programming environment do so by running PRIZM from within the LOGIN script, so PRIZM is executed as part of the boot process.\par After executing the LOGIN script, the shell writes a # character to the screen and waits for further commands.  If course, if PRIZM is executed from the LOGIN file, the shell never gets a chance to do this until you quit from PRIZM.\par Prefixes 13 to 17 are initialized by the shell, but you can change them to point to other folders if you prefer.  To understand how these prefixes are used, we'll look at the programs that currently use them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDIT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSEMAC file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSHELP file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20 When you use the EDIT command, the shell attempts to run a program named EDITOR; it expects to find an EXE file with this name in prefix 15 (the "Shell" prefix).  If the shell does not find an EXE file with the name EDITOR in prefix 15, it writes the message "ProDOS: File not found" and returns to the # prompt.  The ORCA editor uses prefix 15 to locate the SYSTABS file (to set up the tab line), the SYSEMAC file (to set up the default editor macros), and the SYSHELP file (to write the editor help screen).  The editor can function perfectly well without any of these files, although you will get a warning message each time you load a file if there is no SYSTABS file.  When you cut, copy or paste text, the editor reads or writes a file called SYSTEMP to prefix 14; obviously, the editor will perform a lot faster on these operations if prefix 14 is set to point to a RAM disk.\par A few other programs look at the SYSTABS file in prefix 15; PRIZM is another good example.  No other use is currently made of prefix 15.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes}}}{\fs20 Prefix 14, which the editor uses as a work prefix, is also used by the shell when you pipe output from one program to become input to another program.  The shell handles piping by creating a temporary file to hold the output of one program, reading this file as standard input for the next program.  These pipe files are called SYSPIPE0, SYSPIPE1, and so forth, depending on how many pipes were used on a single command line.\par When you use any of the commands to compile or link a program, the shell looks in prefix 16 for the compiler, assembler, or linker.  For example, if you compile a Pascal source file, the shall takes a look at the auxtype field for the file, which will have a value of 5.  The shell then scans its internal copy of the SYSCMND file looking for a language with a number of 5, and finds one with a name of PASCAL.  The shell then loads and executes the file 16:PASCAL; if it does not find such a file, it flags a language not available error.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 uses statement}}}{\fs20 Compilers and linkers make heavy use of prefix 13, which is not actually used by the shell.  Prefix 13, the library prefix, is where the Pascal compiler looks for interface files.  When you code a uses statement like this one:\par \par }{\f6\fs18 uses QuickDrawII;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the Pascal compiler appends this file name to the prefix 13:ORCAPascalDefs, giving a full path name for the file of 13:ORCAPascalDefs:QuickDrawII.int.  The ORCA/C}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/C}}}{\fs20  compiler does something similar, but it uses 13:ORCACDefs.  A convention has also gradually developed to put assembler macros and equate files in a folder called AInclude or ORCAInclude inside the library folder, although the assembler and MACGEN utility don't automatically scan this folder.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\fs20 The linker also uses the library folder.  When you link a program, especially one written in a high-level language, the program almost always needs a few subroutines from a standard library.  The linker recognizes this automatically, and scans prefix 13 looking for library files.  The linker ignores any folders or other non-library files it might find.  When the linker finds a library file, it opens it, scans the files in the library to resolve any subroutines, closes the file, and moves on.  The linker never goes back to rescan a library, which is why it is important for the libraries to be in the correct order.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 utilities}}}{\fs20 Prefix 17 is the utility prefix.  When you type a command from the shell, the shell checks to see if it is in the command table.  If so, and if the file is a utility, the shell appends the name to 17: and executes the resulting file.  For example, when you run the MAKELIB utility to create your own Pascal library, the shell actually executes the file 17:MAKELIB, giving a file not found error if there is no such file.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SYS}}}{\fs20 Utilities are not limited to EXE type files; you can make an SYS file, S16 file, or script file a utility, too.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command}}}{\fs20 Prefix 17 is also used by the help command.  When you type HELP with no parameters, the help command dumps the command names from the SYSCMND table.  When you type HELP with some parameter, like\par \par }{\f6\fs18 help catalog\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the help command looks for a text (TXT) or source (SRC) file named 17:HELP:CATALOG, typing the file if it is found.  In other words, you can use the help command to type any standard file, as long as you put that file in the HELP folder inside of the utilities folder.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 All of the files that were not mentioned in this section can be placed absolutely anywhere you want to put them \endash  since none of the ORCA software looks for the files in a specific location, you have to tell the system where they are anyway.  It might as well be a location you can remember, so pick one that makes sense to you.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Finder}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory model}}}{\fs20 All of this information can be put to use for a variety of purposes.  For example, by installing the Finder, BASIC.SYSTEM, and any other programs you use regularly as utilities under ORCA, you can boot directly into ORCA's text environment (which takes less time than booting into the Finder) and use ORCA as a program launcher.  You can also split the ORCA system across several 3.5" floppy disks by moving, say, the libraries folder to the second disk, setting prefix 13 to point to the new disk from within your LOGIN file.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix D:  Run-Time License\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Appendix D \endash  Run-Time License \par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Appendix D \endash  Run-Time License\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Any program written with ORCA/Pascal has some of Pascal's run-time libraries linked into the executable program.  These libraries are copyrighted by the Byte Works.  While we feel you should be able to use these libraries free of charge for any program you write, commercial or not, there are also a few legal requirements that must be met so we can protect our copyright.\par On any program written with ORCA/Pascal, you must include a copyright statement stating that the program contains copyrighted libraries from the ORCA/Pascal run-time library.  This copyright must appear in a prominent place.  If the program has any other copyright statement, the ORCA/Pascal copyright statement must appear in the same location.  The text that must be included is:\par \par }\pard \widctlpar\outlinelevel0\adjustright {\fs20 \tab This program contains material from the ORCA/Pascal\par }\pard \widctlpar\adjustright {\fs20 \tab Run-Time Libraries, copyright 1987-1993\par \tab by Byte Works, Inc.  Used with permission.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix E:  Console Control Codes\par }}\pard\plain \widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Appendix E \endash  Console Control Codes \par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Appendix E \endash  Console Control Codes\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text programming}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text screen}}}{\fs20 When you are writing programs that will be executed in a text environment, you can use a number of special console control codes.  These are special characters which cause the console to take some action, like moving the cursor or turning the cursor off.  This appendix gives a list of the most commonly used console control codes for the GS/OS .CONSOLE driver; this is the default text output device used by ORCA/Pascal for stand-alone text programs and for programs executed under the text shell.\par If you send output to some output device other than the GS/OS .CONSOLE driver that ORCA/Pascal 2.0 uses as the default output device, some of these control codes may not be respected, and others may be available.  In general, very few console control codes are recognized when output is sent to a graphics device or printer.\par For a complete list of the console control codes supported by the GS/OS .CONSOLE driver, see }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  GS/OS Reference}{\fs20 , pages 242-245.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Beep the Speaker}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Beep the Speaker\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\fs20 Writing chr(7) to the screen beeps the speaker.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Beep;\par \par \{ Beep the speaker                                             \}\par \par begin \{Beep\}\par write(chr(7));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Beep\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Cursor Control}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Cursor Control\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are several control codes that move the cursor.  Chr(8) moves the cursor one column to the left.  If the cursor starts in column 0 (the leftmost column), it is moved to column 79 (the rightmost column) of the line above.  If the cursor starts in column 0 of row 0 (the top row), it is moved to column 79 of row 0.\par Chr(10) moves the cursor down one line.  If the cursor starts on line 23 (the bottom line on the screen), the screen scrolls up one line and the cursor stays in the same relative position.\par Chr(28) moves the cursor right one column.  If the cursor starts in column 79, it is moved to column 0 of the same line.  This curious behavior is worth noting:  you would normally expect that the cursor would move to column 0 of the }{\i\fs20 next}{\fs20  line, not the current line, especially when the action of chr(8) is taken into account.\par Chr(31) moves the cursor up one line.  If the cursor starts on line 0, nothing happens.\par Chr(25) moves the cursor to line 0, column 0, which is the top left character on the screen.  It does not clear the screen; it simply moves the cursor.  Chr(12) also moves the cursor to the top left of the screen, but is also clears the screen to all blanks.  Note that writing chr(12) is equivalent to using the Standard Pascal procedure Page.  In fact, the Page procedure writes chr(12) to the output device.\par Chr(13) moves the cursor to the start of the current line.\par Chr(30) is the only control code that requires more than one character.  This character starts a cursor movement sequence which depends on the two characters that follow.  Using this character code, the cursor can be positioned to any column and row on the screen.  The first character after the chr(30) is used to position the cursor in a particular column.  The column number is computed by subtracting 32 from the ordinal value of the character written.  The next character determines the row, also by subtracting 32 from the ordinal value of the character.  For example, \par \par }{\f6\fs18 write(chr(30), chr(10+32), chr(5+32));\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would move the cursor to column 10, row 5.  Columns and rows both start with number 0, so that the upper-left screen position is at row 0, column 0, and the lower-right screen position is at row 23, column 79.  See the GotoXY procedure, below, for a convenient way of using this feature.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure FormFeed;\par \par \{ Move the cursor to the top left of the screen and clear the  \}\par \{ screen                                                       \}\par \par begin \{FormFeed\}\par write(chr(12));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{FormFeed\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure GotoXY (x, y: integer);\par \par \{ Move the cursor to column x, row y                           \}\par \par begin \{GotoXY\}\par write(chr(30), chr(x+32), chr(y+32));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{GotoXY\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Home;\par \par \{ Move the cursor to the top left of the screen                \}\par \par begin \{Home\}\par write(chr(25));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Home\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure MoveDown;\par \par \{ Move the cursor down                                         \}\par \par begin \{MoveDown\}\par write(chr(10));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{MoveDown\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure MoveLeft;\par \par \{ Move the cursor to the left                                  \}\par \par begin \{MoveLeft\}\par write(chr(8));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{MoveLeft\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure MoveRight;\par \par \{ Move the cursor to the right                                 \}\par \par begin \{MoveRight\}\par write(chr(28));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{MoveRight\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure MoveUp;\par \par \{ Move the cursor up one line                                  \}\par \par begin \{MoveUp\}\par write(chr(31));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{MoveUp\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Return;\par \par \{ Move the cursor to the start of the current line             \}\par \par begin \{Return\}\par write(chr(13));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Return\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Clearing the Screen}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Clearing the Screen\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the last section, we looked at chr(12), which clears the screen and moves the cursor to the top-left of the screen.  There are two other control codes that can clear parts of the screen.  Chr(11) clears the screen from the cursor position to the end of the screen, filling the cleared area with blanks.  Chr(29) is still more selective.  It clears the screen from the current character position to the end of the line.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure ClearToEOL;\par \par \{ Clear to the end of the current line                         \}\par \par begin \{ClearToEOL\}\par write(chr(29));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{ClearToEOL\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure ClearToEOS;\par \par \{ Clear to the end of the screen                               \}\par \par begin \{ClearToEOS\}\par write(chr(11));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{ClearToEOS\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright {\b\fs28 Inverse Characters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \outlinelevel0\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Inverse Characters\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Text normally shows up on the text screen as white characters on a black background.  Writing chr(15) causes any future characters to be written as black characters on a white background.  Chr(14) reverses the effect, writing white characters on a black background.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Inverse;\par \par \{ Write all future characters in inverse                       \}\par \par begin \{Inverse\}\par write(chr(15));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Inverse\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure Normal;\par \par \{ Write future characters in normal mode (white on black)      \}\par \par begin \{Normal\}\par write(chr(14));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{Normal\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 MouseText}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 MouseText\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Apple\~II}{\fs18 GS}{\fs20  text screen has a set of graphics characters called MouseText characters.  The name comes from the primary purpose for the characters, which is to implement text-based desktop environments for use with a mouse, like the text version of Apple Works.  You need to do two things to enable MouseText characters: enable MouseText, and switch to inverse characters.  After taking these steps, any of the characters from '@' to '_' in the ASCII character set will show up as one of the graphics characters from the MouseText character set.  Chr(27) turns MouseText on, while chr(24) turns it off.\par You need to be sure and turn MouseText off if you turn it on \endash  the ORCA shell expects to me in normal mode when your program is finished.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure MouseTextOn;\par \par \{ Turn mousetext on                                            \}\par \par begin \{MouseTextOn\}\par write(chr(27));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{MouseTextOn\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 procedure MouseTextOff;\par \par \{ Turn mousetext off                                           \}\par \par begin \{MouseTextOff\}\par write(chr(24));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 end; \{MouseTextOff\}\par }{\fs20 \par The best way to see the MouseText characters and to see which key each graphics character is associated with is with a short program.  The example below assumes that you have typed in the inverse, normal, mousetexton and mousetextoff functions from this appendix; you need to put them right after the program statement.\par \par }{\f6\fs18 program MouseText(output);\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    ch: char\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 begin\par for ch := '@' to '`' do\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    write(ch, ' ');\par writeln;\par writeln;\par MouseTextOn;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 for ch := '@' to '`' do begin\par    Inverse;\par    write(ch);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    Normal;\par    write(' ');\par    end;\par MouseTextOff;\par writeln;\par end.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\cols2\colsx140\endnhere\titlepg\sectdefaultcl \pard\plain \qj\keepn\widctlpar\adjustright \f4\cgrid {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Index\tcl1}}}{\v\fs20 \par }\pard \fi-360\li360\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Special Characters\par }\pard \fi-360\li360\keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 ~ operator 230, 294, 298, 365\par ! operator 230, 293, 298, 365\par & operator 230, 293, 298, 365\par * operator 292, 294, 296, 298\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 274, 288, 316\par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 ** operator 292, 294, 298, 366\par }\pard \s29\widctlpar\adjustright {\fs20 + operator 292, 293, 294, 296, 298\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 274, 288\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 - operator 292, 293, 294, 295, 296, 298\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 320\par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 / operator 292, 294, 298\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 274\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 68881 chip 348\par < operator 239, 293, 295, 298\par << operator 230, 293, 298, 365\par <= operator 293, 295, 296, 298\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 288\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 <> operator 293, 295, 296, 298\par = operator 293, 295, 296, 298\par > operator 293, 295, 298\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 320\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 >= operator 293, 295, 296, 298\par >> operator 230, 293, 298, 365\par @ operator 230, 243, 297, 298, 366\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 243, 275\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 \{0\} shell variable }{\b\fs20 110}{\fs20 \par \{1\}, \{2\}, ... shell variables }{\b\fs20 110}{\fs20 \par \{AuxType\} shell variable }{\b\fs20 111}{\fs20 , 149\par \{CaseSensitive\} shell variable }{\b\fs20 110}{\fs20 \par \{Command\} shell variable }{\b\fs20 110}{\fs20 \par \{Echo\} shell variable }{\b\fs20 110}{\fs20 \par \{Exit\} shell variable }{\b\fs20 111}{\fs20 , 156\par \{Exit\} variable 160\par \{Insert\} shell variable }{\b\fs20 111}{\fs20 \par \{KeepName\} shell variable }{\b\fs20 111}{\fs20 , 126\par \{KeepType\} shell variable }{\b\fs20 112}{\fs20 , 149\par \{Libraries\} shell variable }{\b\fs20 112}{\fs20 \par \{LinkName\} shell variable }{\b\fs20 112}{\fs20 , 156\par \{Parameters\} shell variable }{\b\fs20 112}{\fs20 \par \{Prompt\} shell variable }{\b\fs20 112}{\fs20 \par \{Separator\} shell variable }{\b\fs20 112}{\fs20 \par \{Status\} shell variable }{\b\fs20 113}{\fs20 , 147, 156, 160\par | operator 230, 293, 298, 365\par }\pard \s29\keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 A\par }\pard \s29\keepn\widctlpar\adjustright {\fs20 \par }\pard \s29\widctlpar\adjustright {\fs20 abort command 125\par abs function }{\b\fs20 305}{\fs20 \par ALIAS command 119, }{\b\fs20 122}{\fs20 , 167, 403\par alphabetizing directories 134\par alternate symbols 230\par and operator 296, 298\par ANSI Pascal 361\par append directive 124, 345\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 43, 45\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 appending to the end of a file }{\b\fs20 114}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 Apple\~II}{\fs18 GS}{\fs20  Toolbox 20, 22, 29, 314, 336, 339, 341, 346, 358\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 interface files }{\b\fs20 32}{\fs20 , 262, 277\par learning 4, }{\b\fs20 31}{\fs20 \par reference manuals 4, 5\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 apple menu 35\par AppleShare 154\par APW 1, 63\par APW C 133\par arccos function }{\b\fs20 305}{\fs20 \par arcsin function }{\b\fs20 306}{\fs20 \par arctan function }{\b\fs20 306}{\fs20 \par arctan2 function }{\b\fs20 306}{\fs20 \par arrays 235, }{\b\fs20 241}{\fs20 , 297, 323, 340, 378\par arrow keys }{\b\fs20 69}{\fs20 \par ASCII character set 108, 110, 161, 237, 362\par ASM6502 language 103\par ASM65816 command }{\b\fs20 123}{\fs20 \par ASM65816 language 102\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 ASML command 108, 111, 112, }{\b\fs20 124}{\fs20 , 127, 156, 163\par }\pard \s29\widctlpar\adjustright {\fs20 ASMLG command 111, 112, 124, 156, 163\par ASSEMBLE command 124, 158\par assembly language 5, 43-51, 53, 235, 276\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 accessing global variables 50\par calling Pascal procedures and functions 51\par direct page 47, 49\par passing parameters 46-50\par returning function values 45\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 assigning structured types 282\par assignment statement }{\b\fs20 281}{\fs20 , 282\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 type compatibility 282\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 auto indent command }{\b\fs20 83}{\fs20 \par auto save command }{\b\fs20 84}{\fs20 \par auto-go command 12, }{\b\fs20 94}{\fs20 \par auxiliary file type 111, 131, 149\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 B\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 backing up the disks 7\par bank relative programs 154\par BASIC 86\par begin 284\par blocks 130, 131, 259, 263, }{\b\fs20 279}{\fs20 \par booleans }{\b\fs20 237}{\fs20 , 296, 322, 343, 363\par boot prefix 104\par booting ORCA/Pascal 2\par }\pard\plain \s28\widctlpar\adjustright \f4\cgrid {\fs20 branching, EXEC files 109\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 BREAK command }{\b\fs20 128}{\fs20 , 156\par break points 10, 13, 93\par built-in functions 27, 367, 371\par built-in procedures 27, 367\par bytes 235, 283, 292, 293, 299, 363, 365\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 C\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 C 69, 81, 83, 86, 103\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also ORCA/C \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 cancel button 90\par case sensitivity 182, 229, 233\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 shell 110, 111, 113\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 case statement 230, }{\b\fs20 283}{\fs20 , 397\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 CATALOG command 102, 113, 119, }{\b\fs20 128}{\fs20 , }{\b\fs20 129}{\fs20 , 134, 142, 149, 165\par }\pard \s29\widctlpar\adjustright {\fs20 CC command }{\b\fs20 132}{\fs20 \par CDA 38, 346\par cdev directive 42, }{\b\fs20 345}{\fs20 \par CHANGE command }{\b\fs20 132}{\fs20 , 144\par char variables 362\par characters }{\b\fs20 237}{\fs20 , 282, 295, 299, 300, 322, 343\par check for errors command 86\par chr function 300, }{\b\fs20 307}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 273, 307, 320\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 classic desk accessories 38, 39, 40, 89, 346\par ClassicDesk directive 38, }{\b\fs20 346}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 39\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 clear command 66, 69, }{\b\fs20 75}{\fs20 \par Clone method 257\par close command }{\b\fs20 72}{\fs20 \par close procedure }{\b\fs20 307}{\fs20 \par CMPL command 108, 124, }{\b\fs20 132}{\fs20 , 156\par CMPLG command 108, 124, }{\b\fs20 133}{\fs20 , 156\par cnvds function }{\b\fs20 308}{\fs20 \par cnvis function }{\b\fs20 309}{\fs20 \par cnvrs function }{\b\fs20 309}{\fs20 \par cnvsd function }{\b\fs20 310}{\fs20 \par cnvsi function }{\b\fs20 310}{\fs20 \par cnvsl function }{\b\fs20 310}{\fs20 \par cnvsr function }{\b\fs20 311}{\fs20 \par code segment 126, 158\par command line 102, 109, 111, 114, 147, 163\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 prompt 112\par reading 63\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 command list 152\par command table }{\b\fs20 119}{\fs20 , 133, 151\par CommandLine procedure 63, }{\b\fs20 308}{\fs20 \par COMMANDS command 99, 119, }{\b\fs20 133}{\fs20 \par COMMENT command 113, }{\b\fs20 168}{\fs20 \par comments 233, 345\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 EXEC files 113\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 comp 283, 299, 300, 344, 363, 365\par COMPACT command }{\b\fs20 133}{\fs20 \par compaction 155\par comparisons 292\par compilation errors 9, 369\par compile command 11, 60, 86, 108, 124, 134\par Compile to Disk command 44, }{\b\fs20 85}{\fs20 \par compile to memory command 8, 25, }{\b\fs20 85}{\fs20 \par compiler 119\par compiler directives 19-22, 345-359, 363\par compiler listings 124\par compiling a program 124, 127, 132, 134\par compound statements }{\b\fs20 284}{\fs20 \par COMPRESS command }{\b\fs20 134}{\fs20 , 165\par concat function }{\b\fs20 311}{\fs20 \par console device 28, 321, 332\par constants 229, }{\b\fs20 231}{\fs20 , 261, 262, 263, }{\b\fs20 266}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 boolean 237\par characters }{\b\fs20 232}{\fs20 , 237\par hexadecimal 231\par integer }{\b\fs20 231}{\fs20 \par pointers 237\par real numbers }{\b\fs20 232}{\fs20 \par strings }{\b\fs20 233}{\fs20 , 243\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 CONTINUE command }{\b\fs20 135}{\fs20 \par Control Panel 42\par Control Panel Devices 345\par copy command }{\b\fs20 74}{\fs20 , 108, }{\b\fs20 135}{\fs20 \par copy directive 345, }{\b\fs20 346}{\fs20 \par copy function }{\b\fs20 312}{\fs20 \par copying disks 7\par cos function }{\b\fs20 312}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 288\par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 CPM 154\par CREATE command }{\b\fs20 137}{\fs20 \par }\pard \s29\widctlpar\adjustright {\fs20 creation time 131\par CRUNCH utility 102, 105, }{\b\fs20 137}{\fs20 \par current prefix 104, 129, 135\par cut command }{\b\fs20 74}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 D\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 data fork 136, 226\par data formats 235\par DataBank directive }{\b\fs20 346}{\fs20 \par date 131\par debug code 10, 11, 38, 39, 88, 91, 97, 347\par debug directive }{\b\fs20 347}{\fs20 \par debug menu }{\b\fs20 78}{\fs20 , }{\b\fs20 91}{\fs20 \par debugger 10, 11, 16, 34, 77, 88, 89, 91\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 case sensitivity 16\par classic desk accessories 40\par menu bar while debugging 30\par new desk accessories 37\par variables 15\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 defaults for PRIZM 96\par definition section 263\par DELETE command 107, 135, }{\b\fs20 138}{\fs20 \par delete key 66, }{\b\fs20 69}{\fs20 , 74, 75\par delete line command }{\b\fs20 83}{\fs20 \par delete procedure }{\b\fs20 313}{\fs20 \par delete to end of line command }{\b\fs20 82}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 DeRez 191, 192, 193, 197, 198, 201, 204, 212, 214, 219, 225\par DEREZ command }{\b\fs20 139}{\fs20 \par desk accessories 89\par desktop development environment 1, 7-17, 65-97\par }\pard \s29\widctlpar\adjustright {\fs20 desktop environment 31-38\par desktop programming 353, 358\par desktop programs 33, 336\par DETAB 167\par device names 56, }{\b\fs20 106}{\fs20 , 135, 164\par device numbers 106\par devices 141, 164\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 .CONSOLE 107, 114\par .NULL 118\par .PRINTER 107, 114, 115\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 DEVICES command }{\b\fs20 141}{\fs20 \par directives 19\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see compiler directives \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 directories 55, 56, 87, 89\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also folders \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 directory walking }{\b\fs20 107}{\fs20 \par DISABLE command }{\b\fs20 141}{\fs20 , 145\par disassembler 130\par disk copying 135\par disk size 130\par DISKCHECK command }{\b\fs20 142}{\fs20 \par display selection command }{\b\fs20 80}{\fs20 \par dispose procedure 254, }{\b\fs20 313}{\fs20 , 362\par div operator 292, 298\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 320\par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 DOS 135, 165\par DOS (Apple) 154\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 double-precision 236, 282, 283, 294, 299, 300, 329, 344, 363, 365\par }\pard \s29\widctlpar\adjustright {\fs20 DUMPOBJ utility 122\par dynamic directive }{\b\fs20 347}{\fs20 \par dynamic variables 243, 303, 313, 319\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 E\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 ECHO command 128, }{\b\fs20 143}{\fs20 , 151\par }\pard \s29\widctlpar\adjustright {\fs20 edit command 60, 61, 104, }{\b\fs20 144}{\fs20 , 403\par edit menu }{\b\fs20 74}{\fs20 -}{\b\fs20 75}{\fs20 \par editor 119\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 about command }{\b\fs20 175}{\fs20 \par arrow keys 172\par auto-indent mode }{\b\fs20 170}{\fs20 , 181, 188\par beep the speaker command }{\b\fs20 175}{\fs20 \par beginning of line command }{\b\fs20 176}{\fs20 \par bottom of screen command 171, }{\b\fs20 176}{\fs20 \par buttons 174\par check boxes 174\par close command }{\b\fs20 176}{\fs20 \par control underscore key }{\b\fs20 170}{\fs20 \par copy command }{\b\fs20 176}{\fs20 \par create macros command 172\par cursor down command 171, }{\b\fs20 176}{\fs20 \par cursor left command 171, }{\b\fs20 176}{\fs20 \par cursor right command 171, }{\b\fs20 176}{\fs20 \par cursor up command 171, }{\b\fs20 177}{\fs20 \par customizing }{\b\fs20 188}{\fs20 \par cut command }{\b\fs20 177}{\fs20 \par define macros command }{\b\fs20 177}{\fs20 \par delete character command }{\b\fs20 177}{\fs20 , 188\par delete character left command }{\b\fs20 177}{\fs20 , 188\par delete command }{\b\fs20 177}{\fs20 \par delete line command }{\b\fs20 178}{\fs20 , 188\par delete to end of line command }{\b\fs20 178}{\fs20 , 188\par delete word command }{\b\fs20 178}{\fs20 , 188\par deleting characters in macros 172\par dialogs 173\par editline controls 173\par editline items 173\par end macro definition command 172\par end of line command }{\b\fs20 178}{\fs20 \par ESCAPE key 171\par escape mode }{\b\fs20 170}{\fs20 \par executing macros }{\b\fs20 172}{\fs20 \par exit macro creation command 172\par help command }{\b\fs20 178}{\fs20 \par hidden characters 171\par insert blank lines command 170\par insert line command }{\b\fs20 178}{\fs20 \par insert mode }{\b\fs20 169}{\fs20 \par insert space command }{\b\fs20 178}{\fs20 \par line length }{\b\fs20 169}{\fs20 \par list controls 174\par macro keystrokes }{\b\fs20 172}{\fs20 \par macros }{\b\fs20 172}{\fs20 \par modes 188\par mouse 175\par moving through a file }{\b\fs20 182}{\fs20 \par multiple files 179, 186\par multiple files. 185\par new command }{\b\fs20 179}{\fs20 \par open Apple key 170\par open command }{\b\fs20 179}{\fs20 \par over strike mode }{\b\fs20 169}{\fs20 , 189\par paste command 176, }{\b\fs20 180}{\fs20 \par quit command }{\b\fs20 180}{\fs20 \par remove blanks command }{\b\fs20 180}{\fs20 \par repeat counts }{\b\fs20 170}{\fs20 , }{\b\fs20 180}{\fs20 \par RETURN key 171, }{\b\fs20 181}{\fs20 \par save as command }{\b\fs20 181}{\fs20 \par save command }{\b\fs20 182}{\fs20 \par screen move commands 171\par scroll down one line command }{\b\fs20 182}{\fs20 \par scroll down one page command }{\b\fs20 182}{\fs20 \par scroll up one line }{\b\fs20 182}{\fs20 \par scroll up one page command }{\b\fs20 182}{\fs20 \par search and replace down command }{\b\fs20 184}{\fs20 \par search and replace up command }{\b\fs20 185}{\fs20 \par search down command }{\b\fs20 182}{\fs20 \par search up command }{\b\fs20 184}{\fs20 \par select file command }{\b\fs20 185}{\fs20 \par select mode 189\par }\pard\plain \s27\li720\widctlpar\adjustright \f4\cgrid {\fs20 by character }{\b\fs20 170}{\fs20 , 171, 180\par by line }{\b\fs20 170}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 set/clear auto-indent mode command }{\b\fs20 187}{\fs20 \par set/clear escape mode command }{\b\fs20 187}{\fs20 \par set/clear insert mode command }{\b\fs20 187}{\fs20 \par set/clear select mode command }{\b\fs20 187}{\fs20 \par set/clear tab stops command }{\b\fs20 185}{\fs20 \par setting defaults }{\b\fs20 188}{\fs20 \par shift left command }{\b\fs20 185}{\fs20 \par shift right command }{\b\fs20 186}{\fs20 \par start of line command 171\par status banner 125\par switch files command }{\b\fs20 186}{\fs20 \par tab command 171, }{\b\fs20 186}{\fs20 \par tab left command 171, }{\b\fs20 187}{\fs20 \par tab mode 189\par tabs 171, 174\par top of screen command 171, }{\b\fs20 187}{\fs20 \par undo command 177\par undo delete buffer 177, 188\par undo delete command }{\b\fs20 188}{\fs20 \par version }{\b\fs20 175}{\fs20 \par word left command 171, }{\b\fs20 188}{\fs20 \par word right command 171, }{\b\fs20 188}{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 EDITOR file 105\par eject directive }{\b\fs20 348}{\fs20 \par else clause 286\par ELSE clause of IF command }{\b\fs20 144}{\fs20 , 152\par ELSE IF clause of IF command 152, 156\par ENABLE command 142, }{\b\fs20 145}{\fs20 , 149\par END command 128, 135, }{\b\fs20 145}{\fs20 , 151, 152, 156\par END directive 125\par EndDesk procedure }{\b\fs20 314}{\fs20 \par EndGraph procedure 30, }{\b\fs20 314}{\fs20 \par ENTAB utility }{\b\fs20 145}{\fs20 \par enter key 66\par enumerations }{\b\fs20 239}{\fs20 , 301, 322\par EOF 131\par eof function }{\b\fs20 314}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 315, 330\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 eoln function }{\b\fs20 315}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 315, 330\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ERASE command }{\b\fs20 146}{\fs20 \par error levels 388\par error output 61, 104, 114, 366\par error output redirection 260\par error reporting\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 compiler 124\par shell 111, 113, 114, 147\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 errorOutput 259, 363\par EXEC command }{\b\fs20 146}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 exec files 53, 103, }{\b\fs20 108}{\fs20 , 128, 135, 143, 147, 152, 156, 163\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 parameter passing 109, 151, 163\par redirection 114\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 EXEC language 108, 146\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 executable files 28, 87, 88, 102, 103, 111, 119, 154\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also individual file types \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 execute command }{\b\fs20 90}{\fs20 , 110, 112, }{\b\fs20 147}{\fs20 , 164\par execute options command }{\b\fs20 90}{\fs20 \par executing a program 127, 133\par EXISTS command }{\b\fs20 147}{\fs20 \par EXIT command }{\b\fs20 147}{\fs20 \par exp function }{\b\fs20 316}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 316\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 exponents 232\par EXPORT command 110, }{\b\fs20 148}{\fs20 , 163\par EXPRESS command }{\b\fs20 148}{\fs20 \par expressed files 155\par expressions\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 shell }{\b\fs20 113}{\fs20 , 152\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ExpressLoad 148\par extended files\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see resources \par }\pard\plain \s29\fi-180\li180\widctlpar\adjustright \f4\cgrid {\fs20 extended-precision 236, 283, 299, 300, 344, 363, 365\par }\pard \s29\widctlpar\adjustright {\fs20 extending a selection 67\par extensions 363\par extern directive 262, 375\par external variables 50, 259, }{\b\fs20 269}{\fs20 \par extras menu 65, 69, }{\b\fs20 81}{\fs20 -}{\b\fs20 84}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 F\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 false 237\par field width 343\par file access flags 131, 141, 145, 149\par file length 131\par file menu }{\b\fs20 72}{\fs20 -}{\b\fs20 73}{\fs20 , 85\par file names 55, }{\b\fs20 106}{\fs20 , 130\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also path names \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 file system translator 153, 154\par file types 108, 111, 112, 149, 157, 166\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 auxtype\par }\pard\plain \s27\li720\widctlpar\adjustright \f4\cgrid {\fs20 see auxiliary file type \par }\pard\plain \s28\li360\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 BIN 245, 332\par CDA 38-40, 89, 346\par }\pard \s28\li360\widctlpar\adjustright {\fs20 CDV 42\par EXE 28, 35, 62, 89, 90\par NDA 35, 37, 89, 353\par PIF 40\par }\pard \s28\fi-180\li540\widctlpar\adjustright {\fs20 S16 28, 30, 63, 89, 96, 103, 130, 400, 404\par }\pard \s28\li360\widctlpar\outlinelevel0\adjustright {\fs20 SRC 108, 130, 166, 179\par SYS 400, 404\par }\pard \s28\li360\widctlpar\adjustright {\fs20 TIF 40\par TXT 102, 108, 166, 179, 245, 332\par }\pard\plain \s29\fi-180\li180\widctlpar\adjustright \f4\cgrid {\fs20 files }{\b\fs20 244}{\fs20 , 256, 282, 314-316, 321, 324, 325, 328, 331, 333, 342, 361, 363, 371, 376, 396\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 input 259\par output 259\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 FILETYPE command }{\b\fs20 149}{\fs20 \par find command }{\b\fs20 78}{\fs20 -79, 80\par find menu }{\b\fs20 78}{\fs20 -}{\b\fs20 81}{\fs20 \par find same command }{\b\fs20 80}{\fs20 \par Finder 405\par float directive }{\b\fs20 348}{\fs20 \par floating-point 348\par folders 55\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also directories \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 FOR command 110, 128, 135, 145, }{\b\fs20 151}{\fs20 \par for loop control variable 285\par FOR statement 235, }{\b\fs20 285}{\fs20 , 372, 373, 378\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 286, 326, 330\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 formatted output 343\par formatting disks }{\b\fs20 146}{\fs20 , }{\b\fs20 153}{\fs20 \par forward directive }{\b\fs20 275}{\fs20 \par FPE Card 348\par Free method 258\par FST 153, 154\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 functions 229, 261-263, }{\b\fs20 271}{\fs20 , 297, 362, 371\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 G\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 get procedure }{\b\fs20 316}{\fs20 \par go command 12, }{\b\fs20 92}{\fs20 \par goto command 67, }{\b\fs20 81}{\fs20 \par goto next return command 15, }{\b\fs20 93}{\fs20 \par goto statement 265, }{\b\fs20 286}{\fs20 , 377\par graphics environment 29\par graphics programs 76, 337\par graphics window 8, 9, 11, 29, 30, }{\b\fs20 76}{\fs20 , 89\par GS/OS 5, 112\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 interface files 276\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 GS/OS aware 105\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 H\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 halt procedure }{\b\fs20 316}{\fs20 , 338\par hard disks 2, 402\par header files 124, 125\par heap 243, 303, 313, 319, 361\par help command 63, 102, 105, }{\b\fs20 151}{\fs20 , 404\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 hexadecimal 77, 129, 131, 140, 217, 219, 223, 225\par }\pard \s29\widctlpar\adjustright {\fs20 hidden characters 171\par high level language debugger 33\par High Sierra 154\par HISTORY commands }{\b\fs20 152}{\fs20 \par HOME commands }{\b\fs20 152}{\fs20 \par HyperCard\~II}{\fs18 GS}{\fs20  41, 359\par HyperStudio 41, 353\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 I\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 identifiers 229\par IEEE floating-point standard 235\par IF command 145, }{\b\fs20 152}{\fs20 , 156\par if statement }{\b\fs20 286}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 315\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 IN clause of FOR command 151\par in operator 296, 298\par indenting 69\par inheritance 249, 252\par INIT command 105, }{\b\fs20 153}{\fs20 \par initialization programs 356\par Inits 40\par input 259, 331, 363\par INPUT command }{\b\fs20 154}{\fs20 \par input redirection 61, 259\par insert line command }{\b\fs20 82}{\fs20 \par insert mode 65, 68, 69, 83, 96\par insert procedure }{\b\fs20 317}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 insertion point 65-69, 71, 80, 81, 83\par installing ORCA/Pascal 399\par integer constants 379\par integers 235, 239, 282, 292-294, 299, 300, 329, 343, 363\par }\pard \s29\widctlpar\adjustright {\fs20 interface files 350, 404\par ISO directive 239, }{\b\fs20 349}{\fs20 \par ISO Pascal 28, 361\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 J\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 join lines command }{\b\fs20 82}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 K\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 KEEP directive 111, 125, }{\b\fs20 349}{\fs20 \par }\pard \s29\widctlpar\adjustright {\fs20 KEEP parameter 111, 125, 156, 158\par keyboard 315\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 L\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 labels 263, }{\b\fs20 265}{\fs20 , 286\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 global 125\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 language names 114, 131, 146, 161, 164, 166\par language numbers }{\b\fs20 103}{\fs20 , 164, 188\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 language stamp 102, 108, 124, 131, 132, 144, 146\par }\pard \s29\widctlpar\adjustright {\fs20 languages menu 9, 85, 95\par Languages prefix 104, 105, 119\par learning Pascal 3\par length function }{\b\fs20 317}{\fs20 \par LibPrefix directive }{\b\fs20 350}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 libraries 23, 53, 59, 89, 104, 112, 156, 157, 158, 261, 276, 404\par }\pard \s29\widctlpar\adjustright {\fs20 library prefix 59, 89, 104, 105, 265, 350, 404\par line editor }{\b\fs20 99}{\fs20 -}{\b\fs20 101}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 clear-line command 100\par cursor-left command 100\par cursor-right command 100\par delete-character-left command 100\par delete-to-end-of-line command 100\par end-of-line command 100\par execute command 101\par insert mode 100\par start-of-line command 100\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 line numbers 81\par link command 60, }{\b\fs20 88}{\fs20 , 109, 112, 127, }{\b\fs20 154}{\fs20 \par link errors 369, 388\par link map 124, 154\par linker 104, 112, 119, 126, 154, 369, 388, 404\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 script files 156\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 LINKER command }{\b\fs20 156}{\fs20 \par linking a program 124, 127, 132\par Lisa 154\par LIST directive 124, }{\b\fs20 350}{\fs20 \par ln function }{\b\fs20 318}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 316\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 load files\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see executable files \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 locking files 141\par LOGIN file 105, 123, 148, 160, 163, 403\par long command lines 109\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 long integers 235, 282, 283, 292, 293, 299, 363, 365\par }\pard \s29\widctlpar\adjustright {\fs20 longint\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see long integers \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 LOOP command 128, 135, 145, }{\b\fs20 156}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 M\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 Macintosh 154\par }\pard \s29\widctlpar\adjustright {\fs20 MAKELIB utility 104, 105, }{\b\fs20 157}{\fs20 \par maxint 292, 300, 362\par maxint4 292\par member function }{\b\fs20 318}{\fs20 \par memory 399\par memory management 303, 341, 396\par memory model 356, 357, 405\par MemoryModel directive }{\b\fs20 351}{\fs20 \par menu bar 12, 30, 31, 33, 34, 78, 81, 92\par menus 8\par merging files 167\par MERR directive 124\par messages 254\par methods 249, 251-253, 254\par mod operator 292, 298\par modification date 159, 166\par modify time 131\par mouse 8, 175\par MOVE command 108, }{\b\fs20 158}{\fs20 \par MS/DOS 154\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 N\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 names directive }{\b\fs20 352}{\fs20 \par NBA directive 41, }{\b\fs20 353}{\fs20 \par NDA 353\par nda directive 35\par networks 104\par new button actions 353\par new command 72\par new desk accessories 35, 36, 37, 353\par new procedure 243, 253, }{\b\fs20 319}{\fs20 , 362, 396\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 243\par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 NewDeskAcc directive }{\b\fs20 353}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 36\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 NEWER command }{\b\fs20 159}{\fs20 \par not operator 296, 298\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 O\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 object files 8, 85, 88, 89, 390, 392\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see executable files \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 object module format 158\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 object modules 111, 125, 127, 134, 137, 154, 157\par }\pard \s29\widctlpar\adjustright {\fs20 object segment 126, 154\par objects 247-258, 282, 283, 299, 313, 318-320\par octal 217, 220, 225\par odd function }{\b\fs20 320}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 320\par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 OMF 133\par }\pard \s29\widctlpar\adjustright {\fs20 open command 7, 11, }{\b\fs20 72}{\fs20 , 73\par open procedure }{\b\fs20 321}{\fs20 \par operations }{\b\fs20 291}{\fs20 \par operator precedence 298, 366\par optimization 355\par optimize directive 240, }{\b\fs20 355}{\fs20 \par or operator 296, 298\par ORCA 118\par ORCA.Sys16 403\par ORCA/C 5, 404\par ORCA/M 5, 390, 392, 401\par ORCA/Pascal 115, 134, 401\par ORCA/Pascal language 103\par ORCAPascalDefs 32, 59, 105, 265, 350\par ord function 237, 239, 299, }{\b\fs20 322}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 273, 307, 320\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ord4 function 298, 300, }{\b\fs20 322}{\fs20 \par otherwise clause 230, 283\par output 28, 259, 331, 342, 363\par output redirection 61, 259\par over strike command 65, }{\b\fs20 83}{\fs20 \par over strike mode 65, 68, 69, 83, 96\par override 250\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 P\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 pack procedure }{\b\fs20 323}{\fs20 \par packed arrays 237, 282, 299, 323, 340\par packed records 282, 299\par page procedure }{\b\fs20 324}{\fs20 , 363\par page setup command }{\b\fs20 73}{\fs20 \par parameters 243, 272-275\par partial compilation 87, 125, 137\par Pascal 69, 71, 81, 83, 86, 96, 103, 154\par PASCAL command }{\b\fs20 160}{\fs20 \par paste command 66, 74\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 path names 55, 56, 57, 59, 103, 108, 112, 126, 130\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also file names \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 pipes 62, 105, }{\b\fs20 118}{\fs20 , 404\par pointer function }{\b\fs20 324}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 pointers }{\b\fs20 237}{\fs20 , 297, 300, 313, 322, 324, 361, 362, 366\par }\pard \s29\widctlpar\adjustright {\fs20 pos function }{\b\fs20 325}{\fs20 \par precompiled headers 124, 125\par pred function 239, }{\b\fs20 325}{\fs20 , 362\par prefix 0-7 105\par PREFIX command 103, 105, }{\b\fs20 160}{\fs20 \par prefixes 57\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 numbers }{\b\fs20 103}{\fs20 , 105, 107, 119\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 print command 66, }{\b\fs20 73}{\fs20 \par printer device 61, 321, 332\par PRINTER directive 127\par printers 61, }{\b\fs20 115}{\fs20 -}{\b\fs20 118}{\fs20 , 321, 324, 332, 350\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 characters per line 116\par configuration 115\par control characters 117\par lines per page 116\par redirecting output 114, 115\par slot 116\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 printing files 73, 113, 167\par PRIZM 403\par procedures 229, 261, 262, 263, }{\b\fs20 271}{\fs20 , 297\par ProDOS 153, 154\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 interface files 276\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ProDOS 8 103, 149\par PRODOS command 102, }{\b\fs20 161}{\fs20 , 166\par ProDOS directive 276\par ProDOS interfaces 262\par PRODOS language 102, 108, 161\par profile command }{\b\fs20 93}{\fs20 \par profiler 13, 93, 97\par program header 259, 363\par program launchers 104\par program name 259\par program size 130\par Programmer\rquote s Reference for System 6.0 5\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 programming examples 128, 135, 151, 152, 156\par }\pard \s29\widctlpar\adjustright {\fs20 put procedure }{\b\fs20 325}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 326\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 Q\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 QuickDraw II 29\par }\pard \s29\widctlpar\adjustright {\fs20 quit command }{\b\fs20 73}{\fs20 , }{\b\fs20 161}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 R\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 RAM 84, 105\par RAM disks 84, 402\par }\pard \s29\widctlpar\adjustright {\fs20 random access files 333\par random function }{\b\fs20 326}{\fs20 \par RandomDouble function }{\b\fs20 327}{\fs20 \par RandomInteger function }{\b\fs20 327}{\fs20 \par RandomLongint function }{\b\fs20 328}{\fs20 \par RangeCheck directive 239, }{\b\fs20 355}{\fs20 , 395\par read procedure }{\b\fs20 328}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 315, 330\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 readln procedure }{\b\fs20 328}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 315, 330\par }\pard\plain \s29\fi-180\li180\widctlpar\adjustright \f4\cgrid {\fs20 real numbers }{\b\fs20 235}{\fs20 , 282-294, 299, 300, 343, 344, 363\par }\pard \s29\widctlpar\adjustright {\fs20 records }{\b\fs20 243}{\fs20 , 297, 362, 378\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 268\par size limits 244\par variant 243\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 redirection 102, 113, 114, 127\par registration card 3\par RENAME command 101, 108, }{\b\fs20 161}{\fs20 \par repeat statement }{\b\fs20 287}{\fs20 \par replace command }{\b\fs20 80}{\fs20 , 81\par replace same command }{\b\fs20 81}{\fs20 \par RESEQUAL command }{\b\fs20 162}{\fs20 \par reserved symbols }{\b\fs20 230}{\fs20 \par reserved words }{\b\fs20 229}{\fs20 \par reset procedure 259, }{\b\fs20 331}{\fs20 , 363\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 315, 330\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 resource description file 192, 195\par resource fork 131, 136, 226\par resources 136, 139, 162, 163, 191\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see Rez \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 restartable programs 102, 119, 133\par return characters 171\par return key 69, 77, 79, 83\par revert to saved command }{\b\fs20 73}{\fs20 \par rewrite procedure 259, }{\b\fs20 331}{\fs20 , 363\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 326, 329\par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\fs20 Rez 139\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 append statement 218\par arrays 204, 208, 211\par built-in functions 210, 221\par change statement 207\par comments 192\par conditional compilation 215\par data statement 197\par define statement 214\par delete statement 207\par escape characters 224\par expressions 220\par if statement 215\par include statement 105, 195, 218\par labels 210, 211, 212, 213\par macros 214\par options 226\par printf statement 215\par read statement 197\par resource attributes 196\par resource statement 207, 219-225\par resource types 197\par strings 201, 223, 224\par switch statement 205, 208\par symbols 206\par type statement 197\par undef statement 214\par variables 221\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 REZ command }{\b\fs20 163}{\fs20 \par Rez Compiler 191\par ROM disks 402\par round function }{\b\fs20 332}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 288\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 round4 function }{\b\fs20 333}{\fs20 \par rtl directive 40, }{\b\fs20 356}{\fs20 \par ruler 71, 84\par run command 60, 111, 112, 124, }{\b\fs20 163}{\fs20 \par run menu 11, }{\b\fs20 84}{\fs20 -}{\b\fs20 91}{\fs20 \par run-time errors 316, 338, 352, 355, 357, 369\par }\pard\plain \keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid }}\pard\plain \keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs20 S\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 Samples folder 11\par }\pard \s29\widctlpar\adjustright {\fs20 save as command }{\b\fs20 73}{\fs20 \par save command }{\b\fs20 72}{\fs20 \par scalars 16, 77, }{\b\fs20 235}{\fs20 , 236, 237, 239, 266\par }\pard\plain \s28\widctlpar\adjustright \f4\cgrid {\fs20 script files, linker 156\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 scripts 403\par seed procedure }{\b\fs20 334}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 326, 327, 328\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 seek procedure }{\b\fs20 333}{\fs20 \par segment directive }{\b\fs20 356}{\fs20 \par segments 347, 356\par select all command 67, }{\b\fs20 75}{\fs20 \par selecting a document 67\par selecting lines 66\par selecting text 66\par selecting words 67\par separate compilation 89, 261\par separators }{\b\fs20 233}{\fs20 \par SET command 110, 156, }{\b\fs20 163}{\fs20 , 167\par set/clear break points command }{\b\fs20 93}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 sets 235, }{\b\fs20 236}{\fs20 , 282, 296, 299, 363, 371, 373, 374, 397\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 307\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ShallowClone method 258\par ShallowFree method 258\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 shell 1, 2, 53-64, 66, 85, 87, 89, 94, 95, 99-168, 308, 316, 321, 334, 339, 403\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 command table 403\par commands 54\par errors 63\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 shell calls 276\par shell command }{\b\fs20 94}{\fs20 \par shell commands 108\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 built-in commands 102, 119\par command expansion 99\par command list 100, 101\par command types }{\b\fs20 101}{\fs20 , 119\par language names }{\b\fs20 102}{\fs20 , 119\par metacharacters 126\par multiple commands 101, 109\par parameters 124, 147\par utilities 102\par utility commands 119\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 shell identifier 63\par shell prefix 104, 119, 133, 178\par shell prompt 101, 112\par shell variables }{\b\fs20 110}{\fs20 , 147, 154\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 assigning values to 110, 163, 167\par metacharacters 111\par scope 110, 148, 163\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 shell window 8, 9, 15, 23, 53, 54\par shell window command }{\b\fs20 76}{\fs20 \par ShellID procedure }{\b\fs20 334}{\fs20 \par shift left command }{\b\fs20 81}{\fs20 \par shift right command }{\b\fs20 82}{\fs20 \par SHOW command 106, 114, 132, 160, }{\b\fs20 164}{\fs20 \par show ruler command 71, }{\b\fs20 84}{\fs20 \par SHUTDOWN command }{\b\fs20 164}{\fs20 \par sin function }{\b\fs20 334}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 288\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 site license 7\par SizeOf function }{\b\fs20 335}{\fs20 \par small memory compiler 399\par SOS 154\par source files 166\par source line 229\par sparse files 130\par split screen }{\b\fs20 68}{\fs20 \par sqr function }{\b\fs20 335}{\fs20 \par sqrt function }{\b\fs20 335}{\fs20 \par stack command }{\b\fs20 76}{\fs20 \par stack frames 303\par StackSize directive }{\b\fs20 357}{\fs20 \par standard input 61, 62, 104, 114, 315, 329\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 standard output 28, 54, 61, 62, 104, 114, 129, 143, 166, 324, 342\par }\pard \s29\widctlpar\adjustright {\fs20 Standard Pascal 28\par standard prefixes }{\b\fs20 103}{\fs20 , 105, 160, 164\par StartDesk procedure }{\b\fs20 336}{\fs20 \par StartGraph procedure 30, }{\b\fs20 337}{\fs20 \par step command 11, 12, 34, }{\b\fs20 91}{\fs20 , 92\par step through command 14, }{\b\fs20 92}{\fs20 \par stop command 11, 34, 92, }{\b\fs20 93}{\fs20 \par storage type 131\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 strings 230, 233, 237, }{\b\fs20 242}{\fs20 , 267, 282, 295, 297, 299, 308-313, 317, 325, 329, 343, 365, 366\par }\pard \s29\widctlpar\adjustright {\fs20 subranges }{\b\fs20 239}{\fs20 , 240, 282, 299\par succ function 239, }{\b\fs20 337}{\fs20 , 362\par SWITCH command 135, }{\b\fs20 165}{\fs20 \par sym files 124, 125\par symbol tables\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 linker 125, 154\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 SYSCMND file 105, 119, 133, 403\par SYSEMAC file 105, 172, 403\par SYSHELP file 178, 403\par SYSPIPEx files 118\par SYSTABS file 71, 95, 96, 104, 105, 188, 403\par System 6.0 5\par system configuration 399, 402\par SYSTEM files 103\par SystemError procedure }{\b\fs20 338}{\fs20 \par SystemErrorLocation 338\par SYSTEMP file 176, 180\par SystemPrintError 338\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 T\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 tab key }{\b\fs20 69}{\fs20 , 71, 80\par tab stop 69, }{\b\fs20 71}{\fs20 , 84, 95\par tabs 171, 174, 182, 183, 189\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 ENTAB utility 145\par removing 167\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 tag fields 244\par tan function }{\b\fs20 338}{\fs20 , }{\b\fs20 339}{\fs20 \par terminal errors 125, 388, 393\par text based development 1\par TEXT command }{\b\fs20 166}{\fs20 \par text environment 23, 25, 27, 38, 53-64\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 text files 102, }{\b\fs20 108}{\fs20 , 119, 161, 166, 167, 329, 332, 342\par }\pard \s29\widctlpar\adjustright {\fs20 TEXT language 103, 108, 166\par text programming 409\par text screen 409\par tile command }{\b\fs20 75}{\fs20 \par time 131\par title directive }{\b\fs20 358}{\fs20 \par tObject 256\par tokens 229\par tool directive 277\par }\pard \s29\keepn\widctlpar\adjustright {\fs20 toolbox\par }\pard\plain \s28\li360\keepn\widctlpar\adjustright \f4\cgrid {\fs20 interface files 32\par learning 3\par }\pard \s28\li360\widctlpar\adjustright {\fs20 see Apple\~II}{\fs18 GS}{\fs20  Toolbox \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ToolError function }{\b\fs20 339}{\fs20 \par ToolParms directive }{\b\fs20 358}{\fs20 \par TOUCH command }{\b\fs20 166}{\fs20 \par trace backs 352\par trace command 12, 13, 76, }{\b\fs20 92}{\fs20 , 93, 94\par true 237\par trunc function }{\b\fs20 340}{\fs20 \par trunc4 function }{\b\fs20 340}{\fs20 \par type casting }{\b\fs20 300}{\fs20 \par TYPE command 145, }{\b\fs20 166}{\fs20 \par type compatibility 282, }{\b\fs20 299}{\fs20 , 324\par type conversion 282\par types 229, 235, 261, 262, 263, }{\b\fs20 267}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 U\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\outlinelevel0\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 UNALIAS command 123, }{\b\fs20 167}{\fs20 \par }\pard \s29\widctlpar\adjustright {\fs20 undo command 66, }{\b\fs20 74}{\fs20 \par units 105, }{\b\fs20 261}{\fs20 -262, 264, 350\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 264\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 unlocking files 145\par unpack procedure }{\b\fs20 340}{\fs20 \par UNSET command 110, 111, 156, 163, }{\b\fs20 167}{\fs20 \par unsigned operations 240\par UserID function }{\b\fs20 341}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 uses statement 105, 230, }{\b\fs20 264}{\fs20 , 269, 350, 377, 404\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 29, 36\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 utilities 62, 63, 308, 404\par Utilities prefix 102, 104, 105, 119, 151\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 V\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 var parameters 370, 372\par variables 229, 261, 262, 263, }{\b\fs20 268}{\fs20 , 297\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 scope 272\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 variables command 15, }{\b\fs20 76}{\fs20 \par variables window 15, 16, 76, 77, }{\b\fs20 92}{\fs20 \par variant records 244, 319, 361, 378, 387\par visual cues 3\par volume names 107, 129, 135, 146, 153, 164\par }\pard\plain \keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid }}\pard\plain \keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs20 W\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 wait flag 125\par while statement }{\b\fs20 288}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 wildcards 59, }{\b\fs20 107}{\fs20 , 130, 135, 138, 144, 147, 159, 165, 166\par }\pard \s29\widctlpar\adjustright {\fs20 windows 8, 31\par windows menu }{\b\fs20 75}{\fs20 -}{\b\fs20 78}{\fs20 \par with statement }{\b\fs20 289}{\fs20 , 385\par word tabbing }{\b\fs20 70}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 work prefix 104, 105, 118, 176, 180, 244, 321, 331, 332\par }\pard \s29\widctlpar\adjustright {\fs20 write procedure }{\b\fs20 342}{\fs20 , 363\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 315, 320, 330, 344\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 write protect 137\par writeln 23\par writeln procedure }{\b\fs20 342}{\fs20 , 363\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 274, 315, 330, 344\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\outlinelevel0\adjustright {\b\fs20 X\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 xcmd directive 41, }{\b\fs20 359}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\par }}