{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \f12\cgrid \snext0 Normal;}{\s1\sb240\widctlpar\adjustright \b\f5\ul\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb120\widctlpar\adjustright \b\f5\cgrid \sbasedon0 \snext0 heading 2;}{\s3\li360\widctlpar\adjustright \b\f12\cgrid \sbasedon0 \snext0 heading 3;}{\s4\li360\widctlpar\adjustright \f12\ul\cgrid \sbasedon0 \snext0 heading 4;}{\s5\li720\widctlpar\adjustright \b\f12\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\s6\li720\widctlpar\adjustright \f12\fs20\ul\cgrid \sbasedon0 \snext0 heading 6;}{\s7\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 8;}{\s9\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li2880\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 5;}{\s16\li2160\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 4;}{\s17\li1440\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 3;}{\s18\li720\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 2;}{\s19\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 1;}{\s20\li2160\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 7;}{\s21\li1800\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 6;}{\s22\li1440\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 5;}{\s23\li1080\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 4;}{\s24\li720\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 3;}{\s25\li360\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 2;}{\s26\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 1;}{\*\cs27 \additive \sbasedon10 line number;}{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext28 footer;}{\s29\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext29 header;}{\*\cs30 \additive \fs16\up6 \sbasedon10 footnote reference;}{\s31\widctlpar\adjustright \f12\fs20\cgrid \sbasedon0 \snext31 footnote text;}{\*\cs32 \additive \sbasedon10 page number;}{\s33\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 Unnamed Style;}{\s34\ri960\sb160\sl280\slmult0\keep\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext34 1text;}{\s35\sl240\slmult0\widctlpar\adjustright \f6\fs20\cgrid \sbasedon0 \snext35 cv;}}{\*\revtbl {Unknown;}}{\info{\title ORCA/M }{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy5\hr20\min42}{\revtim\yr2000\mo10\dy5\hr20\min42}{\printim\yr2000\mo10\dy5\hr15\min39}{\version2}{\edmins1}{\nofpages550}{\nofwords162296}{\nofchars925092}{\*\company Byte Works, Inc.}{\nofcharsws1136077}{\vern99}}\margl2160\margr2160\margt2592\margb2304 \facingp\widowctrl\ftnbj\aenddoc\hyphhotz0\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbknone\pgnlcrm\headery1872\footery1872\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 ii}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 iii}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }\pard \qr\widctlpar\adjustright {\f5\fs20 \par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par \par \par \par \par }\pard \qc\widctlpar\adjustright {\b\i\f4\fs72 ORCA/M \par }{\b\i\shad\f4\fs36 A Macro Assembler \par for the\par Apple II}{\b\i\shad\scaps\f4\fs36 gs}{\b\i\shad\f4\fs36 \par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\adjustright {\b\f4\fs36 Mike Westerfield\par Phil Montoya\par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par \par \par }\pard \qc\widctlpar\adjustright {\b\f4\fs28 Byte Works, Inc.}{\f4\fs20 \par }{\f4 4700 Irving Blvd. N.W., Suite 207\par Albuquerque, NM   87114\par (505) 898 - 8183}{\f4\fs20 \page \par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Copyright 1984 - 1991\par By The Byte Works, Inc.\par All Rights Reserved\par \par Copyright 1986 - 1989\par Apple Computer, Inc.\par All Rights Reserved\par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par \par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \page }{\b\f4\fs18 Limited Warranty}{\f4\fs18  - Subject to the below stated limitations, Byte Works Inc. hereby warrants that the program contained in this unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from date of purchase.  Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose.  The limits of warranty extend only to the original purchaser.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par }\pard \qj\widctlpar\tx450\tx720\adjustright {\f4\fs18 Neither Byte Works Inc. nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par }\pard \qj\widctlpar\tx450\tx720\adjustright {\f4\fs18 To obtain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works Inc. within ten (10) days of purchase.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par }\pard \qj\widctlpar\tx450\tx720\adjustright {\b\f4\fs18 Important Notice}{\f4\fs18  - This is a fully copyrighted work and as such is protected under copyright laws of the United States of America.  According to these laws, consumers of copywritten material may make copies for their personal use only.  Duplication for any purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par }\pard \qj\widctlpar\tx450\tx720\adjustright {\f4\fs18 This product is sold for use on a }{\i\f4\fs18 single computer}{\f4\fs18  at at a }{\i\f4\fs18 single location}{\f4\fs18 .  Contact the publisher for information regarding licensing for use at multiple-workstation or multiple-computer installations.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par }\pard \qj\widctlpar\tx450\tx720\adjustright {\b\f4\fs18 Use of Libraries}{\f4\fs18  - The inclosed subroutine libraries are fully copyrighted works.  It is the policy of Byte Works, Inc. to license these libraries to purchasers of ORCA/M free of charge.  Such licenses are generally restricted to include the libraries of binary files, and do not extend to use of the source code.  A copy of the program, along with any documentation, and a list of the library subroutines used is required at the time of the licensing, and the document must give credit for using libraries from ORCA/M.  For details, please contact the Byte Works, Inc.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par ORCA/M is a trademark of the Byte Works, Inc.\par Apple is a registered trademark of Apple Computer, Inc.\par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4\fs18 Program, Documentation and Design\par Copyright 1984 - 1991\par The Byte Works, Inc.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par }\pard \qj\widctlpar\tx450\tx720\adjustright {\f4\fs18 Apple Computer, Inc. MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITTED BY SOME STATES.  THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS.  THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par }\pard \qj\widctlpar\tx450\tx720\adjustright {\f4\fs18 GS/OS is a copyrighted program of Apple Computer, Inc. licensed to Byte Works, Inc. to distribute for use only in combination with ORCA/M.  Apple software shall not be copied onto another diskette (except for archive purpose) or into memory unless as part of the execution of ORCA/M.  When ORCA/M has completed execution Apple Software shall not be used by any other program.\par \par Portions of this documentation are derived from material copyrighted by Apple Computer, Inc.  These portions are used with permission of Apple Computer.\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs18 \par Apple is a registered trademark of Apple Computer, Inc.\par }\pard \qc\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\pgnlcrm\headery1872\footery1872\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Table of Contents\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Table of Contents\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 xx}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 xxi}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\b\f4\fs28 \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 v}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Table of Contents\par \par \par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Welcome To ORCA\tab xxiii\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Express ORCA Start Up\tab xxiii\par About This Manual\tab xxiii\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Visual Cues\tab xxiv\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 What You Need\tab xxiv\par Additional Reading And Reference\tab xxiv\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Reading List\tab xxv\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 1 \endash  Getting Started\tab 1\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The ORCA Shell\tab 1\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Shell Commands\tab 1\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Editor\tab 2\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Calling The Editor\tab 2\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Assembling and Linking a Program\tab 3\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 2 \endash  The Shell\tab 7\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Shell Commands\tab 7\par Listing a Directory\tab 8\par The Shell Line Editor\tab 9\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Entering Commands\tab 9\par Scrolling Through Commands\tab 10\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Using Wildcards\tab 11\par Required and Optional Parameters\tab 12\par Types of Commands\tab 12\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 3 \endash  The Editor\tab 13\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Starting The Editor\tab 13\par Help\tab 13\par Editor Modes\tab 14\par Entering Text\tab 14\par Moving Through A File\tab 14\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Small Movements\tab 14\par Medium Movement\tab 15\par Large Movements\tab 15\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Modifying Text\tab 16\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Deleting Text\tab 16\par Inserting Text\tab 17\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Advanced Features\tab 17\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Search / Search With Replace\tab 17\par Search\tab 17\par Search With Replacement\tab 19\par Cut, Copy, Paste and Clear\tab 19\par Cut\tab 20\par Copy\tab 20\par Paste\tab 20\par Clear\tab 21\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Closing The File\tab 21\par For More Information...\tab 21\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 4 \endash  The Fundamental Assembler Directives\tab 23\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Introduction\tab 23\par The Assembly Language Statement\tab 23\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Label\tab 24\par Op code\tab 25\par Operand\tab 25\par Comment\tab 25\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Comment Lines\tab 26\par Directives\tab 26\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 KEEP\tab 26\par START and END\tab 26\par Equates\tab 27\par ANOP\tab 28\par DC and DS\tab 28\par Global Labels\tab 30\par DATA Segments\tab 31\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 5 \endash  Advanced Shell Features\tab 35\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 File Naming Conventions\tab 35\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 What Is A File?\tab 35\par File Names\tab 35\par Path Names\tab 36\par Directory Walking\tab 36\par Device Names\tab 37\par Standard Prefixes\tab 37\par Redirecting Input and Output\tab 40\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Program Development Process\tab 40\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Assembling A Program\tab 41\par Linking A Program\tab 42\par Executing a Program\tab 43\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 6 \endash  Advanced Assembler Directives\tab 45\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 COPY and APPEND\tab 45\par Format Control Directives\tab 46\par Setting Case Sensitivity\tab 47\par Setting The Most Significant Bit In Characters\tab 47\par Load Segments\tab 48\par Changing The Word Size\tab 50\par Miscellaneous Directives\tab 50\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 MERR Directive\tab 50\par Using the 65C02 and 6502\tab 50\par Positioning Code And The ORG Directive\tab 51\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Chapter 7 \endash  Using Macros\tab 53\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Tools of the Trade\tab 53\par The Macro Library\tab 56\par More About Macro Parameters\tab 57\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 8 \endash  Writing Macros\tab 59\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 MCOPY, MACRO and MEND\tab 59\par Basic Parameter Passing\tab 60\par Defining Symbolic Parameters\tab 62\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Changing and Using Symbolic Parameters\tab 63\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 String Manipulation\tab 64\par Conditional Assembly Branches\tab 65\par Attributes\tab 65\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 9 \endash  Writing Programs and Utilities\tab 69\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Shell Text Programs\tab 69\par Memory Management\tab 72\par Installing a New Utility\tab 72\par Installing a Compiler or Editor\tab 73\par System Programs\tab 73\par Other Kinds of Programs\tab 74\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Classic Desk Accessories\tab 75\par New Desk Accessories\tab 75\par Initialization Programs\tab 75\par Control Panel Devices\tab 75\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 10 \endash  Programming the Shell\tab 77\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 What Is an EXEC File?\tab 77\par Variables\tab 78\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The SET Command\tab 79\par The UNSET Command\tab 80\par }\pard \s17\li720\widctlpar\tqr\tx7920\adjustright {\f4\fs20 The Classic Start: Hello, World\tab 80\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Passing Parameters\tab 81\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Variables Defined by the Shell\tab 82\par Variable Scope\tab 83\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Loops\tab 84\par Conditional Execution\tab 86\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Chapter 11 \endash  Introduction To The Shell\tab 89\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 What is the Shell?\tab 89\par The Command Processor\tab 89\par The Text Editor\tab 90\par The Assembly Process\tab 90\par Assembly Language Programs\tab 91\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\keepn\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 12 \endash  The Command Processor\tab 93\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Line Editor\tab 93\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Command Name Expansion\tab 94\par }\pard\plain \s16\li2160\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Editing A Command On The Command Line\tab 94\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Multiple Commands\tab 95\par Scrolling Through Commands\tab 95\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Command Types\tab 95\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Built-in Commands\tab 96\par Utilities\tab 96\par Language Names\tab 96\par Program Names\tab 97\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Standard Prefixes\tab 97\par Prefixes 0 to 7\tab 99\par File Names\tab 100\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Wildcards\tab 101\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Types of Text Files\tab 102\par EXEC Files\tab 102\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Passing Parameters Into EXEC Files\tab 103\par Programming EXEC Files\tab 103\par }\pard\plain \s16\li2160\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Variables\tab 103\par Logical Operators\tab 106\par Entering Comments\tab 107\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Redirecting Input and Output\tab 107\par The .PRINTER Driver\tab 108\par The .NULL Driver\tab 111\par Pipelines\tab 111\par The Command Table\tab 112\par Command And Utility Reference\tab 114\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ALIAS\tab 115\par ASM65816\tab 116\par ASML\tab 116\par ASMLG\tab 119\par ASSEMBLE\tab 119\par BREAK\tab 119\par CAT\tab 120\par CATALOG\tab 120\par CHANGE\tab 123\par CMPL\tab 123\par CMPLG\tab 123\par COMMANDS\tab 124\par COMPACT\tab 124\par COMPILE\tab 125\par COMPRESS\tab 125\par CONTINUE\tab 125\par COPY\tab 126\par CREATE\tab 128\par CRUNCH\tab 128\par DELETE\tab 128\par DEREZ\tab 129\par DEVICES\tab 131\par DISABLE\tab 131\par DISKCHECK\tab 132\par DUMPOBJ\tab 133\par ECHO\tab 137\par EDIT\tab 138\par ELSE\tab 138\par ENABLE\tab 138\par ENTAB\tab 139\par END\tab 139\par ERASE\tab 139\par EXEC\tab 140\par EXECUTE\tab 140\par EXISTS\tab 140\par EXIT\tab 141\par EXPORT\tab 141\par EXPRESS\tab 141\par FILETYPE\tab 142\par FOR\tab 143\par HELP\tab 144\par HISTORY\tab 144\par HOME\tab 145\par IF\tab 145\par INIT\tab 145\par INPUT\tab 147\par LINK\tab 147\par LINKER\tab 148\par LOOP\tab 149\par MACGEN\tab 149\par MAKEBIN\tab 150\par MAKELIB\tab 151\par MOVE\tab 152\par NEWER\tab 153\par PREFIX\tab 154\par PRODOS\tab 154\par QUIT\tab 154\par RENAME\tab 155\par RESEQUAL\tab 155\par REZ\tab 156\par RUN\tab 156\par SET\tab 156\par SHOW\tab 157\par SHUTDOWN\tab 157\par SWITCH\tab 158\par TEXT\tab 159\par TOUCH\tab 159\par TYPE\tab 159\par UNALIAS\tab 160\par UNSET\tab 160\par *\tab 160\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 13 \endash  The Text Editor\tab 161\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Modes\tab 161\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Insert\tab 161\par Escape\tab 162\par Auto Indent\tab 162\par Select Text\tab 162\par Hidden Characters\tab 163\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Macros\tab 164\par Using Editor Dialogs\tab 165\par Using the Mouse\tab 167\par Command Descriptions\tab 167\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 About\tab 167\par Beep the Speaker\tab 167\par Beginning of Line\tab 168\par Bottom of Screen / Page Down\tab 168\par Copy\tab 168\par Close\tab 168\par Cursor Down\tab 168\par Cursor Left\tab 168\par Cursor Right\tab 168\par Cursor Up\tab 168\par Cut\tab 169\par Define Macros\tab 169\par Delete\tab 169\par Delete Character\tab 169\par Delete Character Left\tab 169\par Delete Line\tab 169\par Delete to EOL\tab 169\par Delete Word\tab 170\par End of Line\tab 170\par Help\tab 170\par Insert Line\tab 170\par Insert Space\tab 170\par New\tab 170\par Open\tab 171\par Paste\tab 172\par Quit\tab 172\par Remove Blanks\tab 172\par Repeat Count\tab 172\par Return\tab 172\par Save As\tab 173\par Save\tab 173\par Screen Moves\tab 173\par Scroll Down One Line\tab 174\par Scroll Down One Page\tab 174\par Scroll Up One Line\tab 174\par Scroll Up One Page\tab 174\par Search Down\tab 174\par Search Up\tab 175\par Search and Replace Down\tab 175\par Search and Replace Up\tab 176\par Select File\tab 176\par Set and Clear Tabs\tab 177\par Shift Left\tab 177\par Shift Right\tab 177\par Switch Files\tab 177\par Tab\tab 178\par Tab Left\tab 178\par Toggle Auto Indent Mode\tab 178\par Toggle Escape Mode\tab 178\par Toggle Insert Mode\tab 178\par Toggle Select Mode\tab 178\par Top of Screen / Page Up\tab 179\par Undo Delete\tab 179\par Word Left\tab 179\par Word Right\tab 179\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Setting Editor Defaults\tab 179\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 14 \endash  The Link Editor\tab 183\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Overview\tab 183\par The Link Edit Process\tab 184\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Object Modules Created by the Assembler\tab 184\par Subroutine Selection\tab 185\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Link Edit Command Parameters\tab 186\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Specifying the Keep Name with a Shell Variable\tab 187\par Specifying the File Type with a Shell Variable\tab 187\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Link Editor Output\tab 188\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Output With -S and -L Options\tab 189\par The Segment Table\tab 189\par Global Symbol Table\tab 189\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Program Segmentation\tab 189\par Creating Library Files\tab 191\par Linker Script Files\tab 192\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 15 \endash  The Resource Compiler\tab 195\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Overview\tab 195\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Resource Decompiler\tab 195\par Type Declaration Files\tab 195\par Using the Resource Compiler and DeRez\tab 196\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Structure of a Resource Description File\tab 196\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Sample Resource Description File\tab 197\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Resource Description Statements\tab 198\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Syntax Notation\tab 198\par Include \endash  Include Resources from Another File\tab 198\par Read \endash  Read Data as a Resource\tab 200\par Data \endash  Specify Raw Data\tab 200\par Type \endash  Declare Resource Type\tab 201\par Symbol Definitions\tab 209\par Delete \endash  Delete a Resource\tab 209\par Change \endash  Change a Resource's Vital Information\tab 209\par Resource \endash  Specify Resource Data\tab 210\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Labels\tab 212\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Built-in Functions to Access Resource Data\tab 213\par Declaring Labels Within Arrays\tab 213\par Label Limitations\tab 214\par An Example Using Labels\tab 215\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Preprocessor Directives\tab 215\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Variable Definitions\tab 216\par If-Then-Else Processing\tab 216\par Printf Directive\tab 217\par Include Directive\tab 219\par Append Directive\tab 220\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Resource Description Syntax\tab 220\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Numbers and Literals\tab 221\par Expressions\tab 221\par Variables and Functions\tab 222\par Strings\tab 224\par Escape Characters\tab 225\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Using the Resource Compiler\tab 226\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Resource Forks and Data Forks\tab 226\par Rez Options\tab 227\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 16 \endash  GSBug Debugger\tab 229\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Part 1: Getting Started\tab 230\par }\pard \s17\li1440\widctlpar\tqr\tx7920\adjustright {\f4\fs20 Debugger Restrictions\tab 230\par Installing the Init Version on Your Startup Disk\tab 231\par Entering the Init Version\tab 232\par Entering the Application Version by Launch\tab 233\par Setting the Prefix\tab 235\par Displaying the Version Number\tab 235\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Configuring the Debugger\tab 235\par Debugger Display Screens\tab 236\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Switching Displays\tab 237\par Selecting Displays\tab 237\par The Master Display\tab 239\par Test-Program Display\tab 240\par Memory Display\tab 240\par Displaying Memory on the Command Line\tab 242\par Direct-Page Display\tab 243\par Help Screens\tab 243\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Stepping Through Your Program\tab 243\par Printing Debugger Screens\tab 243\par Using Monitor Routines\tab 244\par Quitting the Debugger\tab 244\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Part 2: Using GSBug\tab 245\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Getting Help\tab 245\par Running Your Program\tab 246\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Single-Step and Trace Modes\tab 246\par Saving and Viewing a Trace History File\tab 249\par Real-Time Mode\tab 250\par The Command Filter\tab 251\par Memory Protection\tab 251\par Breakpoints\tab 252\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Debugging Segmented Programs\tab 253\par Watching a Running Disassembly\tab 254\par Using Breakpoints\tab 255\par Using Memory-Protection Ranges\tab 256\par Debugging Multi-Language Programs\tab 257\par }\pard\plain \s17\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Part 3: GSBug Subdisplay and Command Reference\tab 257\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Register Subdisplay\tab 257\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Debugger Registers\tab 258\par 65816 Registers\tab 259\par Emulation Mode Flag\tab 263\par Disassembly Mode Flag\tab 263\par Altering the Contents of Registers\tab 263\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Stack Subdisplay\tab 265\par Disassembly Subdisplay\tab 266\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Entering Instructions into the Mini-Assembler Display\tab 268\par Determining Instruction Length\tab 269\par Displaying Toolbox Instructions and GS/OS Calls\tab 270\par Displaying Tool Call Information\tab 270\par Displaying Instructions During Trace and Single-Step Modes\tab 271\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 RAM Subdisplay\tab 272\par Breakpoint Subdisplay\tab 274\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Altering the Contents of the Breakpoint Subdisplay\tab 275\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Memory Protection Subdisplay\tab 276\par Command Line Subdisplay\tab 279\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Entering Commands\tab 279\par Viewing Memory with Templates\tab 280\par Altering the Contents of Memory\tab 282\par Hexadecimal-Decimal Conversions\tab 284\par Evaluation of Expressions\tab 285\par Configuring the Master Display\tab 286\par Saving a Display Configuration\tab 287\par Command Line Commands\tab 288\par }\pard \s17\li720\widctlpar\tqr\tx7920\adjustright {\f4\fs20 Part 4: Loader Dumper\tab 291\par }\pard \s17\li1440\widctlpar\tqr\tx7920\adjustright {\f4\fs20 Dump Memory Segment Table\tab 291\par Dump Path Name Table\tab 292\par Dump Jump Table\tab 293\par Dump Loader Globals\tab 295\par Dump GS/OS Packets\tab 296\par Dump File Buffer Variables\tab 296\par Get Load Segment Information\tab 297\par Get User ID Information\tab 297\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 17 \endash  Running the Assembler\tab 299\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Introduction\tab 299\par Shell Commands That Assemble A Program\tab 299\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Assembler Command Options\tab 300\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Assembler Directives Global In Scope\tab 303\par The Assembly Process\tab 304\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Pass One\tab 304\par Pass Two\tab 304\par Stopping the Listing\tab 304\par Terminal Errors\tab 305\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Assembly Listing\tab 305\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Screen Listings\tab 305\par Printer Listings\tab 306\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 18 \endash  Coding Instructions\tab 307\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Types of Source Statements\tab 307\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Comment Lines\tab 307\par }\pard\plain \s16\li2160\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Blank Line\tab 307\par The Characters   *\tab 307\par The Period\tab 308\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Instructions\tab 308\par }\pard\plain \s16\li2160\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Label\tab 308\par The Operation Code\tab 308\par The Operand Field\tab 309\par Instruction Operand Format\tab 309\par }\pard\plain \s15\li2880\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Expressions\tab 311\par }\pard\plain \s16\li2160\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Comment Field\tab 315\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 19 \endash  Assembler Directives\tab 317\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Introduction To Assembler Directives\tab 317\par Descriptions of Directives\tab 317\par ABSADDR\tab 318\par ALIGN\tab 318\par ANOP\tab 319\par APPEND\tab 319\par CASE\tab 319\par CODECHK\tab 319\par COPY\tab 319\par DATA\tab 320\par DATACHK\tab 320\par DC\tab 320\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Integer\tab 321\par Address\tab 322\par Reference an Address\tab 322\par Soft Reference\tab 322\par Hexadecimal Constant\tab 322\par Binary Constant\tab 323\par Character String\tab 323\par Floating Point\tab 323\par Double Precision Floating Point\tab 324\par Extended Precision Floating Point\tab 324\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 DIRECT\tab 325\par DS\tab 325\par DYNCHK\tab 325\par EJECT\tab 326\par END\tab 326\par ENTRY\tab 326\par EQU\tab 326\par ERR\tab 327\par EXPAND\tab 327\par GEQU\tab 327\par IEEE\tab 328\par INSTIME\tab 328\par KEEP\tab 328\par KIND\tab 328\par LIST\tab 329\par LONGA\tab 329\par LONGI\tab 329\par MEM\tab 329\par MERR\tab 330\par MSB\tab 330\par NUMSEX\tab 330\par OBJ\tab 330\par OBJCASE\tab 330\par OBJEND\tab 331\par ORG\tab 331\par PRINTER\tab 332\par PRIVATE\tab 332\par PRIVDATA\tab 332\par RENAME\tab 332\par SETCOM\tab 333\par START\tab 333\par SYMBOL\tab 333\par TITLE\tab 334\par USING\tab 334\par 65C02\tab 334\par 65816\tab 334\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 20 \endash  Macro Language and Conditional Assembly Directives\tab 335\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Macro File\tab 335\par Writing Macro Definitions\tab 335\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Symbolic Parameters\tab 337\par Positional Parameters\tab 337\par Keyword Parameters\tab 339\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Subscripting Parameters in Macro Call Statements\tab 339\par Explicitly Defined Symbolic Parameters\tab 340\par Predefined Symbolic Parameters\tab 341\par Sequence Symbols\tab 343\par Attributes\tab 343\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 C: Count\tab 343\par L: Length\tab 344\par S: Setting\tab 344\par T: Type\tab 345\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Conditional Assembly and Macro Directives\tab 346\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ACTR\tab 346\par AGO\tab 347\par AIF\tab 348\par AINPUT\tab 348\par AMID\tab 349\par ASEARCH\tab 349\par GBLA\tab 350\par GBLB\tab 350\par GBLC\tab 350\par GEN\tab 350\par LCLA\tab 351\par LCLB\tab 351\par LCLC\tab 351\par MACRO\tab 351\par MCOPY\tab 351\par MDROP\tab 352\par MEND\tab 352\par MEXIT\tab 352\par MLOAD\tab 352\par MNOTE\tab 353\par SETA\tab 353\par SETB\tab 353\par SETC\tab 354\par TRACE\tab 354\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 21 \endash  Introduction to the Macro Libraries\tab 355\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 GS/OS Macros\tab 356\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Macro Naming Conventions\tab 356\par Inside the GS/OS Macros\tab 357\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Tool Set Macros\tab 357\par Addressing Modes\tab 359\par Data Types\tab 359\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Two-Byte Integers\tab 360\par Four-Byte Integers\tab 360\par Eight-Byte Integers\tab 360\par Character\tab 360\par Strings\tab 361\par Boolean Variables\tab 361\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Memory Usage\tab 361\par Side Effects\tab 361\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Chapter 22 \endash  Mathematics Macros\tab 363\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ADDx\tab 364\par CMPx\tab 365\par DIVx\tab 366\par MODx\tab 367\par MULx\tab 368\par RANx\tab 369\par SIGNx\tab 370\par SQRTx\tab 371\par SUBx\tab 372\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Chapter 23 \endash  Input and Output Macros\tab 373\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ALTCH\tab 373\par BELL\tab 374\par CLEOL\tab 374\par CLEOS\tab 375\par COUT\tab 376\par GETx\tab 377\par GOTOXY\tab 379\par HOME\tab 380\par NORMCH\tab 380\par PRBL\tab 381\par PUTx\tab 382\par PUTCR\tab 384\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Chapter 24 \endash  Shell Calls\tab 385\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Making a Shell Call\tab 385\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 The Control Record\tab 385\par Types of Parameters\tab 385\par Register Values\tab 386\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ChangeVector\tab 388\par ConsoleOut\tab 390\par Direction\tab 391\par Error\tab 393\par Execute\tab 394\par ExpandDevices\tab 396\par Export\tab 398\par FastFile\tab 400\par GetCommand\tab 405\par GetIODevices\tab 407\par GetLang\tab 408\par GetLInfo\tab 409\par InitWildcard\tab 414\par NextWildcard\tab 417\par PopVariables\tab 419\par PushVariables\tab 420\par ReadIndexed\tab 421\par ReadVariable\tab 423\par Redirect\tab 425\par Set\tab 427\par SetIODevices\tab 429\par SetLang\tab 431\par SetLInfo\tab 432\par SetStopFlag\tab 437\par StopGS\tab 438\par UnsetVariable\tab 439\par Version\tab 440\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Chapter 25 \endash  Miscellaneous Macros\tab 441\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ASL2\tab 441\par BGT\tab 442\par BLE\tab 442\par BUTTON\tab 443\par CLSUB\tab 443\par CNVxy\tab 444\par CSUB\tab 445\par DBcn\tab 445\par DEC2\tab 446\par DEC4\tab 446\par DOSIN\tab 447\par DOSOUT\tab 448\par DSTR\tab 449\par DW\tab 450\par INC2\tab 451\par INC4\tab 451\par Jcn\tab 452\par LA\tab 453\par LLA\tab 454\par LM\tab 455\par LONG\tab 456\par LRET\tab 456\par LSR2\tab 457\par LSUB\tab 457\par MASL\tab 458\par MLSR\tab 458\par MOVE\tab 459\par MOVE4\tab 460\par PHx\tab 461\par PLx\tab 462\par PREAD\tab 463\par RESTORE\tab 464\par RET\tab 464\par SAVE\tab 465\par SEED\tab 466\par SHORT\tab 467\par SOFTCALL\tab 468\par SUB\tab 469\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Appendix A \endash  Error Messages\tab 471\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Error Levels\tab 471\par Recoverable Assembler Errors\tab 471\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 ACTR Count Exceeded\tab 472\par Address Length not Valid\tab 472\par Addressing Error\tab 472\par Duplicate Ref in MACRO Operand\tab 472\par Duplicate Segment\tab 473\par Expression Too Complex\tab 473\par Invalid Operand\tab 473\par Label Syntax\tab 474\par Length Exceeded\tab 474\par Macro File Not In Use\tab 474\par MACRO Operand Syntax Error\tab 474\par Missing Label\tab 474\par Missing Operand\tab 474\par Missing Operation\tab 475\par Misplaced Statement\tab 475\par Nest Level Exceeded\tab 475\par No MEND\tab 475\par Numeric Error in Operand\tab 476\par Operand Syntax\tab 476\par Operand Value Not Allowed\tab 476\par Sequence Symbol Not Found\tab 477\par Set Symbol Type Mismatch\tab 477\par Subscript Exceeded\tab 477\par Too Many MACRO Libs\tab 477\par Too Many Positional Parameters\tab 477\par Undefined Directive in Attribute\tab 478\par Unidentified Operation\tab 478\par Undefined Symbolic Parameter\tab 478\par Unresolved Label not Allowed\tab 478\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Terminal Assembler Errors\tab 478\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 AINPUT Table Damaged\tab 479\par File Could not be Opened\tab 479\par GS/OS Errors\tab 479\par Keep File Could Not be Opened\tab 479\par Out Of Memory\tab 479\par No END\tab 479\par Unable to Write to Object Module\tab 479\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Recoverable Linker Errors\tab 479\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Addressing error\tab 480\par Address is not in current bank\tab 480\par Address is not in zero page\tab 480\par Alignment and ORG conflict\tab 480\par Alignment factor must not exceed segment align factor\tab 480\par Code exceeds code bank size\tab 481\par Data area not found\tab 481\par Duplicate label\tab 481\par Duplicate segment\tab 481\par Expression operand is not in same segment\tab 481\par Illegal \{AuxType\} shell variable [4]\tab 481\par Illegal \{KeepType\} shell variable [4]\tab 481\par Only JSL can reference dynamic segment\tab 482\par ORG Location has been passed\tab 482\par Relative address out of range\tab 482\par Segment types conflict\tab 482\par TempORG not supported\tab 482\par Unresolved reference\tab 483\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Terminal Linker Errors\tab 483\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Could not find library header in filename.\tab 483\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Could not overwrite existing file: filename.\tab 483\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Expression too complex in filename.\tab 483\par File read error\tab 483\par File not Found filename.\tab 483\par File write error.\tab 484\par Invalid dictionary in filename.\tab 484\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Must be an object file: filename.\tab 484\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Only one script file is allowed.\tab 484\par }\pard\plain \s16\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Script error: link aborted.\tab 484\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Stopped by open-apple .\tab 484\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Appendix B \endash  File Formats\tab 487\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Overview\tab 487\par Text Files\tab 487\par Object Modules\tab 487\par Executable Files\tab 497\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Appendix C \endash  Custom Installations\tab 499\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Installer Scripts\tab 499\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 New System\tab 499\par ORCA Icons\tab 500\par .PRINTER and .NULL\tab 500\par GSBug\tab 500\par ORCA Pascal, C, Asm Libraries\tab 500\par Update System, No Editor\tab 501\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 RAM Disks\tab 501\par Details About Configuration\tab 501\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\f4\fs20 Appendix D \endash  Licensing\tab 505\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Using the .PRINTER Driver\tab 505\par Macros\tab 505\par Using SYSLIB\tab 505\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f  }}{\fldrslt {\f4\fs20 Appendix E \endash  Differences Between ORCA/M 2.0 and ORCA/M 1.0\tab 507\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 GS/OS\tab 507\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Path Names\tab 507\par Standard I/O\tab 508\par Numbered Prefixes\tab 508\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Shell\tab 508\par }\pard\plain \s17\li1440\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Command Line Length\tab 508\par Shell Variable Length\tab 509\par New .PRINTER Driver\tab 509\par New .NULL Driver\tab 509\par Shell Prefix\tab 509\par Larger Default Stack\tab 509\par New Shell Variables\tab 509\par New Command Line Editor\tab 509\par New or Changed Commands\tab 510\par }\pard\plain \s18\li720\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\f4\fs20 Editor\tab 511\par ASM65816\tab 511\par LINKER\tab 511\par Rez Compiler\tab 511\par GSBug\tab 512\par New Utilities\tab 512\par Macros\tab 512\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s19\widctlpar\tqr\tx7920\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\f4\fs20 Index\tab 513\par }\pard\plain \qc\sl-480\slmult0\widctlpar\adjustright \f12\cgrid }}\pard\plain \qc\sl-480\slmult0\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \sect }\sectd \sbkodd\pgnlcrm\headery1872\footery1872\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 User's Manual\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Preface\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 xxvi}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 xxv}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\b\f4\fs28 \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 xxiii}}}{\f5\fs20 \par }}\pard\plain \qc\sl-480\slmult0\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Welcome To ORCA\par }\pard \widctlpar\adjustright {\f4 \par \par \par \par }{\pard\plain \widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Welcome To ORCA\tcl1}}}{\v\f4 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA  is an assembly language development system designed for the Apple  IIGS computer.  It is a combined command processor,  screen editor, sophisticated macro assembler, linker, library and support programs.  ORCA will allow you to create and execute your assembly language programs with ease.  This preface will guide you through the preliminaries of using ORCA.\par }\pard \qj\widctlpar\tx450\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab The express installation and set up of ORCA.\par \par \bullet \tab How to use this manual.\par \par \bullet \tab The hardware and software needed to run ORCA.\par \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab Additional reading and reference.\par \par }\pard \qj\widctlpar\tx720\adjustright {\b\f4\fs28 Express ORCA Start Up}{\pard\plain \qj\widctlpar\tx720\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Express ORCA Start Up\tcl2}}}{\b\f4\fs28 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 booting ORCA}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 back up}}}{\f4\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The minimum hardware required to run ORCA/M 2.0 under System Disk 5.0.4 is 1.25M with ROM 01, and 1.125M with ROM 03 Apple IIGS computers.  You must have at least one 3.5 floppy disk drive.  As ORCA and Apple's operating system evolve, these requirements may change; if so, you can find details in a file called Release.Notes on the Extras disk.\par The fastest way to get up and going is to execute the ORCA.Sys16 file from the ORCA/M program disk.  Before starting, though, use a copy program to make a working version of ORCA.  }{\i\f4\fs20 Never use your original ORCA disk to run ORCA!}{\f4\fs20   You are now ready for Chapter 1.  Be sure to look through this preface at some later time.\par If you will be using ORCA/M from a hard disk, you can install it quickly by first creating a folder called ORCA, then running Apple's Installer from the Extras disk.  This installer gives you a number of installation options; you should set the folder to the newly created ORCA folder, then select the New System installation script.  When the installation is complete, your ORCA folder will contain the file ORCA.Sys16; run this file to start ORCA/M.  If you have any questions about the installation scripts, check Appendix C for more detailed information.\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 About This Manual}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 About This Manual\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This manual will guide you through all aspects of the ORCA environment.  To make it easy for you to learn ORCA, this manual has been divided into four major sections.  The first part is called the "User's Guide."  It has instructions for starting ORCA as well as an introduction to creating assembly language programs under ORCA.  The second part is entitled "Operating Environment Reference Manual."  It is a working reference to provide you with in-depth knowledge of the command processor, the editor, the program linker, the program libraries, the resource compiler, the GSBug debugger, and program execution.  Part three is the "Assembler Reference Manual."  It contains information about the assembler directives.  The last part is called the "Macro Reference Manual."  It lists and describes all the macros provided with ORCA.\par This manual is not designed to teach you assembly language programming.  Basic concepts about this type of programming are necessary to create useful, efficient programs.  If you are new to assembly language programming, pick up a beginner's book on this subject on your next visit to your computer store.  See the reading list at the end of the preface for some suggestions.\par If you are new to ORCA, start at the beginning and carefully read the "User's Manual."  It was written with you in mind.  Work all the examples, and be sure that you understand the material in each chapter before leaving it.  ORCA is a big system, and like any sophisticated tool, it takes time to master.  The large size of this manual is a reflection of the power ORCA can offer you.\par }\pard \qj\widctlpar\adjustright {\f4\fs20  \par }{\b\f4 Visual Cues}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Visual Cues\tcl3}}}{\b\f4 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In order to delineate between information that this manual provides and characters that you type or characters that appear on your computer screen, special type faces are used.  When you are to enter characters, the type face }{\b\f6\fs18 looks like this}{\b\f6\fs20 .  }{\f4\fs20 When you are supposed to notice characters displayed on the computer screen}{\f6\fs20  }{\f6\fs18 they look like this}{\f6\fs20 .\par }\pard \qj\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 What You Need}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 What You Need\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 system requirements}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In order to use ORCA, you must have the following hardware and software.  A list of Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  manuals that you will find useful is given at the end of the preface.\par }\pard \qj\widctlpar\tx450\adjustright {\f4\fs20 \par }\pard \qj\fi-274\li720\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab An Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  computer. \par \par \bullet \tab A minimum of 1.25M of RAM if your Apple IIGS uses ROM 01, or a minimum of 1.125M if your Apple IIGS uses ROM 03.\par \par \bullet \tab A 3.5 inch disk containing the ORCA system.\par \par \bullet \tab At least one 3.5 inch disk drive.  However, it  is strongly recommended that you have two 3.5 inch disk drives, or one 3.5" disk and a hard disk.\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The following hardware is highly recommended, especially if you intend to do multiple-language development or to develop large programs:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-274\li720\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab A hard disk.\par \par }\pard \qj\fi-280\li720\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab A printer.\par \par \bullet \tab 2M or more of RAM.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Additional Reading And Reference}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Additional Reading And Reference\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\v\f4\fs20 .;}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Apple Computer, Inc.}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Books about about the 65816 (the microprocessor used in the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 ) are available from several publishers; a few are listed below.  There are several manuals published by Apple Computers which provide you with additional knowledge of the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  computer.  Depending upon your applications you may need to refer to some of these manuals.  For your convenience, a reading list is supplied listing the available Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  reference manuals.\par }\pard \qj\widctlpar\tx450\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Reading List}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Reading List\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The following books introduce assembly language programming and how it relates to the 65816.  Some are good for beginners, others are best for advanced programmers.  You should visit your bookstore to pick out the one best suited for your needs.  The source code used in these books was generated from ORCA.\par \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\v\f4\fs20 .;}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Scanlon, Leo J.}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65802\:cpu}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:cpu}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:cpu}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\i\f4\fs20 Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Assembly Language Programming\par }\pard \qj\keepn\widctlpar\tx450\adjustright {\f4\fs20 Leo J. Scanlon\par Bantam Books, Toronto, New York, London, Sydney, Auckland\par }\pard \qj\widctlpar\tx450\adjustright {\pard\plain \qj\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Labiak, William}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\i\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Programming the 65816\par }{\f4\fs20 William Labiak\par SYBEX, Berkley, California\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Eyes, David}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Lichty, Ron}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Programming the 65816\par Including the 6502, 65c02, and 65802\par }{\f4\fs20 David Eyes and Ron Lichty\par Brady Prentice Hall Press, New York, New York\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Fischer, Michael}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Programming the Apple IIGS in Assembly Language\par }{\f4\fs20 Ron Lichty and David Eyes\par Brady Prentice Hall Press, New York, New York\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Fischer, Michael}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 65816/65802 Assembly Language Programming\par }{\f4\fs20 Michael Fischer\par }\pard \qj\widctlpar\adjustright {\f4\fs20 Osborne McGraw-Hill, Berkley, California\par \par The following books are in the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  Technical Manual Suite.  These books are written by the staff at Apple Computer, Inc., and published by Addison-Wesley.\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20  computer}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\keep\widctlpar\adjustright {\i\f4\fs20 Technical Introduction to the Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 A good basic reference source for the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Hardware Reference\par Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Firmware Reference\par }\pard \qj\widctlpar\adjustright {\f4\fs20 These manuals provide information on how the Apple IIGS works.\par \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Programmer's Introduction to the Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20 \par }{\f4\fs20 Provides programming concepts for the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 .\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 GS}{\v\f4\fs20 }}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Toolbox Reference Volume I\par Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Toolbox Reference Volume II\par Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Toolbox Reference Volume III\par }{\f4\fs20 These volumes provide essential information on how tools work.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 16}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  ProDOS 8 Reference\par Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  ProDOS 16 Reference\par GS/OS\u8482\'aa Reference Manual\par }\pard \qj\widctlpar\adjustright {\f4\fs20 These manuals provide essential information on file operations.\par }{\sect }\sectd \sbkodd\pgnrestart\linex-32767\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 User's Manual\par }}{\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 1: Getting Started\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\headerf \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\fi-450\li450\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 1}{\b\f4\fs28 \par }\pard \qc\widctlpar\adjustright {\b\f4\fs36 Getting Started \par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 1 \endash  Getting Started\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This chapter gives you a brief overview of ORCA by stepping through the development of a simple program.  Only the most commonly used commands and features are described in this chapter.  Do not be concerned about features mentioned that you are unfamiliar with.  Future chapters will cover all the topics covered in this chapter in much more detail.  You will be introduced to the three main programs contained in ORCA.  The topics covered are:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li446\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab How to enter and execute ORCA shell commands.\par \par \bullet \tab How to use the text editor. \par \par \bullet \tab How to assemble and link an example program.\par \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\b\f4\fs28 The ORCA Shell}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The ORCA Shell\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The shell, or command processor, is the interface between you and ORCA.  It is through this shell that you command ORCA to start an editing session, manipulate files and directories, or to compile and link a program.  When ORCA starts up, it is the shell program that becomes active, waiting for and then responding to your commands.  In this chapter only a brief discussion of the shell is given.  You will learn more about the ORCA shell in Chapter 2.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Shell Commands}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Shell Commands\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell prompt}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prompt\:see shell prompt}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file not found error}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 As stated above, the shell is a resident program when ORCA is active.  You will know that the shell is running by the pound sign (#) that is used for the shell prompt.  At this point go ahead and start up ORCA if you have not already done so.  You should see the prompt on the left-hand edge of the screen.  When you see }{\f6\fs20 #}{\f4\fs20 , ORCA is waiting for a command.  Shell commands are contained in a command table internal to ORCA.  When you enter a command, ORCA checks this table against your command.  If ORCA can't find the command, it checks the current directory for a file by the name typed.  If one is found, it is executed.  If a file is not found, the shell will respond with the message }{\f6\fs18 "File not found: <file name>"}{\f4\fs20 .  The file name listed will be the full path name of the program the shell tried to execute.  (Note:  If you are not familiar with files and directories, please see the first three pages of Chapter 5.)\par In preparation for the sample program, you will need to enter a couple of shell commands.  The program is in assembly language, so you have to tell ORCA to expect an assembly language program.  This is accomplished by the command\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASM65816\:command}}}{\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 \par asm65816}{\b\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Another thing you should tell ORCA is the directory you will want the sample program contained in.  As an example, suppose the name of the volume you wanted was myprogs.  Then the command you would give ORCA would be\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PREFIX command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\f4\fs20 \par }\pard \li450\widctlpar\adjustright {\b\f6\fs18 \par prefix :myprogs}{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par This command causes the current directory to be changed to :myprogs.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Your next step is to use the editor and enter the sample program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Editor}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Editor\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par The ORCA editor is a full-screen text editor, with considerable text-manipulation facilities.  With the editor you can create new files or edit old ones.\par \par }\pard \qj\keepn\widctlpar\tx450\tx720\adjustright {\b\f4 Calling The Editor}{\pard\plain \qj\keepn\widctlpar\tx450\tx720\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Calling The Editor\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\f4\fs20 \par At this point you should still be in the shell.  To invoke the editor you need to give ORCA the EDIT command with the name of the file you want the program source to be in.  For example, if you want to have the sample program in a file named hello.asm you would enter\par }\pard \qj\keepn\widctlpar\tx450\adjustright {\f4\fs20 \par }\pard \li450\keepn\widctlpar\adjustright {\b\f6\fs18 edit Hello.asm}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:status banner}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor movement}}}{\v\f4\fs20  }{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:DELETE key}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:TAB key}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:arrow keys}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:RETURN key}}}{\v\f4\fs20 \par }\pard \qj\keep\widctlpar\tx450\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 While you can use any legal file name for your program, following a few simple naming conventions will pay off in the long run.  Until you know enough about how the system works to see all of the various files it creates, we suggest choosing a name for your program that is relatively short, and in no case longer than nine characters.  The name of the source file (the program you type in using the editor) should be the name of the program, followed by the letters '.asm'.  In this example, the name of the program will be hello, so the name of the program we create with the editor is hello.asm.\par After typing this command, the editor will become active.  You should see a clear screen with a banner at the bottom.  This banner will give you useful information about the cursor location, what file you are editing and what type of editing you are doing.  The cursor will be located in the upper corner of the screen in column one, line one.  In order to move the cursor around, there are some keys that will provide movement of the cursor.  Any character key will display its respective character when pressed and then move the cursor into the next column to the right.  The delete key will move the cursor back to the left, erasing characters as it goes.  The tab key will move the cursor in a predetermined manner.  The first tab is set for column ten. The second tab is located at column sixteen.  These tab positions make it easy to enter assembly language programs.  The arrow keys will move the cursor around as indicated by each key.  The return key will move to the beginning of the next line.  If you make a mistake in typing, position the cursor at the error and type over it.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Go ahead and start up an editor session and enter the sample program given below.\par }\pard \qj\widctlpar\tx450\adjustright {\pard\plain \qj\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tx1440\tx2160\adjustright {\f6\fs18            \tab \par }\pard \qj\fi540\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab \tab keep\tab Hello\par             \tab mcopy\tab Hello.Macros\par      Main\tab start\par             \tab phk\par             \tab plb\par              \tab puts\tab #'Hello world!',cr=t\par              \tab lda \tab #0\par              \tab rtl\par }\pard \qj\fi540\widctlpar\tx1440\tx2160\adjustright {\f6\fs18             \tab end\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The format of the program is important.  Make sure there is at least one space between op codes and operands - e. g. between KEEP and HELLO.  Be sure labels, like MAIN, start in the first column, and that operation codes, like PHK, don't.  There must be at least one space between MAIN and START.  Do not put any spaces, except within quotes, in the operand - e.g. don't put a space between 'Hello, World!' , and cr=t.  The easiest way to get a clean listing is by using the predefined tab stops.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:quit command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:save command}}}{\v\f4\fs20 \par }{\f4\fs20 Press }{\outl\f4\fs20 \u-3\'f0}{\b\f4\fs20 S}{\f4\fs20  to save your file, then }{\outl\f4\fs20 \u-3\'f0}{\b\f4\fs20 Q}{\f4\fs20  to quit the editor.\par }\pard \qj\fi360\widctlpar\tx450\adjustright {\f4\fs20 The discussion of the editor was very simplified.  It was only an example to get you started.  You will learn more about the editor in Chapter 3.\par For the most part, we'll leave a discussion of the program itself for Chapter 4, but you can see more in the way of the naming convention mentioned earlier in this program.  The first line tells the assembler to keep the program using the file name Hello; this will be the name of the finished, executable program.  The second line tells the assembler that it will use a macro file called Hello.Macros.  As you can see, this means there will be at least three files associated with your program, but using a naming convention lets you quickly see that all three files belong to the program Hello, and clearly marks one file as the assembly language source file (the one ending with .asm) and another as the macro file (the one ending in .macros).  The macro file doesn't exist yet; we'll create it in the next section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Assembling and Linking a Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Assembling and Linking a Program\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 multiple languages}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object module format}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA uses a single format for object files and a single set of commands for compiling or assembling programs written in any source language.  Therefore, you can write different modules or routines of your program in different languages, and compile, link, and run the program all in one step.  For the vast majority of programs written in the ORCA environment, the compiler and linker defaults are quite adequate.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MacGen utility}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\adjustright {\f4\fs20 Since this is an ORCA assembly language program that uses macros, you have to create a macro file for use by the assembler.  To create a macro file for your program, you need to know three things:  the name of your program's source file, in this case hello.asm; the name of the macro file you want to create, in this case hello.macros; and the location of the macro library files you would like to scan.  Where the macros are depends on whether you are running on a hard disk or from floppies.\par \par }\pard \qj\keepn\widctlpar\tx1440\adjustright {\b\f4\fs20 From a Hard Disk\par }\pard \qj\fi360\keepn\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\adjustright {\f4\fs20 The macro library files that come with ORCA/M are moved to the ORCA libraries folder when you install ORCA/M on your hard disk.  There are actually two macro folders.  The first, AInclude, contains the macros and equate files that Apple Computer ships with Apple Programmer's Workshop (APW).  The other folder, called ORCAInclude, contains the various macros described in this manual, plus macros for Apple's toolbox that allow you to use parameters.\par Our program uses some of the output macros from the ORCA/M macro library, located in the folder ORCAInclude.  To create the macro file Hello.Macros, enter the following command:\par }\pard \fi360\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \widctlpar\tx360\adjustright {\b\f6\fs18 \tab macgen hello.asm Hello.Macros 13:orcainclude:m=\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This command uses a utility called MacGen.  This utility reads your assembly language program, which is the first file name you enter, looking for any instructions that are not 65816 assembly language instructions or predefined assembler directives.  It creates a macro file called Hello.Macros, reading the macros from the files in the ORCAInclude macro library.  All macros supplied with ORCA/M, both those we wrote and the ones Apple wrote, are in files with a file name starting with the letter M.  The command you just typed in tells MacGen to look at all files in the folder that have a first character of M in the file name, so MacGen will scan all of the libraries until it finds the macros it needs.\par }\pard \qj\fi360\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\adjustright {\b\f4\fs20 From Floppy Disks\par }\pard \qj\fi360\keepn\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\adjustright {\f4\fs20 The macro library files that come with ORCA/M are located on the Extras disk.  It would be better to put them in the libraries folder of the ORCA disk, but there isn't room for everything we would like to put on the ORCA disk.\par You have several options for dealing with the macros, but they boil down to three real possibilities:  either delete some files from the copy of the ORCA disk you are using to make room for the macro libraries on your ORCA disk; or copy the macros to the same disk you are using to save your program's source files; or if you have two 3.5 inch disk drives plus another drive for your programs, put both the ORCA disk and the Extras disk in the drives at the same time.  If you decide you want to copy the macro files to the disk where your program's source code is located, keep in mind that you can copy only those files you need.  For this example, you only need the file :ORCA.Extras:Libraries:ORCAInclude:M16.ORCA.  (The full path name will help you find the specific file we're using, but you can put the M16.ORCA file anywhere you like.)\par The macros supplied with ORCA/M are on the Extras disk, located in the folders :ORCA.Extras:Libraries:AInclude and :ORCA.Extras:Libraries:ORCAInclude.  The folder  AInclude contains the macros and equate files that Apple Computer ships with Apple Programmer's Workshop (APW).  The ORCAInclude folder contains the various macros described in this manual, plus macros for Apple's toolbox that allow you to use parameters.\par For the rest of this section, we'll assume that the M16.ORCA file has been moved to the same disk where you have saved hello.asm.  If it is on another disk, substitute the full path name for the m= parameter in this example.\par To create the macro file Hello.Macros, enter the following command:\par }\pard \fi360\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \widctlpar\tx360\adjustright {\b\f6\fs18 \tab macgen hello.asm Hello.Macros m=\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This command uses a utility called MacGen.  This utility reads your assembly language program, which is the first file name you enter, looking for any instructions that are not 65816 assembly language instructions or predefined assembler directives.  It creates a macro file called Hello.Macros.  All macros supplied with ORCA/M, both those we wrote and the ones Apple wrote, are in files with a file name starting with the letter M.  The command you just typed in tells MacGen to look at all files that have a first character of M in the file name, so MacGen will scan all of the macro files in the current folder until it finds the macros it needs.\par \par }\pard \qj\keepn\widctlpar\tx1440\adjustright {\b\f4\fs20 Assembling the Program\par }\pard \qj\fi360\keepn\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To assemble, link, and execute the program, enter:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }{\b\f6\fs18 \par }\pard \qj\li450\widctlpar\adjustright {\b\f6\fs18 run hello.asm}{\b\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Following the diagnostic output of the the assembler and linker, the words }{\f6\fs18 Hello world!}{\f4\fs20  should be written to the screen.  If not, check your source file for errors and try again.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 While it doesn't take long to assemble or link the program, you may have noticed a delay as the assembler and linker were loaded from disk.  Once loaded, the assembler and linker stay in memory unless the memory is needed for some other purpose.  The next time you assemble and link a program, or use MACGEN or the editor, for that matter, the program will not need to be loaded from disk, so things will go much faster.\par You now have a file on your work disk called Hello.  To execute this program again, without reassembling the program, enter }{\b\f6\fs18 hello}{\f4\fs20  from the ORCA shell command line.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 User's Manual\par }}{\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 2: The Shell\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\headerf \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 2\par The  Shell\par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 2 \endash  The Shell\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This chapter is an introduction to using the shell.  In the first chapter, you learned that the shell was the interface between you and ORCA.  Now you will learn how to use a few commands and shell features.  Go ahead and start up ORCA if you have not already.  Topics you will learn about in this chapter are:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab The shell commands.\par \par \bullet \tab The shell line editor.\par \par \bullet \tab Listing a directory.\par \par \bullet \tab Displaying the contents of a file.\par \par \bullet \tab Changing a file's language.\par \par \bullet \tab Using wildcards in file names.\par \par \bullet \tab Required and optional parameters.\par \par \bullet \tab Types of commands.\par \par \bullet \tab How to set up a printer.\par \par \bullet \tab Printing a file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\widctlpar\adjustright {\b\f4\fs28 The Shell Commands}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Shell Commands\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command table}}}{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HELP command}}}{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 commands}{\txe (See shell commands)}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par In Chapter 1, it was mentioned that when you enter commands while in the shell, ORCA  checks the command against the command table.  If you entered a valid command, the command would be executed.  Table 2.1 gives a listing of the commands in the command table, as listed by the HELP command.  Go ahead and examine the table - some of the entries will probably look familiar to you.\par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \li360\keep\keepn\widctlpar\adjustright {\f6\fs18 Available Commands:\par \par }\pard \li360\keep\keepn\widctlpar\tx540\tx1620\tx2790\tx3870\tx4860\tx5940\adjustright {\f6\fs18 ALIAS\tab ASM65816\tab ASML\tab ASMLG\tab ASSEMBLE\tab BREAK      \par CAT\tab CATALOG\tab CHANGE\tab CMPL\tab CMPLG\tab COMMANDS   \par COMPACT\tab COMPILE\tab COMPRESS\tab CONTINUE\tab COPY\tab CREATE\par CRUNCH\tab DELETE\tab DEREZ\tab DEVICES\tab DISABLE\tab DISKCHECK\par DUMPOBJ\tab ECHO\tab EDIT\tab ELSE\tab ENABLE\tab ENTAB\par END\tab ERASE\tab EXEC\tab EXECUTE\tab EXISTS\tab EXIT\par EXPORT\tab EXPRESS\tab FILETYPE\tab FOR\tab GSBUG\tab HELP\par HISTORY\tab HOME\tab IF\tab INIT\tab INPUT\tab LINK\par LINKER\tab LOOP\tab MACGEN\tab MAKEBIN\tab MAKELIB\tab MOVE\par NEWER\tab PREFIX\tab PRODOS\tab QUIT\tab RENAME\tab RESEQUAL\par REZ\tab RUN\tab SET\tab SHOW\tab SHUTDOWN\tab SWITCH\par TEXT\tab TOUCH\tab TYPE\tab UNALIAS\tab UNSET\tab *\par }\pard \keep\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Table 2.1   The ORCA Shell Commands \par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 Listing a Directory}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Listing a Directory\tcl2}}}{\b\f4\fs28 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA disk}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CAT command}{\txe (See CATALOG command)}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In order to inspect a directory for the files or subdirectories it contains, you would issue the }{\scaps\f4\fs20 catalog}{\f4\fs20  command.  For example, if you wanted to inspect the :ORCA directory, enter the command\par \par }\pard \fi360\widctlpar\adjustright {\b\f6\fs18 catalog :orca\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Go ahead and try the }{\scaps\f4\fs20 catalog}{\f4\fs20  command now.  The directory listing for your ORCA program disk will look similar to the directory listing displayed in Table 2.2.  Don't be alarmed if the directory you display is not identical to the one in the table.  The heading of the directory listing gives attributes for each directory entry.  \par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \fi180\widctlpar\adjustright {\f6\fs18 :ORCA:=\par \par Name            Type  Blocks  Modified        Created         Access  Subtype\par \par ORCA.Sys16      S16      156 15 Oct 91       15 Oct 91         DNBWR   $DB01\par Shell           DIR        1 15 Oct 91       15 Oct 91         DNBWR   $0000\par Languages       DIR        1 15 Oct 91       15 Oct 91         DNBWR   $0000\par Libraries       DIR        1 15 Oct 91       15 Oct 91         DNBWR   $0000\par Utilities       DIR        1 15 Oct 91       15 Oct 91         DNBWR   $0000\par Icons           DIR        1 15 Oct 91       15 Oct 91         DNBWR   $0000\par Samples         DIR        1 15 Oct 91       15 Oct 91         DNBWR   $0000\par \par Blocks Free:     37      Blocks used:   1563      Total Blocks:   1600\par }\pard \fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Figure 2.2  Sample Listing Produced by the CATALOG Command\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\scaps\f4\fs20 catalog}{\f4\fs20  command gives a lot of information about the listed directory.  Don't be concerned if you don't know what every attribute in this listing means; further reading will explain them.  Chapter 12 has the information summarized if you are interested in reading it now.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TYPE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 displaying files}{\txe (See the TYPE command)}}}{\v\f4\fs20 \par }{\f4\fs20 To display the contents of a file on the screen, you would issue the TYPE command.  For example, to see what's in the Release.Notes file on the :ORCA.Extras disk, you would first place the extras disk on-line, and then enter the command\par \par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab type :orca.extras:release.notes\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ABORT command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par To pause the display, press any key.  To stop the display, press }{\outl\f4\fs18 \u-3\'f0}{\f4\fs18 .}{\outl\f4\fs18  }{\f4\fs20 (hold down the open-Apple key and then press the period key).\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CHANGE command}}}{\v\f4\fs20 \par }{\f4\fs20 Another useful command is CHANGE.  You would use this command to change the language associated with a file.  ORCA assigns a language to every source and text file.  You can see a file's language by doing a CATALOG of the file's directory, and examining the SUBTYPE field of the catalog heading.  For example, suppose you had created a new file named File.asm with the editor, and after doing a CATALOG of the directory you discovered that the file's subtype was TEXT.  ORCA uses the subtype field to denote a file's language.  You wouldn't be able to assemble File.asm because the assembler insists that its language be ASM65816, and not TEXT.  In order to change File.asm's language, you would use the CHANGE command:\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASM65816\:language}}}{\v\f4\fs20 \par }{\b\f6\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs18 \tab change file.asm asm65816\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Note that the CHANGE command expects a file name as its first parameter, and a language name as its second.  ASM65816 is the name of ORCA's assembler.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Shell Line Editor}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Shell Line Editor\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par When you enter commands in the shell, you can make your typing chores somewhat easier by using the features of the line editor.  The features covered here serve only as an introduction to the line editor.  It will be covered in greater detail in Chapter 5.\par \par }\pard \qj\widctlpar\tx450\adjustright {\b\f4 Entering Commands}{\pard\plain \qj\widctlpar\tx450\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Entering Commands\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:entering}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:command expansion}}}{\v\f4\fs20 \par }{\f4\fs20 \par So far, you have issued commands by typing the entire command name.  It is not necessary for you to type in the entire command, however.  Type in the first letter or first few letters of the command, then press the }{\outl\f4\fs18 RIGHT-ARROW}{\f4\fs20  key (}{\f4\fs18 ->}{\f4\fs20 ).  The shell consults the command table, and prints out the full command name of the first command it finds that matches the letters you typed.  For example, type the following (not pressing the }{\outl\f4\fs18 RETURN}{\f4\fs20  key yet):\par \par }\pard \qj\li720\widctlpar\adjustright {\b\f6\fs18 H}{\b\fs18  }{\b\f4\fs18 ->}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HELP command}}}{\v\f4\fs20 \par }{\f4\fs20 For this example, you will issue the }{\scaps\f4\fs20 help}{\f4\fs20  command.  This is a very useful command in that it gives you instant information about ORCA commands.  The shell finds the first command name in the command table that begins with }{\scaps\f4\fs20 h}{\f4\fs20  and prints the full command name:\par \par }\pard \qj\li720\widctlpar\adjustright {\f6\fs18 HELP}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When you press }{\outl\f4\fs18 RETURN}{\f4\fs20 , the entire command line is sent to the command interpreter, regardless of the location of the cursor on the command line.  Go ahead and try it.  You will get a listing of all the shell commands available to you, as seen in table 2.1.  From here you can use the help command again for each of the command table entries.  For example, if you wanted information on the }{\scaps\f4\fs20 show}{\f4\fs20  command, enter\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHOW command}}}{\v\f4\fs20 \par }\pard \qj\fi360\li720\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\li720\widctlpar\adjustright {\b\f6\fs18 HELP SHOW\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMMENT command}}}{\v\f4\fs20 \par }{\f4\fs20 \par There is one command for which no help is available.  This is the *, or comment, command.  The reason is simple: while ORCA can use any character as a command name, GS/OS will not allow a file named * when using the ProDOS FST.  Since the help file for a command has a file name that matches the command name, a help file for the command * could not be created.\par Spend some time investigating these commands by using the help feature.  Don't forget to use the right arrow!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Scrolling Through Commands}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Scrolling Through Commands\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can press the }{\outl\f4\fs18 UP-ARROW}{\f4\fs20  and }{\outl\f4\fs18 DOWN-ARROW}{\f4\fs20  keys to scroll through the last 20 commands that you have entered.  You can then modify a previous command and press }{\outl\f4\fs18 RETURN}{\f4\fs20  to reenter it.  Each time you enter or reenter a command, that command is appended to the 20-command list, with the first command in the list being lost.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA disk}}}{\v\f4\fs20 \par }{\f4\fs20 To try this out, enter the following sequence of commands.  Be sure your :ORCA disk is on-line.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PREFIX command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\v\f4\fs20 \par }{\b\f6\fs18 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 #prefix :orca\par }{\f6\fs18 #}{\b\f6\fs18 catalog\par }{\f6\fs18 \par }{\f4\fs20 [}{\i\f4\fs20 directory listing printed}{\f4\fs20 ]\par \par }{\f6\fs18 #}{\f4\fs20 [}{\b\f4\fs18 press }{\outl\f4\fs14 UP-ARROW}{\b\f4\fs18  key}{\f4\fs20 ]\par \par }{\f6\fs18 #catalog }{\b\f6\fs18 utilities\par }{\f6\fs20 \par }{\f4\fs20 [}{\i\f4\fs20 directory listing printed}{\f4\fs20 ]\par \par }{\f6\fs18 #}{\f6\fs20 [}{\b\f6\fs18 press }{\outl\f4\fs14 UP-ARROW}{\b\f6\fs18  key}{\f4\fs20 ]\par \par }{\f6\fs18 #catalog utilities}{\b\f6\fs18 :help}{\fs20 \par \par }{\f4\fs20 [}{\i\f4\fs20 directory listing printed}{\f4\fs20 ]\par \par }{\f6\fs18 #}{\f4\fs20 [}{\b\f6\fs18 press }{\outl\f4\fs14 UP-ARROW}{\b\f6\fs18  key}{\f4\fs20 ]\par \par }{\f6\fs18 #catalog utilities:help}{\fs20  [}{\b\f6\fs18 press }{\outl\f4\fs14 UP-ARROW}{\b\f6\fs18  key}{\fs20 ]\par \par }{\f6\fs18 #catalog utilities}{\fs20  [}{\b\f6\fs18 press }{\outl\f4\fs14 UP-ARROW}{\b\f6\fs18  key}{\fs20 ]\par \par }{\f6\fs18 #catalog\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command list}}}{\v\f4\fs20 \par }{\f4\fs20 The 20-command list is circular; that is, once you have used the }{\outl\f4\fs18 UP-ARROW}{\f4\fs20  20 times to scroll through the 20 previous commands, pressing the }{\outl\f4\fs18 UP-ARROW}{\f4\fs20  one more time prints the last command entered again.  Experiment with the command-line scrolling; you will find that this function can save you a lot of time in entering long or complex commands.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Using Wildcards}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Wildcards\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\v\f4\fs20 \par }{\f4\fs20 \par One of the built-in features that works with almost every command in ORCA is wildcards in file names.  Wildcards let you select several files from a directory by specifying some of the letters in the file name, and a wildcard which will match the other characters.  Two kinds of wildcards are recognized, the = character and the ? character.  Using the ? wildcard character causes the system to confirm each file name before taking action, while the = wildcard character simply takes action on all matching file names.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENABLE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DISABLE command}}}{\v\f4\fs20 \par }{\f4\fs20 To get a firm grasp on wildcards, we will use the }{\scaps\f4\fs20 enable}{\f4\fs20  and }{\scaps\f4\fs20 disable}{\f4\fs20  commands.  These commands turn the file privilege flags on and off. The privilege flags can be examined in the catalog command display.  The flags are represented by characters under the access attribute.  See Table 2.1 for an example or enter }{\b\f6\fs18 CATALOG}{\f4\fs20 .  The }{\scaps\f4\fs20 enable}{\f4\fs20  and }{\scaps\f4\fs20 disable}{\f4\fs20  commands are similar to locking and unlocking files from BASIC, but you have more control over the process.  First, disable delete privileges for all files on the :ORCA directory.  To do this, type\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 DISABLE D =\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA disk}}}{\v\f4\fs20 .Sys16 file;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA.Sys16 file}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par Cataloging :ORCA should show that the D is missing from the access column of each directory entry.  This means that you can no longer delete the files. Now, enable the delete privilege for the ORCA.Sys16 file.  Since the ORCA.Sys16 file is the only one that starts with the character O, you can do this by typing\par \par }\pard \qj\fi450\keep\widctlpar\adjustright {\b\f6\fs18 ENABLE D O=\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The wildcard matches all of the characters after O. \par What if you want to specify the last few characters instead of the first few?  The wildcard works equally well that way, too.  To disable delete privileges for the ORCA.Sys16, you can specify the file as =sys16.  It is even possible to use more than one wildcard.  You can use =.= to specify all files that contain a period somewhere in the file name.  Or, you could try m=.=s to get all files that start with an M, end in an S, and contain a period in between.  As you can see, wildcards can be quite flexible and useful. \par To return the :ORCA disk to its original state, use the command\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 ENABLE D ?\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This time, something new happens.  The system stops and prints each file name on the screen, followed by a cursor.  It is waiting for a Y, N or Q. Y will enable the D flag, N will skip this file, and Q will stop, not searching the rest of the files.  Give it a try! \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MOVE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\v\f4\fs20 \par }{\f4\fs20 Four minor points about wildcards should be pointed out before you move on.  First, not all commands support wildcards every place that a file name is accepted.  The }{\scaps\f4\fs20 assemble, link}{\f4\fs20  and }{\scaps\f4\fs20 run}{\f4\fs20  commands don't allow them at all, and }{\scaps\f4\fs20 rename,}{\f4\fs20  }{\scaps\f4\fs20 copy, }{\f4\fs20 and }{\scaps\f4\fs20 move}{\f4\fs20  allow them only in the first file name. Secondly, wildcards are only allowed in the file name portion, and not in the subdirectory part of a full or partial path name.  For example, :=:STUFF is not a legal use of a wildcard.  The next point is that not all commands respect the prompting of the ? wildcard.  }{\scaps\f4\fs20 catalog}{\f4\fs20  does not, and new commands added to the system by separate products may not.  (Later, you will look at how commands can be added to the system.) Finally, some commands allow wildcards, but will only work on one file. }{\scaps\f4\fs20  edit}{\f4\fs20  is a good example.  You can use wildcards to specify the file to edit, but only the first file that matches the wildcard file name is used. \par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Required and Optional Parameters}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Required and Optional Parameters\tcl2}}}{\b\v\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:parameters}}}{\v\f4\fs20 \par }{\f4\fs20 \par There are two kinds of parameters used in commands, required and optional.  If you leave out an optional parameter, the system takes some default action.  For example, if you use the }{\scaps\f4\fs20 catalog}{\f4\fs20  command without specifying a path name, the default prefix is cataloged.  An example of a required parameter is the file name in the }{\scaps\f4\fs20 edit}{\f4\fs20  command:  the system really needs to have a file name, since there is no system default.  For all required parameters, if you leave it out, the system will prompt for it.  This lets you explore commands, or use commands about which your memory is vague, without needing to look them up. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Types of Commands}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Types of Commands\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:command types}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:built-in commands}}}{\v\f4\fs20 \par }{\f4\fs20 \par Although they are all used the same way, there are really three distinct kinds of commands supported by ORCA.  The first kind is the built-in command; that is the kind you are probably most familiar with.  The code needed for a built-in command is contained right in the shell, so it is always available.  This is the type of command supported by }{\scaps\f4\fs20 basic}{\f4\fs20  under both DOS and ProDOS.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:language commands}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 multiple languages}}}{\v\f4\fs20 \par }{\f4\fs20 A second kind of command is the language.  ORCA is set up to support multiple languages.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:utility commands}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INIT command}}}{\v\f4\fs20 \par }{\f4\fs20 The last kind of command is the utility.  Utility commands are commands that use a separate program to do their function.  }{\scaps\f4\fs20 INIT}{\f4\fs20 , which is used to format a disk, is an example. When you use a utility command, ORCA must find and load a completely separate program.  The reason that utility commands are used at all is to be able to add commands to the system that may need to change more rapidly than the shell.  In addition, you will be able to add your own commands to the system.  This is discussed more fully in Chapter 9. \par }\pard \widctlpar\adjustright {\f4 \sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 3: The Editor\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 3\par The Editor\par }\pard \widctlpar\adjustright {\f4\fs18 \par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 3 \endash  The Editor\tcl1}}}{\f4\fs20 {\*\bkmkstart bk1}\par }{\f4\fs18 \par \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f4\fs20 Chapter 1 provided you with only a taste of the features provided by the ORCA editor.  In this chapter we will cover the editor features in much greater detail.  As new editor features are covered, there are topical examples for you to try.  Topics covered in this chapter are:\par \par \bullet \tab Editor modes.\par \par \bullet \tab Entering text.\par \par \bullet \tab Moving through a file.\par \par \bullet \tab Modifying text.\par \par \bullet \tab Search / search and replacement.\par \par \bullet \tab Cut, copy, paste.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The editor has over fifty commands.  Many of the features will not be covered now.  When you complete this chapter, you may want to look through Chapter 13, which covers all of the editor features.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Starting The Editor}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Starting The Editor\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\v\f4\fs20 \par }{\f4\fs20 \par In order to work through all of the commands covered in this chapter, a file with a fair amount of text will be needed so that you can see how the commands work.  For this purpose, we will use an existing file which contains some type declarations for the resource compiler.  This file will be important when you start writing programs, so we will need to exercise some care.  When it comes time to exit the editor, }{\f4\fs20\ul don't}{\f4\fs20  save the changes!  The last section of this chapter will guide you through closing the file.  If you are nervous, remember that you are working from a copy of the original disk, so you can always go back to the original if you mess up.  You can also write protect your disk while you work through this chapter, but remember to set the write protect tab back so the disk can be modified before moving on to future chapters.\par Let's get started.  Go ahead and start up the editor with the command\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 edit 13:rinclude:types.rez\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Help}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Help\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:help command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par At any time, you can press }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 ?, which causes the editor to display a help file.  This file has a brief}{\f4\fs20\ul  }{\f4\fs20 list of the commands available in the editor.  You can use the cursor movement commands, like the arrow keys, to scroll through the help file.  }{\outl\f4\fs18 RETURN}{\f4\fs20  or }{\outl\f4\fs18 ESC}{\f4\fs20  returns you to the file you are editing.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs28 Editor Modes}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Editor Modes\tcl2}}}{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:status banner}}}{\v\f4\fs20 \par }{\f4\fs20 \par With the editor running, you will see an eighty-column screen with text displayed on twenty-two lines.  At the bottom of the screen is a reverse-video banner containing the current editor mode.  You should see the message }{\f6\fs18 Mode: EDIT}{\f4\fs20 .  The editor has several modes which, when activated, will allow you to use different editing features.  There are five other modes in addition to the edit mode.  In this chapter we will only cover four modes: edit, escape, insert, and select.  The features associated with these modes will be introduced later in this chapter.  The two modes not discussed in this chapter are auto indent and hidden characters.  These are covered in Chapter 13.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Entering Text}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Entering Text\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The edit mode is where you will do most of the text entry.  Also, most of the commands are active in the edit mode.  Having just started the editor, the cursor is positioned at the start of line one.  Go ahead and enter a few words.  As you enter text, the cursor will over-strike any characters it encounters.  Keep typing characters.  When you get to the edge of the screen, the editor will shift over, showing several new columns of text.  The ruler at the bottom of the page shows that you are now past column 80.  You can keep going this way until you get to column 255, when the line will automatically wrap.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Moving Through A File}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Moving Through A File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par There are many ways to move through a file.  We should classify the range of movement in order to present the commands in a rational order.  Let's say that:\par \par }\pard \qj\fi-2070\li2520\widctlpar\tx2520\adjustright {\f4\fs20 Small movement      -\tab a few characters or lines\par \par Medium movement   - \tab moving the range of the display screen (a page)\par \par Large movements      - \tab from the start and end of the file\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Let's start small and work up.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Small Movements}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Small Movements\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:TAB key}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:RETURN key}}}{\f4\fs20 {\*\bkmkstart bk0}\par For assembly language programming, one of the most frequently used movement commands is the }{\outl\f4\fs18 TAB}{\f4\fs20  key.  Press }{\outl\f4\fs18 RETURN}{\f4\fs20  to move the cursor to the start of a line.  Now press the }{\outl\f4\fs18 TAB}{\f4\fs20  key.  Notice the column position of the cursor.  The tab stops are set at columns ten, sixteen, and forty-one.  By pressing }{\outl\f4\fs18 \u-3\'f0TAB}{\f4\fs20 , you can move back a tab stop.  These tab stops are set for entering assembly language programs.  You can change the stops to best suit you.  See pages 154 and 155.\par If you use the }{\outl\f4\fs18 TAB}{\f4\fs20  key in insert mode, which we'll cover in a moment, or if you use the }{\outl\f4\fs18 TAB}{\f4\fs20  key while you are past the last character on the line, it no longer just moves the cursor.  Instead, a tab character is inserted in the text file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:arrow keys}}}{\v\f4\fs20 \par }{\f4\fs20 The arrow keys are great for moving a few characters to the right and left, or moving between a couple of lines up and down.  These keys are really easy to use: the direction of cursor movement is on the key.  Hold an arrow key down for automatic repeat.  Go ahead and experiment with these keys.  You could use these keys to move anywhere in the file.  But you don't have to \endash  there are better ways!\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:end of line command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:start of line command}}}{\v\f4\fs20 \par }{\f4\fs20 Two commands let you move to the start or end of a line.  To move the cursor to the end of a line, use the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 >, the end-of-line command.  To move the cursor back to the start of  a line, enter the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 <, the start-of-line command.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Medium Movement}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Medium Movement\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In this range of movement, you will learn how to move to the top and bottom of a page.  As stated earlier, a page is the amount of text visible on your display screen.  There are two commands which will let you move the cursor to the top and bottom of the page.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:top of page command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:bottom of page command}}}{\v\f4\fs20 \par }{\f4\fs20 The top of page command, }{\outl\f4\fs18 \u-3\'f0UP-ARROW}{\f4\fs20 , will move the cursor to the first line of the page.  Go on and give it a try.  Notice that the cursor remained in the column it started in.  To move the cursor to the bottom of a page, use }{\outl\f4\fs18 \u-3\'f0DOWN-ARROW}{\f4\fs20 .  This command will move the cursor to the last line of the page, the cursor again remaining in the column it started in.  There is an extra feature associated with these two commands.  Use the }{\outl\f4\fs18 \u-3\'f0}{\outl\scaps\f4\fs18 DOWN-ARROW}{\f4\fs20  command to position the cursor on the bottom line of a page.  Now use the }{\outl\f4\fs18 \u-3\'f0DOWN-ARROW}{\f4\fs20  command a second time.  Examine the line count.  It has increased by twenty-two lines!  What happened is that use of }{\outl\f4\fs18 \u-3\'f0DOWN-ARROW}{\f4\fs20  when the cursor is on the last line of a page will cause the next page to be displayed, and the cursor to be moved to the last line on that page (while preserving the horizontal position of the cursor).  Position the cursor on the top line of the current screen and try the }{\outl\f4\fs18 \u-3\'f0UP-ARROW}{\f4\fs20  command.  It works in the same way.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Large Movements}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Large Movements\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 As files become larger, you will find the commands which perform large movements convenient.  There are two methods to span a large distance in the file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:scrolling}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:escape mode}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:repeat counts}}}{\v\f4\fs20 \par }{\f4\fs20 The first method is called scrolling.  Scrolling is by a line or page.  Let's start with line scrolling.  To use the line scroll command, you need to be in escape mode.  By the name, you can see it involves the escape key }{\outl\scaps\f4\fs20 ESC}{\f4\fs20 .  You enter escape mode by pressing }{\outl\f4\fs18 ESC}{\f4\fs20 .  You can exit the mode by pressing }{\outl\f4\fs18 ESC}{\f4\fs20  a second time.  This is called toggling the mode.  When an escape mode command is used in this manual, we will assume that you will return to the edit mode when you finish the command.  Back to the line scroll command.  Go ahead and enter the command }{\outl\f4\fs18 ESC\u-3\'f0}{\f4\fs20 \}.  Did you notice what happened?  The screen scrolled up one line.  "Big deal," you say.  "I could use the }{\outl\f4\fs18 RETURN}{\f4\fs20   key for that."  Well, here is where escape mode commands become interesting.  Integrated with every escape mode command is the repeat count feature.  Try the command }{\outl\f4\fs18 ESC}{\f4\fs20 10}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \}.  The cursor moved down ten lines!  You can specify any integer in the range 1 to 32767 in any escape mode command.  Try it with the scroll up command, }{\outl\f4\fs18 ESC}{\f4\fs20 10}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \{.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:scroll down one page command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:scroll up one page command}}}{\v\f4\fs20 \par }{\f4\fs20 There are also commands that scroll one page without changing the position of the cursor.  Try the command to scroll down one page, }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 ].  It has increased the line count by twenty-two lines.  Let's try something completely different.  This file we have been using is not long (about 550 lines) so let's try to scroll past the end of the file.  If we give the command to scroll 300 pages, it would be past the end of the file.  Go ahead and enter }{\outl\f4\fs18 ESC}{\f4\fs20  300}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 ] and watch what happens.  The editor would let us scroll past the end of the file.  Now try scrolling past the start of the file.  Enter the command }{\outl\f4\fs18 ESC}{\f4\fs20 500}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 [ and notice what happens.  In this case the editor stopped us from going past the beginning of the file, and placed the cursor on the first line of the file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:moving through file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:escape mode}}}{\v\f4\fs20 \par }{\f4\fs20 Another command for large movement allows you to move between eight even intervals in the file.  The editor has divided our file into eight approximately equal sections.  Using the screen move commands, you can move to the boundaries between these sections.  Let's see how these commands work.  Go ahead and enter the command }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 1, and then the command }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 9.  The cursor first jumped to the first character in the file, and then jumped to the last character in the file.  These two positions are the boundaries before the first section and after the eighth section.  Try the command sequence }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 2 through}{\outl\f4\fs20  }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 8 in order to get a feel for these commands.  Notice the cursor position after each command.  Also, note that these commands are not available in the ESC mode.{\*\bkmkend bk0}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor movement}{\rxe bk0}}}{\f4\fs20 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Modifying Text}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Modifying Text\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Most of the work that you will do in the editor will be changing existing files.  There are several methods available to you.  The most often used features are deleting and inserting text.  Using these two features, any type of modification to a file could be made.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Deleting Text}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Deleting Text\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par There several commands for deleting text; only those most commonly used will be discussed here.  The amount of text you need to delete will determine the command you use.  Let's go through some of the delete commands available to you, starting with minor deletions of a character or two and working up to many lines.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:DELETE key}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete current character command}}}{\f4\fs20 \par You may have already used the first delete command, which is the the delete key, or }{\outl\f4\fs18 DELETE}{\f4\fs20 .  When you press this key in the edit mode, the cursor will move one column to the left, removing the character which occupied the position to the left of the cursor.  Similar to the delete command is the command to delete a character at the cursor.  This command is }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 F.  When this command is given, the character covered by the cursor is deleted and the remainder of the line is moved one position to the left.  Go ahead and try these commands.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete to end of line command}}}{\f4\fs20 \par The two commands covered above are fine for deleting a few characters; it would be nice to be able to delete an entire line.  This next command deletes text from the cursor to the end of the line.  Choose a line in the file which contains some characters.  Position the cursor about half way in the line and press the command }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 Y.  The command caused all of the text from the cursor to the end of the line to be deleted.  Now, position the cursor on the first position of the line and repeat the command.  What happens?  The editor deletes all of the characters from the line.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete line command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:repeat counts}}}{\f4\fs20 \par If you want to delete more than one line, use the delete line command.  Go ahead and position the cursor at the start of the file.  Enter the command }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 T.  Only one line is removed from the file.  The command is also available from escape mode, where you may enter a repeat count number and remove as many lines as needed.  Try this command out.  Be sure and leave some of the file for the next sections!\par There is another way to delete text that involves selection the text you want to delete; this will be covered later.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Inserting Text}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Inserting Text\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:insert one space command}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:repeat counts}}}{\v\f4\fs20 \par }{\f4\fs20 \par Our first insert command will allow us to insert spaces.  Place the cursor between two characters and enter the command }{\outl\f4\fs18 \u-3\'f0SPACE}{\f4\fs20 .  A space will now separate the two characters.  You could use the automatic repeat count in the escape mode and enter as many spaces as needed.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:insert blank line command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:repeat counts}}}{\v\f4\fs20 \par }{\f4\fs20 The second  insert command will allow us to insert blank lines.  To use this command, place the cursor on the line below the position where the new lines are expected.  For example, if you wanted the new lines to appear after line one, you would position the cursor in line two.   Now enter the command }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 B.  There is your blank line.  You can us repeat counts to insert more blank lines.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:remove blanks command}}}{\v\f4\fs20 \par }{\f4\fs20 One of the most common uses of the line insert capability is to make room for large additions to source files.  The cursor is placed appropriately, then a few hundred lines are inserted, followed by a stream of text.  There will undoubtedly be some extra lines left over.  Typing }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 R removes these lines, beginning at the cursor position and continuing to the first non-blank line.  Let's give this a try.  Insert fifty blank lines.  Now move the cursor down a couple of lines, and type }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 R.  The line the cursor is on must be blank, or the command will be ignored.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:insert mode}}}{\v\f4\fs20 \par }{\f4\fs20 The last method of inserting is using the insert mode.  By using the insert mode, you can position the cursor at any position in the file and insert extra characters.  Go ahead and position the cursor between some characters.  Toggle insert mode by typing }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 E.  Now that you are in the insert mode, you can enter as much new text as needed.   Exit insert mode by typing }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 E.\par Depending on your background, you may be more comfortable using the insert mode all of the time.  You can make the insert mode the default mode; see the description of the SYSTABS file in Chapter 13 to find out how.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Advanced Features}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Advanced Features\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }{\b\f4 Search / Search With Replace}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Search / Search With Replace\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par These features can be a big time saver for you.  Using these commands, you can have the editor search any portion of a file for a character string that you specify.  You can even have the editor replace the character string with another character string that you specify.  For example, if you misspell the word "label" as "lable" throughout your file, you can have the editor replace the misspelled version with the correct version.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Search}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Search\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:search down command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:continue searching macro}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This command is used to locate a sequence of characters specified by you.  For example, let's suppose that you wished to locate every occurrence of the word }{\f6\fs18 type}{\f4\fs20  in our file.  First, position the cursor on the first character of the file.  Now, enter the search command }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 L.  There are really two search commands.  The one you just entered will search from the cursor's position to the end of the file.  The second command, }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 K, will search from the cursor's position to the start of the file.  After you enter the search command, this dialog will appear:\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich174\picwgoal10440\pichgoal3480\macpict\bliptag-998183356\blipupi72{\*\blipuid c480ee441428365ad0fea5b85187189b}0bd80000000000ae020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180120060fd000386300630f9000003d300010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018019066000080f3fffc8fe000343e00c0ffeff01fe38d40001018019066000080f3fffc8fe000343e00c0ffeff01fe38d400010180980042008d000000ae0210008d000000ae020a008d000000ae020a00011702600009feff00c8fe0002863009fcff0038d4000101801702600009feff00c8fe0002863009fcff0038d4000101801912600009fe381c08000003667009fc181c0c1f38d4000101801912600009fe381c08000003667009fc181c0c1f38d40001018019126000083f39c9c800000616b009ffc9c9f9cf38d40001018019126000083f39c9c800000416b009ffc9c9f9cf38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d400010180170260000ffeff06f800000360000ffcff00f8d400010180170260000ffeff06f800000360000ffcff00f8d400010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018007001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 3.1\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The cursor will be in the search string box; go ahead and enter the string you want to search for.  Should you make a mistake entering the search string, there are some line editing commands you can use to correct the mistake.   Just about all of the character-oriented commands, such as the right and left arrow keys, are active, while the line-oriented commands, such as scroll down, are not.  Once you are satisfied with the search string, press }{\outl\f4\fs18 RETURN}{\f4\fs20 .  The editor will search for the first occurrence of }{\f6\fs18 type}{\f4\fs20 .  If the editor cannot locate a search string, it will respond by beeping the speaker.  If the editor does locate the search string, the cursor will be positioned on the first character of the target string.  To continue searching the file for the same string, use the editor macro }{\f4\fs18 \u-3\'f0}{\f4\fs20 L (or }{\outl\f4\fs18 OPTION}{\f4\fs20 L).\par There are several options available with the string search command.  You can select and deselect these options using the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  key followed by a number from 1 to 3; a check mark will appear beside the option in the dialog when the option is selected.  The first option treats all sequences of spaces and tabs as if they were a single space, both in the search string and in the text file.  This is useful when you want to search for a pair of fields, like lda and #2, but you don't care if the fields are separated by spaces, tabs, or some combination of these characters.  The case sensitive option makes the editor case sensitive, so that the search string LDA would not find lda, for example.  The whole word option will only find a string if it is surrounded by characters other than alphabetic characters, numbers, or the underscore character.  This is used to find variables that may be common characters or sequences of characters.  For example, one of the strings the editor found when you searched for }{\f6\fs18 type}{\f4\fs20  was }{\f6\fs18 Types}{\f4\fs20  in the file name }{\f6\fs18 Types.Rez}{\f4\fs20 .  If you ask the editor to search for whole words, it will skip this string.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Search With Replacement}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Search With Replacement\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:search and replace down command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:search and replace up command}}}{\v\f4\fs20 \par }{\f4\fs20 \par This feature is an extension to the search feature.  The command for search down with replacement is }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 J.  The command for search up with replacement is }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 H.  This time, you need to enter two strings, a search string and a replace string, so there are two edit line items in the dialog.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 3.2\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Once you enter the search string, use the tab key to move to the next field, and enter the replace string.  Try entering }{\f6\fs18 type}{\f4\fs20  for the search string, and your name for the replace string, so that you can see how replacement works.  The same commands for editing the replacement string as mentioned in search will also work here.  Pressing the return key starts a sequence where the editor finds a string, and shows this dialog:\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich84\picwgoal5880\pichgoal1680\macpict\bliptag-1051516100\blipupi72{\*\blipuid c153233cf432f61985fd11443439c450}063900000000005401261101a00082a0008e01000a0000000002d00240980026000000000053012800000000005301260000000000530126000102db0007001fdeff01e00007001fdeff01e000070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f5000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f500011800100060fe000018f300010f80f200011800100060fe000018f300010f80f200011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118000e036000003ffbff00e0e8000118002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600004e067273cff27e720fe001718460030667cce40000018438027ff2727e73ce000001800270a600004e067273cff27e720fe001710460030667cce40000010438027ff2727e73ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc03030273030386000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc0303027303038600000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e00000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e000001800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de0001180007001fdeff01e00007001fdeff01e000980026005300000054012800530000005401260053000000540126000102db00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 3.3\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par As the dialog suggests, pressing the return key replaces the string, and }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 1 does not change the string.  In either case, the editor will move on to the next occurrence of the string, stopping if there are no more.  Selecting Cancel stops the process.\par There is a new option in the search and replace dialog, too, called Replace All.  If you select this option, all of the occurrences of the search string are replaced with the replace string.  This is done throughout the file, not just from the cursor position down (or up).  In a large file, this could take some time, so you will see a spinner at the bottom right of the screen as the command does its work.  Pressing the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 . will stop the process.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 Cut, Copy, Paste and Clear}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cut, Copy, Paste and Clear\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par These features can be used separately or combined.  For example, if you have typed a section of program in your file, but you have typed the program block in the wrong place, you can use the cut commands to first cut (or remove) the block from the file. Then paste (or insert) the removed block at the desired location.  As a second example, suppose you had a block of code which was to be used in several locations throughout the program.  You could  type every duplicate portion, or you could use the copy feature to create a copy of the duplicate block, then use the paste command to insert the duplicate block wherever it was needed.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Cut}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cut\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select mode\:by line}}}{\v\f4\fs20 \par }{\f4\fs20 \par When the cut command is issued, the editor will go into select mode automatically.  There are two different select modes which can be toggled: line-oriented and character-oriented.  Line-oriented select means that only whole lines can be selected.  Character-oriented select means that you can select any lines or any portion of the lines.  When you are editing an assembly language program, you will be in line-oriented select automatically.  Setting and using character-oriented select is covered in Chapter 13.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cut command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:RETURN key}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 work prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEMP file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:ESCAPE key}}}{\v\f4\fs20 \par }{\f4\fs20 Let's try out the cut command.  Enter the cut command, }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 X.  The editor goes into select (line-oriented) mode.  You may use any cursor positioning commands we have talked about so far to move the cursor.  Notice that as the cursor moves, the lines which the cursor moves over will be highlighted in reverse-video.  These are the selected lines.  Go ahead and select a few lines.  When you have finished selecting the text, press}{\outl\f4\fs18  RETURN}{\f4\fs20 .  The selected information is then copied into a file on the work prefix called SYSTEMP.  The selected text is waiting in the SYSTEMP file, and can be put back into the file using the paste command (covered later in this section) or left as is.  If you want to cancel the cut, press }{\outl\f4\fs18 ESC}{\f4\fs20  instead of }{\outl\f4\fs18 RETURN}{\f4\fs20 .  \par You can also use the mouse to select text.  Move the mouse to one position in the file, then drag the mouse to another position.  Once the text is selected, you can use }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 X to cut the text.  Normally, when you use the mouse, you select individual characters.  You can also select a word at a time by double-clicking to start the selection, or select lines by triple clicking when you start the selection.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Copy}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Copy\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:copy command}}}{\v\f4\fs20 \par }{\f4\fs20 \par The copy feature is similar to cut.  Instead of removing the selected text, the editor will make a copy of the selected text and put it in the SYSTEMP file.  Go ahead and enter the the copy command, }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 C.  The editor is in select mode.  Select a few lines and press }{\outl\f4\fs18 RETURN}{\f4\fs20 .  The editor has placed a copy of the selected text in the SYSTEMP file.  Notice that the use of the copy command will replace the selected text from the cut we just performed.  If you want to cancel the copy, press }{\outl\f4\fs18 ESC}{\f4\fs20  instead of }{\outl\f4\fs18 RETURN}{\f4\fs20 .\par As with the Cut command, you can, of course, use the mouse to select the text first, then use }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 C to copy the text.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Paste}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Paste\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:paste command}}}{\v\f4\fs20 \par }{\f4\fs20 \par This feature is used to enter the text selected  with the cut and copy commands back into our file.  Try this command out.  Position the cursor some place in the file where it will be obvious that the selected text will be added, then press the paste command, }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 V.  The selected lines will then be inserted above the cursor.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Clear}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Clear\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete command}}}{\v\f4\fs20 \par }{\f4\fs20 \par The clear command, also called the delete command, is used to delete selected text.  }{\outl\caps\f4\fs18 \u-3\'f0}{\caps\f4\fs20 DELETE}{\f4\fs20  starts the selection mode.  After selecting text and pressing the return key, all of the selected text is deleted.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Closing The File}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Closing The File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:quit command}}}{\*\bkmkend bk1}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}{\rxe bk1}}}{\v\f4\fs20 \par }{\f4\fs20 \par When you are finished editing your text file, the command to exit the editor is }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 Q.  You will see a prompt that asks if you want to same the file, choose No so the changes are not saved.\par Normally, before leaving a file, you would use the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 S command to save the file first.  If you forget, the prompt you just saw reminds you that you are about to loose the changes you have made, and gives you a chance to recover.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 For More Information...}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 For More Information...\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This chapter was intended to show you some of the basic features of the editor, but there are many more features you may want to learn about as you become more proficient with ORCA.  Chapter 13 covers the editor in more detail, discussing topics like using the mouse in dialogs, editing multiple files, and customizing the editor.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 4: The Fundamental Assembler Directives\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 4\par The Fundamental Assembler Directives\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 4 \endash  The Fundamental Assembler Directives\tcl1}}}{\v\f4 \par }{\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 directives}{\txe (See assembler directives)}}}{\v\f4 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This chapter is a guided tour through the most basic assembly language directives.  Upon completion of this chapter, you should be able to write simple, but complete, assembly language programs.  Because this is a tutorial, there are many programming examples for you to try.  Topics covered in this chapter are:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab Assembly language statements.\par \par \bullet \tab Comment lines.\par \par \bullet \tab Various assembler directives.\par \par \bullet \tab Global labels.\par \par \bullet \tab Data segments.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Introduction}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Introduction\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par ORCA/M has a large complement of assembler directives, easily the most complete set of any microcomputer based assembler.  Despite this fact, there are only a few which are absolutely necessary to write assembly language programs.  We will look at the ten most important assembler directives, as well as how lines are commented and some of the rules for coding operands.  Once these directives are mastered, you will be able to use ORCA to assemble assembly language programs that appear in magazines and beginners' books on assembly language.  The directives that we will cover in this chapter are listed below.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ANOP directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENTRY directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1440\adjustright {\f4\fs20 \par ANOP\tab Assembler no-op.\par DATA\tab Start a new data segment.\par DC\tab Declare constant bytes.\par DS\tab Declare storage.\par END\tab End a code or data segment.\par ENTRY\tab Declare global label.\par EQU\tab Declare a constant.\par GEQU\tab Declare global constant.\par KEEP\tab Keep output.\par }\pard \qj\fi360\widctlpar\tx1440\adjustright {\f4\fs20 START\tab Start a new code segment.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Assembly Language Statement}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Assembly Language Statement\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are two kinds of lines in an assembly language program, comments and statements.  The assembly language statements will be covered here; comments will be covered in the next section. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembly language\:statements}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\v\f4\fs20 \par }{\f4\fs20 Assembly language statements can be broken down into three groups.  The first is the assembly language instruction.  Each assembly language instruction corresponds exactly to a single machine language instruction that the computer can understand.  For example, the assembly language instruction RTS maps to the machine language instruction $60.  The way that these instructions are coded is very standard, with almost every 65816 assembler using exactly the same format.  It is that fact that makes it possible to use ORCA to assemble a program written with another assembler, with just a few minor changes to the directives used. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 keep}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IBM 370 assembler}}}{\v\f4\fs20 \par }{\f4\fs20 The second kind of statement is the assembler directive.  Assembler directives look a lot like assembly language instructions, but in fact they are very different.  While an instruction corresponds to a machine language instruction, and tells the computer to take some action in the finished program, the directive does not.  A directive tells the assembler itself to do something.  An example of this would be the KEEP directive, which instructs the assembler to keep the object module created under the name provided in the operand field.  There is very little standardization in directives.  Each assembler is just a little different from the others.  The directives in ORCA were patterned after the assembler that we believe to be the most powerful ever written, the IBM 370 assembler. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembly language\:macros}}}{\v\f4\fs20 \par }{\f4\fs20 Finally, there is the macro. Macros are expanded by the assembler to produce one or more instructions or directives, letting you do very complex things with very simple statements.  The ADD4 macro, supplied with ORCA, will perform the function of the seven assembly language instructions normally needed to do this operation in one line.  Chapters 7 and 8 explore macros in detail. \par The format for a statement, using the JSR instruction as an example, is shown below.\par \par }\pard \fi2250\widctlpar\tx2160\tx3060\tx3960\tx5310\adjustright {\f4\fs20\ul label}{\f4\fs20  \tab }{\f4\fs20\ul op code}{\f4\fs20  \tab }{\f4\fs20\ul operand}{\f4\fs20    \tab }{\f4\fs20\ul comment\par }\pard \qc\fi2250\widctlpar\tx2160\tx3060\tx3960\tx5310\adjustright {\f4\fs20 \par }\pard \fi2250\widctlpar\tx2160\tx3060\tx3960\tx5310\adjustright {\f6\fs18 label\tab jsr\tab sub1      \tab call sub1\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Figure 4.1  Statement Fields\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par By default, ORCA is case insensitive, which means that a lowercase letter like a is treated exactly like its uppercase equivalent, A.  The only exception is in strings of characters.  Throughout this manual, we will conform to the most common coding practice of writing programs using mostly lowercase letters, but in text, uppercase letters will be used for operation codes so you can scan the text for the quicker, and not confuse them with words.  For example, this convention makes it easier to distinguish at a glance the difference between the assembly language instruction AND and the word and.  As a general rule of thumb, global labels will start with a capitol letter.  This is simply a handy convention favored by the author; you can ignore it if you like.\par The ORCA assembler can be made case sensitive, but this is generally more of a pain than it is worth.  The main reason you can make the assembler case sensitive is for writing subroutines that will be called by the C language.  For more information, see CASE and OBJCASE, two directives described in Chapter 19.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Label}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Label\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par Most statements can have a label, and in fact, a few directives actually require one.  Labels serve the same purpose as line numbers in BASIC, giving you a way of telling the assembler what line you want to branch to or change.  Labels must start in column one.  They must start with an alphabetic character, tilde (~) or underscore (_).  The remaining characters can be alphabetic (A through Z), numeric (0 through 9) or the underscore character or tilde.  A label can range in length from 1 to 255 characters.  Each character is significant.  The underscore is significant, so MYLAB and MY_LAB are not the same.  If a label is used, there must be at least one space between it and the operation code.  ORCA is normally case insensitive.  This means you can use a lowercase letter anywhere that an upper case letter is used, and they mean the same thing.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Op code}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Op code\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par The operation code, or op code, is required with every statement in ORCA.  The op code is the name of the statement, like JSR for the jump-to-subroutine instruction, or KEEP for the keep directive.  Unless there is a label, the op code can start in any column from two to forty.  It is customary to place it in column ten, so the editor has a tab stop in that column.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 Operand}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Operand\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operands\:assembly language}}}{\v\f4\fs20 i.65816:cpu;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembly language}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The third field in an assembly language statement is the operand field.  There must be at least one space between the op code and the operand.  It can start in any column before column forty, and customarily starts in column sixteen, where the editor has a tab stop.  Operands vary a great deal.  Instruction operands are explained in books about the 65816.  ORCA formatting of instruction set operands is covered in Chapter 18.  Operands for directives and macros are described as the directive or macro is introduced.  However, one issue is important in all types of statements.  You can substitute mathematical expressions for any number, including multiplication, division, addition, subtraction, bit shift operations, etc.  These expressions are written the same way that you would write them in most high-level languages.  Since it is so natural, we won't discuss it in detail here.  See Chapter 18 if you would like to know more.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Comment}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Comment\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 comments\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par The last field in an assembly language statement is the comment field.  There must be at least one space between the operand (or op code, if there is no operand) and the comment.  The comment is for your benefit.  It does not affect the finished program in any way, but it does help you to remember what the program is doing.  Some assemblers require semi-colons before the comment; ORCA does not.  Comments normally start in column forty-one.  As you would expect by now, the editor has a tab stop there.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\v\f4\fs20 \par }{\f4\fs20 There is only one case in the ORCA assembler where the operand field is optional, and that is with the directives that start a code segment, namely START, DATA, PRIVATE and PRIVDATA.  When you code these directives, it is critical that, if you use a comment and no operand, the comment start in column 41 or beyond.\par The examples below illustrate the main points of an assembly language statement. \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\tx3600\tx4320\adjustright {\f6\fs18        \tab lda \tab label+1          \tab load accumulator from data\par !                               \tab stored at first byte\par !                               \tab after LABEL\par        \tab ds  \tab length*400       \tab reserve LENGTH * 400 bytes\par       \tab ds  \tab (length+1)*400     \par L1     \tab equ \tab l0/14+1        \tab define the constant L1\par n1     \tab qequ \tab -1               \tab define the global constant N1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Comment Lines}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Comment Lines\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 comments}}}{\v\f4\fs20 \par }{\f4\fs20 The second type of line that can appear in an assembly language program is the comment.  Comments are used to help you remember what a program is doing.  Comments do not affect the finished program in any way.  Specifically, unlike BASIC, comments do not take up room in the finished program, so there is no reason to avoid them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbols}}}{\v\f4\fs20 \par }{\f4\fs20 ORCA supports five kinds of comment line.  First, a completely blank line is treated as a comment.  Any line with an asterisk (*), semicolon (;) or the  exclamation (!) in the first column is also treated as a comment; any keyboard character can be used after the first character.  Finally, a line with a period (.) in column one is a special kind of comment line called a sequence symbol.  Sequence symbols are not normally printed in the listing produced by the assembler.  They are used by conditional assembly directives, and discussed in detail in Chapter 8.  For now, if you decide to use this form of comment to get a line that shows up in the editor, but not later in the listing, be sure to place a space after the . character.\par \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18 ! This is a comment line.\par ; This is, too.\par * You can also make a comment line in this manner.\par . This comment line uses the sequence symbol.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 conditional assembly}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables}{\txe (See assembler variables, shell variables, symbolic parameters, DC directive, DS directive, ANOP directive, labels)}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 & character}}}{\v\f4\fs20 \par }{\f4\fs20 \par Before moving on, it is worth noting that the conditional assembly language supports variables.  These variables are coded like a label, but begin with the & character.  Whenever a variable appears in a source statement \endash  even in a comment \endash  it is expanded.  For that reason, you should avoid putting something that the assembler might mistake for a variable in your comments.  In a nutshell, this means that you should not follow the & character with an alphabetic character, tilde (~), or underscore (_) unless you want a previously defined variable to be expanded.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Directives}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Directives\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }{\b\f4\fs20 KEEP}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 KEEP\tcl3}}}{\b\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 keep}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes}}}{\v\f4\fs20 \par }{\f4\fs20 \par We saw the KEEP directive in the short program that we wrote back in Chapter 1.  The KEEP directive tells the assembler to keep the object modules that it produces.  The operand field can contain any valid GS/OS path name; if the path name includes spaces, it must be includes in quotes.  The current prefix is assumed when only a partial path name is specified (see Chapter 5 for more information on path names).  Only one KEEP directive can be used in a program, and it must appear before the first START directive.   Although it is possible to create a finished program without using the KEEP directive (see the description of ASSEMBLE in the reference manual to find out how), most programs do in fact start with a KEEP directive.  As an example, suppose the source code for a program is in a file named MyProg.asm, and you want your executable program to be named :MyFile:MyProg.  Then the first line in your program would be:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18       \tab keep\tab :MyFile:MyProg\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 START and END}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 START and END\tcl3}}}{\b\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 start}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 end}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par The START and END directives are much more powerful than you might expect from looking at our first program back in Chapter 1.  These directives are used to indicate the start and end of named code segments.  The START directive requires a label.  The label on the START directive becomes the name of the code segment.  You can also use an optional operand, which defines a load segment.  This important concept will be covered in more detail in Chapter 6.  The END directive has no operand, and usually no label.  It is not possible to branch to a line containing an END directive.  A program can, and usually does, have more than one code segment.  It is not necessary to do separate assemblies to assemble each of the code segments, nor is it necessary to put them in separate disk files. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\v\f4\fs20 \par }{\f4\fs20 Inside a code segment, all labels that are not defined using the GEQU or ENTRY directives are local labels.  (The GEQU and ENTRY directives are covered later.) This means that no other code segment can see the label.  For example, the following program would produce an error in Seg1 because lab1 is not defined in Seg1, but it is perfectly legal for both segments to use lab2. \par \par }\pard \fi446\keepn\widctlpar\adjustright {\f6\fs18 Seg1     start\par          phk\par          plb\par \par }\pard \fi450\widctlpar\adjustright {\f6\fs18 lab2     lda   lab1\par          lda   #0\par          rtl\par          end\par \par Seg2     start\par lab2     lda   lab2\par lab1     lda   lab1\par          rts\par          end\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The concept of local labels is very powerful, and unfortunately, very rare in assemblers.  Because a section of code can be developed independently of all other code in the program, you can build up a library of subroutines that can be moved from one program to another.  And, unlike other assemblers, you don't have to worry about whether you have used the label LOOP somewhere else in the program.  It is perfectly all right to have the label LOOP in every segment in the program, so long as it is used only once in each segment. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 program segmentation}}}{\v\f4\fs20 \par }{\f4\fs20 As you start to write long programs with ORCA, you should use the idea of the segment by dividing your program into short subroutines.  Think of a segment the same way you would think of a procedure, function, or subroutine in a high-level language.  As with the more advanced high-level languages, these subroutines can be developed and debugged separately.  Used properly, the program segmentation provided by the START and END directives can be one of the most powerful aids to writing large assembly language programs. \par \par }\pard \qj\widctlpar\adjustright {\b\f4 Equates}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Equates\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\*\bkmkstart bk2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 GEQU}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par One of the basic ideas behind structured programming is to give meaningful names to numbers.  This is done by defining a constant, which is used instead of the number.  In assembly language, constants are defined with the EQU and GEQU directives, and are called equates. \par To define a constant, place the name of the constant in the label field, the EQU or GEQU in the op code field, and the value of the constant in the operand field.  Of course, it always helps to comment.  For example,\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 one    \tab equ  \tab 1   \tab define one\par two    \tab equ \tab 1+1 \tab define two\par four   \tab equ  \tab two*two\tab define four\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembly language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operands\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 As shown, you can use expressions in the operand, and you can use constants defined by earlier equates.  It is also possible to use expressions that reference labels, the current location counter, and externally defined constants.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Another use of EQU is to represent the value of the current location counter, as in:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 here   \tab equ\tab *\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par EQUs can also be used to identify a variable within a group of data.  (That is, to simulate high-level language records in assembly language.)  In the example below, FOUR will be the address of the fourth value past the label ONE, since the first floating-point number stored at ONE begins zero bytes beyond ONE, and each value requires four bytes of storage.  \par \par }\pard \fi450\keepn\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18 four\tab equ  \tab *+(3*4)\par one\tab dc   \tab f'1,2,3,4,5,6,7,8,9,10'\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long addressing}}}{\*\bkmkend bk2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}{\rxe bk2}}}{\v\f4\fs20 \par }{\f4\fs20 \par Constants should be defined before they are used.  It is customary to put all of the equates in a segment right after the START directive.  This is only a strict requirement when the constant is used later as a direct page address or long address, but it is better to get in the habit of defining before use to avoid problems later. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ANOP}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ANOP\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 ANOP}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 DC}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ANOP directive is used to assign a label to the current location counter.  The EQU directive can also be used for this, but use of ANOP is more efficient.  ANOP is often used to build tables or blocks of common data, as in:\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 table\tab anop\tab \tab table of subroutine addresses\par \tab dc\tab a4'SUB1'\par \tab dc\tab a4'SUB2'\par \tab dc\tab a4'SUB3'\par }\pard \qj\fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18 tableEnd\tab anop\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DC and DS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DC and DS\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A program consists of instructions and data.  So far, we haven't found out how to put data into our assembly language programs.  In ORCA, this is done with two directives:  DC, or define constant, and DS, or define storage. \par {\*\bkmkstart bk3}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler variables}}}{\v\f4\fs20 \par }{\f4\fs20 The DC directive is used whenever you want to put an initialized value into memory.  With the DC directive, you can put characters, binary or hexadecimal values, integers (in a variety of lengths), addresses, or floating point numbers into memory.  By specifying a label with the DC directive, you can assign a variable name to the data.  In this section, we will only talk about characters, integers, and hexadecimal values.  If you need to enter one of the other types, see Chapter 18. \par The operand of the DC directive tells what values will be placed in memory in the finished program.  The first letter is a format specifier, which tells what format the information is in.  The table below lists all of the valid format identifiers. \par \par }\pard \fi2160\keepn\widctlpar\tx2520\adjustright {\f4\fs20 A\tab address\par B\tab binary\par C\tab character\par D\tab double precision floating point\par E\tab extended precision floating point\par F\tab single precision floating point\par H\tab hexadecimal\par I\tab integer\par R\tab hard reference\par S\tab soft reference\par }\pard \qc\fi1980\keepn\widctlpar\tx720\tx1260\adjustright {\f4\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\f4\fs20 Table 4.1  DC Format Specifiers\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data\: character}}}{\v\f4\fs20 \par }{\f4\fs20 \par Let's start by looking at a declaration of a string of characters.  The DC statement shown below defines the string that is enclosed in quote marks, and illustrates that quote marks inside the string must be doubled. \par \par }\pard \fi450\widctlpar\adjustright {\f6\fs18 dc c'Now''s the time for all good people to use ORCA.'\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 byte order}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data\:integer}}}{\v\f4\fs20 \par }{\f4\fs20 \par The format shown here is very similar for all types of DC directives.  The op code is always DC, the first character is the type of data to be defined, and the data follows, enclosed in quote marks.  When you are defining data where several different values of the same type are coded, you can separate the individual values with commas, as seen in the following example for integer declarations.  Note that integers are always stored least significant byte first, which is the way the 65816 likes its addresses, and also the way the ORCA math libraries and the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  toolbox like to find numbers.   The I format by itself defaults to a two-byte number. \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 count  \tab dc \tab i'1,1+1,3,4'\par bigNum \tab dc \tab i8'1000000000000'\par array1 \tab dc \tab 50i'1'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The second example demonstrates that integers come in several lengths.  If you use an I for the type specifier, without coding a length, you will get a two-byte integer.  However, the I can be followed by any number from one to eight, giving an integer with that many bytes.  These large integers can represent very large numbers; the eight-byte integer shown on the second line can represent numbers in the range between -9223372036854775808 to 9223372036854775807.  Finally, the last line introduces the idea of a repeat count, which can be used with any type of values that are placed one after the other in memory.  The last statement, then, would initialize 100 bytes of memory.  There is no limit to the number of bytes that a single DC directive can define, but the repeat count is limited to 255. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data\:hexadecimal}}}{\v\f4\fs20 \par }{\f4\fs20 The last type of DC directive that we will look at here is the hexadecimal DC definition.  Hexadecimal numbers include the digits 0 to 9 and the hexadecimal digits A to F.  Again, since the assembler is case insensitive, you could use lowercase letters if you like.  The only thing that can appear between the quote marks is hexadecimal digits and spaces.  Each byte of memory can contain two hexadecimal digits, so the digits coded in the DC directive are placed in memory in pairs.  If you code an odd number of digits, the last nibble of the last byte is padded with a zero.  The two DC directives in the example below produce exactly the same thing:  Two bytes, the first of which contains a $B1 and the second of which has a $D0. \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab dc \tab h'B1 D0'\par        \tab dc \tab h'B 1 D'\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data\:character}}}{\v\f4\fs20 \par }{\f4\fs20 \par While hexadecimal DS statements are a great way to put specific bytes into memory, you don't have to use them to code numeric values as hexadecimal numbers, and in fact it is easier and clearer if you do not.  For example, if you want to place the value $ABCD in memory as a integer (with the bytes reversed) you would have to code the statement as\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab dc \tab h'CD AB'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 reversing the bytes manually.  On the other hand, the assembler recognizes hexadecimal numbers just as easily as it recognizes decimal numbers, so you can get exactly the same effect and be clearer in the process with this statement:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab dc \tab i'$ABCD'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The last example we will look at shows how you can mix data types on a single line.  For a very reasonable example, let's assume that you want to place a carriage return code at the end of a line of characters.  Since the carriage return code is represented in ASCII as $0D, we could code it in hexadecimal, as in the first example.  Or, if you prefer, we could define a symbol called RETURN, and code it as a one-byte integer, as in the second DC directive. \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 errMsg\tab dc  \tab c'Error!',h'0D'\par \par return \tab equ \tab $D\par errMsg\tab dc  \tab c'Error!',I1'return'\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 msb}{\v\f4\fs20  directive}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par As mentioned earlier, there are several more data types supported for special uses.  Also, note that the DC directive and character constants used in expressions default to standard ASCII, with the most significant bit cleared.  This is correct for most peripheral devices and for the subroutine libraries, but if you are writing your own subroutines to output directly to the Apple text screen, you may want to have the most significant bit set.  The MSB directive, described Chapter 19 of the reference manual, gives you a way to do that.\par {\*\bkmkend bk3}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}{\rxe bk3}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\v\f4\fs20 \par }{\f4\fs20 Before moving on, lets take a quick look at another way to define data.  The DS directive is normally used when you don't care what initial value a variable has, but you want to reserve some space in the finished program. The operand of the DS directive is a constant which tells how many bytes to declare.  The bytes are reserved in memory and initialized to zero.  Examples are:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 num    \tab equ \tab 10\par space  \tab ds \tab 100    \tab allocate 100 bytes of memory\par       \tab ds \tab num*2 \tab allocate 10 words of memory\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Global Labels}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Global Labels\tcl3}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk4}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 So far, we have mainly talked about local labels, where a label in one code segment is "invisible" to all others.  There are, of course, times when you want another segment to be able to see a label.  We already saw one way of doing this:  the label on the START directive is global.  This means that every segment in the program is able to see the label defined on a START directive.  By the way, it's all right to define a local label with the same name as a global one.  The assembler will choose the local label in preference to the global one. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long addressing}}}{\v\f4\fs20 \par }{\f4\fs20 There are also two other directives which can define a global label.  The first is a global form of the EQU directive, used for defining global constants.  It works just like EQU, but the op code is GEQU.  You should realize one important difference between the labels defined with the GEQU directive and all other labels.  Those defined with GEQU can be seen at assembly time, while all the other global labels can only be seen at link time.  This means that you should always use a GEQU directive to define a direct page or long address label that will be used in more than one subroutine.  That way, the assembler can automatically decide which addressing mode is appropriate. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENTRY directive}}}{\v\f4\fs20 \par }{\f4\fs20 The ENTRY directive can also be used to define a global label.  The ENTRY directive has no operand.  Its label receives the value of the current location counter.  Its most common use is to define an alternate entry point into a subroutine. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18 Sub1  \tab start\par       \tab jsr\tab Sub2        \tab execute subrtn; value returned on\par !                            \tab   stack\par       \tab pla\par        \tab beq \tab s1          \tab Based on value, enter Sub3 at\par !                            \tab   beginning or at alternate entry\par !                            \tab   point\par        \tab jsr \tab Sub3_a\par        \tab bra \tab s2\par s1     \tab jsr \tab Sub3\par \tab lda\tab #1\tab Indicate Sub3 executed\par s2\tab lda\tab #0\tab Indicate Sub3_a executed\par \tab rts\par \tab end\par \par Sub3  \tab start\par size  \tab equ \tab 3\par \par        \tab clc\par        \tab adc\tab #size\par \par Sub3_a \tab entry\par       \tab asl\par \par       \tab rts\par       \tab end\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4 DATA Segments}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DATA Segments\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk4}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}{\rxe bk4}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par Especially in large programs, it is nice to be able to build data areas where global variables and constants can be stored.  In fact, it is even nice to be able to have several such areas, very much like the way Fortran allows common areas to be defined.  ORCA has a structure like this, called the data area. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 USING directive}}}{\v\f4\fs20 \par }{\f4\fs20 Data areas are in fact separate segments.  But instead of using a START directive, data segments begin with a DATA directive.  They still end with an END directive.  Only data definitions are allowed inside of a DATA area; the assembler will flag an instruction as an error.  Labels in a data area are still local labels, and normally can only be seen inside of the data area.  Another directive, the USING directive, is then used in any code segment that needs to use the labels in the data area.  The USING directive has the effect of making the labels in the data area local to both the data area and the segment where the USING directive appears.  More than one code segment can use the same data segment, and in fact, more than one data segment (up to 127) can be defined and used, in any combination, by a code segment.  The syntax for these two new directives is illustrated below. \par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18          \par }\pard \fi450\keep\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 \tab keep\tab rdWrt\par \tab mcopy\tab rdWrt.macros\par ****************************************\par *\par }\pard \fi450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 *  Example program showing data segments\par *\par ****************************************\par *\par Main\tab start\par \tab using\tab Common\tab gain access to data segment\par \par \tab phk\tab \tab ensure code & data in same bank\par \tab plb\par \par \tab lda\tab #80\tab store max size of line in 1st byte\par \tab sta\tab buffer\tab   of line buffer\par \par \tab jsr\tab ReadLn\tab read in a line of text\par \tab puts\tab buffer\tab call macro to print the line just read\par \par \tab lda\tab #0\tab tell the shell there are no errors\par \tab rtl\tab \tab return to the shell\par \tab end\par \par ****************************************\par *\par *  Data segment for program\par *\par ****************************************\par *\par Common\tab data\par return\tab equ\tab $0D\tab ASCII code for carriage return\par char\tab ds\tab 2\tab input character buffer\par buffer\tab ds\tab 82\tab output buffer\par \tab end\par \par ****************************************\par *\par *  ReadLn routine\par *\par ****************************************\par *\par ReadLn\tab start\par \tab using\tab Common\tab gain access to data segment\par \par \tab short\tab I,M\tab use 8-bit accumulator, X, Y registers\par \tab ldy\tab #1\tab init. index into line buffer\par Top\tab phy\tab \tab save Y register- destroyed by GETC macro\par \tab getc\tab char\tab call macro to read char from keyboard\par \tab ply\tab \tab restore Y register\par \tab iny\tab \tab increment line buffer index\par \tab lda\tab char\par \tab sta\tab buffer,Y\tab store char into line buffer\par \tab cmp\tab #return\tab check end-of-line\par \tab beq\tab Out\par \tab cpy\tab #81\tab don't go past end of buffer\par \tab blt\tab Top\par \par Out\tab dey\tab \tab Y is 1 too big\par \tab sty\tab buffer+1\tab store line size in 2nd byte of buffer\par \tab long\tab I,M\tab reset accumulator, X, Y to 16 bits\par \tab rts\par \tab end\par }\pard \li450\widctlpar\adjustright {\f6\fs18 \tab \tab \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 5: Advanced Shell Features\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 5\par Advanced Shell Features\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 5 \endash  Advanced Shell Features\tcl1}}}{\v\f4 \par }{\f4 \par \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 With the basics behind us, we can start looking at some of the advanced features of the shell.  You should keep in mind that even in this chapter we will not look at all of the capabilities of the ORCA shell.  After getting comfortable with the material in this chapter, you should plan on skimming Chapter 12 to look for topics which interest you.  Topics covered in this section are:\par \par }\pard \qj\fi-270\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab File naming conventions.\par \par \bullet \tab Redirecting input and output.\par \par \bullet \tab Pipelines.\par \par \bullet \tab The program development process.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 File Naming Conventions}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 File Naming Conventions\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }{\b\f4 What Is A File?}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 What Is A File?\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 library files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par A file is a logical collection of bytes internal to the computer or stored on a disk.  Files are used to contain the programs you write, the facilities used on the computer (i.e. the shell), and data created or used by these programs and facilities.  There are several types of files used by ORCA, such as text (or source), object, library, and executable.  The type of file is a clue to the file's purpose.  The source file contains the program you type in.  An object file contains the result of assembling your program.  Library files contain library subroutines.  The executable files contain the program code, which is ready to be executed.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 File Names}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 File Names\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 \par A file name is attached to a file.  File names are necessary to distinguish between files.  Files used by ORCA use the same naming conventions as GS/OS.  While other disk formats may someday be supported, the most commonly used disk format as this manual is written is the one first used by ProDOS, and that is the one that will be described here.  Under the ProDOS File System Translator (FST), file name can be up to fifteen characters long.  These characters are composed of the letters(A..Z), the digits (0..9) and periods (.).  The first character of a file name must be a letter.  GS/OS is not case sensitive, but the most recent versions do preserve the case you use when you create files, and this version of the ORCA shell supports that practice.  Examples of legal file names are:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Exercise\par Problem8\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A.OUT\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Path Names}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Path Names\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\v\f4\fs20 \par }{\f4\fs20 \par The path name of a file is a form of "road map" which allows ORCA to locate a file.  A path name is composed of directory names, followed by a file name.  The directories and file name are separated by colons, with no intervening spaces.  Each directory in the path name is a subdirectory of the preceding directory, and is also a root directory of the succeeding directory.  A full path name begins with the volume name; a partial path name (a path name not beginning with a volume name) will use the current directory as the root of the given path.  For example, the full path name\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 :HardDisk:Example:MyFile\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 would tell ORCA that the file named MYFILE is found in the directory named EXAMPLE on the volume named HARDISK.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 While GS/OS uses the colon as a separator character, ProDOS and many other file systems use the slash character.  GS/OS supports the use of the slash character as a separator character when you enter a path name, so long as you use all slashes.  GS/OS always returns path names using the colon character for a separator.  The shell carries this one step further, allowing you to use any single typeable keyboard character as a separator by setting the \{Separator\} shell variable.\par For example, you can type either of these commands, and they will do exactly the same thing:\par \par }{\b\f6\fs18 edit 13:rinclude:types.rez\par edit 13/rinclude/types.rez\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 Directory Walking}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Directory Walking\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 directory walking}}}{\v\f4\fs20 \par }{\f4\fs20 \par Sometimes it is useful to go back a directory.  The symbol .. (two periods) means go back (or up) one directory.  Suppose that you have the directory structure as shown below.\par \par }\pard \li450\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw244\pich117\picwgoal4880\pichgoal2340\macpict\bliptag-1587465063\blipupi72{\*\blipuid a1613499b37e637377f33d9b18a457fc}018000070007007c00fb1101a00082a100960006050000000274a1009a0008fffd0000001d0000a0009801000a00070007007c00fb0300150d000a2b6e13084f55525354554646a00099a00097a100960006050000000274a1009a0008fffd0000001b0000a00098280052004a074d5950524f4753a00099a00097a100960006050000000274a1009a0008fffd000000220000a00098295a09594f555250524f4753a00099a00097220019007fee2d220019007f362da100960006050000000274a1009a0008fffd000000130000a00098280076000b0550524f4731a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829360550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829900550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009828007600a40550524f4731a00099a000972200560067c8152200560066f21422005500c5f11522005600c51914a00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Assume that the current prefix is OURSTUFF:MYPROGS.  If you want to access PROG1 in the YOURPROGS directory, you can use the partial path\par \par }\pard \qj\li450\widctlpar\adjustright {\b\f6\fs18 ..:YOURPROGS:PROG1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par to get to it.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Device Names}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Device Names\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device names}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GS/OS assigns a device name to each I/O device currently on line.  These device names can be used as part of the path name.  Let's check to see what assignments have been made.  Enter the command:\par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f12\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\v\fs20 \par }\pard \fi360\li450\widctlpar\adjustright {\b\f6\fs18 \par }\pard \li450\widctlpar\adjustright {\b\f6\fs18 show units\par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This command will display a table showing the device names associated with the devices on line.  For an example, suppose you have a hard disk, a floppy disk, and a RAM disk installed in your computer.  When you issue the SHOW UNITS command, you would see something like:\par \par }\pard \li450\keepn\widctlpar\tx1980\adjustright {\pard\plain \li450\keepn\widctlpar\tx1980\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device names}}}{\v\f4\fs20 \par }\pard \li360\widctlpar\adjustright {\f6\fs18 Units Currently On Line:\par \par     Number  Device              Name\par \par     .D1     .APPLESCSI.HD01.00  :harddisk\par     .D2     .APPLEDISK3.5A      :ORCA\par     .D4     .AFP1               :AppleTalk\par     .D20    .CONSOLE            <Character Device>\par     .D21    .APPLESCSI.HD01.01  :harddisk2\par     .D22    .PRINTER            <Character Device>\par     .D23    .NULL               <Character Device>\par     .D24    .DEV2               :Ram\par     .D25    .DEV3               <Character Device>\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can substitute a device name anywhere you would have used a volume name.  Thus,\par }{\fs20 \par }\pard \li450\keepn\widctlpar\adjustright {\b\f6\fs18 catalog .d1}{\f6\fs18 \par }\pard \widctlpar\adjustright {\fs20 \par }{\f4\fs20 will have the same effect as\par \par }\pard \li450\widctlpar\adjustright {\b\f6\fs18 catalog :harddisk\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 Standard Prefixes}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Standard Prefixes\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:standard}}}{\v\f4\fs20 \par }{\f4\fs20 \par ORCA provides prefixes which can be substituted for path names.  You can obtain a listing of the standard prefixes for your system by typing the command\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 show}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }{\b\f6\fs18 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 show prefix\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par ORCA will respond by printing a list similar to the one below.\par }\pard \fi450\widctlpar\tx1080\tx1980\adjustright {\f4\fs20 \par }\pard \fi450\keepn\widctlpar\tx1080\tx1980\adjustright {\pard\plain \fi450\keepn\widctlpar\tx1080\tx1980\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 prefixes\:numbers}}}{\v\f6\fs18 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 System Prefix:\par \par     Number    Name\par \par     *         :harddisk:\par     @         :harddisk:\par     8         :ORCA:\par     9         :harddisk:\par    10         .CONSOLE:\par    11         .CONSOLE:\par    12         .CONSOLE:\par    13         :ORCA:libraries:\par    14         :ORCA:\par    15         :ORCA:Shell:\par    16         :ORCA:Languages:\par    17         :ORCA:Utilities:\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    18         :ORCA:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 The left hand column of the listing is the prefix number.  The right hand column looks suspiciously like a path name.  Well, it is a path name!  The purpose of the prefix numbers is to provide you with a typing short-cut when you use path names.  For example, suppose you have a program with the file name MYPROG located in :ORCA.  You could use the path name\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 14:MyProg\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par and it would have the same effect as\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 :ORCA:MyProg\par }{\f4\fs20 \par There are a total of 32 numbered prefixes supported by GS/OS, numbered 0 to 31.  The first eight of these are no longer used, and their predefined meanings have been replaced under GS/OS.  Prefixes 8 to 17 have predefined meanings under GS/OS, the Apple II}{\f4\fs18 GS}{\f4\fs20  tools, or the ORCA shell, but you can use any of the prefixes from 18 to 31 for your own purposes.  For example, if you kept your programs in a directory called MYSTUFF, you could rename prefix 18 to correspond to :ORCA:MYSTUFF using the command:\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 prefix 18 :orca:mystuff:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Now, when you want to access the program MYPROG, instead of using the path name\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 :orca:mystuff:myprog\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par you can use the path name\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 18:myprog\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:standard}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par As we mentioned a moment ago, many of these prefixes have predefined, standard uses, such as defining the location of the languages prefix, or telling the linker where to look for libraries.  The predefined uses are:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 boot prefix}}}{\v\f4\fs20 \par }\pard \qj\fi360\li720\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\tx720\adjustright {\f4\fs20 *\tab The asterisk indicates the boot prefix.  The boot prefix is the name of the disk that GS/OS executed from.\par }{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\v\f4\fs20 \par }{\f4\fs20 \par @\tab The @ prefix is the home prefix for people using networked computers.\par \par }{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:0-7}}}{\v\f4\fs20 \par }{\f4\fs20 0-7\tab These prefixes were used under ProDOS, and are still supported by GS/OS so old programs will work.  They should not be used under GS/OS or the ORCA shell.  In particular, no program should use prefixes 0 to 7 and any prefix from 8 to 31, since some of these prefixes are used for the same purpose under the two operating systems, and using both sets can cause conflicts.  For example, the current, or default, prefix is prefix 0 under ProDOS, and prefix 8 under GS/OS.\par \par 8\tab This is the GS/OS default prefix.  It is used whenever a partial path name is specified.\par \par 9\tab Prefix 9 is the program's prefix.  Whenever a program is executed, prefix 9 is set to the directory where the program was found.\par \par 10\tab Prefix 10 holds the name of the standard input device or file.  GS/OS sets this name to .CONSOLE by default; the .CONSOLE driver uses the keyboard for input.\par \par 11\tab Prefix 11 holds the name of the standard output device or file.  GS/OS sets this name to .CONSOLE by default; the .CONSOLE driver uses the text screen for output.\par \par 12\tab Prefix 12 holds the name of the error output device or file.  GS/OS sets this name to .CONSOLE by default; the .CONSOLE driver uses the text screen for output.\par }{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Libraries prefix}}}{\v\f4\fs20 \par }{\f4\fs20 \par 13\tab Prefix 13 is the library prefix.  The linker searches the library prefix for libraries when unresolved references occur in a program.  The Rez compiler searches a folder called RInclude for resource description files.  Many other compilers also search a folder in this prefix for special header files.\par }{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PREFIX command}}}{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 work prefix}}}{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM}}}{\v\f4\fs20 \par }{\f4\fs20 \par 14\tab Prefix 14 is the work prefix.  This is the location used by various programs when an intermediate work file is created.  If a RAM disk is available, this prefix should point to it.  (Standard prefixes are changed with the shell's PREFIX command.)\par }{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 System prefix}}}{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command table}}}{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSCMND file}}}{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSEMAC file}}}{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTABS file}}}{\v\f4\fs20 \par }{\f4\fs20 \par 15\tab Prefix 15 is the shell prefix.  The command processor looks here for the LOGIN file and command table (SYSCMND) at boot time.  Later, it looks here for the editor, which in turn looks for its macro file (SYSEMAC), tab file (SYSTABS) and, if present, editor command table SYSECMD.\par }{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Languages prefix}}}{\v\f4\fs20 \par }{\f4\fs20 \par 16\tab Prefix 16 is the languages prefix.  The command processor looks here for the linker, assembler, and compilers.\par }{\pard\plain \qj\fi-360\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Utilities prefix}}}{\v\f4\fs20 \par }{\f4\fs20 \par 17\tab Prefix 17 is the utilities prefix.  When a utility is executed, the command processor looks here for the utility.  Help files are contained in the subdirectory HELP of the UTILITIES directory.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4 Redirecting Input and Output}{\pard\plain \keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Redirecting Input and Output\tcl3}}}{\b\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GETx macros}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 output}{\txe (See standard output, redirection)}}}{\pard\plain \fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 I/O redirection}{\txe (See redirection)}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Apple II}{\scaps\f4\fs20 gs }{\f4\fs20 supports two character-output devices and one character-input device.  When you call the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  Text Tools to read a character or string, or when you use any of ORCA's GET macros, the input comes from the keyboard.  Input redirection lets you tell ORCA to take the characters from a file instead.  When you call the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  Text Toolkit to write a character, you have a choice of two devices:  standard output and standard error output.  Normally, both send the characters on to the screen.  ORCA lets you redirect these devices separately to a disk file, a printer, or any other device recognized by GS/OS.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 help}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\v\f4\fs20 .PRINTER;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.PRINTER}}}{\v\f4\fs20 .CONSOLE;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.CONSOLE}}}{\v\f4\fs20 \par }{\f4\fs20 For example, when you specify a HELP command, the output is printed on the screen.  Using redirection, the output can be moved, or redirected to the printer.  Go ahead and try a simple redirection:\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 help delete >.printer\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Be sure a printer is connected \endash  if not, the system will hang, waiting for a response from the printer.  If the printed output seems strange, or your printer does not work, check Chapter 12 for details on how to configure the .PRINTER driver that comes with ORCA.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 appending to the end of a file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\v\f4\fs20 \par }{\f4\fs20 There are five types of redirect commands available on the command line.\par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\li1080\keepn\widctlpar\adjustright {\f4\fs20 <\tab Redirect input.\par >\tab Redirect output.\par >&\tab Redirect error output.\par }\pard \fi360\li1080\widctlpar\adjustright {\f4\fs20 >>\tab Redirect output and append it to the contents of an existing file.\par >>&\tab Append error output to an existing file.\par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 For example, suppose you have a program which accepts student test scores from the keyboard and generates classroom statistics.  The name of the program is TESTSTATS, and the data file is SCORES.  Additionally, you want the results to be printed, not displayed on the screen.  You could use the following command to accomplish this:\par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\adjustright {\b\f6\fs18 teststats <scores >.printer\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 After printing the results, you might want to run the program again and add the results to the end of an archive file called STATHISTORY.  You could use the command\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\adjustright {\b\f6\fs18 teststats <scores >>stathistory\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Program Development Process}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Program Development Process\tcl2}}}{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In Chapter 1, you put together a simple program, and then, using one shell command, assembled, linked, loaded, and executed the program.  In this section, we will cover this process in much greater detail.\par When you assemble a program, ORCA can execute many different processes, depending on the options you choose.\par \par }\pard \qj\fi446\keepn\widctlpar\tx2340\adjustright {\f4\fs20\ul commands}{\f4\fs20 \tab }{\f4\fs20\ul command description\par }{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPILE command}}}{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command}}}{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\pard\plain \qj\fi446\keepn\widctlpar\tx2340\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }{\f4\fs20 \par ASSEMBLE\tab assemble your program\par COMPILE\par \par LINK\tab link your program\par \par ASML\tab assemble and link your program\par CMPL\par \par ASMLG\tab assemble, link, and run your program\par CMPLG\par RUN\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Assembling A Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Assembling A Program\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\v\f4\fs20 \par }{\f4\fs20 \par The first program that is involved in preparing a program for execution is the assembler.  The assembler takes the program you typed into the editor as input, and through a series of steps, creates object modules as output.  Object modules are an intermediate form of your program which contain definitions of global symbols, references to symbols contained in other object modules, the machine code for the program, and enough information to combine the object module with other object modules and produce an executable program.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Let's assume you want to assemble a file called MYPROG.  The simplest command you can use to do this is\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 assemble}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }\pard \qj\fi360\li450\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\li450\widctlpar\adjustright {\b\f6\fs18 assemble myprog\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:command parameters}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par There are several optional parameters associated with the assemble command.  If you want to create a listing of the source code, you could get one by typing +L right after ASSEMBLE.  +S will list the symbol tables used in the program.  These parameters can be used in any order.  For example, to get both a source listing and symbol tables, you would enter the command:\par \par }\pard \fi450\widctlpar\adjustright {\b\f6\fs18 assemble +l +s myprog\par }\pard \fi360\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command would assemble the source file named MYPROG, print a listing of the program to standard out, and print the symbol table.\par One other flag will be used often enough that we will introduce it here. Normally, the assembler does not pause when it hits an error.  This is fine for automated builds, or in a program that is far enough along in the development cycle that errors are rare, but you may want to stop and look at errors if you are sitting at the computer.  To do this, use the +W (wait) flag.  For example,\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wait flag}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx450\adjustright {\b\f6\fs18 \tab \par }\pard \qj\widctlpar\tx450\adjustright {\b\f6\fs18 \tab assemble +w myprog\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 abort}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par will cause the assembler to stop when an error is found.  Type }{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 . to abort immediately to the editor to fix the problem, or any other key to continue.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }{\f4\fs20 As your programs get longer, you will find that one of the most useful features of the assembler is its ability to do partial assemblies.  Partial assemblies let you assemble individual segments from the program.  If you make a change or find an error in one segment, it is simple to correct the error in the bad segment and relink the program.  Without partial assembly, the entire program will have to be assembled over.  To illustrate, if it took five minutes to assemble a large program (about 20,000 lines) and one minute to link, then it takes six minutes to get your program ready to execute.  If you found a flaw in the program, then you are faced with another assembly.  To assemble only the segment which has been corrected will usually take less than one minute.  The linking process will remain constant, about one minute.  So the entire process of correcting the error takes less than two minutes, as opposed to six minutes, a time savings of over 67%!\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 In order to perform a partial assembly, you need a way to specify which object segments you want reassembled.  When you are assembling a program consisting of two or more segments, the first segment, when assembled, will be placed in an object file having an extension .ROOT, and the remaining segments will be placed in an object file with an alphabetical extension.  For example, if you created a program called MYPROG made up of three segments called SEG1, SEG2, and SEG3, then after assembling all three segments, SEG1 would be in MYPROG.ROOT, and SEG2 and SEG3 would be in MYPROG.A.  Now suppose you made a change to SEG2.  Would it make sense to reassemble all of the segments?  Not really.  Use the ASSEMBLE command with the NAMES parameter.\par \par }\pard \qj\li450\widctlpar\adjustright {\b\f6\fs18 assemble myprog names=(seg2)\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par This command will only assemble SEG2.  The result of this partial assembly is that there are now three files, MYPROG.ROOT, MYPROG.A, and MYPROG.B.  MYPROG.ROOT and MYPROG.A are left undisturbed.  MYPROG.B will contain the new version of SEG2.  When the linker (covered in the next section) links all the segments together, it will look in MYPROG.ROOT first and then look for MYPROG.A.  If the .A file is found then MYPROG.B is searched for.  If a .B file is found, then the linker will search for MYPROG.C.  In this case, a file MYPROG.C is not found so the linker will stop with MYPROG.B  The linker will get SEG2 from MYPROG.B.  When the linker goes through MYPROG.A, the linker will know it found SEG2 from a "higher" object file, and will only accept SEG3 from MYPROG.A, ignoring the SEG2.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are other parameters associated with the assembly commands that will not be mentioned now.  See the section called "Command and Utility Reference" in Chapter 12 for more information.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Linking A Program}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Linking A Program\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 link}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 asml}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 run}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 link map}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\v\f4\fs20 \par }{\f4\fs20 \par After your program is assembled, the next step is to link the program.  The link editor (or linker) is a program which combines all specified object files and libraries, resolving all references, and creates an executable file.  There are three commands (as well as some aliases for them) that will do a link.  LINK does a link only, giving you lots of control, but at the cost of added complexity.  ASML does an assembly first, then a link.  RUN also does an assemble and link, but finishes up by executing the program.  All of these commands can accept linker parameters.  If you specify +L, the link editor will output a link map, which is a listing of the segments in the program.  +S causes the symbol table to be printed.  You can also specify other object files that are to be linked.  Finally, you can specify the name of the executable file as a keep name.  Note that using the combined assemble and link command, ASML, specifying the +L and +S parameters will generate listings and symbol tables for both the assemble and link editor steps.\par Some examples of the link commands are:\par \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 asml myfile.asm keep=myfile\par \par link +l +s myfile keep=myfile\par \par link myfile routine1 routine2 mylibrary\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\v\f4\fs20 \par }{\f4\fs20 \par The first example will assemble, then link, the source file MYFILE.  The executable file will be called MYFILE.OUT.  Example two will link the object file named MYFILE, list the link map and the global symbols, and will name the executable file MYEXEFILE.  The third example will link three object files and a library.  It should be noted that the third example will not create an output file, since the KEEP option was not used.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Libraries prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 separate compilation}}}{\f4\fs20 \par The last example points out that the linker can link several object files and library files together.  Object files specified explicitly are always searched before the system libraries.  Once all object files and library files specified in the command line are linked, if there are still unresolved references, the linker will search all library files in the library prefix to try and resolve the references.  The process of building a final executable program from separately compiled/assembled source files is called separate compilation.\par There is more information about the link editor in Chapter 14.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Executing a Program}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Executing a Program\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 asmlg}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 run}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par The output of the link editor is an executable file.  Generally, the executable file is relocatable.  Relocatable, in computer jargon, means that the file doesn't have to be located at a certain address.  The loader, a part of GS/OS, will take the executable file, find a location in memory large enough to hold it, and then load the file into that memory, patching it as necessary.  Once the executable file is in memory, it is ready to run.  If you used the assemble, link and go commands ASMLG or RUN, then the executable file is automatically loaded and executed.  To execute a program that has already been assembled and linked, simply type the name of the executable file.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 6: Advanced Assembler Directives\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 6\par Advanced Assembler Directives\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 6 \endash  Advanced Assembler Directives\tcl1}}}{\v\f4 \par }{\f4 \par {\*\bkmkstart bk5}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }{\f4\fs20 We have already looked at the assembler directives that are essential to assemble a program under ORCA, but of course there are a lot more.  The remaining directives can be divided into two broad categories: those that are primarily used for writing macros, and those that generally have nothing to do with macros.  This chapter will look at the directives which are not used in macros, while Chapter 8 will cover the remainder.  Topics to be covered in this chapter:\par \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab COPY directive.\par \par \bullet \tab Format control directives.\par \par \bullet \tab Setting case sensitivity.\par \par \bullet \tab Setting the most significant bit of character constants.\par \par \bullet \tab Load segments.\par \par \bullet \tab Changing the word size.\par \par \bullet \tab Miscellaneous directives.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 COPY and APPEND}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 COPY and APPEND\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par The COPY directive tells the assembler to go assemble another file, and come back when the file has been assembled.  The most common use for the COPY directive is to include a series of statements or subroutines in more than one program, or in several pieces of a program that are assembled separately.  The COPY directive uses a GS/0S path name in the operand.  A similar directive is APPEND, which does basically the same thing, but does not return to the original source file after it has been used.   \par The APPEND directive is more efficient in terms of both time and memory, and it should always be used when you have a choice.  The COPY directive is used primarily for those cases where you would like to include a short section of code, for example a series of equates, in several subroutines, or where you have a standard sequence of code that you put in every program. \par You can put as many COPY directives in a file as you like.  Copied files can append other files, and they can also copy other files.  The number of levels that you can copy varies according to how much memory is available, but is generally several dozen levels deep. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\v\f4\fs20  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }{\f4\fs20 For example, suppose you had a series of thirty EQU directives in a file named MYPROGS:CONST which defined some constants.  You wanted to use these constants in several segments, but don't wish to continually retype the thirty EQU statements.  You could insert the following statement in each segment to copy the file which contains the constant definitions:\par \par }{\f6\fs18          copy  MyProgs:Const\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 When the assembler reaches this statement, the MYPROGS:CONST file will be copied into the new segment.  Of course, you should place the copy statement before you make use of the defined constants.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Format Control Directives}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Format Control Directives\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par In this section we will look at several directives that help you format the assembler's listings to suit your preferences. \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20  LIST directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive}}}{\v\f4\fs20 \par }{\f4\fs20 Let's start with the LIST directive, which can be used to turn the listing on or off.  Like many of the format control directives, the operand for the list directive is either ON or OFF.  The default for this directive is off.  Shouldn't a listing be generated automatically?  Well, to start with, errors are printed whether you are listing the file or not, so you can always see them.  Add to that the fact that the assembler spends over one tenth of its time writing the listing on the screen for you, and you can start to see why you might not want to list the output for every program assembly.  Another directive, SYMBOL, allows you to turn the printing of symbol tables on or off.  It, too, takes an operand of ON or OFF.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ERR directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 Another directive which uses the ON or OFF operand is the ERR directive.  If LIST is on, it has no effect, but if list is off, it can be used to turn off listing of error lines.  The default for ERR is on.  For example, to suppress the listing of error lines, use the directive\par \par }\pard \fi450\widctlpar\adjustright {\f6\fs18          ERR OFF\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPAND directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par You may have noticed that when the LIST ON directive is used, the assembler writes the code that it is generating at the left edge of the screen.  You also may have noticed that only four bytes are written there, even if you coded a DC directive that generated more than four bytes of code.  You can cause the assembler to print all of the code in a DC directive (up to a maximum of 16 bytes) by using the EXPAND directive, which, like the other directives, takes an operand of ON or OFF.  The default value is off.   For an example, if you wanted to see the expanded code, then you would place the directive shown below in your code.\par \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18          EXPAND ON\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Keep in mind, though, that the assembler will still need a line for each four bytes that it shows you, so you might not want to use this directive! \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EJECT directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Two directives let you control output sent to the printer.  The first is PRINTER, which again uses ON or OFF in the operand.  The default is off.  Several of these directives can be used in a single program if you would like to list only a few subroutines.  If you want to send the entire listing to the printer, it is probably easier to redirect the output from the command line.  The other directive is EJECT.  It takes no operand, and has no effect unless the output is going to the printer.  In that case, it causes the printer to skip to the top of a new page.  An example of the PRINTER and EJECT directives are:\par \par }\pard \qj\fi450\keep\widctlpar\adjustright {\f6\fs18          printer on\par          eject\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETCOM directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 comments\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par By using the SETCOM directive, you can define the column where the assembler will no longer search a statement for operands.  By default, this is column forty.  You can specify a value from 1 to 255 for the directive.  For example, if you wanted to set the assembler so that comments start in column 35, use the directive:\par \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18          setcom 35\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TITLE directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par The TITLE directive places a page number and title at the top of each page.  The TITLE directive doesn't need an operand, but it can take a string.  If you use spaces in the string, it must be enclosed in quote marks.  This directive causes the assembler to print page numbers at the top of each page.  If a string was coded in the operand, the string is printed after the page number.  An example, using the TITLE directive is:\par \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18          title 'My program, version #3'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par To review, the listing control directives and their uses are: \par \par }\pard \qj\fi1440\keepn\widctlpar\tx2880\adjustright {\f4\fs20\ul directive}{\f4\fs20 \tab }{\f4\fs20\ul directive use\par }{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EJECT directive}}}{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ERR directive}}}{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPAND directive}}}{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive}}}{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETCOM directive}}}{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive}}}{\pard\plain \qj\fi1440\keepn\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TITLE directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par EJECT\tab new page on printer\par ERR\tab list/don't list errors\par EXPAND\tab expand DC directives\par LIST\tab list/don't list source\par PRINTER\tab send listing to printer\par SETCOM\tab set comment column\par SYMBOL\tab list/don't list symbol tables\par TITLE\tab place title at top of each page\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs28 Setting Case Sensitivity}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Setting Case Sensitivity\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CASE directive}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par The ORCA assembler is normally case insensitive \endash  that is, lowercase and uppercase characters are treated the same in label names.  You can cause the assembler to be case sensitive.  Case is specified as either case sensitive or case insensitive.  Case sensitive means that the computer will find a difference between upper case (capitals) and lower case characters.  Case insensitive means the opposite \endash  the computer will see no difference between upper case and lower case characters.  If you use the CASE directive, the assembler can be set case sensitive (ON) or case insensitive (OFF).  For example, if you wanted your program to be case sensitive, use the following statement.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keep\widctlpar\adjustright {\f6\fs18          case on\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs28 Setting The Most Significant Bit In Characters}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Setting The Most Significant Bit In Characters\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MSB directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par As you may know, the ASCII character set only uses the least significant seven bits of a byte.  The most significant bit is usually off (set to zero), but in the case of the character screen display used by the Apple, it is on (set to one).  Normally, ORCA produces characters with the high bit off for character DC directives and character constants in an expression.  If you need characters with the high bit on, you can get them by coding\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18          msb   on\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Naturally, MSB OFF causes the high bit to be off. \par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Load Segments}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Load Segments\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par Before examining the directives used to create load segments, let's take a moment to talk about what load segments are and why you might need to use them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BIN files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation dictionary}}}{\v\f4\fs20 \par }{\f4\fs20 Under ProDOS 8 on the Apple II, and under many other operating systems, executable programs are actually memory images.  That means that the program has been created to run at a specific memory location, and the file is simply a series of bytes that, when loaded at the ORG location, will execute.  The same is not true on the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  under GS/OS.  On the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 , executable files consist of one or more load segments.  Each load segment has a header that gives overall information about it, like its name and how much memory it will require; a binary image, much like the BIN file format under ProDOS 8; and a relocation dictionary.  The relocation dictionary allows the load segment to be placed anywhere in memory where there is enough free room.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bank boundary}}}{\v\f4\fs20 \par }{\f4\fs20 As we mentioned, the load file can have more than one load segment.  There are three main reasons for creating a program with more than one load segment.  The first has to do with a hardware restriction of the 65816 CPU.  While the 65816 can access memory from anywhere in a 16 megabyte range, and can jump to or do subroutine calls in that range, it cannot execute across a 64K boundary.  Thus, while a program with two subroutines can have one subroutine in one 64K bank, and the second in another, neither subroutine can lay across a 64K boundary.  If code were linked to run at a fixed memory location, this would not be a problem \endash  the linker could simply insert enough bytes to cause a subroutine that would cross a boundary to be placed in the next 64K bank.  Since code is relocatable, the linker cannot do this trick.  The alternative, and the way things work on the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 , is to limit each load segment to 64K.  This means that if your program is longer than 64K, you will have to split it into more than one segment.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 The second reason for segmenting your code has to do with the amount of memory on an Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 , and how that memory is used.  If your program must run on a 256K machine, but it is a desktop application that uses QuickDraw II, the Window Manager, the Menu Manager, and so on, you will find that there isn't much memory left.  In fact, using the tools we have as we write this manual, the largest free area of memory would be about 30K.  That doesn't mean your program is limited to 30K, simply that that is the largest single piece available.  If you break your program up into small segments, the loader can place your program in all of the small areas of memory that are available.\par The last common reason to use a load segment is to create a custom direct page segment.  This is an extremely useful feature, but it requires a little background to understand when and why such a load segment is needed.  Later, in Chapter 9, we'll look at an example of this kind of load segment.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\v\f4\fs20 \par }{\f4\fs20 Now that you know at least three reasons for writing your program with more than one load segment, let's take a look at the directives that are used to do this.  Actually, the directives are not new.  To create a load segment, you simply place the name of the load segment in the operand field of the START, DATA, PRIVATE, or PRIVDATA directive that starts the segment.  The linker will group each object segment with the same load segment name into the same load segment.  All program segments without a load segment name will be placed in a special load segment called the blank segment.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 program segmentation}}}{\v\f4\fs20 \par }{\f4\fs20 As an example, let's write a program with three segments:  a main code segment, a subroutine that initializes an array of memory, and a data segment that is 64K bytes long.  Since the entire program is larger than 64K bytes, we must segment the code.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 program examples}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 segmentation}{\txe (See program segmentation)}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx1620\tx2250\adjustright {\f6\fs18 \tab \par }\pard \qj\fi720\widctlpar\tx1620\tx2250\adjustright {\f6\fs18 \tab keep\tab stuff\par ****************************************************************\par *\par *  Sample multi-segment program\par *}{\f4\fs20  \par }{\f6\fs18 ****************************************************************\par *}{\f4\fs20 \par }{\f6\fs18 Main\tab start\par \par \tab phk\par \tab plb\par \tab jsr\tab Init\par \tab lda\tab #0\par \tab rtl\par \tab end\par \par ****************************************************************\par *\par *  Data Area to be Initialized\par *\par ****************************************************************\par *\par Common\tab data\tab LoadSeg1\par \par array\tab ds\tab 65536\par \tab end\par \par ****************************************************************\par *\par *  Initialize the data area\par *\par ****************************************************************\par *\par Init\tab Start\par \tab using\tab Common\par \par \tab ldx\tab #0\par \tab lda\tab #0\par lb1\tab sta\tab >array,X\par \tab inc\tab A\par \tab inx\par \tab inx\par \tab bne\tab lb1\par \tab rts\par \tab end\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Looking at the program, we see that there are two load segments.  The first, which is the blank segment, consists of MAIN and INIT.  The linker will collect these and place them in one load segment.  The second load segment is LOADSEG1, which consists of the segment COMMON.  Note that long addressing was used to access ARRAY (indicated by the '>' character), which is in COMMON.  You must always use long addressing to access data in another load segment, even if they are small enough that the loader can put them into a single 64K bank.  The reason is simple: the fact that the load segments are small enough to fit into one bank is no guarantee that they will, in fact, be placed in the same bank by the loader.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CODECHK directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATACHK directive}}}{\v\f4\fs20 \par }{\f4\fs20 Two directives allow close control of the error checking the assembler will do for you.  Normally, the assembler checks to make sure that only long addresses are used to access data outside of the current segment.  Advanced programmers will find cases where they can safely use absolute addressing.  To disable the assembler's error checking, use the CODECHK and DATACHK directives.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object types}}}{\v\f4\fs20 \par }{\f4\fs20 The KIND directive can be used to specify the type of object segment you are creating.  It is described in Chapter 19, and used in an example to create a direct page segment in Chapter 9.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Changing The Word Size}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Changing The Word Size\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:CPU}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 status register}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 word size}}}{\v\f4\fs20 \par }{\f4\fs20 \par The 65816 is designed so that its registers can be used as either eight- or sixteen- bit registers.  The CPU knows how large they are from looking at two bits in the processor status register.  Bit 4 indicates what size the index registers (X and Y) are, and bit 5 gives the size of the accumulator.  In both cases, a one indicates eight-bit operations, and a zero indicates sixteen-bit operations.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGI directive}}}{\v\f4\fs20 \par }{\f4\fs20 Normally, the assembler doesn't care how large the registers are.  The exception is when immediate addressing is used.  In that case, the assembler must know how large the registers are, so that it knows how many bytes to generate.  Since the assembler has no idea what the setting of the processor status flags will be at run time, it is up to you to tell the assembler how large the registers are.  You do this with the LONGA and LONGI directives.  Both take an operand of either ON (sixteen-bit mode) or OFF (eight-bit mode).  In both cases, the default is ON.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONG macro}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHORT macro}}}{\v\f4\fs20 \par }{\f4\fs20 In practice, it is usually easier to use the LONG and SHORT macros from the macro library.  These macros set the status register for the CPU and issue the appropriate LONGA/LONGI directives for the assembler at the same time, reducing the chance of making an error.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Miscellaneous Directives}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Miscellaneous Directives\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 MERR Directive}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MERR Directive\tcl3}}}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par Errors found by ORCA have error levels.  Appendix A, which explains the error messages and what to do about them, also has a discussion of what the different error levels mean. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MERR directive}}}{\v\f4\fs20 \par }{\f4\fs20 If ORCA finds an error, it will normally not go on to link edit and execute a file; however, you may have a situation where the error is expected, and is in fact all right.  If that is the case, the MERR directive can be used to tell the system that it is all right to go on.  The operand is a constant that tells the system the highest error level that it should ignore.  Normally, of course, this is zero. \par \par }\pard \qj\widctlpar\adjustright {\b\f4 Using the 65C02 and 6502}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Using the 65C02 and 6502\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:cpu}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:cpu}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addressing modes}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 instruction set}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par  The 65816 in the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  is really three CPUs in one.  The story started with the 6502, used in the Apple II and many Apple //e computers.  The 6502 is a small, eight-bit version of the 65816.  The next member of the family is the 65C02, which has a few more instructions and addressing modes.  The 6502 is a true subset of the 65C02: all instructions and addressing modes on the 6502 are also present on the 65C02.  When the 65816 was designed, the same principle was followed.  All instructions and addressing modes in the 65C02 are also present in the 65816.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:writing programs for}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:writing programs for}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Because of this arrangement, you can use ORCA to write programs for the 6502 and 65C02 by simply restricting yourself to eight-bit registers and not using any of the instructions and addressing modes not available on the chip you are writing for.  The assembler can be of help when you do this.  Two directives, 65C02 and 65816, will cause the assembler to flag an error if you use an instruction or addressing mode that is not legal for the chip selected.  Both take ON or OFF for operands.  With 65816 ON, all addressing modes and instructions are enabled.  That is the default mode for the assembler.  With 65816 OFF, the 65C02 directive controls whether the instructions and addressing modes missing on the 6502 are flagged as errors.  The examples below show the correct setting for each chip.\par }{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:directive}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:directive}}}{\v\f4\fs20 \par }{\f6\fs18 \tab \par }\pard \qj\keep\widctlpar\adjustright {\f6\fs18 \tab 65816 ON             65816\par \par \tab 65816 OFF            65C02\par \tab 65C02 ON\par \par \tab 65816 OFF            6502\par \tab 65C02 OFF\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Positioning Code And The ORG Directive}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Positioning Code And The ORG Directive\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ROM code}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORG directive}}}{\*\bkmkend bk5}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler directives}{\rxe bk5}}}{\v\f4\fs20 \par }{\f4\fs20 \par The Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  has a very sophisticated memory management system.  Your program is converted, by the linker, into an executable load file.  This file is made up of a binary image and relocation dictionary.  This load file is placed into memory using the GS/OS loader.  The binary image is patched to run at the load location using the relocation dictionary.  All of this means that you do not have to tell the system where to load the program; the system will load your program wherever it finds enough free memory.\par The ORG directive, a relic from the older Apple // machines, is really not needed on this system.  It is used to force code to be located at a specified address.  We recommend that you not use it at all.  If you are writing ROM code, or writing programs for older Apple computers, see the full description in Chapter 19.  Other assembler directives that might prove useful in writing ROM code include ALIGN, OBJ, and OBJEND.  Chapter 19 also describes each of these directives.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 7: Using Macros\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 7\par Using Macros\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 7 \endash  Using Macros\tcl1}}}{\v\f4 \par }{\f4 \par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A macro is a series of statements, much like a program segment.  When you make a call to a macro in your program, the entire series of statements is assembled.  When you are programming, it makes sense to create a macro to perform a task that is used frequently (for example:  the division of two numbers).  This way, by inserting a call to the macro in your main program, you can "hide the ugly" and increase the readability of your programs.\par In this chapter, we will learn how to use a macro in an assembly language program.  Topics covered are:\par \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab Macro use.\par \par \bullet \tab The ORCA macro library.\par \par \bullet \tab Keyword parameters.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Tools of the Trade}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Tools of the Trade\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:libraries}}}{\v\f4\fs20 \par }{\f4\fs20 \par The ORCA assembler comes with over 100 predefined macros.  This collection of macros is so large and complete that most people will probably never need to write a macro of their own.  In this chapter we will look at how you can use the macros in ORCA (or any other macro library) even if you never intend to write one of your own. \par Let's start by getting used to the tools that we will use.  We will do this by writing a short program to read two four-byte integers, do the basic four math operations on them, and quit.  To do this, we will use the macros in the list in Table 7.1.  The name of the macro is in the first column, a short description of what it is used for is in the second column.  For a detailed description of any of these macros, see Chapters 22 to 23.  These are only a few of the macros available.  Although it is not strictly necessary, you may want to stop and read about these macros in the reference manual before we go on. \par \par }\pard \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\adjustright {\f4\fs20\ul macro}{\f4\fs20 \tab }{\f4\fs20\ul macro description\par }\pard \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright {\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GET4 macro}}}{\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PUT4 macro}}}{\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PUTS macro}}}{\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PUTCR macro}}}{\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ADD4 macro}}}{\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SUB4 macro}}}{\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MUL4 macro}}}{\pard\plain \qj\fi720\li1080\keep\keepn\widctlpar\tx3600\tx5040\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DIV4 macro}}}{\v\f4\fs20 \par }{\f4\fs20 \par GET4\tab read a four-byte integer\par PUT4\tab write a four-byte integer\par PUTS\tab write a string\par PUTCR\tab write a carriage return\par ADD4\tab add two four-byte integers\par SUB4\tab subtract two four-byte integers\par MUL4\tab multiply two four-byte integers\par DIV4\tab divide two four-byte integers\par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\keep\keepn\widctlpar\adjustright {\f4\fs20 Table 7.1  Macros For Our Example\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Let's just dive right in, and write the program.  After it is up and running, we will do some things to explore what is really going on.  Enter the following program, exactly as it appears, and save it as Calc4.Asm.  Don't try to assemble it right away!\par If you are not familiar with the ORCA editor, typing in this program will be good practice, but if you prefer, it is only fair to point out that this program has already been typed in for you.  The source for this program is on your samples disk in a folder called Text.Samples.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18         \tab \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 \tab keep \tab Calc4\par        \tab mcopy\tab Calc4.Macros\par **********************************************\par *\par *  Four-Byte Integer Calculator\par *\par **********************************************\par *\par C4     \tab start\par        \tab phk\par        \tab plb\par ;\par ;  Read the two input numbers.\par ;\par        \tab putcr   \par        \tab puts\tab #'First number:  '\par        \tab get4\tab num1,cr=t\par        \tab puts\tab #'Second number: '\par        \tab get4\tab num2,cr=t\par        \tab putcr   \par ;\par ;  Do the calculations and print the results.\par ;\par }\pard \qj\fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18        \tab add4\tab num1,num2,num3    \tab addition\par        \tab puts\tab #'Sum:  '\par        \tab put4\tab num3,#1,cr=t\par \par        \tab sub4\tab num1,num2,num3    \tab subtraction\par        \tab puts\tab #'Difference:  '\par        \tab put4\tab num3,#1,cr=t\par \par        \tab mul4\tab num1,num2,num3    \tab multiplication\par        \tab puts\tab #'Product:  '\par        \tab put4\tab num3,#1,cr=t\par \par        \tab div4\tab num1,num2,num3    \tab division\par        \tab puts\tab #'Ratio:  '\par        \tab put4\tab num3,#1,cr=t\par        \tab putcr   \par        \tab lda\tab #0\par        \tab rtl\par   \par num1   \tab ds  \tab 4 \par num2   \tab ds  \tab 4 \par num3   \tab ds  \tab 4\par        \tab end\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:macros}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:macros}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operands\:macros}}}{\v\f4\fs20 \par }{\f4\fs20 \par The first thing that you will probably notice is that there aren't many familiar instructions.  In fact, only four assembly language instructions appear in the entire program.  All of the other lines of code are macro calls.  Like all other statements, macro calls have a label field, an op code field, and an operand.  We didn't happen to use the label field, but it works just like the label field of any other statement.  Macro operands vary a great deal.  Later, we will look at the macro reference manual and see how to tell from it what the operand format is. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\v\f4\fs20 \par }{\f4\fs20 If you ignored the earlier warning and tried to assemble this program, you got a }{\f4\fs18 file not found}{\f4\fs20  error.  That's because of the MCOPY directive.  The MCOPY directive tells the assembler where to go to look for macros.  Since we haven't created the file yet, you got an error. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACGEN utility}}}{\v\f4\fs20 \par }{\f4\fs20 It is possible to tell the assembler to use the macro libraries that come with ORCA directly, but that is very inefficient.  Instead, we will build a macro library file just for this program which has only those macros that we actually need.  To do that, we will use a utility called MACGEN.  To run it, type\par \par }\pard \li360\widctlpar\adjustright {\b\f6\fs18 macgen calc4.asm}{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par where CALC4.ASM is the name of the program you just typed in.  (If you called it something else, use that name instead.)  MACGEN will start out by scanning your program and building a table of all of the macros that you need.  Each time it finds a new macro, it prints a dot.  Once it has scanned your entire program, it will print a list of the macros that you need and ask for an output file name.  You should respond with Calc4.Macros, the same name that was used in the MCOPY directive in the sample program.  Next, you will be asked for the name of a macro library to search.  The easiest thing to do (but not the fastest) is to use the fact that the program supports wildcards and give it the name of the macro directory.  Macros are kept in the library directory, inside a folder called ORCAInclude.  From your hard disk you would type 13:orcainclude:m=; from floppy disks you would have to substitute the actual location of the macros as you are using your system.  After a bit of whirring, you will have a macro file.\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 help}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Note that all of the parameters can be typed on the command line, if you like.  For details about this, and more information on MACGEN in general, see Chapter 12.  You can also use the on-line help facility by keying in\par \par }{\b\f6\fs18 help macgen\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Now you can assemble the program by typing\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 run calc4.asm\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par You will notice that it takes a while to assemble the program, even though it's fairly short.  The reason is easiest to see at the end of the assembly:  the lines generated message tells you how many lines the assembler created while expanding the macros.  Also, note all of the extra subroutines that the link editor finds.  These all come from the subroutine libraries.  In addition to using the subroutine libraries, the macros call some of the toolkits built into the Apple II}{\scaps\f4\fs20 gs.}{\f4\fs20   If you have ever looked at what it takes to do these math operations and input and output in software, you can appreciate the work that you don't need to do!  Take a moment to play with the program.  You can enter some fairly large integers!  If they aren't large enough for you, you might want to convert the program to use eight-byte integers by changing all of the '4' characters in the macro names to '8' and enlarging the DS areas to eight bytes each. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MDROP directive}}}{\v\f4\fs20 \par }{\f4\fs20 Well, that's your first program that uses macros.  Some minor points should be mentioned.  First, a macro file can be as large as the free memory in your computer.  If for some reason you need to use more than one macro file at a time, you certainly can \endash  up to four can be used, and the MDROP directive lets you get rid of those you don't need anymore.  Multiple macro libraries for a single program are not, however, recommended. \par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 The Macro Library}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Macro Library\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:libraries}}}{\v\f4\fs20 \par }{\f4\fs20 \par There are really three reference sections in this manual.  The first two cover the operating system, utilities and assembler, and you have probably already used them.  The last is the macro reference manual.  It covers the operand and data formats, as well as the macros used to manipulate the data. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\v\f4\fs20 \par }{\f4\fs20 As you learn the macros, you should think of them as a new, larger instruction set.  Keep in mind that it took you some time to learn the instruction set of the 65816, and it will also take time to learn about the macros in the macro library.  Start by reading the introductory material about addressing modes and data formats, then scan the reference manual to look for macros that fit your needs. \par If you need a macro that you suspect exists, or if you have forgotten the name of a macro, you will find a list of them on the reference card.  After you have the name, you can get a page number from the index and read up on the macro in the reference manual.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW macros}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACGEN utility}}}{\v\f4\fs20 .Extras disk;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA.Extras disk}}}{\v\f4\fs20 \par }{\f4\fs20 The extras disk contains a subdirectory called Libraries:AInclude.  These are macros written by Apple Computer, Inc., for its Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  Programmer's Workshop product, and licensed by the Byte Works, Inc.\par If you have installed ORCA on your hard disk using our installation procedures, you will find the AInclude folder already in your libraries folder, just like the ORCAInclude folder.\par Apple's tool macros, used to access the Apple II}{\f4\fs18 GS}{\f4\fs20  toolbox, are definitely the standard, but for a variety of reasons, they are fairly simple.  ORCA/M has an alternate set of tool macros that allow you to place the parameters passed to the tools on the same line as the name of the macro itself.  The standard Apple macros use the name of the tool call as shown in the Apple IIGS Toolbox Reference preceded with an underscore, while the ORCA tool macros precede the name with a ~ character.\par A quick example will give you an idea of just how much space and typing these macros can save.  Here's a short section of code that uses Apple's macros to draw a white square on the screen:\par \par }\pard \qj\fi360\widctlpar\tx1440\tx2060\tx4320\adjustright {\f6\fs18 \tab ph2\tab #15\par \tab _SetSolidPenPat\par \tab ph2\tab #10\par \tab ph2\tab #10\par \tab _MoveTo\par \tab ph2\tab #10\par \tab ph2\tab #100\par \tab _LineTo\par \tab ph2\tab #100\par \tab ph2\tab #100\par \tab _LineTo\par \tab ph2\tab #100\par \tab ph2\tab #10\par \tab _LineTo\par \tab ph2\tab #10\par \tab ph2\tab #10\par \tab _LineTo\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Here's an example using the ORCA tool macros.  These macros create exactly the same program as the ones you just saw.\par \par }\pard \qj\fi360\widctlpar\tx1440\tx2060\tx4320\adjustright {\f6\fs18 \tab ~SetSolidPenPat #15\par \tab ~MoveTo #10,#10\par \tab ~LineTo #10,#100\par \tab ~LineTo #100,#100\par \tab ~LineTo #100,#10\par \tab ~LineTo #10,#10\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can see the ORCA macros is use in Chapter 9.  For a comparison of both macros, see Chapter 21.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs28 More About Macro Parameters}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 More About Macro Parameters\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:parameters}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operands\:macros}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ADD4 macro}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:positional parameters}}}{\v\f4\fs20 \par }{\f4\fs20 \par In the example program that we wrote earlier, we used two kinds of parameters in the operands of the macros.  The most common kind is the positional parameter, which works like the operand of assembly language instructions and assembler directives.  If you look in the reference manual, each macro description starts with a formatting model of the macro.  The number of parameters that are allowed can be found by counting the number of parameters in the format model.  Note that not all allowed parameters are actually required.  The description of the ADD4 macro, for example, points out that the third parameter is optional by surrounding it in square ( [ ] ) brackets.  If you code\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18          add4  num1,num2}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 the two numbers are added and the result saved at NUM1. \par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PUT4 macro}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:keyword parameters}}}{\v\f4\fs20 .i).macros:using;\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Occasionally, it is easier to remember the name of a parameter than it is to remember its position.  That is when keyword parameters come in.  The example macro serves a double purpose:  in addition to telling you what position the parameters are in, the names used also indicate the keyword that is associated with each parameter.  Keyword parameters are specified as the parameter's keyword followed by an equal character and the string to set the parameter to.  In our sample program, we used a keyword parameter on the PUT4 macro.  If you check the reference manual, you will find out that if you assign anything to the CR parameter, the macro will output a carriage return after writing the integer.  Rather than remember what the position of the CR parameter is, we coded a CR=T in the operand. \par So how do you tell the difference between a keyword parameter and a positional parameter?  Actually, you don't.  Any parameter can be set using either position or a keyword, so you can use whichever method you wish.  In fact, as you can see from the PUT4 macro, you can even use positional and keyword parameters together.  Keep in mind, though, that keyword parameters occupy a position in the macro's parameter list.  Coding\par \par }\pard \fi450\widctlpar\adjustright {\b\f6\fs18          put4  num1,cr=t,#4        wrong\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would not right-justify NUM1 in a four-byte field, since the format value must be the second parameter.  The proper way to code the macro would be\par \par }\pard \fi450\widctlpar\adjustright {\b\f6\fs18          put4  num1,#4,cr=t        right\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par The easy way to remember this is to always put positional parameters last when you write a macro call in your program.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 8: Writing Macros\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 8\par Writing Macros\par }\pard \qj\widctlpar\adjustright {\par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 8 \endash  Writing Macros\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk6}\par }{\f4\fs20 As was pointed out in the last chapter, you do not need to be able to write a macro in order to use the macros provided with ORCA, and in fact, since there are so many, most people will never need to know how to write a macro of their own.  For that reason, you are urged not to try until you are fairly familiar with the system as a whole. \par But of course you're curious, and want to give it a try anyway.  Well, have fun!  This chapter is a tutorial on writing macros.\par The first step in successfully writing macros is to get a perspective on the task.  To write macros, you will need to learn a new programming language.  This is a fairly unusual language, since it is used to write assembly language source code. \par Like other programming languages, the one you are about to learn has variables, which are called symbolic parameters.  There are three data types:  arithmetic variables, boolean variables, and string variables.  You can define arrays of variables, pass parameters, do operations on the variables, and assign the results of those operations to the variables. The input to this language takes the form of source statements in the assembly language program.  The ultimate output is also in the form of source statements to the assembler. \par So, that's what this chapter is all about.  We will start by learning how to define a subroutine in our new language. \par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 MCOPY, MACRO and MEND}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 MCOPY, MACRO and MEND\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Of course, you remember right away that in the last chapter we said that macros are not subroutines, right?  Well they aren't, at least not in the sense of a subroutine in your program.  But a macro does in fact serve the same purpose in the conditional assembly language as subroutines in a program do.  We define a named sequence of instructions which accepts parameters, and use this named sequence of instructions in our program. The output from the macro is a set of assembly language source statements, which the assembler then assembles, adding code to our program. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each macro definition has a MACRO directive as the first statement.  The MACRO directive serves the same purpose as the START directive does in a code segment:  it marks the beginning of a new macro, just as START marks the beginning of a new segment.  The last line of every macro is an MEND directive, which marks the end of the macro.  Neither of these directives needs an operand, and neither can make any use of a label. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macro model line}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:naming}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:parameters}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The line right below the MACRO directive describes the parameters of the macro to the assembler.  It is called the macro model line.  The op code on that line is the name of the macro, and is the same name that is coded in the program to invoke a macro.  This line is required, and must be the line immediately after the MACRO directive.  Leaving a blank line between them, for example, would cause the macro to not work correctly. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:macro model statements}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }{\f4\fs20 Finally, the lines between the macro model line and the MEND directive are called macro model statements.  These lines are the ones that are sent to the assembler when you use the macro in your program. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\v\f4\fs20 \par }{\f4\fs20 Let's stop for a minute \endash  there were a lot of new terms in the last few paragraphs.  To firm up those ideas, let's write a very simple macro.  The Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  is supplied with several "toolkits," that is, a collection of routines written by Apple and accessed via macro calls.  One of these, called _WriteChar, will print the character in the least significant byte of the two-byte value stored on the stack to the screen.  To call the Text Tools, you need to load the X register with the toolkit call number and function number, push the value to be printed onto the stack, and then execute a long call to the tool dispatcher.  You can hide the messy details in a macro named _WriteChar, shown below.\par \par }\pard \fi450\widctlpar\tx1440\tx2160\tx3600\tx4320\adjustright {\f6\fs18         \tab macro\par         \tab _WriteChar\par         \tab pha\par         \tab ldx\tab #$180C\par         \tab jsl  \tab $E10000\par         \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Enter this macro using the editor, just like you would enter a program. Afterwards, save it in a file called STUFF.MACROS, and then type the following program into a new file. \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \fi446\keepn\widctlpar\tx1440\tx2160\tx3600\tx4320\adjustright {\f6\fs18        \tab \par \tab keep \tab stuff\par        \tab mcopy\tab stuff.macros\par Main      start\par        \tab phk\par        \tab plb\par \par        \tab ldy  \tab #0      \tab Initialize index to zero\par \par top    \tab lda \tab msg,Y   \tab Load a character\par        \tab beq\tab quit        \tab Check end condition\par        \tab phy              \tab Save contents of Y register\par        \tab _WriteChar         \tab Print a character\par        \tab ply               \tab Restore Y value\par        \tab iny\par        \tab bra\tab top\par \par quit      lda \tab #0\par           rtl\par \par msg    \tab dc\tab c'Hello, World!',H'0D0A'\par        \tab dc  \tab i'0'\par }\pard \fi450\widctlpar\tx1440\tx2160\tx3600\tx4320\adjustright {\f6\fs18       \tab end\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par When you run this program, it will print the contents of MSG onto the screen.  Note that the PHA, LDX and JSL instructions don't show up anywhere in the program we wrote \endash  the assembler pulls them in from the STUFF.MACROS file.  Also note how we are passing a parameter to the macro, in the accumulator.\par \par }{\b\f4\fs28 Basic Parameter Passing}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Basic Parameter Passing\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:parameter passing}}}{\v\f4\fs20 \par }{\f4\fs20 \par In the last section, we found out how to write a macro that would do a simple substitution of code.  Now, we will look at a way to cause one macro to generate different code when it is used in two different places. To do this, we need to learn how to pass parameters to macros. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:macros}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operands\:macros}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 \par }{\f4\fs20 The first line of the macro, like most lines, has a label field and an operand field.  In the last section, we didn't put anything in the label and operand fields.  In fact, we can't put the normal kinds of things in those fields.  Instead, the label field of the statement must contain a symbolic parameter, if it has anything at all, and the operand field can only contain symbolic parameters, separated by commas.  Symbolic parameters are the variables of the conditional assembly language.  They start with an &, and are followed by a label.  One way to set the value of a symbolic parameter is by passing it as a parameter to a macro. Symbolic parameters defined in this way are always string variables.  The string they contain is the label name that was coded in the operand field of the macro call.  Once defined, a symbolic parameter can be used anywhere in an assembly language statement.  The assembler always starts by replacing any symbolic parameters with the value that has been assigned to it. \par As an example, we will write a simple macro to add two two-byte integers. We will pass three parameters, each of which is the name of a label where a two-byte integer can be stored.  The macro will add the contents of the first two locations and place the result in the third.  We will also define a label, and place it on the CLC instruction.  The macro looks like this: \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab macro\par &lab   \tab add \tab &num1,&num2,&num3\par &lab   \tab clc\par        \tab lda \tab &num1\par        \tab adc \tab &num2\par        \tab sta \tab &num3\par        \tab mend\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\v\f4\fs20 \par }{\f4\fs20 \par This macro is a little more complicated than our first one, and you may want to see just what it really produces.  That is, in fact, a good idea.  After writing any new macro, you should expand it several different times by passing different operands and look at the source lines generated.  Normally, the assembler doesn't put the lines generated by a macro in the listing, but you can force it to by placing a GEN ON directive in the program.  If the above macro is in a file called TEST.MACROS, then the following program will show you what happens. \par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2160\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\tx1440\tx2160\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 programming examples}}}{\f6\fs18       \tab \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab list\tab on\par        \tab mcopy\tab test.macros\par        \tab gen \tab on\par \par test   \tab start\par        \tab phk\par        \tab plb\par        \tab add \tab I,J,K\par lb1    \tab add \tab K,J,I\par        \tab lda \tab #0\par        \tab rtl\par \par I      \tab dc  \tab i'1'\par J      \tab dc  \tab i'2'\par K      \tab dc  \tab i'3'\par        \tab end\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:macros}}}{\v\f4\fs20 \par }{\f4\fs20 \par There is no need to link or execute the program, since all we want to do is look at the lines produced by the macro.  If you don't try to link the program, you really don't even need the definitions of I, J and K.  Pay special attention to what happens to the label, LB1.  In fact, take a moment to change the macro, placing the &LAB parameter on the ADC, instead of on the CLC, and see what happens.  Using a label on a program line that contains a macro call does not define the label.  It only gets defined if the macro places the label on a statement that it produces.  You can also use the label in more than one place inside of the macro.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Defining Symbolic Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Defining Symbolic Parameters\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:defining}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The next four sections introduce the instruction set of the conditional assembly language.  Although we will look at some examples of individual statements, we will have to put off a really meaningful example until later, since some parts of all of the next few sections are needed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 \par }{\f4\fs20 When we defined the ADD macro in the last section, we also managed to define four symbolic parameters at the same time:  &LAB, &NUM1, &NUM2, and &NUM3.  In this section, we will look at a more direct way of defining a symbolic parameter.  Six directives come to our aid.  Let's start by defining a string (or character) type symbolic parameter.  The op code is LCLC, or }{\i\f4\fs20 local character}{\f4\fs20 , and the operand is the name of the symbolic parameter we want to define.  There is usually no label. \par \par }\pard \qj\widctlpar\tx1440\tx2160\adjustright {\f6\fs18    \tab lclc\tab &string\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par After the assembler encounters this line, the symbolic parameter &STRING is defined.  It also has an initial value, the null string (a string with no characters).  Strings have a length as well as a value, and at this point the length of &STRING is zero.  A string variable can hold up to 255 characters. \par }\pard \qj\fi360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:booleans}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLA directive}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLB directive}}}{\v\f4\fs20 \par }{\f4\fs20 To define an arithmetic symbolic parameter called &NUM and a boolean symbolic parameter called &LOGIC, we would use\par \par }\pard \qj\fi446\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab lcla\tab &num\par }\pard \qj\fi450\keep\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab lclb\tab &logic\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par Both are initialized to zero.  Arithmetic symbolic parameters can contain any four-byte signed integer value, while boolean symbolic parameters can take on any value from 0 to 255.  When used in a logical expression, zero is treated as false, and any other value as true. \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 symbolic parameters:scope;\par }{\f4\fs20 The symbolic parameters defined so far are all local symbolic parameters.  If defined in the program itself, they go away when the END directive of the segment in which they were defined is encountered.  If used in a macro, they vanish when the MEND directive is found.  Note, however, that if a macro contains a macro call, the symbolic parameter is available to the second macro.  For example, the code below will work (although it is meaningless): \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab macro\par       \tab main\par       \tab lcla\tab &num\par        \tab newmac\par        \tab sta \tab &num\par        \tab mend\par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab macro\par        \tab newmac\par        \tab lda \tab &num\par }\pard \qj\fi446\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab mend\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 macro model line}}}{\v\f4\fs18 \par }{\f4\fs20 \par Symbolic parameters defined by the macro model line are also local. \par There is also a way to define symbolic parameters so that they are global in scope.  The following lines define three global symbolic parameters: \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GBLA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GBLB directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GBLC directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab gbla\tab &num\par        \tab gblb\tab &logic\par        \tab gblc\tab &string\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Global symbolic parameters still vanish at the end of a segment, when the END directive is encountered, but they do not go away when a macro expansion has finished.  This fact lets you create macros that pass information to one another by defining global symbolic parameters and assigning values to them. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:arrays of}}}{\v\f4\fs20 \par }{\f4\fs20 Symbolic parameters, as we said, can be subscripted.  To define an array of symbolic parameters, place the maximum size of the array after the name of the symbolic parameter, in parentheses.  For example,\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab lclc\tab &strings(10)\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par defines an array of ten strings.  Using &STRINGS(4) in a statement would cause the fourth string in the array to be used.  Arrays can have up to 255 elements.  See the reference section for details. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Changing and Using Symbolic Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Changing and Using Symbolic Parameters\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The values of symbolic parameters are changed using set symbols.  The set symbol is a directive that is logically equivalent to the assignment operator in most languages, but unlike most languages, the operator itself is typed.  This means that the directive used to assign a value to an arithmetic symbolic parameter is different from the one used to assign a string to a character symbolic parameter.  The set symbol directives are SETA, SETB, and SETC.  All three directives must have a symbolic parameter in the label field, and it is that symbolic parameter that is changed. \par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETB directive}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETC directive}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:macros}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:booleans}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The SETA and SETB directives both use a constant expression in the operand field.  The operand is evaluated to give a fixed integer result.  In the case of the SETA directive, the result is assigned directly to the arithmetic symbolic parameter, while in the case of the SETB directive, the result is first taken mod 256, yielding a result between 0 and 255.  Generally, logical expressions are used in the operand of a SETB directive, such as CONST<=0.  Logical expressions always produce a result of zero or one, which correspond to false and true, respectively. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 symbolic parameters:dot operator; symbolic parameters:string concatenation;\par }{\f4\fs20 The operand of a SETC directive is a string.  It must be enclosed in quote marks if the string contains spaces, starts with a quote mark, or is a string operation.  Two strings can be concatenated by the SETC directive:  to do that, simply separate them with a + character. \par Some examples of set symbols are shown below. \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 &num     \tab seta  \tab const-const:65536*65536\par &num     \tab seta  \tab &num-1\par &arr(4)  \tab seta  \tab 16\par &arr(&num)  seta\tab &arr(4)\par &logic   \tab setb  \tab &num>0\par &logic   \tab setb  \tab 1\par &string  \tab setc  \tab '&string+'&num\par &string  \tab setc  \tab 10.5\par &string  \tab setc  \tab 'Here''s a quoted string'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The examples above also point out how array elements are set and used, as well as the fact that a symbolic parameter can be used to specify an array subscript.  There is one more fine point about symbolic parameters that we should point out, and that is the use of the dot operator.  If a symbolic parameter is followed immediately by a dot, the dot is removed from the line during expansion of the symbolic parameter.  To see why this is useful, let's look at a somewhat contrived example.  Let's assume that in a macro you will be doing an operation on the X register, but that you do not know if it will be a load or store.  The first two characters of the operand are contained in the symbolic parameter &OP.  Then the dot operator is used to indicate that the X is not a part of the symbolic parameter name.  If &OP contains the characters LD, then the following line creates a LDX operation. \par \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab &op.x\tab addr\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Unfortunately, the dot operator is encountered far more often in logical expressions.  The expression &LOGIC.AND.&LOGIC2 gives a syntax error:  it must be coded as &LOGIC..AND.&LOGIC2. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\v\f4\fs20 \par }{\f4\fs20 If you have tried any of the above directives in a test program, you may have noticed that they weren't printed.  That is because once a macro is developed, it is rare to want to see all of the conditional assembly lines that go into generating the code.  If you need to look at those lines, you should make use of the TRACE directive, described in Chapter 20. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 String Manipulation}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 String Manipulation\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASEARCH directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AMID directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Two directives greatly increase your ability to work on strings.  These are the ASEARCH directive, which lets you search one string for occurrences of another, and AMID, which allows selection of a small number of characters from a string. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\v\f4\fs20 \par }{\f4\fs20 The ASEARCH directive has three operand fields separated by commas.  The first is the string that you want to search, the second is the string to search for, and the last is the position in the string to begin the search.  The result is a number, so the label field must contain an arithmetic symbolic parameter.  It is set to the position in the string where the search string was found, or zero if it wasn't found.  The comment fields in the following examples tell what values would be assigned. \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2520\tx5040\adjustright {\f6\fs18 &num   \tab asearch \tab 'TARGET STRING',RG,1 \tab 3\par &num   \tab asearch \tab 'TARGET STRING',R,1   \tab 3\par &num   \tab asearch \tab 'TARGET STRING',R,4 \tab 10\par &num   \tab asearch \tab 'TARGET STRING',Z,1  \tab 0\par &num   \tab asearch \tab 'TARGET STRING',R,11 \tab 0\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 \par }{\f4\fs20 \par The AMID directive also takes three operands, separated by commas.  The first is the string, the second is the position of the first character to select, and the third is the number of characters to select.  It is legal to ask for characters that are outside of the range of the string, in which case a character is not returned.  The label field of the directive must contain a character type symbolic parameter.  The examples below show the resulting string in the comment field. \par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2520\tx5040\adjustright {\f6\fs18 &string \tab amid  \tab 'TARGET STRING',2,3   \tab ARG\par &string \tab amid  \tab 'TARGET STRING',12,3  \tab NG\par &string \tab amid  \tab 'TARGET STRING',20,3  \tab null string\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Conditional Assembly Branches}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Conditional Assembly Branches\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbols}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 conditional assembly}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:assembler}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Perhaps the most important capability in the conditional assembly language is the ability to branch, thus skipping code, or looping over it several times.   To use a branch, we must first have somewhere to branch.  Conditional assembly branch labels take the form of a period in column one, followed by a label.  These statements are called sequence symbols, and are treated as comments unless the assembler is looking for a place to branch. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AGO directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are two branching directives.  The first is called AGO.  Its operand is a sequence symbol.  It is an unconditional branch.  You might try assembling a short test program with the following code to see how it works. \par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18        \tab ago\tab .there\par ;This comment will not be in the final program\par        \tab lda \tab #4    \tab ...and neither will this lda\par .there\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par The other branch is a conditional branch, similar in function to the BASIC construct, IF condition THEN GOTO label.  It is named AIF.  The operand is a logical expression followed by a comma and a sequence symbol.  If the expression evaluates to zero, it is false, and if it evaluates to non-zero, it is true.  The following code fragment produces four ASL A instructions.  Again, you can try it out in a short sample program. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab lcla\tab &n\par &n     \tab seta\tab 4\par .top\par        \tab asl \tab A\par &n    \tab seta\tab &n-1\par        \tab aif \tab &n>0,.top\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Attributes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Attributes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 {\*\bkmkstart bk7}\par Occasionally, it is nice to know more about a label or symbolic parameter than what its value is.  That is where attributes come in.  Attributes give you a way of asking questions about a label or symbolic parameter.  They take the form of a letter, a colon, and the name of a label or symbolic parameter.  Attributes are used like functions, being mixed into an expression as if they were an integer constant. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COUNT attribute}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:arrays of}}}{\v\f4\fs20 \par }{\f4\fs20 The first attribute that we will look at is the count attribute.  It is used to tell if a label or symbolic parameter has been defined, and if so, how many subscripts are available.  The count attribute of an undefined label or symbolic parameter is zero.  The count attribute of a defined label, or a defined symbolic parameter that is not subscripted, is one.  The count attribute of a subscripted symbolic parameter is the number of subscripts available.  The count attribute is used in the following loop to initialize a numeric array for a symbolic parameter that may or may not be defined. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:assembler}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1800\tx2700\adjustright {\f6\fs18        \tab \par }\pard \qj\fi450\keepn\widctlpar\tx1800\tx2700\adjustright {\f6\fs18 \tab lcla\tab &n\par &n     \tab seta\tab C:&array\par        \tab aif \tab &n=0,.past\par .top      \par &array(&n) \tab seta \tab &n\par &n      \tab seta \tab &n-1\par         \tab aif  \tab &n,.top\par .past\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par It may seem like poor programming is the only case where you would not know if a symbolic parameter had not been defined, but there are in fact two very common uses for the count attribute.  The first is when a macro will define a global symbolic parameter to communicate with any future versions of itself.  In that case, the macro can test to make sure the parameter has not been defined already.  The following macro uses this fact to define a sequence of integers.  You don't need to count the macros, just put in a handful - they count themselves. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GBLA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab macro\par &lab   \tab count\par        \tab aif \tab C:&n>0,.past\par        \tab gbla\tab &n\par .past\par &n     \tab seta\tab &n+1\par &lab   \tab dc  \tab i'&n'\par        \tab mend\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:parameter passing}}}{\v\f4\fs20 \par }{\f4\fs20 The second use is to check whether a parameter was passed.  We could modify our original ADD macro so that if the last parameter were omitted, the result could be stored in the first location.  This makes use of the fact that the assembler doesn't define a macro model line symbolic parameter unless a call to the macro is made with an operand corresponding to a symbolic parameter.  The new macro would look like this: \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab macro\par &lab   \tab add \tab &num1,&num2,&num3\par        \tab aif \tab C:&num3,.PAST\par        \tab lclc\tab &num3\par &num3  \tab setc\tab &num1\par .past\par &lab   \tab clc\par        \tab lda \tab &num1\par        \tab adc \tab &num2\par        \tab sta \tab &num3\par        \tab MEND\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LENGTH attribute}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DW macro}}}{\v\f4\fs20 \par }{\f4\fs20 \par The next attribute is the L, or length, attribute.  The length attribute of a label is the number of bytes created by the line where the label was defined.  This makes counting characters very easy!  The DW macro from the macro library takes a string and precedes it by a one-byte integer containing the number of characters in the string.  It is a very simple macro: \par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab macro\par &lab   \tab dw \tab &str   \par &lab   \tab dc  \tab i1'L:sysa&syscnt'\par sysa&syscnt dc\tab c'&STR'\par        \tab mend\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 &SYSCNT symbolic parameter}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 duplicate label}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par It also demonstrates the use of the &SYSCNT symbolic parameter.  This symbolic parameter is predefined by the system, and is incremented once at the beginning of each macro expansion.  It is what prevents two occurrences of the DW macro in the same code segment from creating a duplicate label.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:booleans}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\*\bkmkend bk6}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:writing}{\rxe bk6}}}{\*\bkmkend bk7}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 attributes}{\rxe bk7}}}{\v\f4\fs20 \par }{\f4\fs20 The length attribute of an arithmetic symbolic parameter is four.  The length of a boolean symbolic parameter is one.  The length of a string symbolic parameter is the number of characters in the string. \par This concludes the tutorial of the conditional assembly language.  Like all languages, it will seem strange until you have used it for a while.  Practice is the only way to overcome that difficulty.  If you would like to see some examples of how the conditional assembly language is used, look at any of the macros in the macro library.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 9: Writing Programs and Utilities\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 9\par Writing Programs and Utilities\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 9 \endash  Writing Programs and Utilities\tcl1}}}{\v\f4 \par }{\f4 \par \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are several different kinds of programs that run on the Apple IIGS.  This chapter gives a quick overview of how to use ORCA/M to develop each of these kinds of programs.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 system programs}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Finder}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 desktop programs}}}{\v\f4\fs20 \par }{\f4\fs20 The kind of program you probably run most often is called a system program.  System programs have a file type of S16, and can be launched from program launchers like Apple's Finder or the ORCA shell.  System programs are generally desktop programs with menu bars and windows, but you can also write text system programs, or programs that use the graphics screen without using menus and other features of the toolbox.  In fact, the ORCA shell is a system program, but it is a text based application.\par Another kind of program is the shell program, which has a file type of EXE.  Shell programs cannot be executed from the Finder.  A shell program is the easiest kind of program to write using ORCA, since you don't have to leave ORCA to run the program.  You can create shell programs that use the graphics screen or the desktop environment.  For example, the PRIZM desktop development program is a shell program that runs from the ORCA shell.  Another example of a shell program is a utility, like the MACGEN utility you have used throughout this manual.\par There are several specialized kinds of programs you can write that aren't covered here.  Absolutely any kind of program can be written with ORCA/M, but for specialized programs you will need to find documentation covering the specialized aspects of the program you want to write.  With the special information in hand, the techniques covered in this chapter can be applied to create the new program.  This chapter ends with a list of some of the more common specialized programs, along with where to go to get more information.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Shell Text Programs}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Shell Text Programs\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 word size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 native mode}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tool}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Memory Manager}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\v\f4\fs20 \par }{\f4\fs20 \par We'll start by looking at a text program called from the ORCA shell.  While this may not be the kind of program you ultimately want to write, you should still know how text programs work from the ORCA shell.  There are two reasons to take the time to learn about text shell programs.  The first is that all of the rest of this chapter builds on this information, so you may miss valuable tips if you skip ahead.  More importantly, with a few minor exceptions, desktop programs launched from the Finder make use of the same protocols we'll discuss here.\par When you run a program from any program launcher, whether that is Apple's Finder, the ORCA shell, or some other environment, the program launcher calls the system loader to read the program from disk and place the program in memory.  The system loader can also allocate direct page space for the program.  The program launcher then sets up the registers and does a JSL to your program.  Your program should only access memory that belongs to it, either because the memory is a part of the program and was loaded by the loader, or because you allocated more memory by calling the memory manager.  When your program is finished, it returns to the calling program by using either a GS/OS Quit call or by doing an RTL, depending on the exact circumstances.  We'll go over the exact conditions as we come to them.\par When your program is called by the shell, it is called in native mode with both index registers and the accumulator size set to sixteen bits.  The Tool Locator, Memory Manager, Loader, Miscellaneous Tools and Text Tools have been initialized, and standard input, standard output, and error output are all set up to do reasonable things; the default setting for I/O is the CRT screen.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 user ID}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell identifier}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW}}}{\v\f4\fs20 \par }{\f4\fs20 The registers contain several important parameters.  In the accumulator is a user ID number, assigned by the loader when your program was loaded into memory.  This user ID number should be used for any subsequent calls to any tools that require a user ID, most notably, the Memory Manager.  The X and Y registers contain the most and least significant words of the address of the command line, respectively.  The command line contains an eight-character shell identifier followed by the actual characters typed when your program was executed (with shell variables expanded and I/O redirection handled and removed).  The shell identifier is useful if you are writing programs that will execute from more than one program launcher.  Different program launchers may place different requirements on your programs; the shell identifier lets you check to see which shell you are running under, and therefore which requirements you must satisfy.  The shell identifier used by both ORCA and APW (Apple II}{\f4\fs18 GS}{\f4\fs20  Programmer's Workshop) is BYTEWRKS.  The command line is null-terminated.  Note that it is legal to pass zeroes in the X and Y registers, indicating that there is no command line or shell identifier.  Most desktop program launchers, like Apple's Finder, pass zeros in the X and Y registers, since they do not have a command line to pass.\par During execution, you may have reason to open disk files, initialize other toolkits, or reserve memory.  It is your responsibility to make sure that all disk files are closed, all memory deallocated, and all toolkits shut down before you return to the shell.\par One important point is that you should never reinitialize the Text toolkit.  Any program launcher that is capable of executing an EXE file is required to initialize it for you.  If you reinitialize the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\f4\fs20 Text toolkit, you can defeat some of the features of the program launcher.  Under ORCA, reinitializing the Text Toolkit can interfere with I/O redirection.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal protocol}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 Different shells may initialize the Text Tools in different ways.  Under ORCA, the Text Toolkit will be initialized with the Pascal protocol.  If you are using the ORCA I/O macros, you will never even need to be aware of this, since all terminal control features are handled for you.  If you are writing your own output routines, you should read up on the different protocols in the }{\i\f4\fs20 Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Toolbox Reference Manual}{\f4\fs20 .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }{\f4\fs20 When you do return to the shell, the registers must be in sixteen-bit mode.  The accumulator contains an error code used by the shell to determine if an EXEC file should stop execution.  Normally, you will set the accumulator to zero before returning, indicating that there was no error.  If there was an error, return the error number reported by the toolkit if it was a system error, or $FFFF if it was an internal error detected by your program.  You can exit with either an RTL or a GS/OS QUIT call.  Note that some program launchers may require one or the other \endash  ORCA supports both.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 user ID}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\v\f4\fs20 \par }{\f4\fs20 The sample program shown below illustrates these principles.  It prints the user ID number, shell identifier and command line passed to it when it executes.  It then loads the accumulator with a zero to indicate that no error has occurred and returns.  Try running the program with a variety of things typed after the command name, especially input and output redirection.  Be sure you understand what the output is, and why.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\tx1440\tx2160\tx3600\tx4320\adjustright {\f6\fs18        \tab \par }\pard \fi360\keepn\widctlpar\tx1260\tx1880\tx3960\adjustright {\f6\fs18 \tab keep\tab args\par \tab mcopy\tab args.macros\par ************************************************************\par *\par *  Args - Echo command line arguments, shell identifier, user ID\par *\par *  Inputs:\par *\tab A - User ID\par *\tab X-Y - pointer to shell identifier and command line\par *\par *  Outputs:\par *\tab A - error code; set to 0\par *\par ************************************************************\par }\pard \fi360\widctlpar\tx1260\tx1880\tx3960\adjustright {\f6\fs18 *\par Args\tab start\par cl\tab equ\tab 0\tab command line pointer\par \par \tab phk\tab \tab use local data bank\par \tab plb\par \tab sta\tab userID\tab save the user ID\par \tab sty\tab cl\tab save the command line pointer\par \tab stx\tab cl+2\par \tab txa\tab \tab if cl pointer is null then\par \tab ora\tab cl\tab   tell the user\par \tab bne\tab lb1\par \tab puts\tab #'Null command line pointer',cr=t\par \tab brl\tab lb5\par lb1\tab anop\tab \tab else\par \tab puts\tab #'Shell ID: '\tab   write the shell identifier\par \tab ldy\tab #0\par \tab ldx\tab #8\par lb2\tab lda\tab [cl],Y\par \tab phx\par \tab phy\par \tab sta\tab ch\par \tab putc\tab ch\par \tab ply\par \tab plx\par \tab iny\par \tab dbne\tab x,lb2\par \tab putcr\par \tab puts\tab #'Command line: '\tab   write the command line\par \tab ldy\tab #8\par lb3\tab lda\tab [cl],Y\par \tab and\tab #$00FF\par \tab beq\tab lb4\par \tab phy\par \tab sta\tab ch\par \tab putc\tab ch\par \tab ply\par \tab iny\par \tab bra\tab lb3\par lb4\tab putcr\par lb5\tab anop\tab \tab endif\par \tab puts\tab #'User ID: '\tab write the user ID\par \tab put2\tab userID,cr=t\par \tab lda\tab #0\tab return with no error\par \tab rtl\par \par userID\tab ds\tab 2\tab user ID\par ch\tab ds\tab 2\tab current character\par \tab end\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Memory Management}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Memory Management\tcl2}}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\v\f4\fs20 \par }{\f4\fs20 \par Unlike ProDOS 8 programs, programs designed to run under GS/OS are almost always relocatable.  In fact, the penalties for writing a program that is not relocatable are so severe that we will not even discuss fixed location programs in this chapter.  Since programs are relocatable, there is no longer any need to present, or really to even be aware of, the memory map.  In fact, since ORCA itself is relocatable, it isn't even possible to present a memory map.\par Instead, you must be aware of the conventions used in the system for memory management.  Basically, Apple has a memory manager built into the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  ROMs, and all programs are expected to use it.  Using memory that has not been reserved for your own use can lead to disastrous results.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 user ID}}}{\v\f4\fs20 \par }{\f4\fs20 When your program is executed, the system loader (a program built into GS/OS that loads and relocates programs) reserves enough memory for your program.  If your program needs any memory outside of its physical bounds, it must call the Apple Memory Manager to get it.  The Apple Memory Manager requires that you supply a user ID number.  Except in very unusual circumstances, you should supply the user ID number assigned by the loader and passed to your program as a parameter.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Installing a New Utility}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Installing a New Utility\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:installing new}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 compiler\:installing new}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 System prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GetLInfoGS macro}}}{\v\f4\fs20 \par }{\f4\fs20 \par Once you have an executable file that runs under the ORCA shell, you may want to install it as a utility.  The advantages of doing so are that the program can be executed from any directory without typing a full path name, and the utility shows up in the command table.  Once it is in the command table, you can use right-arrow expansion to abbreviate the command, and HELP will list it.\par Installing the program as a utility is really quite simple.  To do so:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Utilities prefix}}}{\v\f4\fs20 \par }\pard \qj\fi360\li900\widctlpar\tx900\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li900\widctlpar\tx1260\adjustright {\f4\fs20 1.\tab Place the program in the utility prefix.  As shipped, this is the :ORCA:Utilities prefix, but you may have moved it to your hard disk, if you are using one.\par }{\pard\plain \qj\fi-360\li900\widctlpar\tx1260\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSCMND file}}}{\pard\plain \qj\fi-360\li900\widctlpar\tx1260\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command table}}}{\v\f4\fs20 \par }{\f4\fs20 \par 2.\tab Add the program name to the command table.  The command table is in the SHELL directory, where the editor is located.  It is called SYSCMND.  The command table is a text file, and can be changed with the editor.  Simply edit it, and add the name of your program to the list of commands you see.  After at least one space or tab, type a U, which indicates that the command is a utility.  An optional comment can be used to briefly describe the utility's purpose.\par \tab \tab Be sure to put the command in the correct location.  The order that commands appear in the command table determines how right-arrow expansion works.  The shell expands the first command that matches all letters typed.\par }{\pard\plain \qj\fi-360\li900\widctlpar\tx1260\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMMANDS command}}}{\v\f4\fs20 \par }{\f4\fs20 \tab \tab The new command will not be in the command table until you use the COMMANDS command to reread the command table or reboot.\par }{\pard\plain \qj\fi-360\li900\widctlpar\tx1260\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 on-line help}}}{\v\f4\fs20 \par }{\f4\fs20 \par 3.\tab If you would like to have on-line help for the command, add a text file to the HELP directory in the UTILITIES prefix.  The name of the help file must be the same as the name of the utility.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Installing a Compiler or Editor}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Installing a Compiler or Editor\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Since the ORCA development environment is already broken up into small pieces, it is easy to replace one of those pieces, or to add one to those that exist.  Changing the ORCA editor is the easiest thing to do.  Simply place the new editor in the SHELL prefix and call it EDITOR.  When it is called by the system, the editor should do a GetLInfo call using the macro supplied with ORCA.  Three fields are of interest here.  The first is the SOURCE file, which is the full or partial path name of the file to edit.  The second is ORG, which is the displacement in the file where the cursor should be placed.  Usually, this is zero, but if a language aborted with an error, it can call the editor with the location of the offending line.  Finally, the PARMS field points to the error message to display on an error entry to the editor.  The editor returns to the shell in the normal way.\par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 To install an APW- or ORCA-compatible compiler into ORCA/M, see the section entitled "Installing a New Language" in Appendix C.\par }{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 compiler, writing new}}}{\v\f4\fs20 SetLInfoGS macro;}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you are writing a new compiler which runs in the ORCA environment, again, the GetLInfo call is used to fetch input parameters.  This time, though, the SetLInfo call must be used just before returning to the shell to tell the shell what to do next.  The section that describes these two shell calls explains what the compiler will see.  They are described in Chapter 24.  Your language will need a unique language number so the shell can associate source files for your language with your language processor.  Apple Computer maintains a complete list of language numbers, and will assign a language number to you on request.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 System Programs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 System Programs\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 system programs}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Finder}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 S16 programs}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FILETYPE command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Programs that are launched from the Finder have a file type of S16, and are called system programs.  For the most part, system programs are written the same way EXE programs are written, but there are three additional requirements you need to keep in mind.\par The two biggest differences between a system program (file type of S16) and a shell program (file type of EXE) other than the file type itself is that a system program must return to the program launcher with a GS/OS Quit command, and a system program must start and shut down all tools that it uses.\par So far, we've created programs that use an RTL instruction to return to the shell.  You can also use a GS/OS quit instruction, though.  There are several parameters that you can use with the GS/OS quit call, but we'll stick to the simplest possibility here.  If you would like more detail, refer to the }{\i\f4\fs20 Apple IIGS GS/OS Reference}{\f4\fs20 .  Here's what you would use in place of the familiar RTL instruction to exit from a program:\par \par }\pard \fi450\keepn\widctlpar\tx1440\tx2160\tx3600\tx4320\adjustright {\f6\fs18           _QuitGS qtRec                return to the program launcher\par \par }\pard \fi450\widctlpar\tx1440\tx2160\tx3600\tx4320\adjustright {\f6\fs18 qtRec     dc    i'0'                   Quit record\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 While it is a little more complicated, and takes a few more bytes of code, this actually works from the shell, as well as from system programs.  From the shell, the effect is exactly the same as if you had used an RTL instruction, but you can't return to the Finder any way except by using this sort of Quit call.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A system program must start all tools for itself.  A shell program, on the other hand, knows that the Tool Locator, Memory Manager, Loader, Miscellaneous Tools and Text Tools have been initialized.  As it turns out, you can restart and shut down any of these tools except the Text Tools from inside of a shell program.\par Putting all of these facts together, it turns out that most desktop programs can be written and debugged as EXE programs.  Desktop programs don't generally use the text tools.  The other tools can be started and shut down from within your desktop program, just as if the program were running from the Finder.  When your program is finished, you leave the program with a GS/OS Quit call, again just as if you were running from the Finder.  Since the shell supports all of these conventions, you can develop the program as an EXE file, which is the default file type created by the linker.  There is a big advantage to you when you run an EXE file, as opposed to an S16 file, too.  When the shell runs an S16 file, it has to shut itself down, then run the program.  When your program finishes, the shell must be reloaded.  All of that takes time \endash  time you don't have to waste if the program in an EXE file.\par Once the program is finished, you do need to change the file type to S16 so the Finder will recognize the program and run it.  You can change the file type on the program using the FILETYPE command, like this:\par \par }{\f6\fs18 filetype myprog S16\par }{\f4\fs20 \par Of course, the biggest chore to writing desktop programs is learning how to use the tools effectively to create menu bars, windows, and so forth.  The details of how to use the tools are beyond the scope of this user's manual.  There are many fine books that do cover the tools, though, and most of them give you examples using ORCA/M.  Chapter 1 gave a brief overview of some of these books.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Other Kinds of Programs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Other Kinds of Programs\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can create any kind of program with ORCA/M, but there are special requirements for most of these programs.  The requirements generally fall into two broad categories:  special headers, and different file types.\par As one example, classic desk accessories have a file type of CDA, and must start with a special header.  You can learn about Classic Desk Accessories by reading the appropriate chapter of the }{\i\f4\fs20 Apple IIGS Toolbox Reference}{\f4\fs20 .  To set the file type, you would use the FILETYPE command, just as we did in the last section to create an S16 file.\par The rest of this chapter talks about some of the most common types of programs other than shell programs and system programs, and tells you where to go to get more information.  You can find sample code for some of these on your ORCA/M samples disk, and other sample code can be obtained from your local users group or from major online services.\par The technical notes and file type notes listed as a source of more information are published by Apple Computer, Inc.  These are released through APDA, on major online services, and are also available from many users groups.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Classic Desk Accessories}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Classic Desk Accessories\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Classic Desk Accessory}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CDA}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Classic Desk Accessories are the text programs you get access to when you hold down the open apple and control keys and press the escape key.  Classic Desk Accessories are available from any Apple IIGS program that does not specifically go out of its way to disable them, although some Classic Desk Accessories can only be used from a particular operating system.\par For more information about how to write Classic Desk Accessories, see Chapter 5 of the }{\i\f4\fs20 Apple IIGS Toolbox Reference, Volume 1}{\f4\fs20 .  Additional information can be found in "Apple IIGS Technical Notes, #71:  DA Tips and Techniques."\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 New Desk Accessories}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New Desk Accessories\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 New Desk Accessory}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NDA}}}{\v\f4\fs20 \par }{\f4\fs20 \par New Desk Accessories are the programs you find listed under the Apple menu of most desktop programs.\par For more information about how to write New Desk Accessories, see Chapter 5 of the }{\i\f4\fs20 Apple IIGS Toolbox Reference, Volume 1}{\f4\fs20 .  Additional information can be found in "Apple IIGS Technical Notes, #71:  DA Tips and Techniques."\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Initialization Programs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Initialization Programs\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Initialization Programs}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Inits}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Initialization programs are executed automatically as you boot your computer.  ORCA/M comes with a couple of initialization programs that give you an idea of the range of things you can use them for.  One sets up the .PRINTER driver, setting the defaults you select with either a Classic Desk Accessory or a Control Panel Device.  The other is GSBug, the machine language debugger that you enter any time the Apple IIGS hits a break instruction.\par For more information about how to write initialization programs, see "Apple II File Type Notes, File Type $B6, ProDOS 16 or GS/OS Permanent Initialization File," and "Apple II File Type Notes, File Type $B7, ProDOS 16 or GS/OS Temporary Initialization File."\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Control Panel Devices}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Control Panel Devices\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 control panel devices}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CDevs}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Control panel devices, or CDevs, are the programs that are executed by Apple's control panel.  They are generally used for configuring something in your computer.  One example is the .PRINTER driver initialization CDev included with ORCA/M 2.0.\par For more information about how to write CDevs, see "Apple II File Type Notes, File Type $C7, Control Panel New Desk Accessory Device (CDev)."\par }{\f4 \sect }\sectd \sbkodd\linex-32767\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 10: Programming the Shell\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 10\par Programming the Shell\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 10 \endash  Programming the Shell\tcl1}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }{\f4\fs20 \par Like many professional development systems, the ORCA shell has enough power that you can program the shell itself.  This chapter introduces the commands and features that are used to program the shell.  Topics covered are:\par \par }\pard \qj\fi360\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab Shell Variables.\par \par \bullet \tab Passing Parameters to EXEC Files.\par \par \bullet \tab Looping.\par \par \bullet \tab Conditional Execution.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 What Is an EXEC File?}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 What Is an EXEC File?\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In order to learn how to effectively program the shell, you must start by thinking about it in the right way.  If you have never used a programmable shell, you probably think about a shell strictly in terms of the command line editor that executes a command when you type it.  The shell certainly is that, but it is much more.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands}}}{\v\f4\fs20 \par }{\f4\fs20 We start to see how powerful the shell can be when we use EXEC files.  (EXEC files go by many names - on other systems, they may have been called shell scripts, command files, or a variety of other names.  We use the name EXEC files to conform to Apple traditions.)  In its simplest form, an EXEC file is simply a list of commands that could have been typed from the command line, but were instead saved in a file.  Under ORCA, this file is given a special language stamp of EXEC.  When you execute the file, the operating system recognizes the file as a list of shell commands, and executes those commands in turn.\par So far, we have a genuinely useful facility to reduce repetitive tasks by letting us type them once, and save the commands.  But if you could pass parameters to an EXEC file, and then test those parameters and conditionally execute statements based on the input, the facility would be even more powerful.  Add the ability to define and set variables, and to loop over lists of strings, and things start to get very useful indeed.  The shell can do all of these things, and more.\par We have now come full circle.  Knowing what lies ahead, you can start to understand why the way you approach the shell can have a big impact on how useful it is.  The key concept for this chapter is to think of the shell not as a command processor, but as a language.  EXEC files are the source files for the shell language.  We will look at how variables are defined and used, what program control statements you have, and how to pass parameters.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs28 Variables}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Variables\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables}}}{\v\f4\fs20 \par }{\f4\fs20 \par To be useful, any language must have a way of holding, recalling and changing data.  In traditional algorithmic languages like BASIC, C, Pascal and assembly language, this is done with variables.  The shell is no exception.  It, too, is an algorithmic language, and it uses variables to hold information.  Shell variables are somewhat limited, though.  They cannot be subscripted, and come in only one type: strings.  This is a restriction, but since the primary use of the shell language is to deal with strings, setting up commands to be executed, the restriction is not as severe as it might seem at first.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are basically three places variables come from.  The first is a set of special variables recognized and changed by the shell.  These provide certain status information, such as the name of the last command executed, and whether that command had an error.  The second source is passed parameters.  We will look more closely at passed parameters later, but for now the important point is that whenever the shell executes an EXEC file, it creates several variables whose values are used to pass parameters.  Finally, you can define variables yourself.\par The table below lists the names of the shell variables that have special meaning to the shell or to one of the utilities or languages in the ORCA development environment.  It is very important that you avoid using variables with the names listed below, unless you understand what the variable is for.  Not all of these are defined automatically \endash  in some cases you must define them yourself.  Once defined, however, the shell uses these variables for special purposes, and putting incorrect information into the variables can cause the shell to do some unexpected and unwanted things.  Many of these variables will be discussed in the rest of this chapter.  A few are used for advanced or specific tasks that we won't go into here.  If the description of the variable sounds like something you want to use, see the reference section for details.  In fact, the reference section gives a more detailed description of each of these shell variables.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{0\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi360\li2160\widctlpar\tx2160\tx2880\adjustright {\f4\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\f4\fs20 \{0\}\tab The name of the EXEC file being executed.\par \{1\}, \{2\}, ...\tab Parameters from the command line.\par \{#\}\tab The number of parameters passed.\par \{AuxType\}\tab Provides automatic auxiliary file type specification for the linker.\par \{CaseSensitive\}\tab Controls whether shell variable values are case sensitive.\par \{Command\}\tab The name of the last command executed.\par \{Echo\}\tab Controls whether shell commands are echoed.\par \{Exit\}\tab Controls how the shell handles errors in a script.\par \{Insert\}\tab Controls whether the shell starts in insert or over strike mode.\par \{KeepName\}\tab Sets up an output file name for languages.\par \{KeepType\}\tab Sets the file type used by the linker for executable files.\par \{Libraries\}\tab Libraries list for the linker.\par \{LinkName\}\tab Sets up an output file name for the linker.\par \{Parameters\}\tab The parameters of the last command executed.\par \{Prompt\}\tab Sets the shell's prompt.\par \{Separator\}\tab Sets the separator used when the shell prints path names.\par \{Status\}\tab The error status returned by the last command or EXEC file executed.\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Table 10.1: Reserved Variable Names\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The SET Command}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The SET Command\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:assigning values to}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 With the preliminary comments out of the way, it is time to look at how variables are actually defined and changed.  This is done with the SET command.\par }{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab SET [variable [string]]\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\f4\fs20 The set command takes two parameters.  The first is the name of the variable you want to change, and the second is the name of the string you want to set the variable to.  The string starts with the first non-blank character past the name of the variable, and continues through the end of the line.  If you try to set a variable that does not exist, the shell creates the variable.  That avoids the need for a separate variable declaration statement.  As an example, let's assume you are working in a tree structured directory, but accessing information from another directory.  We will assume that the other directory is called\par }{\f6\fs18 \par }\pard \qj\widctlpar\tx720\adjustright {\f6\fs18 \tab  :HARDDISK:NEWPROJECT:SOURCECODE:MAINPIECE.  \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\f4\fs20 That's a lot to type every time you want to access a file!  The problem can be solved by defining a variable called D:\par \par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab SET D :HARDDISK:NEWPROJECT:SOURCECODE:MAINPIECE\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Now that we have the variable defined, we need to know how to use it.  To signal to the shell that a particular name is a variable that must be expanded, all you need to do is enclose it in soft brackets.  For example, to catalog the directory, you would type\par \par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab CATALOG \{D\}\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:expansion}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\v\f4\fs20 \par }{\f4\fs20 The shell expands \{D\} to the full path name you set that variable to, then passes the line on to the command processor.  The command processor never knows that you didn't simply type the line in with the full path name.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:string concatenation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY command}}}{\v\f4\fs20 \par }{\f4\fs20 When the shell expands the variable, it doesn't insert any blanks.  This lets you concatenate strings by simply placing them next to each other.  For example, to copy the file MYFILE from your directory, type\par \par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab COPY \{D\}:MYFILE\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par As you start to define your own variables, you will need to know what the restrictions are on their names, as well as how long strings can be.  Shell variable names must be 255 characters long or less; if you exceed this limit, the shell automatically truncates the name.  Variable names are case insensitive, so \{MYVAR\} and \{MyVar\} will expand to the same thing.  The only characters that you cannot use in a variable name are the space, tab and the left and right soft bracket (\{ \}).\par Strings can be up to 65535 characters long; again, they are truncated if you exceed the maximum allowed length.  While it is not normally necessary, strings can be enclosed in quote marks.  The only time this is normally necessary is when you are setting a variable to the null string, or when a string contains characters that have special meaning to the shell, like the semicolon (used to place more than one command on a line) or the greater than sign (used to redirect output).  Some examples are shown below.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \tab \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab SET FOO ""\par \tab SET BAR "Double quotes "" inside quotes"\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab SET GORP "Some special characters: ; >a <b"\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par At the start of this section, when the syntax for the SET command was given, you may have noticed that the string and variable names are both optional.  If you leave off the string, you might expect that the variable would be set to the null string.  In fact, if you leave off the string, the shell prints the value of the variable.  For example, after setting variables as we did above, if you typed SET BAR you would see the following:\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs18 \tab SET BAR\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab Set BAR  Double quotes " inside quotes\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ECHO command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }{\f4\fs20 \par If you leave off the variable name, too, the shell lists all of the variables that are currently defined, along with their values.  These features are mostly debugging aids \-\endash  to print a string from an EXEC file, you would normally use the ECHO command.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The UNSET Command}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The UNSET Command\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Once a variable has been defined, you may want to get rid of it.  This is done with the UNSET command.  The unset command takes a variable name as its parameter, and deletes both the variable and its contents.  If you have been following along by typing in the samples, you can clean up your system now with the following commands.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs18 \tab UNSET D\par \tab UNSET FOO\par \tab UNSET BAR\par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab UNSET GORP\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Classic Start: Hello, World}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Classic Start\: Hello, World\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 One of the things we have the C language to thank for is the defacto standard for the first program you try in any new language.  The program is very simple: it prints "Hello, world." to the screen.  It may seem almost too simple, but the point is a good one: try to learn how to enter and execute programs before concentrating on the language.  So let's give it a try.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }{\f4\fs20 At the start of this chapter, we said that the shell knows that a file is an EXEC file because the file's language stamp is EXEC.  This opens up a whole new can of worms.  ORCA uses source files instead of text files for one very important reason: each source file has a language number associated with it.  ORCA uses the language number to decide which compiler, interpreter, or whatever, to call when a file is to be processed.  If the language is EXEC, ORCA knows that the file is a command file, and that it is safe to execute the commands in the file when you type the name of the file.\par Naturally, you need to know how to set the language of a file.  To do that, type the name of the language.  After that, when the editor creates a new file, it will be stamped with the language you specified.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ECHO command}}}{\v\f4\fs20 \par }{\f4\fs20 Before writing our first shell program, we need to know how to write a string.  The ECHO command is used for that purpose.  The ECHO command starts with the first non-blank character, and writes all characters from there to the end of the line to standard out.  The command we want to execute, then, is\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab ECHO Hello, World.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can type this command from the command line, and like all shell commands, it will work.\par Now let's put all of this together into a program.  Follow the steps outlined below.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC command}}}{\v\f4\fs20 \par }\pard \qj\fi360\li1080\widctlpar\tx1080\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li1080\widctlpar\tx1080\adjustright {\f4\fs20 1.\tab Enter the EXEC command to change the current language to EXEC:\par \par }{\b\f6\fs18 \tab EXEC\par }{\f4\fs20 \par 2.\tab Enter the editor with a new file name.  To call the program HI, type\par }{\pard\plain \qj\fi-360\li1080\widctlpar\tx1080\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\v\f4\fs20 \par }{\b\f6\fs18 \tab \tab \par \tab EDIT HI\par }{\f4\fs20 \par 3.\tab Enter the ECHO command into the new file, as it appears in the example above.\par \par 4.\tab Save the file and exit the editor.\par \par }\pard \qj\fi-360\li1080\keepn\widctlpar\tx1080\adjustright {\f4\fs20 5.\tab Type the name of the HI program.  The shell responds by running it.\par }{\pard\plain \qj\fi-360\li1080\keepn\widctlpar\tx1080\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }{\b\f6\fs18 \tab \tab \par \tab HI\par }\pard \qj\fi-360\li1080\widctlpar\tx1080\adjustright {\f6\fs18 \tab Hello, world.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\v\f4\fs20 \par }{\f4\fs20 \par Before we get off of the subject, there are a few more things about language names that you should be aware of.  First, typing the language name simply sets the default language.  The only thing this is used for is if the very next EDIT command creates a new file.  If you edit an existing file, the language of the file you edit stays the same.  Also, when you edit an existing file, the editor changes the default language to match the language of the file you edited.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CHANGE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASM65816\:language}}}{\v\f4\fs20 \par }{\f4\fs20 If you happen to create a file which has the wrong language stamp, you can change the language stamp using the CHANGE command.  For example, if you had failed to change the default language to EXEC before entering your program in the above example, the file would probably be stamped as ASM65816.  To change it to an EXEC file, you would type\par \par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab CHANGE HI EXEC\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 utilities}}}{\v\f4\fs20 \par }{\f4\fs20 One final point that may not be obvious is that EXEC files, like any other program, can be installed as utilities.  To do so, follow the same procedure outlined in the last chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Passing Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Passing Parameters\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 {\*\bkmkstart bk8}\par To get an idea of how parameters are passed, we will start off by changing the hello world program slightly, so that it prints all of the shell variables and values.  To do that, edit the HI file and add this line to the end of the file:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\v\f4\fs20 \par }{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab SET\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables}}}{\v\f4\fs20 \par }{\f4\fs20 \par As you will recall, the SET command with no parameters lists all shell variables and their values.  Now run the program with the command line shown below.  You type what is in bold: the shell response is in normal type.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Parameters\} shell variable}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{0\} shell variable}}}{\v\f4\fs20 ... shell variables;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{1\}, \{2\}, ... shell variables}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{}{\txe \} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} shell variable}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Command\} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi360\li720\keepn\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\li720\keepn\widctlpar\adjustright {\b\f6\fs18 HI GORP STUFF "FOO BAR"\par }\pard \fi720\widctlpar\adjustright {\f6\fs18 Hello, World!\par Set Parameters  GORP STUFF "FOO BAR" \par Set 0  HI\par Set 1  GORP\par Set 2  STUFF\par Set 3  FOO BAR\par Set #  3\par Set EXIT  TRUE\par Set Command  SET\par Set Status  0\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\v\f4\fs20 \par }{\f4\fs20 \par You may see a few other shell variables mixed in with these, but the shell variables shown will all be in the list somewhere.\par In this bewildering array of variables are three important groups.  We will break these down and discuss each separately.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{0\} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Parameters\} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\v\f4\fs20 \par }{\f4\fs20 First, since this section is on passed parameters, let's look at the variables used to pass those parameters.  Parameters are passed as a series of numbered variables, starting with \{0\}.  \{0\} is the path name used to execute the EXEC file.  The remainder of the command line, with I/O redirection removed, is contained in the variable \{Parameters\}.  Thus, to duplicate the original command line from inside the EXEC file, you could use\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \{0\} \{Parameters\}\par }\pard \qj\fi360\widctlpar\adjustright {\v\f4\fs20 ... shell variables;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{1\}, \{2\}, ... shell variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{}{\txe \} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 \par The shell also breaks the parameters up into individual words.  A word is any sequence of characters except blanks, with blanks used to separate the words.  If you need to include a blank in a word, as we did above with FOO BAR, enclose the word in quotes.  These words are passed in numbered parameters, starting with \{1\} and continuing on for each parameter.  In the example above, there were three such parameters, \{1\}, \{2\} and \{3\}.  Finally, the \{#\} variable is set to the number of parameters passed \endash  in this case, 3.  It is difficult to present meaningful examples of passed parameter use until we have looked at the statements used to control program flow, so we will put off an example until later.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Variables Defined by the Shell}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Variables Defined by the Shell\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} shell variable}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Command\} shell variable}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} shell variable}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 \par Now that we have talked about passed parameters, there are four variables left in the list whose meaning may not be clear.  Three of those are actually defined by the shell.  These are \{Status\}, \{Command\} and \{EXIT\}.  \{Status\} is used by the shell to return the status of the last command executed.  It is always returned as a number.  If it is zero, the last command executed with no error.  If it is not zero, there was an error, and the number is the error number.  Often, this is the error number reported by GS/OS or one of the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  tools.  If a command is returning some other kind of error, such as too many parameters, it will return a value of 65535 ($FFFF).  If the last command executed a program, \{Status\} is the value of the accumulator when the program returned to the shell.  That is why all of the sample programs in this manual set the accumulator to zero before returning.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \{Command\} is the name of the last command executed.  It is generally useful only in complex shell programs, where you might save its value in a shell variable for later examination.  We won't deal with it here.\par \{EXIT\} is a very important variable.  If it is non-null, and if any command returns a \{Status\} that is non-zero, the shell will abort the EXEC file.  This is a protective feature that prevents the shell from continuing to execute commands after an error has occurred.  If you will be handling your own errors by checking \{Status\}, or if you want the shell to continue execution even after an error, you need to turn this feature off.  This is done by including the command\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\v\f4\fs20 \par }{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab UNSET EXIT\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 in your EXEC file.  This must be done in the EXEC file itself, since the shell redefines the variable each time an EXEC file starts.  Some of our later examples will do this.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Variable Scope}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Variable Scope\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:scope}}}{\v\f4\fs20 \par }{\f4\fs20 \par There may have been some other variables in the list of shell variables printed by your HI program.  There is a lot more to these variables than meets the eye.  To start to see why, we will rerun the HI EXEC file just created, but after setting a variable first.  Type the following:\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Parameters\} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{0\} shell variable}}}{\v\f4\fs20 \par ... shell variables;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{1\}, \{2\}, ... shell variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{}{\txe \} shell variable}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Command\} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs18 \tab SET Canary Bird\par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab HI GORP STUFF "FOO BAR"\par }\pard \li720\widctlpar\adjustright {\f6\fs18 Hello, World!\par Set Parameters  GORP STUFF "FOO BAR" \par Set 0  HI\par Set 1  GORP\par Set 2  STUFF\par Set 3  FOO BAR\par Set #  3\par Set EXIT  TRUE\par Set Command  SET\par Set Status  0\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \{Canary\} didn't show up in the list of variables printed by the SET command.  Now type SET from the command line.  \{Canary\} is still there.\par The reason is that variables have scope.  A variable defined at the shell level is not automatically available in an EXEC file, and a variable defined in an EXEC file is not available in another EXEC file called by the first.  You can, however, make the variable available.  To do so, you use the EXPORT command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 EXPORT command}}}{\v\f6\fs18 \par }{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab EXPORT [variable1 variable2...]\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\f4\fs20 Like the SET command, the EXPORT command lists all of the exportable variables if you do not include a variable name.  If you include a variable, that variable is exported to any EXEC files called from the shell, or if EXPORT is used in an EXEC file, to any EXEC files called by that one.  To see how this works, type\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs18 \tab EXPORT Canary\par \tab HI STUFF GORP "FOO BAR"\par }\pard \li720\widctlpar\adjustright {\f6\fs18 Hello, World!\par Set Canary  Bird\par Set Parameters  STUFF GORP "FOO BAR" \par Set 0  HI\par Set 1  STUFF\par Set 2  GORP\par Set 3  FOO BAR\par Set #  3\par Set EXIT  TRUE\par Set Command  SET\par Set Status  0\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Now \{Canary\} shows up in the list of variables listed by the HI program.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 So where did the other shell variables come from?  In your LOGIN file, you can create shell variables using the SET command, like this:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPORT command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab set KeepName $\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab export KeepName\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The LOGIN file is a special EXEC file.  If an EXEC file called LOGIN is found in the system directory during the boot process, it is executed automatically.  EXPORT commands are treated specially in the LOGIN file.  When you use the EXPORT command from the LOGIN file, it is as if the variables were defined and exported from the shell level.  This is not normally the case, as we shall now see.  Go back into the HI program, and add these lines right before the SET command:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab SET CANARY ANIMAL\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab SET ORCA WHALE\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Now try executing the EXEC file, and then type SET from the shell.  \{CANARY\} and \{ORCA\} work just fine from the EXEC file, but \{ORCA\} is gone and \{Canary\} is unchanged when you get back to the shell.  This emphasizes that, with the exception of exported variables in the LOGIN file, variables defined in an EXEC file are not defined at the shell level, and changes to exported variables are changes to local copies only, and do not affect the original.\par If that were the end of the story, there would be no way except the LOGIN file to set variables at the shell level, other than typing them in by hand.  Of course, that is not the end of the story.  The EXECUTE command is a special command designed to overcome this problem.  EXECUTE is another way of executing an EXEC file.  If you now type\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXECUTE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:scope}}}{\v\f4\fs20 \par {\*\bkmkend bk8}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files\:parameter passing}{\rxe bk8}}}{\v\f4\fs20 \par }{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab }{\b\f6\fs18 EXECUTE HI STUFF GORP "FOO BAR"}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 and type SET from the command line, you will find that all variables and changes from HI have taken place at the shell level, including definition of passed parameters, and so on.  EXECUTE makes variables defined at one level available to the variables at the next level.  That is, if you run HI without the EXECUTE command, but call another EXEC file from within HI by issuing the EXECUTE command, then all of the variables known to HI will be available to the called EXEC file.  Since HI was run from the command line without the EXECUTE command, HI's variables will not be known to the shell. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Loops}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Loops\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The first control statement we will look at is the for loop.  The syntax for the for loop is\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\v\f4\fs20 \par }{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab FOR variable [IN list]\par \tab [statement]*\par \tab END\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The for loop is used to loop over a list of words.  Like words on the command line, words in the for loop are separated by spaces.  If a space is needed in a word, the word can be enclosed in quote marks.  The for loop will loop over each of the statements between the FOR statement and the END statement, looping once for each word in }{\i\f4\fs20 list}{\f4\fs20 .  The variable }{\i\f4\fs20 variable}{\f4\fs20  is set to each of the words in }{\i\f4\fs20 list}{\f4\fs20  successively as the loop executes.  For example, let's assume you want to copy all of the dot files associated with the object file MYOBJ to a backup disk named :BACKUP - i.e., you want to copy MYOBJ.ROOT, MYOBJ.A, MYOBJ.B, and so on.  Further, since we are in an EXEC file, you don't know how many dot files there are.  This can be done with the EXEC file:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \fi720\widctlpar\adjustright {\f6\fs18 set exit on\par set dest :backup:myobj\par copy myobj.root \{dest\}.root\par for dot in a b c d e f g h i j k l m n o p q r s t u v w x y z\par     copy -c myobj.\{dot\} \{dest\}.\{dot\}\par     end\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 error reporting\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 \par When the EXEC file executes, each of the files will be copied until an error occurs because the file to be copied does not exist, at which point the shell will exit the EXEC file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files\:parameter passing}}}{\v\f4\fs20 \par }{\f4\fs20 If you leave the IN keyword and word list off of the FOR statement, the shell will loop over all of the input parameters, starting with parameter number one.  We can use this feature to improve on this program by looping over several inputs, copying all of the dot files associated with each root file name listed.  Since we must avoid exiting when the first file that does not exist is encountered, we will turn off error exiting with the UNSET EXIT command:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \fi720\widctlpar\adjustright {\f6\fs18 unset exit\par set dest :backup\par for file\par     copy -c  \{file\}.root  \{dest\}:\{file\}.root\par     for dot in a b c d e f g h i j k l m n o p q r s t u v w x y z\par         copy  -c  \{file\}.\{dot\}  \{dest\}:\{file\}.\{dot\}\par     end\par end\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Assuming the EXEC file is called COPYDOT, then to copy all of the dot files associated with MYOBJ and HISOBJ, you could simply type\par \par }\pard \qj\widctlpar\adjustright {\b\f6\fs18 \tab COPYDOT MYOBJ HISOBJ\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The only bad thing about this shell program is that it will continue to try and copy dot files long after there are no more.  For example, if your dot files stopped at MYOBJ.K, it will still loop over the copy commands for MYOBJ.L to MYOBJ.Z.  This does no harm, but takes lots of extra time.  In the next section, we will look at how to solve this problem.\par Before leaving the section on looping, we need to mention the other loop statement, LOOP.  Like the FOR statement, the LOOP statement loops over all of the statements between it and the matching END.  Unlike FOR, it loops continuously until an error occurs or a CONTINUE statement is encountered.  CONTINUE will be covered in the next section.  Since FOR is far and away the most commonly used loop statement, we will not go into LOOP further here.  For details, see Chapter 12.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Conditional Execution}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Conditional Execution\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:EXEC files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IF command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ELSE IF clause of IF command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ELSE clause of IF command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The shell command language supports an if statement that works like the if statement in many high-level languages.  Like FOR and LOOP, it ends with the END statement.  You can also use ELSE and ELSE IF for more control.  The structure looks like this:\par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab IF condition\par \tab [statement]*\par \tab [ELSE IF condition\par \tab [statement]*]*\par \tab [ELSE\par \tab [statement]*]\par \tab END\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BREAK command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 where [statement]* is a list of statement(s) to be executed.  As an example, let's correct the problem in our last sample program.  To do this, we will also need the BREAK statement, which exits the closest nested FOR or LOOP statement.  The corrected program looks like this, with changes in boldface:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} shell variable}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} shell variable}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \fi720\widctlpar\adjustright {\f6\fs18 unset exit\par set dest :backup\par for file\par     copy  -c  \{file\}.root  \{dest\}:\{file\}.root\par     for dot in a b c d e f g h i j k l m n o p q r s t u v w x y z\par         copy  -c  \{file\}.\{dot\}  \{dest\}:\{file\}.\{dot\}\par }{\b\f6\fs18         if \{status\} != 0\par             break\par         end\par }{\f6\fs18     end\par end\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par The new statements, shown in bold, will exit the inner loop when a COPY command returns an error.\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:shell}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 In the example, the IF statement has a conditional expression.  Conditional expressions can be made up of words, equal operators (==), not equal operators (!=) and parentheses.  The equal and not equal operators are string comparisons.  Normally, they are case insensitive; see the reference manual if you would like to perform case-sensitive compares.  The only unusual thing is that all of the terms in an expression must be separated by spaces.  For example,\par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab IF ( \{P\} == \{Q\} ) == ( \{P\} != \{R\} )\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 is correct, but\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab IF (\{P\}==\{Q\})==(\{P\}!=\{R\})\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 would not work.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A moment ago, we looked at the BREAK command, which exited the closest nested loop.  A similar command, the CONTINUE command, skips the remainder of the statements until the end of the loop is reached.  For details, see Chapter 12.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CRUNCH utility}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\v\f4\fs20 \par }{\f4\fs20 With all of the basics out of the way, we will look at one fairly significant programming example.  There are occasions when partial assemblies don't work well because the order of subroutines is important.  The CRUNCH utility, which recombines the object modules, helps, but it breaks up the ASSEMBLE and LINK steps.  The following EXEC file does the job.  It assumes that the program to assemble is called MYPROG, and the object file MYOBJ.  Assuming the EXEC file is called BUILD, you would get a full assembly by typing BUILD.  Type BUILD followed by a list of the subroutines to assemble, and a partial assembly is performed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{}{\txe \} shell variable}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IF command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ELSE clause of IF command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\v\f4\fs20 \par }\pard \qj\fi360\li720\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\li720\keepn\widctlpar\adjustright {\f6\fs18 if \{#\} == 0\par   asml myprog\par else\par   for parm\par     set list \{list\} \{parm\}\par   end\par   assemble myprog names=(\{list\})\par   crunch myobj\par   link myobj keep=myobj\par }\pard \qj\li720\widctlpar\adjustright {\f6\fs18 end\par }\pard \qc\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Shell Reference Manual\par }}{\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 11: Introduction to the Shell\par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 11\par Introduction To The Shell\par }\pard \qj\widctlpar\adjustright {\f4 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 11 \endash  Introduction To The Shell\tcl1}}}{\v\f4 \par }{\f4 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This chapter gives an overview of the entire ORCA programming environment (or shell).  The chapters that follow give technical details about the ORCA system.   Topics to be covered in this chapter are:\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \li540\widctlpar\adjustright {\f4\fs20 \bullet \tab The shell.\par \par \bullet \tab The command processor.\par \par \bullet \tab The text editor.\par \par \bullet \tab The assembly process.\par \par \bullet \tab Assembly language.\par }\pard \widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 What is the Shell?}{\pard\plain \widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 What is the Shell?\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA system hierarchy}}}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The shell is the interface between you and the ORCA System.  Once ORCA is started, the shell program will remain active (resident) until you stop system execution.  Using shell commands, you can execute the editor, compile a program, change the current language for the system, copy or delete files, execute a utility, and so on.  The hierarchy of ORCA is shown in the diagram below.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex58\picscaley72\piccropl0\piccropr0\piccropt0\piccropb0\picw546\pich150\picwgoal10920\pichgoal3000\macpict\bliptag999748051\blipupi72{\*\blipuid 3b96f1d3cb0217b6c262aa01d9f90bb2}024500070007009d02291101a0008201000a00070007009d02290a0000000000000000340076000a009b007738340076009a009b010738340076012a009b01973834007601ba009b02273834000a00e2002f014f38a100960006050000000274a1009a0008fffd000000250000a000980300150d000c280092013c0a2841534d363538313629a00099a00097a100960006050000000274a1009a0008fffd000000210000a000982800840141094c616e677561676573a00099a00097a100960006050000000274a1009a0008fffd000000160000a000982b9d01095574696c6974696573a00099a00097a100960006050000000274a1009a0008fffd0000001f0000a0009828008c00b40b4c696e6b20456469746f72a00099a00097a100960006050000000274a1009a0008fffd000000230000a0009828009101d20b286173206e656564656429a00099a00097a000aa610048010f005c0123ffe8003022002e0118001ca000ada000aa61006c01e7008001fbffe8003022005201f0001ca000ada000aa61006c01570080016bffe800302200520160001ca000ada000aa61006c00c7008000dbffe8003022005200d0001ca000ada000aa61006c00370080004bffe800302200520040001ca000ad20005200400052011821005201f0a100960006050000000274a1009a0008fffd000000230000a0009828002100fa0a4f524341205368656c6ca00099a00097a100960006050000000274a1009a0008fffd0000001f0000a0009828008c00200b5465787420456469746f72a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 \par Figure 11.1  The ORCA System Hierarchy\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Command Processor}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Command Processor\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command table}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 The command processor is the part of the shell that lets you type commands, then takes the commands you type and caries out some action.  Features of the command processor include:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi-180\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab A command interpreter for the interactive keyboard input of shell commands using an integrated line editor.\par \par \bullet \tab Facilities for copying, renaming, deleting and moving files.\par }{\pard\plain \qj\fi-180\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }{\f4\fs20 \par \bullet \tab Executable command files (EXEC files) for automatic execution of shell commands.\par }{\pard\plain \qj\fi-180\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\v\f4\fs20 \par }{\f4\fs20 \par \bullet \tab Redirection of input and output.\par }{\pard\plain \qj\fi-180\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pipes}}}{\v\f4\fs20 \par }{\f4\fs20 \par \bullet \tab Pipelining of programs.\par }{\pard\plain \qj\fi-180\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 aliasing}}}{\v\f4\fs20 \par }{\f4\fs20 \par \bullet \tab The addition, deletion, and aliasing of shell commands.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 These topics are covered in Chapter 12, "The Command Processor."\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 The Text Editor}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Text Editor\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA provides a full-screen editor.  Full cursor movement is allowed.  There are over fifty commands used by the editor, and you can define up to twenty-six customized macros.  Chapter 13, "The Text Editor," gives in-depth information on using the editor.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Assembly Process}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Assembly Process\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 external labels}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The shell provides complete facilities to convert your programs from source files to executable files loaded in memory.  Advanced features include partial assembly and library modules.  The process of changing an assembly language source file into an executable program starts with the assembler, which creates an object file by assembling the source file.  The object file contains the program, along with the references to external labels, definitions of global labels defined in the source file, and enough information about the program to relocate it.  The linker takes this object file, along with any other object files or libraries you ask it to use, and creates an executable file.  All symbolic information has been resolved by this time, but relocation information is still included.  Finally, when you execute the program, the loader (a part of GS/OS) finds a spot in memory large enough to hold your program, and places it there.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex67\picscaley62\piccropl0\piccropr0\piccropt0\piccropb0\picw475\pich271\picwgoal9500\pichgoal5420\macpict\bliptag1215789193\blipupi72{\*\blipuid 487778895833b02127d2335b4a0c1095}041b00070007011601e21101a0008201000a00070007011601e20a000000000000000034000a000b005c00543834000a001d002f004238340013002f00260039383400370014005c004b383400250174004601e0383400ae000a01000053383400ae001c00d30041383400b7002e00ca0038383400db00130100004a38a100960006050000000274a1009a0008fffd000000110000a000980300150d000a2b214506736f75726365a00099a00097a100960006050000000274a1009a0008fffd000000080000a000982b09100466696c65a00099a00097a100960006050000000274a1009a0008fffd000000080000a000982800f900290466696c65a00099a0009722009c012a006c22009c0172006c2200ed012a48003400250077004a00e438a000aa61002d006e0041008200f6003022003700531c00a000ada000aa61002d00fe0041011200f6003022003700e31c00a000ada000aa61002d016a0041017e00f60030220037014f1c00a000ada100960006050000000274a1009a0008fffd000000190000a00098280039009709617373656d626c6572a00099a00097a100960006050000000274a1009a0008fffd000000120000a0009828003801990a202020206c696e6b6572a00099a00097200076002f007601aaa100960006050000000274a1009a0008fffd000000160000a000982800d1013c0a66696c65207265616479a00099a00097a100960006050000000274a1009a0008fffd0000000f0000a000982b070e06746f2072756ea00099a0009734000a0106005c014f3834000a0118002f013d38340013012a0026013438340037010f005c014638a100960006050000000274a1009a0008fffd000000100000a00098280045011c066f626a656374a00099a00097a100960006050000000274a1009a0008fffd000000080000a000982b080f0466696c65a00099a000976000fb012a0114015100b4005a6000f60148011b01730000005a2200bf012b4600a100960006050000000274a1009a0008fffd000000140000a000982b1a64066d656d6f7279a00099a000976000f6014e0113016f010e005a6000f3012a0114014f005a005a3400c8008700ed00f438a000aa6100d2007e00e6009200f600302200dc00522d00a000ada000aa6100cf012100e3013500f600302200d900f32f00a000ada100960006050000000274a1009a0008fffd000000100000a000982800df00ad066c6f61646572a00099a00097a000aa22007600300000a000ada000aa6100a4002600b8003affe80030220076002f0030a000ad22007601ab00cfa100960006050000000274a1009a0008fffd0000001b0000a000982800ea00150a65786563757461626c65a00099a0009760008f012a00ac015100b4005a60008d012b00ac0150005a005a60008f014e00b00177010e005a60008f014d00ae01740000005aa00083ff}}{\f4\fs20 \par \par Figure 11.2  The Assembly Process\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par For more details, consult the following chapters.\par \par }\pard \fi-1530\li1980\widctlpar\tx1890\adjustright {\f4\fs20 Chapter 12\tab "The Command Processor," describes the commands used.\par \par Chapter 14\tab "The Link Editor," provides detailed information on the linker.\par \par Chapter 15\tab "The Resource Compiler," gives details about an optional part of the development cycle, creating and using resources.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \fi-1530\li1980\widctlpar\tx1890\adjustright {\f4\fs20 Chapter 16\tab "GSBug Debugger," describes the machine language debugger GSBug, which you can use to help find problems in your programs.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \fi-1530\li1980\widctlpar\tx1890\adjustright {\f4\fs20 Chapter 17\tab "Running the Assembler," gives in depth information on assembling programs.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Assembly Language Programs}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Assembly Language Programs\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Assembly language is composed of assembly language instructions, assembler directives, and macros.  During the assembly process, assembly language instructions convert directly to machine code, assembler directives instruct the assembler to perform some action, and macros are converted to instructions and/or directives.  The following chapters can direct you to specific areas of the assembly language.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1620\li1980\widctlpar\tx1980\adjustright {\f4\fs20 Chapter 18\tab "Coding Instructions," covers the rules on using directives and macros and forming assembly language statements.\par \par Chapter 19\tab "Assembler Directives," describes the directives not specifically used to create macros.\par \par Chapter 20\tab "Macro and Conditional Assembly," covers macro construction.\par \par Chapters 21 -  25\tab There are many useful macros contained in chapters 21 through 25, the macro libraries.  These are macros used for math, system calls, GS/OS calls, and miscellaneous use.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 12: The Command Processor\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 12\par The Command Processor\par }\pard \qj\widctlpar\adjustright {\f4 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 12 \endash  The Command Processor\tcl1}}}{\v\f4 \par }{\f4 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This chapter will cover the operation of the ORCA Command Processor.  A command processor is an interface between you and the operating system of a computer.  You enter a command on the command line.  The command processor will interpret your command and take some specific action corresponding to your command.  The command processor for ORCA is very powerful.  The features available to you and discussed in this chapter are:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li540\widctlpar\adjustright {\f4\fs20 \bullet \tab The line editor.\par \par \bullet \tab Command types.\par \par \bullet \tab Standard prefixes and file names.\par \par \bullet \tab EXEC files.\par \par \bullet \tab Input and output redirection.\par \par \bullet \tab Pipelines.\par \par \bullet \tab Command table.\par \par \bullet \tab Command reference.\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }{\b\f4\fs28 The Line Editor}{\pard\plain \qj\widctlpar\tx720\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Line Editor\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When commands are issued to the shell, they are typed onto the command line using the line editor.  The line editor allows you to:\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\li540\widctlpar\adjustright {\f4\fs20 \bullet \tab Expand command names.\par \par \bullet \tab Make corrections.\par \par \bullet \tab Recall the twenty most recently issued commands.\par \par \bullet \tab Enter multiple commands.\par \par \bullet \tab Use wildcards in file names.\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tx720\adjustright {\b\f4 Command Name Expansion}{\pard\plain \qj\keep\keepn\widctlpar\tx720\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Command Name Expansion\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:command expansion}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 It is not necessary to enter the full command name on the command line.  Type in the first few letters of a command (don't use }{\outl\f4\fs18 RETURN}{\f4\fs20 ) and press the }{\outl\f4\fs18 RIGHT-ARROW}{\f4\fs20  key.  It will compare each of the commands in the command table with the letters typed so far.  The first command found that matches all of the characters typed is expanded in the command line.  For example, if you typed:\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\b\f6\fs18 CO}{\b\outl\f6\fs14 RIGHT-ARROW}{\b\f6\fs18 \par }\pard \qj\widctlpar\tx720\adjustright {\pard\plain \qj\widctlpar\tx720\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 COMMANDS command}}}{\v\f4\fs18 \par }{\f4\fs20 \par ORCA would match this with the command COMMANDS, and would complete the command like this:\par \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f6\fs18 COMMANDS\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\b\f4 Editing A Command On The Command Line}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Editing A Command On The Command Line\tcl4}}}{\b\f4 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The available line-editing commands available are listed in the table below:\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs20\ul command}{\f4\fs20 \tab }{\f4\fs20\ul command name and effect\par }{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:cursor-left command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:cursor-right command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:end-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:start-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:delete-character-left command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:delete-to-end-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:insert mode}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\:clear-line command}}}{\v\f4\fs20 \par }{\outl\f4\fs14 \par LEFT-ARROW}{\f4\fs18 \tab }{\b\f4\fs18 cursor left}{\f4\fs18  - The cursor will move to the left on the command line.\par \par }{\outl\f4\fs14 RIGHT-ARROW}{\f4\fs18 \tab }{\b\f4\fs18 cursor right}{\f4\fs18  - The cursor will move to the right.  If the cursor is at the end of a sequence of characters which begin the first command on the line, the shell will try to expand the command.\par \par }{\outl\f4\fs14 \u-3\'f0 LEFT-ARROW}{\f4\fs18 \tab }{\b\f4\fs18 word left}{\f4\fs18  - The cursor will move to the start of the previous word.  If the cursor is already on the first character of a word, it moves to the first character of the previous word.\par \par }{\outl\f4\fs14 \u-3\'f0 RIGHT-ARROW}{\f4\fs18 \tab }{\b\f4\fs18 word right}{\f4\fs18  - The cursor will move to the end of the current word.  If the cursor is already on the last character in a word, it moves to the last character in the next word.\par \par }{\outl\f4\fs14 UP-ARROW }{\f4\fs18 or}{\outl\f4\fs18  }{\outl\f4\fs14 DOWN-ARROW}{\f4\fs18 \tab }{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:command list}}}{\v\f4\fs20 .}{\b\f4\fs18 edit command}{\f4\fs18  - The up and down arrows are used to scroll through the 20 most recently executed commands.  These commands can be executed again, or edited and executed.\par \par }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 >}{\outl\f4\fs18  }{\f4\fs18 or}{\outl\f4\fs18  }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 .}{\outl\f4\fs18 \tab }{\b\f4\fs18 end of line}{\f4\fs18  -  The cursor will move to the right-hand end of the command line.\par \par }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 <}{\outl\f4\fs18  }{\f4\fs18 or}{\outl\f4\fs18  }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 ,}{\outl\f4\fs18 \tab }{\b\f4\fs18 start of line}{\f4\fs18  - The cursor will move to the left-hand end of the command line.\par \par }{\outl\f4\fs14 DELETE}{\f4\fs18 \tab }{\b\f4\fs18 delete character left}{\f4\fs18  - Deletes the character to the left of the cursor, moving the cursor left.\par \par }\pard \qj\fi-2700\li3150\widctlpar\tx1170\tx3150\adjustright {\outl\f4\fs14 \u-3\'f0}{\f4\fs18 F or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 F\tab }{\b\f4\fs18 delete character right}{\f4\fs18  - Deletes the character that the cursor is covering, moving characters from the right to fill in the vacated character position.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs16 \par }\pard \qj\fi-2700\li3150\widctlpar\tx1170\tx3150\adjustright {\outl\f4\fs14 \u-3\'f0}{\f4\fs18 Y or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 Y\tab }{\b\f4\fs18 delete to end of line}{\f4\fs18  - Deletes characters from the cursor to the the end of the line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs16 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\f4\fs14 \u-3\'f0}{\f4\fs18 E or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 E\tab }{\b\f4\fs18 toggle insert mode}{\f4\fs18  - Allows characters to be inserted into the command line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs16 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\f4\fs14 \u-3\'f0}{\f4\fs18 Z or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 Z\tab }{\b\f4\fs18 undo}{\f4\fs18  - Resets the command line to the starting string.  If you are typing in a new command, this erases all characters.  If you are editing an old command, this resets the command line to the original command string.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs16 \par }\pard \qj\fi-2700\li3150\widctlpar\tx990\tx1980\tx3150\adjustright {\outl\f4\fs14 ESC}{\f4\fs18 X or }{\outl\f4\fs14 CLEAR}{\f4\fs18  or }{\outl\f4\fs14 CTRL}{\f4\fs18 X\tab }{\b\f4\fs18 clear command line}{\f4\fs18  - Removes all characters from the command line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs16 \par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx1530\tx3150\adjustright {\outl\f4\fs14 RETURN}{\f4\fs18  or }{\outl\f4\fs14 ENTER}{\f4\fs18 \tab }{\b\f4\fs18 execute command}{\f4\fs18  - Issue a command to the shell, and append the command to the list of the most recent twenty commands.\par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright {\pard\plain \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 line editor\:execute command}}}{\v\f4\fs18 \par }\pard \qc\widctlpar\tx2880\adjustright {\f4\fs18 \par }{\f4\fs20 Table 12.1  Line-Editing Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 The shell normally starts in over strike mode; see the description of the \{Insert\} shell variable to change this default.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell prompt}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The shell's command line editor prints a # character as a prompt before it accepts input.  See the description of the \{Prompt\} shell variable for a way to change this default.\par \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\b\f4 Multiple Commands}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Multiple Commands\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:multiple commands}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Several commands can be entered on one line using a semicolon to separate the individual commands.  For example,\par }\pard \qj\widctlpar\tx720\adjustright {\pard\plain \qj\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME command}}}{\v\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\b\f6\fs18 \par RENAME WHITE BLACK;EDIT BLACK\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par would first change the name of the file WHITE to BLACK, and then invoke the editor to edit the file named BLACK.  If any error occurs, commands that have not been executed yet are cancelled.  In the example above, if there was an error renaming the file WHITE, the shell would not try to edit the file BLACK.\par \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\b\f4 Scrolling Through Commands}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Scrolling Through Commands\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:command list}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor\bxe }{\rxe bk0}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Using the }{\outl\f4\fs18 UP-ARROW}{\f4\fs20  and }{\outl\f4\fs18 DOWN-ARROW}{\f4\fs20  keys, it is possible to scroll through the twenty most recent commands.  You can then modify a previous command using the line-editing features described above and execute the edited command.\par }\pard \qj\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Command Types}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Command Types\tcl2}}}{\b\f4\fs28 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:command types\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Commands in ORCA can be subdivided into three major groups:  built-in commands, utilities, and language names.  All are entered from the keyboard the same way. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4 Built-in Commands}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Built-in Commands\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:built-in commands}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Built-in commands can be executed as soon as the command is typed and the }{\outl\f4\fs18 RETURN}{\f4\fs20  key is hit, since the code needed to execute the command is contained in the command processor itself.  Apple DOS and Apple ProDOS are examples of operating systems that have only built-in commands. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Utilities}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Utilities\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:utilities}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CRUNCH utility}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Utilities prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 restartable programs}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA supports commands that are not built into the command processor.  An example of this type of command is CRUNCH, which is a separate program under ORCA.  The programs to perform these commands are contained on a special directory known as the }{\i\f4\fs20 utilities}{\f4\fs20  directory.  The command processor must first load the program that will perform the required function, so the }{\i\f4\fs20 utilities}{\f4\fs20  directory must be on line when the command is entered.  The command will also take longer to execute, since the operating system must load the utility program.  Most utilities are restartable, which means that they are left in memory after they have been used the first time.  If the memory has not been reused for some other purpose, the next time the command is used, there is no delay while the file is loaded from disk.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The utilities themselves must all reside in the same subdirectory so that the command processor can locate them.  The name of the utility is the same as the name of the command used to execute it; the utility itself is an EXE, or executable, file.  Utilities are responsible for parsing all of the input line which appears after the command itself, except for input and output redirection.  The }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\f4\fs20 command line is passed to a utility the same way it is passed to any other program.  See Chapter 9 for step-by-step instructions on installing new utilities in ORCA.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Language Names}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Language Names\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:language names\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASM65816\:language}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 The last type of command is the language name.  All source files are stamped with a language, which can be seen when the file is cataloged under ORCA.  There is always a single system language active at any time when using ORCA.  New files will normally be stamped as ASM65816. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The system language will change for either of two reasons.  The first is if a file is edited, in which case the system language is changed to match the language of the edited file.  The second is if the name of a language is entered as a command. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HELP command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRODOS command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRODOS language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text files}}}{\v\f4\fs20 \par }{\f4\fs20 Table 12.2 shows a partial list of the languages and language numbers that are currently assigned.  CATALOG and HELP will automatically recognize a language if it is properly included in the command table.  ProDOS has a special status:  it is not truly a language, but indicates to the editor that the file should be saved as a standard GS/OS TXT file. Language numbers are used internally by the system, and are generally only important when adding languages to ORCA.  They are assigned by Apple Computer, Inc.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language numbers\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TEXT language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASM6502 language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/Pascal language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/C language}}}{\v\f4\fs20 \par }\pard \qj\fi2340\keepn\widctlpar\tx4320\adjustright {\f4\fs20\ul \par language}{\f4\fs20 \tab }{\f4\fs20\ul number\par }{\f4\fs20 \par PRODOS\tab 0\par TEXT\tab 1\par ASM6502\tab 2\par ASM65816}{\f4 \tab }{\f4\fs20 3\par ORCA/PASCAL\tab 5\par EXEC\tab 6\par ORCA/C\tab 7\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Table 12.2 A Partial list of the Languages and Language Numbers\par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 C}}}{\f4\fs20 You can see the list of languages currently installed in your system using the SHOW LANGUAGES command.  While all of the languages from the above table are listed, the compilers needed to compile C and Pascal programs are sold separately.\par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Program Names}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Program Names\tcl3}}}{\b\f4 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 S16 files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEM files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Anything which cannot be found in the command table is treated as a path name, and the system tries to find a file that matches the path name.  If an executable file is found, that file is loaded and executed.  If a source file with a language name of EXEC is encountered, it is treated as a file of commands, and each command is executed, in turn.  Note that S16 files can be executed directly from ORCA.  ProDOS 8 SYSTEM files can also be executed, provided ProDOS 8 (contained in the file P8) is installed in the system directory of your boot disk.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\b\f4\fs28 Standard Prefixes}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Standard Prefixes\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard prefixes\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefix numbers\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you specify a file on the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 , as when indicating which file to edit or utility to execute, you must specify the file name as discussed in the section \ldblquote File Names\rdblquote  in this chapter.  GS/OS provides 32 prefix numbers that can be used in the place of prefixes in path names.  This section describes the ORCA default prefix assignments for these GS/OS prefixes.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PREFIX command}}}{\v\f4\fs20 \par }{\f4\fs20 ORCA uses six of the GS/OS prefixes (8 and 13 through 17) to determine where to search for certain files.  When you start ORCA, these prefixes are set to the default values shown in the table below.  You can change any of the GS/OS prefixes with the shell PREFIX command, as described in this chapter.\par GS/OS also makes use of some of these numbered prefixes, as does the Standard File Manager from the Apple IIGS toolbox.  Prefixes 8 through 12 are used for special purposes by GS/OS or Standard File.  Prefix 8 is used by GS/OS and Standard File to indicate the default prefix; that's the same reason ORCA uses prefix 8.  Prefix 9 is set by any program launcher (including GS/OS, ORCA, and Apple's Finder) to the directory containing the executable file.  Prefixes 10, 11 and 12 are the path names for standard input, standard output, and error output, respectively.  Use of these prefixes is covered in more detail later in this chapter.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 program launchers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 boot prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Libraries prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 work prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Languages prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Utilities prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\v\f4\fs20 \par }\pard \qj\fi-533\li533\keep\widctlpar\tx533\tx1080\tx2880\tx5220\adjustright {\f4\fs20 \par }\pard \fi446\keepn\widctlpar\tx2160\tx4140\adjustright {\f4\fs20\ul Prefix Number}{\f4\fs20 \tab }{\f4\fs20\ul Use}{\f4\fs20 \tab }{\f4\fs20\ul Default\par }{\f4\fs20 \par @\tab User's folder\tab Boot prefix\par *\tab Boot prefix\tab Boot prefix\par 8\tab Current prefix\tab Boot prefix\par }\pard \fi450\keep\keepn\widctlpar\tx2160\tx4140\adjustright {\f4\fs20 9\tab Application\tab Prefix of ORCA.SYS16\par 10\tab Standard Input\tab .CONSOLE\par 11\tab Standard Output\tab .CONSOLE\par 12\tab Error Output\tab .CONSOLE\par 13\tab ORCA library\tab 9:LIBRARIES:\par 14\tab ORCA work\tab 9:\par 15\tab ORCA shell\tab 9:SHELL:\par 16\tab ORCA language\tab 9:LANGUAGES:\par 17\tab ORCA utility\tab 9:UTILITIES:\par }\pard \qj\ri360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\ri360\keep\widctlpar\adjustright {\f4\fs20 Table 12.3  Standard Prefixes\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The prefix numbers can be used in path names.  For example, to edit the system tab file, you could type either of the following commands:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTABS file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\v\f4\fs20 \par }\pard \qj\fi446\keepn\widctlpar\adjustright {\b\f6\fs18 \par EDIT :ORCA:SHELL:SYSTABS\par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 EDIT 15:SYSTABS\par }\pard \qj\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 boot prefix}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Each time you restart your Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 , GS/OS retains the volume name of the boot disk.  You can use an asterisk (*) in a path name to specify the boot prefix.  You cannot change the volume name assigned to the boot prefix except by rebooting the system.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 networks}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The @ prefix is useful when you are running ORCA from a network.  If you are using ORCA from a hard disk or from floppy disks, prefix @ is set just like prefix 9, defaulting to the prefix when you have installed ORCA.SYS16.  If you are using ORCA from a network, though, prefix @ is set to your network work folder.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 current prefix}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The current prefix (also called the default prefix) is the one that is assumed when you use a partial path name.  If you are using ORCA on a self-booting 3.5 inch disk, for example, prefix 8 and prefix 9 are both normally :ORCA:.  If you boot your Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  from a 3.5-inch :ORCA disk, but run the ORCA.SYS16 file in the ORCA: subdirectory on a hard disk named HARDISK, prefix 8 would still be :ORCA: but prefix 9 would be :HARDISK:ORCA:.\par The following paragraphs describe ORCA\rquote s use of the standard prefixes.\par ORCA looks in the current prefix (prefix 8) when you use a partial path name for a file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Libraries prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MAKELIB utility}}}{\v\f4\fs20 \par }{\f4\fs20 The linker searches the files in the ORCA library prefix (prefix 13) to resolve any references not found in the program being linked.  ORCA comes with a library file that supports the ORCA assembler macros; you can also create your own library files.  For more information on creating and using ORCA assembler library files, see the discussion of the MAKELIB command in this chapter.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:include statement}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pipes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PREFIX command}}}{\v\f4\fs20 \par }{\f4\fs20 The resource compiler and the DeRez utility both look for a folder called RInclude in the library prefix when they process partial path names in include and append statements.  The path searched is 13:RInclude.  See the description of the resource compiler for details.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 work prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pipes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PREFIX command}}}{\v\f4\fs20 \par }{\f4\fs20 The work prefix (prefix 14) is used by some ORCA programs for temporary files.  For example, when you pipeline two or more programs so that the output of one program becomes the input to the next, ORCA creates temporary files in the work prefix for the intermediate results (pipelines are described in the section \ldblquote Pipelines\rdblquote  in this chapter).  Commands that use the work prefix operate faster if you set the work prefix to a RAM disk, since I/O is faster to and from memory than to and from a disk.  If you have enough memory in your system to do so, use the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  control panel to set up a RAM disk (be sure to leave at least 1024K bytes of memory for the system), then use the PREFIX command to change the work prefix.  To change prefix 14 to a RAM disk named :RAM5, for example, use the following command:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 PREFIX 14 :RAM5\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You won't want to do this every time you boot.  You can put this command in the LOGIN file, which you will find in the shell prefix.  The LOGIN file contains commands that are executed every time you start the ORCA shell.\par ORCA looks in the ORCA shell prefix (prefix 15) for the following files:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDITOR file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTABS file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSEMAC file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSCMND file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\v\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx2880\adjustright {\f4\fs20 \par EDITOR\par SYSTABS\par SYSEMAC\par SYSCMND\par }\pard \qj\li450\widctlpar\tx2880\adjustright {\f4\fs20 LOGIN\par }\pard \qj\fi-274\li533\widctlpar\tx533\tx2880\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 As we mentioned a moment ago, the LOGIN file is an EXEC file that is executed automatically at load time, if it is present.  The LOGIN file allows automatic execution of commands that should be executed each time ORCA is booted.\par }\pard \qj\fi-360\li360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi-360\li360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Languages prefix}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA looks in the language prefix (prefix 16) for the ORCA linker, the ORCA assembler, and any other assemblers, compilers, and text formatters that you have installed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Utilities prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HELP command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CRUNCH utility}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INIT utility}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MAKELIB utility}}}{\v\f4\fs20 \par }{\f4\fs20 ORCA looks in the utility prefix (prefix 17) for all of the ORCA utility programs except for the editor, assembler, and compilers.  Prefix 17 includes the programs that execute utility commands, such as CRUNCH, INIT, and MAKELIB.  The utility prefix also contains the HELP: subdirectory, which contains the text files used by the HELP command.  Command types are described in the the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\b\f4\fs28 Prefixes 0 to 7}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Prefixes 0 to 7\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard prefixes}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefix 0-7}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:numbers}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS aware}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The original Apple IIGS operating system, ProDOS 16, had a total of eight numbered prefixes that worked a lot like the 32 numbered prefixes in GS/OS.  In fact, the original eight prefixes, numbered 0 to 7, are still in GS/OS, and are now used to support old programs that may not be able to handle the longer path names supported by GS/OS.\par When the programmers at Apple wrote GS/OS, one of the main limitations from ProDOS that they wanted to get rid of was the limit of 64 characters in a path name.  GS/OS has a theoretical limit of 32K characters for the length of a path name, and in practice supports path names up to 8K characters.  This presented a problem: existing programs would not be able to work with the longer path names, since they only expected 64 characters to be returned by calls that returned a path name.  Apple solved this problem by creating two classes of programs: GS/OS aware programs, and older programs.  When a program launcher, like Apple's Finder or the ORCA shell, launches a GS/OS aware program, prefixes 0 to 7 are cleared (if they had anything in them to start with).  The program launcher expects the program to use prefixes 8 and above.  When an old program is executed, prefixes are mapped as follows:\par \par }\pard \qj\fi440\keepn\widctlpar\tx1880\adjustright {\f4\fs20\ul GS/OS prefix}{\f4\fs20 \tab }{\f4\fs20\ul old ProDOS prefix}{\f4\fs20 \par 8\tab 0\par 9\tab 1\par 13\tab 2\par 14\tab 3\par 15\tab 4\par 16\tab 5\par 17\tab 6\par }\pard \qj\fi440\widctlpar\tx1880\adjustright {\f4\fs20 18\tab 7\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In each case, the new, GS/OS prefix is copied into the older ProDOS prefix.  If any of the GS/OS prefixes are too long to fit in the older, 64 character prefixes, the program launcher refuses to run the old application, returning an error instead.  Assuming the old application is executed successfully, when it returns, the old ProDOS prefixes are copied into their corresponding GS/OS prefixes, and the ProDOS prefixes are again cleared.\par The ORCA shell fully supports this new prefix numbering scheme.  When you are working in the ORCA shell, and use a prefix numbered 0 to 7, the ORCA shell automatically maps the prefix into the correct GS/OS prefix.  The shell checks for the GS/OS aware flag before running any application, and maps the prefixes if the application needs the older prefix numbers.\par \par }\pard \qj\keep\widctlpar\adjustright {\b\f4\fs28 File Names}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 File Names\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file names\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 File name designation in ORCA follows standard GS/OS conventions.  There are some special symbols used in conjunction with file names:\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright {\f4\fs20\ul symbol}{\f4\fs20 \tab }{\f4\fs20\ul meaning\par }{\pard\plain \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device names\bxe }}}{\pard\plain \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device numbers}}}{\pard\plain \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHOW command}}}{\v\f4\fs20 \par }{\f4\fs20 \par .Dx\tab This indicates a device name formed by concatenating a device number and the characters '.D'.  Use the command:\par \par }{\b\f6\fs18 \tab \tab SHOW UNITS\par }\pard \qj\fi-990\li1440\keep\keepn\widctlpar\tx1440\adjustright {\f4\fs20 \tab \par \tab to display current assignment of device numbers.  Since device numbers can change dynamically with some kinds of devices (e.g. CD ROM drives) it is a good idea to check device numbers before using them.\par }\pard \qj\fi-1000\li1440\keep\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1000\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:numbers}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright {\v\f4\fs20 .PRINTER;}{\pard\plain \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.PRINTER}}}{\v\f4\fs20 .CONSOLE;}{\pard\plain \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.CONSOLE}}}{\pard\plain \qj\fi-994\li1440\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\keepn\widctlpar\tx1440\adjustright {\f4\fs20 .name\tab This indicates a device name.  As with device numbers, the "show units" command can be used to display a current list of device names.  The two most common device names that you will use are .CONSOLE and .PRINTER, although each device connected to your computer has a device name.  .CONSOLE is the keyboard and display screen, while .PRINTER is a device added to GS/OS by the Byte Works to make it easy for text programs to use the printer.\par }\pard \qj\fi-1000\li1440\keep\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1000\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:numbers}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\keepn\widctlpar\tx1440\adjustright {\f4\fs20 x\tab Prefix number.  One of the 32 numbered prefixes supported by GS/OS.  See the previous section for a description of their use.  You may use a prefix number in place of a volume name.\par }\pard \qj\fi-1000\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1000\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 directory walking\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\keepn\widctlpar\tx1440\adjustright {\f4\fs20 ..\tab When this is placed in a path name, it indicates that the reference is back (or up) one directory level.\par }\pard \qj\fi-1000\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\keepn\widctlpar\tx1440\adjustright {\f4\fs20 :\tab This symbol, when inserted in a path name, refers to a directory.  You can also use /, so long as you do not mix : characters and / characters in the same path name.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA allows the use of a physical device number in full path names.  For example, if the SHOW UNITS command indicates that the drive with the disk named :ORCA is .D1, the following file names are equivalent.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx2160\adjustright {\f6\fs18 :ORCA:MONITOR\tab .D1:MONITOR\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Here are some examples of legal path names:\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\adjustright {\f6\fs18 :ORCA:SYSTEM:SYSTABS\par ..:SYSTEM\par 15:SYSCMND\par .D1\par .D3:LANGUAGES:ASM65816\par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18 14:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Wildcards}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Wildcards\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Wildcards may be used on any command that requires a file name.  Two forms of the wildcard are allowed, the = character and the ? character.  Both can substitute for any number of characters.  The difference is that use of the ? wildcard will result in prompting, while the = character will not. Wildcards cannot be used in the subdirectory portion of a path name.  For example,\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DELETE command}}}{\v\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 \par DELETE MY=\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would delete all files that begin with MY.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The command,\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 DELETE MY?\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would delete files that begin with MY after you responded yes to the prompt for each file.  The wildcards can be used anywhere in the file name.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are limitations on the use of wildcards.  Some commands don't accept wildcards in the second file name.  These commands are:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MOVE command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME command}}}{\v\f4\fs20 \par }\pard \qj\fi446\keepn\widctlpar\adjustright {\f4\fs20 \par COPY\par MOVE\par }\pard \qj\fi450\widctlpar\adjustright {\f4\fs20 RENAME\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are some commands that only work on one file.  As a result, they will only use the first matching file name.  These commands are:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPILE command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DUMPOBJ command}}}{\v\f4\fs20 \par }\pard \qj\fi446\keepn\widctlpar\adjustright {\f4\fs20 \par ASML\par CMPL\par CMPLG\par COMPILE\par DUMPOBJ\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Types of Text Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Types of Text Files\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text files\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types\:TXT}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types\:SRC}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GS/OS defines and uses ASCII format files with a TXT designator.  ORCA fully supports this file type with its system editor, but requires a language stamp for files that will be assembled or compiled, since the assembler or compiler is selected automatically by the system.  As a result, a new ASCII format file is supported by ORCA.  This file is physically identical to TXT files; only the file header in the directory has been changed.  The first byte of the AUX field in the file header is now used to hold the language number, and the file type is $B0, which is listed as SRC when cataloged from ORCA. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TEXT language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRODOS language}}}{\v\f4\fs20 TYPE command;\par }{\f4\fs20 One of the language names supported by ORCA SRC files is TEXT.  TEXT files are used as inputs to a text formatter.  In addition, PRODOS can be used as if it were an ORCA language name, resulting in a GS/OS TXT file.  TXT files are also sent to the formatter if an ASSEMBLE, COMPILE, or TYPE command is issued. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 EXEC Files}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 EXEC Files\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 EXEC files\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 shell commands}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 EXEC language}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 path names}}}{\b\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can execute one or more ORCA shell commands from a command file.  To create a command file, set the system language to EXEC and open a new file with the editor.  Any of the commands described in this chapter can be included in an EXEC file.  The commands are executed in sequence, as if you had typed them from the keyboard.  To execute an EXEC file, type the full path name or partial path name (including the file name) of the EXEC file and press RETURN.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long command lines}}}{\v\f4\fs20 \par }{\f4\fs20 There is one major advantage to using an EXEC file over typing in a command from the command line.  The command line editor used by the shell restricts your input to 255 characters.  With EXEC files, you can enter individual command lines that are up to 64K characters in length.  Since it probably isn't practical or useful to type individual command lines that are quite a bit wider than what you can see on your computer screen, you can also use continuation lines.  In any EXEC file, if the shell finds a line that ends with a backslash (\\) character (possibly followed by spaces or tabs), the line is concatenated with the line that follows, and the two lines are treated as a single line.  The command is treated exactly as if the backslash character and the end of line character were replaced by spaces.  For example, the command\par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\v\f4\fs20 \par }{\f6\fs18 link file1 file2 file3 keep=myfile\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 could be typed into an EXEC file as\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 link             \\\par    file1         \\\par    file2         \\\par    file3         \\\par    keep=myfile\par }\pard \qj\widctlpar\adjustright {\f4\fs20 The two versions of the command would do exactly the same thing.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you execute an interactive utility, such as the ORCA Editor, from an EXEC file, the utility operates normally, accepting input from the keyboard.  If the utility name was not the last command in the EXEC file, then you are returned to the EXEC file when you quit the utility.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:EXEC files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files\:parameter passing}}}{\v\f4\fs20 \par }{\f4\fs20 EXEC files are programmable; that is, ORCA includes several commands designed to be used within EXEC files that permit conditional execution and branching.  You can also pass parameters into EXEC files by including them on the command line.  These features are described in the following sections.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\v\f4\fs20 \par }{\f4\fs20 EXEC files can call other EXEC files.  The level to which EXEC files can be nested and the number of variables that can be defined at each level depend on the available memory.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:multiple commands}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 You can put more than one command on a single line of an EXEC file; to do so, separate the commands with semicolons (;).\par }\pard \qj\keep\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Passing Parameters Into EXEC Files}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Passing Parameters Into EXEC Files\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files\:parameter passing\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you execute an EXEC file, you can include the values of as many parameters as you wish by listing them after the path name of the EXEC file on the command line.  Separate the parameters with spaces or tab characters; to specify a parameter value that has embedded spaces or tabs, enclose the value in quotes.  Quote marks embedded in a parameter string must be doubled.\par For example, suppose you want to execute an EXEC file named FARM, and you want to pass the following parameters to the file:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-86\li533\keepn\widctlpar\tx2880\adjustright {\f4\fs20 cow\par chicken\par one egg\par }\pard \qj\fi-83\li533\widctlpar\tx2880\adjustright {\f4\fs20 tom's cat\par }\pard \qj\fi-274\li533\widctlpar\tx533\tx2880\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 In this case, you would enter the following command on the command line:\par \par }\pard \widctlpar\tx360\adjustright {\b\f6\fs18 \tab FARM cow chicken "one egg" "tom's cat"\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f4\fs20 Parameters are assigned to variables inside the EXEC file as described in the next section.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Programming EXEC Files}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Programming EXEC Files\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In addition to being able to execute any of the shell commands discussed in the command descriptions section of this chapter, EXEC files can use several special commands that permit conditional execution and branching.  This section discusses the use of variables in EXEC files, the operators used to form boolean (logical) expressions, and the EXEC command language.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs20 Variables}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Variables\tcl4}}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:shell}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Any alphanumeric string up to 255 characters long can be used as a variable name in an EXEC file.  (If you use more than 255 characters, only the first 255 are significant.)  All variable values and parameters are ASCII strings of 65535 or fewer characters.  Variable names are not case sensitive, but the values assigned to the variables }{\i\f4\fs20 are }{\f4\fs20 case sensitive.  To define values for variables, you can pass them into the EXEC file as parameters, or include them in a FOR command or a SET command as described in the section \ldblquote EXEC File Command Descriptions.\rdblquote   To assign a null value to a variable (a string of zero length), use the UNSET command.  Variable names are always enclosed in curly brackets (\{\}), except when being defined in the SET, UNSET and FOR commands.\par Variables can be defined within an EXEC file, or on the shell command line before an EXEC file is executed, by using the SET command.  Variables included in an EXPORT command on the shell command line can be used within any EXEC file called from the command line.  Variables included in an EXPORT command within an EXEC file are valid in any EXEC files called by that file; they can be redefined locally, however.  Variables redefined within an EXEC file revert to their original values when that EXEC file is terminated, except if the EXEC file was run using the EXECUTE command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXECUTE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:scope}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPORT command}}}{\v\f4\fs20 \par }{\f4\fs20 The following variable names are reserved.  Several of these variables may have number values; keep in mind that these values are literal ASCII strings.  A null value (a string of zero length) is considered undefined.  Use the UNSET command to set a variable to a null value.  Several of the predefined variables are used for special purposes within the shell.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{0\} shell variable\bxe }}}{\v\f4\fs20 ... shell variables;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{1\}, \{2\}, ... shell variables\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{CaseSensitive\} shell variable\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Command\} shell variable\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Echo\} shell variable\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\f4\fs20 \par \{0\}\tab The name of the EXEC file being executed.\par \par \{1\}, \{2\}, ...\tab Parameters from the command line.  Parameters are numbered sequentially in the sequence in which they are entered.\par \par \{#\}\tab The number of parameters passed.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{AuxType\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 auxiliary file type}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{AuxType\}\tab Provides automatic auxiliary file type specification.  The variable contains a single value, specified as a hex or decimal integer.  The AuxType string sets the auxiliary file type for the executable file produced by the linker.  Any value from 0 to 65535 ($FFFF) can be used.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{CaseSensitive\}\tab If you set this variable to any non-null value, then string comparisons are case sensitive.  The default value is null.\par \par \{Command\}\tab The name of the last command executed, exactly as entered, excluding any command parameters.  For example, if the command was :ORCA:MYPROG, then \{Command\} equals :ORCA:MYPROG; if the command was EXECUTE :ORCA:MYEXEC, then \{Command\} equals EXECUTE.  The \{Parameters\} variable is set to the value of the entire parameters list.\par \par \{Echo\}\tab If you set this variable to a non-null value, then commands within the EXEC file are printed to the screen before being executed.  The default value for Echo is null (undefined).\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{Exit\}\tab If you set this variable to any non-null value, and if any command or nested EXEC file returns a non-zero error status, then execution of the EXEC file is terminated.  The default value for \{Exit\} is non-null (it is the ASCII string true).  Use the UNSET command to set \{Exit\} to a null value (that is, to delete its definition).\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Insert\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{Insert\}\tab When you are using the shell's line editor, you start off in over strike mode.  If the \{Insert\} shell variable is set to any value, the shell's line editor defaults to over strike mode.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{KeepName\}\tab Provides an automatic output file name for compilers and assemblers, avoiding the KEEP parameter on the command line and the KEEP directive in the language.  If there is no keep name specified on the command line, and there is a non-null KeepName variable, the shell will build a keep name using this variable.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright {\f4\fs20 \tab \tab This keep name will be applied to all object modules produced by an assembler or compiler.  On the ASML, ASMLG and RUN commands, if no \{LinkName\} variable is used, the output name from the assemble or compile will also determine the name for the executable file.  See \{LinkName\} for a way to override this.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:metacharacters}}}{\v\f4\fs20 \par }{\f4\fs20 \tab \tab There are two special characters used in this variable that affect the automatic naming: % and $.  Using the % will cause the shell to substitute the source file name.  Using $ expands to the file name with the last extension removed (the last period (.) and trailing characters).\par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepType\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{KeepType\}\tab Provides automatic file type specification.  The variable contains a single value, specified as a hex or decimal integer, or a three-letter GS/OS file type.  The KeepType string sets the file type for the executable file produced by the linker.  Legal file types are $B3 to $BF.  Legal file descriptors are: EXE, S16, RTL, STR, NDA, LDA, TOL, etc.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Libraries\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{Libraries\}\tab When the linker finishes linking all of the files you specify explicitly, it checks to see if there are any unresolved references in your program.  If so, it searches various libraries to try and resolve the references.  If this variable is not set, the linker will search all of the files in prefix 13 that have a file type of LIB.  If this variable is set, the linker searches all of the files listed by this shell variable, and does not search the standard libraries folder.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{LinkName\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{LinkName\}\tab Provides an automatic output name for the executable file created by the link editor.  The % and $ metacharacters described for \{KeepName\} work with this variable, too.  When an ASML, ASMLG or RUN command is used, this variable determines the name of the executable file, while \{KeepName\} specifies the object file name.  This variable is also used to set the default file name for the LINK command.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Parameters\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXECUTE command}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{Parameters\}\tab The parameters of the last command executed, exactly as entered, excluding the command name.  For example, if the command was  EXECUTE :ORCA:MYEXEC, then \{Parameters\} equals :ORCA:MYEXEC.  The \{Command\} variable is set to the value of the command name.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell prompt}}}{\v\f4\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Prompt\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line\:prompt}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{Prompt\}\tab When the shell's command line editor is ready for a command line, it prints a # character as a prompt.  If the \{Prompt\} shell variable is set to any value except the # character, the shell will print the value of the \{Prompt\} shell variable instead of the # character.  If the \{Prompt\} shell variable is set to #, the shell does not print a prompt at all.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Separator\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{Separator\}\tab Under ProDOS, full path names started with the / character, and directories within path names were separated from each other, from volume names, and from file names by the / character.  In GS/OS, both the / character and the : character can be used as a separator when you enter a path name, but the : character is universally used when writing a path name.  If you set the Separator shell variable to a single character, that character will be used as a separator whenever the shell writes a path name.  Note that, while many utilities make shell calls to print path names, not all do, and if the utility does not use the shell or check the \{Separator\} shell variable, the path names will not be consistent.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 \par \{Status\}\tab The error status returned by the last command or EXEC file executed.  This variable is the ASCII character 0 ($30) if the command completed successfully.  For most commands, if an error occurred, the error value returned by the command is the ASCII string 65535 (representing the error code $FFFF).\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs20 Logical Operators}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Logical Operators\tcl4}}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:shell\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:shell}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA includes two operators that you can use to form boolean (logical) expressions.  String comparisons are case sensitive if \{CaseSensitive\} is not null (the default is for string comparisons to }{\i\f4\fs20 not}{\f4\fs20  be case sensitive).  If an expression result is true, then the expression returns the character 1.  If an expression result is not true, then the expression returns the character 0.  There must be one or more spaces before and after the comparison operator.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\i\f4\fs20 str1}{\f4\fs20  == }{\i\f4\fs20 str2}{\f4\fs20 \tab String comparison:  true if string }{\i\f4\fs20 str1}{\f4\fs20  and string }{\i\f4\fs20 str2}{\f4\fs20  are identical; false if not.\par }{\i\f4\fs20 str1}{\f4\fs20  != }{\i\f4\fs20 str2}{\f4\fs20 \tab String comparison:  false if string }{\i\f4\fs20 str1}{\f4\fs20  and string }{\i\f4\fs20 str2}{\f4\fs20  are identical; true if not.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Operations can be grouped with parentheses.  For example, the following expression is true if one of the expressions in parentheses is false and one is true; the expression is false if both expressions in parentheses are true or if both are false:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \widctlpar\tx360\adjustright {\b\f6\fs18 \tab IF ( COWS == KINE ) != ( CATS == DOGS )\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Every symbol or string in a logical expression must be separated from every other by at least one space.  In the preceding expression, for example, there is a space between the string comparison operator != and the left parentheses, and another space between the left parentheses and the string CATS.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Entering Comments}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Entering Comments\tcl4}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 comments\:EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMMENT command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printing files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To enter a comment into an EXEC file, start the line with an asterisk (*).  The asterisk is actually a command that does nothing, so you must follow the asterisk by at least one space.  For example, the following EXEC file sends a catalog listing to the printer:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \fi450\keep\widctlpar\adjustright {\b\f6\fs18 CATALOG >.PRINTER\par * Send a catalog listing to the printer\par }\pard \qj\keep\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Use a semicolon followed by an asterisk to put a comment on the same line as a command:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keep\widctlpar\adjustright {\b\f6\fs18 CATALOG >.PRINTER  ;* Send a catalog listing to the printer\par }\pard \qj\keep\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Redirecting Input and Output}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Redirecting Input and Output\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard input}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 appending to the end of a file\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Standard input is usually through the keyboard, although it can also be from a text file or the output of a program; standard output is usually to the screen, though it can be redirected to a printer or another program or disk file.  You can redirect standard input and output for any command by using the following conventions on the command line:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \fi-2160\li2160\keepn\widctlpar\tx360\tx2160\adjustright {\f4\fs20 \tab <}{\i\f4\fs20 inputdevice}{\f4\fs20 \tab Redirect input to be from }{\i\f4\fs20 inputdevice.}{\f4\fs20 \par \tab >}{\i\f4\fs20 outputdevice}{\f4\fs20 \tab Redirect output to go to }{\i\f4\fs20 outputdevice.}{\f4\fs20 \par }\pard \fi-2160\li2160\widctlpar\tx360\tx2160\adjustright {\f4\fs20 \tab >>}{\i\f4\fs20 outputdevice}{\f4\fs20 \tab Append output to the current contents of }{\i\f4\fs20 outputdevice.}{\f4\fs20 \par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\v\f4\fs20 .CONSOLE;}{\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.CONSOLE}}}{\v\f4\fs20 .PRINTER;}{\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.PRINTER}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The input device can be the keyboard or any text or source file.  To redirect input from the keyboard, use the device name .CONSOLE.\par The output device can be the screen, the printer, or any file.  If the file named does not exist, ORCA opens a file with that name.  To redirect output to the screen, use the device name .CONSOLE; to redirect output to the printer, use .PRINTER.  .PRINTER is a RAM based device driver; see the section describing .PRINTER, later in this chapter, for details on when .PRINTER can be used, how it is installed, and how you can configure it.\par }\pard \qj\fi360\li360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\li360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHOW command}}}{\pard\plain \qj\fi360\li360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language names}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Both input and output redirection can be used on the same command line.  The input and output redirection instructions can appear in any position on the command line.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\f4\fs20 For example, to redirect output from an assembly of the program MYPROG to the printer, you could use either of the following commands:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\:redirecting output}}}{\v\f4\fs20 \par }\pard \qj\fi446\keepn\widctlpar\tx360\tx2070\adjustright {\b\f6\fs18 \par ASSEMBLE MYPROG >.PRINTER\par }\pard \qj\fi450\widctlpar\tx360\tx2070\adjustright {\b\f6\fs18 ASSEMBLE >.PRINTER MYPROG\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 appending to the end of a file}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To redirect output from the CATALOG command to be appended to the data already in a disk file named CATSN.DOGS, use the following command:\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx360\tx2070\adjustright {\b\f6\fs18 CATALOG >>CATSN.DOGS\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AINPUT directive}}}{\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files\:redirection}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Instead of using the keyboard for response to the AINPUT directive in a source file that is being assembled, the following example redirects a file (called ANSWERS) as input to the assembly process.  Either one of the following commands would accomplish this.\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\f4\fs20 \par }\pard \qj\fi446\keepn\widctlpar\tx360\tx2070\adjustright {\b\f6\fs18 ASSEMBLE <ANSWERS MYPROG\par }\pard \qj\fi450\widctlpar\tx360\tx2070\adjustright {\b\f6\fs18 ASSEMBLE MYPROG <ANSWERS\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Input and output redirection can be used in EXEC files.  When output is redirected when the EXEC file is executed, input and output can still be redirected from individual commands in the EXEC file.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\f4\fs20 The output of programs that do not use standard output, and the input of programs that do not use standard input, cannot be redirected.\par }{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Error messages also normally go to the screen.  They can be redirected independently of standard output.  To redirect error output, use the following conventions on the command line:\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\f4\fs20 \par }\pard \qj\fi-2160\li2160\keepn\widctlpar\tx360\tx2160\adjustright {\f4\fs20 \tab >&}{\i\f4\fs20 outputdevice}{\f4\fs20 \tab Redirect error output to go to }{\i\f4\fs20 outputdevice.}{\f4\fs20 \par }\pard \qj\fi-2160\li2160\widctlpar\tx360\tx2160\adjustright {\f4\fs20 \tab >>&}{\i\f4\fs20 outputdevice}{\f4\fs20 \tab Append error output to the current contents of }{\i\f4\fs20 outputdevice.\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Error output devices follow the same conventions as those described above for standard output.  Error output redirection can be used in EXEC files.\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 The .PRINTER Driver}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The .PRINTER Driver\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\v\f4\fs20 .printer;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.printer}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operating system on the Apple IIGS gives you a number of ways to write to a printer, but none of them can be used with input and output redirection, nor can they be used with standard file write commands, which is the way you would write text to a printer on many other computers.  On the other hand, GS/OS does allow the installation of custom drivers, and these custom drivers can, in fact, be used with I/O redirection, and you can use GS/OS file output commands to write to a custom driver.  Our solution to the problem of providing easy to use text output to a printer is to add a custom driver called .PRINTER.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\:redirecting output}}}{\v\f4\fs20 \par }{\f4\fs20 As described in the last section, you can redirect either standard out or error out to your printer by using the name .PRINTER as the destination file, like this:\par \par }{\b\f6\fs18 TYPE MyFile >.Printer\par }{\f4\fs20 \par You can also open a file, using .PRINTER as the file name, using standard GS/OS calls.  When you write to this file, the characters appear on your printer, rather than being written to disk.  In short, as far as your programs are concerned, .PRINTER is just a write-only file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\:configuration}}}{\v\f4\fs20 \par }{\f4\fs20 The only thing you have to watch out for is that, since .PRINTER is a RAM based driver, it must be installed on your boot disk before you can use the driver.  If you are running from the system disk we sent with ORCA/M, the .PRINTER driver is already installed, and you can use it right away.  If you are booting from some other disk, you will need to install the .PRINTER driver on that disk.  There is an installer script that will move the correct file for you, or you can simply copy the files ORCA.PRINTER and PRINTER.CONFIG from the SYSTEM:DRIVERS folder of the ORCA/M system disk to the SYSTEM:DRIVERS folder of your system disk.\par All printers are not created equal, so any printer driver must come with some method to configure the driver.  By default, our printer driver is designed to handle a serial printer installed in slot 1.  It prints a maximum of 80 characters on one line, after which it will force a new line, and put any remaining characters on the new line.  After printing 60 lines, a form feed is issued to advance the paper to the start of a new page.  When a new line is needed, the driver prints a single carriage return character ($0D).  If any of these options are unsuitable for your printer, you can change them using either a CDev or a CDA.  Both of these programs produce a configuration file called PInit.Options, which will be placed in your System folder, so you need to be sure your boot disk is in a drive and not write protected when you configure your printer.  This file is read by an init called TextPrinterInit at boot time to configure the text printer driver, which is itself a GS/OS driver called TextPrinter.\par Figure 12.4 shows the screens you will see when you use the CDev from Apple's Control panel or when you select the CDA from the CDA menu.  The options that you can select are the same for both configuration programs; these are described in Table 12.5.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw326\pich380\picwgoal6520\pichgoal7600\macpict\bliptag1776081729\blipupi72{\*\blipuid 69dcdb41b16dd6ebf27523eee4ea197c}275200000000017c01461101a00082a0008e01000a0000000002d0024098002a00000000004b014800000000004b014600000000004b0146000102d70007007fdaff01f80007007fdaff01f800070060da00011800070060da00011800070060da00011800070060da00011800190367e7fff3f8ff01f81efc00063807c000000380f4ff019800190367e7fff3f8ff01f81efc00063807c000000380f4ff0198001a0360060030f7000c33000018000018066000000180f4000118001a0360060030f7000c33000018000018066000000180f4000118001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001a0360060030f7000c3033331838661807c666666180f4000118001a0360060030f7000c3033331838661807c666666180f4000118001b0367e60033f8ff0df83033331830661806066667e180f4ff0198001b0367e60033f8ff0df83033331830661806066667e180f4ff019800190360060030f700fe33091b306618060666660180f400011800190360060030f700fe33091b306618060666660180f4000118001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff0198001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff019800070060da00011800070060da00011800070060da00011800070060da0001180007007fdaff01f80007007fdaff01f8000e0070f6000360060060e9000118000e0070f6000360060060e900011800150070f6000360198060fd00030ffffffef100011800150070f6000360198060fd00030ffffffef100011800180370000007fbff018000fd60fd00030c000006f100011800180370000007fbff018000fd60fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f200011800160b70000007bbe0667e66600000fe660060e900011800160b70000007bbe0667e66600000fe660060e900011800160f70000006eee6667e66600000799999e0e900011800160f70000006eee6667e66600000799999e0e900011800160570000007bbe0fe0002600000fe660060e900011800160570000007bbe0fe0002600000fe660060e900011800140370000007fcff06e00000799999e0e900011800140370000007fcff06e00000799999e0e9000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc00011800180070f60004799999e060f50005030602600006fc00011800180070f60004799999e060f50005030602600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc0001180098002a004b000000960148004b000000960146004b0000009601460001280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc00011800150070fe00030199998cfd0003799999e0e900011800150070fe00030199998cfd0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001d0570000006aae0fe0006600000799999e0f1000030fd000460000018001d0570000006aae0fe0006600000799999e0f1000030fd00046000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd000930007800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd0009300078000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e00006000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd00046000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd000460000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e0000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e000001800160f70000006eee79879e6600000799999e0e900011800160f70000006eee79879e6600000799999e0e900011800160b70000007bbe00001e6600000fe660060e900011800160b70000007bbe00001e6600000fe660060e900011800160f70000006eee6667806600000799999e0e900011800160f70000006eee6667806600000799999e0e9000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c00000180098002a0096000000e101480096000000e101460096000000e1014600011c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c000001800140070fe00fef00170f0fe00fe660060e900011800140070fe00fef00170f0fe00fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e900011800150070f600fe660060fc000001f6ff00f8fb00011800150070f600fe660060fc000001f6ff00f8fb00011800170070f60003799999e0fc00010180f7000018fb00011800170070f60003799999e0fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc00011800160b700000180606040000800000fe660060e900011800160b700000180606040000800000fe660060e900011800160f70000007fe06040000800000799999e0e900011800160f70000007fe06040000800000799999e0e9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa00011800140370000001fd990098fe00fe660060e900011800140370000001fd990098fe00fe660060e900011800160070fe0004f0f0f998f8fe0003799999e0e900011800160070fe0004f0f0f998f8fe0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e900011800130070f60003799999e0f600003ff6ff02fc1800130070f60003799999e0f600003ff6ff02fc180098002a00e10000012c014800e10000012c014600e10000012c01460001140070f600037fffffe0f600013080f700020c1800140070f600037fffffe0f600013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc1800160070fe00041f98186780fe0003780001e0e900011800160070fe00041f98186780fe0003780001e0e900011800150070fe00001ffeff0080fe0002780001e8ff01f800150070fe00001ffeff0080fe0002780001e8ff01f800160070fe00041f80060780fe0003780001e2e922013800160070fe00041f80060780fe0003780001e2e922013800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00041f81860780fe0003780001e2e922013800160070fe00041f81860780fe0003780001e2e9220138001604700000079ffeff009efe0003780001e8e9880198001604700000079ffeff009efe0003780001e8e98801980016047000000780fe00071e600000780001e2e92201380016047000000780fe00071e600000780001e2e922013800150370000007fdff07fe600000780001e8e988019800150370000007fdff07fe600000780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e98801980016017607feff02e0ffe7feff04fe780001e2e92201380016017607feff02e0ffe7feff04fe780001e2e922013800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779f0e660fe664c707078726780001e2e922013800160f779f0e660fe664c707078726780001e2e922013800160f779e670f3fe0e3e7339f331e780001e8e988019800160f779e670f3fe0e3e7339f331e780001e8e9880198001604779e079f3ffee707339f033e780001e2e9220138001604779e079f3ffee707339f033e780001e2e9220138001604779e7f0f27fee70733933f3e780001e8e9880198001604779e7f0f27fee70733933f3e780001e8e988019800160f779f0e678fe7e7c333c7873e780001e2e922013800160f779f0e678fe7e7c333c7873e780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e922013800140070fd000201ff80fd0003780001e8e988019800140070fd000201ff80fd0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800160070fe000407800001e0fe0003780001e8e98801980098002a012c000001770148012c000001770146012c0000017701460001160070fe000407800001e0fe0003780001e8e988019800160070fe00041800180018fe0003780001e2e922013800160070fe00041800180018fe0003780001e2e922013800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e2e922013800160070fe00046000180006fe0003780001e2e922013800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e2e922013800160f700000018000180001800000780001e2e922013800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e2e922013800160f700000060000180000600000780001e2e922013800160f700000060000060000600000780001e8e988019800160f700000060000060000600000780001e8e988019800160f700000018000018001800000780001e2e922013800160f700000018000018001800000780001e2e922013800160f700000018000006001800000780001e8e988019800160f700000018000006001800000780001e8e988019800160070fe00046000001806fe0003780001e2e922013800160070fe00046000001806fe0003780001e2e922013800160070fe00046000000606fe0003780001e8e988019800160070fe00046000000606fe0003780001e8e988019800160070fe000018fe000018fe0003780001e2e922013800160070fe000018fe000018fe0003780001e2e922013800160070fe000407800001e0fe0003780001e8e988019800160070fe000407800001e0fe0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800140070fd000201ff80fd00037fffffe8e988019800140070fd000201ff80fd00037fffffe8e9880198000e0070f600037fffffe2e9220138000e0070f600037fffffe2e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000e0070f60003607fe062e9220138000e0070f60003607fe062e922013800120070fe00010fc6fb00fe600068e988019800120070fe00010fc6fb00fe600068e988019800110070fe000003fa00fe600062e922013800110070fe000003fa00fe600062e922013800140070fe0003030e7f0ffd00fe600068e988019800140070fe0003030e7f0ffd00fe600068e988019800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9f80fe000361801868e988019800160070fe000403066d9f80fe000361801868e988019800140070fe000303066d98fd00fe600062e922013800140070fe000303066d98fd00fe600062e922013800150070fe0003030f6d8ffd000360198068e988019800150070fe0003030f6d8ffd000360198068e9880198000e0070f6000360060062e9220138000e0070f6000360060062e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000b007ff3ff00e2e9220138000b007ff3ff00e2e9220138000f0070fd0000f0f80000e8e9880198000f0070fd0000f0f80000e8e988019800150a70001801e0f0000019800efd0000e2e922013800150a70001801e0f0000019800efd0000e2e922013800150a7000780260f00000198006fd0000e8e988019800150a7000780260f00000198006fd0000e8e988019800160b70c6180660f00000198f061ffe0000e2e922013800160b70c6180660f00000198f061ffe0000e2e922013800160f70c6180660f000001f998619800000e8e988019800160f70c6180660f000001f998619800000e8e988019800160f706c180660f00000199f8619800000e2e922013800160f706c180660f00000199f8619800000e2e922013800160f706c180640f0000019980619800000e8e988019800160f706c180640f0000019980619800000e8e988019800160b70387e6780f00000198f0f1ffe0000e2e922013800160b70387e6780f00000198f0f1ffe0000e2e92201380098002a01770000017c014801770000017c014601770000017c01460001130070fd0000f0fc000018fe0000e8e988019800130070fd0000f0fc000018fe0000e8e98801980007007fdaff01f80007007fdaff01f80002d700a0008fa00083ff}}{\tab }{{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw387\pich378\picwgoal7740\pichgoal7560\macpict\bliptag3408740\blipupi72{\*\blipuid 00340364c76202c5ae82cc2c87d7c6bf}18e500000000017a01831101a00082a0008e01000a0000000002d0024098003200000000003f018800000000003f018300000000003f0183000105d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c0000b00c0ec00001fe80001c0000b00c0ec00001fe80001c00005d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0001009c0018060f1ffe7ffc006db0001c0001009c0018060f1ffe7ffc006db0001c0001009c001804e79ffe7ffc00edb0001c0001009c001804e79ffe7ffc00edb0001c0001009c003004ff9e0c0f9c006db0001c0001009c003004ff9e0c0f9c006db0001c0001009c0330060f9ce67ffc006db0001c0001009c0330060f9ce67ffc006db0001c0001009c01e007e79ce67f9c006db0001c0001009c01e007e79ce67f9c006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c0060f0e0f0ffc00fdb0001c0001009c00c0060f0e0f0ffc00fdb0001c0000e03c000007ffdff00c0da0001c0000e03c000007ffdff00c0da0001c0001004c001803006f30001079fe60001c0001004c001803006f30001079fe60001c0001003c0018030f200021c3180e70001c0001003c0018030f200021c3180e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c00c00300631b001803f3030003f319fb0000031b180e70001c000980032003f0000007e0188003f0000007e0183003f0000007e018300011c15c00c00300631b001803f3030003f319fb0000031b180e70001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001100c0f9000030fe000230001fe10001c0001100c0f9000030fe000230001fe10001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0000b00c0f7000030dd0001c0000b00c0f7000030dd0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c003f1f8f1f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c000312ac00c003f1f001f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c0000700c0d20001c0000700c0d20001c0000d06c001800e018180d80001c000280cc001800e018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c000280cc00300319f9f80303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c0002821c00300319f9f803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b1803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b180303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f80303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f803fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0002500c0fb001a3fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0000700c0d20001c0001104c001803f80fb0002319f3fdf0001c0001504c001803f80fb0006319f3f00003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001811c003000631b7bf001f3f0035b03186003180e30001c0001912c003000631b7bf001f3f0035b03186001b1f1fe40001c0001912c033000631b8318031b180359f3f00001b1f1fe40001c0001912c033000631b8318031b180359f3f00000631b0e40001c0001912c01e000631b0318031b1803181b186000631b0e40001c0001912c01e000631b0318031b1803181b18600063f9fe40001c000980032007e000000bd0188007e000000bd0183007e000000bd018300011912c00c000633b0318031b18031b1b18000063f9fe40001c0001a13c00c000633b0318031b18031b1b1800006300180e50001c0001a13c00c00061db031801f3180319f3f000006300180e50001c0001912c00c00061db031801f3180319f3f0000061f9fe40001c0000d00c0f20002061f9fe40001c0000700c0d20001c000120bc001800f0006180000180006dd0001c0001a0bc001800f0006180000180006fd000003fd000018e70001c0001809c0018006000018000018fb000003fd000018e70001c0001809c0018006000018000018fb000006fd00000ce70001c0001b10c00300063f0e3f001f3f378e3f1f060006fd00000ce70001c0001c15c00300063f0e3f001f3f378e3f1f06000c3f1f3f1f06e70001c0001c15c0330006318618003018380631b180000c3f1f3f1f06e70001c0001c11c0330006318618003018380631b180001831feb10083e70001c0001c11c01e0006318618001f18300631b186001831feb10083e70001c0001c15c01e0006318618001f18300631b186000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f318180000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f3181800003319f319f98e70001c0001300c0f500081f000003319f319f98e70001c0000b00c0f500001fdf0001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200bd000000fc018800bd000000fc018300bd000000fc018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200fc0000013b018800fc0000013b018300fc0000013b018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000c00c0d900010180fc0001c0000c00c0d900010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c000980032013b0000017a0188013b0000017a0183013b0000017a018300013000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0000700c0d20001c0000700c0d20001c00005d1ff01c00005d1ff01c00002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf00a0008fa00083ff}}{\par }\pard \qc\keepn\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\tqr\tx7920\adjustright {\f4\fs20 Figure 12.4:  Text Printer Configuration Screens\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li2160\widctlpar\tx2520\adjustright {\f4\fs20\ul Option}{\f4\fs20 \tab }{\f4\fs20\ul Description}{\f4\fs20 \par \par Slot\tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\:slot}}}{\f4\fs20 This entry is the physical slot where your printer is located.\par Lines per page\par \tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\:lines per page}}}{\f4\fs20 This entry is a single number, telling the printer driver how many lines appear on a sheet of paper.  Most printers print 66 lines on a normal letter-size sheet of paper; it is traditional to print on 60 of those lines and leave the top and bottom 3 lines blank to form a margin.  When the printer driver finishes printing the number of lines you specify, it issues a form-feed character ($0C), which causes most printers to skip to the top of a new page.\par \tab \tab If you set this value to 0, the printer driver will never issue a form-feed character.\par Columns per line\par \tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\:characters per line}}}{\f4\fs20 This option is a single number telling the printer driver how many columns are on a sheet of paper.  Most printers print 80 columns on a normal letter-size sheet of paper.  If you use a value of -1, the printer driver will never split a line.  (Using the CDA configuration program, the value before 0 shows up as BRAM default; you can use the normal control panel printer configuration page to set the line length to unlimited.)  What your printer does with a line that is too long is something you would have to determine be trial and error.\par Delete LF\tab Some printers need a carriage-return line-feed character sequence to get to the start of a new line, while others only need a carriage-return.  Some programs write a carriage-return line-feed combination, while others only write a carriage-return.  This option lets you tell the printer driver to strip a line-feed character if it comes right after a carriage-return character, blocking extra line-feed characters coming in from programs that print both characters.\par \tab \tab You can select three options here:  Yes, No, or BRAM Default.  The Yes option strips extra line-feeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have selected using the printer configuration program in the control panel.\par Add LF\tab Some printers need a carriage-return line-feed character sequence to get to the start of a new line, while others only need a carriage-return.  This option lets you tell the printer driver to add a line-feed character after any carriage-return character that is printed.\par \tab \tab You can select three options here:  Yes, No, or BRAM Default.  The Yes option adds a line-feeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have selected using the printer configuration program in the control panel.\par Turn on MSB\par \tab This line is a flag indicating whether the printer driver should set the most significant bit when writing characters to the printer.  If this value is Yes the printer driver will set the most significant bit on all characters before sending the characters to the printer.  If you code any number other than 0, the most significant bit will be cleared before the character is sent to the printer.\par Init string\tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\:control characters}}}{\f4\fs20 This option sets a printer initialization string.  This string is sent to the printer when the driver is used for the first time.  With most printers and interface cards, there is some special code you can use to tell the printer that the characters that follow are special control codes.  These codes are often used to control the character density, number of lines per page, font, and so forth.  This initialization string, sent to the printer by the .PRINTER driver the first time the printer is used, is the traditional way of setting up your favorite defaults.\par \tab \tab You will find many cases when you will need to send a control character to the printer as part of this initialization string.  To do that using the CDev configuration program precede the character with a ~ character.  For example, an escape character is actually a control-[, so you could use ~[ to send an escape character to the printer.  The printer driver does not do any error checking when you use the ~ character, it simply subtracts $40 from the ASCII code for the character that follows the ~ character, and sends the result to the printer.  For example, g is not a control character, but ~g would still send a value, $27, to the printer.  From the CDA configuration program, just type the control character in the normal way; it will show up as an inverse character on the display.\par \tab \tab That manual that comes with your printer should have a list of the control codes you can use to configure the printer.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 12.5:  Text Printer Configuration Options\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The .PRINTER driver is a copyrighted program.  If you would like to send it out with your own programs, refer to Appendix D for licensing details.  (Licensing is free, but you need to include our copyright message.)\par }\pard \qj\fi360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers\bxe }{\rxe bk1}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 The .NULL Driver}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The .NULL Driver\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\v\f4\fs20 .NULL;}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.NULL}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The .NULL driver is a second driver available from GS/OS once it is installed from ORCA/M.  This driver is primarily used in shell scripts in situations where a shell program or command is writing output you don't want to see on the screen while the script runs.  In that case, you can redirect the output to .NULL.  The .NULL driver does nothing with the character, so the characters are effectively ignored by the system.\par \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Pipelines}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Pipelines\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pipes\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 work prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSPIPEx files}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA lets you automatically execute two or more programs in sequence, directing the output of one program to the input of the next.  The output of each program but the last is written to a temporary file in the work subdirectory named SYSPIPE}{\i\f4\fs20 n}{\f4\fs20 , where }{\i\f4\fs20 n}{\f4\fs20  is a number assigned by ORCA.  The first temporary file opened is assigned an }{\i\f4\fs20 n}{\f4\fs20  of 0; if a second SYSPIPE}{\i\f4\fs20 n}{\f4\fs20  file is opened for a given pipeline, then it is named SYSPIPE1, and so forth.\par To }{\i\f4\fs20 pipeline}{\f4\fs20 , or sequentially execute programs PROG0, PROG1, and PROG2, use the following command:\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx360\adjustright {\b\f6\fs18 PROG0|PROG1|PROG2\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par The output of PROG0 is written to SYSPIPE0; the input for PROG1 is taken from SYSPIPE0, and the output is written to SYSPIPE1.  The input for PROG2 is taken from SYSPIPE1, and the output is written to standard output.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 SYSPIPE}{\i\f4\fs20 n}{\f4\fs20  files are text files and can be opened by the editor.\par For example, if you had a utility program called UPPER that took characters from standard input, converted them to uppercase, and wrote them to standard output, you could use the following command line to write the contents of the text file MYFILE to the screen as all uppercase characters:\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx360\adjustright {\b\f6\fs18 TYPE MYFILE|UPPER\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To send the output to the file MYUPFILE rather than to the screen, use the following command line:\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx360\adjustright {\b\f6\fs18 TYPE MYFILE|UPPER >MYUPFILE \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The SYSPIPE}{\i\f4\fs20 n}{\f4\fs20  files are not deleted by ORCA after the pipeline operation is complete; thus, you can use the editor to examine the intermediate steps of a pipeline as an aid to finding errors.  The next time a pipeline is executed, however, any existing SYSPIPE}{\i\f4\fs20 n}{\f4\fs20  files are overwritten.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Command Table}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Command Table\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 command table\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SYSCMND file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Shell prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 prefixes\:numbers}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 shell commands\:command types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 shell commands\:built-in commands}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 shell commands\:utility commands}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 shell commands\:language names}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The command table is an ASCII text file, which you can change with the editor, or replace entirely.  It is named SYSCMND, and located in the SHELL prefix of your ORCA program disk.  The format of the command table is very simple.  Each line is either a comment line or a command definition.  Comment lines are blank lines or lines with a semicolon (;) in column one.  Command lines have four fields: the command name, the command type, the command or language number, and a comment.  The fields are separated by one or more blanks or tabs.  The first field is the name of the command.  It can be any legal GS/OS file name.  Prefixes are not allowed.  The second field is the command type.  This can be a C (built-in command), U (utility), or L (language).  The third field of a built-in command definition is the command number; the third field of a language is its language number; utilities do not use the third field.  An optional comment field can follow any command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 aliasing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMMANDS command}}}{\v\f4\fs20 \par }{\f4\fs20 Built-in commands are those that are predefined within the command processor, like the CATALOG command.  Being able to edit the command table means that you can change the name of these commands, add aliases for them, or even remove them, but you cannot add a built-in command.  As an example, UNIX fans might like to change the CATALOG command to be LS.  You would do this by editing the command table.  Enter LS as the command name, in column one.  Enter a C, for built-in command, in column two.  Enter the command number 4, obtained from looking at the command number for CATALOG in the command table, in column three.  Exit the editor, saving the modified SYSCMND file.  Reload the new command table by rebooting or by issuing the COMMANDS command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Languages prefix}}}{\f4\fs20 Languages define the languages available on the system.  You might change the language commands by adding a new language, like ORCA/C.  The first field contains the name of the EXE file stored in the LANGUAGES subdirectory of your ORCA system.  The second field is the letter L, and the third the language number.  The L can be preceded by an asterisk, which indicates that the assembler or compiler is restartable.  That is, it need not be reloaded from disk every time it is invoked.  The ORCA assembler, linker, and editor are all restartable.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 restartability}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:utility commands}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Utilities prefix}}}{\f4\fs20 The last type of command is the utility.  Utilities are easy to add to the system, and will therefore be the most commonly changed item in the command table.  The first field contains the name of the utility's EXE file stored in the UTILITIES subdirectory of your ORCA system.  The second field is a U.  The third field is not needed, and is ignored if present.  As with languages, restartable utilities are denoted in the command table by preceding the U with an asterisk.   Restartable programs are left in memory after they have been executed.  If they are called again before the memory they are occupying is needed, the shell does not have to reload the file from disk.  This can dramatically increase the performance of the system.  Keep in mind that not all programs are restartable!  You should not mark a program as restartable unless you are sure that it is, in fact, restartable.\par As an example of what has been covered so far, the command table shipped with the system is shown in Table 12.6.\par }\pard \qc\widctlpar\adjustright {\f4 \par }\pard \li1440\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 ;\par ;  ORCA Command Table\par ;\par ALIAS\tab \tab C\tab 40\tab \tab alias a command\par ASM65816\tab *L\tab 3\tab \tab 65816 assembler\par ASML\tab \tab C\tab 1\tab \tab assemble and link\par ASMLG\tab \tab C\tab 2\tab \tab assemble, link and execute\par ASSEMBLE\tab C\tab 3\tab \tab assemble\par BREAK\tab \tab C\tab 25\tab \tab break from loop\par CAT\tab \tab C\tab 4\tab \tab catalog\par CATALOG\tab \tab C\tab 4\tab \tab catalog\par }\pard \li1440\keepn\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 CC\tab \tab *L\tab 8\tab \tab ORCA/C compiler\par CHANGE\tab \tab C\tab 20\tab \tab change language stamp\par }\pard \li1440\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 CMPL\tab \tab C\tab 1\tab \tab compile and link\par CMPLG\tab \tab C\tab 2\tab \tab compile, link and execute\par COMMANDS\tab C\tab 35\tab \tab read command table\par COMPACT\tab \tab *U\tab \tab \tab compact OMF files\par COMPILE\tab \tab C\tab 3\tab \tab compile\par COMPRESS\tab C\tab 32\tab \tab compress/alphabetize directories\par CONTINUE\tab C\tab 26\tab \tab continue a loop\par COPY\tab \tab C\tab 5\tab \tab copy files/directories/disks\par CREATE\tab \tab C\tab 6\tab \tab create a subdirectory\par CRUNCH\tab \tab *U\tab \tab \tab combine object modules\par DELETE\tab \tab C\tab 7\tab \tab delete a file\par DEREZ\tab \tab *U\tab \tab \tab resource decompiler\par DEVICES\tab \tab C\tab 48\tab \tab Show Devices\par DISABLE\tab \tab C\tab 8\tab \tab disable file attributes\par DISKCHECK\tab U\tab \tab \tab check integrity of ProDOS disks\par DUMPOBJ\tab \tab U\tab \tab \tab object module dumper\par EDIT\tab \tab *C\tab 9\tab \tab edit a file\par ECHO\tab \tab C\tab 29\tab \tab print from an exec file\par ELSE\tab \tab C\tab 31\tab \tab part of an IF statement\par ENABLE\tab \tab C\tab 10\tab \tab enable file attributes\par END\tab \tab C\tab 23\tab \tab end an IF, FOR, or LOOP\par ENTAB\tab \tab *U\tab \tab \tab entab utility\par ERASE\tab \tab C\tab 44\tab \tab Erase entire volume.\par EXEC\tab \tab L\tab 6\tab \tab EXEC language\par EXECUTE\tab \tab C\tab 38\tab \tab EXEC with changes to local variables\par EXISTS\tab \tab C\tab 19\tab \tab see if a file exists\par EXIT\tab \tab C\tab 27\tab \tab exit a loop\par EXPORT\tab \tab C\tab 36\tab \tab export a shell variable\par EXPRESS\tab \tab U\tab \tab \tab converts files to ExpressLoad format\par FILETYPE\tab C\tab 21\tab \tab change the type of a file\par FOR\tab \tab C\tab 22\tab \tab for loop\par GSBUG\tab \tab U\tab \tab \tab application version of debugger\par HELP\tab \tab C\tab 11\tab \tab online help\par HISTORY\tab \tab C\tab 39\tab \tab display last 20 commands\par HOME\tab \tab C\tab 43\tab \tab clear the screen and home the cursor\par IF\tab \tab C\tab 30\tab \tab conditional branch\par INIT\tab \tab C\tab 45\tab \tab initialize disks\par INPUT\tab \tab C\tab 13\tab \tab read a value from the command line\par LINK\tab \tab *C\tab 12\tab \tab link\par LINKER\tab \tab *L\tab 265\tab \tab command line linker script\par LOOP\tab \tab C\tab 24\tab \tab loop statement\par MACGEN\tab \tab U\tab \tab \tab generate a macro file\par MAKEBIN\tab \tab U\tab \tab \tab convert load file to a binary file\par MAKELIB\tab \tab U\tab \tab \tab librarian\par MOVE\tab \tab C\tab 34\tab \tab move files\par PASCAL\tab \tab *L\tab 5\tab \tab Pascal compiler\par PREFIX\tab \tab C\tab 14\tab \tab set system prefix\par PRIZM\tab \tab U\tab \tab \tab desktop development system\par PRODOS\tab \tab L\tab 0\tab \tab ProDOS language\par QUIT\tab \tab C\tab 15\tab \tab exit from ORCA\par RENAME\tab \tab C\tab 16\tab \tab rename files\par RESEQUAL\tab *U\tab \tab \tab compares resource forks\par REZ\tab \tab *L\tab 21\tab \tab resource compiler\par RUN\tab \tab C\tab 2\tab \tab compile, link and execute\par SET\tab \tab C\tab 28\tab \tab set a variable\par SHOW\tab \tab C\tab 17\tab \tab show system attributes\par SWITCH\tab \tab C\tab 33\tab \tab switch order of files\par SHUTDOWN\tab C\tab 47\tab \tab shut down the computer\par TEXT\tab \tab L\tab 1\tab \tab Text file\par TOUCH\tab \tab C\tab 46\tab \tab Update date/time\par TYPE\tab \tab C\tab 18\tab \tab list a file to standard out\par UNALIAS\tab \tab C\tab 41\tab \tab delete an alias\par }\pard \li1440\keepn\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 UNSET\tab \tab C\tab 37\tab \tab delete a shell variable\par *\tab \tab C\tab 42\tab \tab comment\par }\pard \fi-270\li720\keep\keepn\widctlpar\adjustright {\f6\fs14 \par }\pard \qc\keep\keepn\widctlpar\adjustright {\f4\fs20 Table 12.6   System Commands\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Command And Utility Reference}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Command And Utility Reference\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each of the commands and utilities than ship with ORCA/M are listed in alphabetic order.  The syntax for the command is given, followed by a description and any parameters using the following notation:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\f4\fs20 UPPERCASE}{\f4\fs20 \tab \tab Uppercase letters indicate a command name or an option that must be spelled exactly as shown.  The shell is not case sensitive; that is, you can enter commands in any combination of uppercase and lowercase letters.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\f4\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\f4\fs20 italics}{\f4\fs20 \tab \tab Italics indicate a variable, such as a file name or address.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\f4\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\f4\fs20 directory}{\f4\fs20 \tab \tab This parameter indicates any valid directory path name or partial path name.  It does }{\i\f4\fs20 not}{\f4\fs20  include a file name.  If the volume name is included, }{\i\f4\fs20 directory}{\f4\fs20  must start with a slash (/) or colon (:); if }{\i\f4\fs20 directory}{\f4\fs20  does not start with one of these characters, then the current prefix is assumed.  For example, if you are copying a file to the subdirectory SUBDIRECTORY on the volume VOLUME}{\i\f4\fs20 ,}{\f4\fs20  then the }{\i\f4\fs20 directory }{\f4\fs20 parameter would be:  :VOLUME:SUBDIRECTORY.  If the current prefix were :VOLUME:, then you could use SUBDIRECTORY for }{\i\f4\fs20 pathname .}{\f4\fs20 \par \tab \tab The device numbers .D1, .D2, ... .D}{\i\f4\fs20 n}{\f4\fs20  can be used for volume names; if you use a device name, do not precede it with a slash.  For example, if the volume VOLUME in the above example were in disk drive .D1, then you could enter the }{\i\f4\fs20 directory}{\f4\fs20  parameter as .D1:SUBDIRECTORY.\par \tab \tab GS/OS device names can be used for the volume names.  Device names are the names listed by the SHOW UNITS command; they start with a period.  You should not precede a device name with a slash.\par \tab \tab GS/OS prefix numbers can be used for directory prefixes.  An asterisk (*) can be used to indicate the boot disk.  Two periods (..) can be used to indicate one subdirectory above the current subdirectory.  If you use one of these substitutes for a prefix, do not precede it with a slash.  For example, the HELP subdirectory on the ORCA disk can be entered as 6:HELP.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\f4\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\f4\fs20 filename}{\f4\fs20 \tab \tab This parameter indicates a file name, }{\i\f4\fs20 not}{\f4\fs20  including the prefix.  The device names .CONSOLE and .PRINTER can be used as file names.  Other character devices can also be used as file names, but a block device (like the name of a disk drive) cannot be used as a file name.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\f4\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\f4\fs20 pathname}{\f4\fs20 \tab \tab This parameter indicates a full path name, including the prefix and file name, or a partial path name, in which the current prefix is assumed.  For example, if a file is named FILE in the subdirectory DIRECTORY on the volume VOLUME, then the }{\i\f4\fs20 pathname }{\f4\fs20 parameter would be:  :VOLUME:DIRECTORY:FILE.  If the current prefix were :VOLUME:, then you could use DIRECTORY:FILE for }{\i\f4\fs20 pathname . }{\f4\fs20  A full path name (including the volume name) must begin with a slash (/) or colon (:); do }{\i\f4\fs20 not}{\f4\fs20  precede }{\i\f4\fs20 pathname }{\f4\fs20  with a slash if you are using a partial path name.\par \tab \tab Character device names, like .CONSOLE and .PRINTER, can be used as file names; the device numbers .D1, .D2, ... .D}{\i\f4\fs20 n}{\f4\fs20  can be used for volume names; GS/OS device names can be used a volume names; and GS/OS prefix numbers, an asterisk (*), or double periods (..) can be used instead of a prefix.\par \par }{\b\f4\fs20 |}{\f4\fs20 \tab \tab A vertical bar indicates a choice.  For example, +L|-L indicates that the command can be entered as either +L or as -L.\par \par }{\b\f4\fs20 A|}{\b\f4\fs20\ul B}{\f4\fs20 \tab \tab An underlined choice is the default value.\par \par }\pard \fi-1901\li2160\widctlpar\tx2520\adjustright {\b\f4\fs20 [ ]}{\f4\fs20 \tab \tab Parameters enclosed in square brackets are optional.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\f4\fs20 \par }{\b\i\f4\fs20 ...}{\f4\fs20 \tab \tab Ellipses indicate that a parameter or sequence of parameters can be repeated as many times as you wish.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ALIAS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ALIAS\tcl3}}}{\b\f4 \par }{\f4\fs20 \par }{\f6\fs20 ALIAS [}{\i\f6\fs20 name}{\f6\fs20  [}{\i\f6\fs20 string}{\f6\fs20 ]]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALIAS command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ALIAS command allows you to create new commands based on existing ones.  It creates an alias called }{\i\f4\fs20 name}{\f4\fs20 , which can then be typed from the command line as if it were a command.  When you type the name, the command processor substitutes }{\i\f4\fs20 string}{\f4\fs20  for the name before trying to execute the command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DUMPOBJ utility}}}{\v\f4\fs20 \par }{\f4\fs20 For example, let's assume you dump hexadecimal files with the DUMPOBJ file fairly frequently.  Remembering and typing the three flags necessary to do this can be a hassle, so you might use the ALIAS command to define a new command called DUMP.  The command you would use would be\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 \tab ALIAS  DUMP  DUMPOBJ -F +X -H\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Now, to dump MYFILE in hexadecimal format, type\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f6\fs18 \tab DUMP MYFILE\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can create a single alias that executes multiple commands by inclosing string in quotes.  For example,\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab ALIAS GO "CMPL MYFILE.ASM; FILETYPE MYFILE S16; MYFILE"\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 creates a new command called GO.  This new command compiles and links a program, changes the file type to S16, and then executes the program.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The name and string parameters are optional.  If a name is specified, but the string is omitted, the current alias for that name will be listed.  If both the name and the string are omitted, a list of all current aliases and their values is printed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\v\f4\fs20 \par }{\f4\fs20 Aliases are automatically exported from the LOGIN file to the command level.  This means that any aliases created in the LOGIN file are available for the remainder of the session, or until you specifically delete or modify the alias.  Aliases created in an EXEC file are available in that EXEC file and any other it calls, but not to the command level.  See the EXECUTE command for a way to override this.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNALIAS command}}}{\v\f4\fs20 \par }{\f4\fs20 See the UNALIAS command for a way to remove an alias.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ASM65816}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ASM65816\tcl3}}}{\b\f4 \par }{\f4\fs20 \par }{\f6\fs20 ASM65816\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASM65816 command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This language command sets the shell default language to 65816 Assembly Language.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ASML}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ASML\tcl3}}}{\b\f4 \par }\pard \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\f6\fs20 ASML\tab [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command assembles (or compiles) and links a source file.  The ORCA shell checks the language of the source file and calls the appropriate assembler or compiler.  If the maximum error level returned by the assembler or compiler is less than or equal to the maximum allowed (0 unless you specify otherwise with the MERR directive or its equivalent in the source file), then the resulting object file is linked.  The linker is described in Chapter 14.  Assembler error levels are described in Appendix A.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MERR directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 You can use APPEND directives (or the equivalent) to tie together source files written in different computer languages; ORCA compilers and assemblers check the language type of each file and return control to the shell when a different language must be called.  See the section \ldblquote Assembling or Compiling a Program\rdblquote  in Chapter 2 for a description of the assembly and compilation process.\par }{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:parameters}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPILE command}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }{\f4\fs20 Not all compilers or assemblers make use of all the parameters provided by this command (and the ASSEMBLE, ASMLG, COMPILE, CMPL, CMPLG, and RUN commands, which use the same parameters).  The ORCA Assembler, for example, includes no language-specific options, and so makes no use of the }{\i\f4\fs20 language}{\f4\fs20 =(}{\i\f4\fs20 option}{\f4\fs20  ...) parameter.  If you include a parameter that a compiler or assembler cannot use, it ignores it; no error is generated.  If you used APPEND directives to tie together source files in more than one language, then all parameters are passed to every compiler, and each compiler uses those parameters that it recognizes.  See the reference manual for the compiler you are using for a list of the options that it accepts.\par Command-line parameters (those described here) override source-code options when there is a conflict.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 +D|-D\tab +D causes debug code to be generated so that the source-level debugger may be used later when debugging the program.  -D, the default, causes debug code to not be generated.  The assembler ignores this flag.\par }{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright {\f4\fs20 \par +E|-E\tab When a terminal error is encountered during an assembly from the command line, the assembler aborts and enters the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.  From an EXEC file, the default is to display the error message and return to the shell.  The +E flag will cause the assembler to abort to the editor, while the -E flag causes the assembler to abort to the shell.\par }{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listings}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 link map}}}{\v\f4\fs20 \par }{\f4\fs20 \par +L|-L\tab If you specify +L, the assembler or compiler generates a source listing; if you specify -L, the listing is not produced.  The L parameter in this command overrides the LIST directive in the source file.  +L will cause the linker to produce a link map.\par }{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par +M|-M\tab +M causes any object modules produced by the assembler or compiler to be written to memory, rather than to disk.\par }{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\: global}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:linker}}}{\v\f4\fs20 END directive;}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par +P|-P\tab The assembler, linker, and many other languages print progress information as the various subroutines are processed.  The -P flag can be used to suppress this progress information.\par \par +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all global references in the object file; the assembler or compiler may also produce a symbol table.  The ORCA Assembler, for example, produces an alphabetical listing of all local symbols following each END directive.  If you specify -S, these symbol tables are not produced.  The S parameter in this command overrides the SYMBOL directive in the source file.\par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 terminal errors}}}{\v\f4\fs20 \par }{\f4\fs20 \par +T|-T\tab The +T flag causes all errors to be treated as terminal errors, aborting the assembly.  This is normally used in conjunction with +E.  In that case, any error will cause the assembler to abort and enter the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.}{\i\f4\fs20 \par }{\v\f4\fs20 .}{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:status banner}}}{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wait flag}}}{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\caps\v\f4\fs20 abort}{\v\f4\fs20  command}{\caps\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par +W|-W\tab Normally, the assembler continues assembling a program after an error has been found.  If the +W flag is specified, the assembler will stop after finding an error, and wait for a keypress.  Pressing }{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 . will abort the assembly, entering the editor with the cursor on the offending line.  Press any other key to continue the assembly.}{\i\f4\fs20 \par \par sourcefile}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the source file.\par }{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }{\f4\fs20 \par KEEP=}{\i\f4\fs20 outfile}{\f4\fs20   You can use this parameter to specify the path name or partial path name (including the file name) of the output file.  For a one-segment program, ORCA names the object file }{\i\f4\fs20 outfile}{\f4\fs20 .ROOT.  If the program contains more than one segment, ORCA places the first segment in }{\i\f4\fs20 outfile}{\f4\fs20 .ROOT and the other segments in }{\i\f4\fs20 outfile}{\f4\fs20 .A.  If this is a partial assembly (or several source files with different programming languages are being compiled), then other file name extensions may be used.  If the assembly is followed by a successful link, then the load file is named }{\i\f4\fs20 outfile.}{\f4\fs20 \par }{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\i\f4\fs20 \tab \tab }{\f4\fs20 This parameter has the same effect as placing a KEEP directive in your source file.  If you have a KEEP directive in the source file and you also use the KEEP parameter, this parameter has precedence.\par }{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:metacharacters}}}{\v\f4\fs20 \par }{\f4\fs20 \tab \tab When specifying a KEEP parameter, you can use two metacharacters to modify the KEEP name.  If the % character is found in the keep name, the source file name is substituted.  If $ is encountered, the source file name with the last extension removed is substituted.\par }{\b\f4\fs20 \tab \tab }{\f4\fs20 Note the following about the KEEP parameter:\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi-360\li1800\widctlpar\tx1800\adjustright {\f4\fs20 \par \bullet \tab If you use neither the KEEP parameter, the \{KeepName\} variable, nor the KEEP directive, then the object files are not saved at all.  In this case, the link cannot be performed, because there is no object file to link.\par }{\pard\plain \qj\fi-360\li1800\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\v\f4\fs20 \par }{\f4\fs20 \par \bullet \tab The file name you specify in }{\i\f4\fs20 outfile}{\f4\fs20  must not be over 10 characters long.  This is because the extension .ROOT is appended to the name, and GS/OS does not allow file names longer than 15 characters.\par }{\pard\plain \qj\fi-360\li1800\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright {\f4\fs20 \par NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20  }{\i\f4\fs20 seg2}{\f4\fs20  ...)  This parameter causes the assembler or compiler to perform a partial assembly or compile; the operands }{\i\f4\fs20 seg1, seg2, ...}{\f4\fs20  specify the names of the segments to be assembled or compiled.  Separate the segment names with one or more spaces.  The ORCA Linker automatically selects the latest version of each segment when the program is linked.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright {\f4\fs20 \tab \tab The object file created when you use the NAMES parameter contains only the specified segments.  In ORCA Assembly Language, you assign names to segments with START, DATA, PRIVATE, or PRIVDATA directives.  In most high-level languages, each subroutine becomes an object segment and the segment name is the same as the subroutine name.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\v\f4\fs20 \par }{\f4\fs20 \tab \tab You must use the same output file name for every partial compilation or assembly of a program.  For example, if you specify the output file name as OUTFILE for the original assembly of a program, then the assembler creates object files named OUTFILE.ROOT and OUTFILE.A.  In this case you must also specify the output file name as OUTFILE for the partial assembly.  The new output file is named OUTFILE.B, and contains only the segments listed with the NAMES parameter.  When you link a program, the linker scans all the files whose file names are identical except for their extensions, and takes the latest version of each segment.\par \tab \tab No spaces are permitted immediately before or after the equal sign in this parameter.\par \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\tx1800\adjustright {\i\f4\fs20 language1}{\f4\fs20 =(}{\i\f4\fs20 option}{\b\i\f4\fs20  }{\i\f4\fs20 ...}{\f4\fs20 )}{\b\f4\fs20  }{\f4\fs20 ...  This parameter allows you to pass parameters directly to specific compilers and assemblers running under the ORCA shell.  For each compiler or assembler for which you want to specify options, type the name of the language (exactly as defined in the command table), an equal sign (=), and the string of options enclosed in parentheses.  The contents and syntax of the options string is specified in the compiler or assembler reference manual; the ORCA shell does no error checking on this string, but passes it through to the compiler or assembler.  You can include option strings in the command line for as many languages as you wish; if that language compiler is not called, then the string is ignored.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\tx1800\adjustright {\f4\fs20 \tab \tab No spaces are permitted immediately before or after the equal sign in this parameter.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 ASMLG}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ASMLG\tcl3}}}{\b\v\f4  }{\b\f4 \par }\pard \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\pard\plain \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program\bxe }}}{\pard\plain \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\pard\plain \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executing a program}}}{\v\f4\fs20 \par }\pard \fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\f4\fs20 \par }{\f6\fs20 ASMLG\tab [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command assembles (or compiles), links, and runs a source file.  Its function is identical to that of the ASML command, except that once the file has been successfully linked, it is executed automatically.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 ASSEMBLE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ASSEMBLE\tcl3}}}{\b\v\f4  }{\b\f4 \par }\pard \qj\fi-1350\li1350\keep\keepn\widctlpar\tx1350\adjustright {\pard\plain \qj\fi-1350\li1350\keep\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program\bxe }}}{\v\f4\fs20 \par }\pard \fi-1350\li1350\keep\keepn\widctlpar\tx1350\adjustright {\f4\fs20 \par }\pard \fi-1340\li1340\keep\keepn\widctlpar\tx1340\adjustright {\f6\fs20 ASSEMBLE\tab [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ]\par \tab [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-1350\li1350\keep\keepn\widctlpar\tx1350\adjustright {\pard\plain \qj\fi-1350\li1350\keep\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi-1350\li1350\keep\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\fi-1350\li1350\keep\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command assembles (or compiles) a source file.  Its function is identical to that of the ASML command, except that the ASSEMBLE command does not call the linker to link the object files it creates; therefore, no load file is generated.  You can use the LINK command to link the object files created by the ASSEMBLE command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 BREAK}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 BREAK\tcl3}}}{\b\i\v\f4  }{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs20 BREAK\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BREAK command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOOP command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ECHO command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command is used to terminate a FOR or LOOP statement.  The next statement executed will be the one immediately after the END statement on the closest nested FOR or LOOP statement.  For example,  the EXEC file\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 \par FOR I IN 1 2 3\par   FOR J IN 2 3\par     IF \{I\} == \{J\}\par       BREAK\par     END\par     ECHO \{I\}\par   END\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would print\par \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 1\par 1\par 3\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par to the screen.  This order results from the fact that BREAK exits from the closest loop, the }{\f6\fs18 FOR J IN 2 3}{\f4\fs20 , not from all loops.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CAT}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CAT\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 aliasing}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx540\adjustright {\f6\fs20 CAT\tab [-A] [-D] [-H] [-L] [-N] [-P] [-T]\par \tab [}{\i\f6\fs20 directory1 }{\f6\fs20 [}{\i\f6\fs20 directory2 ...}{\f6\fs20 ]]\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 \par CAT [-A] [-D] [-H] [-L] [-N] [-P] [-T] [}{\i\f6\fs20 pathname}{\f6\fs20 1 [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command is an alternate name for CATALOG.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 CATALOG}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CATALOG\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 current prefix}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \fi-1080\li1080\keepn\widctlpar\adjustright {\f6\fs20 CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T] \par \tab [}{\i\f6\fs20 directory1 }{\f6\fs20 [}{\i\f6\fs20 directory2 ...}{\f6\fs20 ]]\par \par CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T] \par \tab [}{\i\f6\fs20 pathname}{\f6\fs20 1 [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command lists to standard output the directory of the volume or subdirectory you specify.  More than one directory or subdirectory can be listed to get more than one catalog from a single command.\par \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -A\tab GS/OS supports a status bit called the invisible bit.  Finder droppings files, for example, are normally flagged as invisible so they won't clutter directory listings.  The CATALOG command does not normally display invisible files when you catalog a directory; if you use the -A flag, the CATALOG command will display invisible files.\par \par -D\tab If the -D flag is used, this command does a recursive catalog of directories, showing not only the directory name, but the contents of the directory, and the contents of directories contained within the directory.\par \par -H\tab When this flag is used, the CATALOG command does not print the header, which shows the path being cataloged, or the trailer, which shows statistics about disk use.\par \par -L\tab The standard format for a directory listing is a table, with one line per file entry.  When this flag is used, the CATALOG command shows a great deal more information about each file, but the information is shown using several lines.\par \par -N\tab This flag causes the CATALOG command to show only the name of the file, omitting all other information.  Files are formatted with multiple file names per line, placing the file names on tab stops at 16 character boundaries.  The resulting table is considerably easier to scan when looking for a specific file.\par \par -P\tab The name of a file is normally displayed as a simple file name.  Use of the -P flag causes the files to be listed as full path names.  This option does make the file names fairly long, so the default tabular format may become cumbersome.  Using this option with -L or -N clears up the problem.\par \par -T\tab Most file types have a standard 3-letter identifier that is displayed by the catalog command.  For example, an ASCII file has a 3-letter code of TXT.  These 3-letter codes are displayed by the CATALOG command.  If you use the -T flag, the CATALOG command displays the hexadecimal file type instead of the 3-letter file type code.\par \tab \tab This flag also controls the auxiliary file type field, which is shown as a language name for SRC files.  When the -T flag is used, this field, too, is shown as a hexadecimal value for all file types.\par \par }{\i\f4\fs20 directory\tab }{\f4\fs20 The path name or partial path name of the volume, directory, or subdirectory for which you want a directory listing.  If the prefix is omitted, then the contents of the current directory are listed.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par pathname}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file for which you want directory information.  You can use wildcard characters in the file name to obtain information about only specific files.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs18 :ORCA.DISASM:=\par \par Name            Type  Blocks  Modified        Created         Access  Subtype\par \par Desktop.DISASM  S16+     230 14 Aug 90       21 May 90        DNBWR   $DB03\par DISASM          EXE      101 15 Aug 90       15 Aug 90        DNBWR   $0100\par DISASM.Config   $5A+       2 17 May 90       30 Apr 90        DNBWR   $800A\par DISASM.Data     TXT       95 10 Aug 90       20 Oct 88        DNBWR   $0000\par DISASM.Scripts  SRC       94 23 May 90       15 Aug 89        DNBWR   $0116\par Help            DIR        1 18 Sep 89       14 Sep 89        DNBWR   $0000\par Samples         DIR        1 13 Aug 90       14 Sep 89        DNBWR   $0000\par Icons           DIR        1 17 Sep 89       14 Sep 89        DNBWR   $0000\par \par Blocks Free:   1026      Blocks used:    574      Total Blocks:   1600\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Table 12.7  Sample CATALOG Listing\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Table 12.7 shows the output from cataloging the ORCA/Disassembler 1.2 disk.  This particular disk has a good variety of file types and so forth; we'll use it to see what the CATALOG command can tell us about a disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disassembler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disk size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 blocks}}}{\f4\fs20 The first line shows the path being cataloged; in this case, we are cataloging all files on the disk ORCA.DISASM.  The last line gives more information about the disk, including the number of blocks that are not used, the number that are used, and the total number of blocks on the disk.  For ProDOS format disks, a block is 512 bytes, so this disk is an 800K disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file names}}}{\f4\fs20 Between these two lines is the information about the files on the disk.  The first column is the file name.  If the file name is too long to fit in the space available, the rest of the information will appear on the line below.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\f4\fs20 Next is the type of the file.  Most file types have a three letter code associated with them, like S16 (System 16) for a file that can be executed from the Finder or the ORCA shell, and DIR (directory) for a folder.  There is no three letter code for a file with a type of $5A, so this file type is shown as the hexadecimal number for the file type.  If a file is an extended file (i.e., if it has a resource fork), the file type is followed by a + character.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 blocks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 program size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sparse files}}}{\f4\fs20 The column labeled "Blocks" shows the number of blocks occupied by the file on the disk.  GS/OS is clever about the way it stores files, not using a physical disk block for a file that contains only zeros, for example, and programs are not necessarily loaded all at once, so this block size does not necessarily correspond to the amount of memory that will be needed to load a file or run a program; it only tells how much space is required on the disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 time}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 date}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 creation time}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 modify time}}}{\f4\fs20 The columns labeled "Modified" and "Created" give the date and time when the file was last changed and when the file was originally created, respectively.  In this example, the time fields have been artificially set to 00:00 (something the Byte Works does for all of its distribution disks).  When the time is set to 00:00, it is not shown.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file access flags}}}{\f4\fs20 The column labeled Access shows the values of six flags that control whether a file can be deleted (D), renamed (N), whether it has been backed up since the last time it was modified (B), whether it can be written to (W) or read from (R), and whether it is invisible (I).  In all cases, if the condition is true, the flag is shown as an uppercase letter, and if the condition is false, the flag is not shown at all.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 auxiliary file type}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\f4\fs20 The last column, labeled "Subtype", shows the auxiliary file type for the file.  For most files, this is shown as a four-digit hexadecimal number, but for SRC files you will see the name of the language.\par \par }\pard \li2520\keepn\widctlpar\adjustright {\f6\fs18 Name         : Desktop.DISASM\par Storage Type : 5\par File Type    : S16       $B3\par Aux Type     : $DB03\par Access       : DNBWR     $E3\par Mod Date     : 14 Aug 90       \par Create Date  : 21 May 90       \par Blocks Used  : 139\par Data EOF     : $00011A6B\par Res. Blocks  : 91\par Res. EOF     : $0000B215\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Table 12.8\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EOF}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file length}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 blocks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resource fork}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 storage type}}}{\f4\fs20 The tabular form used by the CATALOG command to show information about files is compact, but doesn't provide enough room to show all of the information about a file that is available from GS/OS.  When the -L flag is used, the CATALOG command uses an expanded form to show more information about the file.  Table 12.8 shows the expanded information for the Desktop.DISASM file.  The name, file type, auxiliary file type, access, modification date and creation date fields are the same as before, although the order has changed and the fields that have a hexadecimal equivalent are shown using both forms.  The old block count field has been expended, showing the number of blocks used by the date fork (the Blocks Used field) and the resource fork (labeled Res. Blocks) as two separate values.  In addition, the true size of the file in bytes is shown, again split between the data fork and resource fork, as the Date EOF field and the Res. EOF field.  Finally, the internal storage type used by GS/OS is listed.\par For a more complete and technical description of the various information returned by the CATALOG command, see }{\i\f4\fs20 Apple IIGS GS/OS Reference}{\f4\fs20 , Volume 1.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 CHANGE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CHANGE\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CHANGE command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 CHANGE [-P] }{\i\f6\fs20 pathname language\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command changes the language type of an existing file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\f4\fs20 pathname}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the source file whose language type you wish to change.  You can use wildcard characters in the file name.\par \par }{\i\f4\fs20 language}{\f4\fs20 \tab The language type to which you wish to change this file.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHOW command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In ORCA, each source or text file is assigned the current default language type when it is created.  When you assemble or compile the file, ORCA checks the language type to determine which assembler, compiler, linker, or text formatter to call.  Use the CATALOG command to see the language type currently assigned to a file.  Use the CHANGE command to change the language type of any of the languages listed by the SHOW LANGUAGES command.\par You can use the CHANGE command to correct the ORCA language type of a file if the editor was set to the wrong language type when you created the file, for example.  Another use of the CHANGE command is to assign the correct ORCA language type to an ASCII text file (GS/OS file type $04) created with another editor.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 CMPL}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CMPL\tcl3}}}{\b\v\f4  }{\b\f4 \par }\pard \qj\fi-720\li720\keep\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\fi-720\li720\keep\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command\bxe }}}{\pard\plain \qj\fi-720\li720\keep\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program}}}{\pard\plain \qj\fi-720\li720\keep\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\f6\fs20 CMPL\tab [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-720\li720\keep\keepn\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command compiles (or assembles) and links a source file.  Its function and parameters are identical to those of the ASML command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 CMPLG}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CMPLG\tcl3}}}{\b\v\f4  }{\b\f4 \par }\pard \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\pard\plain \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command\bxe }}}{\pard\plain \qj\fi-810\li810\keep\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executing a program}}}{\v\f4\fs20 \par }\pard \fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\f4\fs20 \par }{\f6\fs20 CMPLG\tab [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command compiles (or assembles), links, and runs a source file.  Its function is identical to that of the ASMLG command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 COMMANDS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COMMANDS\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMMANDS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command table}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSCMND file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 restartability}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 COMMANDS }{\i\f6\fs20 pathname\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command causes ORCA to read a command table, resetting all the commands to those in the new command table.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file containing the command table.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you load ORCA, it reads the command-table file named SYSCMND in prefix 15.  You can use the COMMANDS command to read in a custom command table at any time.  Command tables are described in the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par The COMMANDS command has one other useful side effect.  Any restartable programs that have been loaded and left in memory will be purged, thus freeing a great deal of memory.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 COMPACT}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COMPACT\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPACT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OMF}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW C}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 COMPACT }{\i\f6\fs20 infile}{\f6\fs20  [-O }{\i\f6\fs20 outfile}{\f6\fs20 ] [-P] [-R] [-S]}{\i\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command converts a load file from an uncompacted form to a compacted form. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 infile}{\f4\fs20 \tab Input load file.  Any OMF format file is acceptable, but the only files that benefit from the COMPACT utility are the executable files, such as EXE and S16.\par \par -O }{\i\f4\fs20 outfile}{\f4\fs20 \tab By default, the input file is replaced with the compacted version of the same file.  If you supply an output file name with this option, the file is written to }{\i\f4\fs20 outfile}{\f4\fs20 .\par \par -P\tab When the -P flag is used, copyright and progress information is written to standard out.\par \par -R\tab The -R option marks any segment named ~globals or ~arrays as a reload segment.  It also forces the bank size of the ~globals segment to $10000.  These options are generally only used with APW C programs.\par \par -S\tab The -S flag causes a summary to be printed to standard out.  This summary shows the total number of segments in the file, the number of each type of OMF record compacted, copied, and created.  This information gives you some idea of what changes were made to make the object file smaller.\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Compacted object files are smaller and load faster than uncompacted load files.  The reduction in file size is generally about 40%, although the actual number can vary quite a bit in practice.  In addition, if the original file is in OMF 1.0 format, it is converted to OMF 2.0.\par Files created with ORCA/M 2.0 are compacted by default.  The main reason for using this utility is to convert any old programs you may obtain to the newer OMF format, and to reduce their file size.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 COMPILE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COMPILE\tcl3}}}{\b\v\f4  }{\b\f4 \par }\pard \qj\fi-1170\li1170\keep\keepn\widctlpar\tx1170\adjustright {\pard\plain \qj\fi-1170\li1170\keep\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program\bxe }}}{\pard\plain \qj\fi-1170\li1170\keep\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPILE command}}}{\pard\plain \qj\fi-1170\li1170\keep\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }\pard \fi-1170\li1170\keep\keepn\widctlpar\tx1170\adjustright {\f4\fs20 \par }\pard \fi-980\li980\keep\keepn\widctlpar\tx980\adjustright {\f6\fs20 COMPILE\tab [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-1170\li1170\keep\keepn\widctlpar\tx1170\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command compiles (or assembles) a source file.  Its function is identical to that of the ASML command, except that it does not call the linker to link the object files it creates; therefore, no load file is generated.  You can use the LINK command to link the object files created by the COMPILE command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 COMPRESS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COMPRESS\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPRESS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 alphabetizing directories}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 COMPRESS A | C | A C  [}{\i\f6\fs20 directory1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20  ...]]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command compresses and alphabetizes directories.  More than one directory can be specified on a single command line.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 A\tab Use this parameter to alphabetize the file names in a directory.  The file names appear in the new sequence whenever you use the CATALOG command.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 C\tab Use this parameter to compress a directory.  When you delete a file from a directory, a \ldblquote hole\rdblquote  is left in the directory that GS/OS fills with the file entry for the next file you create.  Use the C parameter to remove these holes from a directory, so that the name of the next file you create is placed at the end of the directory listing instead of in a hole in the middle of the listing.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 A C\tab You can use both the A and C parameters in one command; if you do so, you must separate them with one or more spaces.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 current prefix}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DOS}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\i\f4\fs20 \par directory}{\f4\fs20 \tab The path name or partial path name of the directory you wish to compress or alphabetize, }{\i\f4\fs20 not}{\f4\fs20  including any file name.  If you do not include a volume or directory path, then the current directory is acted on.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SWITCH command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command works only on GS/OS directories, not on other file systems such as DOS or Pascal.  Due to the design of GS/OS, the COMPRESS command will also not work on the disk volume that you boot from \endash  to modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par To interchange the positions of two files in a directory, use the SWITCH command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 CONTINUE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CONTINUE\tcl3}}}{\b\i\v\f4  }{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CONTINUE command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 CONTINUE\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DELETE command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOOP command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command causes control to skip over the remaining statements in the closest nested FOR or LOOP statement.  For example, the EXEC file\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 \par FOR I\par   IF \{I\} == IMPORTANT\par     CONTINUE\par   END\par   DELETE \{I\}\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would delete all files listed on the command line when the EXEC file is executed except for the file IMPORTANT.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 COPY}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COPY\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disk copying}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device names}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 COPY [-C] [-F] [-P] [-R] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20 ]\par \par COPY [-C] [-F] [-P] [-R] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20 ]\par \par COPY }{\i\f6\fs20 directory1}{\f6\fs20  }{\i\f6\fs20 directory2}{\f6\fs20 \par \par COPY [-D] }{\i\f6\fs20 volume1 volume2\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command copies a file to a new subdirectory, or to a duplicate file with a different file name.  This command can also be used to copy an entire directory or to perform a block-by-block disk copy.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -C\tab If you specify -C before the first path name, COPY does not prompt you if the target file name (}{\i\f4\fs20 pathname2}{\f4\fs20 ) already exists.\par \par -D\tab If you specify -D before the first path name, both path names are volume names, and both volumes are the same size, then a block-by-block disk copy is performed.  Other flags, while accepted, are ignored when this flag is used.\par \par -F\tab }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data fork}}}{\f4\fs20 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -F flag is used, only the data fork is copied.  If the destination file already exists, it's resource fork is left undisturbed.  By copying the data fork of a file onto an existing file with a resource fork, it is possible to combine the data fork of the original file with the resource fork of the target file.\par \par -P\tab The COPY command prints progress information showing what file is being copied as it works through a list of files.  The -P flag suppresses this progress information.\par \par -R\tab }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resource fork}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resources}}}{\f4\fs20 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -R flag is used, only the resource fork is copied.  If the destination file already exists, it's data fork is left undisturbed.  By copying the resource fork of a file onto an existing file with a data fork, it is possible to add the resource fork of the original file to the data fork of the target file.\par \par }{\i\f4\fs20 pathname1}{\f4\fs20  \tab The full or partial path name (including the file name) of a file to be copied.  Wildcard characters may be used in the file name.\par \par }{\i\f4\fs20 pathname2}{\f4\fs20 \tab The full or partial path name (including the file name) to be given to the copy of the file}{\i\f4\fs20 .}{\f4\fs20   Wildcard characters can }{\i\f4\fs20 not}{\f4\fs20  be used in this file name.  If you leave this parameter out, then the current directory is used and the new file has the same name as the file being copied.\par \par }{\i\f4\fs20 directory1}{\f4\fs20 \tab The path name or partial path name of a directory that you wish to copy.  The entire directory (including all the files, subdirectories, and files in the subdirectories) is copied.\par \par }{\i\f4\fs20 directory2}{\f4\fs20 \tab The path name or partial path name of the directory to which you wish to copy the file or directory.  If }{\i\f4\fs20 directory2}{\f4\fs20  does not exist, it is created (unless }{\i\f4\fs20 directory1}{\f4\fs20  is empty).  If you do not include this parameter, the current directory is used.\par \par }{\i\f4\fs20 volume1}{\f4\fs20 \tab The name of a volume that you want to copy onto another volume.  The entire volume (including all the files, subdirectories, and files in the subdirectories) is copied.  If both path names are volume names, both volumes are the same size, }{\i\f4\fs20 and}{\f4\fs20  you specify the -D parameter, then a block-by-block disk copy is performed.  You can use a device name (such as .D1) instead of a volume name.\par \par }{\i\f4\fs20 volume2}{\f4\fs20 \tab The name of the volume that you want to copy onto.  You can use a device name instead of a volume name.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you do not specify }{\i\f4\fs20 pathname2}{\f4\fs20 , and a file with the file name specified in }{\i\f4\fs20 pathname1}{\f4\fs20  exists in the target subdirectory, or if you do specify}{\i\f4\fs20  pathname2}{\f4\fs20  and a file named }{\i\f4\fs20 pathname2}{\f4\fs20  exists in the target subdirectory, then you are asked if you want to replace the target file.  Type Y and press }{\outl\f4\fs18 RETURN}{\f4\fs20  to replace the file.  Type N and press }{\outl\f4\fs18 RETURN}{\f4\fs20  to copy the file to the target prefix with a new file name.  In the latter case, you are prompted for the new file name.  Enter the file name, or press }{\outl\f4\fs18 RETURN}{\f4\fs20  without entering a file name to cancel the copy operation.  If you specify the -C parameter, then the target file is replaced without prompting.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 If you do not include any parameters after the COPY command, you are prompted for a path name, since ORCA prompts you for any required parameters.  However, since the target prefix and file name are not required parameters, you are }{\i\f4\fs20 not}{\f4\fs20  prompted for them.  Consequently, the current prefix is always used as the target directory in such a case.  To copy a file to any subdirectory }{\i\f4\fs20 other }{\f4\fs20 than the current one, you }{\i\f4\fs20 must}{\f4\fs20  include the target path name as a parameter either in the command line or following the path name entered in response to the file name prompt.\par }{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 write protect}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you use volume names for both the source and target and specify the -D parameter, then the COPY command copies one volume onto another.  In this case, the contents of the target disk are destroyed by the copy operation.  The target disk must be initialized (use the INIT command) }{\i\f4\fs20 before}{\f4\fs20  this command is used.  This command performs a block-by-block copy, so it makes an exact duplicate of the disk.  Both disks must be the same size and must be formatted using the same FST for this command to work.  You can use device names rather than volume names to perform a disk copy.  To ensure safe volume copies, it is a good idea to write-protect the source disk.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CREATE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CREATE\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CREATE command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 CREATE }{\i\f6\fs20 directory1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20  ...]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command creates a new subdirectory.  More than one subdirectory can be created with a single command by separating the new directory names with spaces.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 directory}{\f4\fs20 \tab The path name or partial path name of the subdirectory you wish to create.\par }\pard \qj\fi-1440\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \keep\keepn\widctlpar\adjustright {\b\f4 CRUNCH}{\pard\plain \keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CRUNCH\tcl3}}}{\b\v\f4  }{\b\f4 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CRUNCH utility\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 CRUNCH [-P] }{\i\f6\fs20 rootname\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command combines the object files created by partial assemblies or compiles into a single object file.  For example, if an assembly and subsequent partial assemblies have produced the object files FILE.ROOT, FILE.A, FILE.B, and FILE.C, then the CRUNCH command combines FILE.A, FILE.B, and FILE.C into a new file called FILE.A, deleting the old object files in the process.  The new FILE.A contains only the latest version of each segment in the program.  New segments added during partial assemblies are placed at the end of the new FILE.A.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab Suppresses the copyright and progress information normally printed by the CRUNCH utility.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 rootname}{\f4\fs20 \tab The full path name or partial path name, including the file name but minus any file name extensions, of the object files you wish to compress.  For example, if your object files are named FILE.ROOT, FILE.A, and FILE.B in subdirectory :HARDISK:MYFILES:, you should then use :HARDISK:MYFILES:FILE for }{\i\f4\fs20 rootname.}{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 DELETE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DELETE\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DELETE command\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 DELETE [-C] [-P] [-W] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command deletes the file you specify.  You can delete more than one file with a single command by separating multiple file names with spaces.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -C\tab If you delete the entire contents of a directory by specifying = for the path name, or if you try to delete a directory, the DELETE command asks for confirmation before doing the delete.  If you use the -C flag, the delete command does not ask for confirmation before doing the delete.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab When you delete files using wildcards, or when you delete a directory that contains other files, the delete command lists the files as they are deleted.  To suppress this progress information, use the -P flag.\par \par -W\tab When you try to delete a file that does not exist, the DELETE command prints a warning message, but does not flag an error by returning a non-zero status code.  If you use the -W flag, the warning message will not be printed.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file to be deleted.  Wildcard characters may be used in the file name.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par If the target file of the DELETE command is a directory, the directory and all of its contents, including any included directories and their contents, are deleted.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DEREZ}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DEREZ\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DEREZ command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resources}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 extended files\:see resources}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx900\adjustright {\f6\fs20 DEREZ\tab [-D[EFINE] }{\i\f6\fs20 macro}{\f6\fs20 [=}{\i\f6\fs20 data}{\f6\fs20 ]] [-E[SCAPE]] [-I }{\i\f6\fs20 pathname}{\f6\fs20 ]\par \tab [-M[AXTRINGSIZE] }{\i\f6\fs20 n}{\f6\fs20 ] [-O }{\i\f6\fs20 filename}{\f6\fs20 ]\par \tab [-ONLY }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]] [-P] [-RD]\par \tab [-S[KIP] }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]] [-U[NDEF] }{\i\f6\fs20 macro}{\f6\fs20 ]\par \tab }{\i\f6\fs20 resourceFile}{\f6\fs20  [}{\i\f6\fs20 resourceDescriptionFile}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command reads the resource fork of an extended file, writing the resources in a text form.  This output is detailed enough that is is possible to edit the output, then recompile it with the Rez compiler to create a new, modified resource fork. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f6\fs20 -D[EFINE] }{\i\f6\fs20 macro}{\f6\fs20 [=}{\i\f6\fs20 data}{\f6\fs20 ]}{\f4\fs20    Defines the macro }{\i\f4\fs20 macro}{\f4\fs20  with the value }{\i\f4\fs20 data}{\f4\fs20 .  This is completely equivalent to placing the statement\par \par \tab \tab \tab #define }{\i\f4\fs20 macro data}{\f4\fs20 \par \par \tab at the start of the first resource description file.\par \tab \tab If the optional data field is left off, the macro is defined with a null value.\par \tab \tab More than one -d option can be used on the command line.\par \par }{\f6\fs20 -E[SCAPE]}{\f4\fs20 \tab Characters outside of the range of the printing ASCII characters are normally printed as escape sequences, like \\0xC1.  If the -e option is used, these characters are sent to standard out unchanged.  Not all output devices have a mechanism defined to print these characters, so using this option may give strange or unusable results.\par \par }{\f6\fs20 -I }{\i\f6\fs20 pathname}{\f4\fs20 \tab Lets you specify one or more path names to search for #include files.  This option can be used more than once.  If the option is used more than once, the paths are searched in the order listed.\par \par }{\f6\fs20 -M[AXTRINGSIZE] }{\i\f6\fs20 n}{\f4\fs20    This setting controls the width of the output.  It must be in the range 2 to 120.\par \par }{\f6\fs20 -O }{\i\f6\fs20 filename}{\f4\fs20    This option provides another way of redirectable the output.  It should not be used if command line output redirection is also used.  With the -O option, the file is created with a file type of SRC and a language type of Rez.\par \par }{\f6\fs20 -ONLY }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]}{\f4\fs20    Lists only resources with a resource type of }{\i\f4\fs20 typeexpr}{\f4\fs20 , which should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is listed.  To list a range of resources, separate the starting and ending resource ID with a colon.\par \par }{\f6\fs20 -P}{\f4\fs20 \tab When this option is used, the copyright, version number, and progress information is written to standard out.\par \par }{\f6\fs20 -RD}{\f4\fs20 \tab Suppresses warning messages if a resource type is redeclared.\par \par }{\f6\fs20 -S[KIP] }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]}{\f4\fs20    Lists all but the resources with a resource type of }{\i\f4\fs20 typeexpr}{\f4\fs20 , which should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is skipped.  To skip a range of resources, separate the starting and ending resource ID with a colon.\par \par }{\f6\fs20 -U[NDEF] }{\i\f6\fs20 macro}{\f4\fs20    This option can be used to undefine a macro variable.\par \par }{\i\f6\fs20 resourceFile}{\f4\fs20    This is the name of the extended file to process.  The resource fork from this file is converted to text form and written to standard out.\par \par }{\i\f6\fs20 resourceDescriptionFile}{\f4\fs20    This file contains a series of declarations in the same format as used by the Rez compiler.  More than one resource description file can be used.  Any include (not #include), read, data, and resource statements are skipped, and the remaining declarations are used as format specifiers, controlling how DeRez writes information about any particular resource type.\par \tab \tab If no resource description file is given, or if DeRez encounters a resource type for which none of the resource description files provide a format, DeRez writes the resource in a hexadecimal format.\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The output from DeRez consists of resource and data statements that are acceptable to the Rez resource compiler.  If the output from DeRez is used immediately as the input to the resource compiler, the resulting resource fork is identical to the one processed by DeRez.  In some cases, the reverse is not true; in particular, DeRez may create a data statement for some input resources.\par Numeric values, such as the argument for the -only option, can be listed as a decimal value, a hexadecimal value with a leading $, as in the ORCA assembler, or a hexadecimal value with a leading 0x, as used by the C language.\par For all resource description files specified on the source line, the following search rules are applied:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab DeRez tries to open the file as is, by appending the file name given to the current default prefix.\par 2.\tab If rule 1 fails and the file name contains no colons and does not start with a colon (in other words, if the name is truly a file name, and not a path name or partial path name), DeRez appends the file name to each of the path names specified by -i options and tries to open the file.\par 3.\tab DeRez looks for the file in the folder 13:RInclude.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par For more information about resource compiler source files and type declarations, see Chapter 15.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 DEVICES}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DEVICES\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DEVICES command\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 DEVICES [-B] [-D] [-F] [-I] [-L] [-M] [-N] [-S] [-T] [-U] [-V]}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The DEVICES command lists all of the devices recognized by GS/OS in a tabular form, showing the device type, device name, and volume name.  Various flags can be used to show other information about the devices in an expanded form.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -B\tab Display the block size for block devices.\par \par -D\tab Display the version number of the software driver for the device.\par \par -F\tab Show the number of free blocks remaining on a block device.\par \par -I\tab Display the file system format used by the device.\par \par -L\tab Show all available information about each device.  This would be the same as typing all of the other flags.\par \par -M\tab Show the total number of blocks on the device.\par \par -N\tab Display the device number.\par \par -S\tab Display the slot number of the device.\par \par -T\tab Show the type of the device.\par \par -U\tab Show the unit number for the device.\par \par -V\tab Show the volume name for the device.\par \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The name of the device is always displayed, but when you use any flag except -L, the device type and volume name are not shown unless you specifically use the -T and -V flags.\par See the GS/OS Technical Reference Manual for a detailed description of what devices are, and what the various fields mean in relation to any particular device.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DISABLE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DISABLE\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DISABLE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file access flags}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 locking files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 DISABLE  [-P] D | N | B | W | R | I }{\i\f6\fs20 pathname\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command disables one or more of the access attributes of a GS/OS file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par D\tab \ldblquote Delete\rdblquote  privileges.  If you disable this attribute, the file cannot be deleted.\par \par N\tab \ldblquote Rename\rdblquote  privileges.  If you disable this attribute, the file cannot be renamed.\par \par B\tab \ldblquote Backup required\rdblquote  flag.  If you disable this attribute, the file will not be flagged as having been changed since the last time it was backed up.\par \par W\tab \ldblquote Write\rdblquote  privileges.  If you disable this attribute, the file cannot be written to.\par \par R\tab \ldblquote Read\rdblquote  privileges.  If you disable this attribute, the file cannot be read.\par \par I\tab \ldblquote Visible\rdblquote  flag.  If you disable this attribute, the file will be displayed by the CATALOG command without using the -A flag.  In other words, invisible files become visible.\par \par }{\i\f4\fs20 pathname}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file whose attributes you wish to disable.  You can use wildcard characters in the file name.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can disable more than one attribute at one time by typing the operands with no intervening spaces.  For example, to \ldblquote lock\rdblquote  the file TEST so that it cannot be written to, deleted, or renamed, use the command\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 DISABLE DNW TEST\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENABLE command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Use the ENABLE command to reenable attributes you disabled with the DISABLE command.\par When you use the CATALOG command to list a directory, the attributes that are currently enabled are listed in the access field for each file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 DISKCHECK}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DISKCHECK\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DISKCHECK command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 DISKCHECK }{\i\f6\fs20 volume}{\f6\fs20 |}{\i\f6\fs20 device}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command scans the disk for active files and lists all block allocations, including both data and resource forks of any extended file types.  It will then notify you of block conflicts, where two or more files are claiming the same block(s), and provide an opportunity to list the blocks and files involved.  Finally, it will verify the integrity of the disk's bitmap.  Bitmap errors will be reported and you can choose to repair the bitmap.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f6\fs20 volume}{\f6\fs20 |}{\i\f6\fs20 device}{\f4\fs20    The GS/OS volume name or device name of the disk to check.  The volume name can be specified with or without a beginning colon or slash; for example,\par \par }{\f6\fs18 \tab \tab DiskCheck :HardDisk\par \tab \tab DiskCheck HardDisk\par }{\f4\fs20 \par \tab \tab A device name requires a period before the name; for example, .SCSI1.  Volume numbers can also be used, as in .D2.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par DISKCHECK will only verify a ProDOS volume.  It will not work with an HFS volume.\par In normal display mode, data scrolls continuously on the screen.  While DISKCHECK is running, press the space bar to place DISKCHECK in single step mode.  In this mode, block allocations are displayed one at a time, each time the space bar is pressed.  Press return to return to normal display mode.\par DISKCHECK will check volumes with up to 65535 blocks of 512 bytes (32M).\par DISKCHECK makes the following assumptions:\par \par }\pard \qj\fi-360\li720\keep\widctlpar\adjustright {\f4\fs20 \bullet \tab Blocks zero and one are always used and contain boot code.\par \bullet \tab Enough disk integrity exists to make a GetFileInfo call on the volume.\par \bullet \tab Block two is the beginning of the volume directory and contains valid information regarding the number of blocks, bitmap locations, entries per block, and entry size.\par \bullet \tab All unused bytes at the end of the last bitmap block are truly unused; that is, they will be set to zero whenever the bitmap is repaired.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par DISKCHECK may not catch invalid volume header information as an error.  Likewise, DISKCHECK does not check all details of the directory structures.  Therefore, if large quantities of errors are displayed, it is likely that the volume header information or directory information is at fault.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DUMPOBJ}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DUMPOBJ\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object module format}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 DUMPOBJ [}{\i\f6\fs20 option}{\f6\fs20  ...] }{\i\f6\fs20 pathname}{\f6\fs20  [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20  }{\i\f6\fs20 seg2}{\f6\fs20  ...)]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command writes the contents of an object file to standard output (normally the screen).  The default format for the listing is object module format (OMF) operation codes and records.  You can also list the file as a 65816 machine-language disassembly or as hexadecimal codes.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 option}{\f4\fs20 \tab You can specify as many of the following options as you wish by separating the options with spaces.  If you select two mutually exclusive options (such as +X and +D), the last one listed is used.  If an option can\rquote t function due to the other options set, it is ignored; for example, if you select -H to suppress segment headers, and also specify -S to select short headers, then the -S is ignored.\par }\pard \qj\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-533\li1973\keep\widctlpar\tx1980\adjustright {\f4\fs20 -A\tab Suppress all information but the operation codes and operands for each line of an OMF-format or 65816-format disassembly.  The default is to include the displacement into the file and the program counter for each line at the beginning of the line.\par \par +D\tab Write the file dump as a 65816 disassembly rather than OMF records.\par \par -F\tab Suppress the checking of the file type.  You can use this option to dump the contents of any file, whether it is in OMF or not.  See the following discussion for more information on examining non-OMF files.\par }\pard \qj\fi-533\li1973\widctlpar\tx1980\adjustright {\f4\fs20 \par -H\tab If the output format is hexadecimal codes (+X option), then this option causes the headers to also be listed as hexadecimal codes.  For all other output formats, the headers are not printed at all.\par }{\pard\plain \qj\fi-533\li1973\widctlpar\tx1980\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disassembly}}}{\f4\fs20 \par \par -I\tab For 65816 disassembly listings, assume that the CPU is set to short index (X and Y) registers at the start of the disassembly, rather than starting in full native mode.  This option has no effect on OMF-format and hexadecimal listings.\par }\pard \qj\fi-533\li1973\keep\widctlpar\tx1980\adjustright {\f4\fs20 \par -L\tab Suppress the listing of the body of long constant operands.\par \par -M\tab For 65816 disassembly listings, assume that the CPU is set to short memory (accumulator) registers at the start of the disassembly, rather than starting in full native mode.  This option has no effect on OMF-format and hexadecimal listings.\par \par -O\tab Don\rquote t show the contents of the segments; list the headers only.\par \par -S\tab Write only the name of the segment and the segment type for the segment headers.  The default is to include all of the information in the segment header.\par }{\pard\plain \qj\fi-533\li1973\keep\widctlpar\tx1980\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f4\fs20 \par +X\tab Write the file dump in hexadecimal codes rather than as OMF records.  Segment headers are always printed in ASCII text unless you also select the -H option.\par \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file you wish to dump.  The file may be a library file, the output of an assembler or compiler, a load file, or any other file that conforms to ORCA object module format.  If you use the -F option, you can specify a file of any file type.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par seg1}{\f4\fs20  }{\i\f4\fs20 seg2}{\f4\fs20  ...  \tab The names of specific segments you wish to dump.  If you specify the NAMES parameter, only the segments you specify are processed.  To get a list of segments in the file, use DUMPOBJ with the -O and -S options.  Segment-name searches are case sensitive (that is, }{\i\f4\fs20 seg1, seg2, ...}{\f4\fs20  must match the segment names exactly, including the case of the characters).\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the file consists of more than one segment, each segment is listed separately.  Each segment listing begins with the segment header, followed by the segment body.  A typical segment header is:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \li446\ri3240\keepn\widctlpar\tx2070\tx2340\adjustright {\f6\fs18 Block count \tab :\tab $00000001           1\par Reserved space\tab :\tab $00000000           0\par Length        \tab :\tab $0000001B          27\par Kind          \tab :\tab $00       static code\par Label length  \tab :\tab $00                 0\par Number length \tab :\tab $04                 4\par Version       \tab :\tab $01                 1\par Bank size     \tab :\tab $00010000       65536\par }\pard \li446\ri3240\keep\keepn\widctlpar\tx2070\tx2340\adjustright {\f6\fs18 Org           \tab :\tab $00000000           0\par Alignment     \tab :\tab $00000000           0\par Number sex    \tab :\tab $00                 0\par Language card \tab :\tab $00                 0\par Segment number\tab :\tab $0000               0\par Segment disp  \tab :\tab $00000000           0\par Disp to names \tab :\tab $002C              44\par Disp to body  \tab :\tab $003D              61\par Load name     \tab :           \par Segment name  \tab :\tab SECOND\par }\pard \keep\keepn\widctlpar\adjustright {\b\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Figure 12.9.  Sample DUMPOBJ Segment Header\par }\pard \keep\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object module format}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The format in which the body of the segment is shown depends on the options used.  The default is to show the contents of each record in the segment in object module format.  A typical OMF segment dump is shown in Figure 12.10.  The first column shows the actual displacement into the segment, in bytes, of that record.  The segment header takes up 61 bytes (that is, it ends at byte $3C), so the first record in the segment starts at $3D.  The second column shows the setting of the program counter for that segment; that is, the cumulative number of bytes that the linker will create in the load file.  The third and fourth columns show the record type and operation code of the OMF record shown on that line.  The last column shows the contents of the record.  Expressions are shown in postfix form; that is, the values being acted on are written first, followed by the operator.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The OMF dump is provided to aid in the debugging of compilers; if you are not highly familiar with the OMF, the default DUMPOBJ listing will not be of much use to you.  However, you can use the options provided to examine the contents of an object file in machine-language disassembly format or as hexadecimal codes.\par }\pard \ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \li446\keepn\widctlpar\tx1980\tx2250\tx3060\tx3870\tx4140\adjustright {\f6\fs18 00003D 000000\tab |\tab USING \tab ($E4)\tab |\tab DATA\par 000043 000000\tab |\tab CONST \tab ($03)\tab |\tab 4BABAE\par 000047 000003\tab |\tab EXPR  \tab ($EB)\tab |\tab 02 : L:MSG2\par 000050 000005\tab |\tab CONST \tab ($04)\tab |\tab A00000B9\par 000055 000009\tab |\tab BEXPR \tab ($ED)\tab |\tab 02 : MSG2\par 00005E 00000B\tab |\tab CONST \tab ($04)\tab |\tab DA5A4820\par 000063 00000F\tab |\tab BEXPR \tab ($ED)\tab |\tab 02 : ~COUT\par 00006D 000011\tab |\tab CONST \tab ($0A)\tab |\tab 7AFAC8CAD0F1A9000060\par }\pard \li450\keep\keepn\widctlpar\tx1980\tx2250\tx3060\tx3870\tx4140\adjustright {\f6\fs18 000078 00001B\tab |\tab END   \tab ($00)\par }\pard \keep\keepn\widctlpar\adjustright {\b\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Figure 12.10.  DUMPOBJ OMF-Format Segment Body\par }\pard \keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you select the +D option, the segment body is displayed in 65816 disassembly format.  A typical disassembly segment dump is shown in the next table.  The first column shows the actual displacement into the segment, in bytes, of the first byte in the line.  The second column shows the setting of the program counter for that segment; that is, the cumulative number of bytes that the linker will create in the load file.  The third column shows the disassembly.  The disassembly starts with LONGA and LONGI directives indicating whether the disassembler is assuming long or short operands for the accumulator and index registers.  ORCA assembly language is described in chapters 17, 18, and 19.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 native mode}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 emulation mode}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The disassembler tries to keep track of REP and SEP instructions, which are used to set bits in the status register.  The status register settings determine whether 16-bit (native mode) or 8-bit (emulation mode) index-register (X and Y) and accumulator-register transfers are used by the CPU.  Any time the disassembler finds an REP or SEP instruction, it inserts the appropriate LONGA and LONGI directives in the disassembly to indicate the state of the registers.  (The LONGA and LONGI directives tell the ORCA Assembler whether to use long or short operands for transfer instructions.)  LONGA and LONGI directives are also placed at the beginning of every segment in the disassembly to indicate the state of the registers on entering the segment.  If an expression involving a label was used as the operand of the REP or SEP instruction, then the disassembly might lose track of the setting of the status register.\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi446\keepn\widctlpar\adjustright {\f6\fs18 00003D 000000 |           LONGA ON\par 00003D 000000 |           LONGI ON\par 00003D 000000 | SECOND    START\par 00003D 000000 |           USING DATA\par 000043 000000 |           PHK   \par }\pard \fi450\keepn\widctlpar\adjustright {\f6\fs18 000045 000001 |           PLB   \par 000046 000002 |           LDX   L:MSG2\par 00004B 000005 |           LDY   #$0000\par 00004F 000008 |           LDA   MSG2,Y\par 000054 00000B |           PHX   \par 000056 00000C |           PHY   \par 000057 00000D |           PHA   \par 000058 00000E |           JSR   ~COUT\par }\pard \fi450\keep\keepn\widctlpar\adjustright {\f6\fs18 00005D 000011 |           PLY   \par 00005F 000012 |           PLX   \par 000060 000013 |           INY   \par 000061 000014 |           DEX   \par 000062 000015 |           BNE   *+$F1\par 000064 000017 |           LDA   #$0000\par 000067 00001A |           RTS   \par 000068 00001B |           END\par }\pard \keep\keepn\widctlpar\adjustright {\b\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Figure 12.11.  DUMPOBJ Disassembly-Format Segment Body\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you select the +X option, the segment body is displayed in hexadecimal format.  A typical hexadecimal segment dump is shown in Figure 12.12.  The first column shows the actual displacement into the segment, in bytes, of the first byte in the line.  The next four columns show the next 16 bytes in the file.  The last column shows the ASCII equivalents of those bytes.  The hexadecimal dump starts with the first byte after the segment header (unless you  specify  the -H option, in which case the segment header is included in the hexadecimal dump), and ends at the last byte before the next segment header.  All segments in object files start on block (that is, 512-byte) boundaries, so the bytes from the END record to the end of the block are meaningless (in Figure 12.12 they contain repetitions of the data in the segment).\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi446\keepn\widctlpar\adjustright {\f6\fs18 00003D  |  E4044441 5441034B ABAEEB02 84044D53  |  d DATA K+.k   MS\par 00004D  |  47320004 A00000B9 ED028304 4D534732  |  G2     9m   MSG2\par 00005D  |  0004DA5A 4820ED02 83057E43 4F555400  |    ZZH m   ~COUT \par 00006D  |  0A7AFAC8 CAD0F1A9 00006000 434F4E44  |   zzHJPq)  ` COND\par 00007D  |  E4044441 5441034B ABAEEB02 84044D53  |  d DATA K+.k   MS\par 00008D  |  47320004 A00000B9 ED028304 4D534732  |  G2     9m   MSG2\par 00009D  |  0004DA5A 4820ED02 83057E43 4F555400  |    ZZH m   ~COUT \par 0000AD  |  0A7AFAC8 CAD0F1A9 00006000 434F4E44  |   zzHJPq)  ` COND\par 0000BD  |  E4044441 5441034B ABAEEB02 84044D53  |  d DATA K+.k   MS\par 0000CD  |  47320004 A00000B9 ED028304 4D534732  |  G2     9m   MSG2\par 0000DD  |  0004DA5A 4820ED02 83057E43 4F555400  |    ZZH m   ~COUT \par 0000ED  |  0A7AFAC8 CAD0F1A9 00006000 434F4E44  |   zzHJPq)  ` COND\par 0000FD  |  E4044441 5441034B ABAEEB02 84044D53  |  d DATA K+.k   MS\par 00010D  |  47320004 A00000B9 ED028304 4D534732  |  G2     9m   MSG2\par 00011D  |  0004DA5A 4820ED02 83057E43 4F555400  |    ZZH m   ~COUT \par 00012D  |  0A7AFAC8 CAD0F1A9 00006000 434F4E44  |   zzHJPq)  ` COND\par 00013D  |  E4044441 5441034B ABAEEB02 84044D53  |  d DATA K+.k   MS\par }\pard \fi450\keep\keepn\widctlpar\adjustright {\f6\fs18 00014D  |  47320004 A00000B9 ED028304 4D534732  |  G2     9m   MSG2\par 00015D  |  0004DA5A 4820ED02 83057E43 4F555400  |    ZZH m   ~COUT \par 00016D  |  0A7AFAC8 CAD0F1A9 00006000 434F4E44  |   zzHJPq)  ` COND\par 00017D  |  E4044441 5441034B ABAEEB02 84044D53  |  d DATA K+.k   MS\par 00018D  |  47320004 A00000B9 ED028304 4D534732  |  G2     9m   MSG2\par 00019D  |  0004DA5A 4820ED02 83057E43 4F555400  |    ZZH m   ~COUT \par }\pard \qc\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Figure 12.12.  DUMPOBJ Hexadecimal Format Segment Body\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 DUMPOBJ can be used to dump the contents of any file, even if it is not in OMF.  To dump the contents of a non-OMF file, use the -H and -F options, together with either the +X or +D options.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Any other combination of options, or no options, will probably produce unusable results, since in that case DUMPOBJ attempts to scan the file for segments as if it were in OMF.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 DUMPOBJ is extremely useful for debugging compilers and assemblers, and is also useful whenever you want to see the contents of an OMF file.\par Some useful aliases you may want to create are:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 aliasing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disassembly}}}{\v\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 \par ALIAS DUMP    DUMPOBJ +X -F -H\par ALIAS DISASM  DUMPOBJ +D -F -H\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 ALIAS SCAN    DUMPOBJ -S -O\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 DUMP will dump any file in hexadecimal format.  DISASM will assume that the file to be disassembled is in fact 65816 assembly language, and will disassemble it.  SCAN will list the segments in an object file.}{\v\f4\fs20 .ib).DUMPBOJ utility;}{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 ECHO}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ECHO\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ECHO command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 ECHO [-N] [-T] }{\i\f6\fs20 string\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command lets you write messages to standard output.  All characters from the first non-blank character to the end of the line are written to standard out.  You can use redirection to write the characters to error out or a disk file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -N\tab The -N flag suppresses the carriage return normally printed after the string, allowing other output to be written to the same line.  One popular use for this option is to write a prompt using the ECHO command, then use the INPUT command to read a value.  With the -N flag, the input cursor appears on the same line as the prompt.\par \par -T\tab By default, and tab characters in the string are converted to an appropriate number of spaces before the string is written.  If the -T flag is used, the tab characters are written as is.\par \par }{\i\f4\fs20 string}{\f4\fs20 \tab The characters to write.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 If you want to start your string with a space or a quote mark, enclose the string in quote marks.  Double the quote marks to imbed a quote in the string.  For example,\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs14 ECHO "   This string starts with 3 spaces and includes a "" character."\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EDIT}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EDIT\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CHANGE command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 EDIT }{\i\f6\fs20 pathname1 pathname2 ...\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command calls the ORCA editor and opens a file to edit.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname1}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file you wish to edit.  If the file named does not exist, a new file with that name is opened.  If you use a wildcard character in the file name, the first file matched is opened.  If more than one file name is given, up to ten files are opened at the same time.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA default language changes to match the language of the open file.  If you open a new file, that file is assigned the current default language.  Use the CHANGE command to change the language stamp of an existing file.  To change the ORCA default language before opening a new file, type the name of the language you wish to use, and press }{\outl\f4\fs18 RETURN}{\f4\fs20 .\par The editor is described in Chapter 13.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ELSE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ELSE\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ELSE clause of IF command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 ELSE\par \par }\pard \keep\widctlpar\adjustright {\f6\fs20 ELSE IF }{\i\f6\fs20 expression}{\f6\fs20  \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command is used as part of an IF command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ENABLE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ENABLE\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENABLE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file access flags}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DISABLE command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 unlocking files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 ENABLE  [-P] D |  N | B | W | R | I }{\i\f6\fs20 pathname\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command enables one or more of the access attributes of a GS/OS file, as described in the discussion of the DISABLE command.  You can enable more than one attribute at one time by typing the operands with no intervening spaces.  For example, to \ldblquote unlock\rdblquote  the file TEST so that it can be written to, deleted, or renamed, use the command\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx360\adjustright {\b\f6\fs18 ENABLE DNW TEST\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When a new file is created, all the access attributes are enabled.  Use the ENABLE command to reverse the effects of the DISABLE command.  The parameters are the same as those of the DISABLE command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ENTAB}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ENTAB\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENTAB utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tabs\:ENTAB utility}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 ENTAB [-L }{\i\f6\fs20 language}{\f6\fs20 ] [}{\i\f6\fs20 file}{\f6\fs20 ]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command scans a text stream, converting runs of tabs and space characters into the minimum number of tabs and space characters needed to present the same information on the display screen.  Tabs are not used to replace runs of spaces in quoted strings.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \par -L }{\i\f4\fs20 language}{\f4\fs20 \tab The ENTAB utility checks the language stamp of the input file and uses the appropriate tab line from the SYSTABS file to determine the location of tab stops.  This flag can be used to override the default language number, forcing the utility to use the tab line for some other language.  You can use either a language number or a language name as the parameter.\par \par }{\i\f4\fs20 file}{\f4\fs20 \tab File to process.\par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TYPE command}}}{\f4\fs20 There is no DETAB utility, but the TYPE command can be used to strip tab characters from a file, replacing the tab characters with an appropriate number of space characters.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 END}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 END\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IF command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOOP command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 END\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command terminates a FOR, IF, or LOOP command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \keep\keepn\widctlpar\adjustright {\b\f4 ERASE}{\pard\plain \keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ERASE\tcl3}}}{\b\f4  \par }{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ERASE command\bxe }}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 formatting disks\bxe }}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\v\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs20 ERASE [-C] }{\i\f6\fs20 device}{\f6\fs20  [}{\i\f6\fs20 name}{\f6\fs20 ]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command writes the initialization tracks used by GS/OS to a disk that has already been formatted as a GS/OS disk.  In effect, this erases all files on the disk.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -C\tab Normally, the system will ask for permission (check) before erasing a disk.  The -C flag disables that check.\par \par }{\i\f4\fs20 device}{\f4\fs20 \tab The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted already has a volume name, you can specify the volume name instead of a device name.\par \par }{\i\f4\fs20 name}{\f4\fs20 \tab The new volume name for the disk.  If you do not specify }{\i\f4\fs20 name,}{\f4\fs20  then the name :BLANK is used.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA recognizes the device type of the disk drive specified by }{\i\f4\fs20 device}{\f4\fs20 , and uses the appropriate format.  ERASE works for all disk formats supported by GS/OS.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 ERASE destroys any files on the disk being formatted.  The effect of the ERASE command is very similar to the effect of the INIT command, but there are some differences.  The INIT command will work on any disk, while the ERASE command can only be used on a disk that has already been initialized.  The ERASE command works much faster than the INIT command, since the ERASE command does not need to take the time to create each block on the disk.  Finally, when the INIT command is used, each block is filled with zeros.  The ERASE command does not write zeros to the existing blocks, so any old information on the disk is not truly destroyed; instead, it is hidden very, very well, just as if all of the files and folders on the disk had been deleted.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EXEC}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EXEC\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC language}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language names}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 EXEC\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This language command sets the shell default language to the EXEC command language.  When you type the name of a file that has the EXEC language stamp, the shell executes each line of the file as a shell command.\par }\pard \qj\widctlpar\tx2880\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 EXECUTE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EXECUTE\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXECUTE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 aliasing}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands\:parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 EXECUTE }{\i\f6\fs20 pathname}{\f6\fs20  [}{\i\f6\fs20 paramlist}{\f6\fs20 ]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command executes an EXEC file.  If this command is executed from the ORCA Shell command line, then the variables and aliases defined in the EXEC file are treated as if they were defined on the command line.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname}{\f4\fs20 \tab The full or partial path name of an EXEC file.  This file name cannot include wildcard characters.\par \par }{\i\f4\fs20 paramlist}{\f4\fs20 \tab The list of parameters being sent to the EXEC file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 EXISTS}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EXISTS\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXISTS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 EXISTS }{\i\f6\fs20 pathname}{\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command checks to see if a file exists.  If the file exists, the \{Status\} shell variable is set to 1; if the file does not exist, the \{Status\} shell variable is set to 0.  Several disk related errors can occur, so be sure to check specifically for either a 0 or 1 value.  When using this command in an EXEC file, keep in mind that a non-zero value for the \{Status\} variable will cause an EXEC file to abort unless the \{Exit\} shell variable has been cleared with an UNSET EXIT command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname}{\f4\fs20 \tab The full or partial path name of a file.  More than one file can be checked at the same time by specifying multiple path names.  In this case, the result is zero only if each and every file exists.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 EXIT}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EXIT\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXIT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 EXIT [}{\i\f6\fs20 number}{\f6\fs20 ]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command terminates execution of an EXEC file.  If }{\i\f4\fs20 number}{\f4\fs20  is omitted, the \{Status\} variable will be set to 0, indicating a successful completion.  If }{\i\f4\fs20 number}{\f4\fs20  is coded, the \{Status\} variable will be set to the number.  This allows returning error numbers or condition codes to other EXEC files that may call the one this statement is included in.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 number}{\f4\fs20 \tab Exit error code.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 EXPORT}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EXPORT\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPORT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:scope}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 EXPORT [}{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20  ...]]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command makes the specified variable available to EXEC files called by the current EXEC file.  When used in the LOGIN file, the variable becomes available at the command level, and in all EXEC files executed from the command level.  More than one variable may be exported with a single command by separating the variable names with spaces.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 variable}{\f4\fs20 n\tab Names of the variables to export.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 EXPRESS}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EXPRESS\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPRESS command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 EXPRESS [-P] }{\i\f6\fs20 infile}{\f6\fs20  -O }{\i\f6\fs20 outfile}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The external command EXPRESS reformats an Apple IIGS load file so that it can be loaded by the ExpressLoad loader that comes with Apple's system disk, starting with version 5.0 of the system disk.  When loaded with ExpressLoad, the file will load much faster than it would load using the standard loader; however, files reformatted for use with ExpressLoad can still be loaded by the System Loader.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f6\fs20 -P\tab }{\f4\fs20 If you specify this option, EXPRESS displays progress information.  If you omit it, progress information is not displayed.\par \par }{\i\f6\fs20 infile}{\f6\fs20 \tab }{\f4\fs20 The full or partial path name of a load file.\par \par }{\f6\fs20 -O }{\i\f6\fs20 outfile}{\f6\fs20 \tab }{\f4\fs20 This is the full or partial path name of the file to write.  Unlike many commands, this output file is a required parameter.\par \par }\pard \qj\fi360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ExpressLoad}}}{\f4\fs20 Since the linker that comes with ORCA can automatically generate a file that is expressed, this utility is generally only used to reformat executable programs you obtain through other sources.\par EXPRESS only accepts version 2.0 OMF files as input.  You can check the version number of the OMF file using DUMPOBJ, and convert OMF 1.0 files to OMF 2.0 using COMPACT.\par ExpressLoad does not support multiple load files; therefore, you cannot use Express with any program that references segments in a run-time library.\par The following system loader calls are not supported by ExpressLoad:\par \par }\pard \qj\fi-360\li720\keep\widctlpar\adjustright {\f4\fs20 \bullet \tab GetLoadSegInfo ($0F)  The internal data structures of ExpressLoad are not the same as those of the System Loader.\par \bullet \tab LoadSegNum ($0B)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by the System Loader.  Use the LoadSegName function instead.\par \bullet \tab UnloadSegNum ($0C)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by the System Loader.  Use the UnloadSeg ($0E) function instead.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FILETYPE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FILETYPE\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FILETYPE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 auxiliary file type}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types\:auxtype\:see auxiliary file type}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 FILETYPE [-P] }{\i\f6\fs20 pathname filetype }{\f6\fs20 [}{\i\f6\fs20 auxtype}{\f6\fs20 ]}{\i\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command changes the GS/OS file type, and optionally the auxiliary file type, of a file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\f4\fs20 pathname}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file whose file type you wish to change.\par \par }{\i\f4\fs20 filetype}{\f4\fs20 \tab The GS/OS file type to which you want to change the file.  Use one of the following three formats for }{\i\f4\fs20 filetype}{\f4\fs20 :\par \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1980\adjustright {\f4\fs20 \tab \tab \bullet \tab A decimal number 0-255.\par \par \tab \tab \bullet \tab A hexadecimal number $00-$FF.\par \par \tab \tab \bullet \tab The three-letter abbreviation for the file type used in disk directories; for example, S16, OBJ, EXE.  A partial list of GS/OS file types is shown in Table 12.13.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \par }{\i\f4\fs20 auxtype}{\f4\fs20 \tab The GS/OS auxiliary file type to which you want to change the file.  Use one of the following two formats for }{\i\f4\fs20 auxtype}{\f4\fs20 :\par \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1980\adjustright {\f4\fs20 \tab \tab \bullet \tab A decimal number 0-65535.\par \par \tab \tab \bullet \tab A hexadecimal number $0000-$FFFF.\par \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright {\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENABLE command}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file access flags}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can change the file type of any file with the FILETYPE command; ORCA does not check to make sure that the format of the file is appropriate.  However, the GS/OS call used by the FILETYPE command may disable some of the access attributes of the file.  Use the CATALOG command to check the file type and access-attribute settings of the file; use the ENABLE command to reenable any attributes that are disabled by GS/OS.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright {\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepType\} shell variable}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{AuxType\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The linker can automatically set the file type and auxiliary file type of a program; see the descriptions of the \{KeepType\} and \{AuxType\} variables in Chapter 14 for details.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \li720\keepn\widctlpar\tx1620\tx2340\tx3780\adjustright {\f4\fs20\ul Decimal}{\f4\fs20 \tab }{\f4\fs20\ul Hex}{\f4\fs20 \tab }{\f4\fs20\ul Abbreviation}{\f4\fs20 \tab }{\f4\fs20\ul File Type\par }{\f4\fs20 \par 001\tab $01\tab BAD\tab Bad blocks file\par 002\tab $02\tab PCD\tab Pascal code file (SOS)\par 003\tab $03\tab PTX\tab Pascal text file (SOS)\par 004\tab $04\tab TXT\tab ASCII text file\par 005\tab $05\tab PDA\tab Pascal data file (SOS)\par 006\tab $06\tab BIN\tab ProDOS 8 binary load\par 007\tab $07\tab FNT\tab Font file (SOS)\par 008\tab $08\tab FOT\tab Graphics screen file\par 009\tab $09\tab BA3\tab Business BASIC program file (SOS)\par 010\tab $0A\tab DA3\tab Business BASIC data file (SOS)\par 011\tab $0B\tab WPF\tab Word processor file (SOS)\par 012\tab $0C\tab SOS\tab SOS system file (SOS)\par 015\tab $0F\tab DIR\tab Directory\par 016\tab $10\tab RPD\tab RPS data file (SOS)\par 017\tab $11\tab RPI\tab RPS index file (SOS)\par 176\tab $B0\tab SRC\tab Source\par 177\tab $B1\tab OBJ\tab Object\par 178\tab $B2\tab LIB\tab Library\par 179\tab $B3\tab S16\tab GS/OS system file\par 180\tab $B4\tab RTL\tab Run-time library\par 181\tab $B5\tab EXE\tab Shell load file\par 182\tab $B6\tab STR\tab  load file\par 184\tab $B8\tab NDA\tab New desk accessory\par 185\tab $B9\tab CDA\tab Classic desk accessory\par 186\tab $BA\tab TOL\tab Tool file\par 200\tab $C8\tab FNT\tab Font file\par 226\tab $E2\tab DTS\tab Defile RAM tool patch\par 240\tab $F0\tab CMD\tab ProDOS CI added command file\par 249\tab $F9\tab P16\tab ProDOS 16 file\par 252\tab $FC\tab BAS\tab BASIC file\par 253\tab $FD\tab VAR\tab EDASM file\par 254\tab $FE\tab REL\tab REL file\par 255\tab $FF\tab SYS\tab ProDOS 8 system load file\par }\pard \fi720\li360\keepn\widctlpar\tx1350\tx2070\tx3420\adjustright {\f4\fs20 \par }\pard \qc\li360\widctlpar\tx1350\tx2070\tx3420\adjustright {\f4\fs20 Table 12.13.  A Partial List of GS/OS File Types\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4 FOR}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FOR\tcl3}}}{\b\i\f4  }{\b\f4 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FOR command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IN clause of FOR command}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files\:parameter passing}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs20 FOR}{\b\f6\fs20  }{\i\f6\fs20 variable}{\b\f6\fs20  }{\f6\fs20 [IN}{\b\f6\fs20  }{\i\f6\fs20 value1}{\b\f6\fs20  }{\i\f6\fs20 value2}{\f6\fs20  ...}{\b\f6\fs20  }{\f6\fs20 ]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command, together with the END statement, creates a loop that is executed once for each parameter value listed.  Each of the parameters is separated from the others by at least on space.  To include spaces in a parameter, enclose it in quote marks.  For example, the EXEC file\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 FOR I IN GORP STUFF "FOO BAR"\par    ECHO \{I\}\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ECHO command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\v\f4\fs20 \par }{\f4\fs20 \par would print\par \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 GORP\par STUFF\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 FOO BAR\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par to the screen.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the IN keyword and the strings that follow are omitted, the FOR command loops over the command line inputs, skipping the command itself.  For example, the EXEC file named EXECFILE\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 FOR I\par    ECHO \{I\}\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would give the same results as the previous example if you executed it with the command\par \par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 EXECFILE GORP STUFF "FOO BAR"\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HELP}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HELP\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HELP command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command table}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Utilities prefix}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 HELP [}{\i\f6\fs20 commandname1}{\f6\fs20  [}{\i\f6\fs20 commandname2}{\f6\fs20  ...]]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command provides on-line help for all the commands in the command table provided with the ORCA development environment.  If you omit }{\i\f4\fs20 commandname}{\f4\fs20 , then a list of all the commands in the command table are listed on the screen.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1440\li1800\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 commandname}{\f4\fs20  \tab The name of the ORCA shell command about which you want information.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you specify }{\i\f4\fs20 commandname}{\f4\fs20 , the shell looks for a text file with the specified name in the HELP subdirectory in the UTILITIES prefix (prefix 17).  If it finds such a file, the shell prints the contents of the file on the screen.  Help files contain information about the purpose and use of commands, and show the command syntax in the same format as used in this manual.\par If you add commands to the command table, or change the name of a command, you can add, copy, or rename a file in the HELP subdirectory to provide information about the new command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HISTORY}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HISTORY\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HISTORY commands\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command list}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 HISTORY\par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 This command lists the last twenty commands entered in the command line editor.  Commands executed in EXEC files are not listed.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HOME}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HOME\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HOME commands\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 HOME\par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 This command sends a $0C character to the standard output device.  The output can be redirected to files, printers, or error output using standard output redirection techniques.\par When the $0C character is sent to the console output device, the screen is cleared and the cursor is moved to the top left corner of the screen.  When the $0C character is sent to most printers, the printer will skip to the top of the next page.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 IF}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 IF\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IF command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ELSE IF clause of IF command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ELSE clause of IF command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 IF }{\i\f6\fs20 expression}{\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command, together with the ELSE IF, ELSE, and END statements provides conditional branching in EXEC files.  The expression is evaluated.  If the resulting string is the character 0, the command interpreter skips to the next ELSE IF, ELSE or END statement, and does not execute the commands in between.  If the string is anything but the character 0, the statements after the IF statement are executed.  In that case, if an ELSE or ELSE IF is encountered, the command skips to the END statement associated with the IF.\par The ELSE statement is used to provide an alternate set of statements that will be executed if the main body of the IF is skipped due to an expression that evaluates to 0.  It must appear after all ELSE IF statements.\par ELSE IF is used to test a series of possibilities.  Each ELSE IF clause is followed by an expression.  If the expression evaluates to 0, the statements following the ELSE IF are skipped; if the expression evaluates to anything but 0, the statements after the ELSE IF are executed.\par As an example, the following code will translate an Arabic digit (contained in the variable \{I\}) into a Roman numeral.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 \par IF \{I\} == 1\par    ECHO I\par ELSE IF \{I\} == 2\par    ECHO II\par ELSE IF \{I\} == 3\par    ECHO III\par ELSE IF \{I\} == 4\par    ECHO IV\par ELSE IF \{I\} == 5\par    ECHO V\par ELSE\par    ECHO The number is too large for this routine.\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 END\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \keep\keepn\widctlpar\adjustright {\b\f4 INIT}{\pard\plain \keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 INIT\tcl3}}}{\b\f4  \par }{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INIT command\bxe }}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 formatting disks\bxe }}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\v\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs20 INIT [-C] }{\i\f6\fs20 device}{\f6\fs20  [}{\i\f6\fs20 fst}{\f6\fs20 ] [}{\i\f6\fs20 name}{\f6\fs20 ]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command formats a disk as a GS/OS volume.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -C\tab Disable checking.  If the disk has been previously initialized, the system will ask for permission (check) before starting initialization.  The default is to check.\par \par }{\i\f4\fs20 device}{\f4\fs20 \tab The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted already has a volume name, you can specify the volume name instead of a device name.\par \par }{\i\f4\fs20 fst}{\f4\fs20 \tab }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file system translator}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FST}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS}}}{\f4\fs20 The file system translator number.  The default FST is 1 (ProDOS).\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 name}{\f4\fs20 \tab The new volume name for the disk.  If you do not specify }{\i\f4\fs20 name,}{\f4\fs20  then the name :BLANK is used.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA recognizes the device type of the disk drive specified by }{\i\f4\fs20 device}{\f4\fs20 , and uses the appropriate format.  INIT works for all disk formats supported by GS/OS.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file system translator}}}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FST}}}{\f4\fs20 GS/OS is capable of supporting a wide variety of physical disk formats and operating system file formats.  The term file system translator, or FST, has been adopted to refer to the various formats.  By default, when you initialize a disk, the INIT command uses the physical format and operating system format that has been in use by the ProDOS and GS/OS operating system since ProDOS was introduced for the Apple //e computer.  If you would like to use a different FST, you can specify the FST as a decimal number.  Apple has defined a wide variety of numbers for use as FSTs, although there is no reason to expect that all of them will someday be implemented in GS/OS; some of the FST numbers are shown in Table 12.14, and a more complete list can be found in }{\i\f4\fs20 Apple IIGS GS/OS Reference}{\f4\fs20 , Volume 1.  Not all of these FSTs have been implemented in GS/OS as this manual goes to press.  Even if an FST has been implemented, not all FSTs can be used on all formats of floppy disks.  If you aren't sure if an FST is available, give it a try \endash  if not, you will get an error message.\par INIT destroys any files on the disk being formatted.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright {\f4\fs20\ul FST Number}{\f4\fs20 \tab }{\f4\fs20\ul File System}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file system translator}}}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FST}}}{\f4\fs20 \par 1\tab ProDOS (Apple II, Apple IIGS)}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS}}}{\f4\fs20 \par \tab    and SOS (Apple ///)}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SOS}}}{\f4\fs20 \par 2\tab DOS 3.3}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DOS (Apple)}}}{\f4\fs20 \par 3\tab DOS 3.2\par 4\tab Apple II Pascal}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal}}}{\f4\fs20 \par 5\tab Macintosh MFS}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Macintosh}}}{\f4\fs20 \par 6\tab Macintosh HFS\par 7\tab Lisa}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Lisa}}}{\f4\fs20 \par 8\tab Apple CP/M}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CPM}}}{\f4\fs20 \par 10\tab MS/DOS}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MS/DOS}}}{\f4\fs20 \par 11\tab High Sierra}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 High Sierra}}}{\f4\fs20 \par 13\tab AppleShare}{\pard\plain \qj\li2160\keep\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AppleShare}}}{\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Table 12.14  FST Numbers\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \keep\keepn\widctlpar\adjustright {\b\f4 INPUT}{\pard\plain \keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 INPUT\tcl3}}}{\b\f4  \par }{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INPUT command\bxe }}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables}}}{\v\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs20 INPUT }{\i\f6\fs20 variable}{\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command reads a line from standard input, placing all of the characters typed, up to but not including the carriage return that marks the end of the line, in the shell variable }{\i\f4\fs20 variable}{\f4\fs20 .\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 variable}{\f4\fs20 \tab Shell variable in which to place the string read from standard in.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \keep\keepn\widctlpar\adjustright {\b\f4 LINK}{\pard\plain \keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LINK\tcl3}}}{\b\f4  \par }{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command\bxe }}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load files}}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load files}{\txe (See also executable files)}}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 link map}}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:linker}}}{\v\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \fi-620\li620\widctlpar\tx620\adjustright {\f6\fs20 LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile}{\f6\fs20  [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \par LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile1}{\f6\fs20  }{\i\f6\fs20 objectfile2}{\f6\fs20   ... [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ] \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This internal command calls the ORCA linker to link object files to create a load file.  You can use this command to link object files created by assemblers or compilers, and to cause the linker to search library files.  The linker is described in Chapter 14.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4\fs20 +B|-B\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bank relative programs}}}{\f4\fs20 The +B flag tells the linker to create a bank relative program.  Each load segment in a bank relative program must be aligned to a 64K bank boundary by the loader.  When the current version of the Apple IIGS loader loads a bank relative program, it also purges virtually all purgeable memory, which could slow down operations of programs like the ORCA shell, which allows several programs to stay in memory.  Bank relative programs take up less disk space than fully relocatable programs, and they load faster, since all two-byte relocation information can be resolved at link time, rather than creating relocation records for each relocatable address.\par \par +C|-C\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 compaction}}}{\f4\fs20 Executable files are normally compacted, which means some relocation information is packed into a compressed form.  Compacted files load faster and use less room on disk than uncompacted files.  To create an executable file that is not compacted, use the -C flag.\par \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 +L|-L\tab If you specify +L, the linker generates a listing (called a link map) of the segments in the object file, including the starting address, the length in bytes (hexadecimal) of each segment, and the segment type.  If you specify -L, the link map is not produced.\par \par +P|-P\tab The linker normally prints a series of dots as subroutines are processed on pass one and two, followed by the length of the program and the number of executable segments in the program.  The -P flag can be used to suppress this progress information.\par \par +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all global references in the object file (called a symbol table).  If you specify -S, the symbol table is not produced.\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4\fs20 +X|-X\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressed files}}}{\f4\fs20 Executable files are normally expressed, which means they have an added header and some internal fields in the code image are expanded.  Expressed files load from disk faster than files that are not expressed, but they require more disk space.  You can tell the linker not to express a file by using the -X flag.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \par }{\i\f4\fs20 objectfile}{\f4\fs20 \tab The full or partial path name, minus file name extension, of the object files to be linked.  All files to be linked must have the same file name (except for extensions), and must be in the same subdirectory.  For example, the program TEST might consist of object files named TEST.ROOT, TEST.A, and TEST.B, all located in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST for }{\i\f4\fs20 objectfile.\par }{\f4\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\f4\fs20 objectfile1 objectfile2,...  }{\f4\fs20 You can link several object files into one load file with a single LINK command.  Enclose in parentheses the full path names or partial path names, minus file name extensions, of all the object files to be included; separate the file names with spaces.  Either a .ROOT file or a .A file must be present.  For example, the program TEST might consist of object files named TEST1.ROOT, TEST1.A, TEST1.B, TEST2.A, and TEST2.B, all in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST1 for }{\i\f4\fs20 objectfile}{\f4\fs20  and :ORCA:MYPROG:TEST2 for }{\i\f4\fs20 objectfile1}{\f4\fs20 .\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\v\f4\fs20 \par }{\f4\fs20 \tab \tab You can also use this command to specify one or more library files (GS/OS file type $B2) to be searched.  Any library files specified are searched in the order listed.  Only the segments needed to resolve references that haven\rquote t already been resolved are extracted from the standard library files.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\v\f4\fs20 \par }{\f4\fs20 \par KEEP=}{\i\f4\fs20 outfile}{\f4\fs20   Use this parameter to specify the path name or partial path name of the executable load file.\par \tab \tab If you do not use the KEEP parameter, then the link is performed, but the load file is not saved.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{LinkName\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 If you do not include any parameters after the LINK command, you are prompted for an input file name, as ORCA prompts you for any required parameters.  However, since the output path name is not a required parameter, you are }{\i\f4\fs20 not}{\f4\fs20  prompted for it.  Consequently, the link is performed, but the load file is not saved.  To save the results of a link, you }{\i\f4\fs20 must}{\f4\fs20  include the KEEP parameter in the command line or create default names using the \{LinkName\} variable.\par The linker can automatically set the file type and auxiliary file type of the executable file it creates.  This is covered in detail in Chapter 14.\par }\pard \qj\ri360\keep\widctlpar\adjustright {\pard\plain \qj\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\pard\plain \qj\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command}}}{\pard\plain \qj\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To automatically link a program after assembling or compiling it, use one of the following commands instead of the LINK command:  ASML, ASMLG, CMPL, CMPLG.\par }\pard \qj\fi-360\li360\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LINKER}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LINKER\tcl3}}}{\b\f4 \par }{\f4\fs20 \par }{\f6\fs20 LINKER\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINKER command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker\:script files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 script files\:linker}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This language command sets the shell default language for linker script files.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 LOOP}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LOOP\tcl3}}}{\b\i\f4  }{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOOP command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BREAK command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 LOOP\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command together with the END statement defines a loop that repeats continuously until a BREAK command is encountered.  This statement is used primarily in EXEC files.  For example, if you have written a program called TIMER that returns a \{Status\} variable value of 1 when a particular time has been reached, and 65535 for an error, you could cause the program SECURITY.CHECK to be executed each time TIMER returned 1, and exit the EXEC file when TIMER returned 65535.  The EXEC file would be\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} shell variable}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IF command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ELSE IF clause of IF command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 \par UNSET EXIT\par LOOP\par    TIMER\par    SET STAT \{STATUS\}\par    IF \{STAT\} == 1\par       SECURITY.CHECK\par    ELSE IF \{STAT\} == 65535\par       BREAK\par    END\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 MACGEN}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MACGEN\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACGEN utility\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macro files}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 MACGEN [}{\f6\fs20\ul +C}{\f6\fs20 |-C] [-P] }{\i\f6\fs20 infile outfile macrofile1}{\f6\fs20   [}{\i\f6\fs20 macrofile2}{\f6\fs20  ...]\par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 This external command (utility) creates a custom macro file for an ORCA assembly-language program by searching one or more macro libraries for the macros referenced in the program and placing the referenced macros in a single file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 +C|-C\tab If you specify +C (the default value), then all excess spaces and all comments are removed from the macro file to save space.  If you use the GEN ON directive (to include expanded macros in your sourcefile listing), or the TRACE ON directive (to include conditional execution directives in your sourcefile listing), then use the -C parameter in MACGEN to improve the readability of the listing.\par \par -P\tab Suppresses the copyright and progress information normally printed by the MACGEN utility.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 infile}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the ORCA assembly-language source file.  MACGEN scans }{\i\f4\fs20 infile}{\f4\fs20   for references to macros.\par \par }{\i\f4\fs20 outfile}{\f4\fs20 \tab The full path name (including the file name) of the macro file to be created by MACGEN.\par \par }{\i\f4\fs20 macrofile1}{\f4\fs20  }{\i\f4\fs20 macrofile2}{\f4\fs20  ... The full path names or partial path names (including the file names) of the macro libraries to be searched for the macros referenced in }{\i\f4\fs20 infile}{\f4\fs20 .  At least one macro library must be specified.  Wildcard characters can be used in the file names.  If you specify more than one file name, separate the names with one or more spaces.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Since macro-library searches are time consuming, and any given program may use macros from several macro libraries, it is often more efficient to create a custom macro library containing only those macros needed by your program.  MACGEN generates such a library.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\v\f4\fs20 \par }{\f4\fs20 MACGEN scans }{\i\f4\fs20 infile}{\f4\fs20 , including all files referenced with COPY and APPEND directives, and builds a list of the macros referenced by the program.  If there are still unresolved references to macros, MACGEN scans }{\i\f4\fs20 macrofile2}{\f4\fs20 , and so on.  MACGEN can handle macros that call other macros.  If there are still unresolved references to macros after all the macro files you specified in the command line have been scanned, then MACGEN lists the missing macros and prompts you for the name of another macro library.  Press }{\outl\f4\fs18 RETURN}{\f4\fs20  without a file name to terminate the process before all macros have been found.  After all macros have been found (or you press }{\outl\f4\fs18 RETURN}{\f4\fs20  to end the process), }{\i\f4\fs20 outfile }{\f4\fs20 is created.\par The following example scans the file :ORCA:MYPROG for macro names, searches the macro libraries :LIB:MACROS and :LIB:MATHMACS for the referenced macros, and creates the macro file :ORCA:MYMACROS:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \fi-270\li720\widctlpar\adjustright {\b\f6\fs14 MACGEN :ORCA:MYPROG :ORCA:MYMACROS :LIB:MACROS :LIB:MATHMACS\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can specify a previous version of }{\i\f4\fs20 outfile}{\f4\fs20  as one of the macro libraries to be searched.  For example, suppose the program MYPROG already has a custom macro file called MYMACROS, but you want to add one or more macros from the file LIB.MACROS.  In this case, you could use the following command:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs14 MACGEN MYPROG MYMACROS MYMACROS LIB.MACROS\par }\pard \qj\widctlpar\tx360\adjustright {\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\v\f4\fs20 \par }\pard \qj\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\f4\fs20 Before you assemble your program, make sure that the source code contains the directive MCOPY }{\i\f4\fs20 outfile}{\f4\fs20  to cause the assembler to search }{\i\f4\fs20 outfile}{\f4\fs20  for the macros.\par }\pard \qj\fi-360\li360\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 MAKEBIN}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MAKEBIN\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MAKEBIN utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BIN files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:writing programs for}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:writing programs for}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 MAKEBIN [-P] }{\i\f6\fs20 loadfile }{\f6\fs20 [}{\i\f6\fs20 binfile}{\f6\fs20 ][ORG=}{\i\f6\fs20 val}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command converts a GS/OS load file to a ProDOS 8 binary load file (file type $06).\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab Suppresses the copyright information normally printed by the MAKEBIN utility.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 loadfile}{\f4\fs20 \tab The full or partial path name of a load file that contains a single static load segment.\par \par }{\i\f4\fs20 binfile}{\f4\fs20 \tab The full or partial path name of the binary file you want to create.  If you do not specify }{\i\f4\fs20 binfile}{\f4\fs20  , }{\i\f4\fs20 loadfile}{\f4\fs20  is overwritten with the binary file.\par \par ORG=}{\i\f4\fs20 val}{\f4\fs20  \tab The binary file is given a fixed start location at }{\i\f4\fs20 val}{\f4\fs20 , and all code is relocated for execution starting at the address }{\i\f4\fs20 val}{\f4\fs20 .  You can use a decimal number for }{\i\f4\fs20 val}{\f4\fs20 , or you can specify a hexadecimal number by preceding }{\i\f4\fs20 val}{\f4\fs20  with a dollar sign ($).  If you omit this parameter, }{\i\f4\fs20 loadfile}{\f4\fs20  is relocated to start at $2000.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 static segments}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AppleSoft}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BLOAD command}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BRUN command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The MAKEBIN utility does no checking to make sure that your program will run under ProDOS 8.  The load file must consist of a single static load segment.  It can be absolute or relocatable.  If you include an ORG directive in the source file, that ORG is respected; if there is a source-file ORG and you specify a conflicting ORG in the MAKEBIN command, however, an error occurs and the the binary file is not created.\par ORCA does not launch or run binary load files (file type $06) or ProDOS 8 system load files (file type $FF).  You can use the BLOAD and BRUN commands in AppleSoft BASIC to run these programs.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 MAKELIB}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MAKELIB\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MAKELIB utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx980\adjustright {\f6\fs20 MAKELIB\tab [-F] [-D] [-P] }{\i\f6\fs20 libfile  }{\f6\fs20 [ + | - | ^  }{\i\f6\fs20 objectfile1  \par \tab }{\f6\fs20 + | - | ^ }{\i\f6\fs20 objectfile2 }{\f6\fs20 ...]\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This external command creates a library file.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -F\tab If you specify -F, a list of the file names included in }{\i\f4\fs20 libfile}{\f4\fs20  is produced.  If you leave this option out, no file name list is produced.\par \par -D\tab If you specify -D, the dictionary of symbols in the library is listed.  Each symbol listed is a global symbol occurring in the library file.  If you leave this option out, no dictionary is produced.\par \par -P\tab Suppresses the copyright and progress information normally printed by the MAKELIB utility.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 libfile}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the library file to be created, read, or modified.\par \par +}{\i\f4\fs20 objectfilen}{\f4\fs20   The full path name or partial path name (including the file name) of an object file to be added to the library.  You can specify as many object files to add as you wish.  Separate object file names with spaces.\par \par -}{\i\f4\fs20 objectfilen}{\f4\fs20   The file name of a component file to be removed from the library.  This parameter is a file name only, not a path name.  You can specify as many component files to remove as you wish.  Separate file names with spaces.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par ^}{\i\f4\fs20 objectfilen}{\f4\fs20   The full path name or partial path name (including the file name) of a component file to be removed from the library  and written out as an object file.}{\b\f4\fs20   }{\f4\fs20 If you include a prefix in this path name, the object file is written to that prefix.  You can specify as many files to be written out as object files as you wish.  Separate file names with spaces.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An ORCA library file (GS/OS file type $B2) consists of one or more component files, each containing one or more segments.  Each library file contains a library-dictionary segment that the linker uses to find the segments it needs.\par MAKELIB creates a library file from any number of object files.  In addition to indicating where in the library file each segment is located, the library-dictionary segment indicates which object file each segment came from.  The MAKELIB utility can use that information to remove any component files you specify from a library file; it can even recreate the original object file by extracting the segments that made up that file and writing them out as an object file.  Use the (-F) and (-D) parameters to list the contents of an existing library file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object module format}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The MAKELIB command is for use only with ORCA object-module-format (OMF) library files used by the linker.  For information on the creation and use of libraries used by language compilers, consult the manuals that came with those compilers.\par MAKELIB accepts either OMF 1 or OMF 2 files as input, but always produces OMF 2 files as output.  MAKELIB literally converts OMF 1 files to OMF 2 files before placing them in the library.  Among other things, this gives you one way to convert an OMF 1 file to an OMF 2 file:  first create a library with the OMF 1 file, then extract the file from the library.  The extracted file will be in OMF 2 format.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To create an OMF library file using the ORCA Assembler, use the following procedure:\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\f4\fs20 1.\tab Write one or more source files in which each library subroutine is a separate segment.\par }{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\v\f4\fs20 \par }{\f4\fs20 \par 2.\tab Assemble the programs, specifying a unique name for each program with the KEEP parameter in the ASSEMBLE command.  Each multi\endash segment program is saved as two object files, one with the extension .ROOT, and one with the extension .A.\par \par 3.\tab Run the MAKELIB utility, specifying each object file to be included in the library file.  For example, if you assembled two files, creating the object files LIBOBJ1.ROOT, LIBOBJ1.A, LIBOBJ2.ROOT, LIBOBJ2.A, and your library file is named LIBFILE, then your command line should be as follows:\par \par }\pard \fi-450\li1440\widctlpar\adjustright {\b\f6\fs14 MAKELIB LIBFILE +LIBOBJ1.ROOT +LIBOBJ1.A +LIBOBJ2.ROOT +LIBOBJ2.A\par }\pard \qj\fi-360\li634\widctlpar\tx720\adjustright {\f4\fs18 \par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\f4\fs20 4.\tab Place the new library file in the LIBRARIES: subdirectory.  (You can accomplish this in step 3 by specifying 13:LIBFILE for the library file, or you can use the MOVE command after the file is created.)\par }\pard \qj\widctlpar\tx360\adjustright {\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MOVE command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 MOVE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MOVE\tcl3}}}{\b\f4  \par }{\f4\fs20 \par }\pard \keep\keepn\widctlpar\adjustright {\f6\fs20 MOVE [-C] [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20 ]\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f6\fs20 MOVE [-C] [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command moves a file from one directory to another; it can also be used to rename a file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -C\tab If you specify -C before the first file name, then MOVE does not prompt you if the target file name (}{\i\f4\fs20 filename2}{\f4\fs20 ) already exists.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }{\f4\fs20 -P\tab The MOVE command prints progress information showing what file is being moved as it works through a list of files.  The -P flag suppresses this progress information.\par \par }{\i\f4\fs20 pathname1}{\f4\fs20 \tab The full path name or partial path name (including the file name) of the file to be moved.  Wildcard characters may be used in this file name.\par \par }{\i\f4\fs20 pathname2}{\f4\fs20 \tab The full path name or partial path name of the directory you wish to move the file to.  If you specify a target file name, the file is renamed when it is moved.  Wildcard characters can }{\i\f4\fs20 not}{\f4\fs20  be used in this path name.  If the prefix of }{\i\f4\fs20 pathname2}{\f4\fs20  is the same as that of }{\i\f4\fs20 pathname1}{\f4\fs20 , then the file is renamed only.\par \par }{\i\f4\fs20 directory2}{\f4\fs20 \tab The path name or partial path name of the directory you wish to move the file to.  If you do not include a file name in the target path name, then the file is not renamed.  Wildcard characters can }{\i\f4\fs20 not}{\f4\fs20  be used in this path name.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If }{\i\f4\fs20 pathname1}{\f4\fs20  and the target directory are on the same volume, then ORCA calls GS/OS to move the directory entry (and rename the file, if a target file name is specified).  If the source and destination are on different volumes, then the file is copied; if the copy is successful, then the original file is deleted.  If the file specified in }{\i\f4\fs20 pathname2}{\f4\fs20  already exists and you complete the move operation, then the old file named }{\i\f4\fs20 pathname2 }{\f4\fs20 is deleted and replaced by the file that was moved.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NEWER}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NEWER\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NEWER command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 modification date}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 NEWER }{\i\f6\fs20 pathname1 pathname2...}{\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command checks to see if any file in a list of files has been modified since the first file was modified.  If the first file is newer than, or as new as, all of the other files, the \{Status\} shell variable is set to 0.  If any of the files after the first file is newer than the first file, the \{Status\} shell variable is set to 1.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname1}{\f4\fs20 \tab The full or partial path name of the file to be checked.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname2...}{\f4\fs20 \tab The full or partial path name of the files to compare with the first file.  If any of the files in this list have a modification date after }{\i\f4\fs20 pathname1}{\f4\fs20 , \{Status\} is set to 1.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command is most commonly used in script files to create sophisticated scripts that automatically decide when one of several files in a project need to be reassembled.\par The GS/OS operating system records the modification date to the nearest minute.  It is quite possible, unfortunately, to make changes to more than one file, then attempt to rebuild a file, in less than one minute.  In this case, the command may miss a file that has been changed.  See the TOUCH command for one way to update the time stamp.\par Wildcards may be used in any path name.  If the first file is specified with a wildcard, only the first matching file is checked.  If wildcards are used in the remaining names, each matching file is checked against the first file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Status\} variable}}}{\v\f4\fs20 \par }{\f4\fs20 It is possible for the NEWER command to return a value other than 0 or 1; this would happen, for example, if a disk is damaged or if one of the files does not exist at all.  For this reason, your script files should check for specific values of 0 or 1.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} variable}}}{\v\f4\fs20 \par }{\f4\fs20 A status variable other than zero generally causes a script file to exit.  To prevent this, be sure and unset the exit shell variable.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PREFIX}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PREFIX\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PREFIX command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard prefixes}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 PREFIX [-C] [}{\i\f6\fs20 n}{\f6\fs20 ] }{\i\f6\fs20 directory}{\f6\fs20 [:]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command sets any of the eight standard GS/OS prefixes to a new subdirectory.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -C\tab The PREFIX command does not normally allow you to set a prefix to a path name that does not exist or is not currently available.  The -C flag overrides this check, allowing you to set the prefix to any valid GS/OS path name.\par \par }{\i\f4\fs20 n}{\f4\fs20 \tab A number from 0 to 31, indicating the prefix to be changed.  If this parameter is omitted, 8 is used.  This number must be preceded by one or more spaces.\par \par }{\i\f4\fs20 directory}{\f4\fs20 \tab The full or partial path name of the subdirectory to be assigned to prefix }{\i\f4\fs20 n.}{\f4\fs20   If a prefix number is used for this parameter, you must follow the prefix number with the : character.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Prefix 8 is the current prefix; all shell commands that accept a path name use prefix 8 as the default prefix if you do not include a colon (:) at the beginning of the path name.  Prefixes 9 through 17 are used for specific purposes by ORCA, GS/OS and the Apple IIGS tools; see the section \ldblquote Standard Prefixes\rdblquote  in this chapter for details.  The default settings for the prefixes are shown in Table 12.3.  Prefixes 0 to 7 are obsolete ProDOS prefixes, and should no longer be used.  Use the SHOW PREFIX}{\i\f4\fs20  }{\f4\fs20 command to find out what the prefixes are currently set to.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHOW command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\v\f4\fs20 \par }{\f4\fs20 The prefix assignments are reset to the defaults each time ORCA is booted.  To use a custom set of prefix assignments every time you start ORCA, put the PREFIX commands in the LOGIN file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PRODOS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PRODOS\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRODOS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRODOS language}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language names}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 PRODOS\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This language command sets the ORCA shell default language to GS/OS text.  GS/OS text files are standard ASCII files with GS/OS file type $04; these files are recognized by GS/OS as text files.  ORCA TEXT files, on the other hand, are standard ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The ORCA language type is not used by GS/OS.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 QUIT}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 QUIT\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 QUIT command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 QUIT\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command terminates the ORCA program and returns control to GS/OS.  If you called ORCA from another program, GS/OS returns you to that program; if not, GS/OS prompts you for the next program to load.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 RENAME}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RENAME\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 RENAME }{\i\f6\fs20 pathname1}{\f6\fs20  }{\i\f6\fs20 pathname2\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command changes the name of a file.  You can also use this command to move a file from one subdirectory to another on the same volume.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 pathname1}{\f4\fs20  \tab The full path name or partial path name (including the file name) of the file to be renamed or moved.  If you use wildcard characters in the file name, the first file name matched is used.\par \par }{\i\f4\fs20 pathname2}{\f4\fs20 \tab The full path name or partial path name (including the file name) to which }{\i\f4\fs20 pathname1}{\f4\fs20  is to be changed or moved.  You cannot use wildcard characters in the file name.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you specify a different subdirectory for }{\i\f4\fs20 pathname2}{\f4\fs20  than for }{\i\f4\fs20 pathname1}{\f4\fs20 , then the file is moved to the new directory and given the file name specified in }{\i\f4\fs20 pathname2.}{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The subdirectories specified in }{\i\f4\fs20 pathname1}{\f4\fs20  and }{\i\f4\fs20 pathname2}{\f4\fs20  must be on the same volume.  To rename a file and move it to another volume, use the MOVE command.\par }\pard \qj\li360\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 RESEQUAL}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RESEQUAL\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RESEQUAL command\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resources}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 RESEQUAL [-P] }{\i\f6\fs20 pathname1 pathname2}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The external command RESEQUAL compares the resources in two files and writes their differences to standard out.\par RESEQUAL checks that each file contains resources of the same type and identifier as the other file; that the size of the resources with the same type and identifier are the same; and that their contents are the same.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f6\fs20 -P\tab }{\f4\fs20 If this flag is used, a copyright message and progress information is written to error out.\par \par }{\i\f6\fs20 pathname1}{\f6\fs20 \tab }{\f4\fs20 The full or partial path name of one of the two files to compare.\par \par }{\i\f6\fs20 pathname2}{\f6\fs20 \tab }{\f4\fs20 The full or partial path name of one of the two files to compare.\par \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 If a mismatch is found, the mismatch and the subsequent 15 bytes are written to standard out.  RESEQUAL then continues the comparison, starting with the byte following the last byte displayed.  The following messages appear when reporting differences:\par \par }\pard \qj\fi-360\li720\keep\widctlpar\adjustright {\f4\fs20 \bullet \tab In 1 but not in 2\par \par \tab The resource type and ID are displayed.\par \par \bullet \tab In 2 but not in 1\par \par \tab The resource type and ID are displayed.\par \par \bullet \tab Resources are different sizes\par \par \tab The resource type, resource ID, and the size of the resource in each file are displayed.\par \par \bullet \tab Resources have different contents\par \par \tab This message is followed by the resource type and ID, then by the offset in the resource, and 16 bytes of the resource, starting at the byte that differed.  If more than ten differences are found in the same resource, the rest of the resource is skipped and processing continues with the next resource.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 REZ}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 REZ\tcl3}}}{\b\v\f4  }{\b\f4 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 REZ command\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resources}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 REZ}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This language command sets the default language to Rez.  The resource compiler is described in Chapter 15.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 RUN}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RUN\tcl3}}}{\b\f4   \par }\pard \qj\fi-540\li540\keep\keepn\widctlpar\tx540\adjustright {\pard\plain \qj\fi-540\li540\keep\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command\bxe }}}{\pard\plain \qj\fi-540\li540\keep\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\pard\plain \qj\fi-540\li540\keep\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\v\f4\fs20 \par }\pard \fi-540\li540\keep\keepn\widctlpar\tx540\adjustright {\f4\fs20 \par }\pard \fi-810\li810\keep\keepn\widctlpar\tx810\adjustright {\f6\fs20 RUN\tab [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\li540\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command compiles (or assembles), links, and runs a source file.  Its function is identical to that of the ASMLG command.  See the ASML command for a description of the parameters.  See your compiler or assembler manual for the default values of the parameters and the language-specific options available.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 SET}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SET\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 SET [}{\i\f6\fs20 variable}{\f6\fs20  [}{\i\f6\fs20 value}{\f6\fs20 ]]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command allows you to assign a value to a variable name.  You can also use this command to obtain the value of a variable or a list of all defined variables.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 variable}{\f4\fs20 \tab The variable name you wish to assign a value to.  Variable names are not case sensitive, and only the first 255 characters are significant.  If you omit }{\i\f4\fs20 variable}{\f4\fs20 , then a list of all defined names and their values is written to standard output.\par \par }{\i\f4\fs20 value}{\f4\fs20 \tab The string that you wish to assign to }{\i\f4\fs20 variable.}{\f4\fs20   Values are case sensitive and are limited to 65536 characters.  All characters, including spaces, starting with the first non-space character after }{\i\f4\fs20 variable}{\f4\fs20  to the end of the line, are included in }{\i\f4\fs20 value.}{\f4\fs20   If you include }{\i\f4\fs20 variable}{\f4\fs20  but omit }{\i\f4\fs20 value}{\f4\fs20 , then the current value of }{\i\f4\fs20 variable}{\f4\fs20   is written to standard output.  Embed spaces within }{\i\f4\fs20 value}{\f4\fs20  by enclosing }{\i\f4\fs20 value}{\f4\fs20  in double quote marks.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A variable defined with the SET command is normally available only in the EXEC file where it is defined, or if defined on the command line, only from the command line.  The variable and its value are not normally passed on to EXEC files, nor are the variables set in an EXEC file available to the caller of the EXEC file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPORT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:scope}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files\:parameter passing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command}}}{\v\f4\fs20 \par }{\f4\fs20 To pass a variable and its value on to an EXEC file, you must export the variable using the EXPORT command.  From that time on, any EXEC file will receive a copy of the variable.  Note that this is a copy: UNSET commands used to destroy the variable, or SET commands used to change it, will not affect the original.  Variables exported from the LOGIN file are exported to the command level.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXECUTE command}}}{\v\f4\fs20 \par }{\f4\fs20 You can cause changes to variables made in an EXEC file to change local copies.  See the EXECUTE command for details.\par Use the UNSET command to delete the definition of a variable.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Certain variable names are reserved; see page 96 for a list of reserved variable names.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SHOW}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SHOW\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHOW command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language numbers}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard prefixes}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 SHOW [LANGUAGE] [LANGUAGES] [PREFIX] [TIME] [UNITS]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command provides information about the system.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 LANGUAGE \tab Shows the current system-default language.\par \par LANGUAGES\tab Shows a list of all languages defined in the language table, including their language numbers.\par \par PREFIX\tab Shows the current subdirectories to which the GS/OS prefixes are set.  See the section \ldblquote Standard Prefixes\rdblquote  in this chapter for a discussion of ORCA prefixes.\par \par TIME\tab Shows the current time.\par \par UNITS\tab Shows the available units, including device names and volume names.  Only those devices that have formatted GS/OS volumes in them are shown.  To see the device names for all of your disk drives, make sure that each drive contains a GS/OS disk.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 More than one parameter can be entered on the command line; to do so, separate the parameters by one or more spaces.  If you enter no parameters, you are prompted for them.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SHUTDOWN}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SHUTDOWN\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SHUTDOWN command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 SHUTDOWN\par }{\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f4\fs20 This internal command shuts down the computer, ejecting floppy disks and leaving any RAM disk intact.  A dialog will appear which allows you to restart the computer.\par Technically, the command performs internal clean up of the shell's environment, just as the QUIT command does, ejects all disks, and then does an OSShutDown call with the shut down flags set to 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SWITCH}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SWITCH\tcl3}}}{\b\f4  \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SWITCH command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 SWITCH [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  }{\i\f6\fs20 pathname2}{\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command interchanges two file names in a directory.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab When wildcards are used, the names of the two files switched are written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\f4\fs20 pathname1}{\f4\fs20  \tab The full path name or partial path name (including the file name) of the first file name to be moved.  If you use wildcard characters in the file name, the first file name matched is used.\par \par }{\i\f4\fs20 pathname2}{\f4\fs20 \tab The full path name or partial path name (including the file name) to be switched with }{\i\f4\fs20 pathname1}{\f4\fs20  .  The prefix in }{\i\f4\fs20 pathname2}{\f4\fs20  must be the same as the prefix in }{\i\f4\fs20 pathname1}{\f4\fs20 .  You cannot use wildcard characters in this file name.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 For example, suppose the directory listing for :ORCA:MYPROGS: is as follows in the figure below:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CATALOG command}}}{\v\f4\fs20 \par }\pard \fi720\keepn\widctlpar\tx6120\adjustright {\f6\fs14 \par :ORCA:MYPROGS:=\par Name         Type   Blocks     Modified           Created    Access  Subtype\par \par C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par ABS.OBJECT    OBJ     8    12 NOV 86 15:02    4 MAR 86 14:17  NBWR   \par }\pard \keepn\widctlpar\tx2070\tx2700\tx4230\tx5130\adjustright {\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Figure 12.15. CATALOG :ORCA:MYPROGS: command\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To reverse the positions in the directory of the last two files, use the following command:\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi-270\li720\widctlpar\adjustright {\b\f6\fs18 SWITCH :ORCA:MYPROGS:COMMAND.FILE :ORCA:MYPROGS:ABS.OBJECT\par }\pard \widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Now if you list the directory again, it looks like this:\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi720\keepn\widctlpar\tx4230\adjustright {\f6\fs14 :ORCA:MYPROGS:=\par Name         Type   Blocks     Modified           Created    Access  Subtype\par \par C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par ABS.OBJECT    OBJ     8    12 NOV 86 15:02    4 MAR 86 14:17   NBWR   \par COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\keep\widctlpar\adjustright {\f4\fs20 Figure 12.16. CATALOG :ORCA:MYPROGS: command\par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DOS}}}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPRESS command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can alphabetize GS/OS directories with the COMPRESS command, and list directories with the CATALOG command.  This command works only on GS/OS directories, not on other file systems such as DOS or Pascal.  Due to the design of GS/OS, the SWITCH command will also not work on the disk volume that you boot from \endash  to modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TEXT}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TEXT\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TEXT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRODOS command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TEXT language}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 TEXT\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This language command sets the ORCA shell default language to ORCA TEXT.  ORCA text files are standard-ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The TEXT file type is provided to support any text formatting programs that may be added to ORCA.  TEXT files are shown in a directory listing as SRC files with a subtype of TEXT.\par Use the PRODOS command to set the language type to GS/OS text; that is, standard ASCII files with GS/OS file type $04.  PRODOS text files are shown in a directory listing as TXT files with no subtype.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 TOUCH}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TOUCH\tcl3}}}{\b\f4  \par }\pard \keep\keepn\widctlpar\tx620\adjustright {\f4\fs20 \par }{\f6\fs20 TOUCH [-P]\tab }{\i\f6\fs20 pathname}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TOUCH command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 modification date}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command "touches" a file, changing the file's modification date and time stamp to the current date and time, just as if the file had been loaded into the editor and saved again.  The contents of the file are not affected in any way.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 -P\tab When wildcards are used, a list of the files touched is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\f4\fs20 pathname}{\f4\fs20  \tab The full path name or partial path name (including the file name) of the file to be touched.  You can use wildcard characters in this file name, in which case every matching file is touched.  You can specify more than one path name in the command; separate path names with spaces.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 TYPE}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TYPE\tcl3}}}{\b\f4  \par }{\f4\fs20 \par }\pard \keep\keepn\widctlpar\tx620\adjustright {\f6\fs20 TYPE\tab [+N|}{\f6\fs20\ul -N}{\f6\fs20 ] [}{\f6\fs20\ul +T}{\f6\fs20 |-T] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 startline1}{\f6\fs20  [}{\i\f6\fs20 endline1}{\f6\fs20 ]] [}{\i\f6\fs20 pathname2}{\f6\fs20  \tab [}{\i\f6\fs20 startline2}{\f6\fs20  [}{\i\f6\fs20 endline2}{\f6\fs20 ]]...]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TYPE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This internal command prints one or more text or source files to standard output (usually the screen).\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 +N|-N\tab If you specify +N, the shell precedes each line with a line number.  The default is -N: no line numbers are printed.\par \par +T|-T\tab The TYPE command normally expands tabs as a file is printed; using the -T flag causes the TYPE command to send tab characters to the output device unchanged.\par \par }{\i\f4\fs20 pathname}{\f4\fs20  \tab The full path name or partial path name (including the file name) of the file to be printed.  You can use wildcard characters in this file name, in which case every text or source file matching the wildcard file name specification is printed.  You can specify more than one path name in the command; separate path names with spaces.\par \par }{\i\f4\fs20 start linen}{\f4\fs20 \tab The line number of the first line of this file to be printed.  If this parameter is omitted, then the entire file is printed.\par \par }{\i\f4\fs20 endlinen}{\f4\fs20 \tab The line number of the last line of this file to be printed.  If this parameter is omitted, then the file is printed from }{\i\f4\fs20 startline}{\f4\fs20  to the end of the file.\par }{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text files}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printing files}}}{\pard\plain \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 merging files}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA text files, GS/OS text files, and ORCA source files can be printed with the TYPE command.  Use the TYPE command and output redirection to merge files.  For example, to merge the files FILE1 and FILE2 into the new file FILE3, use the command:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f6\fs18 \tab TYPE FILE1 FILE2 > FILE3\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tabs\:removing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DETAB}}}{\f4\fs20 Normally, the TYPE command functions as a DETAB utility, expanding tabs to an appropriate number of spaces as the file it sent to the output device.  The TYPE command examines the language stamp of the file being typed, reading the appropriate tab line from the SYSTABS file to determine where the tab stops are located.\par If you are using the type command to append one file to the end of another, you may not want tabs to be expanded.  In That case, the -T flag can be used to suppress tab expansions.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 UNALIAS}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 UNALIAS\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNALIAS command\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 aliasing}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 UNALIAS }{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20  ...]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The UNALIAS command deletes an alias created with the ALIAS command.  More than one alias can be deleted my listing all of them, separated by spaces.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 UNSET}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 UNSET\tcl3}}}{\b\i\f4  }{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 UNSET command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SET command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:assigning values to}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 UNSET }{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20 ...]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command deletes the definition of a variable.  More than one variable may be deleted by separating the variable names with spaces.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1800\adjustright {\i\f4\fs20 variable}{\f4\fs20 \tab The name of the variable you wish to delete.  Variable names are not case sensitive, and only the first 255 characters are significant.\par }\pard \qj\fi-1080\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Use the SET command to define a variable.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 *}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 *\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMMENT command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 * }{\i\f6\fs20 string}{\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The * command is the comment.  By making the comment a command that does nothing, you are able to rename it to be anything you wish.  Since it is a command, the comment character must be followed by a space.  All characters from there to the end of the line, or up to a ; character, which indicates the start of the next command, are ignored.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 13: The Text Editor\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 13\par The Text Editor\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 13 \endash  The Text Editor\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 The ORCA editor allows you to write and edit source and text files.  A brief introduction to the use of the editor was given in Chapter 3.  This chapter provides reference material on the editor, including detailed descriptions of all editing commands. \par The first section in this chapter, \ldblquote Modes,\rdblquote  describes the different modes in which the editor can operate.  The second section, \ldblquote Macros,\rdblquote  describes how to create and use editor macros, which allow you to execute a string of editor commands with a single keystroke.  The third section, "Using Editor Dialogs," gives a general overview of how the mouse and keyboard are used to manipulate dialogs.  The next section, \ldblquote Commands,\rdblquote  describes each editor command and gives the key or key combination assigned to the command.  The last section, \ldblquote Setting Editor Defaults,\rdblquote  describes how to set the defaults for editor modes and tab settings for each language.\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Modes}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Modes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 The behavior of the ORCA editor depends on the settings of several modes, as follows:\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx720\tx2880\adjustright {\f4\fs20 \bullet \tab Insert.\par \par \bullet \tab Escape.\par \par \bullet \tab Auto Indent.\par \par \bullet \tab Text Selection.\par \par \bullet \tab Hidden Characters.\par \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 Most of these modes has two possible states; you can toggle between the states while in the editor.  The default for these modes can be changed by changing flags in the SYSTABS file; this is described later in this chapter, in the section "Setting Editor Defaults."  All of these modes are described in this section.\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4 Insert}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Insert\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:over strike mode\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:insert mode\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 When you first start the editor, it is in over strike mode; in this mode the characters you type replace any characters the cursor is on.  In insert mode, any characters you type are inserted at the left of the cursor; the character the cursor is on and any characters to the right of the cursor are moved to the right.\par }{\pard\plain \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:line length\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 The maximum number of characters the ORCA editor will display on a single line is 255 characters, and this length can be reduced by appropriate settings in the tab line.  If you insert enough characters to create a line longer than 255 characters, the line is wrapped and displayed as more than one line.  Keep in mind that most languages limit the number of characters on a single source line to 255 characters, and may ignore any extra characters or treat them as if they were on a new line.\par To enter or leave the insert mode, type }{\outl\f4\fs18 \u-3\'f0}{\f6\fs18 E}{\f4\fs20 .  When you are in insert mode, the cursor will be an underscore character that alternates with the character in the file.  In over strike mode, the cursor is a blinking box that changes the underlying character between an inverse character (black on white) and a normal character (white on black).\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4 Escape}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Escape\tcl3}}}{\b\f4  \par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:escape mode\bxe }}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:repeat counts\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\tx180\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you press the }{\outl\f4\fs18 ESC}{\f4\fs20  key, the editor enters the escape mode.  For the most part, the escape mode works like the normal edit mode.  The principle difference is that the number keys allows you to enter repeat counts, rather than entering numbers into the file.  After entering a repeat count, a command will execute that number of times.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:insert blank lines command}}}{\v\f4\fs20 \par }{\f4\fs20 For example, the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 B command inserts a blank line in the file.  If you would like to enter fifty blank lines, you would enter the escape mode, type 50}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 B, and leave the escape mode by typing the }{\outl\f4\fs18 ESC}{\f4\fs20  key a second time.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:escape mode}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:open Apple key}}}{\v\f4\fs20 \par }{\f4\fs20 Earlier, it was mentioned that the number keys were used in escape mode to enter repeat counts.  In the normal editor mode, }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  followed by a number key moves to various places in the file.  In escape mode, the }{\outl\f4\fs18 \u-3\'f0 }{\f4\fs20 key modifier allows you to type numbers.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:control underscore key\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 The only other difference between the two modes is the way }{\outl\f4\fs18 CTRL}{\f4\fs20 _ works.  This key is used primarily in macros.  If you are in the editor mode, }{\outl\f4\fs18 CTRL}{\f4\fs20 _ places you in escape mode.  If you are in escape mode, it does nothing.  In edit mode, }{\outl\f4\fs18 \u-3\'f0CTRL}{\f4\fs20 _ does nothing; in escape mode, it returns you to edit mode.  This lets you quickly get into the mode you need to be in at the start of an editor macro, regardless of the mode you are in when the macro is executed.\par The remainder of this chapter describes the standard edit mode.}{\f4 \par }\pard \qj\fi-720\li720\widctlpar\tx90\tx720\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4 Auto Indent}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Auto Indent\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:auto-indent mode\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can set the editor so that }{\outl\f4\fs18 RETURN}{\f4\fs20  moves the cursor to the first column of the next line, or so that it follows indentations already set in the text.  If the editor is set to put the cursor on column 1 when you press }{\outl\f4\fs18 RETURN}{\f4\fs20 , then changing this mode causes the editor to put the cursor on the first non-space character in the next line; if the line is blank, then the cursor is placed under the first non-space character in the first non-blank line above the cursor.  The first mode is generally best for line-oriented languages, like assembly language or BASIC.  The second is handy for block-structured languages like C or Pascal.\par To change the return mode, type }{\outl\f4\fs18 \u-3\'f0RETURN}{\f6\fs18 .}{\outl\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4 Select Text}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Select Text\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select mode\:by line\bxe }}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select mode\:by character\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 You can use the mouse or the keyboard to select text in the ORCA editor.  This section deals with the keyboard selection mechanism; see "Using the Mouse," later in this chapter, for information about selecting text with the mouse.\par The Cut, Copy, Delete and Block Shift commands require that you first select a block of text.  The ORCA editor has two modes for selecting text: line-oriented and character-oriented selects.  As you move the cursor in line-oriented select mode, text or code is marked a line at a time.  In the character-oriented select mode, you can start and end the marked block at any character.  Line-oriented select mode is the default for assembly language; for text files and most high-level languages, character-oriented select mode is the default.\par While in either select mode, the following cursor-movement commands are active:\par }{\pard\plain \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:bottom of screen command}}}{\pard\plain \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:top of screen command}}}{\pard\plain \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor down command}}}{\pard\plain \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor up command}}}{\pard\plain \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:start of line command}}}{\pard\plain \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:screen move commands}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\tx2880\adjustright {\f4\fs20 \par \bullet \tab bottom of screen\par \par \bullet \tab top of screen\par \par \bullet \tab cursor down\par \par \bullet \tab cursor up\par \par \bullet \tab start of line\par \par \bullet \tab screen moves\par \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 In addition, while in character-oriented select mode, the following cursor-movement commands are active:\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select mode\:by character}}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor left command}}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor right command}}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:tab command}}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:tab left command}}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:word right command}}}{\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:word left command}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\tx2880\adjustright {\f4\fs20 \par \bullet \tab cursor left\par \par \bullet \tab cursor right\par \par \bullet \tab end of line\par \par \bullet \tab tab\par \par \bullet \tab tab left\par \par \bullet \tab word right\par \par \bullet \tab word left\par }{\pard\plain \qj\fi-270\li720\widctlpar\tx720\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:RETURN key}}}{\pard\plain \qj\fi-270\li720\widctlpar\tx720\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:ESCAPE key}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 As you move the cursor, the text between the original cursor position and the final cursor position is marked (in inverse characters).  Press }{\outl\f4\fs18 RETURN}{\f4\fs20  to complete the selection of text.  Press }{\outl\f4\fs18 ESC}{\f4\fs20  to abort the operation, leave select mode, and return to normal editing.\par To switch between character- and line-oriented selection while in the editor, type }{\outl\f4\fs18 CTRL\u-3\'f0}{\f6\fs18 x}{\f4\fs20 .\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4 Hidden Characters}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Hidden Characters\tcl3}}}{\b\f4 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:tabs}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:hidden characters}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tabs}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 return characters}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hidden characters}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are cases where line wrapping or tab fields may be confusing.  Is there really a new line, or was the line wrapped?  Do those eight blanks represent eight spaces, a tab, or some combination of spaces and tabs?  To answer these questions, the editor has an alternate display mode that shows hidden characters.  To enter this mode, type }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 =; you leave the mode the same way.  While you are in the hidden character mode, end of line characters are displayed as the mouse text return character.  Tabs are displayed as a right arrow where the tab character is located, followed by spaces until the next tab stop.\par \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Macros}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Macros\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:macros\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can define up to 26 macros for the ORCA editor, one for each letter on the keyboard.  A macro allows you to substitute a single keystroke for up to 128}{\b\f4\fs20  }{\f4\fs20 predefined keystrokes.  A macro can contain both editor commands and text, and can call other macros.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:create macros command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:arrow keys}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:end macro definition command}}}{\v\f4\fs20 \par }{\f4\fs20 To create a macro, press}{\f4\fs18  }{\outl\f4\fs18 \u-3\'f0ESC}{\f4\fs20 .  The current macro definitions for A to J appear on the screen.  The }{\outl\f4\fs18 LEFT-ARROW}{\f4\fs20  and }{\outl\f4\fs18 RIGHT-ARROW}{\f4\fs20  keys can be used to switch between the three pages of macro definitions.  To replace a definition, press the key that corresponds to that macro, then type in the new macro definition.  You must be able to see a macro to replace it - use the left and right arrow keys to get the correct page.  Press }{\outl\f4\fs18 OPTION ESC }{\f4\fs20 to terminate the macro definition.  You can include }{\outl\f4\fs18 CTRL}{\i\f4\fs20 key}{\f4\fs20  combinations, }{\outl\f4\fs18 \u-3\'f0}{\i\f4\fs20 key}{\f4\fs20  combinations, }{\outl\f4\fs18 OPTION}{\i\f4\fs20 key}{\f4\fs20  combinations, and the }{\outl\f4\fs18 RETURN}{\f4\fs20 , }{\outl\f4\fs18 ENTER}{\f4\fs20 , }{\outl\f4\fs20 ESC}{\f4\fs20 , and arrow keys.  The following conventions are used to display keystrokes in macros:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:macro keystrokes\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi-2520\li2880\keep\widctlpar\tx2160\adjustright {\outl\f4\fs18 \par CTRL}{\i\f4\fs20 key}{\f4\fs20  \tab The uppercase character }{\i\f4\fs20 key}{\f4\fs20  is shown in inverse.\par \par }{\outl\f4\fs18 \u-3\'f0}{\i\f4\fs20 key}{\f4\fs20 \tab An inverse A followed by }{\i\f4\fs20 key }{\f4\fs20 (for example,}{\i\f4\fs20  }{\shad\f4\fs20 A}{\f4\fs20 K)\par \par }{\outl\f4\fs18 OPTION}{\i\f4\fs20 key}{\f4\fs20 \tab An inverse B followed by }{\i\f4\fs20 key}{\f4\fs20  (for example,}{\i\f4\fs20  }{\shad\f4\fs20 B}{\f4\fs20 K)\par \par }{\outl\f4\fs18 ESC}{\f4\fs20 \tab An inverse left bracket (}{\outl\f4\fs18 CTRL}{\f4\fs20  [).\par \par }{\outl\f4\fs18 RETURN}{\f4\fs20 \tab An inverse M (}{\outl\f4\fs18 CTRL}{\f4\fs20  M).\par \par }{\outl\f4\fs18 ENTER}{\f4\fs20 \tab An inverse J (}{\outl\f4\fs18 CTRL}{\f4\fs20  J).\par \par }{\outl\f4\fs18 UP-ARROW}{\f4\fs20 \tab An inverse K (}{\outl\f4\fs18 CTRL}{\f4\fs20  K).\par \par }{\outl\f4\fs18 DOWN-ARROW}{\f4\fs20 \tab An inverse J (}{\outl\f4\fs18 CTRL}{\f4\fs20  J).\par \par }{\outl\f4\fs18 LEFT-ARROW}{\f4\fs20 \tab An inverse H (}{\outl\f4\fs18 CTRL}{\f4\fs20  H).\par \par }{\outl\f4\fs18 RIGHT-ARROW}{\f4\fs20 \tab An inverse U (}{\outl\f4\fs18 CTRL}{\f4\fs20  U).\par \par }{\outl\f4\fs18 DELETE}{\f4\fs20 \tab A block\par }\pard \qj\fi-2520\li2880\keep\widctlpar\tx2880\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each }{\outl\f4\fs18 \u-3\'f0}{\i\f4\fs20 key}{\f4\fs20  combination or }{\outl\f4\fs18 OPTION}{\i\f4\fs20 key}{\f4\fs20  combination counts as two keystrokes in a macro definition.  Although an }{\outl\f4\fs18 \u-3\'f0}{\i\f4\fs20 key}{\f4\fs20  combination looks (in the macro definition) like a }{\outl\f4\fs18 CTRL}{\f4\fs20  A followed by }{\i\f4\fs20 key}{\f4\fs20 , and an }{\outl\f4\fs18 OPTION}{\i\f4\fs20 key}{\f4\fs20  combination looks like a }{\outl\f4\fs18 CTRL}{\f4\fs20  B followed by }{\i\f4\fs20 key}{\f4\fs20 , you cannot enter }{\outl\f4\fs18 CTRL}{\f4\fs20  A when you want an }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  or }{\outl\f4\fs18 CTRL}{\f4\fs20  B when you want an }{\outl\f4\fs18 OPTION}{\f4\fs20  key.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:deleting characters in macros}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:end macro definition command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you make a mistake typing a macro definition, you can back up with \u-3\'f0}{\outl\f4\fs18 DELETE}{\f6\fs18 .}{\f4\fs20   If you wish to retype the macro definition, press }{\outl\f4\fs18 OPTION}{\f4\fs20  }{\outl\f4\fs18 ESC}{\f4\fs20  to terminate the definition, press the letter key for the macro you want to define, and begin over.  When you are finished entering macros, press }{\outl\f4\fs18 OPTION}{\f4\fs20  }{\outl\f4\fs18 ESC}{\f4\fs20  to terminate the last option definition, then press }{\outl\f4\fs18 OPTION}{\f4\fs20  to end macro entry.  If you have entered any new macro definitions, a dialog will appear asking if you want to save the macros to disk; select OK to save the new macro definitions, and Cancel to return to the editor.  If you select Cancel, the macros you have entered will remain in effect until you leave the editor.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:exit macro creation command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSEMAC file}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Macros are saved on disk in the file SYSEMAC in the ORCA shell prefix (prefix 15; see the section on prefixes in Chapter 12).\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:executing macros\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 To execute a macro, hold down }{\outl\f4\fs18 OPTION}{\f4\fs20  and press the key corresponding to that macro.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Using Editor Dialogs}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Editor Dialogs\tcl2}}}{\b\f4\fs28  \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The text editor makes use of a number of dialogs for operations like entering search strings, selecting a file to open, and informing you of error conditions.  The way you select options, enter text, and execute commands in these dialogs is the same for all of them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:dialogs}}}{\f4\fs20 Figure 13.1 shows the Search and Replace dialog, one of the most comprehensive of all of the editor's dialogs, and one that happens to illustrate many of the controls used in dialogs.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\f4\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.1\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:editline items}}}{\f4\fs20 The first item in this dialog is an editline control that lets you enter a string.  When the dialog first appears, the cursor is at the beginning of this line.  You can use any of the line editing commands from throughout the ORCA programming environment to enter and edit a string in this editline control; these line editing commands are summarized in Table 13.2.\par \par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright {\f4\fs20\ul command}{\f4\fs20 \tab }{\f4\fs20\ul command name and effect\par }{\pard\plain \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:editline controls}}}{\v\f4\fs20 \par }{\outl\f4\fs14 \par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\outl\f4\fs14 LEFT-ARROW}{\f4\fs18 \tab }{\b\f4\fs18 cursor left}{\f4\fs18  - The cursor will move to the left.\par \par }{\outl\f4\fs14 RIGHT-ARROW}{\f4\fs18 \tab }{\b\f4\fs18 cursor right}{\f4\fs18  - The cursor will move to the right. \par \par }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 >}{\outl\f4\fs18  }{\f4\fs18 or}{\outl\f4\fs18  }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 .}{\outl\f4\fs18 \tab }{\b\f4\fs18 end of line}{\f4\fs18  -  The cursor will move to the right-hand end of the string.\par \par }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 <}{\outl\f4\fs18  }{\f4\fs18 or}{\outl\f4\fs18  }{\outl\f4\fs14 \u-3\'f0}{\f4\fs18 ,}{\outl\f4\fs18 \tab }{\b\f4\fs18 start of line}{\f4\fs18  - The cursor will move to the left-hand end of the string.\par \par }\pard \qj\fi-2700\li3150\widctlpar\tx1170\tx3150\adjustright {\outl\f4\fs14 \u-3\'f0}{\f4\fs18 Y or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 Y\tab }{\b\f4\fs18 delete to end of line}{\f4\fs18  - Deletes characters from the cursor to the the end of the line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs18 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\f4\fs14 \u-3\'f0}{\f4\fs18 Z or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 Z\tab }{\b\f4\fs18 undo}{\f4\fs18  - Resets the string to the starting string.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs18 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\f4\fs14 ESC}{\f4\fs18  or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 X\tab }{\b\f4\fs18 exit}{\f4\fs18  - Stops string entry, leaving the dialog without changing the default string or executing the command.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs18 \par }\pard \qj\fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\f4\fs14 \u-3\'f0}{\f4\fs18 E or\tab }{\outl\f4\fs14 CTRL}{\f4\fs18 E\tab }{\b\f4\fs18 toggle insert mode}{\f4\fs18  - Switches between insert and over strike mode.  The dialog starts out in the same mode as the editor, but switching the mode in the dialog does not change the mode in the editor.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\f4\fs18 \par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright {\outl\f4\fs14 DELETE}{\f4\fs18 \tab }{\b\f4\fs18 delete character left}{\f4\fs18  - Deletes the character to the left of the cursor, moving the cursor left.\par }\pard \qc\keepn\widctlpar\tx2880\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\tx2880\adjustright {\f4\fs20 Table 13.2  Editline Control Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:tabs}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tabs}}}{\f4\fs20 The Search and Replace dialog has two editline items; you can move between them using the tab key.  You may also need to enter a tab character in a string, either to search specifically for a string that contains an imbedded tab character, or to place a tab character in a string that will replace the string once it is found.  To enter a tab character in an editline string, use }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 tab.  While only one space will appear in the editline control, this space does represent a tab character.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:check boxes}}}{\f4\fs20 Four options appear below the editline controls.  Each of these options is preceded by an }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  character and a number.  Pressing }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 x, where x is the number, selects the option, and causes a check mark to appear to the left of the option.  Repeating the operation deselects the option, removing the check mark.  You can also select and deselect options by using the mouse to position the cursor over the item, anywhere on the line from the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  character to the last character in the label.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:buttons}}}{\f4\fs20 At the bottom of the dialog is a pair of buttons; some dialogs have more than two, while some have only one.  These buttons cause some action to occur.  In general, all but one of these buttons will have an }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  character and a number to the left of the button.  You can select a button in one of several ways:  by clicking on the button with the mouse, by pressing the RETURN key (for the default button, which is the one without an }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  character), by pressing }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 x, or by pressing the first letter of the label on the button.  (For dialogs with an editline item, the last option is not available.)\par Once an action is selected by pressing a button, the dialog will vanish and the action will be carried out.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\f4\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.3\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:list controls}}}{\f4\fs20 Figure 13.3 shown the Open dialog.  This dialog contains a list control, used to display a list of files and folders.\par You can scroll through the list by clicking on the arrows with the mouse, dragging the thumb with the mouse (the thumb is the space in the gray area between the up and down arrows), clicking in the gray area above or below the thumb, or by using the up and down arrow keys.\par If there are any files in the list, one will always be selected.  For commands line Open that require a file name, you will be able to select any file in the list; for commands like New, that present the file list so you know what file names are already in use, only folders can be selected.  You can change which file is selected by clicking on another file or by using the up or down arrow keys.  If you click on the selected name while a folder is selected, the folder is opened.  If you click on a selected file name, the file is opened.\par \par }\pard \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Using the Mouse}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using the Mouse\tcl2}}}{\b\f4\fs28  \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:mouse}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 mouse}}}{\f4\fs20 All of the features of the editor can be used without a mouse, but the mouse can also be used for a number of functions.  If you prefer not to use a mouse, simply ignore it.  You can even disconnect the mouse, and the ORCA editor will perform perfectly as a text-based editor.\par The most common use for the mouse is moving the cursor and selecting text.  To position the cursor anywhere on the screen, move the mouse.  As soon as the mouse is moved, an arrow will appear on the screen; position this arrow where you would like to position the cursor and click.\par Several editor commands require you to select some text.  With any of these commands, you can select the text before using the command by clicking to start a selection, then dragging the mouse while holding down the button while you move to the other end of the selection.  Unlike keyboard selection, mouse selections are always done in character select mode.  You can also select words by double-clicking to start the selection, or lines by triple clicking to start the selection.  Finally, if you drag the mouse off of the screen while selecting text, the editor will start to scroll one line at a time.\par The mouse can also be used to select dialog buttons, change dialog options, and scroll list items in a dialog.  See "Using Editor Dialogs" in this chapter for details.\par \par }\pard \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Command Descriptions}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Command Descriptions\tcl2}}}{\b\f4\fs28  \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 This section describes the functions that can be performed with editor commands.  The key assignments for each command are shown with the command description.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Screen-movement descriptions in this manual are based on the direction the display screen moves through the file, not the direction the lines appear to move on the screen.  For example, if a command description says that the screen scrolls down one line, it means that the lines on the screen move }{\i\f4\fs20 up}{\f4\fs20  one line, and the next line in the file becomes the bottom line on the screen.\par }\pard \qj\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 @\tab }{\b\f4 About}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 About\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:about command\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:version\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version\:editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 Shows the current version number and copyright for the editor.  Press any key or click on the mouse to get rid of the About dialog.\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 G\tab }{\b\f4 Beep the Speaker}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Beep the Speaker\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:beep the speaker command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 The ASCII control character BEL ($07) is sent to the output device.  Normally, this causes the speaker to beep.\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 , or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 <\tab }{\b\f4 Beginning of Line}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Beginning of Line\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:beginning of line command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The cursor is placed in column one of the current line.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 DOWN-ARROW}{\outl\f4\fs18 \tab }{\b\f4 Bottom of Screen / Page Down}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Bottom of Screen / Page Down\tcl3}}}{\b\f4\fs20 \par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:bottom of screen command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The cursor moves to the last visible line on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the bottom of the screen, the screen scrolls down twenty-two lines.\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 C or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 C\tab }{\b\f4 Copy}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Copy\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:copy command\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEMP file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 work prefix}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:paste command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you execute the Copy command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\f4\fs18 RETURN}{\f4\fs20 .  The selected text is written to the file SYSTEMP in the work prefix.  (To cancel the Copy operation without writing the block to SYSTEMP, press }{\outl\f4\fs18 ESC }{\f4\fs20 instead of }{\outl\f4\fs18 RETURN}{\f4\fs20 .)  Use the Paste command to place the copied material at another position in the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 W or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 W\tab }{\b\f4 Close}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Close\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:close command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Closes the active file.  If the file has been changed since the last update, a dialog will appear, giving you a chance to abort the close, save the changes, or close the file without saving the changes.  If the active file is the only open file, the editor exits after closing the file; if there are other files, the editor selects the next file to become the active file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 DOWN-ARROW}{\b\f4\fs20 \tab }{\b\f4 Cursor Down}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cursor Down\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor down command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The cursor is moved down one line, preserving its horizontal position.  If it is on the last line of the screen, the screen scrolls down one line.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 LEFT-ARROW}{\f4 \tab }{\b\f4 Cursor Left}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cursor Left\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor left command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The cursor is moved left one column.  If it is in column one, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 RIGHT-ARROW\tab }{\b\f4 Cursor Right}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cursor Right\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor right command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The cursor is moved right one column.  If it is on the end-of-line marker (usually column 80), the command is ignored.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 UP-ARROW\tab }{\b\f4 Cursor Up}{\pard\plain \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cursor Up\tcl3}}}{\b\f4 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cursor up command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 The cursor is moved up one line, preserving its horizontal position.  If it is on the first line of the screen, the screen scrolls up one line.  If the cursor is on the first line of the file, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 X or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 X\tab }{\b\f4 Cut}{\pard\plain \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cut\tcl3}}}{\b\f4 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:cut command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 When you execute the Cut}{\i\f4\fs20  }{\f4\fs20 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\f4\fs18 RETURN}{\f4\fs20 .  The selected text is written to the file SYSTEMP in the work prefix, and deleted from the file.  (To cancel the Cut operation without cutting the block from the file, press  }{\outl\f4\fs18 ESC}{\f4\fs20  instead of }{\outl\f4\fs18 RETURN}{\f4\fs20 ).  Use the Paste command to place the cut text at another location in the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 ESC}{\b\scaps\f4\fs20 \tab }{\b\f4 Define Macros}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Define Macros\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:define macros command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The editor enters the macro definition mode.  Press }{\outl\f4\fs18 OPTION ESC}{\f4\fs20  to terminate a definition, and }{\outl\f4\fs18 OPTION}{\f4\fs20  to terminate macro definition mode.  The macro definition process is described in the section \ldblquote Macros\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 DELETE}{\b\scaps\f4\fs20 \tab }{\b\f4 Delete}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Delete\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you execute the delete}{\i\f4\fs20  }{\f4\fs20 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use any of the cursor movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\f4\fs18 RETURN}{\f4\fs20 .  The selected text is deleted from the file.  (To cancel the delete operation without deleting the block from the file, press }{\outl\f4\fs18 ESC}{\f4\fs20  instead of }{\outl\f4\fs18 RETURN}{\f4\fs20 .)\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 F or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 F\tab }{\b\f4 Delete Character}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Delete Character\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete character command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:undo delete buffer}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:undo command}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The character that the cursor is on is deleted and put in the Undo buffer (see the description of the Undo command).  Characters to the right of the cursor are moved one space to the left to fill in the gap.  The last column on the line is replaced by a space.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 DELETE}{\b\f4\fs20  or }{\outl\f4\fs20 CTRL}{\b\f4\fs20 D\tab }{\b\f4 Delete Character Left}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Delete Character Left\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete character left command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The character to the left of the cursor is deleted, and the character that the cursor is on, as well as the rest of the line to the right of the cursor, are moved 1 space to the left to fill in the gap.  If the cursor is in column one and the over strike mode is active, no action is taken.  If the cursor is in column one and the insert mode is active, then the line the cursor is on is appended to the line above and the cursor remains on the character it was on before the delete.  Deleted characters are put in the undo buffer.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20  }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 T or }{\outl\f4\fs20 CTRL}{\b\f4\fs20 T\tab }{\b\f4 Delete Line}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Delete Line\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete line command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The line that the cursor is on is deleted, and the following lines are moved up one line to fill in the space.  The deleted line is put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 Y or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 Y\tab }{\b\f4 Delete to EOL}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Delete to EOL\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete to end of line command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The character that the cursor is on, and all those to the right of the cursor to the end of the line, are deleted and put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20  }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 G}{\b\scaps\f4\fs20 \tab }{\b\f4 Delete Word}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Delete Word\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete word command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you execute the delete word command, the cursor is moved to the beginning of the word it is on, then delete character}{\i\f4\fs20  }{\f4\fs20 commands are executed for as long as the cursor is on a non-space character, then for as long as the cursor is on a space.  This command thus deletes the word plus all spaces up to the beginning of the next word.  If the cursor is on a space, that space and all following spaces are deleted, up to the start of the next word.  All deleted characters, including spaces, are put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 . or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 >\tab }{\b\f4 End of Line}{\pard\plain \keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 End of Line\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:end of line command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the last column on the line is not blank, the cursor moves to the last column.  If the last column is blank, then the cursor moves to the right of the last non-space character in the line.  If the entire line is blank, the cursor is placed in column 1.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 ? or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 /\tab }{\b\f4 Help}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Help\tcl3}}}{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:help command\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSHELP file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell prefix}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Displays the help file, which contains a short summary of editor commands.  Use }{\outl\f4\fs18 ESC}{\f4\fs20  to return to the file being edited.\par The help file is a text file called SYSHELP, found in the shell prefix.  Since it is a text file, you can modify it as desired.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 B or }{\outl\f4\fs20 CTRL}{\b\f4\fs20 B\tab }{\b\f4 Insert Line}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Insert Line\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:insert line command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A blank line is inserted at the cursor position, and the line the cursor was on and the lines below it are scrolled down to make room.  The cursor remains in the same horizontal position on the screen.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 SPACEBAR}{\b\f4\fs20 \tab }{\b\f4 Insert Space}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Insert Space\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:insert space command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A space is inserted at the cursor position.  Characters from the cursor to the end of the line are moved right to make room.  Any character in column 255 on the line is lost.  The cursor remains in the same position on the screen.  Note that the Insert Space command can extend a line past the end-of-line marker.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 N or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 N\tab }{\b\f4 New}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:new command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A dialog like the one show below appears.  You need to enter a name for the new file.  After entering a name, the editor will open an empty file using one of the ten available file buffers.  The file's location on disk will be determined by the directory showing in the dialog's list box.\par While the New command requires selecting a file name, no file is actually created until you save the file with the Save command.\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw415\pich262\picwgoal8300\pichgoal5240\macpict\bliptag216033400\blipupi72{\*\blipuid 0ce06878b640b85fd7259633d8998b3d}117200000001010601a01101a00082a03039a0008e01000a0000000002d0024098003400000000003b01a000000001003b01a000000001003b01a0000106001fcfff00fc06001fcfff00fc060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003120c60000630000007f0c1c0000630db000003120c60000630000007f0c1c0000630db000003120c600006300000060000c0000630db000003120c600006300000060000c0000630db000003150f60000733e6300601c0c3e00733e773e0de000003150f60000733e6300601c0c3e00733e773e0de000003150f600007f6363007e0c0c63007f036b630de000003150f600007f6363007e0c0c63007f036b630de000003150f60000677f6300600c0c7f00673f6b7f0de000003150f60000677f6b00600c0c7f00673f6b7f0de000003140e6000063606b00600c0c600063636b6dd000003140e6000063606b00600c0c600063636b6dd000003150f60000633f3e00601e1e3f00633f633f0de000003150f60000633f3e00601e1e3f00633f633f0de000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031610600000063007e0c006000c600fe0038060df0000031610600000063007e0c006000c600fe0038060df0000031610600000077006300006000ee00c00018060df0000031610600000077006300006000ee00c00018060df0000031812600000c6b63631c3e6318d6c6c07c187e7cde0e10000031812600000c6b63631c3e6318d6c6c07c187e7cde0e1000003171160000006b63630c606600d6c6fcc618c6c6ee0000003171160000006b63630c606600d6c6fcc618c6c6ee00000031711600000c6363630c3e7c18c6c6c0c618c6fece0000003980034003b0000007601a0003b0001007601a0003b0001007601a000011711600000c6363630c3e7c18c6c6c0c618c6fece000000317116000000633f630c036600c67ec0c618c6c0ce000000317116000000633f630c036600c67ec0c618c6c0ce00000031711600000063037e1e3e6300c606c07c3c7e7ece00000031711600000063037e1e3e6300c606c07c3c7e7ece0000003100060fe000103e0fc000107c0db000003100060fe000103e0fc000107c0db000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000030c02600007ddff00f8f60000030c02600007ddff00f8f60000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe000507e0c0c630c0e700091cce06118009cf39f998fe0000031e02600018fe000507e0c0c630c0e700091cce04118009cf39f998fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018fe0004080ffe3fcfe6ff01f806f60000031502600018fe0004080ffe3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f60000031102600018fe00000fe2ff01f806f60000031102600018fe00000fe2ff01f806f60000031502600018de00091aae0043e00c1ffffff8fe0000031502600018de00091d560043e00c1ffffff8fe0000031502600018de00091aae00863009cffffff8fe0000031502600018de00091d5600863009cffffff8fe0000039800340076000000b101a00076000100b101a00076000100b101a000011502600018de00091aae03603009c81c1818fe0000031502600018de00091d5603603009c81c1818fe0000031502600018de00051aae0610e009fec900c8fe0000031502600018de00051d560410e009fec900c8fe0000031502600018de00091aae04238009c9c809c8fe0000031502600018de00091d5604238009c9c809c8fe0000031502600018de00091aae04260009c819f9c8fe0000031502600018de00091d5604260009c819f9c8fe0000031502600018de00091aae0297f00c19fc09c8fe0000031502600018de00091d560297f00c19fc09c8fe0000031502600018de00091aae0360000ff9fffff8fe0000031502600018de00091d560360000ff9fffff8fe0000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000031502600018de000d1aae0047f00c1e3ffffff80000031502600018de000d1d560047f00c1e3ffffff80000031502600018de000d1aae00803009cf3ffffff80000031502600018de000d1d5600803009cf3ffffff80000031502600018de000d1aae03606009ff3c1c1c180000031502600018de000d1d5603606009ff3c1c1c180000031502600018de000d1aae0610e009ff39c9f9c80000031502600018de000d1d560410e009ff39c9f9c80000031502600018de000d1aae04203009ff39cc18080000031502600018de000d1d5604203009ff39cc18080000031502600018de000d1aae04263009cf39cfc9f80000031502600018de000d1d5604263009cf39cfc9f80000031502600018de00061aae0293e00c1efe1c03080000031502600018de00061d560293e00c1efe1c03080000031402600018de00051aae0360000ffdff03f80000031402600018de00051d560360000ffdff03f80000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef600000398003400b1000000ec01a000b1000100ec01a000b1000100ec01a000010d02600018de00011d56f60000031402600018de000618c60040e00607fdff021c00031402600018de000618c60040e00607fdff021c00031302600018de000518c60081e004fcff029c00031302600018de000518c60081e004fcff029c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c606166004ffe4e4fce79c00031502600018de000d18c604166004ffe4e4fce79c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1bf6029060060604e606070c00031502600018de000d1bf6029060060604e606070c00031302600018de000518c603600007fcff02fc00031302600018de000518c603600007fcff02fc00030c02600007ddff00f8f60000030c02600007ddff00f8f6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031808600007f0c1c0000630e1000647f00c1ffffff8fe0000031808600007f0c1c0000630e1000647f00c1ffffff8fe00000318086000060000c0000630e10006860009cffffff8fe00000318086000060000c0000630e10006860009cffffff8fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe0000031c0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003160060f7000007e6ff04fc0360000ffeff00f8fe000003160060f7000007e6ff04fc0360000ffeff00f8fe0000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f600000398003400ec0000010601a000ec0001010601a000ec0001010601a000010c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600007ddff00fcf60000030c02600007ddff00fcf6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf00000306001fcfff00fc06001fcfff00fca0008fa00083ff}}{\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 O or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 O\tab }{\b\f4 Open}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Open\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:open command\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:multiple files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The editor can edit up to ten files at one time.  When the open command is used, the editor moves to the first available file buffer, then brings up the dialog shown in Figure 13.4.  If there are no empty file buffers, the editor beeps, and the command is aborted.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.4\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Selecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par When you use the open button, if the selected file in the file list is a TXT or SRC file, the file is opened.  If a folder is selected, the folder is opened, and the file list changes to show the files inside the folder.  You can also open a file by first selecting a file, then clicking on it with the mouse.\par If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the file list.  If the file list was created from the root volume of a disk, the close button does nothing.\par The cancel button leaves the open dialog without opening a file.\par For information on how to use the various controls in the dialog, see "Using Editor Dialogs" in this chapter.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 V or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 V\tab }{\b\f4 Paste}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Paste\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:paste command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEMP file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 work prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select mode\:by character}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select mode\:by character}}}{\v\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The contents of the SYSTEMP file are copied to the current cursor position.  If the editor is in line-oriented select mode, the line the cursor is on and all subsequent lines are moved down to make room for the new material.  If the editor is in character-oriented select mode, the material is copied at the cursor column.  If enough characters are inserted to make the line longer than 255 characters, the excess characters are lost.\par }\pard \qj\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1350\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 Q or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 Q}{\b\f4 \tab Quit}{\pard\plain \qj\keepn\widctlpar\tx1350\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Quit\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:quit command\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The quit command leaves the editor.  If any file has been changed since the last time it was saved to disk, each of the files, in turn, will be made the active file, and the following dialog will appear:\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1037{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw231\pich84\picwgoal4620\pichgoal1680\macpict\bliptag1830675910\blipupi72{\*\blipuid 6d1de5c6b9fc7f2c7bf96705af84eab1}052000000000005400e71101a00082a0008e01000a0000000002d0024098001e00000000005400e800000000005400e700000000005400e7000102e30007001fe6ff01f00007001fe6ff01f000070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00140360000f80fe00010f98fc00010f80f500010c00140360000f80fe00010f98fc00010f80f500010c001403600018c0fe000118d8fc000118c0f500010c001403600018c0fe000118d8fc000118c0f500010c00160f6000180f98cf80181f0f9f8000000180f500010c00160a6000180f98cf80181f0f9ffe8f018180f500010c00150e60000f80d8d8c01818c0d8cf8f8f83f400010c00140960000f80d8d8c01818c0fdd80003f400010c001409600000cfd8dfc01818cffdd80003f400010c00150e600000cfd8dfc01818cfd8d8dfcf83f400010c001407600018d8cd980018fdd802dfcf80f400010c001507600018d8cd980018fed803cfd800c0f400010c00150e60000f8fc70fc00f98cfd8cfd800c3f400010c00150e60000f8fc70fc00f98cfd8c0cfcf83f400010c000d0060f60002cfcf80f400010c000c0060f700010f80f200010c000c0060f700010f80f200010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600004fcf393f000000c2300101390000c21c013ff9393f39e7000000c001f1d600004fcf393f00000082300101390000821c013ff9393f39e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c0007001fe6ff01f00007001fe6ff01f00002e300a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.5\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If you select Yes, the file is saved just as if the Save command had been used.  If you select No, the file is closed without saving any changes that have been made.  Selecting Cancel leaves you in the editor with the active file still open, but if several files had been opened, some of them may have been closed before the Cancel operation took effect.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs18 CTRL}{\b\f4\fs20 R or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 R\tab }{\b\f4 Remove Blanks}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Remove Blanks\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:remove blanks command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the cursor is on a blank line, that line and all subsequent blank lines up to the next non-blank line are removed.  If the cursor is not on a blank line, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20 1 to 32767\tab }{\b\f4 Repeat Count}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Repeat Count\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:repeat counts\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 When in escape mode, you can enter a }{\i\f4\fs20 repeat count }{\f4\fs20 (any number from 1 to 32767) immediately before a command, and the command is repeated as many times as you specify (or as many times as is possible, whichever comes first).  Escape mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 RETURN\tab }{\b\f4 Return}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Return\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:RETURN key\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:auto-indent mode}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\outl\f4\fs18 RETURN}{\f4\fs20  key works in one of two ways, depending on the setting of the auto-indent mode toggle:  1) to move the cursor to column one of the next line; or 2) to place the cursor on the first non-space character in the next line, or, if the line is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor.  If the cursor is on the last line on the screen, the screen scrolls down one line.\par If the editor is in insert mode, the }{\outl\f4\fs18 RETURN}{\f4\fs20  key will also split the line at the cursor position.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 A}{\b\f4\fs18  or}{\b\outl\f4\fs18  \u-3\'f0}{\b\f4\fs20 A\tab }{\b\f4 Save As}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Save As\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:save as command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Save As command lets you change the name of the active file, saving it to a new file name or to the same name in a new file folder.  When you use this command, this dialog will appear:\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1038{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich264\picwgoal8340\pichgoal5280\macpict\bliptag1383067446\blipupi72{\*\blipuid 526fef36b94839b56321b6374aeff36f}132100000000010801a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000b03600003e0d2000003ff000b03600003e0d2000003ff000b0360000630d2000003ff000b0360000630d2000003ff00110960000603e633e003e3e0d8000003ff00110960000603e633e003e3e0d8000003ff001008600003e03636300036d7000003ff001008600003e03636300036d7000003ff00110960000033f637f003f3e0d8000003ff00110960000033f637f003f3e0d8000003ff00110960000636336600063030d8000003ff00110960000636336600063030d8000003ff001109600003e3f1c3f003f3e0d8000003ff001109600003e3f1c3f003f3e0d8000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe000507e0c0c630c0e700091cce06118009cf39f998fe000003ff002002600018fe000507e0c0c630c0e700091cce04118009cf39f998fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff001702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff0098003600ae000000e801a800ae000000e801a100ae000000e801a100010f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff001502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe000003ff001e0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff0098003600e80000010801a800e80000010801a100e80000010801a100010e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600007ddff00fcf6000003ff000e02600007ddff00fcf6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.6\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Selecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par When you use the Open button, the selected folder is opened.  While using this command, you cannot select any files from the list; only folders can be selected.\par If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the file list.  If the file list was created from the root volume of a disk, the close button does nothing.\par The cancel button leaves the open dialog without opening a file.\par The Save button saves the file, using the file name shown in the editline item labeled "File Name."  You can also save the file by pressing the RETURN key.\par For information on how to use the various controls in the dialog, see "Using Editor Dialogs" in this chapter.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 S}{\b\f4\fs18  or}{\b\outl\f4\fs18  \u-3\'f0}{\b\f4\fs20 S\tab }{\b\f4 Save}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Save\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:save command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The active file (the one you can see) is saved to disk.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 -1 to }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 -9\tab }{\b\f4 Screen Moves}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Screen Moves\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:moving through a file\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The file is divided by the editor into 8 approximately equal sections.  The screen-move commands move the file to a boundary between one of these sections.  The command }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 1 jumps to the first character in the file, and }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 9 jumps to the last character in the file.  The other seven }{\outl\f4\fs18 \u-3\'f0}{\i\f4\fs20 n }{\f4\fs20 commands cause screen jumps to evenly spaced intermediate points in the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 \}\tab }{\b\f4 Scroll Down One Line}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Scroll Down One Line\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:scroll down one line command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The editor moves down one line in the file, causing all of the lines on the screen to move up one line.  The cursor remains in the same position on the screen.  Scrolling can continue past the last line in the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 ]\tab }{\b\f4 Scroll Down One Page}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Scroll Down One Page\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:scroll down one page command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The screen scrolls down twenty-two lines.  Scrolling can continue past the last line in the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 \{\tab }{\b\f4 Scroll Up One Line}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Scroll Up One Line\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:scroll up one line\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The editor moves up one line in the file, causing all of the lines on the screen to move down one line.  The cursor remains in the same position on the screen.  If the first line of the file is already displayed on the screen, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 [\tab }{\b\f4 Scroll Up One Page}{\pard\plain \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Scroll Up One Page\tcl3}}}{\b\f4 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:scroll up one page command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 The screen scrolls up twenty-two lines.  If the top line on the screen is less than one screen\rquote s height from the beginning of the file, the screen scrolls to the beginning of the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 L\tab }{\b\f4 Search Down}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Search Down\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:search down command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tabs}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command allows you to search through a file for a character or string of characters.  When you execute this command, the prompt }{\f6\fs18 Search string:}{\f4\fs20  appears at the bottom of the screen.\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1039{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich174\picwgoal10440\pichgoal3480\macpict\bliptag-998183356\blipupi72{\*\blipuid c480ee441428365ad0fea5b85187189b}0bd80000000000ae020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180120060fd000386300630f9000003d300010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018019066000080f3fffc8fe000343e00c0ffeff01fe38d40001018019066000080f3fffc8fe000343e00c0ffeff01fe38d400010180980042008d000000ae0210008d000000ae020a008d000000ae020a00011702600009feff00c8fe0002863009fcff0038d4000101801702600009feff00c8fe0002863009fcff0038d4000101801912600009fe381c08000003667009fc181c0c1f38d4000101801912600009fe381c08000003667009fc181c0c1f38d40001018019126000083f39c9c800000616b009ffc9c9f9cf38d40001018019126000083f39c9c800000416b009ffc9c9f9cf38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d400010180170260000ffeff06f800000360000ffcff00f8d400010180170260000ffeff06f800000360000ffcff00f8d400010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018007001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.7\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If you have previously entered a search string, the previous string appears after the prompt as a default.  Type in the string for which you wish to search, and press }{\outl\f4\fs18 RETURN}{\f4\fs20 .  The cursor will be moved to the first character of the first occurrence of the search string after the old cursor position.  If there are no occurrences of the search string between the old cursor position and the end of the file, an alert will show up stating that the string was not found; pressing any key will get rid of the alert.\par By default, string searches are case insensitive, must be an exact match in terms of blanks and tabs, and will match any target string in the file, even if it is a subset of a larger word.  All of these defaults can be changed, so we will look at what they mean in terms of how changing the defaults effect the way string searches work.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tabs}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you look at a line like\par \par }\pard \qj\li360\widctlpar\tx980\tx1620\adjustright {\f6\fs18 lb1\tab lda\tab #4\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 without using the hidden characters mode, it is impossible to tell if the spaces between the various fields are caused by a series of space characters, two tabs, or perhaps even a space character or two followed by a tab.  This is an important distinction, since searching for lda<space><space><space>#4 won't find the line if the lda and #4 are actually separated by a tab character, and searching for lda<tab>#4 won't find the line if the fields are separated by three spaces.  If you select the "white space compares equal" option, though, the editor will find any string where lda and #4 are separated by any combination of spaces and tabs, whether you use spaces, tabs, or some combination in the search string you type.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 By default, if you search for lda, the editor will also find LDA, since string searches are case insensitive.  In assembly language, that's generally what you want (although not always), but in a language like C, which is case sensitive, you don't usually want to find LDA when you type lda.  Selecting the "case sensitive" option makes the string search case sensitive, so that the capitalization becomes significant.  With this option turned on, searching for lda would not find LDA.\par Sometimes when you search for a string, you want to find any occurrence of the string, even if it is imbedded in some larger word.  For example, if you are scanning your program for places where it handles spaces, you might enter a string like "space".  You would want the editor to find the word whitespace, though, and normally it would.  If you are trying to scan through a source file looking for all of the places where you used the variable i, though, you don't want the editor to stop four times on the word Mississippi.  In that case, you can select the "whole word" option, and the editor will only stop of it finds the letter i, and there is no other letter, number, or underscore character on either side of the letter.  These rules match the way languages deal with identifiers, so you can use this option to search for specific variable names \endash  even a short, common one like i.\par This command searches from the cursor position towards the end of the file.  For a similar command that searches back towards the start of the file, see the "Search Up" command.\par For a complete description of how to use the mouse or keyboard to set options and move through the dialog, see the section "Using Editor Dialogs" in this chapter.\par Once a search string has been entered, you may want to search for another occurrence of the same string.  ORCA ships with two built-in editor macros that can do this with a single keystroke, without bringing up the dialog.  To search forward, use the \u-3\'f0L macro; to search back, use the \u-3\'f0K macro.\par }\pard \qj\fi-1980\li2333\widctlpar\tx2340\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 K\tab }{\b\f4 Search Up}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Search Up\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:search up command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command operates exactly like Search Down}{\i\f4\fs20 ,}{\f4\fs20  except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of the file; to search between the current cursor location and the end of the file, use the Search Down command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 J\tab }{\b\f4 Search and Replace Down}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Search and Replace Down\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:search and replace down command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command allows you to search through a file for a character or string of characters, and to replace the search string with a replacement string.  When you execute this command, the following dialog will appear on the screen:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1040{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.8\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The search string, the first three options, and the buttons work just as they do for string searches; for a description of these, see the Search Down command.  The replace string is the target string that will replace the search string each time it is found.  By default, when you use this command, each time the search string is found in the file you will see this dialog:\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich84\picwgoal5880\pichgoal1680\macpict\bliptag-1051516100\blipupi72{\*\blipuid c153233cf432f61985fd11443439c450}063900000000005401261101a00082a0008e01000a0000000002d00240980026000000000053012800000000005301260000000000530126000102db0007001fdeff01e00007001fdeff01e000070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f5000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f500011800100060fe000018f300010f80f200011800100060fe000018f300010f80f200011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118000e036000003ffbff00e0e8000118002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600004e067273cff27e720fe001718460030667cce40000018438027ff2727e73ce000001800270a600004e067273cff27e720fe001710460030667cce40000010438027ff2727e73ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc03030273030386000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc0303027303038600000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e00000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e000001800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de0001180007001fdeff01e00007001fdeff01e000980026005300000054012800530000005401260053000000540126000102db00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 13.9\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 If you select the Replace option, the search string is replaced by the replace string, and the editor scans forward for the next occurrence of the search string.  Choosing Skip causes the editor to skip ahead to the next occurrence of the search string without replacing the occurrence that is displayed.  Cancel stops the search and replace process.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you use the "replace all" option, the editor starts at the top of the file and replaces each and every occurrence of the search string with the target string.  On large files, this can take quite a bit of time.  To stop the process, press }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 .  (open-apple period).  While the search and replace is going on, you can see a spinner at the bottom right corner of the screen, showing you that the editor is still alive and well.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 H\tab }{\b\f4 Search and Replace Up}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Search and Replace Up\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:search and replace up command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This command operates exactly like Search and Replace Down, except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of the file; to search between the current cursor location and the end of the file, use the Search and Replace Down command.  If you use the "replace all" option, this command works exactly the same way the Search and Replace Down command does when it uses the same option.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 \u-3\'f0}{\f4\fs20 -}{\b\f6\fs18 \tab }{\b\f4 Select File}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Select File\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select file command\bxe }}}{\v\f4\fs20 .}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:multiple files.}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The editor can edit up to ten files at one time.  When you use this command, a dialog appears showing the names of the ten files in memory.  You can then move to one of the files by pressing \u-3\'f0n, where n is one of the file numbers.  You can exit the dialog without switching files by pressing ESC or RETURN.\par See also the Switch Files command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 TAB}{\b\f6\fs18 \tab }{\b\f4 Set and Clear Tabs}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Set and Clear Tabs\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:set/clear tab stops command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If there is a tab stop in the same column as the cursor, it is cleared; if there is no tab stop in the cursor column, one is set.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 \u-3\'f0}{\f4\fs20 [}{\b\f6\fs18 \tab }{\b\f4 Shift Left}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Shift Left\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:shift left command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If this command is issued when no text is selected, you enter the text selection mode.  Pressing RETURN leaves text selection mode.\par At any time while text is selected, using the command shifts all of the selected text left one character.  This is done by scanning the text, one line at a time, and removing a space right before the first character on each line that is not a space or tab.  If the character to be removed is a tab character, it is first replaced by an equivalent number of spaces.  If there are no spaces or tabs at the start of the line, the line is skipped.\par If a large amount of text is selected, this command may take a lot of time.  While the editor is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pressing }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 ., but this will leave the selected text partially shifted.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 \u-3\'f0}{\f4\fs20 ]}{\b\f6\fs18 \tab }{\b\f4 Shift Right}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Shift Right\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:shift right command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If this command is issued when no text is selected, you enter the text selection mode.  Pressing RETURN leaves text selection mode.\par At any time while text is selected, using the command shifts all of the selected text right one character.  This is done by scanning the text, one line at a time, and adding a space right before the first character on each line that is not a space or tab.  If this leaves the non-space character on a tab stop, the spaces are collected and replaced with a tab character.  If a blank line is encountered, no action is taken.\par If a large amount of text is selected, this command may take a lot of time.  While the editor is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pressing }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 ., but this will leave the selected text partially shifted.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 \u-3\'f0}{\f4\fs20 n}{\b\f6\fs18 \tab }{\b\f4 Switch Files}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Switch Files\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:switch files command\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:multiple files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The editor can edit up to ten files at one time.  Each of these files is numbered, starting from 0 and proceeding to 9.  The numbers are assigned as the files are opened from the command line.  To move from one file to the next, press \u-3\'f0n, where n is a numeric key.\par When you switch files, the original file is not changed in any way.  When you return to the file, the cursor and display will be in the same place, the undo buffer will still be active, and so forth.  The only actions that are not particular to a specific file buffer are those involving the clipboard \endash  Cut, Copy and Paste all use the same clipboard, so you can move chunks of text from one file to another.\par See also the Select File command.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 TAB}{\b\scaps\f4\fs20 \tab }{\b\f4 Tab}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Tab\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:tab command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In insert mode, or when in over strike mode and the next tab stop is past the last character in the line, this command inserts a tab character in the source file and moves to the end of the tab field.  If you are in the over strike mode and the next tab stop is not past the last character on the line, the Tab command works like a cursor movement command, moving the cursor forward to the next tab stop.\par Some languages and utilities do not work well (or at all) with tab stops.  If you are using one of these languages, you can tell the editor to insert spaces instead of tab characters; see the section "Setting Editor Defaults," later in this chapter, to find out how this is done.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 TAB}{\b\f4\fs20 \tab }{\b\f4 Tab Left}{\pard\plain \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Tab Left\tcl3}}}{\b\f4 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:tab left command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 The cursor is moved to the previous tab stop, or to the beginning of the line if there are no more tab stops to the left of the cursor.  This command does not enter any characters in the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 RETURN}{\b\f6\fs18 \tab }{\b\f4 Toggle Auto Indent Mode}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Toggle Auto Indent Mode\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:set/clear auto-indent mode command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the editor is set to put the cursor on column one when you press }{\outl\f4\fs18 RETURN}{\f4\fs20 , it is changed to put the cursor on the first non-space character; if set to the first non-space character, it is changed to put the cursor on column one.  Auto-indent mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 ESC}{\b\scaps\f4\fs20 \tab }{\b\f4 Toggle Escape Mode}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Toggle Escape Mode\tcl3}}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:set/clear escape mode command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 If the editor is in the edit mode, it is put in escape mode; if it is in escape mode, it is put in edit mode.  When you are in escape mode, pressing any character not specifically assigned to an escape-mode command returns you to edit mode.  Escape and edit modes are described in the section \ldblquote Modes\rdblquote  in this chapter.\par When in escape mode, }{\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs18 CTRL}{\f4\fs20 _ will return you to edit mode.  In edit mode the command has no effect.  From edit mode, }{\outl\f4\fs18 CTRL}{\f4\fs20 _ will place you in escape mode, but the command has no effect in escape mode.  These commands are most useful in an editor macro, where you do not know what mode you are in on entry.\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 E or }{\b\outl\f4\fs18 \u-3\'f0}{\b\f4\fs20 E\tab }{\b\f4 Toggle Insert Mode}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Toggle Insert Mode\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:set/clear insert mode command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If insert mode is active, the editor is changed to over strike mode.  If over strike mode is active, the editor is changed to insert mode.  Insert and over strike modes are described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\outl\f4\fs20 \u-3\'f0}{\b\f4\fs20 X\tab }{\b\f4 Toggle Select Mode}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Toggle Select Mode\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:set/clear select mode command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the editor is set to select text for the Cut, Copy, and Delete commands in units of one line, it is changed to use individual characters instead; if it is set to character-oriented selects, it is toggled to use whole lines.  See the section \ldblquote Modes\rdblquote  in this chapter for more information on select mode.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 UP-ARROW}{\outl\f4 \tab }{\b\f4 Top of Screen / Page Up}{\pard\plain \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Top of Screen / Page Up\tcl3}}}{\b\f4 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:top of screen command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 The cursor moves to the first visible line on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the top of the screen, the screen scrolls up twenty-two lines.  If the cursor is at the top of the screen and less than twenty-two lines from the beginning of the file, then the screen scrolls to the beginning of the file.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\f4\fs20 CTRL}{\b\f4\fs20 Z or }{\b\outl\f4\fs20 \u-3\'f0}{\b\f4\fs20 Z\tab }{\b\f4 Undo Delete}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Undo Delete\tcl3}}}{\b\f4 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:undo delete command\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:undo delete buffer}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete character command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete character left command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete line command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete to end of line command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:delete word command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \par The last operation that changed the text in the current edit file is reversed, leaving the edit file in the previous state.  Saving the file empties the undo buffer, so you cannot undo changes made before the last time the file was saved.\par The undo operation acts like a stack, so once the last operation is undone, you can undo the one before that, and so on, right back to the point where the file was loaded or the point where the file was saved the last time.\par \par }\pard \keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs20 \u-3\'f0}{\outl\f4\fs20 LEFT-ARROW}{\b\f4\fs20 \tab }{\b\f4 Word Left}{\pard\plain \keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Word Left\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:word left command\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The cursor is moved to the beginning of the next non-blank sequence of characters to the left of its current position.  If there are no more words on the line, the cursor is moved to the last word in the previous line or, if it is blank, to the last word in the first non-blank line preceding the cursor.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\f4\fs18 \u-3\'f0}{\outl\f4\fs20 RIGHT-ARROW\tab }{\b\f4 Word Right}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Word Right\tcl3}}}{\b\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:word right command\bxe }}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The cursor is moved to the start of the next non-blank sequence of characters to the right of its current position.  If there are no more words on the line, the cursor is moved to the first word in the next non-blank line.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Setting Editor Defaults}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Setting Editor Defaults\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:setting defaults\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTABS file}}}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:customizing\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 When you start the ORCA editor, it reads the file named SYSTABS (located in the ORCA shell prefix), which contains the default settings for tab stops, return mode, insert mode, tab mode, and select mode.  The SYSTABS file is an ASCII text file that you can edit with the ORCA editor.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each language recognized by ORCA is assigned a language number.  The SYSTABS file has three lines associated with each language:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:modes}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 \par 1.\tab The language number.\par \par 2.\tab The default settings for the various modes.\par \par 3.\tab The default tab and end-of-line-mark settings.\par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA language numbers are discussed in the section \ldblquote Command Types/Language Names" in Chapter 12.\par The first line of each set of lines in the SYSTABS file specifies the language that the next two lines apply to.  ORCA languages can have numbers from 0 to 32767 (decimal).  The language number must start in the first column; leading zeros are permitted and are not significant, but leading spaces are not allowed.\par The second line of each set of lines in the SYSTABS file sets the defaults for various editor modes, as follows:\par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:auto-indent mode}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 1.\tab If the first column contains a zero, pressing }{\outl\f4\fs18 RETURN}{\f4\fs20  in the editor causes the cursor to go to column one in the next line; if it\rquote s a one, pressing }{\outl\f4\fs18 RETURN}{\f4\fs20  sends the cursor to the first non-space character in the next line (or, if the line is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor).\par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:select mode}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 2.\tab If the second character is zero, the editor is set to line-oriented selects; if one, it is set to character-oriented selects.\par \par 3.\tab This flag is not used by the current version of the ORCA editor.  It should be set to 0.\par \par 4.\tab The fourth character is used by the ORCA/Desktop editor, and is used to set the default cursor mode.  A zero will cause the editor to start in over strike mode; a one causes the editor to start in insert mode.\par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:tab mode}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tabs}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 5.\tab If the fifth character is a 1, the editor inserts a tab character in the source file when the Tab command is used to tab to a tab stop.  If the character is a 0, the editor inserts an appropriate number of spaces, instead.\par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor\:over strike mode}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 6.\tab If the sixth character is a 0, the editor will start in over strike mode; if it is a 1, the editor starts in insert mode.  Using a separate flag for the text based editor (this one) and the desktop editor (see the fourth flag) lets you enter one mode in the desktop editor, and a different mode in the text based editor.\par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The third line of each set of lines in the SYSTABS file sets default tab stops.  There are 255 zeros and ones, representing the 255 character positions available on the edit line.  The ones indicate the positions of the tab stops.  A two in any column of this line sets the end of the line; if the characters extend past this marker, the line is wrapped.  The column containing the two then replaces the default end-of-line column (the default right margin) when the editor is set to that language.\par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 For example, the following lines define the defaults for ORCA Assembly Language:\par }\pard \qj\keep\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \keep\keepn\widctlpar\adjustright {\f6\fs14 3\par }\pard \widctlpar\adjustright {\f6\fs14 000110\par 000000000100000100000000000000000000000010000000100000001000000010000000100000001000000010000000000000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000002\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The last three lines are actually one long line.\par If no defaults are specified for a language (that is, there are no lines in the SYSTABS file for that language), then the editor assumes the following defaults:\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\tx2880\adjustright {\f4\fs20 \bullet \tab }{\outl\f4\fs18 RETURN}{\f4\fs20  sends the cursor to column one.\par \par }\pard \qj\fi-274\li720\keepn\widctlpar\tx720\tx2880\adjustright {\f4\fs20 \bullet \tab Line-oriented selects.\par }\pard \qj\fi-270\li720\widctlpar\tx720\tx2880\adjustright {\f4\fs20 \par \bullet \tab Word wrapping starts in column 80.\par \par \bullet \tab There is a tab stop every eighth column.\par \par \bullet \tab The editor starts in over strike mode.\par \par \bullet \tab Tab characters are inserted to create tabbed text.\par }\pard \qj\fi-274\li533\widctlpar\tx533\tx2880\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Note that you can change tabs and editing modes while in the editor.\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\widctlpar\tx720\tx1080\tx1440\adjustright \v\f12\cgrid {\xe {\v }{\v editor}{\rxe bk2}}}{\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 14: The Link Editor\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 14\par The Link Editor\par }\pard \qj\widctlpar\adjustright {\f4 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 14 \endash  The Link Editor\tcl1}}}{\v\f4 \par }{\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 link editor}{\txe (See linker)}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This chapter describes the use and operation of the link editor.  Key points covered in this chapter are:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab How the linker works.\par \par \bullet \tab Link edit command parameters.\par \par \bullet \tab Link editor output.\par \par \bullet \tab Program segmentation.\par \par \bullet \tab Creating library files.\par \par \bullet \tab Using linker script files.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Overview}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Overview\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The link editor has the job of taking individual subroutines and combining them into a complete program.  This usually means relocating certain subroutines and telling each subroutine where other subroutines are located.  One significant advantage of a link editor is that if a single subroutine has an error, only that subroutine containing the error need be reassembled, rather than the entire source file.  The link editor can then combine the new subroutine with the old ones to produce an executable program.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\v\f4\fs20 \par }{\f4\fs20 This scheme results in four distinct kinds of files that the ORCA/M system uses:\par \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 1.\tab The Source File (SRC).  These files contain the source code.  They are created using the text editor.  Source files are the input to the assembler or compiler.\par \par 2.\tab The Object File (OBJ).  The assembler or compiler is used to convert the source file into an object file, which in turn is the kind of file the link editor uses.  The link editor can relocate the code contained within an object file.  Note that the link editor does not know or care what source language produced the object file.  A Pascal or BASIC compiler designed for use with this system produces an object file in the same format as that produced by the assembler. \par \par 3.\tab The Executable File (usually EXE or S16).  Output from the link editor is in the form of an executable file.  This file is ready to be executed directly from ORCA; merely enter the file name on the command line. If an ORG directive was not specified during the assembly, then the file produced by the linker is relocatable.  The system loader will load a relocatable file into available memory.  If the program was ORG'ed to a specific address, then the loader will try to load the file at that address.\par }{\pard\plain \qj\fi-270\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\pard\plain \qj\fi-270\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MAKELIB utility}}}{\v\f4\fs20 \par }{\f4\fs20 \par 4.\tab The Library File (LIB).  A special type of object file is a library file.  A library is a collection of useful, frequently-used subroutines.  These subroutines are kept in a library so that they can be linked with any program that references them.  Libraries can be created using the MAKELIB utility, as explained in Chapter 12.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The link editor is invoked by using any shell command that does an assembly or compile, followed by a link edit.  These are:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\f4\fs20 \par ASML, ASMLG, CMPL, CMPLG, and RUN\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\v\f4\fs20 \par }{\f4\fs20 \par It can also be invoked by using the LINK command with a file name.  Parameters for the LINK command will be described shortly. \par \par }{\b\f4\fs28 The Link Edit Process}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Link Edit Process\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 No matter how the link editor is invoked, the process is very much the same. The link editor is a two-pass linker.  Pass one begins by locating the object file on disk and loading the file into memory. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 external labels}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Libraries\} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 As each subroutine is processed by pass one, it is assigned a final position in the executable load file, and the length of the subroutine is calculated.  All global labels defined in the object module are assigned values and placed in a symbol table.  The values are expressed as offsets from the beginning of the load segment.  This process is then repeated with the next subroutine.\par Once all other object files specified as input have been scanned, the linker checks to see if there are any external references that have not been satisfied.  If so, the libraries are scanned.  Subroutines can appear in any order in a library.  The linker will extract only those segments that are needed. It pulls in segments that have global labels that satisfy the external references it needs.  Libraries can themselves reference other libraries, regardless of the order of segments in the library file.\par By default, when the linker scans libraries, it scans prefix 13, processing each file with a file type of LIB in turn.  If the \{Libraries\} shell variable has a value, though, the linker instead searches the files listed in the \{Libraries\} shell variable.  For example, after\par \par }{\f6\fs18 set Libraries :AppleLink:Project:Project.Libs\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 the linker will no longer scan prefix 13 for libraries, but it will scan the library file :AppleLink:Project:Project.Libs.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation dictionary}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\v\f4\fs20 \par }{\f4\fs20 After all subroutines have been processed in the above manner, pass two starts over with the first subroutine.  This time, global labels referenced by the subroutine are looked up in the symbol table and resolved in the output file.  The subroutine is then placed in the load module on disk.  This process is then repeated for each of the other subroutines.  After a load segment has been completed, the linker writes out the relocation dictionary, which tells the loader how to relocate the program when it is time to execute it.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Object Modules Created by the Assembler}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Object Modules Created by the Assembler\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When the assembler is directed to save the results of an assembly using the KEEP parameter with a shell command, the \{KeepName\} variable, or a KEEP assembly directive in the source code, it is necessary to supply a file name.  The assembler then creates two files.  The first file contains the object module for the first assembled subroutine in the source file. (This is the entry point for the finished program.) This first object module is saved with the file name specified from the command line KEEP parameter or assembler KEEP directive, with the suffix .ROOT added to the end.  For example, if the file name OBJECT was used, the first subroutine would be saved in a file called OBJECT.ROOT.  The remaining subroutines are placed in a file called OBJECT.A.  They are placed in this file in the order that they occur in the source file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 separate compilation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }{\f4\fs20 If the +M flag was used to assemble the source file, the object modules are written to memory as "unnamed" files.  After linking is accomplished, these object modules are discarded.  If you will be performing partial compiles, or using separate compilation, do not use the +M flag.\par After assembling the complete program, there may be a need to reassemble a few of the subroutines, using the NAMES=(n1 ... nx) assembler option. When this is done, the assembler searches the output disk for an old file with the same root name.  If this was the second assembly, it would find the file called OBJECT.A.  The newly assembled (or reassembled) subroutines are saved in a file called OBJECT.B.  They appear in the order in which they were encountered in the source file.  Subroutines which were not re-assembled are not placed in the new file.  If a second partial assembly is performed, the reassembled modules are placed in a file with the name OBJECT.C, and so on for additional partial assemblies.\par If the first subroutine is reassembled, it is placed in a separate file called OBJECT.ROOT, replacing the first file by that name. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4 Subroutine Selection}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Subroutine Selection\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When a link edit starts, the same OBJ file name as used by the assembler must be provided.  (This is done automatically by ASML and similar commands.) In the above example, this was OBJECT.  The link editor scans the output disk for a file with the name OBJECT.ROOT, using the subroutine in that file as the first subroutine in the final executable module.  It then locates the last object module assembled by finding the file with the highest alphabetical suffix.  (It does this by scanning successively for files with ascending alphabetic suffixes.) In the example above, this was OBJECT.C.  Subroutines are taken from this file in the order encountered, linked, and then placed in the load module.  The link editor then proceeds to the previous file - that is, the one with preceding alphabetical suffix.  If a subroutine is found which has not yet been linked, it is placed in the load module.  If the subroutine has already been linked, having been found in a previous (hence more recently assembled) file, it is ignored.  Thus, the most recent version of a subroutine is selected automatically.  Library subroutines may be specified in addition to object files.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 external labels}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load module}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Libraries prefix}}}{\v\f4\fs20 \par }{\f4\fs20 If there are still unresolved external references, the link editor assumes that these are to be resolved from library files.  The link editor searches the library prefix for library files.  If there are no library files to be found, the linker assumes that the unresolved references are errors. \par If the library directory contains any library files, each library file is searched once, in the order in which it appears in the catalog.  If any subroutine has a name or global label corresponding to an unresolved reference, it is placed in the load module.  A subroutine selected in this manner can have its own unresolved references, which are then resolved during the rest of the library search.  Subroutines may appear in the library in any order. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\v\f4\fs20 \par }{\f4\fs20 Having found all of the subroutines it can, the link editor proceeds to pass two of the link edit.  Pass two produces an EXE type output file with the KEEP file name as its file name.  If there are no errors, the program is ready to be executed.  The executable file can be executed directly from ORCA by simply typing the name of the file.\par \par }\pard \keep\keepn\widctlpar\adjustright {\b\f4\fs28 Link Edit Command Parameters}{\pard\plain \keep\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Link Edit Command Parameters\tcl2}}}{\b\f4\fs28 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 Several link edit options are available.  These are entered as parameters to the LINK command.  Default parameters are indicated by an underline.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \fi-620\li620\widctlpar\tx620\adjustright {\f6\fs20 LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile}{\f6\fs20  [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \par LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile1}{\f6\fs20  }{\i\f6\fs20 objectfile2}{\f6\fs20   ... [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ] \par }\pard \fi-1440\li1890\widctlpar\tx1890\adjustright {\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 link map}}}{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:linker}}}{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\v\f4\fs20 \par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-1440\li1440\widctlpar\tx1800\adjustright {\f4\fs20 +B|}{\f4\fs20\ul -B}{\f4\fs20 \tab \tab }{\pard\plain \qj\fi-1440\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bank relative programs}}}{\f4\fs20 The +B flag tells the linker to create a bank relative program.  Each load segment in a bank relative program must be aligned to a 64K bank boundary by the loader.  When the current version of the Apple IIGS loader loads a bank relative program, it also purges virtually all purgeable memory, which could slow down operations of programs like the ORCA shell, which allows several programs to stay in memory.  Bank relative programs take up less disk space than fully relocatable programs, and they load faster, since all two-byte relocation information can be resolved at link time, rather than creating relocation records for each relocatable address.\par \par }{\f4\fs20\ul +C}{\f4\fs20 |-C\tab \tab }{\pard\plain \qj\fi-1440\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 compaction}}}{\f4\fs20 Executable files are normally compacted, which means some relocation information is packed into a compressed form.  Compacted files load faster and use less room on disk than uncompacted files.  To create an executable file that is not compacted, use the -C flag.\par \par +L|}{\f4\fs20\ul -L}{\f4\fs20 \tab \tab If you specify +L, a link map of the segments in the object file (including the starting address, the length in hexadecimal of each segment, and the segment type) is produced.\par \par +S|}{\f4\fs20\ul -S}{\f4\fs20 \tab \tab If you specify +S, the linker produces an alphabetical listing of all global labels and labels that appeared in data areas.\par \par }{\f4\fs20\ul +X}{\f4\fs20 |-X\tab \tab }{\pard\plain \qj\fi-1440\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressed files}}}{\f4\fs20 Executable files are normally expressed, which means they have an added header and some internal fields in the code image are expanded.  Expressed files load from disk faster than files that are not expressed, but they require more disk space.  You can tell the linker not to express a file by using the -X flag.\par \par }{\i\f4\fs20 objectfile}{\f4\fs20 \tab \tab The full path name, including file name, minus file name extensions, of the object file to be linked.  All modules to be linked must have the same file name, except for extensions, and must be in the same directory.  For example, the program TEST might consist of object modules named TEST.ROOT, and TEST.A located in :ORCA:ORSON:.  In this case, you would use :ORCA:ORSON:TEST for objectfile.  Partial path names, as always, can be used.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1440\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\pard\plain \qj\fi-1440\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load files}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\fi-1440\li1440\widctlpar\tx1800\adjustright {\i\f4\fs20 objectfile1 objectfile2...  }{\f4\fs20 You can link several object or library files into one load file with a single LINK command.  Include the full or partial path names, minus file name extensions, of all the object or library files to be included.  Separate the path names with blanks.  The first file named, }{\i\f4\fs20 objectfile1}{\f4\fs20 , must have a .ROOT file; for the other object files, the .ROOT file is optional.  Note that library files can be specified here, as well as object files.\par }{\pard\plain \qj\fi-1440\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\fi-1440\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{LinkName\} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 \par Keep=}{\i\f4\fs20 outfile}{\f4\fs20 \tab \tab Use this parameter to specify the path name or partial path name, including the file name, of the executable load file.  If the \{LinkName\} variable is not used, this parameter is required to produce an executable file.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 Specifying the Keep Name with a Shell Variable}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Specifying the Keep Name with a Shell Variable\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 keep name}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker\:output name}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{LinkName\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The linker will not create an executable program unless you provide a name through some mechanism.  One way to give the linker an output file name is by using a keep directive in your assembly language source file, then using one of the commands like RUN that combine the assemble and link step.  Another was to specify a link name is by typing the name explicitly when you use the LINK command, RUN command, etc.\par Both of these methods, though, require you to provide a file name in every program or on every assemble or link command.  By using the shell variables \{KeepName\} or \{LinkName\}, you can set up an output name that will be used at all times.\par The \{KeepName\} shell variable provides a default name used by the commands that assemble a program or assemble and link a program.  Setting the \{KeepName\} shell variable is equivalent to typing the same name each and every time the RUN command, CMPL command, and so forth are used.  If an explicit keep parameter is coded on one of these commands, though, the value of the \{KeepName\} shell variable is ignored.\par The \{LinkName\} shell variable is used to provide a different default for executable files.  If the \{LinkName\} shell variable is used, the linker ignores the \{KeepName\} shell variable, using the value specified by \{LinkName\} for all executable files, unless a keep parameter is explicitly coded.\par There are two special characters used with these variables that affect the automatic naming: % and $.  Using the % will cause the shell to substitute the source file name.  Using $ expands to the file name with the last extension removed (the last period (.) and trailing characters).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Specifying the File Type with a Shell Variable}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Specifying the File Type with a Shell Variable\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepType\} shell variable}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{AuxType\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 By default, the linker creates files with a file stamp of EXE and an auxiliary file type of $0100.  You can use the FILETYPE command to change the file type and auxiliary file type after the program has been created, or you can use the \{KeepType\} shell variable or \{AuxType\} shell variables to specify the file type and auxiliary file type before creating the program.\par The \{KeepType\} variable should be set to a single value, specified as a hexadecimal or decimal integer, or a three-letter GS/OS file type.  The KeepType string sets the file type for the executable file produced by the linker.  Legal file types are $B3 to $BF.  Legal file descriptors are: EXE, S16, RTL, STR, NDA, LDA, TOL, etc.\par The \{AuxType\} shell variable should also be set to a single value, which must be specified as a decimal or hexadecimal integer.  The AuxType string sets the auxiliary file type for the executable file produced by the linker.  Any value from 0 to 65535 ($FFFF) can be used.  A common setting for the AuxType shell variable is $DB01, marking the program as GS/OS aware.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Link Editor Output}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Link Editor Output\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In addition to generating the load module, the link editor can produce printed output, showing exactly what it did.  To get a listing of the segments in the load module, use +L.  To get a global symbol table use +S.  To explain the format of the linker output, a sample is shown below.  The first sample shows the output without the symbol table or segment list.  The second shows output with both the global symbol table and segment list.  An error was purposely introduced to show how they are listed.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \widctlpar\adjustright {\f6\fs18 Link Editor 2.0\par \par Pass 1: ...\par Pass 2: ..\par Error at 00000040 past COMMON PC = 0000004A : Unresolved reference Label: CHAR\par .\par \par 1 error found during link\par 8 was the highest error level\par \par There is 1 segment, for a length of $000000E2 bytes.\par }\pard \keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Figure 14.1  Link Editor Output without Symbol Table or Segment List\par }{\pard\plain \qc\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker\:output\bxe }}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \par \par }\pard \widctlpar\adjustright {\f6\fs18 Link Editor 2.0 B1\par \par Segment:\par \par \par 00000000 0000000A 01 Code: MAIN\par 0000000A 00000064 01 Data: COMMON\par Error at 00000040 past COMMON PC = 0000004A : Unresolved reference Label: CHAR\par 0000006E 00000074 01 Code: INIT\par \par Global symbol table:\par \par 0000000A G 01 01 COMMON                     0000006E G 01 00 INIT\par 00000000 G 01 00 MAIN                       \par \par \par Segment Information:\par \par   Number    Name        Type     Length       Org\par \par      1                  $00      $000000E2    Relocatable\par \par 1 error found during link\par 8 was the highest error level\par \par There is 1 segment, for a length of $000000E2 bytes.\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Figure 14.2  Link Editor Output with Symbol Table and Segment List\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Output With -S and -L Options}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Output With -S and -L Options\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 During the first and second pass of the linker, there are messages telling you how far the link process has progressed.  The dots (.) after the words }{\f6\fs18 Pass 1}{\f4\fs20   and }{\f6\fs18 Pass 2 }{\f4\fs20 indicate the number of object module segments that were processed by that pass.  In the example shown above, an error occurred during pass two.  In this case, the error is an unresolved reference label.  This means that the linker could not find a reference to the label }{\f6\fs18 CHAR}{\f4\fs20 .  There is a list of error messages and their meanings in Appendix A.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4 The Segment Table}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Segment Table\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 segments}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If +L is specified, the code segment table is printed on pass two.  Code segments are the segments you create in the assembly language source file by breaking your program up into subroutines using the START directive, DATA directive, PRIVATE directive, and PRIVDATA directive.  The segment table lists the displacement into the load segment where the program segment starts, the length of the program segment, the load segment number, the segment type, and its name.  If an error occurs, the error message appears in the segment table.\par At the end of the link, the linker also lists the load segment table.  Load segments are the individual pieces of the program loaded into memory by the System Loader or by ExpressLoad.  Unless you specify a segment name as the operand for the START directive, DATA directive, PRIVATE directive, or PRIVDATA directive, the linker only produces one load segment, which has no name and is called the blank segment.  This is the load segment you see in Figure 14.2; it has a load segment number of 1, no name, a type of $00 (a static code segment), a length of $00E2, and is relocatable.\par The load segment number shown in column 1 of the load segment table can be matched with the load segment numbers from column 3 of the code segment list to find out which code segments ended up in which load segments.  In this example, there was only one load segment, so all of these numbers are 1.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4 Global Symbol Table}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Global Symbol Table\tcl3}}}{\b\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:linker}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:linker}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the +S parameter was specified on the command line, the listing continues with an alphabetized global symbol table.  In the global symbol table, there are three numbers and a letter to the left of each symbol.  The first number is hexadecimal; it gives the offset for the symbol.  Next comes a letter.  It is G for symbols that can be used from any source file, and P for private symbols, which can only be used from the source file they were defined in.  The next number tells which source file a symbol was defined in.  The last number indicates whether the symbol is for code or data area (00 - code, 01, 02 - data area).  If the symbol is in a data area, the number indicates which one.  All symbols defined in the same data area have the same number.  If errors occurred, the linker then lists the number of errors and the highest error level encountered.  The error level tells how severe the error was.  Error levels are described in Appendix A.  Finally, the linker gives all load segments along with their type, length, and load location.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Program Segmentation}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Program Segmentation\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 program segmentation\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The executable load file produced by the linker consists of one or more load segments.  For most programs that are written in assembly language, the entire program is grouped into a single load segment.  When the program is executed, the loader (a program built into GS/OS) loads the load segment into a free area of memory, relocating the code as necessary, and executes it.  The program can then make calls to the memory manager to allocate work space from the memory that is still not being used.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bank boundary}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Address not in current bank error}}}{\v\f4\fs20 \par }{\f4\fs20 Due to the design of the 65816, it is not possible for a program to execute across a bank boundary.  (A bank is the 64K of memory, where each byte's address has the same first byte.  For example, $020000, $020001, ... $02FFFF are all in bank 2.)  Because of this restriction, it is necessary to limit relocatable load segments to 64K.  Understanding the technical reasoning is not important here \endash  what is important is to realize that this places an upper limit on the size of a program that consists of a single segment.  It your program exceeds 64K in size, you will need to split it into more than one segment.  You will know that this is necessary when the linker starts giving the error message }{\f6\fs18 Address is not in current bank}{\f4\fs20 , and the program size is greater than $FFFF.\par To split your program into more than one segment, you must place load segment names after the START, DATA, PRIVATE or PRIVDATA directives that start each of your code segments.  The syntax for doing this is discussed in the assembler reference manual where these directives are described.  The segments do not have to be in any particular order.  The linker will create one load segment for each unique load segment name, grouping all of the code segments with the same load segment name into the same load segment.  Note that the linker recognizes a special load segment with no name, called the blank segment.  It is the blank segment that you normally create when you write a program that does not have load segment names specified in the operand field of the START, DATA, PRIVATE or PRIVDATA directives.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\v\f4\fs20 \par }{\f4\fs20 As an example, consider the following short program that simply hops around between three segments, called SEG1, SEG2, and the blank segment.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\v\f4\fs20 \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18 \par          mcopy MyProg.Macros\par          keep  Prog\par Main     start\par          phk\par          plb\par          jsl   Sub1\par          jsl   Sub2\par          jsl   Sub3\par          lda   #0\par          rtl\par          end\par \par Sub1     start SEG1\par          puts  #'Hello from Sub1',CR=T\par          rtl\par          end\par \par Sub2     start SEG2\par          puts  #'Hello from Sub2',CR=T\par          rtl\par          end\par \par Sub3     start SEG1\par          puts  #'Hello from SUB3',CR=T\par          rtl\par          end\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The linker will create a program with three load segments.  Since the first segment assembled is the blank segment, that is the one that will be executed first.  The blank load segment will consist of the subroutine MAIN.  The second segment will be SEG1.  It will contain SUB1 and SUB3.  The last segment, called SEG2, will contain SUB2.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long addressing}}}{\v\f4\fs20 \par }{\f4\fs20 The loader is free to put segments wherever it finds room in memory.  Naturally, that means that you cannot count on the segments being in the same bank of memory, so long addressing must be used.  That is why JSL and RTL instructions were used, instead of the shorter and faster JSR and RTS that you would use in a program that consisted of a single segment.  Long addressing must also be used on loads and stores that cross into another load segment.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Creating Library Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Creating Library Files\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries\:creating\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MAKELIB command}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Several library subroutines are included with the assembler, ready to be used automatically by the link editor.  New library files can also be created using the MAKELIB utility.  As an example of the MAKELIB command, suppose that you wish to create an arithmetic library called ARITHLIB containing the four routines add, subtract, multiply, and divide.  The process to build ARITHLIB is as follows:\par }\pard \qj\widctlpar\tx360\adjustright {\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source files}}}{\v\f4\fs20 \par }\pard \qj\fi-184\li634\widctlpar\tx634\adjustright {\f4\fs20 \par 1.\tab Create the four source files in which each library subroutine (ADD, SUBTRACT, MULTIPLY, and DIVIDE) is a separate segment.\par }{\pard\plain \qj\fi-184\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\pard\plain \qj\fi-184\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi-184\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par 2.\tab Assemble the programs, specifying a unique name for each program with the KEEP parameter in the ASSEMBLE command (or KEEP directive in source file).  Start each program with a dummy segment that does not need to be in the library.\par \par }\pard \qj\fi-184\li634\widctlpar\tx634\tx990\adjustright {\b\f6\fs18 \tab \tab ASSEMBLE ADD KEEP=ADD\par \tab \tab ASSEMBLE SUBTRACT KEEP=SUBTRACT\par \tab \tab ASSEMBLE MULTIPLY KEEP=MULTIPLY\par \tab \tab ASSEMBLE DIVIDE KEEP=DIVIDE\par }\pard \qj\fi-184\li634\widctlpar\tx634\adjustright {\f4\fs20 \par \tab Each multi-segment program is saved as two object files, one with the extension .ROOT, and one with the extension .A.\par \par 3.\tab Run the MAKELIB utility, specifying each object file to be included in the library file.  For example, if you assembled the four files, creating the object files ADD.ROOT, ADD.A, SUBTRACT.ROOT, SUBTRACT.A, MULTIPLY.ROOT, MULTIPLY.A, DIVIDE.ROOT, DIVIDE.A and your library file is named ARITHLIB, then your command line should be as follows:\par \par }\pard \fi-1260\li2340\widctlpar\adjustright {\b\f6\fs14 MAKELIB ARITHLIB +ADD.A +SUBTRACT.A +MULTIPLY.A +DIVIDE.A\par }\pard \qj\fi-184\li634\widctlpar\tx634\adjustright {\f4\fs18 \par \tab }{\f4\fs20 The .ROOT files, which contained the dummy segments, do not need to be in the library.\par }{\pard\plain \qj\fi-184\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Libraries prefix}}}{\pard\plain \qj\fi-184\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MOVE command}}}{\v\f4\fs20 \par }{\f4\fs20 \par 4.\tab Place the new library file in the LIBRARIES: subdirectory.  (You can accomplish this in step 3 by specifying 13:ARITHLIB for the library file, or you can use the MOVE command after the file is created to directly copy the library file into the library prefix and delete ARITHLIB from the current prefix.)\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Linker Script Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Linker Script Files\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker\:script files}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The linker has a simple scripting mode that lets you create files to control the link process.  These files can help you organize a project by placing the link information in a separate file.\par Script files must be SRC files, just like source files for the compilers.  The script files have a language stamp of LINKER.\par The script file consists of comments, flags, file names, and keep names.  At least one file name must appear in the script file; all other information is optional.\par Comments include blank lines and any line that starts with a '*', '!' or ';' character.\par The flags portion consists of any of the following flags.\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 +b +c +l +m +s +w +x\par -b -c -l -m -s -w -x\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f4\fs20 All of these flags can also appear on the command line.  They have the same meaning in the script file as they do when used with the LINK command.  You can code duplicate flags, and you can use uppercase or lowercase letters.  If you code a flag in the script file, and also use the same flag from the command line when you run the script, the command line flag will override the flag used in the script file.  All flags are optional.\par }{\pard\plain \fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\f4\fs20 Flags are followed by object file names and library file names.  You can use any legal GS/OS file name that does not include a space.  You can use colons or slashes to indicate directories.  You can specify the file names as a file name only, a partial path name, or a full path name.  You must have at least one object file name.  Basically, the file names are coded exactly like you would code them for the LINK command, except that you can use as many names as you like, and put them on separate lines in the script file.\par The list of file names is followed by a keep name, which is optional.  If a keep name is specified when you run the script, the keep name on the command line will override the keep name in the script file.  The keep name is coded just like it is with the link command, as "keep=" followed by the file name.\par Here's a sample script to show how some of these ideas can be put to use:\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 *\par * Sample linker script\par *\par \par * Create a bank-relative program\par         +b\par \par * Don't express load the program\par         -x\par \par * Create a link map\par         +l +s\par \par * Link the program's object files\par         main\par         windows menus\par         animation\par         calc\par \par * Use our special animation library\par         :mydisk:mylibs:animlib\par \par * Save the resulting program\par         keep=:mydisk:prog\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To execute a linker script, use the COMPILE, ASSEMBLE, ASML, CMPL, ASMLG, CMPLG or RUN command.  List the name of the linker script, along with any flags or keep names you wish to add.  You can put the linker script on the same line as other source files, so long as it comes last.  For example, assuming our sample script is called linkit, the following command will compile the main program, then link and execute it.\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 run main.asm linkit\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker\bxe }{\rxe bk3}}}{\v\f4\fs20 \par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 15: The Resource Compiler\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 15\par The Resource Compiler\par }\pard \qj\widctlpar\adjustright {\f4 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 15 \endash  The Resource Compiler\tcl1}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This chapter describes the use and operation of the resource compiler.  Key points covered in this chapter are:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab Creation of resource description files (Rez source files).\par \par \bullet \tab Creating and using resource type statements.\par \par \bullet \tab Using Rez to compile a resource description file to create a resource fork.\par \par \bullet \tab Command, options, and capabilities of the resource compiler.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Overview}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Overview\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Resource Compiler compiles a text file (or files) called a resource description file and produces a resource file as output.  The resource decompiler, DeRez, decompiles an existing resource, producing a new resource description file that can be understood by the resource compiler.\par Resource description files have a language type of REZ.  By convention, the name of a resource description file ends with .rez.  The REZ shell command enables you to set the language type to the rez language.\par The resource compiler can combine resources or resource descriptions from a number of files into a single resource file.  The resource compiler supports preprocessor directives that allow you to substitute macros, include other files, and use if-then-else constructs.  (These are described under "Preprocessor Directives" later in this chapter.)\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Resource Decompiler}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Resource Decompiler\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }{\f4\fs20 The DeRez utility creates a textual representation of a resource file based on resource type declarations identical to those used by the resource compiler.  (If you don't specify any type declarations, the output of DeRez takes the form of raw data statements.)  The output of DeRez is a resource description file that may be used as input to the resource compiler.  This file can be edited using the ORCA editor, allowing you to add comments, translate resource data to a foreign language, or specify conditional resource compilation by using the if-then-else structures of the preprocessor.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Type Declaration Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Type Declaration Files\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The resource compiler and DeRez automatically look in the 13:RInclude directory, as well as the current directory, for files that are specified by file name on the command line.  They also look in these directories for any files specified by a #include preprocessor directive in the resource description file.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using the Resource Compiler and DeRez}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Using the Resource Compiler and DeRez\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The resource compiler and DeRez are primarily used to create and modify resource files.  The resource compiler can also form an integral part of the process of building a program.  For instance, when putting together a desk accessory or driver, you could use the resource compiler to combine the linker's output with other resources, creating an executable program file.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Structure of a Resource Description File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Structure of a Resource Description File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resource description file}}}{\v\f4\fs20 \par }{\f4\fs20 The resource description file consists of resource type declarations (which can be included from another file) followed by resource data for the declared types.  Note that the resource compiler and resource decompiler have no built-in resource types.  You need to define your own types or include the appropriate .rez files.\par A resource description file may contain any number of these statements:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4\fs20 include\tab Include resources from another file.\par read\tab Read the data fork of a file and include it as a resource.\par data\tab Specify raw data.\par type\tab Type declaration \endash  declare resource type descriptions for subsequent }{\i\f4\fs20 resource}{\f4\fs20  statements.\par resource\tab Data specification \endash  specify data for a resource type declared in previous }{\i\f4\fs20 type}{\f4\fs20  statements.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Each of these statements is described in the sections that follow.\par A type declaration provides the pattern for any associated resource data specifications by indicating data types, alignment, size and placement of strings, and so on.  You can interspace type declarations and data in the resource description file so long as the declaration for a given resource precedes any resource statements that refer to it.  An error is returned if data (that is, a }{\i\f4\fs20 resource}{\f4\fs20  statement) is given for a type that has not been previously defined.  Whether a type was declared in a resource description file or in a #include file, you can redeclare it by providing a new declaration later in a resource description file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:comments}}}{\v\f4\fs20 \par }{\f4\fs20 A resource description file can also include comments and preprocessor directives.  Comments can be included any place white space is allowed in a resource description file by putting them within the comment delimiters /* and */.  Note that comments do not nest.  For example, this is one comment:\par \par }{\f6\fs18 /* Hello /* there */\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 The resource compiler also supports the use of // as a comment delimiter.  And characters that follow // are ignored, up to the end of the current line.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 type 0x8001 \{ // the rest of this line is ignored\par }{\f4\fs20 \par Preprocessor directives substitute macro definitions and include files, and provide if-then-else processing before other resource compiling takes place.  The syntax of the preprocessor is very similar to that of the C-language preprocessor.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Sample Resource Description File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Sample Resource Description File\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An easy way to learn about the resource description format is to decompile some existing resources.  For example, the following command decompiles only the rIcon resources in an application called Sample, according to the declaration in 13:RInclude:Types.rez.\par \par }{\f6\fs18 derez sample -only 0x8001 types.rez >derez.out\par }{\f4\fs20 \par Note that DeRez automatically finds the file types.rez in 13:RInclude.  After executing this command, the file derez.out would contain the following decompiled resource:\par \par }{\f6\fs18 resource 0x8001  (0x1)  \{\par       0x8000,\par       20,\par       28\par       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par       $"FFFF FF00 0000 0000 0000 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par       $"0000 0000 0000 0000 0000 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0000 0000 0000 0000 0000 0000 0000"\par \};\par }{\f4\fs20 \par Note that this statement would be identical to the resource description in the original resource description file, with the possible exception of minor differences in formatting.  The resource data corresponds to the following type declaration, contained in types.rez:\par \par }\pard \widctlpar\adjustright {\f6\fs18 /*-------------------------- rIcon -----------------------*/\par type rIcon \{\par         hex integer;                /* Icon Type bit 15  1 = color, 0 = mono */\par image:\par         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par         integer;                    /* height of icon in pixels */\par         integer;                    /* width of icon in pixels */\par         hex string [$$Word(image)]; /* icon image */\par mask:\par         hex string;                 /* icon mask */\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Type and resource statements are explained in detail in the reference section that follows.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Resource Description Statements}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Resource Description Statements\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes the syntax and use of the five types of resource description statements available for the resource compiler:  include, read, data, type and resource.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Syntax Notation}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Syntax Notation\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The syntax notation in this chapter follows the conventions used earlier in the book.  In addition, the following conventions are used:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab Words that are part of the resource description language are shown in the Courier font to distinguish them from surrounding text.  The resource compiler is not sensitive to the case of these words.\par \par \bullet \tab Punctuation characters such as commas (,), semicolons (;), and quotation marks (' and ") are to be written as shown.  If one of the syntax notation characters (for example, [ or ]) must be written as a literal, it is shown enclosed by "curly" single quotation marks (\lquote ...\rquote ); for example,\par \par }{\f6\fs18 \tab bitstring}{\f4\fs20  \lquote [\rquote  }{\i\f4\fs20 length}{\f4\fs20  \lquote ]\rquote \par \par \tab In this case, the brackets would be typed literally \endash  they do }{\i\f4\fs20 not}{\f4\fs20  mean that the enclosed element is optional.\par \par \bullet \tab Spaces between syntax elements, constants, and punctuation are optional they are shown for readability only.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Tokens in resource description statements may be separated by spaces, tabs, returns, or comments.\par There are three terms used in the syntax of the resource description language that have not been used earlier to describe the shell.  The are:\par \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\i\f4\fs20 resource-ID}{\f4\fs20 \tab A long expression.  (Expressions are defined later.)\par }{\i\f4\fs20 resource-type}{\f4\fs20 \tab A word expression.\par }{\i\f4\fs20 ID-range}{\f4\fs20 \tab A range of }{\i\f4\fs20 resource-ID}{\f4\fs20 s, as in }{\i\f4\fs20 ID}{\f4\fs20 [:}{\i\f4\fs20 ID}{\f4\fs20 ].\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Include \endash  Include Resources from Another File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Include \endash  Include Resources from Another File\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resource description file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:include statement}}}{\v\f4\fs20 \par }{\f4\fs20 The include statement lets you read resources from an existing file and include all or some of them.\par An }{\f6\fs18 include}{\f4\fs20  statement can take the following forms:\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\f4\fs20 \bullet \tab }{\f6\fs18 include}{\f4\fs20  }{\i\f4\fs20 file}{\f4\fs20  [ }{\i\f4\fs20 resource-type}{\f4\fs20  [ \lquote }{\f6\fs18 (}{\f4\fs20 \rquote }{\i\f4\fs20 ID}{\f4\fs20 [:}{\i\f4\fs20 ID}{\f4\fs20 ]\lquote }{\f6\fs18 )}{\f4\fs20 \rquote ]]}{\f6\fs18 ;}{\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \par \tab Read the resource of type }{\i\f4\fs20 resource-type}{\f4\fs20  with the specified resource ID range in }{\i\f4\fs20 file}{\f4\fs20 .  If the resource ID is omitted, read all resources of the type }{\i\f4\fs20 resource-type}{\f4\fs20  in }{\i\f4\fs20 file}{\f4\fs20 .  If }{\i\f4\fs20 resource-type}{\f4\fs20  is omitted, read all the resources in }{\i\f4\fs20 file}{\f4\fs20 .\par \par \bullet \tab }{\f6\fs18 include}{\f4\fs20  }{\i\f4\fs20 file}{\f4\fs20   }{\f6\fs18 not}{\f4\fs20  }{\i\f4\fs20 resource-type}{\f4\fs20  }{\f6\fs18 ;}{\f4\fs20 \par \par \tab Read all resources in }{\i\f4\fs20 file}{\f4\fs20  that are not of the type }{\i\f4\fs20 resource-type}{\f4\fs20 .\par \par \bullet \tab }{\f6\fs18 include}{\f4\fs20  }{\i\f4\fs20 file}{\f4\fs20  }{\i\f4\fs20 resource-type1}{\f4\fs20  }{\f6\fs18 as}{\f4\fs20  }{\i\f4\fs20 resource-type2}{\f6\fs18 ;}{\f4\fs20 \par \par \tab Read all resources of type }{\i\f4\fs20 resource-type1}{\f4\fs20  and include them as resources of }{\i\f4\fs20 resource-type2}{\f4\fs20 .\par \par \bullet \tab }{\f6\fs18 include}{\f4\fs20  }{\i\f4\fs20 file}{\f4\fs20  }{\i\f4\fs20 resource-type1}{\f4\fs20  \lquote }{\f6\fs18 (}{\f4\fs20 \rquote }{\i\f4\fs20 ID}{\f4\fs20 [:}{\i\f4\fs20 ID}{\f4\fs20 ]\lquote }{\f6\fs18 )}{\f4\fs20 \rquote \par \tab \tab }{\f6\fs18 as}{\f4\fs20  }{\i\f4\fs20 resource-type2 }{\f4\fs20 \lquote }{\f6\fs18 (}{\f4\fs20 \rquote }{\i\f4\fs20 ID}{\f4\fs20 [}{\f6\fs18 ,}{\i\f4\fs20 attributes...}{\f4\fs20 ]\lquote }{\f6\fs18 )}{\f4\fs20 \rquote }{\f6\fs18 ;}{\f4\fs20 \par \par \tab Read the resource in }{\i\f4\fs20 file}{\f4\fs20  of type }{\i\f4\fs20 resource-type1}{\f4\fs20  with the specified ID range, and include it as a resource of }{\i\f4\fs20 resource-type2}{\f4\fs20  with the specified ID.  You can optionally specify resource attributes.  (See "Resource Attributes," later in this section.)\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Examples:\par \par }\pard \qj\fi720\widctlpar\tx3780\adjustright {\f6\fs18 include "otherfile";\tab /* include all resources from the file */\par include "otherfile" rIcon;\tab /* read only the rIcon resources */\par include "otherfile" rIcon (128);\tab /* read only rIcon resource 128 */\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 AS Resource Description Syntax\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The following string variables can be used in the as resource description to modify the resource information in }{\f6\fs18 include}{\f4\fs20  statements:\par \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 $$Type}{\f4\fs20 \tab Type of resource from include file.\par }{\f6\fs18 $$ID}{\f4\fs20 \tab ID of resource from include file.\par }{\f6\fs18 $$Attributes}{\f4\fs20 \tab Attributes of resource from include file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par For example, to include all }{\f6\fs18 rIcon}{\f4\fs20  resources from one file and keep the same information but also set the preload attribute (64 sets it):\par \par }{\f6\fs18 INCLUDE "file" rIcon (0:40) AS rIcon ($$ID, $$Attributes | 64);\par }{\f4\fs20 \par The }{\f6\fs18 $$Type}{\f4\fs20 , }{\f6\fs18 $$ID}{\f4\fs20 , and }{\f6\fs18 $$Attributes}{\f4\fs20  variables are also set and legal within a normal resource statement.  At any other time the values of these variables are undefined.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Resource Attributes\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:resource attributes}}}{\v\f4\fs20 \par }{\f4\fs20 You can specify attributes as a numeric expression (as described in the }{\i\f4\fs20 Apple IIGS Toolbox Reference}{\f4\fs20 , Volume 3) or you can set them individually by specifying one of the keywords from any of the sets in Table 15.1.  You can specify more than one attribute by separating the keywords with a comma (,).\par \par }\pard \fi-3420\li3780\keepn\widctlpar\tx1980\adjustright {\f4\fs20\ul Default}{\f4\fs20 \tab }{\f4\fs20\ul Alternative}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par }{\f6\fs18 unlocked}{\f4\fs20 \tab }{\f6\fs18 locked}{\f4\fs20 \tab Locked resources cannot be moved by the Memory Manager.\par }{\f6\fs18 moveable}{\f4\fs20 \tab }{\f6\fs18 fixed}{\f4\fs20 \tab Specifies whether the Memory Manager can move the block when it is unlocked.\par }{\f6\fs18 nonconvert}{\f4\fs20 \tab }{\f6\fs18 convert}{\f4\fs20 \tab Convert resources require a resource converter.\par }{\f6\fs18 handleload}{\f4\fs20 \tab }{\f6\fs18 absoluteload}{\f4\fs20 \tab Absolute forces the resource to be loaded at an absolute address.\par }{\f6\fs18 nonpurgeable}{\f4\fs20 \tab }{\f6\fs18 purgeable1}{\f4\fs20 \tab Purgeable resources can be automatically purged by \par \tab }{\f6\fs18 purgeable2}{\f4\fs20 \tab the Memory Manager.  Purgeable3 are purged\par \tab }{\f6\fs18 purgeable3}{\f4\fs20 \tab before purgeable2, which are purged before purgeable1.\par }{\f6\fs18 unprotected}{\f4\fs20 \tab }{\f6\fs18 protected}{\f4\fs20 \tab Protected resources cannot be modified by the Resource Manager.\par }{\f6\fs18 nonpreload}{\f4\fs20 \tab }{\f6\fs18 preload}{\f4\fs20 \tab Preloaded resources are placed in memory as soon as the Resource Manager opens the resource file.\par }{\f6\fs18 crossbank}{\f4\fs20 \tab }{\f6\fs18 nocrossbank}{\f4\fs20 \tab A crossbank resource can cross memory bank boundaries.  Only data, not code, can cross bank boundaries.\par }{\f6\fs18 specialmemory}{\f4\fs20 \tab }{\f6\fs18 nospecialmemory}{\f4\fs20 \tab A special memory resource can be loaded in banks $00, $01, $E0 and $E1.\par }{\f6\fs18 notpagealigned}{\f4\fs20 \tab }{\f6\fs18 pagealigned}{\f4\fs20 \tab A page-aligned resource must be loaded with a starting address that is an even multiple of 256.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 15.1  Resource Attribute Keywords\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Read \endash  Read Data as a Resource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Read \endash  Read Data as a Resource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 read}{\f4\fs20  }{\i\f4\fs20 resource-type}{\f4\fs20  \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID}{\f4\fs20  [ }{\f6\fs18 ,}{\f4\fs20  }{\i\f4\fs20 attributes}{\f4\fs20  ] \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  }{\i\f4\fs20 file}{\f4\fs20  }{\f6\fs18 ;}{\f4\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:read statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 read}{\f4\fs20  statement lets you read a file's data fork as a resource.  It reads the data fork from }{\i\f4\fs20 file}{\f4\fs20  and writes it as a resource with the type }{\i\f4\fs20 resource-type}{\f4\fs20  and the resource ID }{\i\f4\fs20 ID}{\f4\fs20 , with the optional resource attributes.\par Example:\par \par }{\f6\fs18 read rText (0x1234, Purgeable3) "filename";\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Data \endash  Specify Raw Data}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Data \endash  Specify Raw Data\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 data}{\f4\fs20  }{\i\f4\fs20 resource-type}{\f4\fs20  \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID}{\f4\fs20  [ }{\f6\fs18 ,}{\f4\fs20  }{\i\f4\fs20 attributes}{\f4\fs20  ] \lquote }{\f6\fs18 )}{\f4\fs20 \rquote   \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote  \par \tab }{\i\f4\fs20 data-string}{\f4\fs20 \par \tab \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote  }{\f6\fs18 ;}{\f4\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:data statement}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Use the }{\f6\fs18 data}{\f4\fs20  statement to specify raw data as a sequence of bits, without any formatting.\par The data found in }{\i\f4\fs20 data-string}{\f4\fs20  is read and written as a resource with the type }{\i\f4\fs20 resource-type}{\f4\fs20  and the ID }{\i\f4\fs20 ID}{\f4\fs20 .  You can specify resource attributes.\par When DeRez generates a resource description, it used the data statement to represent any resource type that doesn't have a corresponding type declaration or cannot be decompiled for some other reason.\par Example:\par \par }{\f6\fs18 data rPString (0xABCD) \{\par \tab $"03414243"\par \tab \};\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Type \endash  Declare Resource Type}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Type \endash  Declare Resource Type\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 type}{\f4\fs20  }{\i\f4\fs20 resource-type}{\f4\fs20  [ \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID-range}{\f4\fs20  \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  ]  \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote  \par \tab }{\i\f4\fs20 type-specification...}{\f4\fs20 \par \tab \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote  }{\f6\fs18 ;}{\f4\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:type statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:resource types}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resources\:see Rez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A type declaration provides a template that defines the structure of the resource date for a single resource type or for individual resources.  If more than one type declaration is given for a resource type the last one read before the data definition is the one that's used.  This lets you override declarations from include files of previous resource description files.\par After the type declaration, any resource statement for the type }{\i\f4\fs20 resource-type}{\f4\fs20  uses the declaration }{\f6\fs18 \{}{\i\f4\fs20 type-specification...}{\f6\fs14 \}}{\f4\fs20 .  The optional }{\i\f4\fs20 ID-range}{\f4\fs20  specification causes the declaration to apply only to a given resource ID or range of IDs.\par }{\i\f4\fs20 Type-specification}{\f4\fs20  is one or more of the following kinds of type specifier:\par \par }\pard \qj\fi360\widctlpar\tx1800\tx3240\tx4680\tx6120\adjustright {\f6\fs18 array\tab bitstring\tab boolean\tab byte\tab char\par cstring\tab fill\tab integer\tab longint\tab point\par pstring\tab rect\tab string\tab switch\tab wstring\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can also declare a resource type that uses another resource's type declaration by using the following variant of the type statement:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 type}{\f4\fs20  }{\i\f4\fs20 resource-type1}{\f4\fs20  [ \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID-range}{\f4\fs20  \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  ]  as }{\i\f4\fs20 resource-type2}{\f4\fs20  [ \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID }{\f4\fs20 \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  ] }{\f6\fs18 ;}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Integer, Longint, Byte and Bitstring\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par [ }{\f6\fs18 unsigned}{\f4\fs20  ] [ }{\i\f4\fs20 radix}{\f4\fs20  ] }{\f6\fs18 integer}{\f4\fs20  [ = }{\i\f4\fs20 expression}{\f4\fs20  | }{\i\f4\fs20 symbol-definition}{\f4\fs20  ] }{\f6\fs18 ;\par }{\f4\fs20 [ }{\f6\fs18 unsigned}{\f4\fs20  ] [ }{\i\f4\fs20 radix}{\f4\fs20  ] }{\f6\fs18 longint}{\f4\fs20  [ = }{\i\f4\fs20 expression}{\f4\fs20  | }{\i\f4\fs20 symbol-definition}{\f4\fs20  ] }{\f6\fs18 ;\par }{\f4\fs20 [ }{\f6\fs18 unsigned}{\f4\fs20  ] [ }{\i\f4\fs20 radix}{\f4\fs20  ] }{\f6\fs18 byte}{\f4\fs20  [ = }{\i\f4\fs20 expression}{\f4\fs20  | }{\i\f4\fs20 symbol-definition}{\f4\fs20  ] }{\f6\fs18 ;\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 [ }{\f6\fs18 unsigned}{\f4\fs20  ] [ }{\i\f4\fs20 radix}{\f4\fs20  ] }{\f6\fs18 bitstring}{\f4\fs20  \lquote }{\f6\fs18 [}{\f4\fs20 \rquote  }{\i\f4\fs20 length}{\f4\fs20  \lquote }{\f6\fs18 ]}{\f4\fs20 \rquote  [ = }{\i\f4\fs20 expression}{\f4\fs20  | }{\i\f4\fs20 symbol-definition}{\f4\fs20  ] }{\f6\fs18 ;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In each case, space is reserved in the resource for an integer or a long integer.\par If the type appears alone, with no other parameters, the resource compiler sets aside space for a value that must be given later when the resource type is used to define an actual resource.\par A type followed by a equal sign and an expression defines a value that will be preset to some specific integer.  Since the value is already given, you do not need to code the value again when the resource type is used to define a resource.\par A symbol-definition is an identifier, an equal sign, and an expression, optionally followed by a comma and another symbol definition.  It sets up predefined identifier that can be used to fill in the value.  You still have the option of coding a numeric value, or you can use one of the constants.  This is not a default value, though: you still must code either one of the constants or a numeric value when you use the resource type to define a resource.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\f6\fs18 unsigned}{\f4\fs20  prefix signals DeRez that the number should be displayed without a sign \endash  that the high-order bit can be used for data and the value of the integer cannot be negative.  The }{\f6\fs18 unsigned}{\f4\fs20  prefix is ignored by the resource compiler but is needed by DeRez to correctly represent a decompiled number.  The resource compiler uses a sign if it is specified in the data.  For example, $FFFFFF85 and -$7B are equivalent.\par Radix is one of the following constants:\par \par hex\tab decimal\tab octal\tab binary\tab literal\par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 The radix is used by DeRez to decide what number format to use for the output.  The radix field is ignored by the resource compiler.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each of the numeric types generates a different format of integer.  In each case, the value is in two's complement form, least significant byte first.  The various formats are:\par \par }\pard \qj\li720\widctlpar\tx2520\tx3680\adjustright {\f4\fs20\ul type}{\f4\fs20 \tab }{\f4\fs20\ul size}{\f4\fs20 \tab }{\f4\fs20\ul range}{\f4\fs20 \par byte\tab 1\tab -128..255\par integer\tab 2\tab -32768..65535\par longint\tab 4\tab -2147483648..4294967295\par bitstring[length]\tab varies\tab varies\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Sizes are in bytes.  The range may seem a little odd at first; the resource compiler accepts either negative or positive values, treating positive values that would normally be too large for a signed value of the given length as if the value were unsigned.\par The bitstring type is different from most types in other languages.  It is a variable-length integer field, where you specify the number of bits you want as the length field.  If you specify a value that only fills part of a byte, then the next field will pick up where the bitstring field stopped.  For example, two bitstring[4] values, placed back to back, would require only one byte of storage in the resource file.  In general, you should be sure that bitstring fields end on even byte values so the following fields don't get bit aligned to the end of the partially filled byte.\par \par Example:\par \par }\pard \widctlpar\adjustright {\f6\fs18 /*---------------------- rToolStartup ---------------------*/\par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rToolStartup \{\par     integer = 0;                        /* flags must be zero */\par     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par     Integer = 0;\par     Longint = 0;\par     integer = $$Countof(TOOLRECS);      /* number of tools */\par         array TOOLRECS \{\par             Integer;                    /* ToolNumber */\par             Integer;                    /* version */\par         \};\par \};\par \par \par resource rToolStartup (1) \{\par     mode640,\par     \{\par         1,1,\tab /* Tool Locator */\par         2,1,\tab /* Memory Manager */\par         3,1,\tab /* Miscellaneous Tool Set */\par         4,1,\tab /* QuickDraw II */\par         5,1,\tab /* Desk Manager */\par         6,1,\tab /* Event Manager */\par         11,1,\tab /* Integer Math Tool Set */\par         14,1,\tab /* Window Manager */\par         15,1,\tab /* Menu Manager */\par         16,1,\tab /* Control Manager */\par         18,1,\tab /* QuickDraw II Auxiliary */\par         20,1,\tab /* LineEdit Tool Set */\par         21,1,\tab /* Dialog Manager */\par         22,1,\tab /* Scrap Manager */\par         27,1,\tab /* Font Manager */\par         28,1,\tab /* List Manager */\par         30,1,\tab /* Resource Manager */\par     \}\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Boolean\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 boolean}{\f4\fs20  [ = }{\i\f4\fs20 constant}{\f4\fs20  | }{\i\f4\fs20 symbolic-value...}{\f4\fs20  ] }{\f6\fs18 ;\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A boolean value is a one-bit value, set to either false (0) or true (1).  You can also use the numeric values.\par True and false are actually predefined constants.\par The type boolean is equivalent to\par \par }{\f6\fs18 unsigned bitstring[1]\par }{\f4\fs20 \par Example:\par \par }{\f6\fs18 type 0x001 \{\par    boolean;\par    boolean;\par    boolean;\par    boolean;\par    bitstring[4] = 0;\par    \};\par \par resource 0x001 (1) \{\par    true, false, 0, 1\par    \};\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Character\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 char}{\f4\fs20  [ = }{\i\f4\fs20 string}{\f4\fs20  | }{\i\f4\fs20 symbolic-value...}{\f4\fs20  ] }{\f6\fs18 ;\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A character value is an 8-bit value which holds a one-character string.  It is equivalent to }{\f6\fs18 string[1]}{\f4\fs20 .\par \par Example:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 /*------------------------ rMenuItem ------------------------------*/\par type rMenuItem \{\par     integer = 0;                    /* version must be zero */\par     integer;                        /* item ID */\par     char;                           /* item char */\par     char;                           /* alt char */\par     integer;                        /* item check */\par     integer;                        /* flags */\par     longint;                        /* item titleref */\par \};\par \par resource rMenuItem (1) \{\par     256,\par     "Q","q",\par     0,\par     0,\par     1\par     \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 String, PString, WString and CString\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\i\f4\fs20 string-type}{\f4\fs20  [ \lquote }{\f6\fs18 [}{\f4\fs20 \rquote  }{\i\f4\fs20 length}{\f4\fs20  \lquote }{\f6\fs18 ]}{\f4\fs20 \rquote  ] [ }{\f6\fs18 =}{\f4\fs20  }{\i\f4\fs20 string}{\f4\fs20  | }{\i\f4\fs20 symbol-value...}{\f4\fs20  ] }{\f6\fs18 ;\par }{\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:strings}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 String types are used to define a string in one of four formats.  The format of the string is determined by selecting one of the following for }{\i\f4\fs20 string-type}{\f4\fs20 :\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4\fs20 [}{\f6\fs18 hex}{\f4\fs20 ] }{\f6\fs18 string}{\f4\fs20 \tab Plain string; no length indicator or terminal character is generated.  The optional }{\f6\fs18 hex}{\f4\fs20  prefix tells DeRez to display it as a hexadecimal string.  }{\f6\fs18 String[}{\i\f4\fs20 n}{\f6\fs18 ]}{\f4\fs20  contains n characters and is }{\i\f4\fs20 n}{\f4\fs20  bytes long.  The type }{\f6\fs18 char}{\f4\fs20  is a shorthand for }{\f6\fs18 string[1]}{\f4\fs20 .\par }{\f6\fs18 pstring}{\f4\fs20 \tab Pascal string; a leading byte containing the number of characters in the string is generated.  }{\f6\fs18 Pstring[}{\i\f4\fs20 n}{\f6\fs18 ]}{\f4\fs20  contains }{\i\f4\fs20 n}{\f4\fs20  characters and is }{\i\f4\fs20 n}{\f4\fs20 +1 bytes long.  Since the length must fit in a byte value, the maximum length of a pstring is 255 characters.  If the string is too long, a warning is given and the string is truncated.\par }{\f6\fs18 wstring}{\f4\fs20 \tab Word string; this is a very large pstring.  The length of a wstring is stored in a two-byte field, giving a maximum length of 65535 characters.  }{\f6\fs18 Pstring[}{\i\f4\fs20 n}{\f6\fs18 ]}{\f4\fs20  contains }{\i\f4\fs20 n}{\f4\fs20  characters and is }{\i\f4\fs20 n}{\f4\fs20 +2 bytes long.  The order of the bytes in the length word is least significant byte first; this is the normal order for bytes on the Apple IIGS.\par }{\f6\fs18 cstring}{\f4\fs20 \tab C string; a trailing null byte is added to the end of the characters.  }{\f6\fs18 Cstring[}{\i\f4\fs20 n}{\f6\fs18 ]}{\f4\fs20  contains }{\i\f4\fs20 n}{\f4\fs20 -1 characters and is }{\i\f4\fs20 n}{\f4\fs20  bytes long.  A C string of length 1 can be assigned only the value "", since }{\f6\fs18 cstring[1]}{\f4\fs20  only has room for the terminating null.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Each string type can be followed by an optional }{\i\f4\fs20 length}{\f4\fs20  indicator in brackets.  }{\i\f4\fs20 length}{\f4\fs20  is an expression indicating the string length in bytes.  }{\i\f4\fs20 length}{\f4\fs20  is a positive number in the range 1..2147483647 for string and cstring, in the range 1..255 for pstring, and in the range 1..65535 for wstring.\par If no length indicator is given, a pstring, wstring or cstring stores the number of characters in the corresponding data definition.  If a length indicator is given, the data may be truncated on the right or padded on the right.  The padding characters for all strings are nulls.  If the data contains more characters than the length indicator provides for, the string is truncated and a warning message is given.\par \par Examples:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 /*---------------------- rPString ----------------------*/\par type rPString \{\par         pstring;                    /* String */\par \};\par \par /*---------------------- rCString ----------------------*/\par type rCString \{\par         cstring;                    /* String */\par \};\par \par /*---------------------- rWString ----------------------*/\par type rWString \{\par         wstring;                    /* String */\par \};\par \par /*------------------------ rErrorString ----------------*/\par type rErrorString \{\par         string;\par \};\par \par resource rPString (1) \{\par     "p-string",\par     \};\par \par resource rCString (1) \{\par     "c-string",\par     \};\par \par resource rWString (1) \{\par     "GS/OS input string",\par     \};\par \par resource rErrorString (1) \{\par     "Oops",\par     \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Point and Rectangle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 point}{\f4\fs20  [ }{\f6\fs18 =}{\f4\fs20  }{\i\f4\fs20 point-constant}{\f4\fs20  | }{\i\f4\fs20 symbolic-value...}{\f4\fs20  ] }{\f6\fs18 ;\par rect}{\f4\fs20  [ }{\f6\fs18 =}{\f4\fs20  }{\i\f4\fs20 rect-constant}{\f4\fs20  | }{\i\f4\fs20 symbolic-value...}{\f4\fs20  ] }{\f6\fs18 ;\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Because points and rectangles appear so frequently in resource files, they have their own simplified syntax.  In the syntax shown, a point-constant is defined like this:\par \par \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote  }{\i\f4\fs20 x-integer-expression}{\f4\fs20  \lquote }{\f6\fs18 ,}{\f4\fs20 \rquote  }{\i\f4\fs20 y-integer-expression}{\f4\fs20  \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote \par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 while a rect-constant looks like this:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote  }{\i\f4\fs20 integer-expression}{\f4\fs20  \lquote }{\f6\fs18 ,}{\f4\fs20 \rquote  }{\i\f4\fs20 integer-expression}{\f4\fs20  \lquote }{\f6\fs18 ,}{\f4\fs20 \rquote  }{\i\f4\fs20 integer-expression}{\f4\fs20  \lquote }{\f6\fs18 ,}{\f4\fs20 \rquote  }{\i\f4\fs20 integer-expression}{\f4\fs20  \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote \par \par A point type creates a pair of integer values, with the first value corresponding to the horizontal point value and the second to the vertical point value.  A rect type is a pair of points, with the top left corner of the rectangle specified first, followed by the bottom right corner.\par \par Example:\par \par }\pard \widctlpar\adjustright {\f6\fs18 /*--------------------- rWindParam1 --------------------*/\par type rWindParam1 \{\par         integer = $50;              /*length of parameter list, should be $50*/\par         integer;                    /* wFrameBits */\par         longint;                    /* wTitle */\par         longint;                    /* wRefCon */\par         rect;                       /* ZoomRect */\par         longint;                    /* wColor ID */\par         point;                      /* Origin */\par         point;                      /* data size */\par         point;                      /* max height-width */\par         point;                      /* scroll ver hors */\par         point;                      /* page vers horiz */\par         longint;                    /* winfoRefcon */\par         integer;                    /* wInfoHeight */\par         fill long[3];               /* wFrameDefProc,wInfoDefProc,wContDefProc */\par         rect;                       /* wposition */\par         longint behind=0,infront=-1;/* wPlane */\par         longint;                    /* wStorage */\par         integer;                    /* wInVerb */\par \};\par \par resource rWindParam1 (1) \{\par         0x80E4,                     /* wFrameBits */\par         1,                          /* wTitle */\par         0,                          /* wRefCon */\par         \{0,0,0,0\},                  /* ZoomRect */\par         0,                          /* wColor ID */\par         \{0,0\},                      /* Origin */\par         \{416,160\},                  /* data size */\par         \{416,160\},                  /* max height-width */\par         \{0,0\},                      /* scroll ver hors */\par         \{0,0\},                      /* page vers horiz */\par         0,                          /* winfoRefcon */\par         0,                          /* wInfoHeight */\par         \{32,32,448,192\},            /* wposition */\par         infront,                    /* wPlane */\par         0,                          /* wStorage */\par         0x0200                      /* wInVerb */\par         \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Fill\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 fill}{\f4\fs20  }{\i\f4\fs20 fill-size}{\f4\fs20  [ \lquote }{\f6\fs18 [}{\f4\fs20 \rquote  }{\i\f4\fs20 length}{\f4\fs20  \lquote }{\f6\fs18 [}{\f4\fs20 \rquote  ] }{\f6\fs18 ;\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The resource created by a resource definition has no implicit alignment.  It's treated as a bit stream, and integers and strings can start at any bit.  The fill specifier is a way of padding fields so that they begin on a boundary that corresponds to the field type.\par The fill statement causes the resource compiler to add the specified number of bits to the data stream.  The bits added are always set to 0.  }{\i\f4\fs20 fill-size}{\f4\fs20  is one of the following:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx1800\tx2520\tx3240\adjustright {\f6\fs18 bit\tab nibble\tab byte\tab word\tab long\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par These declare a fill of 1, 4, 8, 16 or 32 bits, respectively.  Any of these can be followed by a }{\i\f4\fs20 length}{\f4\fs20  modifier.  }{\i\f4\fs20 length}{\f4\fs20  can be any value up to 2147483647; it specifies the number of these bit fields to insert.  For example, all of the following are equivalent:\par \par }{\f6\fs18 fill word[2];\par fill long;\par fill bit[32];\par }{\f4\fs20 \par Fill statements are sometimes used as place holders, filling in constant values of zero.  You can see an example of the fill statement used for this purpose in the rWindParam1 resource type defined in types.rez.  The example in the last section shows this resource type in use.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Array\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par [ }{\f6\fs18 wide}{\f4\fs20  ] }{\f6\fs18 array}{\f4\fs20  [ }{\i\f4\fs20 array-name}{\f4\fs20  | \lquote }{\f6\fs18 [}{\f4\fs20 \rquote  }{\i\f4\fs20 length}{\f4\fs20  \lquote }{\f6\fs18 ]}{\f4\fs20 \rquote  ] \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote  }{\i\f4\fs20 array-list}{\f4\fs20  \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote  }{\f6\fs18 ;\par }{\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:arrays}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\i\f4\fs20 array-list}{\f4\fs20  is a list of type specifications.  It can be repeated zero or more times.  The }{\f6\fs18 wide}{\f4\fs20  option outputs the array data in a wide display format when the resource is decompiled with DeRez; this causes the elements that make up the }{\i\f4\fs20 array-list}{\f4\fs20  to be separated by a comma and space instead of a comma, return, and tab.\par Either }{\i\f4\fs20 array-name}{\f4\fs20  or [}{\i\f4\fs20 length}{\f4\fs20 ] may be specified.  }{\i\f4\fs20 Array-name}{\f4\fs20  is an identifier.  If the array is named, then a preceding statement should refer to that array in a constant expression with the }{\f6\fs18 $$countof(}{\i\f4\fs20 array-name}{\f6\fs18 )}{\f4\fs20  function, otherwise DeRez will treat the array as an open-ended array.  For example,\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rToolStartup \{\par     integer = 0;                        /* flags must be zero */\par     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par     Integer = 0;\par     Longint = 0;\par     integer = $$Countof(TOOLRECS);      /* number of tools */\par         array TOOLRECS \{\par             Integer;                    /* ToolNumber */\par             Integer;                    /* version */\par         \};\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The }{\f6\fs18 $$countof(}{\i\f4\fs20 array-name}{\f6\fs18 )}{\f4\fs20  function returns the number of array elements ( in this case, the number of tool number, version pairs) from the resource data.\par If length is specified, there must be exactly }{\i\f4\fs20 length}{\f4\fs20  elements.\par Array elements are generated by commas.  Commas are element separators.  Semicolons are element terminators.\par For an example of an rToolStartup resource, see "Integer, Longint, Byte and Bitstream," earlier in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Switch\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 switch}{\f4\fs20  \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote  }{\i\f4\fs20 case-statement...}{\f4\fs20  \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote  }{\f6\fs18 ;\par }{\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:switch statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The switch statement lets you select one of a variety of types when you create your resource.  Each of the types within the switch statement are placed on a case label, which has this format:\par \par }{\f6\fs18 case}{\f4\fs20  }{\i\f4\fs20 case-name}{\f4\fs20  }{\f6\fs18 :}{\f4\fs20  }{\i\f4\fs20 [case-body}{\f4\fs20  }{\f6\fs18 ;}{\f4\fs20  ] ...\par \par }{\i\f4\fs20 Case-name}{\f4\fs20  is an identifier.  }{\i\f4\fs20 Case-body}{\f4\fs20  may contain any number of type specifications and must include a single constant declaration per case, in this form:\par \par }{\f6\fs18 key}{\f4\fs20  }{\i\f4\fs20 data-type}{\f4\fs20  }{\f6\fs18 =}{\f4\fs20  }{\i\f4\fs20 constant}{\f4\fs20 \par \par The key value determines which case applies.  For example,\par \par }\pard \li180\widctlpar\adjustright {\f6\fs18 /*------------------------ rControlTemplate ------------------------*/\par type rControlTemplate \{\par         integer = 3+$$optionalcount (Fields); /* pCount must be at least 6 */\par         longint;                                 /* Application defined ID */\par         rect;                               /* controls bounding rectangle */\par         switch \{\par         \par         case SimpleButtonControl:\par             key longint = 0x80000000;   /* procRef */\par             optional Fields \{\par                 integer;                    /* flags */\par                 integer;                    /* more flags */\par                 longint;                    /* refcon */\par                 longint;                    /* Title Ref */\par                 longint;                    /* color table ref */\par                 KeyEquiv;\par             \};\par \par         case CheckControl:\par             key longint = 0x82000000;       /* procRef */\par             optional Fields \{\par                 integer;                    /* flags */\par                 integer;                    /* more flags */\par                 longint;                    /* refcon */\par                 longint;                    /* Title Ref */\par                 integer;                    /* initial value */\par                 longint;                    /* color table ref */\par                 KeyEquiv;\par             \};\par }{\i\f6\fs18         ...and so on.\par }{\f6\fs18     \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Symbol Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Symbol Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:symbols}}}{\v\f4\fs20 \par }\pard\plain \s34\qj\fi360\widctlpar\adjustright \f12\cgrid {\f4\fs20 Symbolic names for data type fields simplify the reading and writing of resource definitions.  Symbol definitions have the form\par \par }\pard\plain \qj\fi360\widctlpar\tx500\tx1280\tx1660\adjustright \f12\cgrid {\i\f4\fs20 name}{\f4\fs20  = }{\i\f4\fs20 value }{\f4\fs20  [, }{\i\f4\fs20 name}{\f4\fs20  = }{\i\f4\fs20 value }{\f4\fs20  ]\u8230\'c9\par }\pard\plain \s34\qj\fi360\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par The \ldblquote = }{\i\f4\fs20 value }{\f4\fs20 \rdblquote  part of the statement can be omitted for numeric data.  If a sequence of values consists of consecutive numbers, the explicit assignment can be left out; if }{\i\f4\fs20 value}{\f4\fs20  is omitted,}{\i\f4\fs20  }{\f4\fs20 it is assumed to be 1 greater than the previous value.  (The value is assumed to be 0 if it is the first value in the list.)  This is true for bitstrings (and their derivatives, byte, integer, and longint). For example,\par }\pard\plain \s35\li720\widctlpar\adjustright \f6\fs20\cgrid {\b\f4 \line }{\fs18 integer Emily, Kelly, Taylor, Evan, Trevor, Sparkle=8;\par }\pard\plain \s34\qj\fi360\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par In this example, the symbolic names Emily, Kelly, Taylor, Evan, and Trevor are automatically assigned the numeric values 0, 1, 2, 3, and 4.\par Memory is the only limit to the number of symbolic values that can be declared for a single field.  There is also no limit to the number of names you can assign to a given value; for example,\par \par }\pard\plain \s35\qj\fi360\widctlpar\adjustright \f6\fs20\cgrid {\fs18 integer\tab Emily=0, Kelly=1, Taylor=2, Evan=3,\par \tab \tab Trevor=16, Sparkle=0, Twinkle=1, Raphael=2,\par \tab \tab Michaelangelo=3, Nagel=16;\par }\pard\plain \qj\fi360\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Delete \endash  Delete a Resource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Delete \endash  Delete a Resource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 delete }{\i\f4\fs20 resource-type}{\f6\fs18  }{\f4\fs20 [ \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID}{\f4\fs20  [ }{\f6\fs18 :}{\f4\fs20  }{\i\f4\fs20 ID}{\f4\fs20  ] \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  ] }{\f6\fs18 ;\par }{\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:delete statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This statement deletes the resource of resource-type with the specified ID or ID range from the resource compiler output file.  If ID or ID range is omitted, all resources of }{\i\f4\fs20 resource-type}{\f4\fs20  are deleted.\par The delete function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to delete a resource while creating a new resource file from scratch.) \par You can delete resources that have their protected bit set only if you use the \endash ov option on the resource compiler command line.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Change \endash  Change a Resource's Vital Information}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Change \endash  Change a Resource's Vital Information\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\f6\fs18 change}{\f4\fs20  }{\i\f4\fs20 resource-type1}{\f4\fs20  [ \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID}{\f4\fs20  [ }{\f6\fs18 :}{\f4\fs20  }{\i\f4\fs20 ID}{\f4\fs20  ] \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  ]\par \tab }{\i\f4\fs20 resource-type2}{\f4\fs20  \lquote (\rquote  }{\i\f4\fs20 ID}{\f4\fs20  [ , }{\i\f4\fs20 attributes... }{\f4\fs20 ] \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  }{\f6\fs18 ;}{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:change statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This statement changes the resource of }{\i\f4\fs20 resource-type1}{\f4\fs20  with the specified ID or ID range in the resource compiler output file to a resource of }{\i\f4\fs20 resource-type2}{\f4\fs20  and the specified ID.  If ID or ID range is omitted, all resources of }{\i\f4\fs20 resource-type1}{\f4\fs20  are changed.\par The change function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to change resources while creating a new resource file from scratch.) \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Resource \endash  Specify Resource Data}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Resource \endash  Specify Resource Data\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 resource}{\f4\fs20   }{\i\f4\fs20 resource-type}{\f4\fs20  \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 ID}{\f4\fs20  [ , }{\i\f4\fs20 attributes}{\f4\fs20  ] \lquote }{\f6\fs18 )}{\f4\fs20 \rquote  \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote \par \tab [ }{\i\f4\fs20 data-statement}{\f4\fs20   [ , }{\i\f4\fs20 data-statement}{\f4\fs20   ]\u8230\'c9 ]\par \tab \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote ;\par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:resource statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Resource statements specify actual resources, based on previous type declarations.\par This statement specifies the data for a resource of type }{\i\f4\fs20 resource-type}{\f4\fs20  and ID }{\i\f4\fs20 ID}{\f4\fs20 .  The latest type declaration declared for resource-type is used to parse the data specification.\par Data statements specify the actual data; data-statements appropriate to each resource type are defined in the next section.\par The resource definition generates an actual resource.  A resource statement can appear anywhere in the resource description file, or even in a separate file specified on the command line or as an #include file, as long as it comes after the relevant type declaration.\par For examples of resource statements, see the examples following the various data statement types, earlier in this chapter.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Data Statements\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The body of the data specification contains one data statement for each declaration in the corresponding type declaration.  The base type must match the declaration.\par \par }\pard \qj\li720\widctlpar\tx2160\adjustright {\f4\fs20\ul Base type}{\f4\fs20 \tab }{\f4\fs20\ul Instance types}{\f4\fs20 \par string\tab string, cstring, pstring, wstring, char\par bitstring\tab boolean, byte, integer, longint, bitstring\par rect\tab rect\par point\tab point\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Switch data\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:switch statement}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Switch data statements are specified by using this format:\par \par }{\i\f4\fs20 switch-name  data-body\par }{\f4\fs20 \par For example, the following could be specified for the rControlTemplate type used in an earlier example:\par \par }{\f6\fs18 CheckControl \{ enabled, "Check here" \},\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Array data\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:arrays}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Array data statements have this format:\par \par \lquote }{\f6\fs18 \{}{\f4\fs20 \rquote  [ }{\i\f4\fs20 array-element}{\f4\fs20  [ , }{\i\f4\fs20 array-element}{\f4\fs20  ]\u8230\'c9 ] \lquote }{\f6\fs18 \}}{\f4\fs20 \rquote \par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 where an }{\i\f4\fs20 array-element}{\f4\fs20  consists of any number of data statements separated by commas.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 For example, the following data might be given for the rStringList resource (the type is shown so you won't have to refer to types.rez, where it is defined):\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rStringList \{\par         integer = $$Countof(StringArray);\par         array StringArray \{\par                 pstring;            /* String           */\par         \};\par \};\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 resource rStringList (280) \{\par     \{\par         "this",\par         "is",\par         "a",\par         "test"\par     \}\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Sample resource definition\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes a sample resource description file for an icon. (See the Apple IIGS Toolbox Reference, Volume 3 for information about resource icons.)  The type statement is included for clarity, but would normally be included using an include statement.\par \par }{\f6\fs18 type rIcon \{\par         hex integer;            /* icon type bit 15  1 = color, \par                                    0 = mono */\par image:\par         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par         integer;                    /* height of icon in pixels */\par         integer;                    /* width of icon in pixels */\par         hex string [$$Word(image)]; /* icon image */\par mask:\par         hex string;                 /* icon mask */\par \};\par \par resource rIcon (1) \{\par         0x8000,                                /* Kind */\par         9,                                     /* Height */\par         32                                     /* Width */\par         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par         $"FFFFFF00000000000000FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00000000000000FFFFFFFFFFFF"\par         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par         $"00000000000000000000000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000000000000000000000000000000"\par \};\par }{\f4\fs20 \par This data definition declares a resource of type rIcon, using whatever type declaration was previously specified for rIcon.  The 8 in the resource type specification (0x8000) identifies this as a color icon.  \par The icon is 9 pixels high by 32 pixels wide.\par The specification of the icon includes a pixel image and a pixel mask.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Labels}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Labels\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:labels}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Labels support the more complicated resources.  Use labels within a resource type declaration to calculate offsets and permit accessing of data at the labels.  The rIcon resource, for example, uses labels to specify the pixel image and mask of the icon.\par The syntax for a label is:\par \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 label ::=\tab character \{alphanum\}* ':'\par character ::=\tab '_' | A | B | C \u8230\'c9\par alphanum ::=\tab character | number \par number ::=\tab 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Labeled statements are valid only within a resource type declaration.  Labels are local to each type declaration.  More than one label can appear on a statement.\par Labels may be used in expressions.  In expressions, use only the identifier portion of the label (that is, everything up to, but excluding, the colon).  See \ldblquote Declaring Labels Within Arrays\rdblquote  later in this chapter for more information.\par The value of a label is always the offset, in bits, between the beginning of the resource and the position where the label occurs when mapped to the resource data.  In this example,\par \par }{\f6\fs18 type 0xCCCC \{\par     cstring;\par endOfString:\par     integer = endOfString;\par \};\par \par resource 0xCCCC (8) \{\par   "Neato"\par \}\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par the integer following the cstring would contain:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 ( len("Neato") [5] + null byte [1] ) * 8 [bits per byte] = 48.\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Built-in Functions to Access Resource Data}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Built-in Functions to Access Resource Data\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:built-in functions}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In some cases, it is desirable to access the actual resource data to which a label points.  Several built-in functions allow access to that data:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab }{\f6\fs18 $$BitField (label, startingPosition, numberOfBits)}{\f4\fs20 \par \par \tab Returns the }{\i\f4\fs20 numberOfBits}{\f4\fs20  (maximum of 32) bitstring found }{\i\f4\fs20 startingPosition}{\f4\fs20  bits from }{\i\f4\fs20 label}{\f4\fs20 .\par \par \bullet \tab }{\f6\fs18 $$Byte (label)}{\f4\fs20 \par \par \tab Returns the byte found at }{\i\f4\fs20 label}{\f4\fs20 .\par \par \bullet \tab }{\f6\fs18 $$Word (label)}{\f4\fs20 \par \par \tab Returns the word found at }{\i\f4\fs20 label}{\f4\fs20 .\par \par \bullet \tab }{\f6\fs18 $$Long (label)}{\f4\fs20 \par \par \tab Returns the long word found at }{\i\f4\fs20 label}{\f4\fs20 .\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par For example, the resource type rPString could be redefined without using a pstring.  Here is the definition of rPString from Types.rez:\par \par }{\f6\fs18 type rPString \{\par     pstring;\par \};\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Here is a redefinition of rPString using labels:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 type rPString \{\par len:  byte = (stop - len) / 8 - 1;\par       string[$$Byte(len)];\par stop: ;\par \};\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Declaring Labels Within Arrays}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Declaring Labels Within Arrays\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:labels}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:arrays}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Labels declared within arrays may have many values.  For every element in the array there is a corresponding value for each label defined within the array.  Use array subscripts to access the individual values of these labels.  The subscript values range from 1 to n where n is the number of elements in the array.  Labels within arrays that are nested in other arrays require multidimensional subscripts.  Each level of nesting adds another subscript.  The rightmost subscript varies most quickly.  Here is an example:\par \par }{\f6\fs18 type 0xFF01 \{\par \tab integer = $$CountOf(array1);\par \tab array array1 \{\par \tab \tab integer = $$CountOf(array2);\par \tab \tab array array2 \{\par foo:\tab \tab \tab integer;\par \tab \tab \};\par \tab \};\par \};\par resource 0xFF01 (128) \{\par \tab \{\par \tab \tab \{1,2,3\},\par \tab \tab \{4,5\}\par \tab \}\par \};\par }{\f4\fs20 \par In the example just given, the label foo takes on these values:\par \par }\pard \qj\fi360\widctlpar\tx2520\adjustright {\f6\fs18 foo[1,1] = 32\tab $$Word(foo[1,1]) = 1\par foo[1,2] = 48\tab $$Word(foo[1,2]) = 2\par foo[1,3] = 64\tab $$Word(foo[1,3]) = 3\par foo[2,1] = 96\tab $$Word(foo[2,1]) = 4\par foo[2,2] = 112\tab $$Word(foo[2,2]) = 5\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Another built-in function may be helpful in using labels within arrays:\par \par }{\f6\fs18 $$ArrayIndex(}{\i\f4\fs20 arrayname}{\f6\fs18 )\par }{\f4\fs20 \par This function returns the current array index of the array }{\i\f4\fs20 arrayname}{\f4\fs20 .  An error occurs if this function is used anywhere outside the scope of the array }{\i\f4\fs20 arrayname}{\f4\fs20 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Label Limitations}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Label Limitations\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:labels}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Keep in mind the fact that the resource compiler and DeRez are basically one-pass compilers.  This will help you understand some of the limitations of labels.\par To decompile a given type, that type must not contain any expressions with more than one undefined label.  An undefined label is a label that occurs lexically after the expression.  To define a label, use it in an expression before the label is defined.\par This example demonstrates how expressions can have only one undefined label:\par \par }{\f6\fs18 type 0xFF01 \{\par \tab /* In the expression below, start is defined, next is undefined.*/\par start:\tab integer = next - start;\tab \par \tab /* In the expression below, next is defined because it was used\par \tab    in a previous expression, but final is undefined.*/\par middle:\tab integer = final - next;\par next:\tab integer;\par final:\par \};\par }{\f4\fs20 \par Actually, the resource compiler can compile types that have expressions containing more than one undefined label, but the DeRez cannot decompile those resources and simply generates data resource statements.\par The label specified in }{\f6\fs18 $$BitField()}{\f4\fs20 , }{\f6\fs18 $$Byte()}{\f4\fs20 , }{\f6\fs18 $$Word()}{\f4\fs20 , and }{\f6\fs18 $$Long()}{\f4\fs20  must occur lexically before the expression; otherwise, an error is generated.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 An Example Using Labels}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 An Example Using Labels\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:labels}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In the following example, the definition for the rIcon resource uses the labels image and mask.\par \par }{\f6\fs18 \tab type rIcon \{\par \tab      hex integer;      /* Icon Type bit 15  1 = color, 0 = mono */\par \tab image:\par \tab      integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par \tab      integer;                    /* height of icon in pixels */\par \tab      integer;                    /* width of icon in pixels */\par \tab      hex string [$$Word(image)]; /* icon image */\par \tab mask:\par \tab      hex string;                 /* icon mask */\par \tab \};\par }{\f4\fs20 \par In the data corresponding to that definition, pixel images are provided for the image and mask.\par \par }{\f6\fs18 resource rIcon (1) \{\par \tab \tab 0x8000,\tab \tab \tab \tab /* Kind */\par \tab \tab 9,\tab \tab \tab \tab \tab /* Height */\par \tab \tab 32\tab \tab \tab \tab \tab /* Width */\par \tab \tab $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \tab \tab $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par \tab \tab $"00000000000000000000000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000000000000000000000000000000"\par \};\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Preprocessor Directives}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Preprocessor Directives\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Preprocessor directives substitute macro definitions and include files and provide if-then-else processing before other resource compiler processing takes place.\par The syntax of the preprocessor is very similar to that of the C-language preprocessor.  Preprocessor directives must observe these rules and restrictions:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab Each preprocessor statement must begin on a new line, be expressed on a single line, and be terminated by a return character.\par \bullet \tab The pound sign (#) must be the first character on the line of a preprocessor statement (except for spaces and tabs).\par \bullet \tab Identifiers (used in macro names) may be letters (A\endash Z, a\endash z), digits (0\endash 9), or the underscore character ( _ ).\par \bullet \tab Identifiers may be any length.\par \bullet \tab Identifiers may not start with a digit.\par \bullet \tab Identifiers are not case sensitive.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Variable Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Variable Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:define statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:undef statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:macros}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The #define and #undef directives let you assign values to identifiers:\par \par }{\f6\fs18 #define }{\i\f4\fs20 macro data}{\f6\fs18 \par #undef }{\i\f4\fs20 macro}{\f6\fs18 \par }{\f4\fs20 \par The #define directive causes any occurrence of the identifier }{\i\f4\fs20 macro}{\f4\fs20  to be replaced with the text }{\i\f4\fs20 data}{\f4\fs20 .  You can extend a macro over several lines by ending the line with the backslash character (\\), which functions as the resource compiler\rquote s escape character.  Here is an example:\par \par }{\f6\fs18 #define poem "I wander \\\par thro\\' each \\\par charter\\'d street"\par }{\f4\fs20 \par Quotation marks within strings must also be escaped.  See "Escape Characters: later in this chapter for more information about escape characters.\par The #undef directive removes the previously defined identifier macro.  Macro definitions can also be removed with the \endash undef option on the resource compiler command line.\par The following predefined macros are provided:\par \par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f4\fs20\ul Variable}{\f4\fs20 \tab }{\f4\fs20\ul Value}{\f4\fs20 \par true\tab 1\par false\tab 0\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f4\fs20 rez\tab 1 or 0 (1 if the resource compiler is running, 0 if DeRez is running)\par derez\tab 1 or 0 (0 if the resource compiler is running, 1 if DeRez is running)\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 If-Then-Else Processing}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 If-Then-Else Processing\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:conditional compilation}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:if statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 These directives provide conditional processing:\par \par }{\f6\fs18 #if }{\i\f4\fs20 expression}{\f6\fs18 \par }{\f4\fs20 [ }{\f6\fs18 #elif }{\i\f4\fs20 expression }{\f4\fs20  ]}{\f6\fs18 \par }{\f4\fs20 [ }{\f6\fs18 #else}{\f4\fs20  ]}{\f6\fs18 \par #endif\par }{\f4\fs20 \par }{\i\f4\fs20 Expression}{\f4\fs20  is defined later in this chapter.\par When used with the #if and #elif directives, }{\i\f4\fs20 expression}{\f4\fs20  may also include one of these terms:\par \par }{\f6\fs18 defined}{\f4\fs20  }{\i\f4\fs20 identifier}{\f4\fs20 \par }{\f6\fs18 defined}{\f4\fs20  \lquote }{\f6\fs18 (}{\f4\fs20 \rquote  }{\i\f4\fs20 identifier}{\f4\fs20  \lquote }{\f6\fs18 )}{\f4\fs20 \rquote \par \par The following may also be used in place of #if:\par \par }{\f6\fs18 #ifdef}{\f4\fs20  }{\i\f4\fs20 macro}{\f4\fs20 \par }{\f6\fs18 #ifndef}{\f4\fs20  }{\i\f4\fs20 macro}{\f4\fs20 \par \par For example,\par \par }{\f6\fs18 #define Thai\par Resource  rPstring  (199)  \{\par #ifdef English\par \tab "Hello"\par #elif defined (French)\par \tab "Bonjour"\par #elif defined (Thai)\par \tab "Sawati"\par #elif defined (Japanese)\par \tab "Konnichiwa"\par #endif\par \};\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Printf Directive}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Printf Directive\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:printf statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The #printf directive is provided to aid in debugging resource description files.  It has the form\par \par }{\f6\fs18 #printf(}{\i\f4\fs20 formatString}{\f6\fs18 , }{\i\f4\fs20 arguments\u8230\'c9}{\f6\fs18 )\par }{\f4\fs20 \par The format of the #printf statement is exactly the same as that of the printf statement in the C language, with one exception: There can be no more than 20 arguments.  This is the same restriction that applies to the }{\f6\fs18 $$format}{\f4\fs20  function.  The #printf directive writes its output to diagnostic output.  Note that the #printf directive does not end with a semicolon.\par Here\rquote s an example:\par \par }{\f6\fs18 #define\tab \tab Tuesday\tab \tab 3\par #ifdef Monday\par #printf("The day is Monday, day #%d\\n", Monday)\par #elif defined(Tuesday)\par #printf("The day is Tuesday, day #%d\\n", Tuesday)\par #elif defined(Wednesday)\par #printf("The day is Wednesday, day #%d\\n", Wednesday)\par #elif defined(Thursday)\par #printf("The day is Thursday, day #%d\\n", Thursday)\par #else\par #printf("DON'T KNOW WHAT DAY IT IS!\\n")\par #endif\par }{\f4\fs20 \par The file just listed generates this text:\par \par }{\f6\fs18 The day is Tuesday, day #3\par }{\f4\fs20 \par }{\i\f4\fs20 Formatstring}{\f4\fs20  is a text string which is written more or less as is to error out.  There are two cases when the string is not written exactly as typed: escape characters and conversion specifiers.\par Escape sequences are used to encode characters that would not normally be allowed in a string.  The examples show the most commonly used escape sequence, \\n.  The \\ character marks the beginning of an escape sequence, telling the resource compiler that the next character is special.  In this case, the next character is n, which indicates a newline character.  Printing \\n is equivalent to a writeln in Pascal or a PutCR macro from assembly language.  For a complete description of escape sequences, see "Escape Characters," later in this chapter.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Conversion Specifiers\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Conversion specifiers are special sequences of characters that define how a particular value is to be printed.  While the resource compiler actually accepts all of the conversion specifiers allowed by the C language (it is written in C, and uses C's sprintf function to format the string for this statement), many of the conversion specifiers that are used by C are not useful in the resource compiler, and some of the others are not commonly used.  For example, technically the resource compiler supports floating-point output, but it does not have a floating point variable type, so the conversion specifiers for floating point values are not of much use.  Only those conversion specifiers that are generally used in the resource compiler will be covered here.\par Each conversion specifier starts with a % character; to write a % character, code it twice, like this:\par \par }{\f6\fs18 printf("100%%\\n");\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Conversion specifiers are generally used to write string or numeric arguments.  For example, the %n conversion specifier is used to write a two-byte integer.  You can put one of several characters between the % characters that starts a conversion specifier and the letter character that indicates the type of the argument; each of these additional characters modifies the format specifier in some way.  The complete syntax for a format specifier is\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 % }{\i\f4\fs20 flag}{\f6\fs18  }{\f4\fs20 [}{\f6\fs18  }{\i\f4\fs20 field-width}{\f6\fs18  }{\f4\fs20 ]}{\f6\fs18  }{\f4\fs20 [}{\f6\fs18  }{\i\f4\fs20 size-specifier}{\f6\fs18  }{\f4\fs20 ]}{\f6\fs18  }{\i\f4\fs20 conversion}{\f4\fs20 \par \par }{\i\f4\fs20 Flag}{\f4\fs20  is one or more of the characters -, 0, + or a space.  The entire field is optional.  These flags effect the way the output is formatted:\par \par }\pard \qj\fi-720\li1080\widctlpar\adjustright {\f4\fs20 -\tab If a formatted value is shorter than the minimum field width, it is normally right-justified in the field by adding characters to the left of the formatted value.  If the - flag is used, the value is left-justified.\par 0\tab If a formatted value is shorter than the minimum field width, it is normally padded with space characters.  If the 0 flag is used, the field is padded with zeros instead of spaces.  The 0 pad character is not used if the value is left-justified.\par +\tab Forces signed output, adding a + character before positive integers.\par space\tab Adds a space before positive numbers (instead of a +) so they line up with columnated negative numbers.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\i\f4\fs20 Field-width}{\f4\fs20  gives the number of characters to use for the output field.  If the number of characters needed to represent a value is less than the field width, spaces are added on the left to fill out the field.  For example, the statement\par \par }{\f6\fs18 printf("%10n%10n\\n", a, b);\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 could be used to print two columns of numbers, where each column  is ten characters wide and the numbers are right-justified.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The }{\i\f4\fs20 size-specifier}{\f4\fs20  gives the size of the operand.  If the }{\i\f4\fs20 size-specifier}{\f4\fs20  is omitted, the resource compiler expects to find an integer parameter in the parameter list when it processes any of the numeric conversion specifiers.  If the size specifier is h, a byte is expected, while l indicates that the resource compiler should look for a longint value.\par }{\i\f4\fs20 Conversion}{\f4\fs20  tells what size and type of operand to expect and how to format the operand:\par \par }\pard \qj\li720\keepn\widctlpar\tx2160\tx3600\adjustright {\f4\fs20\ul Conversion}{\f4\fs20 \tab }{\f4\fs20\ul Format}{\f4\fs20 \par }{\f6\fs18 d}{\f4\fs20 \tab signed integer\par }{\f6\fs18 u}{\f4\fs20 \tab unsigned integer\par }{\f6\fs18 o}{\f4\fs20 \tab unsigned octal integer\par }{\f6\fs18 x}{\f4\fs20 \tab unsigned hexadecimal number; lowercase letters are used\par }{\f6\fs18 X}{\f4\fs20 \tab unsigned hexadecimal number; uppercase letters are used\par }{\f6\fs18 c}{\f4\fs20 \tab character\par }{\f6\fs18 s}{\f4\fs20 \tab c-string\par }{\f6\fs18 p}{\f4\fs20 \tab p-string\par }\pard \qj\li720\widctlpar\tx2160\tx3600\adjustright {\f6\fs18 %}{\f4\fs20 \tab write a single % character\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You must include exactly one parameter after the format string for each conversion specifier in the format string, and the types of the parameters must agree exactly with the types indicated by the conversion specifiers.  Parameters are matched with conversion specifiers on a left-to-right basis.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Include Directive}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Include Directive\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:include statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The #include directive reads a text file:\par \par }{\f6\fs18 #include "}{\i\f4\fs20 filename}{\f6\fs18 "\par }{\f4\fs20 \par The directive behaves as if all of the lines in }{\i\f4\fs20 file}{\f4\fs20  were placed in the current source file, replacing the line with the directive.  The maximum nesting is to ten levels.  For example,\par \par }{\f6\fs18 #include ($$Shell("ORCA")) "MyProject MyTypes.rez"\par }{\f4\fs20 \par Note that the #include preprocessor directive (which includes a file) is different from the previously described include statement, which copies resources from another file.\par The #include directive will look up to three places for the file, in order:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab The current directory.\par 2.\tab The directory where the source file is located (generally the current directory, but not always).\par 3.\tab The directory 13:RInclude.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Append Directive}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Append Directive\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:append statement}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This directive allows you to specify additional files to be compiled by the resource compiler.  The format is:\par \par }{\f6\fs18 #append "}{\i\f4\fs20 filename}{\f6\fs18 "}{\f4\fs20 \par \par This directive must appear between resource or type statements.  The }{\i\f4\fs20 filename}{\f4\fs20  variable is the name of the next file to be compiled.  The same search rules apply here that apply to the #include directive.  Normally you should place this directive at the end of a file because everything after it is ignored.  Do not place a #append directive in an include file.\par If you use more than one #append directive, the order in which you put them is important.  When the resource compiler sees an #append directive, it checks the language type of the appended file.  If it is the same language, that is, REZ, the effect is the same as if the files had been concatenated into a single file.  If they are in different languages, the shell quits the resource compiler and begins a new assembly or compilation.  Two examples will illustrate why the order is important.\par In the first example, suppose you have the following three files, each appended to the preceding file.\par \par }{\f6\fs18 file1.rez\par file2.rez\par file3.asm\par }{\f4\fs20 \par The Compile command calls the resource compiler to process file1.rez because the language is REZ.  When the resource compiler encounters the #append directive for file2.rez it continues processing as if file.rez and file2.rez had been concatenated into a single file.  When it encounters the #append directive for file3.asm, the resource compiler finishes processing and returns control to the shell which calls the assembler to assemble file3.asm.\par The result is different if the order of the files is changed, as follows:\par \par }{\f6\fs18 file1.rez\par file3.asm\par file2.rez\par }{\f4\fs20 \par The resource compiler processes file1.rez.  When it encounters the #append directive for file3.asm, the resource compiler finishes processing and returns control to the ORCA shell because the language stamp is different.  The shell calls the assembler to processes file3.asm.  When the assembler is finished processing, it returns control to the shell which calls the resource compiler to process file2.rez.  However, since this is a separate compilation from that of file1.rez, the resource compiler knows nothing about symbols from file1.rez when compiling file2.rez.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 DeRez handles #append directives differently from the resource compiler.  For DeRez the file being appended must have a language stamp of REZ or DeRez will treat the #append directive as an end-of-file marker.  DeRez will not return control to the shell after finishing processing.  Therefore, in the previous example, DeRez would process file1.rez only and then finish processing.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Resource Description Syntax}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Resource Description Syntax\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes the details of the resource description syntax.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Numbers and Literals}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Numbers and Literals\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 All arithmetic is performed as 32-bit signed arithmetic.  The basic formats are shown in Table 15.2.\par \par }\pard \qj\fi-2340\li2700\widctlpar\tx1800\adjustright {\f4\fs20\ul Numeric Type}{\f4\fs20 \tab }{\f4\fs20\ul Form}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par Decimal\tab nnn\u8230\'c9\tab Signed decimal constant between 2,147,483,647 and \endash 2,147,483,648.  Do not use a leading zero.  (See octal.)\par Hexadecimal\tab 0Xhhh\u8230\'c9\tab Signed hexadecimal constant between 0X7FFFFFFF and 0X80000000.\par \tab $hhh\u8230\'c9\tab Alternate form for hexadecimal constants.\par Octal\tab 0ooo\u8230\'c9\tab Signed octal constant between 017777777777 and 020000000000.  A leading zero indicates that the number is octal.\par Binary\tab 0Bbbb\u8230\'c9\tab Signed binary constant between 0B11111111111111111111111111111111 and 0B10000000000000000000000000000000.\par Literal\tab 'aaaa'\tab One to four printable ASCII characters or escape characters.  If there are fewer than four characters in the literal, the characters to the left (high bits) are assumed to be $00.  Characters that are not in the printable character set, and are not the characters \\' and \\\\ (which have special meanings), can be escaped according to the character escape rules.  (See \ldblquote Strings\rdblquote  later in this section.)\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 15.2: Numeric Constants\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Literals and numbers are treated in the same way by the resource compiler.  A literal is a value within single quotation marks; for instance, 'A' is a number with the value 65; on the other hand, "A" is the character A expressed as a string.  Both are represented in memory by the bitstring 01000001.  (Note, however, that "A" is not a valid number and 'A' is not a valid string.) The following numeric expressions are all equivalent:\par \par }\pard \qj\fi360\widctlpar\tx1800\tx3240\adjustright {\f6\fs18 'B'\tab 66\tab 'A'+1\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Literals are padded with nulls on the left side so that the literal 'ABC' is stored as shown in Figure 15.3.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw125\pich26\picwgoal2500\pichgoal520\macpict\bliptag-1142544067\blipupi72{\*\blipuid bbe6293d761fe5ac1c2897935ea6b8f0}015300070007002100841101a00082a0008c01000a000700070021008434000c0039001f008238a10096000605000000023da1009a0008fffe000000160000a000982c000a001607436f75726965720300160d00092b0b16082741424327203d20a00099a00097a0008ca0008c0a000000000000000034000a0037001d004a38a10096000606000000023da1009a0008fffe000000070000a00098292e03243030a00099a00097a0008da0008c34000a0049001d005c38a10096000606000000023da1009a0008fffe000000030000a0009829170141a00099a00097a0008da0008c34000a005b001d006e38a10096000606000000023da1009a0008fffe000000030000a0009829120142a00099a00097a0008da0008c34000a006d001d008038a10096000606000000023da1009a0008fffe000000030000a0009829120143a00099a00097a0008da0008da0008da00083ff}}{\fs20 \par }{\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 15.3: Padding of literals\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Expressions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Expressions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:expressions}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An expression may consist of simply a number or a literal.  Expressions may also include numeric variables, labels, and system functions.\par Table 15.3 lists the operators in order of precedence with highest precedence first \endash  groupings indicate equal precedence.  Evaluation is always left to right when the priority is the same.\par \par }\pard \qj\fi-2520\li2880\widctlpar\tx1440\adjustright {\f4\fs20\ul Precedence}{\f4\fs20 \tab }{\f4\fs20\ul Operator}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par 1.\tab ( expr )\tab Forced precedence in expression calculation\par 2.\tab -expr\tab Arithmetic (two\rquote s complement) negation of expr\par \tab ~expr\tab Bitwise (one\rquote s complement) negation of expr\par \tab !expr\tab Logical negation of expr\par 3.\tab expr1 * expr2\tab Multiplication\par \tab expr1 / expr2\tab Integer division\par \tab expr1 % expr2\tab Remainder from dividing expr1 by expr2\par 4.  \tab expr1 + expr2\tab Addition\par \tab expr1 - expr2\tab Subtraction\par 5.\tab expr1 << expr2\tab Shift left; shift expr1 left by expr2 bits\par \tab expr1 >> expr2\tab Shift right; shift expr1 right by expr2 bits \par 6.\tab expr1 > expr2\tab Greater than\par \tab expr1 >= expr2\tab Greater than or equal to\par \tab expr1 < expr2\tab Less than\par \tab expr1 <= expr2\tab Less than or equal to\par 7.\tab expr1 == expr2\tab Equal\par \tab expr1 != expr2\tab Not equal\par 8.\tab expr1 & expr2\tab Bitwise AND\par 9.\tab expr1 ^ expr2\tab Bitwise XOR\par 10.\tab expr1 | expr2\tab Bitwise OR\par 11.\tab expr1 && expr2\tab Logical AND\par }\pard \qj\fi-2520\li2880\keepn\widctlpar\tx1440\adjustright {\f4\fs20 12.\tab expr1 || expr2\tab Logical OR\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 15.3: Resource Description Operators\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The logical operators !, >, >=, <, <=, ==, !=, &&, and || evaluate to 1 (true) or 0 (false).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Variables and Functions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Variables and Functions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:variables}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:built-in functions}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are several predefined variables that are preset by the resource compiler, or that take on specific meaning based on how they are used in your resource description file.  Some of these resource compiler variables also contain commonly used values.  All Rez variables start with $$ followed by an alphanumeric identifier.\par The following variables and functions have string values:\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs18 $$Date}{\f4\fs20 \tab Current date.  It is useful for putting time-stamps into the resource file.  The format of the string is: weekday, month dd, yyyy.  For example, August 10, 1989.\par \par }{\f6\fs18 $$Format("}{\i\f4\fs20 formatString}{\f6\fs18 ", }{\i\f4\fs20 arguments}{\f6\fs18 )}{\f4\fs20 \par \tab Works just like the #printf directive except that }{\f6\fs18 $$Format}{\f4\fs20  returns a string rather than printing to standard output.  (See \ldblquote Print Directive\rdblquote  earlier in this chapter.)\par \par }{\f6\fs18 $$Resource("}{\i\f4\fs20 filename}{\f6\fs18 ",'}{\i\f4\fs20 type}{\f6\fs18 ',}{\i\f4\fs20 ID}{\f6\fs18 )}{\f4\fs20 \par \tab Reads the resource }{\f6\fs18 '}{\i\f4\fs20 type}{\f6\fs18 '}{\f4\fs20  with the ID }{\i\f4\fs20 ID}{\f4\fs20  from the resource file }{\i\f4\fs20 filename}{\f4\fs20 , and returns a string.\par \par }{\f6\fs18 $$Shell("}{\i\f4\fs20 stringExpr}{\f4\fs20  }{\f6\fs18 ")}{\f4\fs20 \tab Current value of the exported shell variable \{stringExpr \}.  Note that the braces must be omitted, and the double quotation marks must be present.\par \par }{\f6\fs18 $$Time}{\f4\fs20 \tab Current time.  It is useful for time-stamping the resource file.  The format is: "hh:mm:ss".\par \par }{\f6\fs18 $$Version}{\f4\fs20 \tab Version number of the resource compiler.  (\ldblquote V1.0\rdblquote )\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par These variables and functions have numeric values:\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs18 $$Attributes}{\f4\fs20 \tab Attributes of resource from the current resource.\par \par }{\f6\fs18 $$BitField(}{\i\f4\fs20 label}{\f6\fs18 , }{\i\f4\fs20 startingPosition}{\f6\fs18 , }{\i\f4\fs20 numberOfBits}{\f6\fs18 )}{\f4\fs20 \par \tab Returns the }{\i\f4\fs20 numberOfBits}{\f4\fs20  (maximum of 32) bitstring found }{\i\f4\fs20 startingPosition}{\f4\fs20  bits from }{\i\f4\fs20 label}{\f4\fs20 .\par \par }{\f6\fs18 $$Byte(}{\i\f4\fs20 label}{\f6\fs18 )}{\f4\fs20 \tab Returns the byte found at }{\i\f4\fs20 label}{\f4\fs20 .\par \par }{\f6\fs18 $$CountOf (}{\i\f4\fs20 arrayName}{\f6\fs18 )}{\f4\fs20 \tab Returns the number of elements in the array }{\i\f4\fs20 arrayName}{\f4\fs20 .\par \par }{\f6\fs18 $$Day}{\f4\fs20 \tab Current day (range 1\endash 31).\par \par }{\f6\fs18 $$Hour}{\f4\fs20 \tab Current hour (range 0\endash 23).\par \par }{\f6\fs18 $$ID}{\f4\fs20 \tab ID of resource from the current resource.\par \par }{\f6\fs18 $$Long(}{\i\f4\fs20 label}{\f6\fs18 )}{\f4\fs20 \tab Returns the long word found at }{\i\f4\fs20 label}{\f4\fs20 .\par \par }{\f6\fs18 $$Minute}{\f4\fs20 \tab Current minute (range 0\endash 59).\par \par }{\f6\fs18 $$Month}{\f4\fs20 \tab Current month (range 1\endash 12).\par \par }{\f6\fs18 $$OptionalCount (}{\i\f4\fs20 OptionalName}{\f6\fs18 )}{\f4\fs20 \par \tab Returns the number of items explicitly specified in the block }{\i\f4\fs20 OptionalName}{\f4\fs20 .\par \par }{\f6\fs18 $$PackedSize(}{\i\f4\fs20 Start}{\f6\fs18 , }{\i\f4\fs20 RowBytes}{\f6\fs18 , }{\i\f4\fs20 RowCount}{\f6\fs18 )}{\f4\fs20 \par \tab Given an offset (}{\i\f4\fs20 Start}{\f4\fs20 ) into the current resource and two integers, }{\i\f4\fs20 RowBytes}{\f4\fs20  and }{\i\f4\fs20 RowCount}{\f4\fs20 , this function calls the toolbox routine UnpackBytes }{\i\f4\fs20 RowCount}{\f4\fs20  times.  }{\f6\fs18 $$PackedSize( )}{\f4\fs20  returns the unpacked size of the data found at }{\i\f4\fs20 Start}{\f4\fs20 .  Use this function only for decompiling resource files.  An example of this function is found in Pict.rez.\par \par }{\f6\fs18 $$ResourceSize}{\f4\fs20 \tab Current size of resource in bytes.  When decompiling, }{\f6\fs18 $$ResourceSize}{\f4\fs20  is the actual size of the resource being decompiled.  When compiling, }{\f6\fs18 $$ResourceSize}{\f4\fs20  returns the number of bytes that have been compiled so far for the current resource.\par \par }{\f6\fs18 $$Second}{\f4\fs20 \tab Current second (range 0\endash 59).\par \par }{\f6\fs18 $$Type}{\f4\fs20 \tab Type of resource from the current resource.\par \par }{\f6\fs18 $$Weekday}{\f4\fs20 \tab Current day of the week (range 1\endash 7, that is, Sunday\endash Saturday).\par \par }{\f6\fs18 $$Word(}{\i\f4\fs20 label}{\f6\fs18 )}{\f4\fs20 \tab Returns the word found at }{\i\f4\fs20 label}{\f4\fs20 .\par \par }{\f6\fs18 $$Year}{\f4\fs20 \tab Current year.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Strings}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Strings\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:strings}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are two basic types of strings:\par \par }\pard \qj\fi-2880\li3240\widctlpar\tx2160\adjustright {\f4\fs20 Text string\tab }{\f6\fs18 "a\u8230\'c9"}{\f4\fs20 \tab The string can contain any printable character except \lquote  " \rquote  and \lquote \\\rquote .  These and other characters can be created through escape sequences.  (See Table\~15-4.)  The string "" is a valid string of length 0.\par Hexadecimal string\tab }{\f6\fs18 $"hh\u8230\'c9"}{\f4\fs20 \tab Spaces and tabs inside a hexadecimal string are ignored.  There must be an even number of hexadecimal digits.  The string $"" is a valid hexadecimal string of length\~0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Any two strings (hexadecimal or text) will be concatenated if they are placed next to each other with only white space in between.  (In this case, returns and comments are considered white space.)\par Figure 15.4 shows a p-string declared as\par \par }{\f6\fs18 pstring [10];\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 whose data definition is\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 "Hello"\par }{\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1043{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw347\pich37\picwgoal6940\pichgoal740\macpict\bliptag-681597899\blipupi72{\*\blipuid d75fa435775d57667f6a6b69c5828a3e}025100070007002c01621101a00082a0008ca0008c01000a00070007002c01620a000000000000000034000a000a002a002a3834000a0048002a00683834000a0067002a00873834000a0029002a004938a0008da100960006060000000202a1009a0008fffd000000070000a000980300210d00092b121e03243035a00099a00097a100960006060000000202a1009a0008fffd000000030000a0009829230148a00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291f0165a00099a00097a100960006060000000202a1009a0008fffd000000010000a000982921016ca00099a00097a0008c34000a0086002a00a63834000a00c4002a00e43834000a00e3002a01033834000a00a5002a00c538a0008da100960006060000000202a1009a0008fffd000000010000a00098291f016ca00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291d016fa00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291b03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a0009734000a0102002a01223834000a0140002a01603834000a0121002a014138a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a0008da00083ff}}{\fs20 \par }{\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 15.4: Internal Representation of a P-string\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In the input file, string data is surrounded by double quotation marks (").  You can continue a string on the next line.  A separating token (for example, a comma) or brace signifies the end of the string data.  A side effect of string continuation is that a sequence of two quotation marks ("") is simply ignored.  For example,\par \par }{\f6\fs18 "Hello ""out "\par "there."\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 is the same string as\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 "Hello out there.";\par }{\f4\fs20 \par To place a quotation mark character within a string, precede the quotation mark with a backslash, like this:\par \par }{\f6\fs18 \\"\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Escape Characters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Escape Characters\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:escape characters}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The backslash character (\\) is provided as an escape character to allow you to insert nonprintable characters in a string.  For example, to include a newline character in a string, use the escape sequence\par \par }{\f6\fs18 \\n\par }{\f4\fs20 \par Valid escape sequences are shown in Table 15.4.\par \par }\pard \qj\li360\keepn\widctlpar\tx1800\tx3780\tx5040\adjustright {\f4\fs20 Escape \tab \tab Hexadecimal\tab Printable \par }{\f4\fs20\ul Sequence}{\f4\fs20 \tab }{\f4\fs20\ul Name}{\f4\fs20 \tab }{\f4\fs20\ul Value}{\f4\fs20 \tab }{\f4\fs20\ul Equivalent}{\f4\fs20 \par \\t\tab Tab\tab $09\tab None\par \\b\tab Backspace\tab $08\tab None\par \\r\tab Return\tab $0A\tab None\par \\n\tab Newline\tab $0D\tab None\par \\f\tab Form feed\tab $0C\tab None\par \\v\tab Vertical tab\tab $0B\tab None\par \\?\tab Rub out\tab $7F\tab None\par \\\\\tab Backslash\tab $5C\tab \\\par \\'\tab Single quotation mark\tab $27\tab '\par \\"\tab Double quotation mark\tab $22\tab "\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 15.4: Resource Compiler Escape Sequences\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Note to C programmers:  The escape sequence \\n produces an ASCII code of 13 in the output stream, while the \\r sequence produces an ASCII code of 10.  This is backwards from the way the C language uses these two characters, so if you are creating string resources that will be used with stdio functions from the standard C library, be sure and use \\r in your resource file any time you would use \\n in C, and use \\n in your resource file any time you would use \\r in C.\par You can also use octal escape sequences, hexadecimal escape sequences, decimal escape sequences and binary escape sequences to specify characters that do not have predefined escape equivalents.  The forms are:\par \par }\pard \qj\li360\keepn\widctlpar\tx1440\tx2880\tx3780\adjustright {\f4\fs18 \tab Number\par }{\f4\fs18\ul Base}{\f4\fs18 \tab }{\f4\fs18\ul Form}{\f4\fs18 \tab }{\f4\fs18\ul Digits}{\f4\fs18 \tab }{\f4\fs18\ul Example}{\f4\fs18 \par }{\f4\fs20 2}{\f4\fs18 \tab \\0Bbbbbbbbb\tab }{\f4\fs20 8}{\f4\fs18 \tab \\0B01000001\par }{\f4\fs20 8}{\f4\fs18 \tab \\ooo\tab }{\f4\fs20 3}{\f4\fs18 \tab \\101\par }{\f4\fs20 10}{\f4\fs18 \tab \\0Dddd\tab }{\f4\fs20 3}{\f4\fs18 \tab \\0D065\par }{\f4\fs20 16}{\f4\fs18 \tab \\0Xhh\tab }{\f4\fs20 2}{\f4\fs18 \tab \\0X41\par }\pard \qj\li360\widctlpar\tx1440\tx2880\tx3780\adjustright {\f4\fs20 16\tab \\$hh\tab 2\tab \\$41\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Since escape sequences are imbedded in strings, and since these sequences can contain more than one character after the \\ character, the number of digits given for each form is an important consideration.  You must always code exactly the number of digits shown, using leading zeros if necessary.  For example, instead of }{\f6\fs18 "\\0x4"}{\f4\fs20 , which only shows a single hexadecimal digit, you must use }{\f6\fs18 "0x04"}{\f4\fs20 .  This rule avoids confusion between the numeric escape sequence and any characters that might follow it in the string.\par Here are some examples:\par \par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\f6\fs18 \\077\tab /* 3 octal digits */\par \\0xFF\tab /* \lquote 0x\rquote  plus 2 hex digits */\par \\$F1\\$F2\\$F3\tab /* \lquote $\rquote  plus 2 hex digits */\par \\0d099\tab /* \lquote 0d\rquote  plus 3 decimal digits */\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DeRez}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can use the DeRez command-line option \endash e to print characters that would otherwise be escaped (characters preceded by a backslash, for example).  Normally, only characters with values between $20 and $7E are printed as Apple IIGS characters.  With this option, however, all characters (except null, newline, tab, backspace, form-feed, vertical tab, and rub out) will be printed as characters, not as escape sequences.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:resource statement}{\rxe bk4}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using the Resource Compiler}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using the Resource Compiler\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Resource Compiler is a one-pass compiler; that is, in one pass it resolves preprocessor macros, scans the resource description file, and generates code into a code buffer.  It then writes the code to a resource file.\par The resource compiler is invoked by the shell's compile (or assemble) command, just as you would assemble a program.  This command checks the language type of the source file (in this case, rez) and calls the appropriate compiler or assembler (in this case, the resource compiler).  In short, with the exception of a few resource compiler specific options, you use the same commands to create a resource fork from a resource description file that you would use to assemble a program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Resource Forks and Data Forks}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Resource Forks and Data Forks\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resource fork}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data fork}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Files on the Apple IIGS actually have two distinct parts, known as the data fork and the resource fork.  The data fork is what is traditionally a file on other computers; this is where the executable program is stored, where ASCII text is placed for a text file, and so forth.  When the resource compiler writes resources, it writes them to the resource fork of the file.  Writing to the resource fork of an existing file does not change the data fork in any way, and writing to the data fork does not change the resource fork.  The implications of this can speed up the development cycle for your programs.  When you compile a resource description file to create a resource fork for your program, you can and should have the resource compiler save the resource fork to the same file in which the linker places the executable code.  When you make a change to your assembly language source code, you will normally assemble and link the changed program, creating an updated data fork for your program.  If the resource description file has not changed, you do not need to recompile the resource description file.  The same is true in reverse:  if you make a change to the resource description file, you need to recompile it, but you do not need to reassemble or relink your assembly language source file.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Rez Options}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Rez Options\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez\:options}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The resource compiler supports the e, s, and t flags from the assemble or compile command.  It ignores all other flags.\par The resource compiler supports a number of language dependent options.  These are coded as the name of the language, an equal sign, and the option list, enclosed in parenthesis.  Like the other parameters for the compile command, no spaces are allowed outside of the parenthesis.\par For example, the following compile command uses the options list to specify the -p flag, which turns on progress information.\par \par }{\f6\fs18 compile resources keep=program rez=(-p)\par }{\f4\fs20 \par The resource compiler will accept up to 31 options in the options list.  Any others are ignored.\par Here's a complete list of the options that can be used in this options field:\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs18 \endash a[ppend]}{\f4\fs20 \tab This option appends the resource compiler\rquote s output to the output file's resource fork, rather than replacing the output file's resource fork.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs18 \endash d[efine] }{\i\f4\fs20 macro}{\f6\fs18  [=}{\i\f4\fs20 data }{\f6\fs18 ]}{\f4\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4\fs20 \tab This option defines the macro variable }{\i\f4\fs20 macro}{\f4\fs20  to have the value }{\i\f4\fs20 data}{\f4\fs20 .  If data is omitted, macro is set to the null string \endash  note that this still means that macro is defined.  Using the \endash d option is the same as writing \par \par }{\f6\fs18 \tab #define macro [ data ]\par }{\f4\fs20 \par \tab at the beginning of the input.\par \par }{\f6\fs18 \endash flag SYSTEM}{\f4\fs20 \tab This option sets the resource file flag for the system.\par \par }{\f6\fs18 \endash flag ROM}{\f4\fs20 \tab This option sets the resource file flag for ROM.\par \par }{\f6\fs18 \endash i }{\i\f4\fs20 pathname(s)}{\f4\fs20 \tab This option searches the following path names for #include files.  It can be specified more than once.  The paths are searched in the order they appear on the command line.  For example,\par \par }\pard \fi-1800\li2160\widctlpar\adjustright {\f6\fs18 \tab \u8230\'c9rez=(\endash i 13:rinclude:stuff.rez\par \tab       \endash i 13:rinclude:newstuff.rez)\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 \endash m[odification]}{\f4\fs20 \tab Don\rquote t change the output file\rquote s modification date.  If an error occurs, the output file\rquote s modification date is set, even if you use this option.\par \par }{\f6\fs18 \endash ov}{\f4\fs20 \tab This option overrides the protected bit when replacing resources with the \endash a option.\par \par }{\f6\fs18 \endash p[rogress]}{\f4\fs20 \tab This option writes version and progress information to diagnostic output.\par \par }{\f6\fs18 \endash rd}{\f4\fs20 \tab This option suppresses warning messages if a resource type is redeclared.\par \par }{\f6\fs18 \endash s }{\i\f4\fs20 pathname(s)}{\f4\fs20 \tab This option searches the following path names for resource include files.\par \par }{\f6\fs18 \endash t[ype] }{\i\f4\fs20 typeExpr}{\f4\fs20 \tab This option sets the type of the output load file to }{\i\f4\fs20 filetype}{\f4\fs20 .  You can specify a hexadecimal number, a decimal number, or a mnemonic for the file type.  If the \endash t option is not specified, the file type of the load file is $B3.\par \par }{\f6\fs18 \endash u[ndef] }{\i\f4\fs20 macro}{\f4\fs20 \tab This option undefines the macro variable }{\i\f4\fs20 macro}{\f4\fs20 .  It is the same as writing \par \par }{\f6\fs18 \tab #undef macro \par }{\f4\fs20 \par \tab at the beginning of the input.  It is meaningful to undefine only the preset macro variables.\par \par \tab Note: A space is required between an option and its parameters.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Rez Compiler}{\rxe bk5}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Resources}{\rxe bk6}}}{\v\f4\fs20 \par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 16: GSoft Debugger\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 16\par GSBug Debugger\par }\pard \qj\widctlpar\adjustright {\f4 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 16 \endash  GSBug Debugger\tcl1}}}{\v\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debugger\:see GSBug}}}{\v\f4\fs20 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug is a machine-language debugger that can be used to help find errors in programs.  GSBug is available in two different forms: as an application (GSBug) that can be executed from the Finder or from the shell, and as an init (initialization) file (GSBug.init) that is entered automatically when a break point is encountered.\par Both versions of the debugger include the following features:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab You can step through your code one instruction at a time (in single-step mode).\par \par \bullet \tab You can step continuously through your code under control of the debugger (in trace mode).\par \par \bullet \tab You can save a trace history to a file on disk.\par \par \bullet \tab You can execute your code, or any portion of your code, at full speed when timing is critical (in real-time mode).\par \par \bullet \tab You can define and insert in your code breakpoints at which the debugger automatically suspends execution.\par \par \bullet \tab You can set a breakpoint so that execution is suspended only after the breakpoint location has been passed a given number of times.\par \par \bullet \tab You can enter the Monitor, execute Monitor commands, and then return to the debugger.\par \par \bullet \tab You can use the debugger\rquote s built-in mini-assembler.\par \par \bullet \tab You can view the debugger\rquote s Master display, which shows the contents of the Apple IIGS registers, the breakpoints and memory-protection ranges you have set, portions of the stack and memory, and a disassembly of your program\rquote s code.\par \par \bullet \tab You can display 368 contiguous bytes of memory starting from the contents of the Direct-Page register.\par \par \bullet \tab You can display memory through templates to show data structures in their proper format.\par \par \bullet \tab You can define and use memory protection windows.\par \par \bullet \tab You can display your program\rquote s normal screen in any Apple IIGS display mode.\par \par \bullet \tab You can call up on-line help screens for help with any of the debugger\rquote s functions.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The init version is RAM resident and has these features:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab You can view the state of the machine before entry on the Register subdisplay of the Master display.\par \par \bullet \tab You can enter the debugger while your program is running, look at data, set breakpoints, step through code, and resume operation as though nothing has happened.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A CDA called Loader Dumper is also covered in this chapter.  The Loader Dumper allows you to interrogate the system loader to find out where the various segments of a program have been loaded.  While the Loader Dumper is not technically a part of the debugger, it is most often used in a backup role while debugging a program.  In this role, you use the Loader Dumper to locate the segments in the program you are trying to debug.\par While all of the information about how to use the debugger is contained in this one chapter, conceptually the chapter has four distinct parts.  The first part of the chapter is an overview of the debugger from a conceptual standpoint, describing how to install it and what the principal features are.  The second part is a feature-oriented look at the debugger; this second section covers how you would actually use the debugger to load and debug one of your programs.  This second part starts with the section "Part 2: Using GSBug.  The third part of the chapter, starting with the section "Part 3: GSBug Subdisplay and Command Reference", is a reference manual for the debugger.  Finally, "Part 4: Loader Dumper" covers the Loader Dumper CDA.\par To get familiar with the debugger, read the first and second parts of the chapter, working through each section in order.  To get specific, detailed information about the debugger and its features, refer to Part 3.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Part 1: Getting Started}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Part 1\: Getting Started\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes restrictions on the use of the debugger and tells you how to get up and running with both versions of the debugger.\par The init version of the program is memory resident, so you must move it to your startup disk to load it in RAM.  Once you\rquote ve installed the init version, however, you can run a program to be tested from any disk.  With the init version, you can enter debugger while your program is running, look at data, set break points, step through code, and resume work as though nothing has happened.\par The application version does not require any installation.  You launch the application version the same way you do any other Macintosh application.  If you are using the application version of GSBug, you can move the program you want to test on the same disk as GSBug (if the program is small enough to fit) and then load the program into the debugger.  You can run the application version under either the Finder\u8482\'aa or the ORCA shell.  \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Debugger Restrictions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Debugger Restrictions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug requires approximately 42000 bytes ($A400) of memory (not including the memory requirements of the program you are testing).  Because the debugger is loaded into memory by the Apple IIGS System Loader and Memory Manager, you have no control over where in memory the debugger is loaded.  If your program can be relocated, the System Loader and Memory Manager will load it so that conflicts between the debugger and your program are extremely unlikely.  If you write absolute code, however, you will not be able to use it with the debugger if any of the following conditions occur:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab The application writes to the area of memory in which the debugger is loaded.\par \bullet \tab The application assigns its direct page or stack into the debugger\rquote s code space.\par \bullet \tab The application uses the same stack space as the debugger.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In single-step and trace modes, if the application writes or steps to a location between 20 bytes before the beginning of the debugger\rquote s stack and 8 bytes after the end of the debugger\rquote s stack, the debugger stops executing the program and prints S= on the command line.  To continue operation, you must change the value of the S register so that it is outside GSBug\rquote s stack range.  In real-time mode, a stack conflict can crash the debugger.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Installing the Init Version on Your Startup Disk}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Installing the Init Version on Your Startup Disk\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:installation}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes the steps you must take to install the init version of GSBug into memory.  It then explains what happens during the startup sequence and how to prevent the debugger from being installed in memory.\par If you want the debugger to be installed in memory automatically at startup, you must move it from the Extras disk and place it in the SYSTEM.SETUP folder in the System folder of your startup disk.  The init version is a permanent init file called GSBug.init (file type $B6).  You must place it inside the SYSTEM.SETUP folder in the System folder of the startup disk in order for the System to find it at startup.\par There are two ways to install the Init version.  If you are installing GSBug on a hard disk, the easiest way to install the program is to use the Installer, located on the :ORCA.Extras disk.  If you prefer, you can copy the debugger using any copy program you are familiar with; the GSBug Init file is on the extras disk, at path :ORCA.Extras:System:System.Setup:GSBug.\par If you are using floppy disks, you can install the Init version in your boot disk, but you will need to delete some files to make room for the program, first.  Starting with a copy of the system disk that came with ORCA/M, examine the system folder for files you will not be using.  We suggest looking closely at the Fonts folder; the ORCA development environment does not use any fonts.  You can also delete all of the CDevs you don't intend to use, and you can even delete any tools you won't be using for your own programs and that are not used by the Finder.  (We recommend that only experienced programmers who are very familiar with the tools and when and how they are used attempt to remove any tool files.)  The text-based ORCA development that comes with this version of ORCA/M does not use any RAM based tools, although some of the samples do.  For samples, see the source code to see what tools are being started.  The graphics development environment for ORCA languages, PRIZM, uses all tools required to support New Desk Accessories, plus the Print Manager.\par If you no longer want the init version to be installed automatically at startup, remove it from the SYSTEM.SETUP folder of your startup disk.  GS/OS looks for the GSBUG.INIT file in the SYSTEM.STARTUP folder at startup; if it finds it there, it automatically installs the file in memory.\par To prevent the init version of the debugger from being installed in memory, press and hold down the Option key while booting the System.  \par During startup , GS/OS allocates memory for GSBug to:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab patch the CDA vector so that the debugger is able to recognize Control-}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \_Option\_Esc.\par 2.\tab patch the break vector to trap breaks in the debugger.\par 3.\tab install a heartbeat task to ensure that the CDA vector remains patched.\par 4.\tab enable vertical blanking (VBL) interrupts.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can unload the debugger at any time with the Unload command described in "Quitting the Debugger" later in this chapter.  Unload removes the debugger from memory and restores all the vectors.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 The Default Configuration File\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:configuration file}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The debugger loads a default configuration file called GSBUG.SETUP in the SYSTEM.STARTUP folder of the disk containing the debugger at the initial installation on startup.  This file is a standard configuration file that was saved with the CSave command.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Entering the Init Version}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Entering the Init Version\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes the two ways to enter the init version of the debugger: when you press the Control-}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \_Option\_Esc key combination while your program is running and when GSBug takes over the machine through the break vector whenever a break occurs.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 While Your Program is Running\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:BRK}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To enter the debugger while your program is running (as long as interrupts are not disabled), press Control-}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \_Option\_Esc.  Two possible situations arise:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab If the Q command was used to exit the debugger, the current state of the machine is saved so that it can be restored on exit.  In doing so, GSBug requires a block of memory from the Memory Manager to save the state of the text display.\par \bullet \tab If the QR command was used to exit the debugger, the current state of the machine is not restored on exit.  This allows you to save your display configurations for use in future sessions.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The debugger also requests a 1K block in bank zero from the Memory Manager.  The first two pages of this block are used for the debugger\rquote s direct page and stack, and the other two pages are available to the user as a direct page and stack.\par If the debugger is called while a ProDOS 8 application is running, no memory is available in bank zero, so the debugger takes a 1K block and restores it on exit.\par The Master display appears with the debugger\rquote s version number and copyright message across the command line at the bottom of the screen.  Both the version number and copyright message disappear as soon as you type anything on the command line.\par All the registers, including the stack pointer and program counter, reflect the state of the machine at the moment before you pressed Control-}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \_Option\_Esc.  This means that the stack pointer will not reflect the fact that the return address and processor status were pushed onto the stack when the interrupt occurred.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 When a Break Occurs\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:BRK}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Whenever a break occurs, GSBug takes over the machine.  It saves the state of the machine and allocates a 1K block.  The debugger beeps to let you know that a break has occurred and displays its version number on entry \par All the registers, including the stack pointer and program counter will reflect the state of the machine immediately before the break instruction was executed.  The program counter will point to the break instruction, and the stack pointer will not reflect the fact that the return address and processor status were pushed onto the stack when the instruction was executed.\par To instruct the debugger not to trap breaks, you set monitor breaks instead of debugger breaks.  See "Using Breakpoints" later in this chapter for details on how to do this.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Entering the Application Version by Launch}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Entering the Application Version by Launch\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You enter the application version of the debugger by launching it the same way you do any other application.  Each time you launch the debugger, a default configuration file called GSBUG.SETUP is loaded.  It is the standard configuration file that you save with CSave.  See "Configuring the Debugger" later in this chapter for details.\par If you are launching the debugger from floppy disks, you will find it on the Extras disk at path :ORCA.Extras:Utilities:GSBug.  If you have used the installer to install the application version on your hard disk, GSBug will be located in the utilities folder.  The utilities folder is located in the same place that you find ORCA.Sys16.\par At launch, the debugger asks the Memory Manager for a 1K block in bank zero.  The Memory Manager allocates the first two pages of this block for the debugger\rquote s direct page and stack; it gives you the other two pages as a direct page and a stack.\par The Master display appears with the debugger\rquote s version number and copyright message across the command line at the bottom of the screen.  These items disappear as soon as you type anything.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Entering the Application Version from the Shell\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Like any application, you can run GSBug directly from the shell.  From floppy disks, you will need to make sure the disk containing the debugger is installed, then either type the full path name of the debugger, or change the current prefix to the debugger's prefix and type GSBug.  The debugger is on the Extras disk at path :ORCA.Extras:Utilities:GSBug.\par If you have installed the application version of GSBug on your hard disk, it is installed as a utility.  As with any utility, you can execute GSBug from any directory by typing the name of the program, GSBug.\par The file type for GSBug is set to S16, so the shell shuts down when you execute GSBug.  You can, however, change the file type to EXE using the FILETYPE command.  Once the file type is changed, the shell no longer shuts down before launching GSBug.  This speeds up the process of launching and returning from GSBug, and it also preserves the state of the shell.  It does, however, take up more memory, since both GSBug and the shell remain in memory, so you might want to use the S16 file type in low memory situations.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Loading Your Program into the Application Version\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Once you\rquote ve launched GSBug, the copyright and version number appear on the command line at the bottom of the screen (see Figure 16.1).  Then you\rquote re ready to load the file to be tested into the debugger.  Type the following command to load the file }{\i\f4\fs20 pathname}{\f4\fs20  into memory:\par \par }{\f6\fs18 Load }{\i\f4\fs20 pathname}{\f4\fs20 \par \par Here }{\i\f4\fs20 pathname}{\f4\fs20  represents the full or partial path name of the program you wish to debug.\par Enter the following command to close down an application (execute a System Loader UserShutDown call):\par \par }{\f6\fs18 Shutdown }{\i\f4\fs20 UserID quit_flag}{\f4\fs20 \par \par If any GS/OS (or ProDOS 16) errors are generated during program load or shutdown, the error number appears on the command line.  After a successful load, the registers are set as indicated in Table 16.1.\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4\fs20\ul Register}{\f4\fs20 \tab }{\f4\fs20\ul Setting}{\f4\fs20 \par \par K/PC\tab The program bank register (K) and program counter (PC) are set to the starting address of the first segment of the program.\par A\tab The accumulator is set to the user ID of the program loaded.  The user ID is assigned by the user ID manager, as described in the Apple IIGS Toolbox Reference.\par X, Y\tab The X and Y index registers are set to 0.\par P\tab The processor status register is set to 0.\par D\tab The direct-page register is set to the bottom of the direct-page/stack space of the program.\par S\tab The stack register is set to the top of the direct-page/stack space.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.1: Register settings after a successful load\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Press Esc to clear the command line.\par You can load a maximum of 15 files.  If you attempt to load more than 15 files, the error message $FF appears on the command line.\par When you load your program, be sure to make a note of the settings of the K/PC and other registers (in the Register subdisplay at the top of the screen) before you do anything else.  After you have used the debugger to run your program, or have reset any registers with debugger commands, you must know the starting location of your program in memory and starting register values in order to run your program again.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Unloading Your Program from the Application Version\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ShutDown call closes down your application.  When you make this call, the System Loader responds in one of three ways depending on the value of the quit flag:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab If the quit flag is 0, the Memory Manager disposes of all memory blocks with the specified user ID and of the ID itself, completely unloading the application.\par 2.\tab If the quit flag is $8000, the Memory Manager purges all memory blocks with the specified user ID, making the application quickly reloadable.\par 3.\tab If the quit flag is any value other than 0 or $8000, the Memory Manager disposes of all blocks corresponding to dynamic segments with the specified user ID, makes purgeable all blocks corresponding to static segments with the specified user ID, and purges all other blocks with the specified user ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In addition, the System Loader deletes all entries for the specified user ID from the Jump Table directory.  The application is ready to be revived quickly by the System Loader until any of its static segments are purged.\par For details on the UserShutDown call, see the GS/OS Reference.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Setting the Prefix}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Setting the Prefix\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To change the current GS/OS file prefix , use the following command:\par \par }{\f6\fs18 Prefix [}{\i\f4\fs20 num}{\f6\fs18 ]}{\f4\fs20  }{\i\f4\fs20 path}{\f4\fs20 \par \par The }{\i\f4\fs20 num}{\f4\fs20  field is optional; no entry within the brackets denotes the default prefix.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Displaying the Version Number}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Displaying the Version Number\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Once you\rquote ve typed something, the version number on the command line of the debugger disappears.  To display the debugger\rquote s version number and copyright message, type V.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Configuring the Debugger}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Configuring the Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:configuration file}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes three commands and options that configure the Master display of the debugger and save the current configuration to the file of your choice.\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab The Set command lets you set up the configuration of the debugger.\par \par \bullet \tab The CSave command allows you to save the current configuration to the file you specify like this:\par \par \tab }{\f6\fs18 CSave }{\i\f4\fs20 pathname}{\f4\fs20 \par \par \bullet \tab The CLoad command lets you load the configuration from the file that you specify like this:\par \par \tab }{\f6\fs18 CLoad }{\i\f4\fs20 pathname}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When you use the Set command, the debugger enters configuration mode.  In this mode, highlighted bars indicate the position of the current stack location (also called the top of the stack) within the Stack subdisplay and the current instruction within the Disassembly subdisplay.  In configuration mode the default printer slot is also shown on the command line.  Table 16.2 gives details on the keys you press to change the configuration.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Press}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\outl\f4\fs18 left-arrow}{\f4\fs20 \tab Moves the position of the current stack location up one line.\par }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Moves the position of the current stack location down one line.\par }{\outl\f4\fs18 up-arrow}{\f4\fs20 \tab Moves the position of the current instruction up one line.\par }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Moves the position of the current instruction down one line.\par }{\i\f4\fs20 number}{\f4\fs20 \tab Sets default printer slot to number (must be between 0 and 7.)\par S\tab Toggles between absolute and relative stack subdisplay addresses.\par D\tab Toggles memory dump alignment on and off.\par Esc\tab Returns to the command line.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.2: Keystrokes for Configuring the Debugger\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When you use the CSave command, the following information is preserved:\par \par \bullet \tab the position of the current instruction within the Disassembly subdisplay.\par \bullet \tab the position of the current stack location within the Stack subdisplay.\par \bullet \tab the number of memory-protection ranges and their settings.\par \bullet \tab the number of breakpoints and their settings.\par \bullet \tab the settings of the RAM subdisplay.\par \bullet \tab the stack address format and dump alignment settings.\par \par The debugger loads a configuration file at startup time containing the information listed above.  This standard configuration file, GSBUG.SETUP, should be located in the System.Setup folder of the disk containing the debugger; otherwise, it will not load automatically (you can still load it manually).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Debugger Display Screens}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Debugger Display Screens\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you enter either version of GSBug, a display similar to the one shown in Figure 16.1 appears on the screen.  This display, called the Master display, contains a command line, plus several subdisplays that contain the following types of information:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab the contents of the 65816\rquote s registers (the Register subdisplay).\par \bullet \tab the contents of the stack (the Stack subdisplay).\par \bullet \tab a disassembly of your program\rquote s object code (the Disassembly subdisplay).\par \bullet \tab the contents of a portion of RAM (memory) that you specify (the RAM subdisplay).\par \bullet \tab the breakpoints you have set (the Breakpoint subdisplay).\par \bullet \tab the memory ranges you have protected (the Memory-Protection subdisplay).\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You also have the option of switching to a display of the contents of the direct page, to a display of the contents of any region of memory you choose, to on-line help, or to any of the display screens normally used by your program.\par The next section discusses the commands you can use to select a display.  Part 3 of this chapter describes them in detail.\par \par }\pard \qc\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1044{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex66\picscaley65\piccropl0\piccropr0\piccropt0\piccropb0\picw465\pich362\picwgoal9300\pichgoal7240\macpict\bliptag-1041518839\blipupi72{\*\blipuid c1ebaf0933a98984ccb3a86191e324af}10c700070007017101d81101a00082a0008ca0008c01000a00070007017101d8300018001c003401cda10096000606000000023da1009a00080003000000c30000a000982c000a001607436f75726965720300160d00092b3123224b4559202042524b202044656275674420204b2f504320202042202020442020202029aa2253202020204120202020582020202059202020204d202020512020204c202050202029aa0b6e766d7864697a6320650da00099a1009a0008fff8000000c30000a0009828002e00312230302020206f206420202030313030202031322f313032452045312030383030203029aa223146442031463030203341423920303030372020354620203333202031202033302029aa0a30303131303030302030a00099a00097a0008da10096000606000000023da1009a0008fffe000000130000a000982c000c00150948656c76657469636103001528001200e109526567697374657273a00099a00097a0008da0008ca0008ca10096000606000000023da1009a00080061000000120000a00098030016280063001408303146463a32330da00099a1009a00080056000000120000a000982a0b08303146453a39440da00099a1009a0008004b000000120000a000982a0b08303146443a36360da00099a1009a00080040000000120000a000982a0b08303146433a44410da00099a1009a00080035000000120000a000982a0b08303146423a41330da00099a1009a0008002a000000120000a000982a0b08303146413a33390da00099a1009a0008001f000000120000a000982a0b08303146393a35410da00099a1009a00080014000000120000a000982a0b08303146383a35410da00099a1009a00080009000000120000a000982a0b08303146373a35410da00099a1009a0008fffe000000120000a000982a0b08303146363a35410da00099a1009a0008fff3000000120000a000982a0b08303146353a41390da00099a1009a0008ffe8000000120000a000982a0b08303146343a33390da00099a1009a0008ffdd000000120000a000982a0b08303146333a46460da00099a1009a0008ffd2000000120000a000982a0b08303146323a33460da00099a1009a0008ffc7000000120000a000982a0b08303146313a32330da00099a1009a0008ffbc000000120000a000982a0b08303146303a30300da00099a1009a0008ffb1000000120000a000982a0b08303145463a30310da00099a1009a0008ffa6000000120000a000982a0b08303145453a41340da00099a1009a0008ff9b000000120000a000982a0b07303145443a3345a00099a00097300057000a01300041a0008da10096000606000000023da1009a0008fffe0000000c0000a00098030015280051001a05537461636ba00099a00097a0008da0008c0a00000000000000003400570049013000ad38a10096000605000000023da1009a000800610000002a0000a000980300162b37121030302f303330353a204531202761270da00099a1009a000800560000002a0000a000982a0b0e30312f303845303a20394442460da00099a1009a0008004b0000002a0000a000982a0b1030312f323030333a203132313230300da00099a1009a000800400000002a0000a000982a0b1030322f304245413a2034302027f0270da00099a1009a000800350000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008002a0000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008001f0000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a000800140000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a000800090000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008fffe0000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008fff30000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ffe80000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ffdd0000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ffd20000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ffc70000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ffbc0000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ffb10000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ffa60000002a0000a000982a0b1030302f303030303a204130202720270da00099a1009a0008ff9b0000002a0000a000982a0b0f30302f303030303a20413020272027a00099a00097a10096000606000000023da1009a0008fffe000000090000a0009803001528005100710352414da00099a00097a0008da0008ca0008ca10096000606000000023da1009a0008002a000000200000a000980300162b4c0a0e45302f313030442d30332d30310da00099a1009a0008001f000000200000a000982a0b0e31322f313130332d30302d30300da00099a1009a00080014000000200000a000982a0b0e30302f303030302d30302d30300da00099a1009a00080009000000200000a000982a0b0e30302f303030302d30302d30300da00099a1009a0008fffe000000200000a000982a0b0e30302f303030302d30302d30300da00099a1009a0008fff3000000200000a000982a0b0e30302f303030302d30302d30300da00099a1009a0008ffe8000000200000a000982a0b0e30302f303030302d30302d30300da00099a1009a0008ffdd000000200000a000982a0b0e30302f303030302d30302d30300da00099a1009a0008ffd2000000200000a000982a0b0d30302f303030302d30302d3030a00099a0009730004e00b500bb0107a0008da10096000606000000023da1009a0008fffe000000190000a0009803001528004800c50b427265616b506f696e7473a00099a00097a0008da0008ca0008c300057010f013001d6a0008ca10096000605000000023da1009a00080061000000280000a000980300162bb91b094c444120313831350da00099a1009a00080056000000280000a000982a0b0b53544120313035302c580da00099a1009a0008004b000000280000a000982a0b0b535441203035333032300da00099a1009a00080040000000280000a000982a0b0a4c44412023363637370da00099a1009a00080035000000280000a000982a0b1142524c2032303330207b2b313032307d0da00099a1009a0008002a000000280000a000982a0b0f4252412031303332207b2b32307d0da00099a1009a0008001f000000280000a000982a0b0950454120333431320da00099a1009a00080014000000280000a000982a0b115045522031303132207b2d303030347d0da00099a1009a00080009000000280000a000982a0b09535441205b34355d0da00099a1009a0008fffe000000280000a000982a0b0950455220303031440da00099a1009a0008fff3000000280000a000982a0b084c4441202332330da00099a1009a0008ffe8000000280000a000982a0b0a4c44582023363734350da00099a1009a0008ffdd000000280000a000982a0b0b454f52203032344535300da00099a1009a0008ffd2000000280000a000982a0b0b4a4d4c202832333839290da00099a1009a0008ffc7000000280000a000982a0b0d4a534c2028463242452c58290da00099a1009a0008ffbc000000280000a000982a0b0d414443202834302c53292c590da00099a1009a0008ffb1000000280000a000982a0b0b434d5020283036292c590da00099a1009a0008ffa6000000280000a000982a0b0441534c0da00099a1009a0008ff9b000000280000a000982a0b0642524b203233a00099a00097a10096000605000000023da1009a00080061000000330000a0009828006301171231322f313030303a2041442031352031380da00099a1009a00080056000000330000a000982a0b1231322f313030333a2039442035302031300da00099a1009a0008004b000000330000a000982a0b1531322f313030363a2039462032302033302030350da00099a1009a00080040000000330000a000982a0b1231322f313030413a2041392037372036360da00099a1009a00080035000000330000a000982a0b1231322f313030443a2038322032302031300da00099a1009a0008002a000000330000a000982a0b0f31322f313031303a2038302032300da00099a1009a0008001f000000330000a000982a0b1231322f313031323a2046342031322033340da00099a1009a00080014000000330000a000982a0b1231322f313031353a2036322046432046460da00099a1009a00080009000000330000a000982a0b0f31322f313031383a2038372034350da00099a1009a0008fffe000000330000a000982a0b1231322f313031413a2036322030302046300da00099a1009a0008fff3000000330000a000982a0b0f31322f313031443a2041392032330da00099a1009a0008ffe8000000330000a000982a0b1231322f313031463a2041322034352036370da00099a1009a0008ffdd000000330000a000982a0b1531322f313032323a2034462035302034452030320da00099a1009a0008ffd2000000330000a000982a0b1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000330000a000982a0b1231322f313032393a2037432042452046320da00099a1009a0008ffbc000000330000a000982a0b0f31322f313032433a2037332034300da00099a1009a0008ffb1000000330000a000982a0b0f31322f313032453a2043312030360da00099a1009a0008ffa6000000330000a000982a0b0c31322f313033303a2030410da00099a1009a0008ff9b000000330000a000982a0b0e31322f313033313a203030203233a00099a00097a0008da0008da10096000606000000023da1009a0008fffe0000001a0000a0009803001528005101590b446973617373656d626c79a00099a00097a0008da0008ca0008ca10096000606000000023da1009a0008002a000000230000a000980300162800d800ba0f45312f303030302e303030462d540da00099a1009a0008001f000000230000a000982a0b0f30312f303930302e314646462d540da00099a1009a00080014000000230000a000982a0b0f30312f363030302e393546462d570da00099a1009a00080009000000230000a000982a0b0f30312f443030302e443633332d570da00099a1009a0008fffe000000230000a000982a0b0f30302f303030302e303030302d3f0da00099a1009a0008fff3000000230000a000982a0b0f30302f303030302e303030302d3f0da00099a1009a0008ffe8000000230000a000982a0b0f30302f303030302e303030302d3f0da00099a1009a0008ffdd000000230000a000982a0b0f30302f303030302e303030302d3f0da00099a1009a0008ffd2000000230000a000982a0b0e30302f303030302e303030302d3fa00099a000973000d000b501340107a0008da10096000606000000023da1009a0008fffe000000260000a0009803001528013f00b8114d656d6f72792050726f74656374696f6ea00099a00097a0008da0008ca0008ca10096000605000000023da1009a0008fffe0000003e0000a000980300162801680019163a206c6f6164202f4d5946494c45532f4d5950524f47a00099a0009730015c0013016f01c4a0008da10096000606000000023da1009a0008fffe0000001d0000a0009803001528015600ce0c436f6d6d616e64204c696e65a00099a00097a0008da00083ff}}{\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.1: Main Display\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Switching Displays}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Switching Displays\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When you start GSBug, the Master display appears on the screen.  To turn the Master display screen off, type off.  To turn the Master display screen on again, type on.\par When you turn the Master display off, the standard 80-column screen that is used by Apple IIGS applications appears in its place.  You can still type in commands while the Master display is turned off.  Any command you enter that uses the Master display automatically turns it on again.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Selecting Displays}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Selecting Displays\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:selecting displays}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Use the commands in Table 16.3 to call other displays.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Display}{\f4\fs20 \tab }{\f4\fs20\ul How to Select}{\f4\fs20 \par \par Help Screen\tab From any display, type a question mark (?) and press Return.\par Memory\tab From the Master display, type the starting address of the memory block you wish to display, followed by a colon (:), and press Return.\par Direct-Page\tab From the Master display, type DP: and press Return.\par Application\tab To see the display generated by your application, type off on the Master display command line, press Return, and then start your application as described in the section "Running Your Program" later in this chapter.  \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\tx2160\adjustright {\f4\fs20 \tab \tab To change the display mode, press one of the keys listed in Table 16.4.\par Monitor\tab To call the Monitor, type mon on the Master display command line and press Return.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20 Master Display\tab In Direct-Page or Memory display, press Esc.  If your application is being displayed, type on and press Return.  From the Monitor, press Control-Y and Return to return to the Master display.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.3: Selecting Debugger Displays\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If the command filter is in effect, you must hold down one or more keystroke-modifier keys to pass commands on to the debugger while your program is running.  See the section "The Command Filter", later in this chapter, for more information on this function.\par Table 16.4 lists the single keypress commands that work while in single-step or trace modes only; see the section "Single-Step and Trace Modes", later in this chapter, for more information on these keypress commands.\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\adjustright {\f4\fs20\ul Press}{\f4\fs20 \tab }{\f4\fs20\ul For This Display}{\f4\fs20 \par \par 1\tab Text or graphics page 1\par 2\tab Text or graphics page 2\par 4\tab 40-column screen\par 8\tab 80-column screen\par T\tab Text mode\par F\tab Full-Screen graphics\par M\tab Mixed text and graphics\par L\tab Low-Resolution graphics\par H\tab High-resolution graphics mode\par D\tab Double high-resolution graphics mode\par B\tab Black-and-White (for double high resolution graphics mode)*\par C\tab Color (for double high-resolution graphics mode)*\par S\tab Super high-resolution graphics mode\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.4: Single Key Press Commands to Change Displays in Single-step or Trace Modes\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f4\fs18 * These commands work only on a color RGB monitor.\par }{\f4\fs20 \par Table 16.5 provides key sequences to switch from a display to the command line if you are not in real-time or trace mode.  These are escape sequences, so you can type them in at any place on the command line.  They are not displayed and have no effect on the command being typed.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:selecting displays}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1440\adjustright {\f4\fs20\ul Press}{\f4\fs20 \tab }{\f4\fs20\ul For This Display}{\f4\fs20  \par \par \\1\tab Text or graphics page 1\par \\2\tab Text or graphics page 2\par \\4\tab 40-column mode\par \\8\tab 80-column mode\par \\T\tab Text mode\par \\F\tab Full-Screen graphics mode\par \\M\tab Mixed text and graphics mode\par \\L\tab Low-Resolution graphics mode\par \\H\tab High-resolution graphics mode\par \\D\tab Double high/low-resolution mode\par \\S\tab Super high-resolution graphics mode\par \\B\tab Black-and-White double high-resolution mode\par \\C\tab Color double high-resolution mode\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Table 16.5: Command-Line Sequences to Switch Screen Displays \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Master Display}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Master Display\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:master display}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In either version of GSBug, the Master display includes information on many aspects of the debugging process.  When you start GSBug, a display similar to the one in Figure 16.1 appears.  The exact contents of this display depend on the actual contents of memory and on the way in which you have configured the debugger.\par This section briefly describes the use of each subdisplay.  For detailed descriptions and more in-depth information, refer to the detailed reference sections at the end of this chapter.\par The Register subdisplay shows the contents of several 65816 hardware registers, the M and Q pseudoregisters, and some flags and addresses used by the debugger.\par The Stack subdisplay shows the contents of 19 bytes of your program\rquote s stack.  The default location for the stack pointer is the bottom line in the Stack subdisplay, but you can set it to any line you choose with the Set command.\par The Disassembly subdisplay shows a disassembly of the machine code in memory using standard assembler mnemonics and address-mode syntax.  Disassembly operand formats are shown in Table 16.18.  When you start the debugger, this subdisplay is blank.  You can assemble a single instruction and display it at the bottom of this subdisplay, or you can disassemble any 19 contiguous lines of code and list them in this field.  When you enter trace or single-step modes, a running disassembly of your program appears in the Disassembly subdisplay, with the current instruction highlighted.  You can use the Set command to change the line used for the current instruction.\par The RAM subdisplay shows the contents of any 19 memory locations you select.  You can display each section as a single hexadecimal byte with the equivalent ASCII character (or MouseText character if the high bit is set), as a 2-byte value, or as a 3-byte value.  The debugger can also do up to three levels of indirection.\par The Breakpoint subdisplay shows from 0 to 17 breakpoint locations you have set.  A breakpoint is a point in your code at which you want the debugger to suspend execution so you can examine the contents of memory and the registers.  Each breakpoint includes a trigger value\emdash that is, the number of times you want the code at that location to be executed before execution is interrupted, and a trigger count, the number of times the program has actually passed through this breakpoint so far.  You can increase or decrease the number of lines in the Breakpoint subdisplay by simultaneously adjusting the number of lines in the Memory-Protection subdisplay.\par The Memory-Protection subdisplay shows memory-address ranges that you have set either to be executed in real time (code-trace ranges, indicated by a T) or to be the only ranges within which code can be executed at all (code-window ranges, indicated by a W).  You can increase or decrease the number of lines in the Memory-Protection subdisplay by simultaneously adjusting the number of lines in the Breakpoint subdisplay.  You can also set a single line as a trace-history window indicated by an H.\par The command-input line (or command line) is used for executing most debugger commands.  The only commands not executed from this line are the single-keystroke commands used to control code trace; the cursor movement commands used to enter data into the Master display and the Esc key, which is used to return to the Master display from other displays.  See the section "Command-Line Commands" in Chapter 3 for a list of the commands available from the Master display.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Test-Program Display}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Test-Program Display\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To turn off the debugger\rquote s Master display and show the normal screen display of your program, type off on the command line and press Return.  Although GSBug uses only the 80-column text mode, it remembers the last display mode your program was in and switches to that mode when you turn off the Master display.\par To change to a different display mode, turn off the Master display, enter trace or single-step mode, and use one of the display-mode commands listed in the section "Single-Step and Trace Modes".  To return to the Master display, type on and press Return.\par If the command filter is in effect, you must hold down one or more keystroke-modifier keys to pass commands on to the debugger.  See the section "The Command Filter" for more information on this function.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Memory Display}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Memory Display\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:memory display}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:displaying memory}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can select a display of the contents of any 336 contiguous bytes of RAM in a single memory bank.  To get a Memory display, type the starting address of the memory block, followed by a colon (:), in the command line in the Master display and press Return.  For example, to obtain a display of the contents of the 368 bytes starting at address 1100 in bank 12, type the following (the slash (/) is optional):\par \par }{\f6\fs18 12/1100:\par }{\f4\fs20 \par You can use the commands listed in Table 16.6 to display the contents of memory on the screen.\par \par }\pard \qj\fi-2160\li2520\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par }{\i\f4\fs20 address}{\f4\fs20  and Return\tab Displays 16 bytes of memory on command line.\par }{\i\f4\fs20 address}{\f4\fs20 :\tab Displays memory starting at }{\i\f4\fs20 address}{\f4\fs20 .\par }{\i\f4\fs20 address}{\f4\fs20 ::\tab Displays memory starting at the 2-byte address stored at }{\i\f4\fs20 address}{\f4\fs20 .\par }{\i\f4\fs20 address}{\f4\fs20 :::\tab Displays memory starting at the 3-byte address stored at }{\i\f4\fs20 address}{\f4\fs20 .\par }{\i\f4\fs20 address1.address2}{\f4\fs20 :\tab Displays memory from }{\i\f4\fs20 address1}{\f4\fs20  to }{\i\f4\fs20 address2}{\f4\fs20 .\par }{\f6\fs18 DP:}{\f4\fs20 \tab Displays the contents of the Direct page.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.6: Displaying memory on the screen\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If you request more bytes than the debugger can display, only the bytes that can fit on the screen appear.  To display the next screen full of memory, press the Space bar to display the next address on the command line, and then press Return.\par A sample Memory display is shown in Figure 16.2.  Each line begins with the memory address of the first byte shown on that line, followed by the contents of 16 memory locations.  The memory contents are shown first as hexadecimal values and then as their equivalent ASCII characters.  Table 16.7 shows how the character set is displayed.\par \par }\pard \qj\fi360\keepn\widctlpar\tx1800\adjustright {\f4\fs20\ul ASCII Value}{\f4\fs20 \tab }{\f4\fs20\ul Displayed As}{\f4\fs20 \par $00\endash $1F\tab .(period)\par $20\endash $7F\tab Normal video\par $80\endash $9F\tab .(inverse-video period)\par $A0\endash $FF\tab Inverse video\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.7: Character set for memory contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\keepn\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1045{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex82\picscaley82\piccropl0\piccropr0\piccropt0\piccropb0\picw467\pich306\picwgoal9340\pichgoal6120\macpict\bliptag-1771526562\blipupi72{\*\blipuid 9668a65ede5b6014a81187f6305e2915}0c9f00070007013901da1101a00082a10096000605000000020ca1009a0008008d000000e60000a0009801000a00070007013901da0300160d000a2b0b13225f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f29cc225f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f29cc085f5f5f5f5f5f5f0da00099a1009a00080081000000e60000a0009828001f000b2231322f313130303a093031203032203033203034203035203036203037203038203029cc2239203041203042203043203044203045203046203130092e2e2e2e2e2e2e2e2e2e2e29cc062e2e2e2e2e0da00099a1009a00080075000000e60000a0009828002b000b2231322f313131303a093131203132203133203134203135203136203137203138203129cc2239203141203142203143203144203145203146203230092e2e2e2e2e2e2e2e2e2e2e29cc062e2e2e2e200da00099a1009a00080069000000e60000a00098280037000b2231322f313132303a093231203232203233203234203235203236203237203238203229cc2239203241203242203243203244203245203246203330092122232425262728292a2b29cc062c2d2e2f300da00099a1009a0008005d000000e60000a00098280043000b2231322f313133303a093331203332203333203334203335203336203337203338203329cc2239203341203342203343203344203345203346203430093132333435363738393a3b29cc063c3d3e3f400da00099a1009a00080051000000e60000a0009828004f000b2231322f313134303a093431203432203433203434203435203436203437203438203429cc2239203441203442203443203444203445203446203530094142434445464748494a4b29cc064c4d4e4f500da00099a1009a00080045000000e60000a0009828005b000b2231322f313135303a093531203532203533203534203535203536203537203538203529cc2239203541203542203543203544203545203546203630095152535455565758595a5b29cc065c5d5e5f600da00099a1009a00080039000000e60000a00098280067000b2231322f313136303a093631203632203633203634203635203636203637203638203629cc2239203641203642203643203644203645203646203730096162636465666768696a6b29cc066c6d6e6f700da00099a1009a0008002d000000e60000a00098280073000b2231322f313137303a093731203732203733203734203735203736203737203738203729cc2239203741203742203743203744203745203746203830097172737475767778797a7b29cc067c7d7e20200da00099a1009a00080021000000e60000a0009828007f000b2231322f313138303a093831203832203833203834203835203836203837203838203829cc1a392038412038422038432038442038452038462039300920200da00099a1009a00080015000000e60000a0009828008b000b2231322f313139303a203931203932203933203934203935203936203937203938203929cc193920394120394220394320394420394520394620413020200da00099a1009a00080009000000e60000a00098280097000b2231322f313141303a204131204132204133204134204135204136204137204138204129cc193920414120414220414320414420414520414620423020200da00099a1009a0008fffd000000e60000a000982800a3000b2231322f313142303a204231204232204233204234204235204236204237204238204229cc193920424120424220424320424420424520424620433020200da00099a1009a0008fff1000000e60000a000982800af000b2231322f313143303a204331204332204333204334204335204336204337204338204329cc193920434120434220434320434420434520434620443020200da00099a1009a0008ffe5000000e60000a000982800bb000b2231322f313144303a094431204432204433204434204435204436204437204438204429cc1839204441204442204443204444204445204446204530200da00099a1009a0008ffd9000000e60000a000982800c7000b2231322f313145303a204531204532204533204534204535204536204537204538204529cc1839204541204542204543204544204545204546204630200da00099a1009a0008ffcd000000e60000a000982800d3000b2231322f313146303a204631204632204633204634204635204636204637204638204629cc223920464120464220464320464420464520464620303020202020202020202020202029cc06202020202e0da00099a1009a0008ffc1000000e60000a000982800df000b2231322f313230303a203031203032203033203034203035203036203037203038203029cc2239203041203042203043203044203045203046203130092e2e2e2e2e2e2e2e2e2e2e29cc062e2e2e2e2e0da00099a1009a0008ffb5000000e60000a000982800eb000b2231322f313231303a203131203132203133203134203135203136203137203138203129cc2239203141203142203143203144203145203146203230092e2e2e2e2e2e2e2e2e2e2e29cc062e2e2e2e200da00099a1009a0008ffa9000000e60000a000982800f7000b2231322f313232303a203231203232203233203234203235203236203237203238203229cc2239203241203242203243203244203245203246203330092122232425262728292a2b29cc062c2d2e2f300da00099a1009a0008ff9d000000e60000a00098280103000b2231322f313233303a203331203332203333203334203335203336203337203338203329cc2239203341203342203343203344203345203346203430093132333435363738393a3b29cc063c3d3e3f400da00099a1009a0008ff91000000e60000a0009828010f000b2231322f313234303a203431203432203433203434203435203436203437203438203429cc2239203441203442203443203444203445203446203530094142434445464748494a4b29cc064c4d4e4f500da00099a1009a0008ff85000000e60000a0009828011b000b2231322f313235303a203531203532203533203534203535203536203537203538203529cc2239203541203542203543203544203545203546203630095152535455565758595a5b29cc065c5d5e5f600da00099a1009a0008ff79000000e60000a00098280127000b2231322f313236303a203631203632203633203634203635203636203637203638203629cc2239203641203642203643203644203645203646203730096162636465666768696a6b29cc066c6d6e6f700da00099a1009a0008ff6d000000e60000a00098280133000b093a31322f313237303aa00099a000973400c9016700d801c338200135000b013501c234006d01c2007601cc38a10096000605010000020ca1009a0008fffe000000060000a0009801000a000000000000000004080d000928007301be012e01000a00070007013901da900002006a01c2007601ca006a01c4007601ca006a01c4007601ca000100000000000000000000000000000e000a000e0000000000a00099a00097a10096000605000000020c02ffffffffffffffff3200760167008301cca1009a0008fffe000000320000a0009828007f01680d2e2e2e2e2e2e2e2e2e2e2e2e2e294e032e2e2ea00099a00097a10096000605000000020c3200810167008e01cca1009a0008fffe000000320000a0009828008a01680d2e2e2e2e2e2e2e2e2e2e2e2e2e294e032e2e20a00099a00097a10096000605000000020c32008d0167009a01cca1009a0008fffe000000320000a0009828009601680d2122232425262728292a2b2c2d294e032e2f30a00099a00097a10096000605000000020c32009a016700a701cca1009a0008fffe000000320000a000982800a301680d3132333435363738393a3b3c3d294e033e3f40a00099a00097a10096000605000000020c3200a6016700b301cca1009a0008fffe000000320000a000982800af01680d4142434445464748494a4b4c4d294e034e4f50a00099a00097a10096000605000000020c3200b2016700bf01cca1009a0008fffe000000320000a000982800bb01680d5152535455565758595a5b5c5d294e035e5f60a00099a00097a10096000605000000020c3200be016700cb01cca1009a0008fffe000000320000a000982800c701680d6162636465666768696a6b6c6d294e036e6f70a00099a00097a10096000605000000020ca1009a0008fffe0000002f0000a000982800d201680d7172737475767778797a7b7c7d294e027e20a00099a00097a10096000605000000020ca1009a0008fffd000000070000a000980d000a28007301c3012ea00099a000970aaa55aa55aa55aa5534006d01bc007401c03400cb01bd00d201c1a00083ff}}{\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.2: Sample Memory Display\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Press Esc or type on to return to the Master display.\par If you enter any command other than one that displays or sets memory, the Master display replaces the Memory display and the command is executed.\par An ASCII equivalent of memory is displayed to the right of the dump.\par The Memory display is aligned initially.  When the display is aligned, the byte stored at XX/XXXn is displayed in the nth position on the screen.  If the display is not aligned, the first byte in the dump appears in the first position.  \par Use the Set command to change the Memory display alignment.  See "Configuring the Debugger" earlier in this chapter for details.\par To change the contents of memory, use the commands described in the section "Altering the Contents of Memory" later in this chapter.  To return to the Master display, press Esc.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Displaying Memory on the Command Line}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Displaying Memory on the Command Line\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:command line}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:displaying memory}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can display 16 bytes of memory on the command line with the Quick-Dump command.  Simply type the starting address for the 16-byte display and press Return.\par For example, you might type 12 and press Return for the following command-line display:\par \par }{\f6\fs18 :01/0012: FF 00 00 FF FF 00 00 FF FF 00 00 FF FF 00 00 FF\par }{\f4\fs20 \par The Quick Dump display remains on the command line until you type any key.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Direct-Page Display}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Direct-Page Display\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:displaying memory}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can select GSBug\rquote s Direct-Page display by typing DP: on the command line and pressing Return.  This display shows 368 bytes starting with the address in the D register.  The Direct-Page display is identical in appearance and function to the Memory display that you would obtain for a block of memory starting at the address in the D register.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Help Screens}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Help Screens\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To display a help screen showing the commands available at any time, type a question mark (?).  To return from the help screen to the display from which you called it, press any key except Esc.  To return to the Master display, press Esc.\par From within any of the subdisplays in the Master display, type ? to view a help screen with commands relevant to that subdisplay.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Stepping Through Your Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Stepping Through Your Program\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:debugging}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can step through your program one instruction at a time or continuously, with GSBug intercepting and interpreting each instruction.  Executing your program in this fashion gives you maximum control over the process, allowing you to stop at any point and examine the contents of the registers or your program\rquote s display.  For timing-critical programs and sections of programs, you can also execute the code at full speed.  See "Running Your Program" later in this chapter for explanations of how to:\par \par \bullet \tab step through your program one instruction at a time (single-step mode).\par \bullet \tab step continuously through your program (trace mode).\par \bullet \tab execute your program at full speed (real-time mode).\par \bullet \tab set and use breakpoints.\par \bullet \tab set and use memory-protection ranges.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Printing Debugger Screens}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Printing Debugger Screens\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:printing}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can print the current 80-column debugger text screen, including help screens and your program\rquote s display, by typing P on the command line and pressing Return.  This prints the current screen to the printer in the default printer slot, which is initially slot 1.  You cannot use the P command to print graphics screens.  You can print the current text screen to the printer in a given slot with the command\par \par }{\f6\fs18 P }{\i\f4\fs20 num}{\f4\fs20 \par \par To change the slot to which the debugger assumes the printer is connected, use the Set command as described in the section "Configuring the Master Display".\par GSBug does not print using the .PRINTER driver, so the printer initialization string and other printer variables you set for the .PRINTER driver are not active when you are in the debugger.  If you use the Apple IIGS computer\rquote s built-in printer port, you can use the Control Panel to set printer communication options.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using Monitor Routines}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Monitor Routines\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Apple IIGS Monitor consists of a set of ROM-based routines that you can use to perform many functions not otherwise available from the debugger.  The Monitor provides the following features, so you can:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab examine the contents of any locations in memory, including ROM routines.\par \bullet \tab change the contents of any locations in RAM.\par \bullet \tab copy a block of data from one location in memory into another and verify that the contents of the two blocks of memory are identical.\par \bullet \tab clear a range of memory.\par \bullet \tab search for one or more bytes within a range of memory addresses.\par \bullet \tab examine and change the contents of Apple IIGS registers.\par \bullet \tab convert hexadecimal numbers to decimal and vice versa.\par \bullet \tab perform hexadecimal addition and subtraction.\par \bullet \tab run a machine-language program that is in memory.\par \bullet \tab enter machine-language programs directly from the keyboard, using standard 65816 mnemonics (this Monitor routine is called the Mini-Assembler).\par \bullet \tab disassemble a range of addresses.\par \bullet \tab start Applesoft BASIC.\par \bullet \tab change the screen display.\par \bullet \tab change the cursor symbol.\par \bullet \tab redirect input and output links.\par \bullet \tab call Apple IIGS tools.\par \bullet \tab set and display the system clock time and date.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par To enter the Apple IIGS Monitor, type }{\f6\fs18 mon}{\f4\fs20  on the debugger\rquote s command line and press Return.  To return from the Monitor to the debugger, press Control-Y and press Return.  The Apple IIGS Monitor is described in detail in the }{\i\f4\fs20 Apple IIGS Firmware Reference}{\f4\fs20 .\par Note: the registers or stack may be changed while you are in the monitor.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Quitting the Debugger}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Quitting the Debugger\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:quitting}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are three commands that let you exit the debugger:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab Q lets you quit the debugger from either the application or the init version.  It restores the state of the machine for the next startup.\par \par \tab Note:  The Q command only saves the display state and the state of the registers.\par \par \tab Warning:  For the init version only: if you\rquote ve changed memory (or if memory has been changed), the debugger may crash when quitting.\par \par \bullet \tab The QR command only applies to the init version of the debugger.  QR also allows you to exit the debugger but does not restore the state of the machine at startup\emdash  rather it is left as modified during the current session.  See "Entering the Init Version" earlier in this chapter for details.\par \par \bullet \tab Unload allows you to unload the debugger from memory and then quit (not available in the application version).\par \par \tab Warning:  Be sure to remove real breakpoints with the Out command before exiting the debugger.  (See "Using Breakpoints" for details on the Out command.) If the breakpoints are not removed, the break instructions stay in memory so that the original instructions cannot be restored.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If you exit the debugger with the Q command, you instruct the debugger to restore all display screens to their state prior to launch and then jump to the address indicated by the current value of the program counter (K/PC).  See "65816 Registers" for details.  Upon quitting with the Q command, the debugger also deallocates all the memory allocated during that session, including the 1K direct-page and stack blocks, and any files loaded with the Load command.  The process of unloading the debugger completely removes it from memory with the following steps:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab It removes the heartbeat task and restoration of the CDA vector.\par 2.\tab It checks the break vector to see if it has been altered by the user.  If the break vector has not been changed, the debugger restores it to its value at first patch during initialization.  If the user has modified the break vector, the debugger does not restore it.\par 3.\tab It deallocates the memory in which the debugger was loaded.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Part 2: Using GSBug}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Part 2\: Using GSBug\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug allows you to load your program into memory and run through it under the debugger\rquote s control.  As the program executes, you can examine the contents of the 65816\rquote s registers, your program\rquote s direct page and stack, and any memory locations in which you are interested.  You can interact with the program as required, returning to the debugger\rquote s display when the program reaches the breakpoints that you set or when it crashes.\par GSBug can display an assembly-language disassembly of your program\rquote s machine code.  It cannot execute your source code or recreate your source code from machine code.  Therefore, the debugger is easiest to use with assembly-language programs.  However, even if your program was written in a higher-level language and you have no knowledge of assembly language, you can use the debugger to determine in which load segment the problem lies.  You can also gain a better understanding of your program\rquote s operation by examining the contents of the stack, direct page, memory, and registers.\par This part of the chapter begins with a discussion of how to get help and run your program through the debugger.  We do not have the space to examine in detail all of the abilities of GSBug in this topical overview, but the remainder of the chapter provides you with some hints that should help you start debugging your programs.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Getting Help}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Getting Help\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To display a help screen with a list of important debugger commands, type a question mark (?) on the command line and press Return.  To return to the command line of the Master display, type ?.\par To display a help screen for any of the subdisplays within the Master display, type a question mark from within the desired subdisplay.  To return to the command line of the Master display, press Esc.  To return to the subdisplay associated with that help screen, press any other key.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Running Your Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Running Your Program\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can step through your program one instruction at a time or continuously, with GSBug intercepting and interpreting each instruction.  Executing your program in this fashion gives you maximum control over the process, allowing you to stop at any point and examine the contents of the registers or your program\rquote s display.  For timing-critical programs and sections of programs, you can also execute the code at full speed.  This section explains how to:\par \par \bullet \tab step through your program one instruction at a time (single-step mode).\par \bullet \tab step continuously through your program (trace mode).\par \bullet \tab execute your program at full speed (real-time mode).\par \bullet \tab set and use breakpoints.\par \bullet \tab set and use memory-protection ranges.\par \par In single-step and trace modes, if the application writes or steps to a location between 20 bytes before the beginning of the debugger\rquote s stack and 8 bytes after the end of the debugger\rquote s stack, the debugger stops executing the program and prints S= on the command line.  To continue operation, you must change the value of the S register so that it is outside the debugger\rquote s stack range.  In real-time mode, a stack conflict can crash the debugger.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Single-Step and Trace Modes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Single-Step and Trace Modes\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:debugging}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In both single-step and trace modes, the code appears in the Disassembly subdisplay as it is being executed, with the current instruction (the one that is about to be executed) highlighted.  In both modes the code scrolls up the screen.\par Use the Set command to change the position of the current instruction.  See "Configuring the Debugger" earlier in this chapter for details.\par In single-step mode you can step through your program one instruction at a time.  As each instruction is about to be executed, it is highlighted in the Disassembly subdisplay of the Master display.\par In trace mode GSBug automatically steps through each instruction in succession; trace mode is identical to single-step mode except that it is free-running.\par During code execution, the lines above the current instruction display the instructions that have been executed.  The lines below show the instructions following the current instruction.  Note that these lines are not necessarily the same as the instructions that will be executed.  For example, if a jump instruction follows the current instruction, the instruction after the jump will probably not be executed but only displayed.\par The current state of the m, x, and e bits determines the operand lengths of the instructions displayed beneath the current instruction.  The Disassembly mode flag (d) has no effect during a trace or single-step.\par Real breakpoints appear as BRK instructions below the current instruction; however, when the debugger actually reaches the real breakpoints, the actual instruction \endash  not the BRK instruction \endash  is shown.\par Use the command-line commands in Table 16.8 to initiate single-step and trace modes.  The command line is still active if you turn the Master display off to see your program\rquote s display.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 S}{\f4\fs20 \tab Enters single-step mode at the current instruction.  The current instruction is the next instruction to be executed as indicated by the K/PC register.  The K/PC register is updated by the debugger each time an instruction is executed in single-step or trace modes, each time a new program is loaded, and each time you execute a K= , PC=, or K/PC= command.  The current instruction appears at the highlighted line of the Disassembly subdisplay; press the Space bar to execute it, or press Return to enter trace mode.\par }{\i\f4\fs20 address}{\f6\fs18 S}{\f4\fs20 \tab Enters single-step mode at }{\i\f4\fs20 address}{\f4\fs20 .  The K/PC register is set to }{\i\f4\fs20 address}{\f4\fs20  and the instruction at address appears at the highlighted line of the Disassembly subdisplay; press the Space bar to execute it, or press Return to enter trace mode.\par }{\f6\fs18 T}{\f4\fs20 \tab Enter trace mode at the current instruction (as indicated by the K/PC register and the highlighted line of the Disassembly subdisplay).  The debugger begins executing code immediately and continues to execute instructions until you press Esc to stop it or until it reaches a breakpoint or a BRK instruction.\par }{\i\f4\fs20 address}{\f6\fs18 T}{\f4\fs20 \tab Enters trace mode at }{\i\f4\fs20 address}{\f4\fs20 .  The K/PC register is set to }{\i\f4\fs20 address}{\f4\fs20 , and the debugger begins executing code immediately.  The debugger continues to execute instructions until you press Esc to stop it, or until it reaches a breakpoint or a BRK instruction.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.8: Commands for Initiating Single-Step and Trace Modes\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When you load your program, be sure to make a note of the values of all the fields in the Register subdisplay before you do anything else.  After you have used the debugger to run your program, or have reset any registers with a debugger command, you must know the starting location and register settings for your program in order to run it.\par Once you are in either single-step or trace mode, you can use any of the keypress commands in Table 16.9.  The commands that change display modes are intended for use with your program\rquote s display.  Do not use them when the debugger\rquote s Master display is on the screen.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par Esc\tab Terminates trace or single-step mode and return to the command line.\par Space bar\tab Single-steps one instruction (or enters single-step mode if in trace mode).\par Return\tab Starts continuous tracing.\par R\tab Traces until the next RTS, RTI, or RTL.  This command allows you to trace through one subroutine at a time.\par J\tab Begins to execute code in real time at the current instruction.\par X\tab If the current instruction (the next to be executed) is a JSL or JSR, executes in real time until the matching RTL or RTS.  If the next instruction is not a JSL or JSR, ignores this command.\par }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Skips the next instruction.  You can use this command to skip a BRK instruction, for example.\par Q\tab Toggles the sound on or off.  If the sound is on, the speaker beeps each time an instruction is executed.\par 1\tab Changes the display to text or graphics page 1.  Use this command when in 40-column text mode or mixed text and graphics mode.\par 2\tab Changes the display to text or graphics page 2.  Use this command when in 40-column text mode or mixed text and graphics mode.\par 4\tab Changes the display to a 40-column screen.  Use this command when in text mode.\par 8\tab Changes the display to an 80-column screen.  Use this command when in text mode.\par T\tab Changes the display to text mode.\par F\tab Changes the display to full-screen graphics mode.\par M\tab Changes the display to mixed text and graphics mode.\par L\tab Changes the display to low-resolution graphics mode.\par H\tab Change the display to high-resolution graphics mode.\par D\tab Changes the display to double high/low resolution graphics mode.\par S\tab Changes the display to super high-resolution graphics mode.  This is the normal Apple IIGS display mode.\par B\tab Changes the display to black-and-white, double high-resolution graphics mode.\par C\tab Changes the display to color, double high-resolution graphics mode.\par }{\outl\f4\fs18 left-arrow}{\f4\fs20 \tab Changes to the slow trace rate.\par }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Changes to the fast trace rate.\par }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \tab Pauses the trace until the Apple key is released.\par ?\tab Displays the command help screen.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.9: Single-Step or Trace Mode Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If the command filter is in effect, you must hold down one or more keystroke-modifier keys to pass commands on to the debugger.  See "The Command Filter" later in this chapter for more information on this function.\par Both trace and single-step modes are terminated under three conditions:\par \par \bullet \tab the occurrence of a BRK instruction.\par \bullet \tab the execution of code that is not in any code-window range.\par \bullet \tab the encounter of a JSL in a code-trace range.\par \par If a breakpoint is triggered while the debugger is in trace mode, execution immediately terminates.  If a breakpoint is triggered in single-step mode, the debugger will beep, but it will remain in single-step mode.  Both tracing and single-stepping will also terminate immediately if code is executed that is not in any code-window range.\par In addition, if the debugger encounters a JSL in a code-trace range during trace or single-step mode, the subroutine is automatically run in real-time.  See "Using Memory Protection Ranges" later in this chapter for details.\par The debugger recognizes two GS/OS entry points: the standard GS/OS entry point at $E100A8 and the stack-based entry point at $E100B0.  If the debugger encounters a JSL to either address, it automatically executes the call in real-time.\par Trace or single-step modes still operate if the display is turned off with the Off command.  When code execution terminates for any reason, the display turns back on automatically, and the Disassembly subdisplay looks the same.  Tracing with the display off is much faster than with it on.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Saving and Viewing a Trace History File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Saving and Viewing a Trace History File\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:trace history}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can save a history of a trace to a file on a disk.  A trace history saves all the instructions inside a history window while you are tracing or single-stepping through a program.  A trace history file also saves the state of all registers when the debugger executed an instruction.\par Table 16.10 lists the commands for saving and viewing a trace history.\par \par }\pard \qj\fi-2160\li2520\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 OpenHist}{\f4\fs20  }{\i\f4\fs20 pathname}{\f4\fs20 \tab Opens the file specified by }{\i\f4\fs20 pathname}{\f4\fs20  as a history file.\par }{\f6\fs18 CloseHist}{\f4\fs20 \tab Closes the currently open history file.\par }{\f6\fs18 ViewHist }{\i\f4\fs20 pathname}{\f4\fs20 \tab Displays the history file specified by }{\i\f4\fs20 pathname}{\f4\fs20  in the Disassembly subdisplay.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.10: Trace History Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When you open a history file, the debugger preserves all instructions executed within the history window to the specified file, including instructions from several separate traces.  Make sure you close your history file when you have completed the execution of the desired code.\par If an already existing history file remains open, GSBug will overwrite it.\par Attempting to open a history file when there is a currently open one is an error.  If a disk error occurs while the debugger is recording a trace history, the history file is closed automatically.\par You can set a single line as a trace history window in the Memory-Protection subdisplay with the H command.  See the "Setting History Windows" subsection in "Memory Protection" later in this chapter.  If no trace history windows are set, GSBug saves all instructions that are executed.\par Use the ViewHist command to view a saved history file in the Disassembly subdisplay.  The saved history display:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab highlights the current instruction.\par \bullet \tab shows the current history step on the command line.\par \bullet \tab sets the registers on the top of the screen to values held just before execution of the current instruction.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Although the Stack register changes during a trace history, the Stack subdisplay does not change because the debugger does not save any memory locations with the trace history.  Thus the values on the stack when you are viewing the history are not the same as the values present at program execution.\par Table 16.11 describes the commands you can use to control the viewing of the history.\par \par }\pard \qj\fi-2160\li2520\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\outl\f4\fs18 up-arrow}{\f4\fs20 \tab Goes to previous step.\par }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Goes to next step.\par }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 -}{\outl\f4\fs18 up-arrow}{\f4\fs20 \tab Goes up one page (19 steps).\par }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 -}{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Goes down one page (19 steps).\par }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Goes to last step.\par }{\outl\f4\fs18 left-arrow}{\f4\fs20 \tab Goes to first step.\par }{\i\f4\fs20 number}{\f4\fs20  (press Return)\tab Goes to step specified by number.\par Esc\tab Exits history display.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.11: Commands to control the viewing of history\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The trace history records only the instructions within the history windows; therefore, two instructions that look contiguous while you are viewing the history display may not have been contiguous while the program was running.\par Be aware that history files can become extremely large; each step of saved history occupies approximately 26 bytes.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Real-Time Mode}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Real-Time Mode\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:debugging}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In real-time mode the debugger passes control of the computer to the code that you specify.  The code runs at full speed, just as it would if you were running it without the debugger.\par Before you try running your program in real-time mode, read through the rest of this "Running Your Program" section.  As described in the following subsections, you can exercise control over the execution of your program, even if it is running in real-time mode.  You can cause execution to stop automatically at any breakpoints you specify (see "Breakpoints").  You can run your entire program in real-time mode, or you can specify that the code in certain memory ranges is to be run in real-time mode while the rest of the program is run in trace or single-step mode.\par Use the command-line commands in Table 16.12 to initiate real-time mode.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\i\f4\fs20 address}{\f6\fs18 X}{\f4\fs20 \tab Executes a JSL directly to code at address.  If you omit the address, uses the current K/PC address is used.  (Note that if you omit the address, you must use an uppercase X for this command.) This command assumes your routine ends in an RTL; the code is executed in real-time mode and when the RTL is executed control returns to the debugger.  The debugger automatically turns off the Master display before executing this command.\par }{\f6\fs18 X}{\f4\fs20 \tab Forces a JSL to the code at the current K/PC.  Routine must end in RTL.\par }{\i\f4\fs20 address}{\f6\fs18 J}{\f4\fs20 \tab Jumps directly to the code at the address.  If you omit the address, the current K/PC address is used.  This command executes an unconditional jump to address and the code at that address is executed in real-time mode.  Control does not return to the debugger unless you have set a real breakpoint or a non-breakpoint BRK is executed (while breakpoints are set to DBRK).  See "Breakpoints" for information on the use of breakpoints.  The debugger automatically turns off the Master display before executing this command.\par }{\f6\fs18 J}{\f4\fs20 \tab Jumps to the code at the current K/PC.\par }{\i\f4\fs20 address}{\f6\fs18 G}{\f4\fs20 \tab Jumps to the code at address.  If you omit the address, the current K/PC is used.\par }{\f6\fs18 G}{\f4\fs20 \tab Jumps to the code at the current K/PC.  (identical to the J command described earlier in this table).\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.12: Initiating Real-Time Mode\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The debugger terminates real-time execution of code under the following conditions:\par \par \bullet \tab It encounters a break instruction.\par \bullet \tab A real breakpoint is triggered by the program.\par \bullet \tab The program  returns from the JSL (as it does in the X command).\par \par Real breakpoints must be in if they are to work during real-time execution.\par Do not use the Control-}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \_Option-Esc keypress to terminate real-time execution of code.  Strange and unexpected results may occur.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Command Filter}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Command Filter\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:command filters}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug usually intercepts all keystrokes that occur while tracing or single-stepping through code and passes them to the debugger\rquote s command interpreter.  If the program you are debugging requires input from the keyboard, you can set the debugger to pass all keystrokes on to the application unless one or more keystroke-modifier keys are also pressed.  To select the key or keys to be used as the keystroke modifiers, use the Key command as described in "Keystroke Modifiers".\par Keystroke modifiers prevent debugger commands from interfering with your program.  For example, suppose your program has menu options that are activated by key presses and that Q causes the program to quit.  You can set the keystroke modifier so that commands are passed to the debugger only when you hold down the Option key.  Then to toggle sound on or off without causing your test program to quit, you would press Option-Q.\par Remember that when you have set a keystroke modifier, you must use that key or key combination in order to send any command to the debugger while in trace or single-step mode.  For example, to quit trace mode when Option is set as the keystroke modifier, press Option-Esc; to single-step one instruction, press Option\endash Space bar.\par The current value of the keystroke modifier appears in the Register subdisplay.  See the subsection "Keystroke Modifiers" in "Debugger Registers" for a list of the bit assignments.  To set the keystroke modifier, use the command\par \par }{\f6\fs18 Key=}{\i\f4\fs20 keynum}{\f4\fs20 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Memory Protection}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Memory Protection\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:memory protection}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug allows you to specify address ranges within which code is executed at full speed (code-trace ranges) and to specify ranges outside which no code is executed (code-window ranges).  Instructions for setting these ranges are given in "Memory-Protection Subdisplay".\par Memory-protection ranges work only in trace and single-step modes; they do not function in real-time mode.\par All code inside a code-trace range (indicated by a T on the Memory-Protection subdisplay) is executed automatically in real time.  When your code executes a JSL to this memory-protection address range, the code inside this range is executed in real time.  When the matching RTL is encountered, execution returns to single-step or trace mode.\par Use code-trace ranges to specify subroutines that must be executed at full speed, such as disk I/O routines.  Note that interpreted breakpoints do not function inside code-trace ranges; you must insert real breakpoints to stop execution within a code-trace range.  When you start the debugger, a code-trace range is automatically set for the range E1/0000 through E1/000F so that Apple IIGS tool calls are run at full speed.  \par If one or more code-window address ranges (indicated by W\rquote s on the Memory-Protection subdisplay) are specified, code is executed only if it is inside one of the code-window ranges.  Execution stops anytime the program counter (K/PC) equals an address not in any of the code-window address ranges.  (If you don\rquote t specify any code-window address ranges, code can be executed at any address.) \par You can use code-window ranges to protect code outside your program\rquote s normal code from being executed.  For example, if a bug in your code is causing the system to crash by executing code in the wrong location in memory, you can restrict execution to protect that area of memory by making sure it lies outside any code-window ranges.  Then, when your program jumps to that area of memory, execution stops and you can attempt to find the location and nature of the bug.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Setting Trace History Windows\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:trace history}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can set a history window within the Memory Protection subdisplay by typing H while editing a line within the display.  Then the debugger will save only those instructions within that line to the history file.  (If no windows are set, the debugger saves all the instructions.) See "Saving and Viewing a Trace History File" earlier in this chapter for details.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Breakpoints}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Breakpoints\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:breakpoints}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A breakpoint is a location at which the debugger suspends execution of the program, giving you the opportunity to examine the disassembly and the state of the machine at that location.  GSBug allows you to set up to 17 memory addresses as breakpoints.  Breakpoints can be either real or interpreted.  A real breakpoint is a BRK instruction that the debugger has inserted in the code.  An interpreted breakpoint is a memory address at which the debugger suspends execution in trace mode.  When you set interpreted breakpoints, the debugger compares the address of the instruction about to be executed (that is, the program counter) to the breakpoint addresses before executing each instruction.\par Instructions for setting breakpoints are given in the section "Breakpoint Subdisplay".  To make breakpoints work when the debugger is running in real-time mode, you must insert real breakpoints into the code.  To set real breakpoints, set the breakpoint addresses as described in "Breakpoint Subdisplay", press Esc to return to the command line, type }{\f6\fs18 in}{\f4\fs20 , and press Return.  The letter i is displayed under BRK in the upper left corner of the Master display to indicate that real breakpoints are in.  To remove real breakpoints, type }{\f6\fs18 out}{\f4\fs20  on the command line and press Return.  The letter o is displayed under BRK in the upper left corner of the Master display to indicate that real breakpoints are out.\par You must set a trigger value for each breakpoint.  The trigger value specifies the number of times that the instruction at the breakpoint address must be encountered before the debugger suspends execution.  Trigger values are 1-byte hexadecimal values.  For example, if you set the trigger value for a breakpoint to 2, the debugger executes that instruction the first time it encounters it but suspends execution the second time.  To disable a breakpoint without removing the breakpoint address, set the trigger value to 0; breakpoints with trigger values of 0 are ignored by the debugger.\par In trace mode execution stops when the trigger value is reached for both real and interpreted breakpoints.  In real-time mode execution stops when the trigger value is reached for real breakpoints only.  In single-step mode, the computer beeps when the trigger value is reached.\par In trace and single-step modes, execution stops anytime the program encounters a BRK instruction that is not set as a breakpoint.  In real-time mode, you can select whether a non-breakpoint BRK causes a return to the debugger or an exit to the Monitor.  To have non-breakpoint BRK instructions return you to the debugger, type }{\f6\fs18 dbrk}{\f4\fs20  on the command line and press Return.  A }{\f6\fs18 d}{\f4\fs20  appears next to the i or o in the upper left corner of the Master display.  To have non-breakpoint BRK instructions cause an exit to the Monitor, type }{\f6\fs18 mbrk}{\f4\fs20  on the command line and press Return.  An }{\f6\fs18 m}{\f4\fs20  appears in the upper left corner of the Master display.  The default mode is DBRK; you are returned to the debugger when a non-breakpoint BRK is encountered during real-time execution.\par When a breakpoint is triggered, execution stops and you can check the contents of the registers and memory locations shown in the Master display or Memory display.  To resume execution in trace mode, type }{\f6\fs18 T}{\f4\fs20  on the command line and press Return.  The computer beeps when an interpreted breakpoint is triggered in single-step mode.  Continue pressing the Space bar to continue stepping through the code.  When a BRK instruction that you did not set as a breakpoint is encountered in trace or single-step modes, execution stops, the computer beeps, and the Register subdisplay contains information about the state of the machine when the break occurred.  Use the }{\f6\fs18 On}{\f4\fs20  command to see the Master display if necessary.\par To clear all breakpoints (when real breakpoints are out), type }{\f6\fs18 Clr}{\f4\fs20  on the command line and press Return.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Debugging Segmented Programs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Debugging Segmented Programs\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:segments}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In order to use GSBug to debug a segmented program, you must know where each segment has been loaded in memory.  In the case of dynamic segments, you must know not only where the segment has been loaded, but whether it has been loaded.  This information is available through Loader Dumper, a desk accessory provided with GSBug.  Loader Dumper is described later in this chapter.\par Use the following procedure to load your program using GSBug and determine where each segment is loaded in memory:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab From the ORCA shell's command line, type GSBug and press Return to call the debugger.  The debugger Master display will appear on the screen.\par 2.\tab Type }{\f6\fs18 Load}{\f4\fs20  }{\i\f4\fs20 pathname}{\f4\fs20 , where }{\i\f4\fs20 pathname}{\f4\fs20  is the path name of the program you want to debug, and press Return.  Your program is now loaded into memory.\par 3.\tab Press -}{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 -Control-Esc to get the Desk Accessories menu.\par 4.\tab Select Loader Dumper from the Desk Accessories menu.  The Loader Dumper main menu will appear on the screen.  (Note: The Loader Dumper is not preinstalled on our system disk.  You must install it before it can be used.)\par 5.\tab Select Dump Path Name Table from the Loader Dumper main menu.  The path name table provides a cross-reference of path names and user IDs.\par 6.\tab Scroll through the path name table (by pressing Return for each path name) until you find the path name of the program you are testing.  Make a note of the user ID of the program.\par 7.\tab Press Esc to get back to the Loader Dumper main menu.\par 8.\tab Select Get UserID Information from the main menu.\par 9.\tab Type the user ID of your program in response to the prompt that appears on the screen.\par 10.\tab A listing of all the load segments in your program appears on the screen.  Write down the memory locations of all the segments.\par 11.\tab Press Esc to return to the main menu, press Esc again to quit Loader Dumper, and then select Quit from the Desk Accessories menu to return to the debugger.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Several possible courses of action are now open to you.  If you have no idea in which load segment your program is crashing, you can start by running the program until it crashes and then examining the debugger display to determine the location of the problem instruction.  If you know in which segment the problem lies, you can go immediately to that segment, or you can set a breakpoint at the beginning of that segment and run the program until it stops automatically at that breakpoint.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Watching a Running Disassembly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Watching a Running Disassembly\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:debugging}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If your program does not require any input from the keyboard, you can watch a disassembly on the debugger screen as the program executes to find the exact location at which it goes astray.  This technique will probably be useful only for short programs or programs that crash almost immediately upon execution, because the program will execute very slowly while the debugger display is on the screen.\par Use the following procedure to run your program under control of GSBug, with a running disassembly appearing on the screen:\par \par }\pard \qj\fi-360\li720\widctlpar\tx1080\adjustright {\f4\fs20 1.\tab If you have not already done so, load your program as described in the preceding section.  Write down the information in the Register subdisplay of the debugger so that you can return the machine to its initial state each time you run your program.\par 2.\tab Type }{\f6\fs18 S}{\f4\fs20  and press Return.  The debugger is now in single-step mode, starting with the first instruction of your program.  Each time you press the Space bar, the instruction highlighted in the Disassembly subdisplay is executed.  To return to the debugger\rquote s command line, press Esc.  Watch the contents of the registers and the stack as you execute commands.  If any specific memory locations are critical to the execution of the program, display those locations in the Memory subdisplay of the Master display.\par \tab \tab To execute commands automatically in quick succession (that is, to enter trace mode), press Return.  To start trace mode from the debugger\rquote s command line, type }{\f6\fs18 T}{\f4\fs20  and press Return.  Your program begins executing under debugger control, one instruction at a time in rapid succession.  The speaker beeps each time an instruction is executed.  You can turn off the speaker by pressing Q.  You can stop execution at any time by pressing Esc.\par 3.\tab When your program executes a BRK instruction, the disassembly stops scrolling.  The last execution executed (the BRK instruction) is highlighted.  The last several instructions executed appear above the current instruction.  A BRK instruction is actually a null (a 0 byte).  Since a BRK instruction is not a normal part of a program, the fact that your program executed one means that some previous instruction (contrary to your intent when you wrote the program) sent the program to the wrong place in memory.  With luck, the instruction that did it will still be on the screen.  \par \tab \tab If the offending instruction is no longer on the screen, set a code-window range as described in the section "Using Memory-Protection Ranges" later in this chapter and run the program again.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Remember to restore all the fields in the debugger\rquote s Register subdisplay to their original values before attempting to rerun the program.  If you do not, the program will probably not run correctly, through no fault of its own.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using Breakpoints}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Breakpoints\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:breakpoints}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you have to interact with your program for it to run, if you have some idea of which segment contains the bug, or if you just want to execute the program more quickly, you can set one or more breakpoints before running the program.  To set breakpoints and run the program under debugger control, use the following procedure:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab If you have not already done so, load your program.  Write down the information in the Register subdisplay of the debugger so that you can return the machine to its initial state each time you run your program.\par 2.\tab Use the Loader Dumper routine to determine the starting locations of the load segments of your program.\par 3.\tab Back in the debugger, type }{\f6\fs18 bp}{\f4\fs20  and press Return in order to specify breakpoints.  Following the instructions in the section "Breakpoint Subdisplay", set breakpoints at the beginning of each load segment (if you do not know in which segment the bug lies) or at the beginning of any segment that you want to examine more closely.\par 4.\tab If you must interact with the program for it to run, set a keystroke modifier that will not interfere with your program.  (The keystroke modifier is a key that you must press simultaneously with any key that you want the debugger to interpret as a debugger command.  For example, if you set the Option key as the keystroke modifier, you must press Option-Esc to terminate trace mode.  If you do not press the keystroke-modifier key, the debugger ignores the keypress and your program is free to act on it.)\par 5.\tab Type }{\f6\fs18 off}{\f4\fs20  and press Return.  The GSBug display clears so you can see the normal display of your program.  Trace mode also runs more quickly with the debugger\rquote s display turned off.\par 6.\tab Type }{\f6\fs18 T}{\f4\fs20  and press Return.  Your program will begin executing under debugger control, one instruction at a time in rapid succession.  The speaker beeps each time an instruction is executed.  You can turn off the speaker by pressing Q.  (Remember also to press any keystroke-modifier key you have set.)  Interact with your program as you normally do.  (It will run more slowly than normal.)  You can stop execution at any time by pressing Esc.  (Remember the keystroke modifier.)\par 7.\tab When the debugger comes to a breakpoint, the debugger\rquote s Master display appears on the screen.  The number shown under K/PC in the Register subdisplay indicates the location of the instruction at which the program stopped.  To see a disassembly of the program starting at the breakpoint location, type the K/PC address followed by an L (for example, 010240L) and press Return.  \par 8.\tab If you are zeroing in on the bug, you might want to use single-step mode with the debugger\rquote s Master display on the screen.  To step through the segment one instruction at a time, type }{\f6\fs18 S}{\f4\fs20  and press Return.  Now each time you press the Space bar (remember the keystroke modifier), one instruction executes.  You can watch the contents of the stack and the machine\rquote s registers as each instruction executes.  You can also display the contents of up to 19 memory locations, which you can watch as the program executes.\par 9.\tab To return to executing the program from the Master display, press Esc to exit single-step mode, and then type }{\f6\fs18 OFF}{\f4\fs20  and }{\f6\fs18 T}{\f4\fs20  as before.  Each time the debugger gets to a breakpoint, it will return you to the Master display.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If a dynamic segment is loaded anytime during execution of the program, you can pause execution of your program and go back to Loader Dumper to find out where it has been placed in memory.\par Breakpoints can be used for other purposes than finding a particular segment.  Suppose, for example, that your program seems to run well at first, then crashes after having lulled you into a false expectation of success.  In this case some routine may be failing after going through several iterations.  To handle such a situation without stopping the program every time the routine is executed, you can include a trigger value for a breakpoint.  The debugger counts the number of times it encounters the breakpoint and suspends execution only when the trigger value is reached.\par If you must execute a routine at full speed in order for it to work correctly, you can insert real breakpoints into the code with the In command.  When you do so, the debugger actually inserts BRK instructions into memory at the breakpoint locations.  Trigger values work for real breakpoints that you have set; the debugger will still suspend execution whenever it encounters a BRK instruction that you did not set as a breakpoint.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using Memory-Protection Ranges}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Memory-Protection Ranges\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:memory protection}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 It may be that certain portions of your code must be executed at the full speed of the 65816 microprocessor, or you may be fairly sure that some parts of your program are working correctly, and you don't want to trace through them.  To make this happen automatically every time you trace through the program, you can set any areas of memory you choose as code-trace ranges.  When the program executes a jump to a location within a code-trace range, the debugger relinquishes control to your program and the code executes at full speed.  The portion of memory used to run tool calls is automatically set as a code-trace range when you load the debugger.\par You can also set one or more portions of memory (the limits of your code as revealed by Loader Dumper, perhaps) as code-window ranges.  If the program attempts to execute code outside the code-window ranges you have set, execution stops.  You might want to set a code-window range, for example, if your program is executing a jump to execution at some incorrect memory location and trashing memory before it stops so that you have to reboot the machine every time you try to run the program with the debugger.\par If your program loads a dynamic segment during execution and you want to pause as soon as control is transferred to the dynamic segment, you can set code window ranges to include all the static segments at the start of the program.  Then when the dynamic segment is loaded and control is transferred to it, the program will be outside any code window range and execution will stop.\par Once you have set any code-window range, no code that is not in a code-window range will be executed.  If you set a code window range equal to the memory location of one of your program segments, you must set code-window ranges for all other segments that you want to run.  Also remember to set the portion of memory used to run tool calls (E1/0000\endash E1/000F) to a code-window range if your program makes any tool calls.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Debugging Multi-Language Programs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Debugging Multi-Language Programs\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 One of the advantages of the ORCA development environment is that it allows you to link routines written in different programming languages.  This facility can lead to unique problems, however, especially when information is passed between routines written in different languages.\par To use GSBug to debug parameter-passing problems, use the following procedure:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab Set breakpoints at the beginning of the calling segment and at the beginning of the called segment.\par 2.\tab Run the program in trace or real-time mode until it reaches the first breakpoint.  Search the calling segment to find the JSL that calls the other segment.  If you do not need to interact with the program, the easiest way to do this is to run in trace mode with the Master display on the screen until the second breakpoint is reached.  Then both the JSL and the first instruction of the called segment will be on the screen.  If you cannot do that, try listing a disassembly (using the addressL command) until you see the appropriate JSL.\par 3.\tab Set a breakpoint just before the JSL that calls the second segment.  You can remove the other two breakpoints now if you wish.\par 4.\tab Run the program until it reaches the JSL breakpoint.  Parameters are normally passed either on the stack or in the A, X, and Y registers.  The actual information passed may be a pointer to the data rather than the data itself.  By examining the contents of the registers, the stack, and memory, determine the location and value of the parameter that is being passed.\par 5.\tab Execute the JSL.  The return address should have been added to the stack.\par 6.\tab Step through the segment in single-step mode.  Is the called routine reading the parameter passed to it?  If more than one parameter was passed, are the parameters being read in the correct order?  Is an integer being handled as floating point, or is an ASCII string being handled as a number?  Is a number being truncated or rounded inappropriately?  By a careful study of the action of the called routine, you should be able to determine the source of the problem.  \par 7.\tab If all parameters are being passed correctly, perhaps the problem occurs when the results are passed back to the calling routine.  To find the RTL, return to the JSL and start single-step mode.  Then type }{\f6\fs18 R}{\f4\fs20 ; GSBug will enter trace mode and automatically stop when the next RTL is reached.  You might have to do this several times until you reach the right RTL.  Study the stack and registers as before to determine whether the results are being correctly passed back to the calling routine.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Part 3: GSBug Subdisplay and Command Reference}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Part 3\: GSBug Subdisplay and Command Reference\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This part of the chapter describes each of the subdisplays of the Master display in detail.  It presents the commands for customizing the Master display and for setting memory addresses, memory-protection ranges, and breakpoints.  It describes the use of the Disassembly subdisplay and all the commands that you can enter on the command line.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Register Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Register Subdisplay\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Register subdisplay, along the top of the Master display (see Figure 16.3), shows the contents of both GSBug\rquote s and the 65816\rquote s registers.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\b\fs28 {\pict{\*\picprop\shplid1046{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw497\pich295\picwgoal9940\pichgoal5900\macpict\bliptag-356190105\blipupi72{\*\blipuid eac4f867018c5e3a988a1bbee4dbf2e1}0f3200070007012e01f81101a00082a0008c01000a00070007012e01f80aaa55aa55aa55aa553400090009012c01f60700020002380a000000000000000034000d000c002901f307000100013820000a000e000a01f0a100960006050000000206a1009a0008006f0000001a0000a000980300160d000a2b0f3a08303146463a32330da00099a1009a000800630000001a0000a000982a0c08303146453a39440da00099a1009a000800570000001a0000a000982a0c08303146443a36360da00099a1009a0008004b0000001a0000a000982a0c08303146433a44410da00099a1009a0008003f0000001a0000a000982a0c08303146423a41330da00099a1009a000800330000001a0000a000982a0c08303146413a33390da00099a1009a000800270000001a0000a000982a0c08303146393a35410da00099a1009a0008001b0000001a0000a000982a0c08303146383a35410da00099a1009a0008000f0000001a0000a000982a0c08303146373a35410da00099a1009a000800030000001a0000a000982a0c08303146363a35410da00099a1009a0008fff70000001a0000a000982a0c08303146353a41390da00099a1009a0008ffeb0000001a0000a000982a0c08303146343a33390da00099a1009a0008ffdf0000001a0000a000982a0c08303146333a46460da00099a1009a0008ffd30000001a0000a000982a0c08303146323a33460da00099a1009a0008ffc70000001a0000a000982a0c08303146313a32330da00099a1009a0008ffbb0000001a0000a000982a0c08303146303a30300da00099a1009a0008ffaf0000001a0000a000982a0c08303145463a30310da00099a1009a0008ffa30000001a0000a000982a0c08303145453a41340da00099a1009a0008ff970000001a0000a000982a0c08303145443a33450da00099a00097a100960006050000000206a1009a000800330000002c0000a0009828003a00a80e45302f313030442d30332d30310da00099a1009a000800270000002c0000a000982a0c0e31322f313130332d30302d30300da00099a1009a0008001b0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008000f0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a000800030000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008fff70000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffeb0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffdf0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffd30000002c0000a000982a0c0e30302f303030302d30302d30300da00099a00097a100960006050000000206a1009a000800330000002f0000a000982a170f45312f303030302e303030462d540da00099a1009a000800270000002f0000a000982a0c0f30312f303930302e314646462d540da00099a1009a0008001b0000002f0000a000982a0c0f30312f363030302e393546462d570da00099a1009a0008000f0000002f0000a000982a0c0f30312f443030302e443633332d570da00099a1009a000800030000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008fff70000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffeb0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffdf0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffd30000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a00097a100960006050000000206a1009a0008006f000000410000a0009828003b01061231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a00097a100960006050000000206a1009a0008006f000000350000a0009828003a0189094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a0009720012a000e012a01f0a100960006050000000206a1009a0008fffd0000003e0000a00098280124000f143a20434f4d4d414e4420494e505554204c494e45a00099a00097a100960006050000000206a1009a0008006f000000330000a0009828003a00451030302f303330353a204531202761270da00099a1009a00080063000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080057000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a0008004b000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a0008003f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080033000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080027000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008001b000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008000f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080003000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffeb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffdf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffbb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffaf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff97000000330000a000982a0c1030302f303030303a204130202720270da00099a00097300031000a011600423000310043011700a430003100a500a001033000a600a50117010330002f0104011601f5300119000d012901f4a100960006050000000206a1009a00080009000000ef0000a00098280016000f224b4559202042524b202044656275674420204b2f504320202042202020442020202029cc2253202020204120202020582020202059202020204d202020512020204c202050202029cc0b6e766d7864697a6320650da00099a1009a0008fffd000000ef0000a00098280022000f2230302020206f206420202030313030202031322f313032452045312030383030203029cc223146442031463030203341423920303030372020354620203333202031202033302029cc0b303031313030303020300da00099a1009a0008fff1000000ef0000a0009828002e000f0120a00099a00097a0008da00083ff}}{\b\fs28 \par }{\b\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.3: Register Subdisplay Area\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Debugger Registers}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Debugger Registers\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug\rquote s registers, displayed toward the left end of the Register subdisplay, are discussed in the following sections.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Keystroke Modifier\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:command filters}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 KEY denotes the keystroke modifier.  This hexadecimal byte indicates the key or key combination that you can use as a command filter to prevent debugger commands from interfering with your test program when it is running in trace or single-step modes.  See "The Command Filter" earlier in this chapter for details.\par To select the key or keys to be used as the keystroke modifier, use the command\par \par }{\f6\fs18 Key=}{\i\f4\fs20 keynum}{\f4\fs20 \par \par Each bit of the binary number represented by the hexadecimal number }{\i\f4\fs20 keynum}{\f4\fs20  specifies one of the keys to be used as a keystroke modifier; set that bit to 1 to make the key part of the keystroke modifier.  Figure 16.4 shows how the bits are assigned from 7 (MSB) to 0 (LSB).\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1047{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw208\pich60\picwgoal4160\pichgoal1200\macpict\bliptag-1772514022\blipupi72{\*\blipuid 9659951a7645ab3ff6c979c9e82ec71e}053200070007004300d71101a00082a0008c01000a00070007004300d70a000000000000000034000a0044001d005738a10096000606000000023da1009a0008fffe000000020000a000982c000a001607436f75726965720300160d00092b4b160137a00099a0009734000a0056001d006938a10096000606000000023da1009a0008fffe000000020000a0009829120136a00099a0009734000a0068001d007b38a10096000606000000023da1009a0008fffe000000020000a0009829120135a00099a0009734000a007a001d008d38a10096000606000000023da1009a0008fffe000000020000a0009829120134a00099a0009734000a008c001d009f38a10096000606000000023da1009a0008fffe000000020000a0009829120133a00099a0009734000a009e001d00b138a10096000606000000023da1009a0008fffe000000020000a0009829120132a00099a0009734000a00b0001d00c338a10096000606000000023da1009a0008fffe000000020000a0009829120131a00099a0009734000a00c2001d00d538a10096000606000000023da1009a0008fffe000000020000a0009829120130a00099a00097a0008da0008c34001c0044002f005738a10096000606000000023da1009a0008fffe000000020000a00098280028004b0141a00099a0009734001c0056002f006938a10096000606000000023da1009a0008fffe000000020000a000982912014fa00099a0009734001c0068002f007b3834001c007a002f008d38a10096000606000000023da1009a0008fffe000000020000a000982924014ba00099a0009734001c008c002f009f38a10096000606000000023da1009a0008fffe000000020000a0009829120152a00099a0009734001c009e002f00b138a10096000606000000023da1009a0008fffe000000050000a00098290f02434ca00099a0009734001c00b0002f00c338a10096000606000000023da1009a0008fffe000000020000a0009829150143a00099a0009734001c00c2002f00d538a10096000606000000023da1009a0008fffe000000020000a0009829120153a00099a00097a0008d34002e00440041005738a1009600060600000002baa1009a0008fffe000000050000a0009828003a0048023830a00099a0009734002e00560041006938a1009600060600000002baa1009a0008fffe000000050000a000982912023430a00099a0009734002e00680041007b38a1009600060600000002baa1009a0008fffe000000050000a000982912023230a00099a0009734002e007a0041008d38a1009600060600000002baa1009a0008fffe000000050000a000982912023130a00099a0009734002e008c0041009f38a1009600060600000002baa1009a0008fffe000000050000a000982912023038a00099a0009734002e009e004100b138a1009600060600000002baa1009a0008fffe000000050000a000982912023034a00099a0009734002e00b0004100c338a1009600060600000002baa1009a0008fffe000000050000a000982912023032a00099a0009734002e00c2004100d538a1009600060600000002baa1009a0008fffe000000050000a000982912023031a00099a00097a1009600060700000002baa1009a0008fffe000000050000a000982c000c00150948656c766574696361030015280016002d044269743aa00099a00097a1009600060700000002baa1009a0008fffe000000070000a000982800280028044b65793aa00099a00097a1009600060700000002baa1009a0008fffe000000140000a0009828003a000f0a4865782056616c75653aa00099a00097a00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.4: Keystroke Modifier Bit Assignments\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Table 16.13 shows the keys to which the abbreviations in Figure 16.4 refer.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4\fs20\ul Abbreviation}{\f4\fs20 \tab }{\f4\fs20\ul Key}{\f4\fs20 \par \par S\tab Shift\par C\tab Control\par CL\tab Caps Lock\par R\tab Repeat (hold the key down until it repeats)\par K\tab Any key on an external keypad (not the keypad on the Apple IIGS keyboard)\par O\tab Option\par A\tab }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.13: Abbreviations in Keystroke Modifier Bit Assignments\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par For example, to set both the Shift and Caps Lock keys as keystroke modifiers, use the command\par \par }{\f6\fs18 Key=05\par }{\f4\fs20 \par The KEY value in the register subdisplay changes to 05 to indicate the key combination that is set as the keystroke modifier (01 for the Shift key plus 04 for the Caps Lock key).  Now when you want to send a command to the debugger while in trace or single-step modes press both the Shift and Caps Lock keys while pressing the key that invokes the command.  For example, to switch to the slow trace rate, press the key combination\par \par Shift-Caps Lock-}{\outl\f4\fs18 left-arrow}{\f4\fs20 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Breakpoint flags\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:breakpoints}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 BRK stands for the two breakpoint flags.  The first flag reads i (for in) if you have used the debugger to set real breakpoints in the program.  If you have transparent breakpoints set, this flag reads o (for out).  The second flag reads d (for debugger) if BRK instructions (other than those that you have inserted with the debugger) return you to the debugger.  If such BRKs cause an exit to the Monitor, this flag reads m (for monitor).  To set user breaks, use the Mbrk command.  For details on the i and o flags, see "Breakpoints" earlier in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Debugger Direct-Page Indicator\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:direct page}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 DebugD stands for the debugger\rquote s direct page.  This value indicates the starting location of the 1KB direct-page/stack block allocated by the debugger in bank $00 at startup.  For instance, if the debugger\rquote s direct page begins at 00/1000, DebugD reads 1000.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 65816 Registers}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 65816 Registers\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Program Bank Register and Program Counter\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 K/PC stand for the Program Bank register (K) and Program Counter (PC) values.  The Program Bank register serves as the upper 8 bits of the 24-bit address of the next instruction to be executed; the program counter holds the lower 16 bits of the address of the next instruction.  There is no carry from the high bit of the PC into the low bit of the K register when the PC is incremented.  When you specify an address in a debugger command and do not specify the bank number, the current value of the K register is used.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Data-Bank Register\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 B denotes the Data-Bank register, which is simply the current value of the data bank.  This value provides the upper 8 bits of the address in addressing modes that generate only the lower 16 bits.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Direct-Page Register\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 D indicates the Direct-Page register, which holds the current direct page.  This value determines the location of the direct page in bank $00.  For example, if the direct page begins at 00/1234, D reads 1234.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Stack Pointer\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:stack}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 S shows the current value of the Stack pointer.  This register indicates the next available location on the stack.  If the emulation-mode flag e = 1, S must be between $0100 and $01FF.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Accumulator\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A displays the current value of the Accumulator, which stores first one operand and then the result for most arithmetic and logical operations.  This register is 2 bytes wide if the emulation-mode flag e = 0 and the memory/accumulator-mode flag m = 0; otherwise, it is considered to be 1 byte wide (though the high byte can still be accessed through an XBA instruction).  The Accumulator display is always 16 bits, even in emulation mode or when 8-bit indexing is selected.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 X Register\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 X indicates the X register display, which shows the current value of the X register.  This register provides index values for address calculations and holds operands for some arithmetic and logical operations.  This register is 2 bytes wide if e = 0 and the index-register-mode flag x = 0; otherwise, it is considered to be 1 byte wide (the high byte is forced to 0).  The X register display is always 16 bits, even in emulation mode or when 8-bit indexing is selected.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Y Register\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Y denotes the Y register display which shows the current value of the Y register.  This register provides index values for address calculations, and it holds operands for some arithmetic and logical operations.  This register is 2 bytes wide if e = 0 and x = 0; otherwise, it is considered to be 1 byte wide (the high byte is forced to 0).  The Y register display is always 16 bits, even in emulation mode or when 8-bit indexing is selected.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Machine-State Register\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 M stands for the Machine-State register.  This pseudoregister, located at $C068 (in any of banks $00, $01, $E0, or $E1), can be used to set a variety of Mega II-chip soft switches.  The M register is described in detail in the Apple IIGS Hardware Reference.  Table 16.14 gives the bits that comprise this hexadecimal number to indicate the status of the machine states.\par \par }\pard \qj\fi-2160\li2520\keep\keepn\widctlpar\tx1080\adjustright {\f4\fs20\ul Bit}{\f4\fs20 \tab }{\f4\fs20\ul Name}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par \par 7\tab ALTZP \tab If this bit is 0, bank-switched memory, stack, and zero page are in main memory; if it is 1, they are in auxiliary memory.\par 6\tab PAGE2 \tab If this bit is 0, text page 1 is selected; if it is 1, text page 2 is selected.\par 5\tab RAMRD\tab If this bit is 0, main-memory RAM is read-enabled; if it is 1, auxiliary-memory RAM is read-enabled.\par 4\tab RAMWRT \tab If this bit is 0, main-memory RAM is write-enabled; if it is 1, auxiliary-memory RAM is write-enabled.\par 3\tab RDROM \tab If this bit is 0, language-card RAM is read-enabled; if it is 1, language-card ROM is read-enabled.\par 2\tab LCBNK2 \tab If this bit is 0, bank 2 language-card RAM (at $D000 through $DFFF) is selected; if it is 1, bank 1 language-card RAM is selected.  Switching banks with this bit does not write-enable language-card RAM.  Use the L flag both to write-enable RAM and to switch language-card banks.\par 1\tab ROMBANK \tab This bit is reserved; it must equal 0.\par }\pard \qj\fi-2160\li2520\widctlpar\tx1080\adjustright {\f4\fs20 0\tab INTCXROM\tab If this bit is 0, external ROM (that is, ROM on the circuit board at $Cx00) is active; if it is 1, internal ROM at $Cx00 is active.\par }\pard \qj\fi-2160\li2520\keep\keepn\widctlpar\tx1080\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.14: Status bits for Machine-State register\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Setting ROMBANK to 1 will almost certainly cause the system to crash.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Quagmire Register\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Q stands for the Quagmire register.  This pseudoregister is composed of the lower seven bits of the Shadow register at $C035 and the high bit of the Configuration register at $C036.  The bits of this hexadecimal number have the meanings given in Table 16.15.\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\adjustright {\f4\fs20\ul Bit}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par \par 7\tab If this bit is 1, high-speed operation is on.\par 6\tab If this bit is 1, IOLC (I/O and language card) shadowing is off.\par 5\tab This bit is reserved; it must equal 1.\par 4\tab If this bit is 1, auxiliary-memory Hi-Res graphics shadowing is off.\par 3\tab If this bit is 1, Super Hi-Res graphics shadowing is off.\par 2\tab If this bit is 1, Hi-Res graphics page 2 shadowing is off.\par 1\tab If this bit is 1, Hi-Res graphics page 1 shadowing is off.\par 0\tab If this bit is 1, text page 1 shadowing is off.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.15: Status bits of the Quagmire register\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Shadowing is described in the Technical Introduction to the Apple IIGS and the Apple IIGS Hardware Reference.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Language-Card Bank Flag\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 L stands for the language-card bank flag, which indicates whether bank 1 or bank 2 of the language card is selected.  This flag emulates the Monitor value=L command.  Set L to 0 to write-enable language-card RAM and select bank 1.  Set L to 1 to write-enable language-card RAM and select bank 2.  Changing L automatically changes bit 2 of the M register.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Processor-Status Register\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 P stands for the Processor-Status register, which holds status flags and mode-select bits.  The bits and flags appear in two forms.  Directly under the P, the information appears as a hexadecimal number.  At the right end of the Register subdisplay, each individual bit is labeled and shown in binary.  Figure 16.5 shows the meanings of these bits in emulation mode.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1048{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw268\pich161\picwgoal5360\pichgoal3220\macpict\bliptag-1061795751\blipupi72{\*\blipuid c0b648598077778f54745ec8e4ef5bcf}0883ffffffff00a0010b1101a00082a0008ca0008ca10096000c010000000500000000000002a1009a000800060000000c000001000a000e0000002e001a0300150d000c2b0118054269743a0d2a10044b65793aa0009701000affffffff00a0010b30000a001f002f00b0070000000022002e00310000a000a0a100a40002090601000a0000000000000000070001000122000a00310024230000a000a301000affffffff00a0010b22000a00310024a000a1070000000022002e00430000a000a0a100a40002090601000a0000000000000000070001000122000a00430024230000a000a301000affffffff00a0010b22000a00430024a000a1070000000022002e00550000a000a0a100a40002090601000a0000000000000000070001000122000a00550024230000a000a301000affffffff00a0010b22000a00550024a000a1070000000022002e00670000a000a0a100a40002090601000a0000000000000000070001000122000a00670024230000a000a301000affffffff00a0010b22000a00670024a000a1070000000022002e00790000a000a0a100a40002090601000a0000000000000000070001000122000a00790024230000a000a301000affffffff00a0010b22000a00790024a000a1070000000022002e008b0000a000a0a100a40002090601000a0000000000000000070001000122000a008b0024230000a000a301000affffffff00a0010b22000a008b0024a000a1070000000022002e009d0000a000a0a100a40002090601000a0000000000000000070001000122000a009d0024230000a000a301000affffffff00a0010b22000a009d0024a000a1a10096000c020000000500000000000004a1009a0008000800000003000001000a000e00790032008a280018007e02320d2b02120169a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e006b00320075280018006d02330d2a120164a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e005900320063280018005b02340d2a120162a00097a10096000c020000000500000000000004a1009a0008ffff00000003000001000a000e00480020005028001800490135a00097a10096000c020000000500000000000004a1009a0008000800000003000001000a000e00340032003f280018003602360d2b01120176a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e00a1003200ab28001800a302300d2a120163a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e008f00320099280018009102310d2a12017aa00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e00230032002d280018002502370d2a12016ea0009701000affffffff00a0010b20001c001f001c00afa10096000c010000000500000000000002a1009a0008fffe0000000c000001000a0000001f000d003b0d00092800080020034d5342a00097a10096000c010000000500000000000002a1009a0008fffe0000000c000001000a0000009d000d00b9297e034c5342a00097a0008d01000affffffff00a0010b070000000022003700a70000a000a0a100a4000209fe01000a0000000000000000070001000122002e00a70009230000231200230000a000a301000affffffff00a0010b22002e00a70009231200a000a1070000000022004400950000a000a0a100a4000209fe01000a0000000000000000070001000122002e00950016230000232400230000a000a301000affffffff00a0010b22002e00950016232400a000a1070000000022005200830000a000a0a100a4000209fe01000a0000000000000000070001000122002e00830024230000233600230000a000a301000affffffff00a0010b22002e00830024233600a000a1070000000022009500290000a000a0a100a4000209fe01000a0000000000000000070001000122002e0029006723000021009500b9230000a000a301000affffffff00a0010b22002e0029006721009500b9a000a10700000000220088003b0000a000a0a100a4000209fe01000a0000000000000000070001000122002e003b005a230000237e00230000a000a301000affffffff00a0010b22002e003b005a237e00a000a1070000000022006d005f0000a000a0a100a4000209fe01000a0000000000000000070001000122002e005f003f230000235a00230000a000a301000affffffff00a0010b22002e005f003f235a00a000a1070000000022005f00710000a000a0a100a4000209fe01000a0000000000000000070001000122002e00710031230000234800230000a000a301000affffffff00a0010b22002e00710031234800a000a1a10096000c010000000500000000000002a1009a0008fffd0000000c000001000a003300be004100d80d000a2b2134054361727279a00097a10096000c010000000500000000000002a1009a0008fffe00000009000001000a004000bd004e00d328004900be045a65726fa00097a10096000c010000000500000000000002a1009a0008fffe0000001a000001000a004e00bd005c00f42a0e0b4952512044697361626c65a00097a10096000c010000000500000000000002a1009a0008fffd0000001f000001000a005b00bd006900fe2a0d0c446563696d616c204d6f6465a00097a10096000c010000000500000000000002a1009a0008fffd00000025000001000a006900bd0077010a2a0e11427265616b20496e737472756374696f6ea00097a10096000c010000000500000000000002a1009a0008fffe00000013000001000a008400be009200e72b011b084f766572666c6f77a00097a10096000c010000000500000000000002a1009a0008fffd00000013000001000a009100bd009f00e628009a00be084e65676174697665a00097a0008da00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.5: Processor-Status Register Bits in Emulation Mode\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Figure 16.6 shows the meanings of the bits in native mode.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1049{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw324\pich161\picwgoal6480\pichgoal3220\macpict\bliptag-417594430\blipupi72{\*\blipuid e71c03c2bc27e3b1d41e26bc82495d14}0934ffffffff00a001431101a00082a0008ca10096000c010000000500000000000002a1009a000800060000000c000001000a000e0000002e001a0300150d000c2b0118054269743a0d2a10044b65793aa0009701000affffffff00a0014330000a001f002f00b0070000000022002e00310000a000a0a100a40002090601000a0000000000000000070001000122000a00310024230000a000a301000affffffff00a0014322000a00310024a000a1070000000022002e00430000a000a0a100a40002090601000a0000000000000000070001000122000a00430024230000a000a301000affffffff00a0014322000a00430024a000a1070000000022002e00550000a000a0a100a40002090601000a0000000000000000070001000122000a00550024230000a000a301000affffffff00a0014322000a00550024a000a1070000000022002e00670000a000a0a100a40002090601000a0000000000000000070001000122000a00670024230000a000a301000affffffff00a0014322000a00670024a000a1070000000022002e00790000a000a0a100a40002090601000a0000000000000000070001000122000a00790024230000a000a301000affffffff00a0014322000a00790024a000a1070000000022002e008b0000a000a0a100a40002090601000a0000000000000000070001000122000a008b0024230000a000a301000affffffff00a0014322000a008b0024a000a1070000000022002e009d0000a000a0a100a40002090601000a0000000000000000070001000122000a009d0024230000a000a301000affffffff00a0014322000a009d0024a000a1a10096000c020000000500000000000004a1009a0008000800000003000001000a000e00790032008a280018007e02320d2b02120169a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e006b00320075280018006d02330d2a120164a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e005900320063280018005b02340d2a120178a00097a10096000c020000000500000000000004a1009a0008000800000003000001000a000e00340032003f280018003602360d2b01120176a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e00a1003200ab28001800a302300d2a120163a00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e008f00320099280018009102310d2a12017aa00097a10096000c020000000500000000000004a1009a0008000800000002000001000a000e00230032002d280018002502370d2a12016ea0009701000affffffff00a0014320001c001f001c00afa10096000c010000000500000000000002a1009a0008fffe0000000c000001000a0000001f000d003b0d00092800080020034d5342a00097a10096000c010000000500000000000002a1009a0008fffe0000000c000001000a0000009d000d00b9297e034c5342a0009701000affffffff00a00143070000000022003700a70000a000a0a100a4000209fe01000a0000000000000000070001000122002e00a70009230000231200230000a000a301000affffffff00a0014322002e00a70009231200a000a1070000000022004400950000a000a0a100a4000209fe01000a0000000000000000070001000122002e00950016230000232400230000a000a301000affffffff00a0014322002e00950016232400a000a1070000000022005200830000a000a0a100a4000209fe01000a0000000000000000070001000122002e00830024230000233600230000a000a301000affffffff00a0014322002e00830024233600a000a1070000000022009500290000a000a0a100a4000209fe01000a0000000000000000070001000122002e0029006723000021009500b9230000a000a301000affffffff00a0014322002e0029006721009500b9a000a10700000000220088003b0000a000a0a100a4000209fe01000a0000000000000000070001000122002e003b005a230000237e00230000a000a301000affffffff00a0014322002e003b005a237e00a000a1070000000022006d005f0000a000a0a100a4000209fe01000a0000000000000000070001000122002e005f003f230000235a00230000a000a301000affffffff00a0014322002e005f003f235a00a000a1070000000022005f00710000a000a0a100a4000209fe01000a0000000000000000070001000122002e00710031230000234800230000a000a301000affffffff00a0014322002e00710031234800a000a1a10096000c010000000500000000000002a1009a0008fffd0000000c000001000a003300be004100d80d000a2b2134054361727279a00097a10096000c010000000500000000000002a1009a0008fffe00000009000001000a004000bd004e00d328004900be045a65726fa00097a10096000c010000000500000000000002a1009a0008fffe0000001a000001000a004e00bd005c00f42a0e0b4952512044697361626c65a00097a10096000c010000000500000000000002a1009a0008fffd0000001f000001000a005b00bd006900fe2a0d0c446563696d616c204d6f6465a00097a10096000c010000000500000000000002a1009a0008fffe00000013000001000a008400be009200e72b0129084f766572666c6f77a00097a10096000c010000000500000000000002a1009a0008fffd00000013000001000a009100bd009f00e628009a00be084e65676174697665a00097a10096000c020000000500000000000004a1009a0008000800000003000001000a000e0047003200520d000c280018004902350d28002a0048016da0009701000affffffff00a00143070000000022007a004d0000a000a0a100a40002090801000a0000000000000000070001000122002e004d004c230000236c00230000a000a301000affffffff00a0014322002e004d004c236c00a000a1a10096000c010000000500000000000002a1009a0008fffe00000031000001000a006800bd007601220d000a2b764715496e6465782052656769737465722053656c656374a00097a10096000c010000000500000000000002a1009a0008fffe00000041000001000a007600bd008401422a0e194d656d6f72792f416363756d756c61746f722053656c656374a00097a0008da00083ff}}{\fs20 \par }{\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.6: Processor-Status Register Bits in Native Mode\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Emulation Mode Flag}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Emulation Mode Flag\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 E stands for the emulation mode flag.  If e = 1, 6502 emulation mode is selected.  If e =0, then native mode is selected.  See Figures 16-5 and 16-6 for the meanings of the Processor-Status register bits in emulation and native modes.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Disassembly Mode Flag}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Disassembly Mode Flag\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 D stands for the disassembly mode flag.  It indicates which disassembly mode is used during the List command.  If d equals 0, the debugger recognizes REP and SEP instructions to change the accumulator and index sizes and displays those instructions that follow the REP and SEP accordingly.  If d equals 1, the debugger ignores REP and SEP instructions and displays all instructions in the format determined by the m and x bits of the Processor-Status register.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Altering the Contents of Registers}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Altering the Contents of Registers\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To alter the contents of the some of the registers and flags displayed in the Master display, type one of the commands in Table 16.16 on the command line and press Return.\par To set the A, X, Q, Y, and L registers to the value specified by value, observe the following rules:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab The values for all registers are given as hexadecimal numbers, except for the processor-status bits, which can be either 1 or 0.\par \bullet \tab Register names are case sensitive.  For example, to set the X index register to $12E0, use the command\par \par }{\f6\fs18 \tab \tab X=12E0\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The commands in the following table are case sensitive.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 K=}{\i\f4\fs20 bank}{\f4\fs20 \tab Sets K (Program bank register) to }{\i\f4\fs20 bank}{\f4\fs20 .\par }{\f6\fs18 PC=}{\i\f4\fs20 address}{\f4\fs20 \tab Sets PC (Program counter) to }{\i\f4\fs20 address}{\f4\fs20  (sets K to bank if }{\i\f4\fs20 address}{\f4\fs20  is long).\par }{\f6\fs18 K/PC=}{\i\f4\fs20 address}{\f4\fs20 \tab Sets PC (Program counter) to }{\i\f4\fs20 address}{\f4\fs20  (sets K to bank if }{\i\f4\fs20 address}{\f4\fs20  is long).\par }{\f6\fs18 B=}{\i\f4\fs20 bank}{\f4\fs20 \tab Sets B (Data bank register) to }{\i\f4\fs20 bank}{\f4\fs20 .\par }{\f6\fs18 D=}{\i\f4\fs20 address}{\f4\fs20 \tab Sets D (Direct-Page register) to }{\i\f4\fs20 address}{\f4\fs20 .\par }{\f6\fs18 DPAGE}{\f4\fs20 \tab Sets D (Direct-Page register) to the direct page the debugger allocated for the user at startup.\par }{\f6\fs18 S=}{\i\f4\fs20 address}{\f4\fs20 \tab Sets the Stack pointer to }{\i\f4\fs20 address}{\f4\fs20 .\par }\pard \qj\fi-1800\li2160\widctlpar\tx2520\adjustright {\f4\fs20 \tab \tab The direct page and stack are always in bank zero, so you do not need to specify a bank when you alter the contents of the Direct-Page register or the Stack pointer.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs18 STACK}{\f4\fs20 \tab Sets S to the stack pointer that the debugger allocated for the user at startup.\par }{\f6\fs18 A=}{\i\f4\fs20 value}{\f4\fs20 \tab Sets A (Accumulator) to }{\i\f4\fs20 value}{\f4\fs20 .\par }{\f6\fs18 X=}{\i\f4\fs20 value}{\f4\fs20 \tab Sets X (X register) to }{\i\f4\fs20 value}{\f4\fs20 .\par }{\f6\fs18 Y=}{\i\f4\fs20 value}{\f4\fs20 \tab Sets Y (Y register) to }{\i\f4\fs20 value}{\f4\fs20 .\par }{\f6\fs18 M=}{\i\f4\fs20 value}{\f4\fs20 \tab Sets M (Machine-state register) to }{\i\f4\fs20 value}{\f4\fs20 .\par }{\f6\fs18 Q=}{\i\f4\fs20 value}{\f4\fs20 \tab Sets Q (Quagmire register) to }{\i\f4\fs20 value}{\f4\fs20 .\par }{\f6\fs18 L=}{\i\f4\fs20 value}{\f4\fs20 \tab Sets L (Language-card bank flag) to }{\i\f4\fs20 value}{\f4\fs20 , where }{\i\f4\fs20 value}{\f4\fs20  = 0 or 1.  If a greater value is entered, only its least significant bit is used.\par }{\f6\fs18 P=}{\i\f4\fs20 value}{\f4\fs20 \tab Sets P (Processor-Status register) to }{\i\f4\fs20 value}{\f4\fs20 .\par }{\f6\fs18 x}{\f4\fs20  [lower case]\tab Toggles the x bit of the Processor-Status register (only in 65816 mode).\par }{\f6\fs18 m}{\f4\fs20  [lower case]\tab Toggles the m bit of the Processor-Status register (only in 65816 mode).\par }\pard \qj\fi-1800\li2160\widctlpar\tx2520\adjustright {\f6\fs18 \tab \tab }{\f4\fs20 If the x or m commands are entered while 6502 emulation is on, the debugger will beep to indicate an error.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs18 e}{\f4\fs20 \tab Toggles the e (Emulation mode) flag: if this flag is set to 1, changes it to 0; if it\rquote s set to 0, changes it to 1.\par }{\f6\fs18 m}{\f4\fs20 \tab Toggles the m flag: if this flag is set to 1, changes it to 0; if it\rquote s set to 0, changes it to 1.  This command works only if e = 0.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.16: Commands to Alter Contents of Registers in the Master Display\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The lengths of the X, Y, and A registers depend on the settings of the e, x, and m processor bits, as discussed in the register descriptions in the preceding section, "65816 Registers."\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Stack Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Stack Subdisplay\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\b\fs28 {\pict{\*\picprop\shplid1050{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw497\pich295\picwgoal9940\pichgoal5900\macpict\bliptag-171947540\blipupi72{\*\blipuid f5c049ecce4f78b515cb77025ae35d64}0f3000070007012e01f81101a00082a0008c01000a00070007012e01f80aaa55aa55aa55aa553400090009012c01f6070002000238070001000120000a000e000a01f00a0000000000000000340031000a0116004238a100960006050000000206a1009a0008006f0000001a0000a000980300160d000a2b0f3a08303146463a32330da00099a1009a000800630000001a0000a000982a0c08303146453a39440da00099a1009a000800570000001a0000a000982a0c08303146443a36360da00099a1009a0008004b0000001a0000a000982a0c08303146433a44410da00099a1009a0008003f0000001a0000a000982a0c08303146423a41330da00099a1009a000800330000001a0000a000982a0c08303146413a33390da00099a1009a000800270000001a0000a000982a0c08303146393a35410da00099a1009a0008001b0000001a0000a000982a0c08303146383a35410da00099a1009a0008000f0000001a0000a000982a0c08303146373a35410da00099a1009a000800030000001a0000a000982a0c08303146363a35410da00099a1009a0008fff70000001a0000a000982a0c08303146353a41390da00099a1009a0008ffeb0000001a0000a000982a0c08303146343a33390da00099a1009a0008ffdf0000001a0000a000982a0c08303146333a46460da00099a1009a0008ffd30000001a0000a000982a0c08303146323a33460da00099a1009a0008ffc70000001a0000a000982a0c08303146313a32330da00099a1009a0008ffbb0000001a0000a000982a0c08303146303a30300da00099a1009a0008ffaf0000001a0000a000982a0c08303145463a30310da00099a1009a0008ffa30000001a0000a000982a0c08303145453a41340da00099a1009a0008ff970000001a0000a000982a0c08303145443a33450da00099a0009730000d000c002901f3a100960006050000000206a1009a00080009000000ef0000a00098280016000f224b4559202042524b202044656275674420204b2f504320202042202020442020202029cc2253202020204120202020582020202059202020204d202020512020204c202050202029cc0b6e766d7864697a6320650da00099a1009a0008fffd000000ef0000a00098280022000f2230302020206f206420202030313030202031322f313032452045312030383030203029cc223146442031463030203341423920303030372020354620203333202031202033302029cc0b303031313030303020300da00099a1009a0008fff1000000ef0000a0009828002e000f0120a00099a00097a100960006050000000206a1009a000800330000002c0000a000982b990c0e45302f313030442d30332d30310da00099a1009a000800270000002c0000a000982a0c0e31322f313130332d30302d30300da00099a1009a0008001b0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008000f0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a000800030000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008fff70000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffeb0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffdf0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffd30000002c0000a000982a0c0e30302f303030302d30302d30300da00099a00097a100960006050000000206a1009a000800330000002f0000a000982a170f45312f303030302e303030462d540da00099a1009a000800270000002f0000a000982a0c0f30312f303930302e314646462d540da00099a1009a0008001b0000002f0000a000982a0c0f30312f363030302e393546462d570da00099a1009a0008000f0000002f0000a000982a0c0f30312f443030302e443633332d570da00099a1009a000800030000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008fff70000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffeb0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffdf0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffd30000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a00097a100960006050000000206a1009a0008006f000000410000a0009828003b01061231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a00097a100960006050000000206a1009a0008006f000000350000a0009828003a0189094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a0009720012a000e012a01f0a100960006050000000206a1009a0008fffd0000003e0000a00098280124000f143a20434f4d4d414e4420494e505554204c494e45a00099a00097a100960006050000000206a1009a0008006f000000330000a0009828003a00451030302f303330353a204531202761270da00099a1009a00080063000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080057000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a0008004b000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a0008003f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080033000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080027000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008001b000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008000f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080003000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffeb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffdf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffbb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffaf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff97000000330000a000982a0c1030302f303030303a204130202720270da00099a000973000310043011700a430003100a500a001033000a600a50117010330002f0104011601f5300119000d012901f4a0008da00083ff}}{\b\fs28 \par }{\b\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.7: Stack Subdisplay Area\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:stack}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:registers}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Stack subdisplay, along the far left side of the Master display, shows the contents of a portion (19 bytes) of the 65816\rquote s stack.  This subdisplay shows the addresses and contents of the memory locations just before and just after the location pointed to by the stack pointer.  The current location of the stack pointer is shown in the Register subdisplay (see the earlier section, "Register Subdisplay") and is highlighted in the Stack subdisplay.  The stack address can appear as an absolute address in bank zero or as an offset from the top of the stack.\par Here\rquote s an example of a typical line in the stack subdisplay showing absolute addresses.\par \par }{\f6\fs18 0AF1:57\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 In this instance, the address is $0AF1 (the stack is always in bank zero), and the contents of the stack location is $5F.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Here's an example of a typical line in the stack subdisplay showing stack offsets.\par \par }{\f6\fs18 +05 :D2\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 In this instance, $D2 is stored five bytes above the top of the stack.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The stack address is initially formatted as an absolute address.  You can change this format to stack offsets with the Set command.  See "Configuring the Master Display" for details on the Set command.\par The Stack pointer points to the current stack location, which is always highlighted.  As the stack grows downward in memory, the Stack subdisplay scrolls up so the current stack location remains in the same place on the screen.  In a similar fashion, the display scrolls down as the stack shrinks.\par The debugger initially places the current stack location at the bottom of the subdisplay.  You can change the position of the current stack location within this subdisplay by using the Set command.  See the section "Configuring the Master Display" later in this chapter for a discussion of the Set command.\par See the section "RAM Subdisplay" later in this chapter for a discussion of commands you can use to change values in memory.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Disassembly Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Disassembly Subdisplay\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\b\fs28 {\pict{\*\picprop\shplid1051{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw497\pich295\picwgoal9940\pichgoal5900\macpict\bliptag-484095645\blipupi72{\*\blipuid e32549634edc2d83087199c3832a480e}0f3200070007012e01f81101a00082a0008c01000a00070007012e01f80aaa55aa55aa55aa553400090009012c01f60700020002380a000000000000000034002f0104011601f5070001000138a100960006050000000206a1009a0008006f000000350000a000980300160d000a28003a0189094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a00097a100960006050000000206a1009a0008006f000000410000a0009828003b01061231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a0009720000a000e000a01f0a100960006050000000206a1009a0008006f0000001a0000a0009828003a000f08303146463a32330da00099a1009a000800630000001a0000a000982a0c08303146453a39440da00099a1009a000800570000001a0000a000982a0c08303146443a36360da00099a1009a0008004b0000001a0000a000982a0c08303146433a44410da00099a1009a0008003f0000001a0000a000982a0c08303146423a41330da00099a1009a000800330000001a0000a000982a0c08303146413a33390da00099a1009a000800270000001a0000a000982a0c08303146393a35410da00099a1009a0008001b0000001a0000a000982a0c08303146383a35410da00099a1009a0008000f0000001a0000a000982a0c08303146373a35410da00099a1009a000800030000001a0000a000982a0c08303146363a35410da00099a1009a0008fff70000001a0000a000982a0c08303146353a41390da00099a1009a0008ffeb0000001a0000a000982a0c08303146343a33390da00099a1009a0008ffdf0000001a0000a000982a0c08303146333a46460da00099a1009a0008ffd30000001a0000a000982a0c08303146323a33460da00099a1009a0008ffc70000001a0000a000982a0c08303146313a32330da00099a1009a0008ffbb0000001a0000a000982a0c08303146303a30300da00099a1009a0008ffaf0000001a0000a000982a0c08303145463a30310da00099a1009a0008ffa30000001a0000a000982a0c08303145453a41340da00099a1009a0008ff970000001a0000a000982a0c08303145443a33450da00099a00097300031000a0116004230000d000c002901f3a100960006050000000206a1009a00080009000000ef0000a00098280016000f224b4559202042524b202044656275674420204b2f504320202042202020442020202029cc2253202020204120202020582020202059202020204d202020512020204c202050202029cc0b6e766d7864697a6320650da00099a1009a0008fffd000000ef0000a00098280022000f2230302020206f206420202030313030202031322f313032452045312030383030203029cc223146442031463030203341423920303030372020354620203333202031202033302029cc0b303031313030303020300da00099a1009a0008fff1000000ef0000a0009828002e000f0120a00099a00097a100960006050000000206a1009a000800330000002c0000a000982b990c0e45302f313030442d30332d30310da00099a1009a000800270000002c0000a000982a0c0e31322f313130332d30302d30300da00099a1009a0008001b0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008000f0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a000800030000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008fff70000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffeb0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffdf0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffd30000002c0000a000982a0c0e30302f303030302d30302d30300da00099a00097a100960006050000000206a1009a000800330000002f0000a000982a170f45312f303030302e303030462d540da00099a1009a000800270000002f0000a000982a0c0f30312f303930302e314646462d540da00099a1009a0008001b0000002f0000a000982a0c0f30312f363030302e393546462d570da00099a1009a0008000f0000002f0000a000982a0c0f30312f443030302e443633332d570da00099a1009a000800030000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008fff70000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffeb0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffdf0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffd30000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a0009720012a000e012a01f0a100960006050000000206a1009a0008fffd0000003e0000a00098280124000f143a20434f4d4d414e4420494e505554204c494e45a00099a00097a100960006050000000206a1009a0008006f000000330000a0009828003a00451030302f303330353a204531202761270da00099a1009a00080063000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080057000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a0008004b000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a0008003f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080033000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080027000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008001b000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008000f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080003000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffeb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffdf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffbb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffaf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff97000000330000a000982a0c1030302f303030303a204130202720270da00099a000973000310043011700a430003100a500a001033000a600a501170103300119000d012901f4a0008da00083ff}}{\f4\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.8: Disassembly Subdisplay Area\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:debugging}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Disassembly subdisplay along the right side of the Master display shows a disassembly of up to 19 lines of your program\rquote s object code using standard 65816 assembly mnemonics and address-mode syntax.  The debugger shows the 65816 disassembly while executing code in single-step or trace mode and while listing code.\par As shown in Figure 16.9, each line of this subdisplay is composed of three parts: the address (in bank/location format), the bytes of the instruction at that address that make up the instruction, and the disassembled version of those bytes.\par For example, look at the first line of the Disassembly subdisplay in Figure 16.9.  The first part of the line, the address, is composed of the high-order byte ($12) that specifies the memory bank, followed by the 2-byte ($1000) location within that bank of the first byte in the instruction.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1052{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex64\picscaley65\piccropl0\piccropr0\piccropt0\piccropb0\picw244\pich247\picwgoal4880\pichgoal4940\macpict\bliptag-1480756497\blipupi72{\*\blipuid a7bd72ef97e67903dbd671da07e664e5}05f60007000700fe00fb1101a00082a100960006050000000258a1009a0008006f000000410000a0009801000a0007000700fe00fb0300160d000a2b0b141231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a00097a100960006050000000258a1009a0008006f000000350000a00098280013008e094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a00097a10096000605000000025802ffffffffffffffff3200ca000c00d800d7a1009a0008fffd000000650000a0009804082800d4000d0d31322f313032453a4331203036295b0d2020202020434d502028303629295b022c59a00099a00097a00083ff}}{\f4\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.9: Columns of the Disassembly Subdisplay\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The next 1 to 4 bytes (AD 15 18 in this example) show the contents of memory starting at that location, corresponding to the instruction that GSBug interpreted to start at that location.  The last part of the line (LDA 1815) shows the 65816 opcode and operand.  The addressing mode syntax (operand address formats) summarized in Table 16.17 is the same as that used by the Apple IIGS Monitor Mini-Assembler and described in the Apple IIGS Firmware Reference.  All numbers are hexadecimal.\par \par }\pard \qj\fi360\keepn\widctlpar\tx3960\adjustright {\f4\fs20\ul Addressing Mode}{\f4\fs20 \tab }{\f4\fs20\ul Example Operand}{\f4\fs20 \par \par Absolute\tab }{\f6\fs18 1234\par }{\f4\fs20 Absolute indexed with X\tab }{\f6\fs18 1234,X}{\f4\fs20 \par Absolute indexed with Y\tab }{\f6\fs18 1234,Y}{\f4\fs20 \par Absolute indexed indirect\tab }{\f6\fs18 (1234,X)}{\f4\fs20 \par Absolute indexed long\tab }{\f6\fs18 081234,X}{\f4\fs20 \par Absolute indirect long\tab }{\f6\fs18 (1234)\par }{\f4\fs20 Absolute long\tab }{\f6\fs18 081234\par }{\f4\fs20 Accumulator*\par Block move\tab }{\f6\fs18 5678}{\f4\fs20 \par Direct page\tab }{\f6\fs18 12}{\f4\fs20 \par Direct page indexed with X\tab }{\f6\fs18 12,X\par }{\f4\fs20 Direct page indexed with Y\tab }{\f6\fs18 12,Y}{\f4\fs20 \par Direct page indexed indirect with X\tab }{\f6\fs18 (12, X)\par }{\f4\fs20 Direct page indirect\tab }{\f6\fs18 (12)\par }{\f4\fs20 Direct page indirect indexed with Y\tab }{\f6\fs18 (12),Y}{\f4\fs20 \par Direct page indirect indexed long\tab }{\f6\fs18 [12]\par }{\f4\fs20 Direct page indirect long\tab }{\f6\fs18 [12]\par }{\f4\fs20 Immediate\tab }{\f6\fs18 #12}{\f4\fs20  or }{\f6\fs18 #1234}{\f4\fs20 \par Implied*\par Program counter relative\tab }{\f6\fs18 1000     \{+12\}}{\f4\fs20 \par Program counter relative long\tab }{\f6\fs18 1000     \{-1234\}}{\f4\fs20 \par Stack*\par Stack relative\tab }{\f6\fs18 10,S\par }{\f4\fs20 Stack relative indirect indexed with Y\tab }{\f6\fs18 (10,S),Y}{\f4\fs20 \par }{\f4\fs18 *These addressing modes require no operand.\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Table 16.17: Disassembly Operand Formats\par \par You can change the position of the current instruction within the subdisplay by using the Set command.  See the section "Configuring the Master display" later in this chapter for a discussion of the Set command.\par The GSBug disassembler interprets all bytes in memory as 65816 instructions; it cannot distinguish between code and data.  Strings of data therefore appear as nonsense instructions in the Disassembly subdisplay.\par When you start the debugger, the Disassembly subdisplay is blank.  The debugger enters values into this subdisplay in response to any of the command-line commands shown in Table 16.18.\par Whenever you enter an address or a value, the debugger assumes it is in hexadecimal.  You can precede the address or a value with a dollar sign or not as you wish.  For long addresses you can include the slash after the bank (for example, 12/3456) or not, as you wish.  If you do not include a bank number (or enter a short address of two bytes or less), the current value of the K register is used for the bank.\par \par }\pard \qj\fi-1440\li1800\keep\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\i\f4\fs20 address}{\f4\fs20  }{\f6\fs18 L}{\f4\fs20 \tab Disassembles the contents of memory starting at }{\i\f4\fs20 address}{\f4\fs20 , and the next 19 lines (one screen full) of that disassembly appear in the subdisplay.\par }{\f6\fs18 L}{\f4\fs20 \tab Displays the next 19 lines of the disassembly.\par }{\i\f4\fs20 address}{\f4\fs20  }{\f6\fs18 T}{\f4\fs20 \tab Enters trace mode at }{\i\f4\fs20 address}{\f4\fs20 .  If you omit }{\i\f4\fs20 address}{\f4\fs20 , uses the current K/PC address.  As GSBug traces the code, it disassembles it and lists the results in the Disassembly subdisplay.  The currently executing instruction is highlighted.  Trace mode is described in the section "Single-Step and Trace Modes" earlier in this chapter.\par }{\i\f4\fs20 address}{\f4\fs20  }{\f6\fs18 S}{\f4\fs20 \tab Enters single-step mode at }{\i\f4\fs20 address}{\f4\fs20 .  If you omit }{\i\f4\fs20 address}{\f4\fs20 , uses the current K/PC address.  As GSBug steps through the code, it disassembles it and lists the results in the Disassembly subdisplay.  The currently executing instruction is highlighted.  Single-step mode is described in the section "Running Your Program" earlier in this chapter.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.18: Commands for Entering Values into Disassembly Subdisplay\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Entering Instructions into the Mini-Assembler Display}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Entering Instructions into the Mini-Assembler Display\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:mini-assembler}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The mini-assembler lets you enter machine-language programs directly from the keyboard using standard mnemonics.  To turn on the built-in Mini-assembler display, use the command\par \par }{\f6\fs18 Asm\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 and press Return.  The Master display is turned on and any instructions you enter appear at the bottom of the Disassembly subdisplay as you type them in.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Table 16.19 summarizes the syntax for entering instructions into memory to be assembled.\par \par }\pard \qj\fi-2160\li2520\keep\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 Asm}{\f4\fs20 \tab Clears the Disassembly subdisplay to prepare to enter a sequence of instructions using the address:instruction command.\par }{\i\f4\fs20 address}{\f6\fs18 :}{\i\f4\fs20 instruction}{\f4\fs20 \tab Causes the debugger to assemble the instruction }{\i\f4\fs20 instruction}{\f4\fs20  and place the 65816 opcode and operand in memory at }{\i\f4\fs20 address}{\f4\fs20 .  Simultaneously, it places the instruction on the last line of the Disassembly subdisplay.  Use the Asm command before using this command.\par \tab \tab See the section "Altering the Contents of Memory" later in this chapter for more information on this command and a discussion of other commands to change values in memory.\par Space bar }{\i\f4\fs20 instruction}{\f4\fs20 \tab Once you have used the }{\i\f4\fs20 address}{\f6\fs18 :}{\i\f4\fs20 instruction}{\f4\fs20  command, this command causes the next available address to be printed on the command line.  Type in the next instruction to be assembled and press Return.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.19: Mini-Assembler Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Using the Mini-Assembler is the same as entering mon, typing ! and then entering instructions.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Determining Instruction Length}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Determining Instruction Length\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug determines the length of an instruction entered into memory entirely by the length of the operand that is entered, not by the current value of any flags.  Table 16.20 provides some examples of how the debugger calculates the length of an instruction.\par \par }\pard \qj\li1440\widctlpar\tx3600\adjustright {\f4\fs20\ul Instruction}{\f4\fs20 \tab }{\f4\fs20\ul Bytes Entered Into Memory}{\f4\fs20 \par \par }{\f6\fs18 JMP 1234\tab $4C $34 $12\par JMP 123456\tab $5C $56 $34 $12\par LDA F1\tab $A4 $F1\par LDA 00F1\tab $A4 $F1 $00\par }{\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.20: Instruction Length\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In addition, the length of the operand must have the exact number of bytes required.  For instance, the instruction\par \par }{\f6\fs18 JSL 3000\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 is not legal.  The correct instruction would be\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 JSL 003000\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Displaying Toolbox Instructions and GS/OS Calls}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Displaying Toolbox Instructions and GS/OS Calls\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:toolbox calls}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:GS/OS calls}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug also recognizes and displays two special instructions: toolbox calls and GS/OS calls.  When the debugger encounters a toolbox call (that is, JSL $E10000) in a disassembly, it finds out if the preceding instruction was an LDX.  If so, the actual tool call name, preceded by an underscore, appears instead of the JSL instruction.  For example, the instructions\par \par }{\f6\fs18 LDX\tab #0101\par JSL\tab E10000\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 appear in the subdisplay as\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 LDX\tab #0101\par _TLBootInit\par }{\f4\fs20 \par When the debugger encounters a tool call that it does not recognize, it replaces the JSL E10000 with _Unknown.  If the previous instruction was not an LDX, the debugger displays the JSL as usual.\par When the debugger encounters a GS/OS call (that is, JSL $E100A8), it displays JSL GS/OS instead.  It then interprets the next two bytes as the GS/OS call number and shows the call name.  If it does not recognize the call number, Unknown appears.  The debugger then interprets the following four bytes as the address of the parameter list and shows them as a long address.  Here is how a typical GS/OS call might be displayed:\par \par }{\f6\fs18 01/6000:\tab 22\tab A8\tab 00\tab E1\tab JSL\tab GS/OS\par 01/6004:\tab 01\tab 00\tab \tab \tab CREATE\par 01/6006:\tab 56\tab 34\tab 12\tab 00\tab $12/3456\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Displaying Tool Call Information}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Displaying Tool Call Information\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:toolbox calls}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can also request that the debugger display tool call names and tool call numbers along with the address of the actual tool routine with the Tool commands.\par To display the name, number, and address of tool number }{\i\f4\fs20 toolnum}{\f4\fs20 , use the command\par \par }{\f6\fs18 Tool #}{\i\f4\fs20 toolnum}{\f4\fs20 \par \par To display the name, number, and address of tool }{\i\f4\fs20 toolname}{\f4\fs20 , use the command\par \par }{\f6\fs18 Tool }{\i\f6\fs18 _}{\i\f4\fs20 toolname}{\f4\fs20 \par \par For example, type\par \par }{\f6\fs18 Tool #0101 \par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 to display the information\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 Tool #0101 TLBootInit @11/860A\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 which tells you that tool number 0101 is called TLBootInit and the actual routine is located at $11/860A.  This information appears on the command line and disappears with the next keystroke.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you type in an unknown tool number with a Tool command, Unknown appears instead of the tool name.  If you type in an unknown tool name, the debugger does not accept the command but simply beeps.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Displaying Instructions During Trace and Single-Step Modes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Displaying Instructions During Trace and Single-Step Modes\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:debugging}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 During trace and single-step modes, the debugger highlights the instruction that is about to be executed.  While the code is being executed, it scrolls up the screen so that the current instruction remains in the same location.  The current instruction initially appears one line up from the bottom of the subdisplay.  You can change this location with the Set command.  See "Configuring the Master Display" for more details.\par The Disassembly subdisplay shows the instructions following the current instruction in memory.  If the current instruction jumps to or calls another routine, however, the address called or jumped to appears as the current instruction after the call or jump is executed.  For example, assume the Disassembly subdisplay is\par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1053{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley61\piccropl0\piccropr0\piccropt0\piccropb0\picw242\pich78\picwgoal4840\pichgoal1560\macpict\bliptag-1606887606\blipupi72{\*\blipuid a038d74a07df08c7ab50a23788d87bc6}019400070007005500f91101a00082a100960006050000000224a1009a0008001a000000750000a0009801000a00070007005500f90300160d000c2b0b141f31322f313032453a433120303620202020202020434d5020283036292c590da00099a1009a0008000e000000750000a000982a0c1831322f313033303a30412020202020202020202041534c0da00099a1009a00080002000000750000a000982a0c1f31322f313033313a4443203839203233202020204a4d4c202832333839290da00099a1009a0008fff6000000750000a000982a0c2131322f313033343a3743204245204632202020204a534c2028463242452c58290da00099a1009a0008ffea000000750000a000982a0c1f31322f313033373a4144203135203138202020204c4441202831383135290da00099a00097a10096000605000000022402ffffffffffffffff320021000c002f00eaa1009a0008fffd0000006e0000a0009804080d000a28002b000d1f31322f313033313a444320383920323320202020204a4d4c20303132333839a00099a00097a00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When the JML instruction is executed, the current instruction becomes the one jumped to, and the display changes accordingly.  It might look like this:\par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1054{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley61\piccropl0\piccropr0\piccropt0\piccropb0\picw228\pich78\picwgoal4560\pichgoal1560\macpict\bliptag-1938762202\blipupi72{\*\blipuid 8c70d626f9258a8eeab4408312aaf115}019100070007005500eb1101a00082a100960006050000000224a1009a0008001a0000006e0000a0009801000a00070007005500eb0300160d000c2b0b141831322f313033303a30412020202020202020202041534c0da00099a1009a0008000e0000006e0000a000982a0c1f31322f313033313a4443203839203233202020204a4d4c203031323338390da00099a1009a000800020000006e0000a000982a0c1f31322f313030333a39442035302031302020202053544120313035302c580da00099a1009a0008fff60000006e0000a000982a0c1f30312f323338433a394620323020333020303520535441203035333032300da00099a1009a0008ffea0000006e0000a000982a0c1e30312f323339303a4139203737203636202020204c44412023363637370da00099a00097a10096000605000000022402ffffffffffffffff320021000a002f00e8a1009a0008fffd0000006e0000a0009804080d000a28002b000b1f30312f323338393a3944203530203130202020202053544120313035302c58a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 RAM Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 RAM Subdisplay\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\b\fs28 {\pict{\*\picprop\shplid1055{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw497\pich295\picwgoal9940\pichgoal5900\macpict\bliptag744728621\blipupi72{\*\blipuid 2c63a82dd96abcaac26afca3e8289d81}0f3200070007012e01f81101a00082a0008c01000a00070007012e01f80aaa55aa55aa55aa553400090009012c01f6070002000238070001000120000a000e000a01f00a00000000000000003400310043011700a43830002f0104011601f5a100960006050000000206a1009a0008006f000000350000a000980300160d000a28003a0189094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a00097a100960006050000000206a1009a0008006f000000410000a0009828003b01061231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a00097a100960006050000000206a1009a0008006f0000001a0000a0009828003a000f08303146463a32330da00099a1009a000800630000001a0000a000982a0c08303146453a39440da00099a1009a000800570000001a0000a000982a0c08303146443a36360da00099a1009a0008004b0000001a0000a000982a0c08303146433a44410da00099a1009a0008003f0000001a0000a000982a0c08303146423a41330da00099a1009a000800330000001a0000a000982a0c08303146413a33390da00099a1009a000800270000001a0000a000982a0c08303146393a35410da00099a1009a0008001b0000001a0000a000982a0c08303146383a35410da00099a1009a0008000f0000001a0000a000982a0c08303146373a35410da00099a1009a000800030000001a0000a000982a0c08303146363a35410da00099a1009a0008fff70000001a0000a000982a0c08303146353a41390da00099a1009a0008ffeb0000001a0000a000982a0c08303146343a33390da00099a1009a0008ffdf0000001a0000a000982a0c08303146333a46460da00099a1009a0008ffd30000001a0000a000982a0c08303146323a33460da00099a1009a0008ffc70000001a0000a000982a0c08303146313a32330da00099a1009a0008ffbb0000001a0000a000982a0c08303146303a30300da00099a1009a0008ffaf0000001a0000a000982a0c08303145463a30310da00099a1009a0008ffa30000001a0000a000982a0c08303145453a41340da00099a1009a0008ff970000001a0000a000982a0c08303145443a33450da00099a00097300031000a0116004230000d000c002901f3a100960006050000000206a1009a00080009000000ef0000a00098280016000f224b4559202042524b202044656275674420204b2f504320202042202020442020202029cc2253202020204120202020582020202059202020204d202020512020204c202050202029cc0b6e766d7864697a6320650da00099a1009a0008fffd000000ef0000a00098280022000f2230302020206f206420202030313030202031322f313032452045312030383030203029cc223146442031463030203341423920303030372020354620203333202031202033302029cc0b303031313030303020300da00099a1009a0008fff1000000ef0000a0009828002e000f0120a00099a00097a100960006050000000206a1009a000800330000002c0000a000982b990c0e45302f313030442d30332d30310da00099a1009a000800270000002c0000a000982a0c0e31322f313130332d30302d30300da00099a1009a0008001b0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008000f0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a000800030000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008fff70000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffeb0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffdf0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffd30000002c0000a000982a0c0e30302f303030302d30302d30300da00099a00097a100960006050000000206a1009a000800330000002f0000a000982a170f45312f303030302e303030462d540da00099a1009a000800270000002f0000a000982a0c0f30312f303930302e314646462d540da00099a1009a0008001b0000002f0000a000982a0c0f30312f363030302e393546462d570da00099a1009a0008000f0000002f0000a000982a0c0f30312f443030302e443633332d570da00099a1009a000800030000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008fff70000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffeb0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffdf0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffd30000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a0009720012a000e012a01f0a100960006050000000206a1009a0008fffd0000003e0000a00098280124000f143a20434f4d4d414e4420494e505554204c494e45a00099a00097a100960006050000000206a1009a0008006f000000330000a0009828003a00451030302f303330353a204531202761270da00099a1009a00080063000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080057000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a0008004b000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a0008003f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080033000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080027000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008001b000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008000f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080003000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffeb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffdf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffbb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffaf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff97000000330000a000982a0c1030302f303030303a204130202720270da00099a0009730003100a500a001033000a600a501170103300119000d012901f4a0008da00083ff}}{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4\fs20 Figure 16.10: RAM Subdisplay Area\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:displaying memory}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The RAM subdisplay, located to the right of the Stack subdisplay, shows the contents of any 19 memory locations you select (one per line).  Each line displays an address followed by the contents of the specified memory.  Here is a typical line in the RAM subdisplay.\par \par }{\f6\fs18 E0/6298:\tab 63F9\par }{\f4\fs20 \par Each line is displayed as either an absolute or a direct-page address.  The debugger represents absolute addresses in the form of bank/location.  A direct-page address includes the letters DP followed by a 1-byte direct-page offset.\par The absolute address of a direct-page address changes if the direct-page register changes.\par Each address can be referenced either indirectly or directly.  The debugger supports indirect referencing by displaying the contents of memory pointed to by the address on a given line.  A single colon after an address indicates direct referencing.\par Indirect referencing (also called dereferencing) occurs when the screen shows the contents of the memory pointed to by the address stored at the address shown on the specified line.\par The pointer stored at the specified address can be either a 2-byte or a 3-byte address.  Two colons following the address represent 2-byte dereferencing while three colons following the address represent 3-byte dereferencing.  In 2-byte dereferencing the current value of the Data-Bank register is used as the bank.  Both 2-byte and 3-byte pointers must be stored with their least significant bytes first.\par In Figure 16.11 each location can show either a single hexadecimal byte value and the equivalent ASCII character, a 2-byte value, or a 3-byte value.  The 2- and 3-byte values are displayed as addresses; that is, the low byte (the one corresponding to the address in the left column) is displayed at the right.  For example, if you place the value 1A in location 01/0100, 1B in 01/0101, and 1C in 01/0102, and display a 3-byte value at 01/0100, the line of the RAM subdisplay looks like\par \par }{\f6\fs18 01/0100: 1C1B1A\par }{\f4\fs20 \par Type}{\f6\fs18  : }{\f4\fs20 to toggle the number of colons following an address.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1056{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex62\picscaley65\piccropl0\piccropr0\piccropt0\piccropb0\picw109\pich234\picwgoal2180\pichgoal4680\macpict\bliptag-962475276\blipupi72{\*\blipuid c6a1caf46dfef419f900141ca340b0b1}03a60007000700f100741101a00082a100960006050000000294a1009a00080069000000330000a0009801000a0007000700f100740300160d000a2b0b131030302f303330353a204531202761270da00099a1009a0008005d000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080051000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a00080045000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a00080039000000330000a000982a0c1030312f303130303a203143314231410da00099a1009a0008002d000000330000a000982a0c1030312f303130303a20314120275a270da00099a1009a00080021000000330000a000982a0c1030302f303130313a203142202720270da00099a1009a00080015000000330000a000982a0c1030302f303130323a203143202720270da00099a1009a00080009000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fffd000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff1000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffe5000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd9000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffcd000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc1000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffb5000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa9000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff9d000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff91000000330000a000982a0c0f30302f303030303a20413020272027a00099a00097a0008c340054005b0061006438340046005b0054006438a100960006050000000202a1009a0008fffe000000060000a0009804080d000928004f005d015aa00099a00097a0008c34005d005b006b006438a100960006050000000202a1009a0008fffe000000060000a000982a18015ca00099a00097a0008da100960006050000000202a1009a0008fffe000000060000a0009828005b005d015ba00099a00097a0008da00083ff}}{\f4\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.11: Columns of the RAM Subdisplay\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par To modify the contents of the RAM subdisplay, type MEM on the command line and press Return.  The cursor appears on the highlighted first line in the subdisplay.  You can now use any of the commands listed in Table 16.21.  (To enter specific values into memory locations, use the commands described in the section "Altering the Contents of Memory" later in this chapter.)\par \par }\pard \qj\fi-2160\li2520\keepn\widctlpar\adjustright {\f4\fs20\ul Press}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par Return key\tab Moves down one address (if on bottom address, wraps to top).\par }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Moves down one address (if on bottom address, wraps to top).\par }{\outl\f4\fs18 up-arrow}{\f4\fs20 \tab Moves up one address (if on top address, wraps to bottom).\par }{\i\f4\fs20 hexadecimal_digit}{\f4\fs20 \tab Enters the address.\par }{\f6\fs18 H}{\f4\fs20 \tab Displays the contents of memory as hexadecimal and ASCII.\par }{\f6\fs18 P}{\f4\fs20 \tab Displays the contents of memory as a 2-byte address.\par }{\f6\fs18 L}{\f4\fs20 \tab Displays the contents of memory as a 3-byte address.\par }{\f6\fs18 Z}{\f4\fs20 \tab Toggles between direct-page and absolute address.\par }{\f6\fs18 :}{\f4\fs20 \tab Toggles between direct, 2-byte indirect, and 3-byte indirect addressing.\par }{\f6\fs18 ?}{\f4\fs20 \tab Displays Memory subdisplay Help screen.  Press any key except Esc to return to the RAM subdisplay.\par Esc\tab Returns to the command line.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.21: Commands for Editing the RAM Subdisplay\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Breakpoint Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Breakpoint Subdisplay\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\b\fs28 {\pict{\*\picprop\shplid1057{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw497\pich295\picwgoal9940\pichgoal5900\macpict\bliptag650667417\blipupi72{\*\blipuid 26c86599a3da9aa06678a1035d0dcca7}0f3300070007012e01f81101a00082a0008c01000a00070007012e01f80aaa55aa55aa55aa553400090009012c01f60700020002380a000000000000000034003100a500a00103070001000138a100960006050000000206a1009a000800330000002c0000a000980300160d000a2ba83a0e45302f313030442d30332d30310da00099a1009a000800270000002c0000a000982a0c0e31322f313130332d30302d30300da00099a1009a0008001b0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008000f0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a000800030000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008fff70000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffeb0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffdf0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffd30000002c0000a000982a0c0e30302f303030302d30302d30300da00099a000973000310043011700a4a100960006050000000206a1009a0008006f000000330000a0009828003a00451030302f303330353a204531202761270da00099a1009a00080063000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080057000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a0008004b000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a0008003f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080033000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080027000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008001b000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008000f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080003000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffeb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffdf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffbb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffaf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff97000000330000a000982a0c1030302f303030303a204130202720270da00099a0009720000a000e000a01f030002f0104011601f5a100960006050000000206a1009a0008006f000000350000a0009828003a0189094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a00097a100960006050000000206a1009a0008006f000000410000a0009828003b01061231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a00097a100960006050000000206a1009a0008006f0000001a0000a0009828003a000f08303146463a32330da00099a1009a000800630000001a0000a000982a0c08303146453a39440da00099a1009a000800570000001a0000a000982a0c08303146443a36360da00099a1009a0008004b0000001a0000a000982a0c08303146433a44410da00099a1009a0008003f0000001a0000a000982a0c08303146423a41330da00099a1009a000800330000001a0000a000982a0c08303146413a33390da00099a1009a000800270000001a0000a000982a0c08303146393a35410da00099a1009a0008001b0000001a0000a000982a0c08303146383a35410da00099a1009a0008000f0000001a0000a000982a0c08303146373a35410da00099a1009a000800030000001a0000a000982a0c08303146363a35410da00099a1009a0008fff70000001a0000a000982a0c08303146353a41390da00099a1009a0008ffeb0000001a0000a000982a0c08303146343a33390da00099a1009a0008ffdf0000001a0000a000982a0c08303146333a46460da00099a1009a0008ffd30000001a0000a000982a0c08303146323a33460da00099a1009a0008ffc70000001a0000a000982a0c08303146313a32330da00099a1009a0008ffbb0000001a0000a000982a0c08303146303a30300da00099a1009a0008ffaf0000001a0000a000982a0c08303145463a30310da00099a1009a0008ffa30000001a0000a000982a0c08303145453a41340da00099a1009a0008ff970000001a0000a000982a0c08303145443a33450da00099a00097300031000a0116004230000d000c002901f3a100960006050000000206a1009a00080009000000ef0000a00098280016000f224b4559202042524b202044656275674420204b2f504320202042202020442020202029cc2253202020204120202020582020202059202020204d202020512020204c202050202029cc0b6e766d7864697a6320650da00099a1009a0008fffd000000ef0000a00098280022000f2230302020206f206420202030313030202031322f313032452045312030383030203029cc223146442031463030203341423920303030372020354620203333202031202033302029cc0b303031313030303020300da00099a1009a0008fff1000000ef0000a0009828002e000f0120a00099a00097a100960006050000000206a1009a000800330000002f0000a000982b99830f45312f303030302e303030462d540da00099a1009a000800270000002f0000a000982a0c0f30312f303930302e314646462d540da00099a1009a0008001b0000002f0000a000982a0c0f30312f363030302e393546462d570da00099a1009a0008000f0000002f0000a000982a0c0f30312f443030302e443633332d570da00099a1009a000800030000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008fff70000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffeb0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffdf0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffd30000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a0009720012a000e012a01f0a100960006050000000206a1009a0008fffd0000003e0000a00098280124000f143a20434f4d4d414e4420494e505554204c494e45a00099a000973000a600a501170103300119000d012901f4a0008da00083ff}}{\b\fs28 \par \par }{\f4\fs20 Figure 16.12: Breakpoint Subdisplay Area\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:breakpoints}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug allows you to set from 0 to 17 breakpoints in your program.  When you set a breakpoint, you indicate the location at which you want the program to suspend execution and the number of times you want the breakpoint to be encountered before execution is interrupted.  Each line of the Breakpoint subdisplay shows a breakpoint address (bank/location in bank), the number of times through the breakpoint before it triggers, and the number of times the program has actually passed through this breakpoint so far.\par The initial Master display configuration provides nine lines for breakpoints.  You can delete breakpoint lines, thus increasing the number of memory-protection lines, or you can delete memory-protection lines to increase the number of breakpoint lines.  (The Memory-Protection subdisplay is directly below the Breakpoint subdisplay.)\par Trigger values are 1-byte hexadecimal values.  A trigger value of $00 instructs the debugger to ignore the breakpoint.  You can use this value to turn off an individual breakpoint.\par For example, the first line in the Breakpoint subdisplay above is\par \par }{\f6\fs18 E0/100D-03-01\par }{\f4\fs20 \par This line indicates that GSBug is set to suspend execution of your program the third time it encounters the instruction located at address 100D in bank E0, and that it has already executed this instruction one time.\par Interpreted breaks occur during tracing or single-stepping through code.  Real breaks occur during real-time execution of code.\par Real breakpoints actually replace the instruction at the breakpoint with a BRK instruction.  When the debugger encounters a real breakpoint, it compares the count against the trigger value.  If they are equal, the debugger halts execution.  If not, the debugger executes the real instruction it saved when it was replaced with the BRK instruction.  \par If you edit the Breakpoint subdisplay when real breakpoints are in, the debugger automatically takes them out when you enter the subdisplay and puts them back in when you exit.\par You can type in the breakpoint commands listed in Table 16.22 from the Master display command line.  Press Return after typing each of these commands.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 Clr}{\f4\fs20 \tab Zeros all breakpoints to 00/0000-00-00.  This command does not remove breakpoint lines from the screen.  Use the Delete key as described in the preceding description of the Bp command to remove breakpoint lines.\par }{\f6\fs18 In}{\f4\fs20 \tab Inserts real breakpoints (that is, replaces the instructions at the breakpoints with break instructions).  The Brk register changes from o to i, and BRK instructions are inserted in memory at the addresses specified by the Breakpoint subdisplay.  You must insert real breakpoints in the code in order to make the debugger suspend execution in real-time mode.  Real and interpreted breakpoints are discussed in the section "Breakpoints" earlier in this chapter.\par \tab \tab You cannot edit the Breakpoint subdisplay when real breakpoints are in.  Use the Out command before attempting to change breakpoints or trigger values.\par }{\f6\fs18 Out}{\f4\fs20 \tab Removes real breakpoints.  The Brk register changes from i to o, and the Brk instructions that were inserted in memory by the In command are replaced with interpreted breakpoints.  Real and interpreted breakpoints are discussed in the section "Breakpoints" earlier in this chapter.\par \tab \tab Be sure to remove real breakpoints with the Out command before exiting the debugger.  If they are not removed, the break instructions remain in memory and the debugger cannot restore the original instructions.\par }{\f6\fs18 Dbrk}{\f4\fs20 \tab Returns to the debugger when a BRK instruction that has not been set as a breakpoint is encountered while in real-time mode (or anytime while the init version is installed).  A d appears next to the i or o in the Brk register display.  DBRK is the initial setting.\par }{\f6\fs18 Mbrk}{\f4\fs20 \tab Exits to the Monitor when a BRK instruction that has not been set as a breakpoint is encountered while your program is running in real-time mode or anytime while the init version is installed.  An m appears next to the i or o in the Brk register display.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.22: Breakpoint Commands Entered from the Master Display\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par To increase the number of breakpoints, you must delete the memory-protection ranges.  For details, see "Memory-Protection Subdisplay" later in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Altering the Contents of the Breakpoint Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Altering the Contents of the Breakpoint Subdisplay\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:breakpoints}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To alter the contents of the Breakpoint subdisplay, type the following command and press Return:\par \par }{\f6\fs18 Bp}{\f4\fs20 \par \par You can now use any of the single-keystroke commands shown in Table 16.23.  When editing breakpoints, the cursor flashes to indicate the current position within the display.\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par Return\tab Moves to the next address down.\par }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Moves to the next address down (if the last line on display, wraps to top).\par }{\outl\f4\fs18 up-arrow}{\f4\fs20 \tab Moves to the next address up (if the first line on display, wraps to top).\par }{\outl\f4\fs18 left-arrow}{\f4\fs20 \tab Moves left to the address.  Type in the starting address of the instruction at which you want the debugger to suspend execution.  You can include a slash (/) after the bank value or omit it when entering the address; either form works.  If you do not include the bank number, the current value of the K register is used for the bank.\par }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Moves right to the trigger value.  Type in a 1-byte hexadecimal number to indicate the number of times the debugger should execute this instruction before suspending execution.  If the value is 0, the debugger ignores the breakpoint.  If the value is 1, the debugger stops each time it encounters the breakpoint.  If the value is any number n from 2 to 255, the debugger stops every nth time it encounters the breakpoint.\par }{\i\f4\fs20 hexadecimal_digit}{\f4\fs20 \tab Types in address or trigger value as a hexadecimal value.\par }{\f6\fs18 Delete}{\f4\fs20 \tab Deletes the currently highlighted breakpoint and increases the number of memory-protection lines by one.\par }{\f6\fs18 ?}{\f4\fs20 \tab Displays a help screen.  Press any key except Esc to return to the Breakpoint subdisplay.\par Esc\tab Returns to the command line.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.23: Commands for Altering the Contents of the Breakpoint Subdisplay\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Memory Protection Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Memory Protection Subdisplay\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\b\fs28 {\pict{\*\picprop\shplid1058{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw497\pich295\picwgoal9940\pichgoal5900\macpict\bliptag138570630\blipupi72{\*\blipuid 08426b86f793c9b55e2cdcd4e556149f}0f3200070007012e01f81101a00082a0008c01000a00070007012e01f80aaa55aa55aa55aa553400090009012c01f60700020002380a00000000000000003400a600a501170103070001000138a100960006050000000206a1009a000800330000002f0000a000980300160d000a2ba8b10f45312f303030302e303030462d540da00099a1009a000800270000002f0000a000982a0c0f30312f303930302e314646462d540da00099a1009a0008001b0000002f0000a000982a0c0f30312f363030302e393546462d570da00099a1009a0008000f0000002f0000a000982a0c0f30312f443030302e443633332d570da00099a1009a000800030000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008fff70000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffeb0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffdf0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffd30000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a00097a100960006050000000206a1009a000800330000002c0000a0009828003a00a80e45302f313030442d30332d30310da00099a1009a000800270000002c0000a000982a0c0e31322f313130332d30302d30300da00099a1009a0008001b0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008000f0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a000800030000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008fff70000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffeb0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffdf0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffd30000002c0000a000982a0c0e30302f303030302d30302d30300da00099a0009730003100a500a001033000310043011700a4a100960006050000000206a1009a0008006f000000330000a0009828003a00451030302f303330353a204531202761270da00099a1009a00080063000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080057000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a0008004b000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a0008003f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080033000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080027000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008001b000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008000f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080003000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffeb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffdf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffbb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffaf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff97000000330000a000982a0c1030302f303030303a204130202720270da00099a0009720000a000e000a01f030002f0104011601f5a100960006050000000206a1009a0008006f000000350000a0009828003a0189094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a00097a100960006050000000206a1009a0008006f000000410000a0009828003b01061231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a00097a100960006050000000206a1009a0008006f0000001a0000a0009828003a000f08303146463a32330da00099a1009a000800630000001a0000a000982a0c08303146453a39440da00099a1009a000800570000001a0000a000982a0c08303146443a36360da00099a1009a0008004b0000001a0000a000982a0c08303146433a44410da00099a1009a0008003f0000001a0000a000982a0c08303146423a41330da00099a1009a000800330000001a0000a000982a0c08303146413a33390da00099a1009a000800270000001a0000a000982a0c08303146393a35410da00099a1009a0008001b0000001a0000a000982a0c08303146383a35410da00099a1009a0008000f0000001a0000a000982a0c08303146373a35410da00099a1009a000800030000001a0000a000982a0c08303146363a35410da00099a1009a0008fff70000001a0000a000982a0c08303146353a41390da00099a1009a0008ffeb0000001a0000a000982a0c08303146343a33390da00099a1009a0008ffdf0000001a0000a000982a0c08303146333a46460da00099a1009a0008ffd30000001a0000a000982a0c08303146323a33460da00099a1009a0008ffc70000001a0000a000982a0c08303146313a32330da00099a1009a0008ffbb0000001a0000a000982a0c08303146303a30300da00099a1009a0008ffaf0000001a0000a000982a0c08303145463a30310da00099a1009a0008ffa30000001a0000a000982a0c08303145453a41340da00099a1009a0008ff970000001a0000a000982a0c08303145443a33450da00099a00097300031000a0116004230000d000c002901f3a100960006050000000206a1009a00080009000000ef0000a00098280016000f224b4559202042524b202044656275674420204b2f504320202042202020442020202029cc2253202020204120202020582020202059202020204d202020512020204c202050202029cc0b6e766d7864697a6320650da00099a1009a0008fffd000000ef0000a00098280022000f2230302020206f206420202030313030202031322f313032452045312030383030203029cc223146442031463030203341423920303030372020354620203333202031202033302029cc0b303031313030303020300da00099a1009a0008fff1000000ef0000a0009828002e000f0120a00099a0009720012a000e012a01f0a100960006050000000206a1009a0008fffd0000003e0000a000982af6143a20434f4d4d414e4420494e505554204c494e45a00099a00097300119000d012901f4a0008da00083ff}}{\f4\fs20 \par \par Figure 16.13: Memory-Protection Subdisplay Area\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:memory protection}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug allows you to specify address ranges that are protected during execution in trace or single-step modes.  Each address range you have protected is shown in the Memory-Protection subdisplay, followed by a code that indicates the type of protection set, as shown in Table 16.24.\par \par }\pard \qj\fi-1080\li1440\keep\keepn\widctlpar\adjustright {\f4\fs20\ul Code}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par \par }{\f6\fs18 T}{\f4\fs20 \tab Code-trace range.  All code outside this range is executed in single-step or trace mode.  When your code executes a JSL to this memory-protection address range, the code inside this range is executed in real time.  When the matching RTL is encountered, execution returns to single-step or trace mode.  While the code inside a code-trace address range is being executed, the line in the Memory-Protection subdisplay specifying that range is highlighted.\par }{\f6\fs18 W}{\f4\fs20 \tab Code-window range.  If one or more code-window address ranges are specified, code is executed only if it is inside one of the code-window ranges.  In trace or single-step mode, whenever the program counter (K/PC) equals an address not in any of the code-window address ranges, execution stops.  (If you don\rquote t specify any code-window address ranges, code can be executed at any address.) While the code inside a code-window address range is being executed, the line in the Memory-Protection subdisplay specifying that range is highlighted.\par }{\f6\fs18 H}{\f4\fs20 \tab Trace-history window.  Press H while editing a line to set the line as a trace history window.  The debugger only saves instructions that are inside of the trace window to history.  If you do not set any windows, then the debugger saves all instructions to history.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.24: Memory-Protection Code Settings\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The initial Master display configuration provides nine lines for memory-protection ranges.  When you start GSBug, the first memory-protection line is set to }{\f6\fs18 E1/0000\endash 000F T}{\f4\fs20 ; this code-trace range runs Apple IIGS tool calls in real-time mode.  You can delete breakpoint lines to increase the number of memory-protection lines, or you can delete memory-protection lines to increase the number of breakpoint lines.  See the section "Configuring the Master display" later in this chapter for more information on customizing the Master display.\par To alter the contents of the Memory-Protection subdisplay, type }{\f6\fs18 Mp}{\f4\fs20  on the command line and press Return.\par The Mp command moves the cursor to the first line of the Memory-Protection subdisplay.  You can now use any of the keypress commands shown in Table 16.25.\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par Return\tab Moves to the next address down (or if the last line, wraps to the top).\par }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Moves to the next address down (or if the last line, wraps to the top).\par }{\outl\f4\fs18 up-arrow}{\f4\fs20 \tab Moves to the next address up.\par }{\outl\f4\fs18 left-arrow}{\f4\fs20 \tab Moves left to the starting address.  Type in the starting address of the code-trace or code-window range.  You do not have to type a slash (/) after the bank value.  If you do not include the bank number, the current value of the K register is used for the bank.\par }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Moves right to the ending address.  Type in the ending address of the code-trace or code-window range.  Do not include a bank value; the bank must be the same as that of the starting address.\par }{\i\f4\fs20 hexadecimal_digit}{\f4\fs20 \tab Used to enter addresses.\par }{\f6\fs18 H}{\f4\fs20 \tab Sets the line you are editing as a Trace History window (indicated by an H).\par }{\f6\fs18 T}{\f4\fs20 \tab Sets this line as a code-trace range.\par }{\f6\fs18 W}{\f4\fs20 \tab Sets this line as a code-window range.\par Delete\tab Deletes the current memory-protection line and increases the number of breakpoint lines by one.\par ?\tab Displays a help screen.  Press any key except Esc to return to the Memory-Protection subdisplay.\par Esc\tab Returns to the command line.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.25: Key Press Commands in the Memory Protection Subdisplay\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par For example, to enter a new code-window range \endash  from 01/1220 to 01/12E5 \endash  on the second line of the Memory-Protection subdisplay, use the following sequence of commands:\par \par }\pard \qj\li360\widctlpar\tx720\tx2160\adjustright {\f4\fs20 \tab }{\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par \par 1.\tab }{\f6\fs18 Mp}{\f4\fs20  Return \tab Begin editing the Memory-Protection subdisplay.\par 2.\tab }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Move down to the second address.\par 3.\tab }{\f6\fs18 11220}{\f4\fs20 \tab Type in the starting address.\par 4.\tab }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Move right to the ending address.\par 5.\tab }{\f6\fs18 12E5}{\f4\fs20 \tab Type in the ending address.\par 6.\tab }{\f6\fs18 W}{\f4\fs20 \tab Set this line as a code-window range.\par 7.\tab Esc\tab Return to the command line.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par To increase the number of memory protection ranges, you delete breakpoints as described in "Breakpoint Subdisplay" earlier in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Command Line Subdisplay}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Command Line Subdisplay\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\b\fs28 {\pict{\*\picprop\shplid1059{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\box\brdrs\brdrw30 \picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw497\pich295\picwgoal9940\pichgoal5900\macpict\bliptag-1268565068\blipupi72{\*\blipuid b4633bb405c4c8bc0520438a1390032a}0f3200070007012e01f81101a00082a0008c01000a00070007012e01f80aaa55aa55aa55aa553400090009012c01f6070002000238070001000120012a000e012a01f00a0000000000000000340119000d012901f438a100960006050000000206a1009a0008fffd000000410000a000980300160d000a280124000f153a6c6f6164202f4d5946494c45532f4d5950524f47a00099a0009730000d000c002901f3a100960006050000000206a1009a00080009000000ef0000a00098280016000f224b4559202042524b202044656275674420204b2f504320202042202020442020202029cc2253202020204120202020582020202059202020204d202020512020204c202050202029cc0b6e766d7864697a6320650da00099a1009a0008fffd000000ef0000a00098280022000f2230302020206f206420202030313030202031322f313032452045312030383030203029cc223146442031463030203341423920303030372020354620203333202031202033302029cc0b303031313030303020300da00099a1009a0008fff1000000ef0000a0009828002e000f0120a00099a0009720000a000e000a01f0a100960006050000000206a1009a0008006f0000001a0000a000982a0c08303146463a32330da00099a1009a000800630000001a0000a000982a0c08303146453a39440da00099a1009a000800570000001a0000a000982a0c08303146443a36360da00099a1009a0008004b0000001a0000a000982a0c08303146433a44410da00099a1009a0008003f0000001a0000a000982a0c08303146423a41330da00099a1009a000800330000001a0000a000982a0c08303146413a33390da00099a1009a000800270000001a0000a000982a0c08303146393a35410da00099a1009a0008001b0000001a0000a000982a0c08303146383a35410da00099a1009a0008000f0000001a0000a000982a0c08303146373a35410da00099a1009a000800030000001a0000a000982a0c08303146363a35410da00099a1009a0008fff70000001a0000a000982a0c08303146353a41390da00099a1009a0008ffeb0000001a0000a000982a0c08303146343a33390da00099a1009a0008ffdf0000001a0000a000982a0c08303146333a46460da00099a1009a0008ffd30000001a0000a000982a0c08303146323a33460da00099a1009a0008ffc70000001a0000a000982a0c08303146313a32330da00099a1009a0008ffbb0000001a0000a000982a0c08303146303a30300da00099a1009a0008ffaf0000001a0000a000982a0c08303145463a30310da00099a1009a0008ffa30000001a0000a000982a0c08303145453a41340da00099a1009a0008ff970000001a0000a000982a0c08303145443a33450da00099a00097a100960006050000000206a1009a000800330000002c0000a0009828003a00a80e45302f313030442d30332d30310da00099a1009a000800270000002c0000a000982a0c0e31322f313130332d30302d30300da00099a1009a0008001b0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008000f0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a000800030000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008fff70000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffeb0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffdf0000002c0000a000982a0c0e30302f303030302d30302d30300da00099a1009a0008ffd30000002c0000a000982a0c0e30302f303030302d30302d30300da00099a00097a100960006050000000206a1009a000800330000002f0000a000982a170f45312f303030302e303030462d540da00099a1009a000800270000002f0000a000982a0c0f30312f303930302e314646462d540da00099a1009a0008001b0000002f0000a000982a0c0f30312f363030302e393546462d570da00099a1009a0008000f0000002f0000a000982a0c0f30312f443030302e443633332d570da00099a1009a000800030000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008fff70000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffeb0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffdf0000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a1009a0008ffd30000002f0000a000982a0c0f30302f303030302e303030302d3f0da00099a00097a100960006050000000206a1009a0008006f000000410000a0009828003b01061231322f313030303a2041442031352031380da00099a1009a00080063000000410000a000982a0c1231322f313030333a2039442035302031300da00099a1009a00080057000000410000a000982a0c1531322f313030363a2039462032302033302030350da00099a1009a0008004b000000410000a000982a0c1231322f313030413a2041392037372036360da00099a1009a0008003f000000410000a000982a0c1231322f313030443a2038322032302031300da00099a1009a00080033000000410000a000982a0c0f31322f313031303a2038302032300da00099a1009a00080027000000410000a000982a0c1231322f313031323a2046342031322033340da00099a1009a0008001b000000410000a000982a0c1231322f313031353a2036322046432046460da00099a1009a0008000f000000410000a000982a0c0f31322f313031383a2038372034350da00099a1009a00080003000000410000a000982a0c1231322f313031413a2036322030302046300da00099a1009a0008fff7000000410000a000982a0c0f31322f313031443a2041392032330da00099a1009a0008ffeb000000410000a000982a0c1231322f313031463a2041322034352036370da00099a1009a0008ffdf000000410000a000982a0c1531322f313032323a2034462035302034452030320da00099a1009a0008ffd3000000410000a000982a0c1231322f313032363a2044432038392032330da00099a1009a0008ffc7000000410000a000982a0c1231322f313032393a2037432042452046320da00099a1009a0008ffbb000000410000a000982a0c0f31322f313032433a2037332034300da00099a1009a0008ffaf000000410000a000982a0c0f31322f313032453a2043312030360da00099a1009a0008ffa3000000410000a000982a0c0c31322f313033303a2030410da00099a1009a0008ff97000000410000a000982a0c0f31322f313033313a2030302032330da00099a00097a100960006050000000206a1009a0008006f000000350000a0009828003a0189094c444120313831350da00099a1009a00080063000000350000a000982a0c0b53544120313035302c580da00099a1009a00080057000000350000a000982a0c0b535441203035333032300da00099a1009a0008004b000000350000a000982a0c0a4c44412023363637370da00099a1009a0008003f000000350000a000982a0c1142524c2032303330207b2b313032307d0da00099a1009a00080033000000350000a000982a0c0f4252412031303332207b2b32307d0da00099a1009a00080027000000350000a000982a0c0950454120333431320da00099a1009a0008001b000000350000a000982a0c115045522031303132207b2d303030347d0da00099a1009a0008000f000000350000a000982a0c09535441205b34355d0da00099a1009a00080003000000350000a000982a0c0950455220303031440da00099a1009a0008fff7000000350000a000982a0c084c4441202332330da00099a1009a0008ffeb000000350000a000982a0c0a4c44582023363734350da00099a1009a0008ffdf000000350000a000982a0c0b454f52203032344535300da00099a1009a0008ffd3000000350000a000982a0c0b4a4d4c202832333839290da00099a1009a0008ffc7000000350000a000982a0c0d4a534c2028463242452c58290da00099a1009a0008ffbb000000350000a000982a0c0d414443202834302c53292c590da00099a1009a0008ffaf000000350000a000982a0c0b434d5020283036292c590da00099a1009a0008ffa3000000350000a000982a0c0441534c0da00099a1009a0008ff97000000350000a000982a0c0742524b2032330da00099a00097a100960006050000000206a1009a0008006f000000330000a0009828003a00451030302f303330353a204531202761270da00099a1009a00080063000000330000a000982a0c0e30312f303845303a20394442460da00099a1009a00080057000000330000a000982a0c1030312f323030333a203132313230300da00099a1009a0008004b000000330000a000982a0c1030322f304245413a2034302027f0270da00099a1009a0008003f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080033000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080027000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008001b000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008000f000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a00080003000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008fff7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffeb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffdf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffd3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffc7000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffbb000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffaf000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ffa3000000330000a000982a0c1030302f303030303a204130202720270da00099a1009a0008ff97000000330000a000982a0c1030302f303030303a204130202720270da00099a00097300031000a011600423000310043011700a430003100a500a001033000a600a50117010330002f0104011601f5a0008da00083ff}}{\f4\fs20 \par \par Figure 16.14: Command Line Subdisplay Area\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Many of GSBug\rquote s functions are executed by typing a command while in the Master display.  Commands are shown on the command line as you type them.  Press Return to execute the command.\par Unless otherwise stated, all commands are case insensitive.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Entering Commands}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Entering Commands\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can edit commands as you type them in with the functions listed in Table 16.26.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Keystroke}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par Control-E\tab Toggles between insert and replace modes.  Insert mode puts new characters between characters on the line, pushing the remaining characters to the right to make room.  Replace mode puts new characters over the characters that the cursor is on.\par }{\outl\f4\fs18 left-arrow}{\f4\fs20 \tab Moves the cursor one character to the left.\par }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Moves the cursor one character to the right.\par Control-D\tab Deletes the character the cursor is on.\par Delete\tab Deletes the character to the left of the cursor.\par Control-Y\tab Deletes from the cursor position to the end of the line.\par Control-X\tab Deletes the entire line.\par Return\tab Executes the command that you typed on the command line and sends the entire line to the command interpreter; it does not truncate the line at the cursor position.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.26: Command Line Editing Functions\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Viewing Memory with Templates}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Viewing Memory with Templates\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:displaying memory}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can view memory through templates to display data structures in their proper format.  Three commands let you use templates (see Table 16.27).\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 Loadtemp }{\i\f4\fs20 pathname}{\f4\fs20 \tab Loads the template file specified by }{\i\f4\fs20 pathname}{\f4\fs20 .\par }{\f6\fs18 Killtemp}{\f4\fs20 \tab Unloads all templates currently in memory.\par }{\f6\fs18 _}{\i\f4\fs20 name address}{\f4\fs20 \tab Views the memory starting at }{\i\f4\fs20 address}{\f4\fs20  through the template specified by }{\i\f4\fs20 name}{\f4\fs20 .\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.27: Commands for Viewing Memory with Templates\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If the debugger detects an error while loading a template file, it displays the error number on the command line.  An error $FFFF occurs when the template file is not in the correct format.\par A template file consists of one or more template definitions.  Each template definition must start with the line\par \par }{\f6\fs18 Start }{\i\f4\fs20 template_name}{\f4\fs20 \par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 where }{\i\f4\fs20 template_name}{\f4\fs20  is the name of the template.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each template definition must end with the line\par \par }{\f6\fs18 _End\par }{\f4\fs20 \par The debugger disregards any information that is not placed between an _Start and an _End and treats this information as comments.\par Each line within a template definition corresponds to one or more lines in the template display and includes three fields: label, type, and count.  Each line must follow this syntax, with one or more spaces or tabs separating the different fields:\par \par }{\i\f4\fs20 label\tab type\tab count}{\f4\fs20 \par \par The label field is optional and contains a label that will appear before the information represented by the line.  This label can consist of any combination of characters but cannot contain any spaces or tabs.  The label field must be left justified (that is, have no spaces or tabs preceding it.)  If you do not include the label field in the template definition, no label will appear before the data represented by the line.  If the label field is left out, you must indent the type field.\par The type field is optional and indicates the type of the data represented by the line:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20\ul Type}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par \par }{\f6\fs18 byte}{\f4\fs20 \tab A hexadecimal byte.\par }{\f6\fs18 word}{\f4\fs20 \tab A hexadecimal 16-bit word.\par }{\f6\fs18 long}{\f4\fs20 \tab A hexadecimal 32-bit word.\par }{\f6\fs18 ascii}{\f4\fs20 \tab An ASCII character.\par }{\f6\fs18 cstring}{\f4\fs20 \tab An ASCII string terminated by a $00.\par }{\f6\fs18 pstring}{\f4\fs20 \tab An ASCII string preceded by a count byte.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.28: Type Field of Templates\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can abbreviate any of the types in a template field to its first letter.  If you do not include the type field, the debugger does not print any data after the label.  If you omit the type field, the debugger does not allow a count field.\par If you omit both the label and type fields (in other words, there is a blank line in the template definition), a blank line appears in the template display.\par The count field is optional and should be a decimal integer between 1 and 65,535.  This number tells the debugger how many instances of the particular type of data to display.  If you do not include the count field in your template definition, one instance appears.\par Here is a typical template file:\par \par }\pard \qj\fi360\widctlpar\tx1980\tx3240\adjustright {\f6\fs18 _START  example\par one_byte\tab byte\par some_words\tab word\tab 3\par some_longs\tab long\tab 5\par some_chars\tab ascii\tab 26\par a_C_string\tab cstring\par a_P_string\tab pstring\par _END\par \par _START CREATE\par pathname\tab l\par access\tab w\par file_type\tab w\par aux_type\tab l\par storage_type\tab w\par create_date\tab w\par create_time\par _END\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The file above contains two templates: example and CREATE.  The example template is a sample template illustrating all the different data types, while CREATE is a template for the parameter list of a GS/OS Create call.\par You could use the example template enter the command\par \par }{\f6\fs18 _example 01/2000\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 If the data stored at $01/2000 were\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 $01/2000: 5F 23 01 67 45 AB 89 67 45 23 01 EF CD AB 89 9A\par $01/2010: AF 92 5D 7C BB 95 D2 20 A3 3F A8 61 62 63 64 65\par $01/2020: 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75\par $01/2030: 76 77 78 79 7A 48 65 6C 6C 6F 20 77 6F 72 6C 64\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 $01/2040: 21 00 06 48 6F 77 64 79 2E\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 the output would look like\par \par }\pard \qj\fi360\widctlpar\tx1980\tx3240\adjustright {\f6\fs18 one_byte\tab $5F\par some_words\tab $0123  $4567  $89AB\par some_longs\tab $01234567  $89ABCDEF  $5D92AF9A  $D295BB7C\par \tab $A83FA320\par some_chars\tab abcdefghijklmnopqrstuvwxyz\par a_C_string\tab Hello world!\par a_P_string\tab Howdy.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can load multiple template files into memory at one time.\par The }{\f6\fs18 Killtemp}{\f4\fs20  command removes all currently loaded templates from memory.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Altering the Contents of Memory}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Altering the Contents of Memory\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:altering memory}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 To alter the contents of a memory location, whether displayed in the Memory subdisplay or not, you use the following command to set the contiguous memory starting at address to the values you specify:\par \par }{\i\f4\fs20 address:value1 ...\par }{\f4\fs20 \par The values you specify should be in one of the forms listed in Table 16.29.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Form}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par \par }{\i\f4\fs20 hex_byte}{\f4\fs20 \tab A hexadecimal byte.\par }{\i\f4\fs20 short_address}{\f4\fs20 \tab 2-byte address stored with least significant byte first.\par }{\i\f4\fs20 long_address}{\f4\fs20 \tab 3-byte address stored with least significant byte first.\par }{\f6\fs18 "}{\f4\fs20  }{\i\f4\fs20 string}{\f4\fs20  }{\f6\fs18 "}{\f4\fs20 \tab An ASCII string with the most significant bit of each byte set.\par }{\f6\fs18 '}{\f4\fs20  }{\i\f4\fs20 string}{\f4\fs20  }{\f6\fs18 '}{\f4\fs20 \tab An ASCII string with the most significant bit of each byte cleared.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.29: Forms of Values for Modifying Memory\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Do not precede hexadecimal bytes and addresses with a dollar sign and do not place a slash after the bank byte of long addresses.\par For example, to place the hexadecimal byte hex_byte in memory starting at address, you would use the command\par \par }{\i\f4\fs20 address:hex_byte\par }{\f4\fs20 \par To enter a value of more than one byte, separate the values with spaces and enter the value that goes in the lowest address first.  For example, to place the value $A0 at 01/04ED and the value $A1 at 01/04EE, you can use any of the following commands:\par \par }{\f6\fs18 104ED:A0 A1\par 0104ED:A0 A1\par 1/04ED:A0 A1\par 01/04ED:A0 A1\par }{\f4\fs20 \par In addition, if the K register is already set to 01, you can use the command\par \par }{\f6\fs18 04ED:A0 A1\par }{\f4\fs20 \par You can place values corresponding to strings ending with either string delimiter, }{\f6\fs18 "}{\f4\fs20  or }{\f6\fs18 '}{\f4\fs20 , no matter which one they began with.  To enter string delimiters into memory, you use an exclamation mark (!).  An exclamation mark in a string instructs the debugger to enter the next character into memory.\par To enter a double quote into memory, type !}{\f6\fs18 "}{\f4\fs20  inside a string.  To enter a single quote, type !}{\f6\fs18 '}{\f4\fs20 .  To enter an exclamation mark, type !}{\f6\fs18 !}{\f4\fs20 .  For example, the following command:\par \par }{\f6\fs18 04/2000:"!"It!'s true!!!" she exclaimed."\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 enters the following string into memory at $2000 in bank four.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 "It's true!" she exclaimed.\par }{\f4\fs20 \par When you need to enter many values into a line, press the Space bar.  The next address appears on the command line followed by a colon (:).\par If memory is modified while you are viewing it in a Memory display, the change appears immediately on the screen.\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\i\f4\fs20 address}{\f6\fs18 :" }{\i\f4\fs20 string}{\f4\fs20  \tab Places values corresponding to }{\i\f4\fs20 string}{\f4\fs20 , with the high bit of each byte set, in memory starting at address.  For example, the following command places the value $E1 at 01/04ED and the value $C1 at 01/04EE:\par \par }{\f6\fs18 \tab 104ED:"aA\par }{\f4\fs20 \par \tab To include in a string one of the characters used in commands, precede the character with an exclamation mark (!).  For example, to put the string a"A into memory at 0104ED, placing the value $E1 at 01/04ED, the value $A2 at 01/04EE, and the value $C1 at 01/04EF, use the command:\par \par }{\f6\fs18 \tab 104ED:"a!"A\par }{\f4\fs20 \par }{\i\f4\fs20 address}{\f6\fs18 :' }{\i\f4\fs20 string}{\f4\fs20 \tab Places values corresponding to string with the high bit of each byte cleared in memory at address.  For example, the following command places the value $61 at 01/04ED and the value $41 at 01/04EE:\par \par }{\f6\fs18 \tab 104ED:'aA\par }{\f4\fs20 \par \tab To include in a string one of the characters used in commands, precede the character with an exclamation mark (!).  For example, to put the string a"A into memory at 0104ED, placing the value $61 at 01/04ED, the value $22 at 01/04EE, and the value $41 at 01/04EF, use the command:\par \par }{\f6\fs18 \tab 104ED:'a!"A\par }{\f4\fs20 \par }{\i\f4\fs20 address}{\f6\fs18 :}{\i\f4\fs20 instruction}{\f4\fs20  \tab Assembles instruction and places the opcode and operand in memory starting at address.  Simultaneously places the instruction on the last line of the Disassembly subdisplay.  For example, the following command places the value $A0 (the LDY immediate-address opcode) at 01/04ED and the value $A1 at 01/04EE:\par \par }{\f6\fs18 \tab 104ED:LDY #A1\par }{\f4\fs20 \par \tab You enter accumulator-mode expressions like implied-mode expressions: For example, you would enter ROL rather than ROL A.  Branch instructions take the absolute address to branch to, not an offset.  If you type:\par \par }{\f6\fs18 \tab LDA #FF\par }{\f4\fs20 \par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4\fs20 1.\tab LDA #FF will appear in the Disassembly subdisplay regardless of the settings for e, m, and x.\par 2.\tab When you execute that statement, it will change depending on e, m, and x.\par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4\fs20 \par \tab You can combine values and strings in one command.  To do so, separate values with spaces and include trailing delimiters for strings (that is, if the string begins with a single quotation mark ('), end it with a single quotation mark; if it begins with a double quotation mark ("), end it with a double quotation mark).  For example, the following command places the values $A0 $A1 $C1 $F0 $F0 $EC $E5 $20 $49 $49 in memory starting at address 01/04ED:\par \par }{\f6\fs18 \tab 01/04ED:A0 A1 "Apple"' II'\par }{\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.30: Commands for Altering the Contents of a Memory Location\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Hexadecimal-Decimal Conversions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Hexadecimal-Decimal Conversions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:hexadecimal}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug can convert hexadecimal numbers to decimal and vice versa.  To convert a number, type one of the commands in Table 16.31 on the command line and press Return.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from hexadecimal to decimal.  This command is identical to the $value command.\par }{\f6\fs18 $}{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from hexadecimal to decimal.  This command is identical to the value command.\par }{\f6\fs18 +}{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from decimal to hexadecimal.\par }{\f6\fs18 \endash }{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from decimal to hexadecimal.  A negative decimal value is converted to a 2-byte two\rquote s complement hexadecimal equivalent; for example, \endash 10 = $FFF6.  (Note that if you put in $FFF6, you get 65526, not \endash 10.)\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.31: Commands for Hexadecimal-Decimal Conversion\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Evaluation of Expressions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Evaluation of Expressions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:expressions}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 GSBug evaluates expressions with the command\par \par }{\i\f4\fs20 expression}{\f6\fs18 =}{\f4\fs20 \par \par Table 16.32 lists the operators the debugger recognizes in expressions.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Operator}{\f4\fs20 \tab }{\f4\fs20\ul Meaning}{\f4\fs20 \par \par }{\f6\fs18 +}{\f4\fs20 \tab Addition\par }{\f6\fs18 -}{\f4\fs20 \tab Subtraction\par }{\f6\fs18 *}{\f4\fs20 \tab Multiplication\par }{\f6\fs18 /}{\f4\fs20 \tab Integer division\par }{\f6\fs18 %}{\f4\fs20 \tab Modulus\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.32: Operators Recognized in Expressions\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The order of evaluation is from left to right, and all operators have equal precedence.\par You can enter values in the expression as hexadecimal numbers, (preceded by a dollar sign or not as you wish) or as decimal numbers, which must be preceded by a positive or negative sign.  For example, to add a decimal 6 to a decimal 5, you would enter the following expression:\par \par }{\f6\fs18 +6++5=\par }{\f4\fs20 \par Values can be a maximum of four bytes long.  The debugger truncates longer values to four bytes.  It converts negative decimal numbers to 4-byte two\rquote s-complement hexadecimal.\par The bases and number of the values in the expression determine the base of the result.  If the expression has at least two values, and all the values are in decimal, the result is also in decimal.  If there are at least two values and one or more of them is in hexadecimal, the result is also in hexadecimal.\par Decimal results of expressions are preceded by a plus (+).\par If the expression consists of only one value, the result is in the opposite base (that is, hexadecimal if the value is in decimal and decimal if the value is in hexadecimal).  You can use this fact to convert between bases.\par The result of an expression appears on the command line and does not disappear with the next keystroke, so the result can be used in a further calculation or converted to the opposite base.  For example, if you typed the command\par \par }{\f6\fs18 13+1F=\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 the result would appear on the command line as follows:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 1B+1F=$00000032\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 If you typed an equal sign and pressed Return, the command line would display\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 1B+1F=$00000032=+0000000058\par }{\f4\fs20 \par To clear the command line, press Esc.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Configuring the Master Display}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Configuring the Master Display\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:configuration file}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can configure the GSBug Master display to meet your needs by adjusting the relative position of the stack pointer in the Stack subdisplay, the position of the current line in the Disassembly subdisplay, and the numbers of memory-protection lines and breakpoint lines.  You can also select the slot used to send information to the printer.\par To set the printer slot and adjust the positions of the stack pointer and current-instruction line, type }{\f6\fs18 Set}{\f4\fs20  on the command line and press Return.\par The following prompt appears on the command line:\par \par }{\f6\fs18 dump alignment = ON\tab \tab \tab printer slot = 1\par }{\f4\fs20 \par Type any number from 1 to 7 to set the slot that the debugger will use to send data to the printer.  Type }{\f6\fs18 S}{\f4\fs20  to toggle between absolute and relative stack addresses.  Type}{\f6\fs18  D }{\f4\fs20 to toggle memory dump alignment on and off.\par You can also use the arrow keys to adjust the display.  When you are done, press Esc to enter the changes and clear the command line.  The actions of the arrow keys are shown in Table 16.33.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\outl\f4\fs18 left-arrow}{\f4\fs20 \tab Moves the stack pointer up one line.  All the stack subdisplay lines move up one line so that the highlighted line that indicates the current position of the stack pointer is one line higher in the display.  You can now see the contents of one additional byte on the stack below (that is, with a lower address than) the stack pointer, and of one less byte above the stack pointer.\par }{\outl\f4\fs18 right-arrow}{\f4\fs20 \tab Moves the stack pointer down one line.  All of the stack subdisplay lines move down one line, so that the highlighted line that indicates the current position of the stack pointer is one line lower in the display.  You can now see the contents of one additional byte on the stack above the stack pointer, and of one less byte below the stack pointer.\par }{\outl\f4\fs18 up-arrow}{\f4\fs20 \tab Moves the current instruction up one line.  When you type }{\f6\fs18 set}{\f4\fs20  and press Return, any disassembled code on the screen is cleared and an inverse-video bar appears at the location at which the current instruction would appear in the display.  Each time you press the Up Arrow key, the highlighted bar moves up one line.  You can now see the disassembly of one additional instruction following the current instruction, and of one less instruction preceding the current instruction when you continue single-stepping or tracing code.\par }{\outl\f4\fs18 down-arrow}{\f4\fs20 \tab Moves the current instruction down one line.  Each time you press the Down Arrow key, the highlighted bar moves down one line.  You can now see the disassembly of one less instruction following the current instruction and of one additional instruction preceding the current instruction when you continue single-stepping or tracing code.\par }{\f6\fs18 S}{\f4\fs20 \tab Toggles between absolute and relative stack addresses.\par }{\f6\fs18 D}{\f4\fs20 \tab Toggles memory dump alignment on and off.\par }{\i\f4\fs20 Number}{\f4\fs20 \tab Sets default printer slot number (from 0 to 7).\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.33: Commands to Configure the Master Display\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Press Esc to complete your changes and clear the command line.\par The Breakpoint and Memory-Protection subdisplays can each occupy from 1 to 17 lines in the Master display, but the total of both displays is always 18 lines.  In other words, to increase the number of breakpoint lines, you must delete a corresponding number of memory-protection lines, and vice versa.  To enter the Memory-Protection subdisplay, type }{\f6\fs18 Mp}{\f4\fs20  on the command line and press Return.  Then to delete a memory-protection line, use the arrow keys to highlight the line you want to eliminate, and press Delete.  You can delete as many lines as you wish, except that at least one memory-protection line must remain on the screen.\par To delete a breakpoint line, type }{\f6\fs18 bp}{\f4\fs20  on the command line and press Return to enter the Breakpoint subdisplay.  Then use the arrow keys to highlight the line you want to eliminate, and press Delete.  You can delete as many lines as you wish, except that at least one breakpoint line must remain on the screen.\par If you edit the Breakpoint subdisplay when real breakpoints are in, the debugger automatically takes them out when you enter the subdisplay and puts them back in when you exit.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Saving a Display Configuration}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Saving a Display Configuration\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:configuration file}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Once you have customized the GSBug display to suit your needs, you can save the configuration to disk in a display-configuration file.  Table 16.34 lists the information saved in a display-configuration file with associated commands.\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\tx6480\adjustright {\f4\fs20 \tab \tab Associated\par }{\f4\fs20\ul Type of Information Saved}{\f4\fs20 \tab }{\f4\fs20\ul Command}{\f4\fs20 \par \par The position of the stack pointer in the Stack subdisplay.\tab Set \par The position of the current instruction in the Disassembly\tab Set \par \tab subdisplay.\par The slot number for the printer.\tab Set \par The stack address format.\tab Set\par The dump alignment format.\tab Set \par The memory addresses to be displayed and the type of display\tab Mem\par \tab for each (hexadecimal, short address, or long address).\par The number of memory-protection lines.\tab Mp\par The memory-protection ranges and the type of range for each\tab Mp\par \tab (code trace or code window).\par The number of breakpoint lines.\tab Bp\par The breakpoints, including the address and trigger value.\tab Bp\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.34: Display Configuration Information and Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can save as many configurations as you wish.  To save and restore display configurations, type the commands in Table 16.35 on the command line, and press Return:\par \par }\pard \qj\fi-2160\li2520\keep\keepn\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 CSave}{\f4\fs20  }{\i\f4\fs20 pathname}{\f4\fs20  \tab Saves the current display configuration on disk to the file specified by }{\i\f4\fs20 pathname}{\f4\fs20 .  Include the prefix for the file if you want to save it to a subdirectory other than the current GS/OS system subdirectory.  For example, to save the current configuration to the file CONFIG.STORE in the directory /PROGRAMS/DEBUG/, use the command\par \par }{\f6\fs18 \tab CSAVE /PROGRAMS/DEBUG/CONFIG.STORE\par }{\f4\fs20 \par }{\f6\fs18 CLoad}{\f4\fs20  }{\i\f4\fs20 pathname}{\f4\fs20  \tab Restores a previously saved display configuration from the disk file specified by }{\i\f4\fs20 pathname}{\f4\fs20 .  Include the prefix for the file you want to use if the path name is different from the current GS/OS system subdirectory.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.35: Commands for Saving and Restoring Display Configurations\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The debugger loads a configuration file at startup time containing the information saved with the CSave command.  This standard configuration file, GSBUG.SETUP, should be located in the System.Setup folder of the disk containing the debugger; otherwise, it will not load automatically (you can still load it manually).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Command Line Commands}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Command Line Commands\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Table 16.36 lists all the commands available from the Master display command line.  Most of these commands are described in detail elsewhere in this chapter, but they are included here for your convenience.  You can include a slash (/) after the bank value or omit it when entering an address; either form works.  If you do not include the bank number, the current value of the K register is used for the bank.  Press Return after each command-line command.\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Action}{\f4\fs20 \par \par }{\f6\fs18 ?}{\f4\fs20 \tab Displays a help screen.\par }{\i\f4\fs20 address}{\f6\fs18 :}{\f4\fs20 \tab Displays 368 contiguous bytes of memory starting at }{\i\f4\fs20 address}{\f4\fs20 .\par }{\i\f4\fs20 address}{\f6\fs18 ::}{\f4\fs20 \tab Displays memory starting at 2-byte address stored at }{\i\f4\fs20 address}{\f4\fs20 ; can be used for dereferencing a pointer (indirection).\par }{\i\f4\fs20 address}{\f6\fs18 :::}{\f4\fs20 \tab Displays memory starting at 3-byte address stored at }{\i\f4\fs20 address}{\f4\fs20 ; can be used for dereferencing a pointer (indirection).\par }{\i\f4\fs20 address1}{\f6\fs18 .}{\i\f4\fs20 address2}{\f6\fs18 :}{\f4\fs20 \tab Displays a range of memory from }{\i\f4\fs20 address1}{\f4\fs20  to }{\i\f4\fs20 address2}{\f4\fs20 .\par }{\i\f4\fs20 address}{\f6\fs18 :}{\i\f4\fs20 instruction}{\f4\fs20 \tab Assembles instruction and places the opcode and operand in memory starting at address.  Simultaneously places the instruction on the last line of the Disassembly subdisplay.\par }{\i\f4\fs20 address}{\f6\fs18 :'}{\i\f4\fs20 string}{\f4\fs20 \tab Places values corresponding to }{\i\f4\fs20 string}{\f4\fs20 , with the high bit of each byte cleared, in memory at }{\i\f4\fs20 address}{\f4\fs20 .\par }{\i\f4\fs20 address}{\f6\fs18 :"}{\i\f4\fs20 string}{\f4\fs20 \tab Place values corresponding to }{\i\f4\fs20 string}{\f4\fs20 , with the high bit of each byte set, in memory starting at }{\i\f4\fs20 address}{\f4\fs20 .\par }{\i\f4\fs20 address}{\f6\fs18 :}{\i\f4\fs20 value}{\f4\fs20 \tab Places the hexadecimal value }{\i\f4\fs20 value}{\f4\fs20  in memory starting at }{\i\f4\fs20 address}{\f4\fs20 .  To enter a value of more than one byte, enter the byte that goes in the highest address first.\par }{\i\f4\fs20 register}{\f6\fs18 =}{\i\f4\fs20 value}{\f4\fs20 \tab Sets the register specified by register to the value specified by value.  This command is case sensitive.\par }{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from hexadecimal to decimal.  This command is identical to the }{\f6\fs18 $}{\i\f4\fs20 value}{\f4\fs20  command.\par }{\f6\fs18 $}{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from hexadecimal to decimal.  This command is identical to the }{\i\f4\fs20 value}{\f4\fs20  command.\par }{\f6\fs18 +}{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from decimal to hexadecimal.\par }{\f6\fs18 \endash }{\i\f4\fs20 value}{\f6\fs18 =}{\f4\fs20 \tab Converts }{\i\f4\fs20 value}{\f4\fs20  from decimal to hexadecimal.  A negative decimal value is converted to a 2-byte two\rquote s complement hexadecimal equivalent.  \par Space bar\tab Writes the next available address on the command line, followed by a colon.  Use this command to get the next address after using any command starting with }{\i\f4\fs20 address}{\f4\fs20 :.\par }{\f6\fs18 Asm}{\f4\fs20 \tab Clears the Disassembly subdisplay to prepare to enter a sequence of instructions using the }{\i\f4\fs20 address}{\f6\fs18 :}{\i\f4\fs20 instruction}{\f4\fs20  command.\par }{\f6\fs18 Cload}{\f4\fs20  }{\i\f4\fs20 pathname}{\f4\fs20  \tab Restores a previously saved display configuration from the disk file specified by }{\i\f4\fs20 pathname}{\f4\fs20 .\par }{\f6\fs18 Clr}{\f4\fs20 \tab Clears all breakpoints to 00/0000-00-00.\par }{\f6\fs18 CSave}{\f4\fs20  }{\i\f4\fs20 pathname}{\f4\fs20 \tab Saves the current display configuration on disk to the file specified by }{\i\f4\fs20 pathname}{\f4\fs20 .\par }{\f6\fs18 DP:}{\f4\fs20 \tab Displays the direct page.\par }{\f6\fs18 DPAGE}{\f4\fs20 \tab Sets D (Direct-Page register) to the direct page the debugger allocated for the user at startup.\par }{\f6\fs18 Dbrk}{\f4\fs20 \tab Returns to the debugger when a BRK instruction that has not been set as a breakpoint is encountered while your program is running in real-time mode.\par }{\f6\fs18 e}{\f4\fs20 \tab Toggles the e flag: if it\rquote s set to 1, changes it to 0; if it\rquote s set to 0, changes it to 1.  This command is case sensitive.\par }{\i\f4\fs20 expression}{\f6\fs18 =}{\f4\fs20 \tab Evaluates expression (The order of evaluation is from left to right with all operators having equal precedence).\par }{\f6\fs18 In}{\f4\fs20 \tab Inserts real breakpoints.\par }{\i\f4\fs20 address}{\f6\fs18 G}{\f4\fs20 \tab Jumps directly to code at address }{\i\f4\fs20 address}{\f4\fs20 .  If you omit address, the current K/PC address is used.\par }{\i\f4\fs20 address}{\f6\fs18 J}{\f4\fs20 \tab Jumps directly to code at address address.  If you omit address, uses the current K/PC address.\par }{\f6\fs18 Key=}{\i\f4\fs20 keynum}{\f4\fs20 \tab Each bit of the binary number represented by the hexadecimal number }{\i\f4\fs20 keynum}{\f4\fs20  specifies one key to be used as a keystroke modifier; sets that bit to 1 to make that key a keystroke modifier.  The bit assignments are described in the section "Register Subdisplay" in this chapter.\par }{\f6\fs18 Load}{\f4\fs20  }{\i\f4\fs20 pathname}{\f4\fs20 \tab Loads the program specified by }{\i\f4\fs20 pathname}{\f4\fs20  to debug.\par }{\f6\fs18 m}{\f4\fs20 \tab Toggles the m flag: if it\rquote s set to 1, changes it to 0; if it\rquote s set to 0, changes it to 1.  This command is case sensitive and works only if e= 0.\par }{\f6\fs18 Mbrk}{\f4\fs20 \tab Exits to the Monitor when a BRK instruction that has not been set as a breakpoint is encountered while in real-time mode.\par }{\f6\fs18 Mon}{\f4\fs20 \tab Exits from the debugger into the Monitor.  Press Control-Y and Return to return to the debugger.\par }{\f6\fs18 Off}{\f4\fs20 \tab Turns off the Master display and displays your program.\par }{\f6\fs18 On}{\f4\fs20 \tab Turns off your program\rquote s display and turns on the Master display.\par }{\f6\fs18 Out}{\f4\fs20 \tab Removes real breakpoints.\par }{\f6\fs18 P}{\f4\fs20 \tab Prints the current text screen.  You can use this command with the Master display on to print the current Master display, or with the Master display off to print your program\rquote s display (80-column text only).  You can also print the Memory display or help screens with this command.\par }{\f6\fs18 Prefix }{\i\f4\fs20 n pathname}{\f4\fs20  \tab Changes GS/OS prefix }{\i\f4\fs20 n}{\f4\fs20  to }{\i\f4\fs20 pathname}{\f4\fs20 .  This command has the same effect as the shell's PREFIX command.  If you omit }{\i\f4\fs20 n}{\f4\fs20 , prefix 0 is changed.\par }{\f6\fs18 Q}{\f4\fs20 \tab Exits the debugger.  This command terminates GSBug, unlike the Mon command, which allows you to return from the Monitor to the debugger.  If you called the debugger from the shell, Q returns you to the shell.  Q restores the state of the machine at exit.\par }{\f6\fs18 QR}{\f4\fs20 \tab Exits the debugger.  QR does not restore the state of the machine at exit; it leaves the system as modified.\par }{\i\f4\fs20 address}{\f6\fs18 S}{\f4\fs20 \tab Enters single-step mode at address.  If you omit address, it uses the current setting of the K/PC register.\par }{\f6\fs18 Set}{\f4\fs20 \tab Adjusts the positions of the stack pointer and current-instruction line and sets the printer slot.\par }{\f6\fs18 Shutdown}{\f4\fs20  }{\i\f4\fs20 UserID quit_flag}{\f4\fs20 \par \tab Executes a UserShutDown System Loader call.\par }{\f6\fs18 Stack S}{\f4\fs20 \tab Sets the address of S (S=address) of the user stack to the stack that was allocated by the debugger at startup.\par }{\i\f4\fs20 address}{\f6\fs18 T}{\f4\fs20 \tab Enters trace mode at address.  If you omit address, uses the current setting of the K/PC register.\par }{\f6\fs18 Tool #}{\i\f4\fs20 toolnum}{\f4\fs20 \tab Displays the name, number, and actual address of the tool number }{\i\f4\fs20 toolnum}{\f4\fs20 .\par }{\f6\fs18 Tool _}{\i\f4\fs20 toolname}{\f4\fs20 \tab Displays the name, number, and actual address of the tool named }{\i\f4\fs20 toolname}{\f4\fs20 .\par }{\f6\fs18 Unload}{\f4\fs20 \tab Unloads GSBug and then quits (not available in the application version).\par }{\f6\fs18 V}{\f4\fs20 \tab Displays the current version number and copyright of GSBug.\par }{\f6\fs18 x}{\f4\fs20 \tab Toggles the x flag: if it\rquote s set to 1, changes it to 0; if it\rquote s set to 0, change it to 1.  This command is case sensitive and works only if e=0.\par }{\i\f4\fs20 address}{\f6\fs18 X}{\f4\fs20 \tab Executes a JSL (or real time JSR) directly to code at address.  If you omit address, uses the current setting of the K/PC register.  If you omit address, the X must be uppercase.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Table 16.36: Commands Available from Master Display Command Line\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug\:command line}{\rxe bk7}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GSBug Debugger}{\rxe bk8}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\*\bkmkstart bk9}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 segments}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Part 4: Loader Dumper}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Part 4\: Loader Dumper\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Loader Dumper is a desk accessory that you can use together with GSBug to debug relocatable and dynamic code.  Loader Dumper lets you see where in memory the System Loader has loaded each segment of your program and gives you information about the various tables and variables that the loader uses.  The System Loader is described in the GS/OS Reference.  \par To get the Desk Accessories menu, press }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 -Control-Esc.  When you select Loader Dumper from the Desk Accessories menu, the menu shown in Figure 16.15 appears on the screen.\par \par }\pard \qj\li360\widctlpar\tx1080\adjustright {\f6\fs18 1.\tab Dump Memory Segment Table\par 2.\tab Dump Pathname Table\par 3.\tab Dump Jump Table\par 4.\tab Dump Loader Globals\par 5.\tab Dump GS/OS Packets\par 6.\tab Dump File Buffer Variables\par 7.\tab Get Load Segment Information\par 8.\tab Get UserID Information\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 What do you want to dump ?\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.15: Loader Dumper main menu\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Type the number associated with the menu item of your choice.\par All these selections are described in the following sections.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Dump Memory Segment Table}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Dump Memory Segment Table\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The memory segment table is a linked list, each entry of which describes a memory block known to the System Loader.  Each memory block corresponds to a single load segment.  Note that dynamic segments do not appear in the memory segment table when the program is initially loaded because they are not loaded into memory until the program needs them.\par You can use the memory segment table to get the starting address of every segment currently in memory.  The entries in this table are shown one at a time.  Press Return to see the next entry.  Press Esc to return to the Loader Dumper main menu.  To see memory segment table information on one specific segment (instead of scrolling through the entire memory segment table), use selection 7, Get Load Segment Information.\par Before using the memory segment table to get the starting addresses of segments, you must know the user ID and file number of the program in which you are interested.  This information is available from selection 2, Dump Pathname Table.  If you load a program with GSBug, the user ID is also displayed in the A register immediately after the program is loaded.\par The starting address of the segment appears in parentheses after the Memory Handle field.  For example, the starting address in memory of load segment 1 of load file 1 for UserID $A001 (as shown in Figure 16.16) is $1188D3.\par The type of segment is shown in parentheses after the Load Segment Kind field.\par \par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\f6\fs18 Memory Segment Table\par $E11854 (1188BF)\par ------------------------\par Next Handle \tab = $E118B8 (11FD8B)\par Prev Handle \tab = $000000\par ------------------------\par UserID\tab = $A001\par Memory Handle\tab = $E11840 (1188D3)\par Load File Number\tab = $0001\par Load Segment Number\tab = $0001\par Load Segment Kind\tab = $2000 (Position Independent)\par \par Press RETURN to continue\par \par $E118B8 (11FD8B)\par ------------------------\par Next Handle \tab = $E118E0 (11FD6F)\par Prev Handle \tab = $E11854 (1188BF)\par ------------------------\par UserID\tab = $5002\par Memory Handle\tab = $E118A4 (020000)\par Load File Number\tab = $0001\par Load Segment Number\tab = $0001\par Load Segment Kind\tab = $0402 (Jump Table Segment)\par \tab         \tab (Reload)\par \par Press RETURN to continue\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.16: Memory Segment Table Output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If your program has unloaded a memory block (that is, made it purgeable), you can use the memory segment table to find out if it has been purged.  To do so, check the address in parentheses after the memory handle: If the address is 000000, the block has been purged.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Dump Path Name Table}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Dump Path Name Table\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The path name table provides a cross-reference between file numbers, file path names, and user IDs.  The path name table is a linked list of individual path name entries.  The entries in the table are shown one at a time; press Return to see the next entry.  Press Esc to return to the Loader Dumper main menu.\par You can use the path name table to get the user ID and file number of every program in memory.  You need this information to use the memory segment table to find the starting memory address of a segment.  The path name table also gives you the starting address and size of the direct-page/stack space requested by the loader for each program.  (The loader requests a direct-page/stack space only if you include a direct-page/stack segment in your program; otherwise GS/OS either assigns the direct-page/stack space as a default or your program can request one through the Memory Manager.)\par The path name table display of the Loader Dumper is illustrated in Figure 16.17.\par \par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\f6\fs18 Pathname Table\par $E11890 (118527)\par ------------------------\par Next Handle \tab = $E118F4 (11F9F6)\par Prev Handle \tab = $000000\par ------------------------\par UserID\tab = $A001\par File Number\tab = $0001\par File Date\tab = $06000617570A0B00 (7/24/87 10:11:0)\par Direct Page/Stack Addr\tab = $0000\par Direct Page/Stack Size \tab = $0000\par Jump Table Segment Flag\tab = $0001\par Starting Address\tab = $00060000\par File Pathname\tab = /ORCA/SYSTEM/SYSTEM.SETUP/TOOL.SETUP\par \par Press RETURN to continue\par \par $E118F4 (11F9F6)\par ------------------------\par Next Handle \tab = $E11930 (11FAD9)\par Prev Handle \tab = $E11890 (118527)\par ------------------------\par UserID\tab = $5002\par File Number\tab = $0001\par File Date\tab = $AD2C\par Direct Page/Stack Addr\tab = $0000\par Direct Page/Stack Size \tab = $0000\par File Pathname\tab = /ORCA/SYSTEM/DESK.ACCS/MANGLER.DA\par \par Press RETURN to continue\par }{\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.17: Path Name Table Output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Dump Jump Table}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Dump Jump Table\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 All references to dynamic segments are made through the jump table.  The jump table in memory consists of the jump table directory and one or more jump table segments.  The jump table directory is a linked list, each entry of which points to a single jump table segment encountered by the loader.  The Loader Dumper displays each jump table directory entry followed by the jump table segment to which the entry points.  Each jump table segment contains one entry for each reference to a dynamic segment in the program.\par The entries in the table are shown one at a time; press Return to see the next entry.  Press Esc to jump to the next directory entry.  If you are at the last directory entry, Esc returns you to the Loader Dumper main menu.\par You can use the jump table to determine whether a dynamic segment has been loaded into memory; if it has been loaded, you can use the memory segment table to find the starting address of the segment in memory.  A sample Jump table display is shown in Figure 16.18.  The first entry in Figure 16.18 is for a dynamic segment that has been loaded into memory.  You can tell that the segment has been loaded because the jump table segment entry is in its loaded state; it ends in a JML to the referenced subroutine.  The operand of the JML statement is the location in memory of the subroutine being referenced (if there is more than one routine or entry point in the segment, there will be more than one jump table entry for that segment).  The number in parentheses after the Handle to Segment field shows the location in memory of the jump table segment itself.\par The second entry in Figure 16.18 is for a dynamic segment that has not been loaded into memory.  The jump table segment entry ends in a JSL to the System Loader\rquote s Jump table load function.\par Before using the jump table to get information about dynamic segments, you must know the user ID and file number of the program in which you are interested.  This information is available from selection 2, Dump Pathname Table.\par The jump table and jump table segments are described in the GS/OS Reference.\par \par }{\f6\fs18 Jump Table\par \par $E11AC0 (11FA2D)\par ------------------------\par Next Handle \tab \tab = $E11818 (11E2AA)\par Prev Handle \tab \tab = $E11840 (11FA3B)\par ------------------------\par UserID\tab = $1007\par Handle to Segment\tab \tab = $E11A34 (010A6B)\par \par UserID\tab = $1007\par Load File Number\tab \tab = $0001\par Load Segment Number\tab = $0002\par Load Segment Offset\tab = $00000000\par Jump to Loader/Function\tab = JML 010A85\par \par \par Press RETURN to continue\par \par \par $E11818 (11E2AA)\par ------------------------\par Next Handle\tab \tab = $000000\par Prev Handle \tab \tab = $E11AC0 (11FA2D)\par ------------------------\par UserID\tab = $1008\par Handle to Segment\tab \tab = $E118E0 (010B13)\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 UserID\tab = $1008\par Load File Number\tab \tab = $0001\par Load Segment Number\tab = $0002\par Load Segment Offset\tab = $00000000\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 Jump to Loader/Function\tab = JSL 11FF10\par \par \par Press RETURN to continue\par }{\f4\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.18: Jump Table Output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Dump Loader Globals}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Dump Loader Globals\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Loader globals display shows the values of some loader variables and some statistics associated with the last load operation performed.  This table was included primarily for use by Apple engineers when they were debugging the System Loader.  If you have trouble using the loader, or believe you have found a bug in the loader, copy down the information in the Last Function, Total Errors, and Error Addresses fields before calling technical support, or include this information in your bug report.  Press Return or Esc to return to the Loader Dumper menu.\par \par }\pard \qj\fi360\widctlpar\tx3060\adjustright {\f6\fs18 Loader Globals\par --------------\par $01FB00 SEGTBL\tab = $E11A20 (11FDC8)\par $01FB04 JMPTBL\tab = $000000\par $01E70A PATHTBL\tab = $E117A0 (11FDAC)\par $01E70E USERID\tab = $1002\par $01E72C Last Function\tab = $0022 (Get Pathname 2)\par $01E710 Total Errors\tab = $0000\par $01FB10 LastError\tab = $0000\par $01FB12 Error_Addresses\tab = $F71C F6ED E6A3 B024 \par $01FB1A LCJumpLoad\tab = $11FF10\par $01FB1E LCReturn\tab = $11FF36\par $01E72E nLCONST\tab = $0012\par $01E730 nRELOC\tab = $0000\par $01E732 nINTERSEG\tab = $0000\par $01E734 nDS\tab = $0011\par $01E736 ncRELOC\tab = $1262\par $01E738 ncINTERSEG\tab = $0000\par $01FB30 nSUPER\tab = $0002\par $01E73A nSegments\tab = $0001\par $01E73C nBytes\tab = $0000A1CD\par \par \par Press RETURN to continue\par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 \par Figure 16.19: Loader Globals Output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The fields beginning with a lowercase n (nLCONST or nRELOC \endash  for an example, see Figure 16.19) show the number of certain kinds of records, the number of segments, and the number of bytes loaded by the last Initial Load call.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Dump GS/OS Packets}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Dump GS/OS Packets\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This display shows the GS/OS calls, including parameter blocks, used most recently by the loader.  This information is primarily for use by Apple engineers in debugging the loader and GS/OS.  The GS/OS Packets display is illustrated in Figure 16.20.  GS/OS calls are described in the GS/OS Reference.\par \par }\pard \qj\fi360\widctlpar\tx2420\adjustright {\f6\fs18 GS/OS Packets\par --------------\par $01FB8A POpen\tab = $30F8 0003 000FE0EB 4000 4000 4000 0E72 8EBC0E72 0000\par \tab = $0001000A0009D2E (1/11/0 0:57:46)\par \tab = $00000010011FF6A (1/2/0 17:55:06)\par $01FBB0 PRead\tab = $00E3 000000B3 00020000 58103200\par $01FBBE PClose\tab = $0B0B\par $01FBC0 PGetMark\tab = $0200 58103300\par $01FBC6 PSetMark\tab = $0B0B 00010200\par $01FBCC PExpandPath\tab = $E0EB 4000000F 0E720000 0000\par $01FBD8 Psys_prefs\tab = $0000 0001\par \par \par Press RETURN to continue\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.20: GS/OS Packets Output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Dump File Buffer Variables}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Dump File Buffer Variables\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The file buffer is used by the System Loader to buffer data being loaded from disk into memory.  You can use the File buffer variables display to monitor the progress of a load.  Press Return or Esc to return to the Loader Dumper main menu.\par \par }\pard \qj\fi360\widctlpar\tx3320\adjustright {\f6\fs18 File Buffer Variables\par ---------------------\par $01E79E File_Buff\tab = 00114527\par $01E7A2 File_Buff_Size\tab = 4000\par $01E7A8 File_Pt\tab = 236B\par $01E7AA File_EOB\tab = 236B\par $01E7AC File_Mark\tab = 00010000\par $01E7B0 Header_Mark\tab = 00012400\par \par \par Press RETURN to continue\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.21: File buffer variables output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The File_Pt field shows the next location to be read from the file buffer.\par The File_EOB field shows the location of the last valid data currently in the buffer.  These fields are equal after a load is complete and anytime during a load that the buffer is full, indicating that all the data in the buffer has been read.  In this case, the next read operation on the buffer will cause the buffer to be refreshed.\par The File_Mark field shows the last location read from within the GS/OS file being loaded.  The Header_Mark field shows the location of the beginning of the next segment header in the file being loaded.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Get Load Segment Information}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Get Load Segment Information\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Get Load Segment Information selection provides the same information as the Dump Memory Segment Table selection, except that information is provided on only the segment you specify.  Figure 16.22 illustrates the Get Load Segment Information selection; the characters shown in boldface are the ones you type in.\par \par }\pard \qj\fi360\widctlpar\tx3960\adjustright {\f6\fs18 Key in UserID of Load Segment \tab - 5002\par Key in File Number of Load Segment\tab - 1\par Key in Segment Number of Load Segment - 1\par ------------------------\par }\pard \qj\fi360\widctlpar\tx2420\adjustright {\f6\fs18 UserID\tab = $5002\par Memory Handle\tab = $E118A4 (020000)\par Load File Number\tab = $0001\par Load Segment Number\tab = $0001\par Load Segment Kind\tab = $0000\par }\pard \qj\fi360\widctlpar\tx3960\adjustright {\f6\fs18 ------------------------\par \par Press RETURN to continue\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 Key in UserID of Load Segment -\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.22: Load segment information output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Before using this selection to get information about static segments, you must know the user ID and file number of the program in which you are interested.  This information is available from selection 2, Dump Pathname Table.\par Press Return to be prompted for the next load segment.  Press Esc to return to the Loader Dumper main menu.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Get User ID Information}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Get User ID Information\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The Get userID information selection lets you display all the load segments in an application.  Figure 16.23 illustrates the Get UserID Information selection; the characters shown in boldface are the ones you type in.\par Before using this selection to get information about load segments, you must know the user ID and file number of the program in which you are interested.  This information is available from selection 2, Dump Path Name Table.\par \par }\pard \qj\fi180\widctlpar\adjustright {\f6\fs18 Key in UserID - 1005\par ------------------------------------------------------------------------\par /GSBUG/DEBUG\par File Num = $0001  Segment Num = $0001  Kind = $0001 Address = $010800-01A41F\par ------------------------------------------------------------------------\par Key in UserID - \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.23: Get User ID Information Output\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The File Num field displays the number of the initial load file.  Other files numbers are usually run time libraries associated with the initial load file.\par The Segment Num field shows the segment number in the file that is being displayed.\par The Kind field displays the Kind attribute in the segment header.\par The Address field shows the actual range of memory where the segment is loaded.\par An application may display more than one file and more than one segment if a more complex library is loaded as shown in Figure 16.24.\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 Key in UserID - 1001\par ------------------------------------------------------------------------\par /HD/TDIR/PROG\par File Num = $0001  Segment Num = $0001  Kind = $0000  Address = $012C1C-012C84\par File Num = $0001  Segment Num = $0002  Kind = $0002  Address = $012C85-012CC8\par File Num = $0001  Segment Num = $0003  Kind = $0004  Address = $012CC9-012CF4\par \par /HD/TDIR/RUNLIB1\par File Num = $0002  Segment Num = $0002  Kind = $8000  Address = $012CF5-012D39\par File Num = $0002  Segment Num = $0003  Kind = $8000  Address = $012D3A-012D7E\par \par /HD/TDIR/RUNLIB2\par \par File Num = $0003  Segment Num = $0002  Kind = $8000  Address = $012D7F-012DC3\par File Num = $0003  Segment Num = $0003  Kind = $8000  Address = $012DC4-012E08\par ------------------------------------------------------------------------\par \par Key in UserID - 1001\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4\fs20 Figure 16.24: Multiple Segments in Get userID Information Output \par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk9}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Loader Dumper}{\rxe bk9}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Assembler Reference Manual\par }}{\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 17: Running the Assembler\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qj\widctlpar\adjustright \f12\cgrid {\par }\pard \qc\widctlpar\adjustright {\b\f4\fs36 Chapter 17\par Running the Assembler\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 17 \endash  Running the Assembler\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par In this chapter, we will cover the assembly process.  This material is the groundwork for the remaining chapters in the Assembler Reference Manual.  Topics covered are:\par \par }\pard \qj\fi360\li450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab Invoking the assembler.\par \par \bullet \tab The assembly process.\par \par \bullet \tab Reading the assembly listing.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Introduction}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Introduction\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source files}}}{\v\f4\fs20 \par }{\f4\fs20 \par The assembler is the heart of the ORCA/M assembly language development system.  It is invoked from the shell by using any of the assemble or compile commands.  It then assembles the source file named in the parameter list of the assemble command. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\v\f4\fs20 \par }{\f4\fs20 The assembly is not limited to the first source file.  For large programs, that file is simply the first of many source files.  The file in memory chains to or includes other source files using APPEND and COPY assembler directives.  The needed source files are brought into memory automatically.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:assembly language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\v\f4\fs20 \par }{\f4\fs20 If macros are used, one or more macro files will be needed by the assembler.  The MCOPY and MLOAD directives are used to tell the assembler which macro files to use.  When an operation code is encountered in a source file which does not match any instruction or assembler directive, the macro files are scanned for a macro definition.  The macro, if found, is then expanded into the source stream and assembled into an output file.  Both the source file itself and macro file remain unchanged.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Shell Commands That Assemble A Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Shell Commands That Assemble A Program\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\v\f4\fs20 \par }{\f4\fs20 \par There are several commands that accomplish program assembly.  Depending on your application, there are commands that: assemble a program; assemble, then link your program; assemble, then link, then execute your program.  These commands are summarized below.  \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\v\f4\fs20 \par }\pard \qj\fi360\li2070\widctlpar\tx1890\adjustright {\f4\fs20 \par }\pard \qj\fi-1620\li2070\widctlpar\tx1890\adjustright {\f4\fs20 ASSEMBLE\tab Assemble a program.\par \par ASML\tab Assemble and link a program.\par \par ASMLG\tab Assemble, link, and execute a program.\par }{\pard\plain \qj\fi-1620\li2070\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPILE command}}}{\pard\plain \qj\fi-1620\li2070\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command}}}{\pard\plain \qj\fi-1620\li2070\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\pard\plain \qj\fi-1620\li2070\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }{\f4\fs20 \par COMPILE\tab Compile a program; same as ASSEMBLE.\par \par CMPL\tab Compile and link a program; same as ASML.\par \par CMPLG\tab Compile, link, and execute a program; same as ASMLG.\par \par }\pard \qj\widctlpar\adjustright {\f4\fs20         RUN\tab        Assemble (compile), link, and execute a program.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language stamp}}}{\v\f4\fs20 \par }{\f4\fs20 \par In the ORCA environment, issuing an assemble or compile command produces the same result:  the shell interrogates the language stamp of the source file, and then invokes the language translator defined for the source file's stamp.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Assembler Command Options}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Assembler Command Options\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }{\f4\fs20 \par The assemble commands have several command line parameters that can modify the results of an assembly.  These parameters allow:  the handling of errors during assembly, the display or listing of assembly results, specifying the output file name from the command line, and specification of the segments you want to assemble during a partial assembly.  Default values for the parameters are underlined.  The parameters which handle errors are described in Chapter 12.\par The parameters L, S, and KEEP have corresponding assembler directives.  If both a command line parameter and a directive are used, the command line parameter setting is used.  \par The formats for the commands showing what parameters are available are listed below.  Detailed descriptions of the parameters follow.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\v\f4\fs20 \par }\pard \fi360\li1890\widctlpar\tx1890\adjustright {\f4\fs20 \par }\pard \fi-1440\li1890\widctlpar\tx1890\adjustright {\f4\fs20 ASSEMBLE \tab }{\f6\fs20 [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ]}{\f4\fs20  }{\i\f4\fs20 sourcefile 1 sourcefile2 ...}{\f4\fs20  \par \tab [KEEP=}{\i\f4\fs20 outfile}{\f4\fs20 ] [NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20 [ }{\i\f4\fs20 seg2}{\f4\fs20 [ ...]])]\par \par ASML\tab }{\f6\fs20 [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ]}{\f4\fs20  }{\i\f4\fs20 sourcefile 1 sourcefile2 ...}{\f4\fs20  \par \tab [KEEP=}{\i\f4\fs20 outfile}{\f4\fs20 ] [NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20 [ }{\i\f4\fs20 seg2}{\f4\fs20 [ ...]])]\par \par ASMLG\tab }{\f6\fs20 [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ]}{\f4\fs20  }{\i\f4\fs20 sourcefile 1 sourcefile2 ...}{\f4\fs20  \par \tab [KEEP=}{\i\f4\fs20 outfile}{\f4\fs20 ]  [NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20 [ }{\i\f4\fs20 seg2}{\f4\fs20 [ ...]])]\par }{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPILE command}}}{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPL command}}}{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\pard\plain \fi-1440\li1890\widctlpar\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\v\f4\fs20 \par }{\f4\fs20 \par COMPILE \tab }{\f6\fs20 [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ]}{\f4\fs20  }{\i\f4\fs20 sourcefile 1 sourcefile2 ...}{\f4\fs20  \par \tab [KEEP=}{\i\f4\fs20 outfile}{\f4\fs20 ]  [NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20 [ }{\i\f4\fs20 seg2}{\f4\fs20 [ ...]])]\par \tab \par CMPL\tab }{\f6\fs20 [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ]}{\f4\fs20  }{\i\f4\fs20 sourcefile 1 sourcefile2 ...}{\f4\fs20  \par \tab [KEEP=}{\i\f4\fs20 outfile}{\f4\fs20 ]  [NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20 [ }{\i\f4\fs20 seg2}{\f4\fs20 [ ...]])]\par \tab \par CMPLG\tab }{\f6\fs20 [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f4\fs20 sourcefile 1 sourcefile2 ...}{\f4\fs20  \par \tab [KEEP=}{\i\f4\fs20 outfile}{\f4\fs20 ]  [NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20 [ }{\i\f4\fs20 seg2}{\f4\fs20 [ ...]])]\par \par  RUN\tab }{\f6\fs20 [+D|-D] [+E|-E] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f4\fs20 sourcefile 1 sourcefile2 ...}{\f4\fs20  \par \tab [KEEP=}{\i\f4\fs20 outfile}{\f4\fs20 ]  [NAMES=(}{\i\f4\fs20 seg1}{\f4\fs20 [ }{\i\f4\fs20 seg2}{\f4\fs20 [ ...]])]\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \tab \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 +D|-D\tab The +D and -D flags are used to turn generation of debug code on and off.  The assembler does not generate debug code, and ignores this flag.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 errors}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\v\f4\fs20 \par }{\f4\fs20 +E|-E\tab When a terminal error is encountered during an assembly from the command line, the system will normally stop execution, enter the editor, place the cursor over the offending line, and display the error message.  In assemblies from an EXEC file, the system will simply stop execution when an error is encountered, writing the error message to error out.  Using +E tells the assembler to enter the editor when a terminal error is found, while using -E tells the assembler not to enter the editor when an error is found.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 link map}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\v\f4\fs20 \par }{\f4\fs20 +L|}{\f4\fs20\ul -L}{\f4\fs20 \tab If you specify +L, the assembler generates a source listing, and if you are using LINK, a link map of the segments in the object file (including the starting address, the length in hexadecimal of each segment, and the segment type).  If you specify -L, the assembler does not produce a listing, and the linker does not produce a link map.  The L parameter overrides the LIST directive in the source file.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par +M|-}{\f4\fs20\ul M}{\f4\fs20 \tab +M causes any object modules produced by the assembler to be written to memory, rather than to disk.  Do not use the +M flag if you will be performing partial assemblies or using separate compilation to build your final program.`\par }{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:linker}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 progress information}}}{\v\f4\fs20 \par }{\f4\fs20\ul +P}{\f4\fs20 |-P\tab The assembler normally writes progress information as the assembly progresses, writing the name of the various source segments as they are assembled.  The linker also writes progress information, printing a dot as each segment is processed during pass one and pass 2 of the link.  The -P flag suppresses all progress information.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 +S|}{\f4\fs20\ul -S}{\f4\fs20 \tab If you specify +S, the assembler produces an alphabetical listing of all local symbols following each END directive.  The linker, if it has been called, produces an alphabetical listing of all global references in the object module, called a symbol table.  If you specify -S, these symbol tables are not produced.  The S parameter in this command overrides the SYMBOL directive in the source file.\par \par }{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 errors}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 terminal errors}}}{\v\f4\fs20 \par }{\f4\fs20 +T|}{\f4\fs20\ul -T}{\f4\fs20 \tab The +T flag tells the assembler to treat all errors as terminal errors, stopping the assembly as soon as the first error is encountered.  The +T flag is most often used in conjunction with the +E flag, causing the assembler to start the editor, displaying the location and error message as soon as any error is found.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wait flag}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 errors}}}{\v\f4\fs20 \par }{\f4\fs20 +W|}{\f4\fs20\ul -W}{\f4\fs20 \tab When the +W flag is used, the assembler will stop and wait for a keypress after printing an error message.  By default, the assembler does not stop after flagging an error.\par \par }\pard \qj\fi-990\li1440\widctlpar\tx2520\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\i\f4\fs20 \par sourcefile1 sourcefile2  }{\f4\fs20 The full or partial path names (including the file name) of the source files.  Note that more than one source file can be included, and that object files and library files can also be mixed with the source files.  The object files produced by assembling each source file, along with any object or library files, are passed on to the linker, if no errors occurred during the assemblies.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 \par Keep=}{\i\f4\fs20 outfile}{\f4\fs20 \tab Use this parameter to specify the path name or partial path name, including the file name, of the output file, or the executable load file, if you are using LINK.  If you are assembling a one-segment program, the output module is named }{\i\f4\fs20 outfile}{\f4\fs20 .ROOT.  If the program contains more than one segment, the first segment is placed in }{\i\f4\fs20 outfile}{\f4\fs20 .ROOT and the other segments in }{\i\f4\fs20 outfile}{\f4\fs20 .A.  If you are performing a partial assembly, you will see other file name extensions, described later in this manual.\par }\pard \qj\fi360\li1440\widctlpar\tx1800\adjustright {\f4\fs20 This parameter has the same effect as placing a KEEP directive in your source file.  If you have a KEEP directive in the source file and you also use the KEEP parameter, the KEEP directive takes precedence.  In this case, two object modules are produced with the extension .ROOT; one corresponding to the parameter and one corresponding to the directive.  However, the path name in the KEEP directive takes precedence; other files with .A or other extensions are created only with the file name used in the directive, and the linker uses only the path name given in the KEEP directive.\par You should remember the following points in regard to the KEEP parameter:\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li1710\widctlpar\tx1710\adjustright {\f4\fs20 \par \bullet \tab If you use neither the KEEP parameter nor the KEEP directive, then the shell can add a keep name automatically.  This automatic naming is due to the shell variable \{KeepName\}.  If you specify a name in the \{KeepName\} shell variable before an assembly is attempted, and you don't explicitly name the output file by the KEEP directive or KEEP command line parameter, then the keep name will be the path of the source file name, with the keep name appended.  A $ character in the keep name will expand to the source file name, with the last extension removed.  A % character expands to the source file name.  It is recommended that you specify the keep name explicitly in the KEEP directive or KEEP parameter.  If you have not specified the KeepName variable (a null string) nor explicitly named the output file, then the output generated from the file is not kept.  The examples below show the keep names that would be used with several KeepName settings, assuming the source file is called MY.FILE.A.\par }{\pard\plain \qj\fi-270\li1710\widctlpar\tx1710\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:metacharacters}}}{\v\f4\fs20 \par }\pard \qj\li2070\keepn\widctlpar\tx4140\adjustright {\f4\fs20\ul \par \{KeepName\}}{\f4\fs20 \tab }{\f4\fs20\ul object file name\par }{\f4\fs20 \par }\pard \qj\li2070\keepn\widctlpar\tx4320\adjustright {\f4\fs20 $.O\tab MYFILE.O\par %\tab MYFILE.A\par }\pard \qj\li2070\widctlpar\tx4320\adjustright {\f4\fs20 OUT.O\tab OUT.O\par }\pard \qj\li2070\widctlpar\tx4140\adjustright {\f4\fs20 \par }\pard \qj\fi-270\li1710\widctlpar\tx1710\adjustright {\pard\plain \qj\fi-270\li1710\widctlpar\tx1710\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file names}}}{\v\f4\fs20 \par }{\f4\fs20 \par \bullet \tab The file name you specify as }{\i\f4\fs20 outfile}{\f4\fs20  must not be over 10 characters long. This is because the extension .ROOT is appended to the name, and GS/OS does not allow file names of over 15 characters.\par }{\pard\plain \qj\fi-270\li1710\widctlpar\tx1710\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\pard\plain \qj\fi-270\li1710\widctlpar\tx1710\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\fi-270\li1710\widctlpar\tx1710\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 \par \bullet \tab If you do not use the keep parameter, the keep directive, or the \{KeepName\} variable, no output file is produced.\par }{\pard\plain \qj\fi-270\li1710\widctlpar\tx1710\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx2700\adjustright {\f4\fs20 \par NAMES=(}{\i\f4\fs20 seg1 seg2 ...}{\f4\fs20 )\tab This parameter causes the assembler to perform a partial assembly.  The names }{\i\f4\fs20 seg1}{\f4\fs20 , }{\i\f4\fs20 seg2}{\f4\fs20 , ... specify the source file segments to be assembled, rather than the entire file.   Separate the names with spaces.  The ORCA linker automatically selects the latest version of each segment when the program is linked.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\v\f4\fs20 \par }\pard \qj\fi360\li1440\widctlpar\adjustright {\f4\fs20 You assign names to object segments with PRIVATE, PRIVDATA, START, and DATA directives.  The object file created when you use the NAMES parameter contains only the specified object segments.  When you link a program, the linker scans all the files whose file names are identical except for their extensions, and takes the latest version of each segment.  Therefore, you must use the same output file name for every partial assembly of a program.  No blanks are permitted immediately before or after the equal sign in this parameter.\par }\pard \qj\fi-990\li990\widctlpar\tx2610\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li990\keepn\widctlpar\tx2610\adjustright {\b\f4\fs28 Assembler Directives Global In Scope}{\pard\plain \qj\fi-990\li990\keepn\widctlpar\tx2610\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Assembler Directives Global In Scope\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi350\keepn\widctlpar\adjustright {\pard\plain \qj\fi350\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler directives}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi350\widctlpar\adjustright {\f4\fs20 In a partial assembly, certain directives are assembled whether or not they appear in a segment that is being assembled.  This is because these directives can have side effects that outlast the segment they appear in.  These directives are: \par \par }\pard \qj\keepn\widctlpar\tx450\tx2160\adjustright {\f4\fs20 \tab ABSADDR\tab Generate absolute addresses}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ABSADDR directive}}}{\f4\fs20 \par \tab APPEND\tab Append a source file}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ABSADDR directive}}}{\f4\fs20 \par \tab CASE\tab Specify case-sensitive}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CASE directive}}}{\f4\fs20 \par \tab CODECHK\tab Disable code bank checks}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CODECHK directive}}}{\f4\fs20 \par \tab COPY\tab Copy a source file}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\f4\fs20 \par \tab DATACHK\tab Disable data bank checks}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATACHK directive}}}{\f4\fs20 \par \tab DIRECT\tab Set a fixed direct-page value}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DIRECT directive}}}{\f4\fs20 \par \tab ERR\tab Print errors}{\pard\plain \qj\keepn\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ERR directive}}}{\f4\fs20 \par }\pard \qj\widctlpar\tx450\tx2160\adjustright {\f4\fs20 \tab EXPAND\tab Expand DC Statements}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPAND directive}}}{\f4\fs20 \par \tab GEN\tab Generate macro expansions}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive}}}{\f4\fs20 \par \tab GEQU\tab Define global constant}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\f4\fs20 \par \tab IEEE\tab Enable IEEE format numbers}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IEEE directive}}}{\f4\fs20 \par \tab INSTIME\tab Generate instruction times}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INSTIME directive}}}{\f4\fs20 \par \tab KEEP\tab Keep output file}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\f4\fs20 \par \tab LIST\tab List output}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\f4\fs20 \par \tab LONGA\tab Select accumulator size}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGA directive}}}{\f4\fs20 \par \tab LONGI\tab Select index register size}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGI directive}}}{\f4\fs20 \par \tab MCOPY\tab Copy macro file to macro buffer}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\f4\fs20 \par \tab MDROP\tab Drop macro file from macro buffer}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MDROP directive}}}{\f4\fs20 \par \tab MEM\tab Reserve memory}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEM directive}}}{\f4\fs20 \par \tab MERR\tab Set maximum error level}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MERR directive}}}{\f4\fs20 \par \tab MLOAD\tab Load macro file into macro buffer}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive}}}{\f4\fs20 \par \tab MSB\tab Set most significant bit}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MSB directive}}}{\f4\fs20 \par \tab NUMSEX\tab Define byte order for floating-point numbers}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NUMSEX directive}}}{\f4\fs20 \par \tab OBJCASE\tab Specify case sensitive in object files}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OBJCASE directive}}}{\f4\fs20 \par \tab PRINTER\tab Send output to the printer}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive}}}{\f4\fs20 \par \tab RENAME\tab Rename op code}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME directive}}}{\f4\fs20 \par \tab SETCOM\tab Set comment column}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETCOM directive}}}{\f4\fs20 \par \tab SYMBOL\tab Print symbol tables}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive}}}{\f4\fs20 \par \tab TITLE\tab Print heading at top of each page of assembly listing}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TITLE directive}}}{\f4\fs20 \par \tab TRACE\tab Trace macros}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\f4\fs20 \par \tab 65816\tab Enable 65816 op codes}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:directive}}}{\f4\fs20 \par \tab 65C02\tab Enable 65C02 op codes}{\pard\plain \qj\widctlpar\tx450\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:directive}}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par The operands of these directives cannot contain labels unless they appear inside a program segment, and the segment that they appear in is assembled.  If these rules are not followed, an invalid operand error will result.  The directives themselves are described in chapters 19 and 20. \par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 The Assembly Process}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Assembly Process\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }{\b\f4 Pass One}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Pass One\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par The source file is assembled one subroutine (program segment) at a time. Each subroutine goes through two passes.  The first pass resolves local labels.  When pass one encounters an END directive, it passes control to pass two.  Lines which appear outside of program segments do not contain labels, so they can be completely resolved in pass one. \par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Pass Two}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Pass Two\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 external labels}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par When pass two is called, it starts at the beginning of the program segment, as defined by the START, PRIVATE, PRIVDATA, or DATA directive.  Pass two then assembles each line for the last time.  Pass one has already resolved any local labels, so pass two can produce both the object code output and the assembly listing.  External labels are resolved as $8000, possibly with some offset value.  External direct-page labels, indicated in the source listing by a < character before the expression, are resolved to $80. \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\v\f4\fs20 \par }{\f4\fs20 When pass two finishes with a subroutine, it prints the local symbol table if +S has been coded on the command line, or SYMBOL ON appeared in the source file.  It then passes control back to pass one to begin the next subroutine.  If there are no more subroutines to assemble, control is returned to the shell.  Depending on the "assemble" command given, the shell passes control to either the command processor or link editor.  If the link editor is called, it uses the object modules created by the assembler as input.  These are relocated and global labels are resolved, giving an executable relocatable file as output. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Stopping the Listing}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Stopping the Listing\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ABORT command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par At any time during pass two, the assembly may be stopped by pressing any keyboard character.  Note that the assembly will stop only if a line or symbol table is being printed, and not for the pass headings (which list the subroutine name).   \par To restart the listing, any key but (}{\outl\f4\fs18 \u-3\'f0}{\f4\fs18 .)}{\f4\fs20  may be pressed.  The listing will continue until another key is pressed to stop it again.  If the listing has been stopped, and }{\outl\f4\fs18 \u-3\'f0}{\f4\fs18 .}{\f4\fs20  is pressed, the text editor is entered.  The line that would have been printed next will be at the top of the edit page, with the cursor at the beginning of that line.  }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 . can also be used to directly abort the assembly, without first stopping the listing.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wait flag}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 The assembler can stop automatically when it finds an error.  To do this, use the +W (wait) flag.  Restarting is accomplished by pressing any key.  Once again, }{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 . will abort to the editor, where the error can be fixed at once.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Terminal Errors}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Terminal Errors\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 terminal errors\:assembler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\v\f4\fs20 \par }{\f4\fs20 \par If the assembler encounters a terminal error (such as a symbol table overflow), it returns control to the shell.  The shell then calls the text editor automatically, and places the line that caused the error at the top of the text edit window. This allows identification of the offending line, even if pass two had not started and no listing had been produced yet.\par See the description of the ASML command in Chapter 12 for flags that let you make all errors terminal or prevent entry into the editor after a terminal error. \par A list of terminal errors is contained in Appendix A. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Assembly Listing}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Assembly Listing\tcl2}}}{\b\f4\fs28 \par }{\f4\fs20 \par }{\b\f4 Screen Listings}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Screen Listings\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A listing to standard output is produced during pass two if the assembler is instructed to list the output.  If no listing is produced, each subroutine begins with two messages announcing the subroutine name and pass.  These messages are not printed if the -P flag has been used to suppress progress information.  If a listing is produced, the source code, along with some diagnostic information, is displayed.  A sample listing for the "Hello world!" program given in Chapter 1 is shown in Figure 15.1. \par Each output line has four parts.  The first part is a line number.  This is a four-digit decimal number, starting at 0001 on the first line and incrementing for each source line.  The line number is incremented even if the output line is not listed.  Thus, even if listing is turned off for part of the assembly, it is still possible to know exactly how many lines the assembler has processed.  Lines generated by a macro are not considered source lines, so they do not have a line number. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\v\f4\fs20 \par }{\f4\fs20 Next is the current relative address.  This is the memory location that the code would be at if the subroutine were placed at location $0000 by the link editor.  (Despite this offset, labels defined relative to the program counter within the range zero to $FF are not direct page; the origin of $0000 is simply for convenience in calculation.)  Then comes a sequence of up to four bytes, printed in hexadecimal.  This is the code that was generated by the assembler.  Finally, the source statement that generated the code is printed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\v\f4\fs20 \par }{\f4\fs20 The three lines at the very bottom of the listing give overall information about your program.  In this case our program is 9 lines long, as indicated.  We used three macros, (PUTS calls other macros), which is also noted.  When the assembler expanded the macros, 28 additional lines were processed by the assembler.  Because of the addition of 28 extra lines, the assembly for this program is a little slower than if only 9 lines were assembled.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 If an error is detected in the source statement, an error message is printed on the next line.  All error messages are text messages, not simply error numbers. The errors are explained in Appendix A.  Several directives are provided which can modify the source listing.  See Chapter 19 for details.\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 ORCA/M Asm65816 2.0\par  \par 0001 0000                       keep  Hello \par 0002 0000                       mcopy Hello.Macros \par 0003 0000              Main     start \par 0004 0000 4B                    phk \par 0005 0001 AB                    plb \par 0006 0002                       puts  #'Hello, world.',cr=t \par 0007 001F A9 00 00              lda   #0 \par 0008 0022 6B                    rtl \par 0009 0023                       end \par  \par 9 source lines\par 3 macros expanded\par 28 lines generated\par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs18 \par }\pard \qc\keepn\widctlpar\adjustright {\f4\fs20 Figure 15.1 An Assembly Listing Example\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Printer Listings}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Printer Listings\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\v\f4\fs20 \par }{\f4\fs20 \par If the PRINTER ON directive is issued in a source file, subsequent lines are sent to the printer.  The assembler expects the printer to be on-line, and to be set up according to the instructions in Chapter 2.  The listing can also be sent to the printer from the command line by using redirection:\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\v\f4\fs20 .PRINTER;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\: .PRINTER}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembling a program\bxe }{\rxe bk0}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\fi450\widctlpar\adjustright {\b\f6\fs18 #ASML +L MYPROG > .PRINTER\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Printed listings are generally the same as listings to the screen.  The assembler assumes sixty-six lines per page, and prints on sixty of those lines.  Six lines are skipped after each block of sixty lines to allow for page breaks.  After printing the symbol tables for a subroutine, the assembler skips to the top of the next page.  These defaults can be modified by changing the shell variables that control printer options.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 18: Coding Instructions\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 18\par Coding Instructions\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 18 \endash  Coding Instructions\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par \par \par This chapter covers ORCA assembly language program syntax.  Assembly language programs have strict formats; failure to adhere to the rules covered in this chapter can cause your program to fail to assemble.  The rules are few and easy to remember.  The topics covered in this chapter are:\par }{\f4\fs18 \par }{\f4\fs20 \bullet \tab Types of source statements.\par }{\f4\fs18 \par }{\f4\fs20 \bullet \tab Comment lines.\par }{\f4\fs18 \par }{\f4\fs20 \bullet \tab Instruction formats.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Types of Source Statements}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Types of Source Statements\tcl2}}}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 There are four types of lines in an assembly language source listing. The first is the comment line.  Its purpose is to allow text to be inserted in the source listing in order to document the program.  Two other line types are instructions and assembler directives.  They are coded in the same way, and are described together here.  The last is the macro call statement, detailed in Chapter 20. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line length\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 Assembler source file lines may be up to 255 columns long, numbered from 1 to 255.  Since most printers use eighty columns, assembler source lines should generally be restricted to fifty-seven columns, as twenty-three columns must be allowed for information printed by the assembler.  If this is not done, printed assembler output will wrap around to the next line.  Note that many printers allow compression of text, so that more than eighty columns can be printed on a single line.  If so, be sure and allow twenty-three columns for the assembler's output.\par }{\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Comment Lines}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Comment Lines\tcl3}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 comments\:assembly language}}}{\v\f4\fs18 \par }{\f4\fs18 \par }{\f4\fs20 There are five forms of lines which are regarded as comment lines by the assembler.  They are described by use. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Blank Line}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Blank Line\tcl4}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 Any blank line is treated as a comment line.  Blank lines are often used to logically separate sections of code. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Characters   *   ;   !}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Characters   *   ;   !\tcl4}}}{\b\f4  \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Any line with an asterisk (*), semicolon (;), or exclamation mark (!) in column one is treated as a comment.  Any text in the line is ignored. It will be printed when the source listing is generated by the assembler.  Note that symbolic parameters are expanded, whether or not they are in a comment.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 The Period}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Period\tcl4}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbols}}}{\v\f4\fs20 \par }{\f4\fs20 \par Any line with a period (.) in column one is treated as a comment.  These lines are not printed in the source listings produced by the assembler, unless the TRACE ON directive has been used. These lines are intended for use as labels for conditional assembly branches.  (See AIF and AGO in Chapter 20.)  If you decide to use a line starting with a period for a comment, be sure and skip one space before starting the rest of the line.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Instructions}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Instructions\tcl3}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par An assembly language statement, whether an instruction, directive or macro call, has four basic parts.  The only exception to this format is a line that contains only a comment, as discussed above.  These four fields are the label, operation code, operand, and comment. \par \par }\pard \qj\widctlpar\adjustright {\b\f4 The Label}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Label\tcl4}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:syntax\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par Each line may begin with a label, which is required for a few directives.  The label must begin in column 1, and cannot contain embedded blanks.  Each label starts with an alphabetic character, the tilde (~), or the underscore (_), and is followed by zero or more alphanumeric characters, tildes (~) or underscores (_).  Both tildes and underscores are significant.  Labels may be as long as 255 characters. All characters are significant.\par Note that labels starting with the tilde character are reserved for use in macros and libraries supplied by the Byte Works.  To avoid conflicts with the standard libraries, you should avoid use of the tilde.\par It is best not to use the single character A as a label, since it can cause confusion between absolute addressing using the label A and accumulator addressing. \par \par }\pard \qj\widctlpar\adjustright {\b\f4 The Operation Code}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Operation Code\tcl4}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par The operation code field is reserved for an assembly language instruction, assembly directive, or macro.  At least one space must be left between the label and the operation code.  If no label is coded, the operation code can begin in any column from two to forty.  Normally, the operation code begins in column ten.  The tab line has a tab stop in this column for convenient placement. \par Operation code mnemonics for machine-language instructions are always three- character alphabetic strings.  The assembler allows the following substitutions for the standard 65816 operation codes: \par \par }\pard \qj\fi450\keepn\widctlpar\tx1800\adjustright {\f4\fs20\ul Standard}{\f4\fs20 \tab }{\f4\fs20\ul Also Allowed\par }{\pard\plain \qj\fi450\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\pard\plain \qj\fi450\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BLT instruction}}}{\pard\plain \qj\fi450\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BGE instruction}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi450\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CPA instruction}}}{\v\f4\fs20 \par }{\f4\fs20 \par BCC\tab BLT\par BCS\tab BGE\par CMP\tab CPA\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Assembler directives vary in length from two to eight characters.  The operation codes for assembler directives are listed in Chapter 19 and Chapter 20.  Macro operation codes, which are a form of user-defined operation code, are described in Chapter 20. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Operand Field}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Operand Field\tcl4}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operands\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par The operand is the information that the instruction uses to perform its function.  There must be at least one space between the operation code and operand.  The operand normally starts in column sixteen; a tab stop is provided to allow easy movement to that location.  Formats for the operand field vary a great deal.  Refer to the descriptions of the individual operation codes for the format to be used in forming their operand fields.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Instruction Operand Format}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Instruction Operand Format\tcl4}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Assembly language instruction operands all consist of basically two parts: a number and a few characters that indicate the kind of addressing mode.  For example, 400 is a valid operand.  It is treated as an absolute address by the assembler.  With the addition of two characters one gets 400,X, which is a different addressing mode called absolute indexed.  However, the number is still the same. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 external labels}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addressing modes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 absolute addressing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long addressing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\v\f4\fs20 \par }{\f4\fs20 In ORCA, the number can take on many forms.  These forms are covered in detail in the next section, when expression syntax is covered.  For now, only one aspect of the expression is important, and that is whether that expression is a constant or whether it involves external references.  If all of the terms in an expression are constants, i.e, they are numbers or labels whose values are set by EQU directives or GEQU directives, and the EQU or GEQU directives have operands that are constant, then the assembler can determine the final value of the expression without the aid of the link editor.  In that case, the expression is a constant expression.  If any term in the expression is a label that must be relocated, the expression itself must also be relocated.  This distinction is important, since the assembler is able to automatically select between addressing modes that offer one-, two-, and three-byte variations only if the expression is a constant expression.  In the case of a relocatable expression, the assembler will always opt for the two-byte form of the address, unless it is explicitly overridden.  The length of addressing used can be forced by using a < before the expression to force direct page addressing, a | to force absolute addressing, and a > to force long addressing.  This is illustrated in the operand format table, below.  Note that long addressing is only available on the 65816.  Also note that a ! character can be used instead of | for backward compatibility with versions of ORCA running on computers that do not have the | on the keyboard.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 immediate addressing}}}{\v\f4\fs20 \par }{\f4\fs20 Operands for immediate addressing are resolved to two bytes; if you are using short registers then the operand will generate one byte.  It is necessary to be able to select which byte or bytes to use from an expression.  Three operators are provided to select the appropriate bytes from the value.  These operators must appear immediately after the # character, which indicates immediate addressing.  If no operator is used, the least significant byte (or bytes) is used.  This also happens if the < operator is used.  The > operator has the effect of dividing the expression value by 256, selecting the next most significant byte.  Finally, the ^ operator divides the expression by 65536, moving the bank byte into the least significant byte position.  For backward compatibility, the / character can be substituted for #>.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:cpu}}}{\v\f4\fs20 \par }{\f4\fs20 The following table shows all legal operands of both the 6502 and 65816.  The labels DP, ABS and LONG refer to constant expressions that resolve to one-, two- or three-byte values, respectively.  A relocatable expression may be used in place of DP, ABS, or LONG.  The Code Generated field assumes native mode (16-bit registers).  Assume that DP = $01, ABS = $0203, LONG = $040506.  Note that bytes generated are placed in memory in the format that the 65816 wants them:  low byte, then high byte. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addressing modes}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi720\keepn\widctlpar\tx3600\adjustright {\f4\fs18\ul Addressing Mode}{\f4\fs18 \tab }{\f4\fs18\ul Operand Format}{\f4\fs18 \tab \tab }{\f4\fs18\ul Operand Code Generated}{\f4\fs18 \par \par }\pard \qj\fi720\widctlpar\tx3600\adjustright {\f4\fs18 Implied\tab none needed\par \par Immediate\tab #DP\tab \tab \tab $01 00\par }{\pard\plain \qj\fi720\widctlpar\tx3600\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 immediate addressing}}}{\f4\fs18 \tab #ABS\tab \tab \tab $03 02\par  \tab #LONG\tab \tab \tab $06 05\par \tab #<DP\tab \tab \tab $01 00\par \tab #<ABS\tab \tab \tab $03 02\par \tab #<LONG\tab \tab $06 05\par \tab #>DP\tab \tab \tab $00 00\par \tab #>ABS\tab \tab \tab $02 00\tab \par \tab #>LONG\tab \tab $05 04\par \tab #^DP\tab \tab \tab $00 00\par \tab #^ABS\tab \tab \tab $00 00\par \tab #^LONG\tab \tab $04 00\par \tab /DP\tab \tab \tab $00 00\par \tab /ABS\tab \tab \tab $02 00\par \tab /LONG\tab \tab \tab $05 04\par \par Direct Page (Zero Page)\tab DP\tab \tab \tab $01\par }{\pard\plain \qj\fi720\widctlpar\tx3600\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 direct page}}}{\f4\fs18 \tab <ABS\tab \tab \tab $03\par \tab <LONG\tab \tab \tab $06\par \par Absolute\tab |DP\tab \tab \tab $01 00\par }{\pard\plain \qj\fi720\widctlpar\tx3600\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 absolute addressing}}}{\f4\fs18 \tab ABS\tab \tab \tab $03 02\par \tab |LONG\tab \tab \tab $06 05\par \par }\pard \qj\fi720\keepn\widctlpar\tx3600\adjustright {\f4\fs18 Absolute Long \tab >DP\tab \tab \tab $01 00 00\par }{\pard\plain \qj\fi720\keepn\widctlpar\tx3600\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 long addressing}}}{\f4\fs18 \tab >ABS\tab \tab \tab $03 02 00\par \tab LONG\tab \tab \tab $06 05 04\par }\pard \qj\fi720\widctlpar\tx3600\adjustright {\f4\fs18 \par }\pard \qj\fi720\keepn\widctlpar\tx3600\adjustright {\f4\fs18 Direct Page Indexed\tab DP,X\tab \tab \tab $01\par }{\pard\plain \qj\fi720\keepn\widctlpar\tx3600\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 indexed addressing}}}{\f4\fs18 \tab <ABS,X\tab \tab \tab $03\par \tab <LONG,X\tab \tab $06\par }\pard \qj\fi720\widctlpar\tx3600\adjustright {\f4\fs18 \par Absolute Indexed\tab |DP,X\tab \tab \tab $01 00\par \tab ABS,X\tab \tab \tab $03 02\par \tab |LONG,X\tab \tab $06 05\par \tab |DP,Y\tab \tab \tab $01 00\par \tab ABS,Y\tab \tab \tab $03 02\par \tab |LONG,Y\tab \tab $06 05\par \par Absolute Long Indexed\tab >DP,X\tab \tab \tab $01 00 00\par \tab >ABS,X\tab \tab \tab $03 02 00\par \tab LONG,X\tab \tab $06 05 04\par \par }\pard \qj\fi720\keep\keepn\widctlpar\tx3600\adjustright {\f4\fs18 Direct Page Indirect\tab (DP)\tab \tab \tab $01 \par \tab (<ABS)\tab \tab \tab $03\par }\pard \qj\fi720\widctlpar\tx3600\adjustright {\f4\fs18 \tab (<LONG)\tab \tab $06\par \par Direct Page Indirect Long\tab [DP]\tab \tab \tab $01\par \tab [<ABS]\tab \tab \tab $03\par \tab [<LONG]\tab \tab $06\par \par Direct Page Indirect Indexed\tab (DP),Y\tab \tab \tab $01\par \tab (<ABS),Y\tab \tab $03\par \tab (<LONG),Y\tab \tab $06\par \par Direct Page Indirect\tab [DP],Y\tab \tab \tab $01\par \tab [<ABS],Y\tab \tab $03\par \tab [<LONG],Y\tab \tab $06\par \par Direct Page Indexed\tab (DP,X)\tab \tab \tab $01\par \tab (<ABS,X)\tab \tab $03\par \tab (<LONG,X)\tab \tab $06\par \par Stack Relative\tab DP,S\tab \tab \tab $01\par }{\pard\plain \qj\fi720\widctlpar\tx3600\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 stack addressing}}}{\f4\fs18 \tab <ABS,S\tab \tab \tab $03\par \tab <LONG,S\tab \tab $06\par \par Stack Relative Indirect\tab (DP,S),Y\tab \tab $01\par \tab (<ABS,S),Y\tab \tab $03\par \tab (<LONG,S),Y\tab \tab $06\par \par Accumulator\tab A\par \par Block Move\tab DP,DP\par \tab ABS,ABS\par \tab LONG,LONG\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 Table 16.1  Legal Operands for the  65816\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Expressions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Expressions\tcl5}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembler\bxe }{\rxe bk1}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Whenever a number is allowed in an operand field, whether in a 65816 instruction or in a directive, an expression may be used.  In their most general form, expressions resolve to an integer in the range -2147483648 to 2147483647.  The result of a logical operation is always 0 or 1, corresponding to false and true.  If an arithmetic value is used in an assembler directive which expects a boolean result, 0 is treated as false, and any other value is treated as true. \par Syntactically, an expression is a simple expression, or two simple expressions separated by a logical comparison operator. \par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\f5\fs20 expression\par }{\f4\fs20 \par }\pard \qc\keep\keepn\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1060{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley62\piccropl0\piccropr0\piccropt0\piccropb0\picw420\pich96\picwgoal8400\pichgoal1920\macpict\bliptag229011988\blipupi72{\*\blipuid 0da67214dc529ae7443b57b56de6b8a6}036900070007006701ab1101a0008201000a00070007006701ab0a00000000000000000b001b001b44000a001c001d007748a100960006050000000298a1009a0008fffe000000260000a000980300150d00092b26161173696d706c652065787072657373696f6ea00099a0009744002e00880041009b4844002e00a3004100b64844002e00be004100d14844002e00d9004100ec4844002e00f4004101074844002e010f004101224844005201330065018e48a100960006050000000298a1009a0008fffe000000260000a0009828005e013d1173696d706c652065787072657373696f6ea00099a00097a000ab6100090013001d002700f600302200130014f600a000ada000aa610009019f001d01b300f600302000130076001301a0a000ada000ab61002400880038009cffe80030220026009100eda000ada000ab61002400a3003800b7ffe8003022002600ac00eda000ada000ab61002400be003800d2ffe8003022002600c700eda000ada000ab61002400d9003800edffe8003022002600e200eda000ada000ab61002400f400380108ffe8003022002600fd00eda000ada000ab610024010f00380123ffe80030220026011800eda000ad22005b018d0900a000aa610009018d001d01a1009c00302300c0a000ad2200400091001ba000aa610051012a0065013e00f6003021005b012ba000ada000aa61005100a3006500b7ffe8003022004000ac0013a000ada000aa61005100be006500d2ffe8003022004000c70013a000ada000aa61005100d9006500edffe8003022004000e20013a000ada000aa61005100f400650108ffe8003022004000fd0013a000ada000aa610051010f00650123ffe8003022004001180013a000ada100960006050000000298a1009a0008fffe000000060000a0009828003a0090013da00099a00097a100960006050000000298a1009a0008fffe000000070000a000982917023c3ea00099a00097a100960006050000000298a1009a0008fffe000000070000a000982b1c01023c3da00099a00097a100960006050000000298a1009a0008fffe000000070000a0009828003a00df023e3da00099a00097a100960006050000000298a1009a0008fffe000000060000a000982b1c01013ca00099a00097a100960006050000000298a1009a0008fffe000000060000a00098291b013ea00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 logical operators\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par A simple expression is the customary arithmetic expression.  Syntactically, this is expressed as an optional leading sign, a term, and, optionally, a +, -, .OR., or .EOR.  followed by another term. Thus, logical comparisons have the lowest priority. \par Some examples of valid expressions, using the above diagram:\par \par }\pard \qj\fi450\widctlpar\tx3870\adjustright {\f4\fs20\ul expression}{\f4\fs20 \tab }{\f4\fs20\ul result\par \par }\pard \qj\fi450\widctlpar\tx4050\adjustright {\f6\fs18 2<4\tab 1\par 2+1<>$FFF\tab 1\par LOOPCOUNT=LOOPCOUNT+1\tab 0\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par \par }\pard \qj\keepn\widctlpar\adjustright {\f5\fs20 simple expression\par \par }\pard \qc\widctlpar\adjustright {\f5\fs20 {\pict{\*\picprop\shplid1061{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley62\piccropl0\piccropr0\piccropt0\piccropb0\picw402\pich96\picwgoal8040\pichgoal1920\macpict\bliptag1926655653\blipupi72{\*\blipuid 72d66ea58526f5981012452081e649e1}033100070007006701991101a0008201000a00070007006701990a00000000000000000b001b001b44000a001c001d002f4854002e001c0041002f5844001c0049002f007748a000aa61001b0040002f005400f60030220025000a3700a000ad220013001cf700230024230900220013002e0900a000aa61001b002e002f0042ffe8003023000aa000ada000ab69009c003022002d0037000aa000ad220037002e09004400520088006500b64844003700c7004a00da4844003700eb004a00fe48440037010f004a014648440037014e004a018548a000aa61001b018d002f01a100f6003020002500760025018ea000ada000aa61002d016000410174ffe800302200250169000aa000ada000aa61002d012100410135ffe80030220025012a000aa000ada000ab61002d00eb004100ffffe8003022002f00f400f6a000ada000aa61002d00c7004100dbffe8003022002500d0000aa000ada000ab61005100ac006500c00042003020005b00bd005b0169a000ad22004901690012a000aa610051012100650135ffe80030220049012a000aa000ada000aa61005100eb006500ffffe8003022004900f4000aa000ada000aa61005100c7006500dbffe8003022004900d0000aa000ad22005b0088f700a000aa61001b0076002f008a009c00302300d2a000ada100960006050000000274a1009a0008fffe0000000c0000a000980300150d00092b532805207465726da00099a00097a100960006050000000274a1009a0008fffe0000000c0000a000982b3f3605207465726da00099a00097a100960006050000000274a1009a0008fffe0000000b0000a000982800430122042e4f522ea00099a00097a100960006050000000274a1009a0008fffe0000000e0000a00098293f052e454f522ea00099a00097a100960006050000000274a1009a0008fffe000000060000a000982800160023012ba00099a00097a100960006050000000274a1009a0008fffe000000060000a000982a24012da00099a00097a100960006050000000274a1009a0008fffe000000060000a000982bab09012ba00099a00097a100960006050000000274a1009a0008fffe000000060000a000982924012da00099a00097a00083ff}}{\f5\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Examples using the above diagram:\par \par }\pard \qj\fi450\widctlpar\tx2610\adjustright {\f4\fs20\ul expression}{\f4\fs20 \tab }{\f4\fs20\ul result\par }\pard \qj\widctlpar\adjustright {\f4\fs20\ul \par }\pard \qj\fi450\widctlpar\tx2700\adjustright {\f6\fs18 5+6\tab 11\par -3+2\tab -1\par 1.OR.0\tab 1\par 3/4+6*2\tab 12\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A term is a factor, optionally followed by one of the operators *, /, .AND., or | (the bit shift operator) and another term.  .AND. is a logical operator, asking if the terms on either side are true.  If both are true, so is the result, otherwise the result is false.  The vertical bar (or, optionally, !) is a bit shift operator.  The first operand is shifted the number of bits specified by the right operand, with positive shifts shifting left and negative shifts shifting right.  Thus, a|b is the same as a*(2^b).   It is important to note that logical operators perform word comparisons, rather than bit-wise operations. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bit shifting}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f5\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f5\fs20 term\par \par }\pard \qc\widctlpar\adjustright {\f5\fs20 {\pict{\*\picprop\shplid1062{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley61\piccropl0\piccropr0\piccropt0\piccropb0\picw334\pich78\picwgoal6680\pichgoal1560\macpict\bliptag-1566189684\blipupi72{\*\blipuid a2a5d78c8303b3161ae161ae97c2c71a}029200070007005501551101a0008201000a00070007005501550a00000000000000000b001b001b44000a001c001d00534844004000640053009b4844002500ac003800bf4844002500d0003800e34844002500f40038011948440025012a0038013d48a000ab6100090013001d002700f600302200130014f600a000ada000aa6100090149001d015d00f6003020001300520013014aa000ada000ab61001b012a002f013effe8003022001d013300f6a000ada000ab61001b00fd002f0111ffe8003022001d010600f6a000ada000ab61001b00d0002f00e4ffe8003022001d00d900f6a000ada000ab61001b00ac002f00c0ffe8003022001d00b500f6a000ad220049005b0900a000aa6100090052001d0066009c0030220049005b00d2a000ad22003701330012a000ab61003f0091005300a50042003020004900a200490133a000ada000aa61003f00ac005300c0ffe8003022003700b5000aa000ada000aa61003f00d0005300e4ffe8003022003700d9000aa000ada000aa61003f00fd00530111ffe800302200370106000aa000ada100960006050000000298a1009a0008fffe0000000e0000a000980300150d00092b291706666163746f72a00099a00097a100960006050000000298a1009a0008fffe0000000e0000a000982b4c3606666163746f72a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009828003200b3012aa00099a00097a100960006050000000298a1009a0008fffe000000060000a000982925012fa00099a00097a100960006050000000298a1009a0008fffe0000000e0000a000982921052e414e442ea00099a00097a100960006050000000298a1009a0008fffe000000060000a000982800310132017ca00099a00097a00083ff}}{\f5\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par \par }\pard \qj\fi450\keepn\widctlpar\tx2610\adjustright {\f4\fs20\ul expression}{\f4\fs20 \tab }{\f4\fs20\ul result\par }{\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\tx2790\adjustright {\f6\fs18 3\tab 3\par 3/4\tab 0\par 1+2*3\tab 7\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NOT operator}}}{\v\f4\fs20 \par }{\f4\fs20 A factor is a constant, label, or expression enclosed in parentheses, or a factor preceded by .NOT..  .NOT. is the boolean negation, producing true (1) if the following factor is false, and false (0) if it is true.  Here, a label refers to a named symbol which cannot be resolved at assembly time.  Constants are named symbols defined by a local EQU directive or global GEQU directive, or a decimal, binary, octal or hexadecimal number, or a character constant.  The * character indicates the current location counter.  It resolves to the address of the first byte of the instruction.\par \par }\pard \qj\keepn\widctlpar\adjustright {\f5\fs20 factor\par }{\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1063{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley64\piccropl0\piccropr0\piccropt0\piccropb0\picw222\pich168\picwgoal4440\pichgoal3360\macpict\bliptag288235067\blipupi72{\*\blipuid 112e1e3b816645c7e398ce03103e3d5d}033e0007000700af00e51101a0008201000a0007000700af00e50a00000000000000000b001b001b44000a002e001d00774844002e002e0041006548440052002e006500414844005200520065009b4844005200ac006500bf48440076002e0089006548440076007f008900b648a000ab6100090025001d003900f600302200130026e400a000ada000aa61000900d9001d00ed00f6003022001300766400a000ad200013001c00a2001ca000aa61007500250089003900f6003022007f001c0a00a000ada000aa61002d00250041003900f60030220037001c0a00a000ada000aa61005100250065003900f6003022005b001c0a00a000ada000aa61007500760089008a00f6003022007f00641300a000ada000aa61007500c7008900db00f6003022007f00b51300a000ada000aa61000900c7001d00db009c00302000a200d0001b00d0a000ada000aa61005100490065005d00f6003022005b00400a00a000ada000aa61005100a3006500b700f6003022005b009a0a00a000ada000aa61005100c7006500db00f6003022005b00be0a00a000ada000aa61002d00c7004100db00f6003022003700646400a000ada100960006050000000298a1009a0008fffe000000140000a000980300150d00092b391608636f6e7374616e74a00099a00097a100960006050000000298a1009a0008fffe0000000b0000a000982b0224056c6162656ca00099a00097a100960006050000000298a1009a0008fffe000000060000a0009828005e00360128a00099a00097a100960006050000000298a1009a0008fffe000000180000a00098292b0a65787072657373696f6ea00099a00097a100960006050000000298a1009a0008fffe000000060000a0009829530129a00099a00097a100960006050000000298a1009a0008fffe0000000e0000a00098280082003d052e4e4f542ea00099a00097a100960006050000000298a1009a0008fffe0000000e0000a00098295006666163746f72a00099a00097a000aa610098002500ac003900f600302200a2001c0a00a000ad440099002e00ad004248a100960006050000000298a1009a0008fffd000000080000a000980350d40d000c2800a50035012aa00099a000972000a2004100a200d0a00083ff}}{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Examples:\par \par }\pard \qj\fi450\widctlpar\tx3150\adjustright {\f4\fs20\ul expression}{\f4\fs20 \tab }{\f4\fs20\ul result\par \par }\pard \qj\fi450\widctlpar\tx3240\adjustright {\f6\fs18 6*7=42\tab 1\par .NOT.(4+6=10)\tab 0\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f5\fs20 constant\par \par }\pard \qc\widctlpar\adjustright {\f5\fs20 {\pict{\*\picprop\shplid1064{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex64\picscaley64\piccropl0\piccropr0\piccropt0\piccropb0\picw222\pich204\picwgoal4440\pichgoal4080\macpict\bliptag1857645251\blipupi72{\*\blipuid 6eb96ac3b8166a69b68d9c641ef74c0a}02e90007000700d300e51101a0008201000a0007000700d300e50a00000000000000000b001b001b44000a0040001d00ad4844002e0040004100ad484400520040006500ad484400760040008900ad4844009a004000ad00ad484400be004000d100ad48a000ab6100090037001d004b00f600302200130038d200a000ada000aa61000900d9001d00ed00f6003022001300ac2e00a000ad200013001c00c7001ca000aa6100bd003700d1004b00f60030231c00a000ada000ab61002d00370041004b00f600302200370038e400a000ada000ab61005100370065004b00f6003022005b0038e400a000ada000ab61007500370089004b00f6003022007f0038e400a000ada000ab610099003700ad004b00f600302200a30038e400a000ada000ab61000900c7001d00db009c003020001b00d000c700d0a000ad23dc00a000aa61002d00c7004100db00f6003022003700ac1c00a000ada000aa61005100c7006500db00f6003022005b00ac1c00a000ada000aa61007500c7008900db00f6003022007f00ac1c00a000ada000aa61009900c700ad00db00f600302200a300ac1c00a000ada100960006050000000298a1009a0008fffe000000220000a000980300150d00092b4a160e657175617465642073796d626f6ca00099a00097a100960006050000000298a1009a0008fffe0000001e0000a000982a240d62696e617279206e756d626572a00099a00097a100960006050000000298a1009a0008fffe0000001c0000a000982a240c6f6374616c206e756d626572a00099a00097a100960006050000000298a1009a0008fffe000000210000a0009828008200490e646563696d616c206e756d626572a00099a00097a100960006050000000298a1009a0008fffe0000002b0000a000982b01241268657861646563696d616c206e756d626572a00099a00097a100960006050000000298a1009a0008fffe000000280000a000982800ca00491263686172616374657220636f6e7374616e74a00099a00097a00083ff}}{\f5\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 binary constant}}}{\v\f4\fs20 \par }{\f5\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f5\fs20 binary number\par \par }\pard \qc\keepn\widctlpar\adjustright {\f5\fs20 {\pict{\*\picprop\shplid1065{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex64\picscaley60\piccropl0\piccropr0\piccropt0\piccropb0\picw186\pich69\picwgoal3720\pichgoal1380\macpict\bliptag1454436075\blipupi72{\*\blipuid 56b0eeebb2cb9f1ff7dd4ca748299d46}016400070007004c00c11101a0008201000a00070007004c00c10a00000000000000000b001b001b44000a002e001d0041484400250064003800774844002500880038009b48a000ab6100090025001d003900f600302200130026e400a000ada000aa61000900b5001d00c900f6003022001300407600a000ada000ab61001b0064002f0078ffe8003022001d006d00f6a000ada000ab61001b0088002f009cffe8003022001d009100f6a000ad2200370091001223c100a000aa6100090049001d005d009c00302300d2a000ada000aa61003f006400530078ffe80030220037006d000aa000ada100960006050000000298a1009a0008fffe000000060000a000980300150d00092b35160125a00099a00097a100960006050000000298a1009a0008fffe000000060000a000982b351b022030a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009829250131a00099a00097a00083ff}}{\f5\fs20 \par }\pard \qj\widctlpar\adjustright {\f5\fs20 \par }{\f4\fs20 Examples:\par \par }\pard \widctlpar\tx2160\adjustright {\f4\fs20\ul binary constant}{\f4\fs20 \tab }{\f4\fs20\ul decimal equivalent\par }\pard \widctlpar\tx3060\adjustright {\f4\fs20\ul \par }\pard \qj\fi450\widctlpar\tx2700\adjustright {\f6\fs18 %0\tab 0\par %1\tab 1\par %10\tab 2\par %10100101\tab 165\par }\pard \qj\fi450\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f5\fs20\cgrid {\xe {\v\f5\fs20 }{\v\f5\fs20 octal constant}}}{\v\f5\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f5\fs20 \par octal number\par \par }\pard \qc\widctlpar\adjustright {\f5\fs20 {\pict{\*\picprop\shplid1066{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex64\picscaley58\piccropl0\piccropr0\piccropt0\piccropb0\picw177\pich51\picwgoal3540\pichgoal1020\macpict\bliptag832042840\blipupi72{\*\blipuid 3197f758012b985673eeaba903f4fcbc}010f00070007003a00b81101a0008201000a00070007003a00b80a00000000000000000b001b001b44000a0025001d00384844002500520038008948a000aa610009001c001d003000f60030220013000a1300a000ada000aa61000900ac001d00c000f6003022001300377600a000ad220013009a001ba000ab610024007f003800930042003022002e00900a00a000ad22002e00490900a000aa6100090040001d0054009c003022002e004900eda000ada100960006050000000298a1009a0008fffe000000060000a000980300150d00092b2b160140a00099a00097a100960006050000000298a1009a0008fffe0000000e0000a000982b321b0820202020302e2e37a00099a00097a00083ff}}{\f5\fs20 \par }\pard \qj\widctlpar\adjustright {\f5\fs20 \par }{\f4\fs20 Examples:\par \par }\pard \widctlpar\tx2160\adjustright {\f4\fs20\ul octal constant}{\f4\fs20 \tab }{\f4\fs20\ul decimal equivalent\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx2790\adjustright {\f6\fs18 @6\tab 6\par @7\tab 7\par @10\tab 8\par }\pard \qj\widctlpar\adjustright {\f5\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f5\fs20\cgrid {\xe {\v\f5\fs20 }{\v\f5\fs20 decimal constant}}}{\v\f5\fs20 \par }{\f5\fs20 \par decimal number\par \par }\pard \qc\widctlpar\adjustright {\f5\fs20 {\pict{\*\picprop\shplid1067{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex63\picscaley55\piccropl0\piccropr0\piccropt0\piccropb0\picw132\pich33\picwgoal2640\pichgoal660\macpict\bliptag-582140702\blipupi72{\*\blipuid dd4d3ce29bcf158eec99db90926da866}00ba000700070028008b1101a0008201000a000700070028008b0a00000000000000000b001b001b44000a002e001d006548a000aa6100090025001d003900f60030220013000a1c00a000ada000aa610009007f001d009300f6003022001300641c00a000ad2200130076001223a600a000aa6100090013001d0027009c00302300f6a000ada100960006050000000298a1009a0008fffe0000000b0000a000980300150d00092b3f160520302e2e39a00099a00097a00083ff}}{\f5\fs20 \par }\pard \qj\widctlpar\adjustright {\f5\fs20 \par }{\f4\fs20 Examples:\par \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18 3\par 457\par }\pard \qj\widctlpar\adjustright {\f5\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f5\fs20\cgrid {\xe {\v\f5\fs20 }{\v\f5\fs20 hexadecimal constant}}}{\v\f5\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f5\fs20 \par hexadecimal number\par \par }\pard \qc\fi450\keepn\widctlpar\adjustright {\f5\fs20 {\pict{\*\picprop\shplid1068{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley61\piccropl0\piccropr0\piccropt0\piccropb0\picw296\pich89\picwgoal5920\pichgoal1780\macpict\bliptag-959942566\blipupi72{\*\blipuid c6c8705a1c31ec4989a011e161a5b701}0148000700070060012f1101a00082a000aa01000a000700070060012f22005b00920200a000ada000aa6100090123001d013700f60030200013000a00130124a000ada000aa6100080047001c005b009c003022005b005000bfa000ada000aa61005300b3006700c7ffe8003022001300bc0042a000ada000aa610053006b0067007fffe8003022001300740042a000ad22005b00506d000a00000000000000000b001b001b44002e0062004100874844002e00aa004100cf4854000a002c001d003f58a100960006050000000274a1009a0008fffe000000060000a000980300150d00092b32170124a00099a00097a100960006050000000274a1009a0008fffe0000000a0000a000982b3b2404302e2e39a00099a00097a100960006050000000274a1009a0008fffe0000000a0000a0009828003a00b404412e2e46a00099a00097a00083ff}}{\f5\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Examples:\par \par }\pard \widctlpar\tx2160\adjustright {\f4\fs20\ul hexadecimal constant}{\f4\fs20 \tab }{\f4\fs20\ul decimal equivalent\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx2520\adjustright {\f6\fs18 $9\tab 9\par $A\tab 10\par $B\tab 11\par $89ABCD\tab 9022413\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f5\fs20\cgrid {\xe {\v\f5\fs20 }{\v\f5\fs20 character constant}}}{\f5\fs20 character constant\par }{\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4\fs20 {\pict{\*\picprop\shplid1069{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex65\picscaley64\piccropl0\piccropr0\piccropt0\piccropb0\picw258\pich195\picwgoal5160\pichgoal3900\macpict\bliptag-570657145\blipupi72{\*\blipuid ddfc768730a67eb58656eab433875bbd}04740007000700ca01091101a0008201000a0007000700ca01090a00000000000000000b001b001b440013002e00260041484400130064003800ad48440049006d005c0080484400490091005c00a44844001300d0002600e34844007f002e009200414844007f006400a400ad484400b5006d00c80080484400b5009100c800a44844007f00d0009200e348a000ab61001200250026003900f6003022001c0026e400a000ada000aa610012005b0026006f00f6003022001c00401c00a000ada000aa61001200c7002600db00f6003022001c00ac1c00a000ada000aa61001200fd0026011100f6003022001c00e21c00a000ad22001c001c006ca000aa61007e00250092003900f60030230a00a000ada000aa61007e005b0092006f00f6003022008800401c00a000ad22001c00520036a000aa6100480064005c007800f60030231300a000ada000aa6100480088005c009c00f60030220052007f0a00a000ada000ab61001200ac002600c0009c003022002400b5002ea000ad22005200a3120022001c00be00ee238b00a000aa610012004000260054ffe8003023000aa000ada000aa61007e00c7009200db00f6003022008800ac1c00a000ad22008800e21200a000aa61001200eb002600ff009c003023009ca000ad22008800520036a000aa6100b4006400c8007800f60030231300a000ada000aa6100b4008800c8009c00f600302200be007f0a00a000ad2200be00a31200a000aa61007e00ac009200c0009c00302300d2a000ad22008800be00ee22007600497500a000aa61007e004000920054ffe800302200760049000aa000ada100960006050000000298a1009a0008fffe000000060000a000980300150d00092b351f0127a00099a00097a100960006050000000298a1009a00080009000000180000a00098293a096b6579626f6172640da00099a1009a0008fffe000000180000a000982a0b0a6368617261637465720da00099a1009a0008fff3000000180000a000982a0b0c6f74686572207468616e2027a00099a00097a100960006050000000298a1009a00080009000000190000a000982b0155096b6579626f6172640da00099a1009a0008fffe000000190000a000982a0b0a6368617261637465720da00099a1009a0008fff3000000190000a000982a0b0c6f74686572207468616e2022a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009828001f00d80127a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009828005500750127a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009829250127a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009828008b00360122a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009829a20122a00099a00097a100960006050000000298a1009a0008fffe000000060000a000982800c100750122a00099a00097a100960006050000000298a1009a0008fffe000000060000a0009829240122a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Examples:\par \par }\pard \widctlpar\tx4320\adjustright {\f4\fs20\ul character constant}{\f4\fs20 \tab }{\f4\fs20\ul decimal equivalent\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx4590\adjustright {\f6\fs18 'a'\tab 97\par "A"\tab 65\par 'This is a character constant'\tab 1416128883\par ' ' ' '\tab 39\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Comment Field}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Comment Field\tcl4}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 comments\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 In-line comments can start in any column past the first space after the operand field.  If an instruction does not accept an operand field, they can start in any column after the first space past the operation.  Comments generally start in column forty-one.  A tab stop is provided in that column for easy movement.  Comments do not need to be preceded by a semicolon character.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerr \pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 Chapter 20: Macro Language and COnditional Assembler Directives\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 19\par Assembler Directives\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 19 \endash  Assembler Directives\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par \par This chapter describes the assembler directives used in ORCA that are not designed for use in macros.  Macro directives and conditional assembly directives are covered in the next chapter.  Each directive has its proper syntax and use given.  For easy reference, the directives are listed in alphabetic order.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Introduction To Assembler Directives}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Introduction To Assembler Directives\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par An instruction is a line that tells the assembler how to build a machine language command for the microprocessor.  An assembler directive tells the assembler itself to take some action.  In some cases, this may involve reserving memory or setting up data tables for use by the program. Conditional assembly directives tell the assembler how to modify lines of source code, and what order to process them in.  Other directives define the beginning and end of subroutines, assign values to labels, and perform various housekeeping functions. \par Conditional assembly directives and macro language directives are covered in the next chapter. \par Except for the operand field, an assembler directive is coded in the same way as an instruction.  The operand field is used to tell the assembler directive what to do.  Since there are a variety of assembler directives, there are a variety of types of operands.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Descriptions of Directives}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Descriptions of Directives\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In the descriptions below, each directive has a model line showing the format for the directive.  Anything that appears in uppercase in the model must be typed exactly as shown.  Entries shown in lowercase represent variables.  These are described in the table below.  If there are two or more choices, these are shown separated by a vertical bar (|).  Optional entries are enclosed in square brackets.   An underscored operand gives the directive's default setting.  For example,\par \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab ABSADDR ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par indicates that the ABSADDR directive can take }{\f6\fs18 ON}{\f4\fs20  or }{\f6\fs18 OFF}{\f4\fs20  as an operand, with OFF its default setting.  An optional label can be coded.  Finally, a comment can appear after the operand.\par \par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {\f4\fs20\ul name}{\f4\fs20 \tab }{\f4\fs20\ul description}{\f4\fs20 \par \par }{\f6\fs20 comment}{\f4\fs20 \tab Zero or more characters intended to document the program.  Comments are not assembled by the assembler, but they are processed by the macro processor, which expands any symbolic parameters in the comment field.\par \par }{\f6\fs20 expression}{\f4\fs20 \tab An expression is a logical or mathematical expression that resolves to a number.  Both labels and constants can be used in the same expression.  For details, see Chapter 18.\par }{\pard\plain \qj\fi-1440\li2160\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:syntax}}}{\v\f4\fs20 \par }{\f6\fs20 \par lab}{\f4\fs20 \tab A label.  Labels start with an alphabetic character, underscore or tilde and are followed by zero or more alphanumeric characters, tildes and underscores.  All of the characters are significant.\par \par }{\f6\fs20 opcode}{\f4\fs20 \tab One of the operation codes recognized by the assembler, e.g. LDA, START.\par \par }{\f6\fs20 pathname}{\f4\fs20 \tab A full or partial path name.  For partial path names, the current prefix is used.\par }{\pard\plain \qj\fi-1440\li2160\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\v\f4\fs20 \par }{\f6\fs20 \par segname}{\f4\fs20 \tab The name of a  load segment, i.e. a name that has appeared as the operand of a START, PRIVATE, PRIVDATA, or DATA directive.\par \par }{\f6\fs20 special}{\f4\fs20 \tab An operand whose format cannot be described on a single line.  See the text for details.\par }{\pard\plain \qj\fi-1440\li2160\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f6\fs20 \par string}{\f4\fs20 \tab A sequence of ASCII characters.  If the string contains a space, it must be enclosed in either single or double quote marks.  Quote marks within quote marks must be doubled.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ABSADDR}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ABSADDR\tcl2}}}{\b\f4 \tab Show Absolute Addresses\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab ABSADDR ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORG directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ABSADDR directive\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This directive gives the assembler's best guess at where the final code will rest.  The guess shows up as a three-byte number to the left of the output normally printed by the assembler\endash all of the old output is moved seven columns to the right to make room.  If no other indication of a final location is available, the assembler assumes $00000.  An ORG can change the value.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ROM code}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\v\f4\fs20 \par }{\f4\fs20 The values shown will have no bearing on reality unless the program is executed under ProDOS 8 or is ORGed.  Keep in mind that ORGing a program severely handicaps the memory management scheme used on the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 .  Without a compelling reason to ORG your program (ROM code is the only one that comes to mind), using an ORG in an Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  program is a mistake.  For that reason the values this directive lists cannot be relied upon in most programs.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\v\f4\fs20 \par }{\f4\fs20 Finally, keep in mind that the listing must be from a full assembly, and that the link must be a simple link, not one where the code produced is used as a library.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ALIGN}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ALIGN\tcl2}}}{\b\f4 \tab Align to a Boundary\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALIGN directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 page boundary}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ROM code}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab ALIGN expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ALIGN directive has two distinct uses, depending on where in the program the directive occurs.  If it appears before a START, PRIVATE, DATA or PRIVDATA directive, it tells the link editor to align the segment to a byte boundary divisible by the absolute number in the operand of the ALIGN  directive.   This number must be a power of two.  For example, to align a segment to a page boundary, use the sequence\par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \tab \tab }{\f6\fs18 align\tab 256\par \tab Seg\tab start\par \tab \tab end\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Within a segment, ALIGN inserts enough zeros to force the next byte to fall at the indicated alignment.  This is done at assembly time, so the zeros show up in the program listing.  If align is used in a subroutine, it must also have been used before the segment, and the internal align must be to a boundary that is less than or equal to the external align. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ANOP}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ANOP\tcl2}}}{\b\f4 \tab Assembler No Operation\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab ANOP\tab \tab [comment]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ANOP directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ANOP directive does nothing.  It is used to define labels without an instruction.  The label assumes the current value of the program counter. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 APPEND}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 APPEND\tcl2}}}{\b\f4 \tab Append a Source File\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab APPEND pathname\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Processing is transferred to the beginning of the file }{\i\f4\fs20 pathname}{\f4\fs20 .  Any lines following the APPEND directive in the original file are ignored. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 CASE}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CASE\tcl2}}}{\b\f4 \tab Specify Case Sensitivity\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab CASE ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CASE directive\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:assembler}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The CASE directive allows you to make the assembler case sensitive.  If you specify CASE ON, subsequent label definitions and uses are case sensitive.  \par See also OBJCASE.\par \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 CODECHK}{\pard\plain \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CODECHK\tcl2}}}{\b\f4 \tab Disable Code Bank Checks\par }\pard \qj\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \keep\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab CODECHK  }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CODECHK directive\bxe }}}{\pard\plain \qj\fi360\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par Normally, the assembler tries to check for errors where an absolute addressing mode is used with a label that appears in another bank or load segment.  This directive lets you turn that error checking off.  The instructions affected are JMP and JSL.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 For example, if a JSR THERE is found, and THERE is in a different load segment from the JSR instruction, the assembler will flag an error \endash  it expects you to use a JSL instead of a JSR.  Coding CODECHK OFF before the JSR is encountered will suppress the error message.\par See also DATACHK. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 COPY}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COPY\tcl2}}}{\b\f4 \tab Copy a Source File\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab COPY  pathname\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Processing is transferred to the beginning of the file }{\i\f4\fs20 pathname}{\f4\fs20 .  After the entire file is processed, assembly continues with the first line after the COPY directive in the original file.  A copied file can copy another file; the depth is limited by the available memory, and is generally quite large.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 DATA}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DATA\tcl2}}}{\b\f4 \tab Define Data Segment\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab lab\tab DATA [segname]\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 USING directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The DATA directive is used instead of the START directive to define a special form of program segment which contains no instructions.  Its purpose is to set up data areas which several subroutines can access.  Its labels become local labels for any subroutine which issues a USING directive for the data segment.  The name of the data segment is the label  field of the DATA directive, and is global.  No more than 127 data  segments may be defined in any one program.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 duplicate label}}}{\v\f4\fs20 \par }{\f4\fs20 The }{\i\f4\fs20 segname }{\f4\fs20  in the operand field specifies the load segment.  See the section on run-time segmentation for details.\par Labels within data areas should not be duplicated in other data areas. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 DATACHK}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DATACHK\tcl2}}}{\b\f4 \tab Disable Data Bank Checks\par }{\f6\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab DATACHK  }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATACHK directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long addressing}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Normally, the assembler tries to check for errors where an absolute addressing mode is used with a label that appears in another load segment.  This directive disables that check for all instructions except JSR and JMP - that is, for all instructions that use the data bank register (the B register) for long addressing, rather than the code bank register (the K register).\par For example, if a LDA THERE is found, and THERE is in a different load segment from the LDA instruction, the assembler will flag an error - it expects you to override the addressing mode, as in LDA >THERE.  Coding DATACHK OFF before the LDA instruction suppresses the error message.\par See also CODECHK. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 DC}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DC\tcl2}}}{\b\f4 \tab Declare Constant\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab DC special\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 variables\:assembler}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The DC directive is used for every type of program constant definition.  The operand begins with an optional repeat count, which must be in the range 1 to 255 decimal.  The variable being defined will be placed in the object file as many times as specified by the repeat count.  Next comes an identifier describing the value type.  This is followed by the value itself, enclosed in quote marks.  The entire sequence can then be followed by a comma and another definition.  For example,\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab label\tab dc\tab 2i'2,3',i1'4'\par }{\f4\fs20 \par would place five integers into memory, four sixteen-bit and one eight-bit.  The resulting hexadecimal values would be\par \par }\pard \qc\widctlpar\adjustright {\f6\fs18 02 00 03 00 02 00 03 00 04\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par There are several options available for defining data.  These are listed separately below.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Integer}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Integer\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 integer data\bxe }}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab nI[x]'expression[,expression,...]'\par \tab nI1<'expression[,expression,...]'\par \tab nI1>'expression[,expression,...]'\par \tab nI1^'expression[,expression,...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:cpu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:cpu}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Integers can be defined in a variety of lengths, where the length is specified by replacing }{\i\f4\fs20 x}{\f4\fs20  with a digit from 1 to 8.  If omitted, two-byte integers are generated.  All integers are stored least significant byte first; this is the format used by the 65xx family of CPUs and the ORCA subroutine libraries.  Integers of length one to four bytes can be defined with expressions, including external references.  Longer integers can only be expressed as a signed decimal number. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 When one-byte integers are selected, an additional format option is available.  Right before the quote, the >, <, and ^ characters used to select bytes in the expression.  The symbols have the same use as described for the immediate addressing mode.  See the examples below for a sample that illustrates this idea.\par The table below gives the valid range of signed integers that can be expressed with each length of integer.  The ORCA subroutine libraries contain subroutines to perform math operations on 2-, 4- and 8-byte integers. \par     \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab Size      \tab     Smallest              Largest\par          \par \tab 1                     -128                   127\par \tab 2                   -32768                 32767\par \tab 3                 -8388608               8388607\par \tab 4              -2147483648            2147483647\par \tab 5            -549755813888          549755813887\par \tab 6         -140737488355328       140737488355327\par \tab 7       -36028797018963968     36028797018963907\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab 8     -9223372036854775808   9223372036854775807\par }{\f4\fs20 \par Here are some examples:\par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab \tab Code\tab \tab \tab \tab Value\par \par \tab \tab dc\tab i'4'\tab \tab \tab 04 00\par \tab \tab dc\tab 2i'3'\tab \tab \tab 03 00 03 00\par \tab \tab dc\tab i1'2,3'\tab \tab 02 03\par \tab \tab dc\tab i'$ABCD'\tab \tab CD AB\par \tab \tab dc\tab i'100/3'\tab \tab 21 00\par \tab \tab dc\tab i1>'$ABCD,$1234'\tab AB 12\par \tab \tab dc\tab i5'3'\tab \tab \tab 03 00 00 00 00\par \tab \tab dc\tab 2i3'1,2'\tab \tab 01 00 00 02 00 00\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab \tab \tab \tab \tab 01 00 00 02 00 00\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Address}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Address\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addresses\bxe }}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab nA[x]'expression[,expression,...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This is actually similar to integer, but is more mnemonic for the intended use of building tables of addresses.  Address type DC statements are limited to generating one to four bytes.  If }{\i\f4\fs20 x}{\f4\fs20   is omitted, the A DC defaults to two-byte values.\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab }{\f6\fs18\ul Code}{\f6\fs18 \par \par \tab \tab dc\tab a'AD1,AD2'\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Reference an Address}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Reference an Address\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard reference\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab R'label[,label,...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This generates a reference to an address in the object module without saving the address in the final program.  This allows a program to note that a subroutine will be needed from the subroutine library without reserving storage for the subroutine address.  In conjunction with S below, this allows for the development of a p-system which loads and links only those parts of the p-system language needed by a particular program.  This option is then used by the p-code instructions to ensure that any library subroutines that will be needed to execute that instruction are linked. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Note that this directive does not take up space in the finished program. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab \tab }{\f6\fs18\ul Code}{\f6\fs18 \par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab dc\tab r'LIBRARY'\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Soft Reference}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Soft Reference\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 soft reference\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linking a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab S[x]'expression[,expression,...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This generates one to four bytes of storage for each address in the operand, but does not instruct the link editor to link the subroutines into the final program.  If the subroutine is not linked, the executable program produced by the link editor will resolve the value to zero.  This allows a table of addresses to be built, but only those subroutines requested elsewhere in the program (usually by an R type reference) have their addresses placed in the table.  See the discussion of R, above. \par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab }{\f6\fs18\ul Code}{\f6\fs18 \tab \tab \tab \tab }{\f6\fs18\ul Value}{\f6\fs18 \par \par \tab \tab dc\tab s'MISSING,ADR1234'\tab 00 00 34 12\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Hexadecimal Constant}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Hexadecimal Constant\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hexadecimal data\bxe }}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab nH'hex-digit-or-blank[hex-digit-or-blank...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The string between the single quote marks may contain any sequence of hexadecimal digits (0-9 and A-F) and blanks.  Embedded blanks are removed, and the hexadecimal value is stored unchanged.  If there are an odd number of digits, the last byte is padded on the right with a zero: \par     \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \tab \tab }{\f6\fs18\ul Code}{\f6\fs18 \tab \tab \tab \tab }{\f6\fs18\ul Value}{\f6\fs18 \par         \par \tab \tab dc\tab h'01234ABCDEF'\tab 01 23 4A BC DE F0\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab dc\tab h'1111 2222 3333'\tab 11 11 22 22 33 33\par }{\f4\fs20         \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Binary Constant}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Binary Constant\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 binary data\bxe }}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab nB'0|1|blank[0|1|blank...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The string between the quote marks can contain any sequence of zeros, ones, and blanks.  The blanks are removed, and the resulting bit values are stored.  If a byte is left partially filled, it is padded on the right with zeros: \par     \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab \tab }{\f6\fs18\ul Code}{\f6\fs18 \tab \tab \tab \tab }{\f6\fs18\ul Value}{\f6\fs18 \par         \par \tab \tab dc\tab 2b'01 01 01 10'\tab 56 56\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab dc\tab b'111111111'\tab \tab FF 80\par }{\f4\fs20         \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Character String}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Character String\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 character data\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 strings}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab nC'character-string'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The string enclosed in quote marks may contain any sequence of keyboard characters.  If a quote mark is desired, enter it twice to distinguish it from the end of the string: \par     \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab }{\f6\fs18\ul Code}{\f6\fs18 \tab \tab \tab \tab }{\f6\fs18\ul Value}{\f6\fs18 \par         \par \tab dc  c'NOW IS THE TIME ...' \tab 4E 4F 57 20 49 53 20 54\par \tab \tab \tab \tab \tab 48 45 20 54 49 4D 45 20\par \tab \tab \tab \tab \tab 2E 2E 2E\par \tab dc  c'NOW''S THE TIME'\tab 4E 4F 57 27 53 20 54 48\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab \tab \tab \tab 45 20 54 49 4D 45\par }\pard \qj\fi360\widctlpar\adjustright {\v\f4\fs20  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MSB directive}}}{\v\f4\fs20    \par }{\f4\fs20 \par Normally, strings are stored with the high-order bit off, corresponding to the ASCII character set.  If characters will be written directly to the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  text screen, it will be desirable to have the high bit set.  In that case, use the MSB directive to change the default. \par Note that the double quote character (") can be used instead of single quotes.  Use of the double quote is reserved for use in macros.\par     \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Floating Point}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Floating Point\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 floating-point data\bxe }}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab nF'float-number[,float-number...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Numbers are entered as signed floating-point numbers, with an optional signed exponent starting with E.  Embedded blanks are allowed anywhere except within a sequence of digits. \par }{\v\f4\fs20  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SANE Tool}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IEEE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AppleSoft}}}{\v\f4\fs20    \par }{\f4\fs20 The number is stored as a four-byte floating-point number.  Bit one is the sign bit, and is 1 for negative numbers.  The next eight bits are the exponent, plus $7E.  The exponent is a power of two.  The remaining 31 bits are the mantissa, with the leading bit removed, since it is always 1 in a normalized number.  The mantissa is stored most significant byte to least significant byte.  This format is compatible with the IEEE floating-point standard, and is also used by the SANE tools.  See the IEEE directive for an way to get five-byte floating-point numbers compatible with Applesoft. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 658881 card}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NUMSEX directive}}}{\v\f4\fs20 \par }{\f4\fs20 Floating-point numbers are generally stored least-significant-byte first; this is the format used by most floating-point packages, including the ORCA/M 4.1 Floating-point Libraries (ProDOS 8 ORCA/M), as well as by a number of floating-point cards, such as the 68881.  See NUMSEX for a way to change this order of the bytes.\par Numbers can range from approximately 1E-38 to 1E+38.  The mantissa is accurate to over seven decimal digits. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi540\keepn\widctlpar\tx4320\adjustright {\f6\fs18\ul Code}{\f6\fs18 \tab }{\f6\fs18\ul Value}{\f6\fs18 \par         \par dc   f'3,-3,.35E1,6.25 E-2'\tab 40400000\tab \par \tab C0400000\par \tab 40600000\par }\pard \qj\fi540\widctlpar\tx4320\adjustright {\f6\fs18 \tab 3D800000\par }\pard \qj\widctlpar\adjustright {\f4\fs20     \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Double Precision Floating Point}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Double Precision Floating Point\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 floating-point data\:double precision\bxe }}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab nD'float-number[,float-number...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This is identical to F, except that an eight-byte number is generated with an eleven-bit exponent and a forty-eight-bit mantissa.  Numbers can range from about 1E-308 to 1E+308.  The mantissa is accurate to slightly more than 15 decimal digits.  The exponent is stored most significant byte first. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20     \tab }{\f6\fs18\ul Code}{\f6\fs18 \tab \tab        \tab \tab }{\f6\fs18\ul Value}{\f6\fs18 \par         \par \tab dc   d'3,-3,.35E1,6.25 E-2' \tab 4008000000000000\par \tab \tab \tab \tab \tab \tab C008000000000000\par \tab \tab \tab \tab \tab \tab 400C000000000000            \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab \tab \tab \tab \tab 3FF0000000000000\par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Extended Precision Floating Point}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\tc {\b\v\f4\fs20 }{\b\v\f4\fs20 Extended Precision Floating Point\tcl3}}}{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 floating-point data\:extended precision\bxe }}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab nE'float-number[,float-number...]'\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SANE Tool}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This is identical to F, except that a SANE extended 10-byte number is generated with a fifteen-bit exponent and a sixty-four-bit mantissa.  Numbers can range from about -1E-4932 to 1E+4932.  The mantissa is accurate to slightly more than 19 decimal digits.  The exponent is stored most significant byte first. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20     \tab }{\f6\fs18\ul Code}{\f6\fs18 \tab \tab        \tab \tab }{\f6\fs18\ul Value}{\f6\fs18 \par         \par }\pard \widctlpar\adjustright {\f6\fs18      \tab dc     e'3'\tab \tab \tab \tab 00 00 00 00  \par           \tab \tab \tab \tab \tab 00 00 00 C0  \par           \tab \tab \tab \tab \tab 00 40        \par      \tab dc     e'-3'\tab \tab \tab \tab 00 00 00 00 \par           \tab \tab \tab \tab \tab 00 00 00 C0  \par           \tab \tab \tab \tab \tab 00 C0        \par }\pard \keepn\widctlpar\adjustright {\f6\fs18      \tab dc     e'.35I1'\tab \tab \tab 00 00 00 00 \par           \tab \tab \tab \tab \tab 00 00 00 E0  \par }\pard \widctlpar\adjustright {\f6\fs18           \tab \tab \tab \tab \tab 00 40        \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 DIRECT}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DIRECT\tcl2}}}{\b\f4 \tab Set Direct Page Location\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DIRECT directive\bxe }}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab DIRECT expression\tab \tab [comment]\par \tab [lab]\tab DIRECT }{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 absolute addressing}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par The DIRECT directive is used to set the value of the Direct Page register, to be used internally by the assembler but not actually stored into the Direct Page register itself.  The assembler must be able to evaluate the expression at assembly time.  That is, the expression cannot contain any references to relocatable labels.  Setting DIRECT to a value allows the assembler to automatically promote direct page values to absolute values when that is necessary.  As an example, consider the following code:\par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \tab SBC\tab L1,Y\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS 8}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:writing code for}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:writing code for}}}{\v\f4\fs20 \par }{\f4\fs20 \par where L1 is a direct page location.  Since there is no such addressing mode DP,Y, the assembler would normally flag this line as an error.  If you had set DIRECT to a value, however, the assembler would generate code for the operand equal to the location of L1 plus the value of DIRECT.  The main use of DIRECT is for writing ProDOS 8 applications; in this case the value of DIRECT should be zero.  This is because the zero page on the 8-bit Apple IIs starts at page zero in bank zero.  On the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 , the direct page is in bank zero, but not necessarily in page zero.  The effect of DIRECT is cancelled by coding it with an operand of OFF.  You may turn the directive on and off throughout your program. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 DS}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DS\tcl2}}}{\b\f4 \tab Declare Storage}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab DS expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This directive is used to reserve sections of memory for program use.  The operand is coded the same way as an absolute address for an instruction.  The operand is resolved into a four-byte unsigned integer, and that many bytes of memory are reserved. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 DYNCHK}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DYNCHK\tcl2}}}{\b\f4 \tab Check References to Dynamic Segments}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DYNCHK directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dynamic segments}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab DYNCHK }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If DYNCHK is turned on, the only allowable opcode which refers to a label contained in a dynamic segment is JSL.  If DYNCHK is turned off, all references to labels contained in dynamic segments are allowed.  The linker and assembler work closely in building lists of references to resolve.  At assembly time, the assembler tries to resolve all of the addresses it can:  those derived from constant expressions, and those involving local labels, which become offsets from a base address, to be patched later by the linker.  Unknown labels are left entirely for the linker to resolve.  During link editing, the linker builds a jump table of global labels contained in dynamic segments.  This jump table is passed to the system loader, to allow it to patch addresses at run-time.  When DYNCHK is on, the linker will flag an error for any opcodes other than JSL which refer to labels in its jump table (i.e. global labels found in dynamic segments).  If DYNCHK is off, the linker will not generate these errors.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 EJECT}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EJECT\tcl2}}}{\b\f4 \tab Eject the Page\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EJECT directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab EJECT\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When a printer is in use, this directive causes the output to skip to the top of the next page.  This can be of help in structuring the output of long subroutines.  The directive does not affect the code sent to the output file in any way. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 END}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 END\tcl2}}}{\b\f4 \tab End Program Segment\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab END\tab \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The END directive is the last statement in a program segment or data area.  It directs the assembler to print the local symbol table and delete the local labels from the symbol table. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ENTRY}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ENTRY\tcl2}}}{\b\f4 \tab Define Entry Point\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENTRY directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab ENTRY\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 It may be desirable to enter a subroutine some place other than the top of the subroutine.  Use of the ENTRY directive allows a global label to be defined for that purpose.  The label field of the ENTRY statement becomes a global label. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 EQU}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EQU\tcl2}}}{\b\f4 \tab Equate\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab lab\tab EQU expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The label is assigned the value of the operand.  This allows a numeric value to be assigned to a name, with the name to be used instead of the number in further operands.  This makes your code easier to understand.\par You can also reference other values and the location counter with EQU.  The expression you equate with the label does not have to be declared locally, nor does it have to be a fixed value.  References to non-constant operands are passed on to the linker for resolution.\par Some examples of using EQU are listed below:\par \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs18 \tab two\tab equ  1+1\par \tab count\tab equ  globalCount+1\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Another use of EQU is to assign a label to the current value of the location counter.  The use:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tx720\tx1710\adjustright {\f6\fs18 \tab label\tab equ  *\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par is identical to the directive ANOP.  EQU can also be used to identify a variable within a group of data.  For the example below, FOUR will point to the location of the floating-point value of 4.  FOUR is equated with the fourth variable offset from the DC directive, and each floating-point value occupies four bytes.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs18 \tab \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs18 \tab four\tab equ  *+3*4\par \tab one\tab dc   f'1,2,3,4,5,6,7,8,9,10'\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ERR}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ERR\tcl2}}}{\b\f4 \tab Print Errors\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ERR directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab ERR }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If LIST ON has been specified, errors are always printed, regardless of this flag.  If LIST OFF has been specified, this flag allows error lines to still be printed.  If turned off, errors are no longer printed, but the number of errors found will still be listed at the end of the assembly.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 EXPAND}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EXPAND\tcl2}}}{\b\f4 \tab Expand DC Statements\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPAND directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab EXPAND ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If turned on, this option causes all bytes generated by DC directives to be shown in the output listing, up to a maximum of sixteen bytes.  Only four bytes of a DC directive can be displayed on a line, so the option defaults to OFF to save paper and patience.  When the option is turned off, only the first four bytes of the generated code are shown with the output. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 GEQU}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GEQU\tcl2}}}{\b\f4 \tab Global Equate\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab lab\tab GEQU expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This is identical to the EQU directive, except that the label is saved in the global symbol table.  All program segments are then able to use the label.  Labels defined via the GEQU directive that result in constants are resolved at assembly time, not link edit time.  They are included in the object module, so library routines can use global equates to make constants available to the main program.\par The most common use of GEQU is to declare fixed direct page and long addresses.  Since these are constants, the assembler resolves them and is able to generate the proper operand lengths without explicit operand length specifiers.  For example, the following code fragment shows how the assembler would choose operand lengths for a LDA instruction.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long addressing}}}{\v\f4\fs20 \par }\pard \fi360\keep\keepn\widctlpar\tx1440\tx2160\tx2340\tx4320\adjustright {\f6\fs18 \par }\pard \keep\keepn\widctlpar\tx1440\tx2160\tx2340\tx4320\adjustright {\f6\fs18 \tab addr\tab gequ  4\par \tab tools\tab gequ  $E10000\par }\pard \qj\keep\keepn\widctlpar\tx1440\tx2160\tx2340\tx4320\adjustright {\f4\fs18 \par }\pard \keep\keepn\widctlpar\tx2160\tx2700\tx4320\adjustright {\f6\fs18 A5 04\tab lda   addr\par AF 00 00 E1\tab lda   tools\par }\pard \qj\widctlpar\tx1440\tx2160\tx2340\tx4320\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 IEEE}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 IEEE\tcl2}}}{\b\f4 \tab IEEE Format Numbers\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IEEE directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AppleSoft}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 floating-point data}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab IEEE }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par In its default setting, DC directives with F and D operands generate numbers compatible with the IEEE floating-point standard.  If IEEE is turned off, F type DC directives will generate Applesoft compatible numbers. D type DC directives are not affected; they always generate IEEE double-precision numbers. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 INSTIME}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 INSTIME\tcl2}}}{\b\f4 \tab Show Instruction Times}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INSTIME directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CPU cycles}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 page boundary}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 word size}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab INSTIME ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Turning INSTIME on causes two columns to be inserted in the output listing immediately before the macro expansion column (where + characters mark lines generated by a macro).  The first column will contain the number of CPU cycles required to execute an instruction.  If the line is not an instruction, nothing appears in the column.  If the number of cycles can vary with circumstances, such as page boundary crossings or size of registers, the next column contains an asterisk.  Refer to a reference manual for details that can change the timing.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 KEEP}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 KEEP\tcl2}}}{\b\f4 \tab Keep Object Module\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab KEEP pathname\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The assembled code is saved on disk as a relocatable object module, using the specified name as the root name.  The link editor may then be used to generate an executable file.  This directive may only be used one time, and must appear before any code-generating statements. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 KIND}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 KIND\tcl2}}}{\b\f4 \tab Set Segment Kind\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KIND directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 segment type}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\v\f4\fs20 \par }{\f4\fs20     \tab         \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab KIND  expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The START, PRIVATE, DATA and PRIVDATA directives all cause the assembler to begin a new object segment.  Object segments have a kind field which specifies certain characteristics about the segment.  The four directives just mentioned allow you to set this kind field to the four most commonly used values.  The kind field can, however, have up to 65536 distinct values, only some of which are defined at this time.  This directive lets you set the kind field to any value from 0 to 65535.  It is generally used right after the START, PRIVATE, DATA or PRIVDATA.  It must be used inside of a segment.  \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 Note that this directive bypasses the normal error checking of the assembler.  You must ensure that the code in the segment is consistent with the segment kind you specify \endash  the assembler cannot check for you.  \par For a list of the most common segment kinds, see Appendix B.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 LIST}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LIST\tcl2}}}{\b\f4 \tab List Output\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab LIST ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A listing of the assembler output is sent to the current output device.  If the listing is turned off, the assembly process speeds up by about 10%. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 LONGA}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LONGA\tcl2}}}{\b\f4 \tab Accumulator Size Selection}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGA directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 word size}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 immediate addressing}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab LONGA }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The 65816 CPU is capable of doing sixteen-bit operations involving the accumulator and memory; it is also capable of performing eight-bit operations the same way the 6502 and 65C02 do.  The size of the accumulator and the amount of memory affected by instructions like LDA, STA and INC are controlled by a bit in the processor status register.  At assembly time, the assembler has no idea how that bit will be set at run time \endash  it is the responsibility of the programmer to tell the assembler using this directive.  LONGA ON indicates sixteen-bit operations, while LONGA OFF indicates eight-bit operations.  The only difference this will make in the assembled program is to change the number of bits placed in the code stream when an immediate load is performed.  For example,\par \par }\pard \qj\fi450\widctlpar\tx1710\adjustright {\f6\fs18 \tab longa on  \par \tab longi on  \par A9 01 00\tab lda   #1\par A2 02 00\tab ldx   #2\par \tab longa off\par \tab longi off\par A9 01\tab lda   #1  \par A2 02\tab ldx   #2  \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The status bit that the CPU uses at run-time must be set separately.  To do so, use the REP and SEP instructions, or use the LONG and SHORT macros provided with ORCA.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 LONGI}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LONGI\tcl2}}}{\b\f4 \tab Index Register Size Selection}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGI directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab LONGI }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This directive controls the number of bytes reserved for immediate loads to the X and Y registers when using the 65816.  See LONGA for a complete discussion.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MEM}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MEM\tcl2}}}{\b\f4 \tab Reserve Memory}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEM directive\bxe }}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab MEM expression,expression\tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The MEM directive is included for compatibility with older versions of ORCA/M.  On the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 , which has relocatable files, the MEM directive cannot be used.  It will always result in a linker error.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MERR}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MERR\tcl2}}}{\b\f4 \tab Maximum Error Level\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MERR directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels\:assembler}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab MERR expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RUN command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASMLG command}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par MERR sets the maximum error level that can be tolerated and still allow the assembled program to link edit immediately after the assembly (as would happen with a RUN or ASMLG command from the shell).  The operand is evaluated to a one-byte positive integer. \par The default value is zero.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MSB}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MSB\tcl2}}}{\b\f4 \tab Set the Most Significant Bit of Characters\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MSB directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab MSB ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Character constants and characters generated by DC statements have bit seven cleared, corresponding to the ASCII character set.  If MSB ON is coded, characters generated have bit seven turned on, and appear normal on the Apple screen display.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 NUMSEX}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NUMSEX\tcl2}}}{\b\f4 \tab Set the Byte Order of Floating-point Values\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NUMSEX directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SANE Tool}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 floating-point data}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 byte order}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab NUMSEX ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Most floating-point packages define numbers as they would appear when you write them:  the most significant byte, followed by the next most significant byte, ..., down to the least significant byte.  Apple's numeric package, SANE, defines floating-point numbers in the reverse, from the least significant byte up to the most significant byte.  If NUMSEX is set to on, the assembler will generate floating-point constants from most significant byte down to the least significant byte. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 OBJ}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 OBJ\tcl2}}}{\b\f4 \tab Set Assembly Address\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OBJ directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 drivers}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ROM code}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab OBJ expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Normally, the assembler assembles code as if it will be executed where it is placed in memory when loaded.  When code will be moved before it is executed, the OBJ directive is used to tell the assembler where the code will be moved to.  That way, the code can physically reside at one location, but be moved to another before execution.  The most common reason for doing this is to install drivers that will remain in memory after the program finishes.\par All code that appears after the OBJ directive is assembled as if it will be executed at the address specified in }{\i\f4\fs20 expression}{\f4\fs20 .  This effect continues until another OBJ, an OBJEND, or an END is encountered.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 OBJCASE}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 OBJCASE\tcl2}}}{\b\f4 \tab Specify Case Sensitivity In Object Files\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OBJCASE directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:linker}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 case sensitivity\:assembler}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab OBJCASE ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The OBJCASE directive allows the case sensitivity of the object module to be separately controllable from the case sensitivity of the language.  Regardless of the setting of the CASE directive, symbols are internally maintained in the case they were defined with.  When definitions and references are written to the object module, the setting of the OBJCASE directive determines if they will be written in all uppercase (OBJCASE OFF, or case insensitive) or mixed uppercase and lowercase (OBJCASE ON).\par Because the settings of CASE and OBJCASE should almost always be the same, changing CASE sets OBJCASE to the same value.  If they are to be set differently, be sure and set OBJCASE }{\i\f4\fs20 after}{\f4\fs20  setting CASE.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 OBJEND}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 OBJEND\tcl2}}}{\b\f4 \tab Cancel OBJ}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OBJEND directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ROM code}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab OBJEND\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Cancels the effect of an OBJ.  See OBJ for details.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ORG}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ORG\tcl2}}}{\b\f4 \tab Origin\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORG directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 absolute addressing}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab ORG expression\tab \tab [comment]\par \tab [lab]\tab ORG *+expression\tab \tab [comment]\par \tab [lab]\tab ORG *-expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When the assembly process starts, the assembler assumes that the program will be relocatable.  The ORG directive can be used to start the program at a fixed location.  The location is specified as an absolute address in the operand field.  To do this, place the ORG before the first START or DATA directive. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 fixed address}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ROM code}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\v\f4\fs20 \par }{\f4\fs20 The ORG directive can also be positioned before any subsequent START or DATA directives to force that segment to a particular fixed address.  Again, the operand is an absolute address, and must be a constant.  In this case, though, the actual method of performing the ORG is to insert zeros until the desired location is realized.  This action is performed by the link editor as the final executable file is built.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\v\f4\fs20 \par }{\f4\fs20 Note that using ORG in this fashion cripples the memory management scheme of the Apple I}{\scaps\f4\fs20 Igs}{\f4\fs20 .  If at all possible, avoid the use of the ORG directive!\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\v\f4\fs20 \par }{\f4\fs20 The ORG directive can also be used inside a program segment, but in that case the operand must be a *, indicating the current location counter, followed by + or -, and a constant expression.  The location counter is moved forward or backward by the indicated amount.  Thus,\par \par }\pard \qj\fi450\widctlpar\tx1170\adjustright {\f6\fs18 org\tab *+2\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par is equivalent to\par \par }\pard \qj\fi450\widctlpar\tx1170\adjustright {\f6\fs18 ds\tab 2\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par while\par \par }\pard \fi450\widctlpar\tx1170\adjustright {\f6\fs18 org\tab *-1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par deletes the last byte generated.  It is not possible to delete more bytes than have been generated by the current segment. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 PRINTER}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PRINTER\tcl2}}}{\b\f4 \tab Send Output to Printer}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive\bxe }}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab PRINTER ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If PRINTER ON is coded, output is sent to the printer.  If the option is turned off, output is sent to the video display. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 PRIVATE}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PRIVATE\tcl2}}}{\f4 \tab }{\b\f4 Define A Private Code Segment\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 separate compilation}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 static variables}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENTRY directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab lab\tab PRIVATE [segname]\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 One feature that is very useful when doing separate compilation is the ability to hide a symbol from other source files.  For C aficionados, this corresponds to static variables.  The effect is to make a symbol global within the compilation, but to not make it available in code produced by other compiles or assemblies.  PRIVATE and PRIVDATA allow this in the assembler.\par The PRIVATE directive is used exactly like a START directive, and for the same purposes.  The name of the segment is global within the assembly that it appears, but cannot be accessed from code produced by another assembly and later linked in.  Symbols defined by GEQU and ENTRY directives within the segment are also private to the assembly.\par The }{\i\f4\fs20 segname }{\f4\fs20 in the operand field specifies the load segment.\par Note that marking a label as private has an additional side benefit.  Since the symbol can only be accessed from a single assembly, the linker is able to handle more than one global label with the same name.  The restriction is that all but one be marked as private, and that all appear from different assemblies.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 PRIVDATA}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PRIVDATA\tcl2}}}{\f4 \tab }{\b\f4 Define A Private Data Segment\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab lab\tab PRIVDATA [segname]\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 PRIVDATA works just like a DATA directive, except that the segment and all labels declared within the segment are private.  See PRIVATE for a discussion of what it means for a symbol to be private.\par The }{\i\f4\fs20 segname }{\f4\fs20 in the operand field specifies the load segment.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 RENAME}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RENAME\tcl2}}}{\b\f4 \tab Rename Op Codes}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 cross assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\: assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab RENAME opcode,opcode\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA is powerful enough to actually develop a cross assembler using macros.  The only problem is that other CPU's may have an op code that conflicts with an assembly language instruction or an existing ORCA directive.  This problem can be resolved by renaming the existing op code to prevent a conflict.  The operand is the old op code followed by the new one.  In the following example, the first time LDA is encountered, it is a 65816 instruction.  The second time, it is not found in the op code table, so the assembler tries to expand it as a macro. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab inst\tab start\par \tab \tab lda\tab #1\par \tab \tab end\par \par \tab \tab rename lda,new\par \tab macro\tab start\par \tab \tab lda\tab #1\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab \tab end\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Restrictions on the RENAME directive are that it cannot be used inside a segment (i.e., it cannot come between a START and END), the new op code name must be eight characters or less, and the op code name cannot contain spaces or the & character. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 SETCOM}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SETCOM\tcl2}}}{\b\f4 \tab Set Comment Column\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETCOM directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 comments\:assembly language}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab SETCOM expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There is a column beyond which the assembler will not search for an op code, and will not search for an operand unless there is exactly one space between the op code and operand.  This is customarily where comments are started, so that a comment is not accidentally used as part of an operand.  This column defaults to 40, but can be changed to any number from 1 to 255 by specifying the number in the operand field of this directive. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 START}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 START\tcl2}}}{\b\f4 \tab Start Subroutine\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab lab\tab START [segname]\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each program segment (that is, both main programs and subroutines), must begin with a START directive.  Labels defined inside a program segment are local labels, and are valid only inside the program segment that defined them.  There is nothing wrong, for example, with having a local label called LOOP in every program segment in a source file.\par Every START directive must have a label.  This becomes a global label.  Therefore, every program segment in the program is able to reference that subroutine, allowing it to be called or jumped to from any program segment (including itself).\par The }{\i\f4\fs20 segname }{\f4\fs20 in the operand field specifies the load segment.\par The label on the START directive becomes the subroutine name in the object module that is the output of the assembler.  Since it is a global label, the link editor can inform other subroutines of its location at link edit time.  This allows subroutines that are assembled separately to be combined later by the link editor. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 SYMBOL}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SYMBOL\tcl2}}}{\b\f4 \tab Print Symbol Tables}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbol tables\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:global}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab SYMBOL ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An alphabetized listing of all local symbols is printed following each END directive.  After all processing is complete, global symbols are printed.  If this option is turned off, assemblies speed up slightly.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 TITLE}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TITLE\tcl2}}}{\b\f4 \tab Print Header}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TITLE directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler listing}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab TITLE [string]\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The title directive has an optional operand.  If coded, it must be a legal string, and must be enclosed in single quote marks if it contains blanks or starts with a single quote mark.  If the string is longer than sixty characters, it is truncated to sixty characters.\par If the TITLE directive is used, page numbers will be placed at the top of each page sent to the listing device.  If an operand was coded, the string used will be printed at the top of each page, immediately after the page number. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 USING}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 USING\tcl2}}}{\b\f4 \tab Using Data Area\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 USING directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab USING lab\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This statement should appear in any program segment that wants access to local labels within a given data area.  The operand field contains the name of the data area.  Labels defined within the subroutine take precedence over labels by the same name in data areas. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 65C02}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 65C02\tcl2}}}{\b\f4 \tab Enable 65C02 Code}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:writing code for}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:writing code for}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:cpu}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 6502\:cpu}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab 65C02 ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The 65C02 is used in the Apple //c and enhanced Apple //e, and can be retrofitted to older Apples.  The extra instructions and addressing modes available on that CPU can be enabled and disabled with this directive. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 65816}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 65816\tcl2}}}{\b\f4 \tab Enable 65816 Code\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\v\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \par \tab [lab]\tab 65816 }{\f6\fs20\ul ON}{\f6\fs20 |OFF\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par When off, 65816 instructions and operands are identified as errors by the assembler, allowing 65C02 or 6502 code to be generated without fear of accidentally using a feature not available on the smaller CPU.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembler directives\bxe }{\rxe bk2}}}{\v\f4\fs20 \par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\titlepg\sectdefaultcl \pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 20\par Macro Language\par and\par Conditional Assembly Directives\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 20 \endash  Macro Language and Conditional Assembly Directives\tcl1}}}{\v\f4 \par }{\f4 \par \par }{\f4\fs20 \par This chapter tells how to create user-defined macros.  It is not necessary to be able to write a macro in order to use one.  It is therefore not necessary to know the material in this chapter in order to use the assembler; the macro language is an advanced capability, which should be studied after the fundamental features of the assembler have been mastered.  In this chapter, all of the macro and conditional assembly language directives are covered in detail.  Chapter 8 of the User's Manual also covers writing macros, but at an introductory level. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Macro File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Macro File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macro buffer}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A new macro is created by coding a macro definition, which tells the assembler which instructions to replace the macro call with.  These definitions are kept in a special file called a macro file.  Macro files are created using the text editor in the same way that a source file is created.  The distinction between the two is in the way the assembler handles them.  Macro files are included in the source stream using MLOAD and MCOPY directives.  The assembler loads them into a special area of memory called the macro buffer as they are needed.  When an unidentified operation code is encountered in the source file, the assembler searches for a macro definition with that name in the macro buffer. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Writing Macro Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Writing Macro Definitions\tcl2}}}{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There are three macro language directives:  MACRO, MEND, and MEXIT.  These directives are valid only in a macro file; if used inside of a regular source file, they will cause an error message to be printed. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:macros}}}{\v\f4\fs20 \par }{\f4\fs20 Each macro definition begins with a MACRO directive and ends with an MEND directive.  These directives are coded like an operation code.  No operand or label is needed, and any present is ignored.  Their sole purpose is to set the macro definition apart from others in the file.  Their use will become clear in the examples that follow shortly. \par Immediately following the MACRO directive is the macro definition statement.  The name of the macro being defined is placed in the operation code field.  If an operation code that the assembler is trying to identify matches the name of the macro, the assembler replaces the macro call in the source file with the instructions found in the body of the macro itself.  The macro name may be any sequence of keyboard characters except blanks or the & character.  It may contain any number of characters. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 Consider the following simple macro as an example.  It is used to print a character on the screen.  The Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  Text Tools has a tool call which can be used to write a character to the current output device.  Since the tool call is a three-step process, it is inconvenient to try to remember all the steps, as well as the correct hex values every time a character needs to be written.  (The steps include pushing the two-byte character onto the stack, loading the X register with the function number and tool number, and executing a long jump to the toolbox.)   To remedy this, a macro may be defined, using a mnemonic name for the tool call:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\tx1440\tx2340\adjustright {\f6\fs14 \par }\pard \fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab macro\par        \tab putchar\par        \tab pha\par       \tab ldx  \tab #$180C\par        \tab jsl \tab $E10000\par        \tab mend\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Putchar is created using the text editor, and is placed in a file named PUT.MACROS. It can now be used as a new instruction: \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming examples}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\tx1440\tx2340\tx3780\adjustright {\f6\fs14 \par }\pard \fi450\widctlpar\tx1440\tx2340\tx3780\adjustright {\f6\fs18 \tab list\tab on\par \tab gen\tab on\par \tab mcopy\tab PUT.MACROS\par \tab keep\tab stuff\par Main\tab start\par \tab phk\par \tab plb\par \tab lda\tab #'A'\par \tab putchar\par \tab lda\tab #0\par \tab rtl\par \tab end\par }\pard \fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Following the putchar instruction, the assembler includes the macro expansion, yielding the sequence \par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 ORCA/M Asm65816 2.0\par  \par 0001 0000                       list  on\par 0002 0000                       gen   on\par 0003 0000                       mcopy put.macros \par 0004 0000                       keep  stuff \par 0005 0000              Main     start \par 0006 0000 4B                    phk \par 0007 0001 AB                    plb \par 0008 0002 A9 41 00              lda   #'A' \par 0009 0005                       putchar \par      0005 48          +         pha \par      0006 A2 0C 18    +         ldx   #$180C \par      0009 22 00 00 E1 +         jsl   $E10000 \par 0010 000D A9 00 00              lda   #0\par 0011 0010 6B                    rtl\par 0012 0011                       end \par  \par 12 source lines\par 1 macros expanded\par }\pard \li360\widctlpar\adjustright {\f6\fs18 3 lines generated\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par in the output listing.  The new instruction PUTCHAR may be used as many times as desired anywhere in a source program provided the MCOPY PUT.MACROS directive is also included.  The assembler always prints the name of the macro (in this case PUTCHAR) to show how instructions that follow were generated; the PHA, LDX, and JSL instructions are the only part of the macro expansion that actually generates code.  The + character at the beginning of the lines containing these instructions is put there by the assembler to indicate that the line was generated by the macro processor, rather than coded directly by the programmer.  The lines that comprise the macro expansion are normally not printed in the assembly listing; a GEN ON directive must be issued earlier in the program to list the macro expansion. \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:model statements}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:calling}}}{\v\f4\fs20 \par }{\f4\fs20 The statements between the macro definition statement and the MEND directive are called model statements, since the macro processor uses them as models for the new instructions.  The instruction in the source file that caused the macro to be expanded is called the macro call statement, or simply the macro call. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\v\f4\fs20 \par }{\f4\fs20 Macros may contain references to other macros, up to four levels deep.  They cannot contain COPY or APPEND directives, but can contain all other valid ORCA directives and 65816 instructions.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Symbolic Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Symbolic Parameters\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:booleans}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A symbolic parameter is a special variable used by the assembler.  Unlike labels, they are true variables; that is, they may be assigned a value which can later be changed.  They come in three kinds: A for arithmetic, B for boolean (logical) and C for character type. \par A symbolic parameter is coded as an & character followed by the symbolic parameter name.  The name itself has the same syntax conventions as a label. \par When the assembler encounters a symbolic parameter, it replaces it with its value before assembling the line.  The value may be set in several ways.  One way, described below, is by passing the values during the macro call.  Only character type symbolic parameters may be passed this way; the use of the other types of symbolic parameters will be explained later, in the section covering conditional assembly. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Positional Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Positional Parameters\tcl3}}}{\b\f4 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:positional parameters}}}{\v\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par One way to define a character type symbolic parameter is to include it in the label or operand field of a macro definition statement.  Symbolic parameters defined in this way are implicitly defined by appearing on the macro definition line.  Character type symbolic parameters are used to pass actual values to the symbolic parameters during a macro call, as will be seen in the example below.  Revisiting the macro defined above to output a character, a new, more powerful macro definition may be written which reads\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \fi450\keep\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18       \tab macro\par &lab\tab putchar\tab &c1\par &lab\tab lda\tab &c1\par \tab pha\par \tab ldx\tab #$180C\par \tab jsl\tab $E10000\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Using the new macro, you do not have to load the accumulator with the character to print before using the macro.  It is called from a source program as follows.\par \par }\pard \fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab .\par \tab .\par \tab beq\tab L1\par \tab putchar\tab #'A'\par \tab bra\tab L2\par L1\tab putchar\tab #'B'\par L2\tab lda\tab #0\par \tab .\par \tab .\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par At assembly time, the code shown below is generated.  Note again that the assembler includes the macro call statement only to show what generated the new lines; there is no generated code associated with the macro call line itself: \par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 0008 0002 F0 0D                 beq   L1 \par 0009 0004                       putchar #'A' \par      0004 A9 41 00    +         lda   #'A' \par      0007 48          +         pha \par      0008 A2 0C 18    +         ldx   #$180C \par      000B 22 00 00 E1 +         jsl   $E10000 \par 0010 000F 80 0B                 bra   L2 \par 0011 0011              L1       putchar #'B' \par      0011 A9 42 00    +L1       lda   #'B' \par      0014 48          +         pha \par      0015 A2 0C 18    +         ldx   #$180C \par      0018 22 00 00 E1 +         jsl   $E10000 \par }\pard \li360\widctlpar\adjustright {\f6\fs18 0012 001C A9 00 00     L2       lda   #0 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:positional parameters}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The reason that &C1 is referred to as a positional parameter is that it gets its value by being matched with a character string in the source file by position.  This becomes clear when a macro is defined which has two or more symbolic parameters.  Also note that the symbolic parameter defined in the label field of the macro definition (&LAB) resulted in the label field of the first line of the macro expansion receiving the value of L1 after the second macro call.  The symbolic parameter &LAB was also coded in the first line of the macro body, where the value of the macro call label field was substituted for it during the macro expansion.   Note that if &LAB had been omitted from either place in the macro, L1 would not have been defined and the BEQ L1 statement would have generated an error.\par The following example, which is a macro to print two characters, shows how positional parameters are set via the macro call:\par \par }\pard \fi450\keep\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18       \tab macro\par &lab\tab putchar\tab &c1,&c2\par &lab\tab lda\tab &c1\par \tab pha\par \tab ldx\tab #$180C\par \tab jsl\tab $E10000\par \tab lda\tab &c2\par \tab pha\par \tab ldx\tab #$180C\par \tab jsl\tab $E10000\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Observe that the two symbolic parameter declarations on the macro definition line were separated by a comma, with no intervening spaces. The comma delimits the different positional parameters; spaces are not allowed.  When the macro is called, as shown below, the actual parameters are coded identically, that is, with commas separating the fields, and no intervening blanks: \par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 0008 0002                       putchar #'A',#'B' \par      0002 A9 41 00    +         lda   #'A' \par      0005 48          +         pha \par      0006 A2 0C 18    +         ldx   #$180C \par      0009 22 00 00 E1 +         jsl   $E10000 \par      000D A9 42 00    +         lda   #'B' \par      0010 48          +         pha \par      0011 A2 0C 18    +         ldx   #$180C \par }\pard \li360\widctlpar\adjustright {\f6\fs18      0014 22 00 00 E1 +         jsl   $E10000 \par }\pard \qj\fi450\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 The macro processor determined which actual parameters to substitute for which symbolic parameters by matching their relative positions in the macro call statements with those in the macro definition. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Once conditional assembly instructions are introduced below, it will be seen that there are times when a positional parameter may (optionally) not be coded.  In this case, nothing need be coded in the source file. However, all commas must be included, as if something had been coded.  The macro processor keeps count of the position using the commas, so that later positional parameters appear in the right place. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Keyword Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Keyword Parameters\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:keyword parameters\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A keyword parameter is another way to reference a symbolic parameter defined in the operand field of a macro statement.  The name of the symbolic parameter is typed (the beginning '&' is }{\i\f4\fs20 not}{\f4\fs20  typed), followed by an equal sign, and the value to assign it.  For example, a call to the PUTCHAR macro could be coded as:\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 0008 0002                       putchar c2=#'F',c1=#'Z' \par      0002 A9 5A 00    +         lda   #'Z' \par      0005 48          +         pha \par      0006 A2 0C 18    +         ldx   #$180C \par      0009 22 00 00 E1 +         jsl   $E10000 \par      000D A9 46 00    +         lda   #'F' \par      0010 48          +         pha \par      0011 A2 0C 18    +         ldx   #$180C \par }\pard \li360\widctlpar\adjustright {\f6\fs18      0014 22 00 00 E1 +         jsl   $E10000 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When keyword parameter substitution only is used, the order is not important.  The same rules as for positional parameters regarding commas and blanks do apply, however.  Keyword and positional parameters can be mixed.  If this is done, keyword parameters take up a space, and are counted for determining positions.  The macro processor simply counts the number of commas encountered when setting values for positional parameters.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Subscripting Parameters in Macro Call Statements}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Subscripting Parameters in Macro Call Statements\tcl2}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:arrays of\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:calling}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par All types of symbolic parameters may be subscripted.  Character type symbolic parameters defined in the macro definition statement are subscripted by including the subscripted variables in parentheses on the macro call line.  For example, if a macro call statement contained the following phrase in the operand field\par \par }\pard \qj\fi440\widctlpar\tqr\tx1440\tqr\tx2340\adjustright {\f6\fs18 \tab \tab sub=(ALPHA,,GAMMA)\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par (an example of keyword parameter substitution), the symbolic parameter &SUB for the given expansion would have three subscripts allowed.  The initial value of each element would be:\par \par }\pard \qj\fi440\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab &sub(1)\tab 'ALPHA'\par \tab &sub(2)\tab null string\par }\pard \qj\fi440\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab &sub(3)\tab 'GAMMA'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par To effectively use subscripted parameters, the macro itself would have to be coded so as to detect the number of subscripts allowed and to take appropriate action via conditional assembly directives. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Explicitly Defined Symbolic Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Explicitly Defined Symbolic Parameters\tcl2}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:scope}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In addition to being defined implicitly in the macro definition statement, as in the case of character-type symbolic parameters, all symbolic parameter types (arithmetic, boolean, and character) may be declared explicitly.   Explicitly defined symbolic parameters are not set with actual parameters via a macro call.  Rather, they are used as internal variables within a macro or source file.  Symbolic parameters may be defined either for the current macro expansion or for the entire subroutine.  Defining symbolic parameters whose scope is the entire subroutine allows macros to communicate with each other.  Symbolic parameters which are only valid inside a macro are called local symbolic parameters; those valid throughout the subroutine are called global symbolic parameters. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLB directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLC directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GBLA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GBLB directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GBLC directive}}}{\v\f4\fs20 \par }{\f4\fs20 The directives LCLA, LCLB, and LCLC are used to explicitly define local symbolic parameters.  The directives GBLA, GBLB, and GBLC are used to explicitly define global symbolic parameters.  A symbolic parameter definition statement does not contain a label.  The operand field consists of the name of the symbolic parameter to be defined.  If the symbolic parameter is to be subscripted, the maximum allowable subscript must be specified in parentheses immediately following the name of the symbolic parameter.  Subscripts can range from 1 to 255.  Only a single subscript is allowed.  Subscripts can range from 1 to 255.  A symbolic parameter used as a subscript for another symbolic parameter cannot be subscripted.  Some examples are:\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\tx3600\adjustright {\f6\fs18 \tab lcla\tab &a1\tab define local arithmetic sym. parm. &a1\par \tab gbla\tab &num(10)\tab define global arith. sym. parm. array &num\par \tab lclb\tab &log(3)\tab define local boolean sym. parm. array &log\par \tab gblb\tab &true\tab define global boolean sym. parm. &true\par \tab lclc\tab &str\tab define local character sym. parm. &str\par \tab gblc\tab &names(80) \tab define global char. sym. parm. array &names\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Symbolic parameter definition statements are not printed in the output listing unless they contain errors or TRACE ON has been coded.\par }{\v\f4\fs20  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETB directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETC directive}}}{\v\f4\fs20 \par }{\f4\fs20 Values are explicitly assigned to symbolic parameters with the SETA, SETB, and SETC directives.  The label field contains the name of the symbolic parameter, the opcode field contains a SETx directive whose type (A, B, or C) matches the type used to define the parameter, and the operand field contains the value to assign to the symbolic parameter.  Assuming the definitions above, the following statements initialize the symbolic parameters:\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\tx3420\adjustright {\f6\fs18 &a1\tab seta\tab 2\tab set &A1 to 2\par &num(3)\tab seta\tab 10\tab set the 3rd value of the array &NUM to 10\par &log(&a1)\tab seta\tab 0\tab set the 2nd value of the array &LOG to false\par &str\tab setc\tab 'hey, you!'\tab set &STR to the string 'hey, you!'\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\v\f4\fs20 \par }{\f4\fs20 \par Using the SETx directives, their values may be set and reset during macro expansions, resulting in an extremely powerful conditional assembly capability. \par In the following example, assume that four symbolic parameters have been defined, as listed below.  The maximum allowable subscripts for the subscripted symbolic parameters are shown with the symbolic parameter name.  Next is the type, followed by the value.  Subscripted symbolic parameters have their values listed on successive lines. \par \par }\pard \qj\fi1080\keepn\widctlpar\adjustright {\f6\fs14     }{\f6\fs14\ul name}{\f6\fs14            }{\f6\fs14\ul type}{\f6\fs14       }{\f6\fs14\ul value(s)}{\f6\fs14 \par \par     &art           A         $FE\par     &bin(2)        B         1  (true)\par                              0  (false)\par     &char          C         'LABEL'\par     &char2(3)      C         'STRING1'\par                              ''  (null string)\par                              'A'\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par Below left are instructions as typed in a macro file, with the instructions as expanded by the macro processor on the right. \par \par }\pard \fi450\keepn\widctlpar\tx1440\tx2340\tx4410\tx5400\tx6300\adjustright {\f6\fs18 &char\tab lda\tab &char2(1)\tab LABEL\tab lda\tab STRING1\par \tab sta\tab &char.&bin(2)\tab \tab sta\tab LABEL0\par \tab lda\tab #&art\tab \tab lda\tab #254\par \tab beq\tab L&bin\tab \tab beq\tab L1\par \tab lda\tab lb&char2(2)\tab \tab lda\tab lb\par L&bin(1)\tab sta\tab eq&bin(2)\tab L1\tab sta \tab eq0\par }\pard \fi450\widctlpar\tx1440\tx2340\tx4410\tx5400\tx6300\adjustright {\f6\fs18 \tab ld&char2(3) #1\tab \tab ldA\tab #1\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Note that a boolean symbolic parameter becomes zero if false and one if true.  The null string is valid; it is replaced by nothing. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:concatenation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:dot operator}}}{\v\f4\fs20 \par }{\f4\fs20 The second line demonstrates the use of the period to concatenate symbolic parameters.  The period itself does not appear in the final line.  It can be used after any symbolic parameter, regardless of how that parameter was defined.  It must be used if a symbolic parameter is followed by a character, or if a subscript is followed by a mathematical symbol or expression. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Predefined Symbolic Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Predefined Symbolic Parameters\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 &SYSCNT symbolic parameter\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The assembler contains five predefined symbolic parameters which you can use in your programs.  A permanent global symbolic parameter called &SYSCNT of type arithmetic is available.  Its value is set to one at the beginning of each subroutine and is incremented at the beginning of each macro expansion.  It is used to prevent labels defined inside macros from being duplicated if the same macro is used more than once in the same subroutine.  This is done by concatenating &SYSCNT to any labels used within the macro definition itself.  For example, the macro\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETC directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\tx2160\adjustright {\f6\fs14 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab macro\tab \par \tab demo.syscnt  &c1\tab \par \tab lclc\tab &c2\par &c2\tab setc\tab &c1.&syscnt\par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18 \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would set &C2 to a different value each time it is called, regardless of the parameter &C1.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 &SYSNAME symbolic parameter\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 &SYSDATE symbolic parameter\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 &SYSTIME symbolic parameter\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Three predefined character type symbolic parameters are available.  &SYSNAME expands to the name of the current segment.  It is useful in debug macros, which can automatically indicate what segment they are in.  &SYSDATE expands to the date when the assembly started, and &SYSTIME to the time.  The format for the date is DD MMM YY, while the format for the time is HH:MM.\par For example, the comment\par \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18 !    &systime &sysdate\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would expand to\par \par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18 !   20:04 01 May 90\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par if the program in which it appeared was assembled at 8:04PM on May 1, 1990.  These directives can be used to time and date stamp program executions, as in\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs14 \tab \par }{\f6\fs18 \tab dc \tab c'Prog X run at &SYSTIME on &SYSDATE'\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par The ASCII string will then appear in the executable program image.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 &SYSOPR symbolic parameter\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 The last predefined symbolic parameter is named &SYSOPR.  It can only be used within a macro, and must appear in the macro definition line as the only parameter.  It is of type character, and is set to the entire operand field of the macro call, beginning with the first non-space character following the call.  The operand field of the macro call must contain a value or an error will result.  An example of its use:\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab macro\par \tab demo.sysopr  &SYSOPR\par ;'&SYSOPR'\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par if called in a program with these lines\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18         demo.sysopr  Hey, you! How do you like programming the Apple IIGS?\par         demo.sysopr  oh...I guess I like it pretty well...  \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would result in the following expansions:\par \par }{\f6\fs18 'Hey, you! How do you like programming the Apple IIGS?'\par 'oh...I guess I like it pretty well...'\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par &SYSOPR's main use is to allow the programmer a way to parse his own macro operands.  It was used extensively, for example, in writing Byte Works' }{\i\f4\fs20 Merlin-to-ORCA Source Code Translator}{\f4\fs20 .\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Sequence Symbols}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Sequence Symbols\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbols\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The conditional assembly branch instructions AGO and AIF must have some place to go.  This is provided by sequence symbols. \par A sequence symbol is a line with a period in column one, followed by a label.  Comments may follow the label after at least one space.  Instructions contained in the line are treated as comments.  The line is not printed in the output listing unless TRACE ON is used. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Attributes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Attributes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 count attribute\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par In certain cases it is desirable to know something about a label or symbolic parameter other than its value.  This information is provided via attributes, which may be thought of as functions that return information about a label or symbolic parameter. \par An attribute is coded as an attribute letter, a colon, and the label or symbolic parameter it is to evaluate.  For example, the length attribute of the label LABEL is coded as\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 L:label\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Attributes may be used in operands in the same way that a constant is used. \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 C: Count}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 C\: Count\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The count attribute gives the number of subscripts defined for a symbolic parameter.  It is normally used to find out if an array of values has been implicitly assigned to a symbolic parameter by a macro call.  It can also be used to find out if a symbolic parameter (or label) was defined at all; if not, the count attribute is zero.  The count attribute of a defined label is one.  In the example below, the character symbolic array &ADR is assigned the values passed on the command line in the call to the ST1 macro.  The arithmetic symbolic parameter &CNT is used internally to perform a loop to assign the values.  The loop ends when &CNT is greater than the COUNT of &ADR, set to the number of subscripts as determined from the macro call: \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Macro Definition:\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLA directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs14 \par }\pard \fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab macro\par &lab\tab st1\tab &adr\par \tab lcla\tab &cnt\par &cnt\tab seta\tab 1\par &lab\tab lda\tab #1\par .top\par \tab sta\tab &adr(&cnt)\par &cnt\tab seta\tab &cnt+1\par \tab aif\tab &cnt<=C:&adr,^top\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Macro Use:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab st1\tab (N1,N2,N3)\par +\tab lda\tab #1\par +\tab sta\tab N1\par +\tab sta\tab N2\par +\tab sta\tab N3\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 L:  Length}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 L\:  Length\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 length attribute\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The length attribute of a label is the number of bytes generated by the line that defined the label. \par The length attribute of an arithmetic symbolic parameter is four.  For a boolean symbolic parameter it is one.  For a character symbolic parameter, it is the number of characters in the current string.  If the symbolic parameter is subscripted, the subscript of the desired element should be specified; otherwise, the first element is assumed.  The macro below is used to define a "Pascal string;" that is, a string whose first byte is its length, followed by the characters forming the string:\par Macro Definition:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DW macro}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }\pard \fi360\widctlpar\tx1440\tx2340\adjustright {\f6\fs14 \par }\pard \fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab macro\par &lab\tab dw\tab &str\par &lab\tab dc\tab i1'l:~&syscnt\par ~&syscnt\tab dc\tab c"&str"\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Macro Use:\par \par }\pard \fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18  msg\tab dw\tab 'Hello, world.' \par +MSG\tab dc\tab i1'l:~2' \par }\pard \fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 +~2\tab dc\tab c"Hello, world." \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 S:  Setting}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 S\:  Setting\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 setting attribute\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:cpu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 word size}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Setting is a special attribute that returns the current setting of one of the flags set using directives whose operand is ON or OFF.  If the current setting is ON, the result is 1, otherwise the result is 0.  For example, if it were necessary to write a macro which expanded to two different code sequences depending on whether the accumulator was set to 8 or 16 bits on a 65816, one could use S:LONGA to test the current setting of the LONGA directive.  The directives which accept ON or OFF for operands are summarized below. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ABSADDR directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CASE directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CODECHK directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATACHK directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DYNCHK directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ERR directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPAND directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IEEE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 INSTIME directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGA directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGI directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MSB directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NUMSEX directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OBJCASE directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1800\tx3240\tx4680\tx5940\adjustright {\f4\fs14 \par }\pard \qj\fi450\keepn\widctlpar\tx1800\tx3240\tx4680\tx5940\adjustright {\f4\fs18 ABSADDR\tab CASE\tab CODECHK\tab DATACHK\tab DYNCHK\tab \par ERR\tab EXPAND\tab GEN\tab IEEE\tab INSTIME\tab \par LIST\tab LONGA\tab LONGI\tab MSB\tab NUMSEX\tab \par OBJCASE\tab PRINTER\tab SYMBOL\tab TRACE\tab 65C02\tab \par 65816\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Macro Definition:\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\v\f4\fs20 \par }\pard \fi450\keepn\widctlpar\tx1440\tx2340\tx3780\adjustright {\f6\fs14        \tab \par }{\f6\fs18 \tab macro\par &lab\tab stz1\tab &adr\par &lab\tab aif\tab S:longa=0,.A\tab Check if using long accumulator\par \tab sep\tab #$20\tab Set to short if using long\par .A\par \tab stz\tab &adr\tab Store 1-byte zero to parameter\par \tab aif\tab S:longa=0,.B\tab Reset to long if had set to short\par \tab rep\tab #$20\par .B\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Macro Use: (long accumulator)\par \par }\pard \fi450\keepn\widctlpar\tx1440\tx2340\tx3780\adjustright {\f6\fs18 \tab stz1\tab cnt \par +\tab sep\tab #$20\tab Set to short if using long \par +\tab stz\tab cnt\tab Store 1-byte zero to parameter \par +\tab rep\tab #$20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 T:  Type}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 T\:  Type\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 type attribute\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The type attribute evaluates as a character.  The type attribute of a label indicates the type of the operation in the line that defined the label.  For a symbolic parameter, the type attribute is used to distinguish between A, B and C type symbolic parameters.  The character that is returned for each type is indicated in the table below: \par \par }\pard \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright {\f4\fs18     }{\f4\fs18\ul Type}{\f4\fs18   \tab }{\f4\fs18\ul Meaning}{\f4\fs18 \par }{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORG directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALIGN directive}}}{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:booleans}}}{\pard\plain \qj\fi450\keep\keepn\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 \par }{\f4\fs18     \par     A \tab Address Type DC Statement\par     B   \tab Binary Type DC Statement\par     C  \tab Character Type DC Statement\par     D  \tab Double-Precision Floating-Point Type DC Statement\par     E\tab Extended Precision Floating-Point Type DC Statement\par     F   \tab Floating-Point Type DC Statement\par     G   \tab EQU or GEQU Directive\par     H   \tab Hexadecimal Type DC Statement\par     I   \tab Integer Type DC Statement\par     K    \tab Reference Address Type DC Statement\par     L   \tab Soft Reference Type DC Statement\par     M   \tab Instruction\par     N   \tab Assembler Directive\par     O   \tab ORG Statement\par     P   \tab ALIGN Statement\par     S    \tab DS Statement\par     X   \tab Arithmetic Symbolic Parameter\par     Y    \tab Boolean Symbolic Parameter\par     Z    \tab Character Symbolic Parameter\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If a DC statement contains more than one type of variable, the first type in the line determines the type attribute. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 The macro below detects if its passed parameter is a 4-byte floating-point number:\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLC directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETC directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MNOTE directive}}}{\v\f4\fs20 \par }\pard \fi360\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs14 \par }\pard \fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab macro\par &lab\tab phf\tab &adr\par \tab lclc\tab &C\par &C\tab setc\tab T:\par \tab aif\tab &C&adr="F",.A\par \tab mnote\tab "Must be floating point",16\par .A\par &lab\tab lda\tab &adr+2\par \tab pha\par \tab lda\tab &adr\par \tab pha\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Macro Use:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab phf\tab num\par +\tab lda\tab num+2\par +\tab pha\par +\tab lda\tab num\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 +\tab pha\par \tab .\par \tab .\par \tab .\par  num\tab dc\tab f'4.3'\par }{\v\f6\fs18 .ib).macros: writing;\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs28 Conditional Assembly and Macro Directives}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Conditional Assembly and Macro Directives\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par It is worth noting that many assembler directives are not printed, yet they do have a label field.  Generally, it is not a good idea to put labels in this field, since the line will not be found in the output listing unless the label is coded. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Examples of macro definitions and how they use conditional assembly directives can be found in the macro library.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ACTR}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ACTR\tcl3}}}{\b\f4 \tab Assembly Counter\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ACTR directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 conditional assembly\:looping}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab ACTR expression\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each time a branch is made in a macro definition, a counter is decremented.  If it reaches zero, processing of the macro stops, to protect from infinite loops. \par The ACTR directive is coded with a number from 1 to 255 in the operand field.  The counter is then assigned this value.  The ACTR directive is used to limit the number of loops caused by conditional assembly branches.  In loops with more than 255 iterations, it must be reset within the body of the loop to prevent the counter from reaching zero. \par The counter value is set to 255 automatically at the beginning of each macro. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\v\f4\fs20 \par }{\f4\fs20 The ACTR directive is not printed unless it contains an error or TRACE ON is used. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Example:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab lcla\tab &n1\par &n\tab seta\tab 3000\par .top\tab \par \tab actr\tab 100\par &n1\tab seta\tab &n1-1\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab aif\tab &n1,^top\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 AGO}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AGO\tcl3}}}{\b\f4 \tab Unconditional Branch\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AGO directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 conditional assembly\:branching}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbols}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab AGO seq-symbol\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operand contains a sequence symbol.  The macro definition (or subroutine, if not used in a macro) is searched for a matching sequence symbol.  Processing continues with the instruction immediately following the sequence symbol.\par The search range for a source file includes the entire file, not just the subroutine containing the AGO directive.  Searching begins in the forward direction and continues until the sequence symbol is found or the end of the file is reached.  If the sequence symbol is not found, the search then begins with the instruction before the AGO directive and continues toward the beginning of the file. \par The search process in a macro definition is similar, except that the search will not cross an MEND or MACRO directive. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AGO directive}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\v\f4\fs20 \par }{\f4\fs20 Searches for sequence symbols will not cross into a copied or appended file; they are limited to the file in memory. \par The AGO directive is not printed in the output listing unless it contains an error or TRACE ON is used.\par In the following example, the assembler encounters the initial AGO directive.  Processing continues at the sequence symbol.  All lines between the AGO and sequence symbol are ignored by the assembler. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab ago\tab .there\par ! This line is ignored.\par .there\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Processing branches is one of the most time consuming tasks performed by the assembler.  For that reason, it should be kept in mind that when looking for a sequence symbol, the assembler searches forward first, then backward.  If a sequence symbol appears before the branch, code a ^ character instead of a period for the first character of the sequence symbol.  This forces the assembler to skip the forward search, proceeding directly to the backward search.  For example,\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab ago\tab ^there\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par will not search forward at all, but will search backward in the file. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 AIF}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AIF\tcl3}}}{\b\f4 \tab Conditional Branch}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 conditional assembly\:branching}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbols}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembler}}}{\v\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \par \tab [lab]\tab AIF expression,seq-symbol\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operand contains a boolean expression followed by a comma and a sequence symbol.  The boolean expression is evaluated.  If true, processing continues with the first statement following the sequence symbol; if false, processing continues with the first statement following the AIF directive.  As with the AGO directive, the . in the sequence symbol may be replaced with a ^ character to speed up branches in the case where the destination sequence symbol comes before the AIF directive. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\v\f4\fs20 \par }{\f4\fs20 The AIF directive is not printed in the output listing unless it contains an error or TRACE ON is used.\par As an example, consider a file which contains the following statements.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LCLA directive}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab lcla\tab &loop\par &loop\tab seta\tab 4\par .top\par \tab asl\tab A\par &loop\tab seta\tab &loop-1\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab aif\tab &loop>0,.top\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par The output listing will contain these lines:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab asl\tab A\par \tab asl\tab A\par \tab asl\tab A\par \tab asl\tab A\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par While the above example is very straight forward, there is a more efficient way to code it.  Coding for efficiency, the loop would be\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab lcla\tab &loop\par &loop\tab seta\tab 4\par .top\par \tab asl\tab A\par &loop\tab seta\tab &loop-1\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab aif\tab &loop,^top\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The first difference, which appears in the last line, is that we have used the ^ character on the symbolic parameter to indicate that the label occurs before the AIF statement.  This allows the assembler to skip searching for .TOP in the forward direction, saving a great deal of time.  A smaller savings is also realized in the same statement by depending on the fact that any non-zero value is treated as true in a logical expression.  The branch will be made as long as &LOOP is non-zero.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 AINPUT}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AINPUT\tcl3}}}{\b\f4 \tab Assembler Input\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AINPUT directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard input}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab sym-parm AINPUT [string]\tab \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operand is optional and, if coded, consists of a literal string.  If the operand is coded, the string contained in the operand is printed on the screen during pass one as an input prompt.  The assembler then waits for a line to be entered from the standard input (usually the keyboard, but it can be redirected from a text file).  The string entered is assigned to the character type symbolic parameter specified in the label field. \par During pass one, keyboard responses are saved by the assembler.  When an AINPUT directive is encountered on pass two, the response given in pass one is again placed in the symbolic parameter specified in the label field.  Thus, keyboard response is only needed one time for each input, but the symbolic parameter is set to the response on both pass one and pass two.  This means that it is safe to use the response for conditional branching. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Example:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 &result\tab ainput\tab 'Prompt: '\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 AMID}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AMID\tcl3}}}{\b\f4 \tab Assembler Mid String\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AMID directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab sym-parm AMID string,express,express \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This is a special kind of character type set symbol which provides a mid-string function.  It has three arguments in the operand field, separated by commas.  Embedded blanks are not allowed. \par The first argument is the string to be operated on.  It must be a simple string (no concatenation is allowed).  If the string contains embedded blanks or commas, it must be enclosed in quote marks.  Quote marks inside quote marks must be doubled. \par The second and third arguments are of type arithmetic.  The second argument specifies the position within the target string of the first character to be chosen.  It must be greater than zero.  Characters from the target string are numbered sequentially, starting with one.  The third argument specifies the number of characters to be chosen. \par If the combination of the last two arguments result in an attempt to select characters after the last character of the target string, the selection is terminated.  Characters already selected are still valid. \par The resulting string is assigned to the character type symbolic parameter specified in the label field. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\tx5040\adjustright {\f6\fs18\ul instruction}{\f6\fs18 \tab \tab }{\f6\fs18\ul resulting string\par }{\f6\fs18 \par &char\tab amid\tab 'TARGET',2,3     \tab ARG\par &char\tab amid\tab 'TARGET',5,3     \tab ET\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\tx5040\adjustright {\f6\fs18 &char\tab amid\tab 'TARGET',7,3     \tab null string\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 ASEARCH}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ASEARCH\tcl3}}}{\b\f4 \tab Assembler String Search\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASEARCH directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab sym-parm ASEARCH string,string,express [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This is a special form of arithmetic set symbol.  It implements a string search function for character type symbolic parameters. \par The ASEARCH directive has three arguments.  The first is of type character, and is the target string to be searched.  The second is also of type character, and is the string to search for.  The last is of type arithmetic, and is the position in the target string to begin the search.  The search can be conducted for any sequence of keyboard characters. \par The label field contains an arithmetic symbolic parameter.  It is set to the character position in the target string where the search string was first found.  If the search string was not found, it receives the value zero. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\tx5040\adjustright {\f6\fs18\ul instruction}{\f6\fs18 \tab \tab }{\f6\fs18\ul resulting value\par }{\f6\fs18 \par &num\tab asearch\tab 'TARGET',GE,1        \tab 4\par &num\tab asearch\tab 'TARGET',GE,5        \tab 0\par &num\tab asearch\tab 'TARGET',X,1         \tab 0\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 GBLA}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GBLA\tcl3}}}{\b\f4 \tab Declare Global Arithmetic Symbolic Parameter}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GBLA directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:scope}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:integers}}}{\v\f6\fs20 \par }{\f6\fs20 \par \tab  \tab GBLA sym-parm\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Defines the arithmetic symbolic parameter }{\i\f4\fs20 sym-parm}{\f4\fs20 .  The symbolic parameter is valid for the rest of the segment that it is defined in, including inside macros and in the source file itself.\par The symbolic parameter can be declared as an array by following the name with the number of subscripts enclosed in parentheses.  If used, the subscript must be in the range 1 to 255.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 GBLB}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GBLB\tcl3}}}{\b\f4 \tab Declare Global Boolean Symbolic Parameter}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GBLB directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:booleans}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:scope}}}{\v\f6\fs20 \par }{\f6\fs20 \par \tab  \tab GBLB sym-parm\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Defines the boolean symbolic parameter }{\i\f4\fs20 sym-parm}{\f4\fs20 .  The symbolic parameter is valid for the rest of the segment in which it is defined, including inside macros and in the source file itself.\par The symbolic parameter can be declared as an array by following the name with the number of subscripts enclosed in parentheses.  If used, the subscript must be in the range 1 to 255.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 GBLC}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GBLC\tcl3}}}{\b\f4 \tab Declare Global Character Symbolic Parameter}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GBLC directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:strings}}}{\v\f6\fs20 \par }{\f6\fs20 \par \tab  \tab GBLC sym-parm\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Defines the character symbolic parameter }{\i\f4\fs20 sym-parm}{\f4\fs20 .  The symbolic parameter is valid for the rest of the segment in which it is defined, including inside macros and in the source file itself.\par The symbolic parameter can be declared as an array by following the name with the number of subscripts enclosed in parentheses.  If used, the subscript must be in the range 1 to 255.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 GEN}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GEN\tcl3}}}{\b\f4 \tab Generate Macro Expansions}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab GEN ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If GEN is turned on, all lines generated by macro expansions are shown on the output listing.  Each line generated by a macro has a + character to the left of the line.  If GEN is turned off, only the macro call is printed in the assembly listing.  Errors within the macro expansion are still printed, along with the line causing the error. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 LCLA}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LCLA\tcl3}}}{\b\f4 \tab Declare Local Arithmetic Symbolic Parameter}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LCLA directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:integers}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:scope}}}{\v\f6\fs20 \par }{\f6\fs20 \par \tab  \tab LCLA sym-parm\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Defines the arithmetic symbolic parameter }{\i\f4\fs20 sym-parm}{\f4\fs20 .  The symbolic parameter is valid only in the segment or macro in which it is defined.\par The symbolic parameter can be declared as an array by following the name with the number of subscripts enclosed in parentheses.  If used, the subscript must be in the range 1 to 255.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 LCLB}{\pard\plain \qj\keep\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LCLB\tcl3}}}{\b\f4 \tab Declare Local Boolean Symbolic Parameter}{\b\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LCLB directive\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:booleans}}}{\pard\plain \qj\keep\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:scope}}}{\v\f6\fs20 \par }{\f6\fs20 \par \tab  \tab LCLB sym-parm\tab \tab [comment]\par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par Defines the boolean symbolic parameter }{\i\f4\fs20 sym-parm}{\f4\fs20 .  The symbolic parameter is valid only in the macro or segment in which it is defined.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The symbolic parameter can be declared as an array by following the name with the number of subscripts enclosed in parentheses.  If used, the subscript must be in the range 1 to 255.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 LCLC}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LCLC\tcl3}}}{\b\f4 \tab Declare Local Character Symbolic Parameter}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LCLC directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 symbolic parameters\:strings}}}{\v\f6\fs20 \par }{\f6\fs20 \par \tab  \tab LCLC sym-parm\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par Defines the character symbolic parameter }{\i\f4\fs20 sym-parm}{\f4\fs20 .  The symbolic parameter is valid only in the segment or macro in which it is defined.\par The symbolic parameter can be declared as an array by following the name with the number of subscripts enclosed in parentheses.  If used, the subscript must be in the range 1 to 255.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 MACRO}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MACRO\tcl3}}}{\b\f4 \tab Start Macro Definition\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab  \tab MACRO\tab \tab [comment]\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The MACRO directive marks the start of a macro definition.  It can be used only in a macro file.  See the discussion at the beginning of the chapter for details on its use.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MCOPY}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MCOPY\tcl3}}}{\b\f4 \tab Copy Macro Library}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macro buffer}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab MCOPY pathname\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The name of the file is placed in a list of available macro libraries.  If an operation code cannot be identified, the macro files in the list are loaded into the macro buffer in sequence, and checked for a macro with the specified name.  The search begins with the macro file in memory, proceeds to the first file in the list of macro files, and continues through to the last file in the list, in the order the respective MCOPY directives were encountered (skipping the one that was originally in memory).  If no macro with a corresponding name is found, an error is generated. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\v\f4\fs20 \par }{\f4\fs20 No more than four macro libraries can be active at any one time.  Macro libraries cannot contain COPY or APPEND directives. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MDROP}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MDROP\tcl3}}}{\b\f4 \tab      Drop a Macro Library}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MDROP directive\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab MDROP pathname\tab \tab [comment]\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Removes }{\i\f4\fs20 pathname}{\f4\fs20  from the list of macro libraries.  This might be necessary if more than four libraries are being used.  It can also speed up processing if a library is no longer needed. \par If the macro library is active at the time the MDROP directive is encountered, it is left there and searched for macros until a search is made which loads a different library, or until an MLOAD directive is used. \par \par }\pard \qj\keep\widctlpar\tqr\tx7920\adjustright {\b\f4 MEND}{\pard\plain \qj\keep\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MEND\tcl3}}}{\b\f4 \tab End Macro Definition}{\f4 \par }\pard \qj\keep\widctlpar\adjustright {\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keep\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab  \tab MEND\tab \tab \tab [comment]\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 The MEND directive marks the end of a macro definition.  It can be used only in a macro file.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MEXIT}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MEXIT\tcl3}}}{\b\f4 \tab Exit Macro}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEXIT directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:expansion}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab \tab MEXIT\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An MEXIT directive indicates that a macro expansion is complete.  Unlike MEND, it does not indicate the end of the macro definition.  A good way to conceptualize this directive is to think of it as a return from a macro definition.  The MEND is the end of the definition, but the MEXIT can return from within the macro definition. \par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Example:\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs14 \tab macro\par &lab\tab check\tab &n1,&n2,&n3\par \tab aif\tab &n1,.A\par \tab mexit\par .B\par \tab aif\tab &n2,.B\par \tab mexit\par .B\par \tab clc\par \tab lda\tab &n1\par \tab adc\tab &n2\par \tab sta\tab &n3\par \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MLOAD}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MLOAD\tcl3}}}{\b\f4 \tab Load a Macro Library\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macro buffer}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab MLOAD pathname\tab \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The list of macro libraries is checked.  If }{\i\f4\fs20 pathname}{\f4\fs20  is not in the list, it is placed there.  The file is then loaded into the macro library buffer.\par This directive can be used to speed up assemblies by helping the macro processor to find macros.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 MNOTE}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MNOTE\tcl3}}}{\b\f4 \tab Macro Note\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MNOTE directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab MNOTE string[,expression]\tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A macro definition may include an MNOTE directive.  The operand of an MNOTE directive contains a message, optionally followed by a comma and a number.  The assembler prints the message on the output device as a separate line.  If the number is present, it is used as a severity code for an error. \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Assume that the following statements appear in a program: \par \par }\pard \fi440\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 *  mnote follows\par }\pard \fi440\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab mnote\tab 'Error!',4\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 The output would look like this: \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18 \tab 0432 10FE\tab *  mnote follows\par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab Error!\par }{\f4\fs20 \par Assuming that there were no other errors in the assembly, the maximum error level found (printed at the end of the assembly) would be four. \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 conditional assembly}}}{\v\f4\fs20 \par }{\f4\fs20 MNOTE is designed for use when conditional assembly directives are used to scan parameters passed via a macro call for correct (user defined) syntax.  Although MNOTE statements are intended for use inside macros, they are legal inside of a source program. \par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 SETA}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SETA\tcl3}}}{\b\f4 \tab Set Arithmetic Symbolic Parameter\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:integers}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab sym-parm SETA expression\tab \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operand field is resolved as a four-byte signed integer and assigned to the symbolic parameter in the label field. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 &num\tab seta\tab 4\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 &n(&num)\tab seta\tab &num2+label*4\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 SETB}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SETB\tcl3}}}{\b\f4 \tab Set Boolean Symbolic Parameter}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETB directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:booleans}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 absolute addressing}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:conditional assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab sym-parm SETB expression\tab \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operand field contains a boolean expression, which is evaluated as true or false.  If true, the symbolic parameter is assigned a value of one.  If false, or if the line contains an error, the symbolic parameter is assigned a value of zero. \par The boolean expression in the operand field for a SETB directive is coded using the same rules as an absolute address.  It is referred to as a boolean phrase because it most generally takes on a value of true or false (one or zero). \par Recall that boolean operators may be used in expressions.  If they are used, the resulting expression has a boolean value that appears as a zero or one used to indicate false and true boolean results.  Arithmetic results are also valid in a boolean expression; thus a boolean variable can be used in the same way as arithmetic variables.  Since only one byte is reserved for each boolean value, the boolean variable selects the least significant byte of an arithmetic result, using it as an unsigned arithmetic value in the range 0 to 255.  Use of such a result in a boolean statement will result in the value being evaluated as true if the value is non-zero, and false if the value is zero. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Example:\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 &flag\tab setb\tab a<&num\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 SETC}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SETC\tcl3}}}{\b\f4 \tab Set Character Symbolic Parameter\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETC directive\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:strings}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab sym-parm SETC string\tab \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operand is evaluated as a character string and assigned to the symbolic parameter.  Several sub-strings may be concatenated to make up the final string; they are separated in the operand field by plus characters (+).  Such strings must be enclosed in quote marks.  Embedded blanks outside of strings are not allowed.  Quote marks inside quote marks must be doubled. \par \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 Examples:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 &strng(4)\tab setc\tab &name1\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 &str\tab setc\tab '&fkename'+'.obj'\par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\f4 TRACE}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TRACE\tcl3}}}{\b\f4 \tab Trace Macros}{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\tx720\tx1710\tx2340\tx4320\adjustright {\f6\fs20 \tab [lab]\tab TRACE ON|}{\f6\fs20\ul OFF}{\f6\fs20 \tab \tab [comment]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Most conditional assembly directives do not get printed by the assembler.  This is to avoid line upon line of output that has no real effect on the finished program.  Especially when debugging macros, it is desirable to see all of the lines the assembler processes.  To do this, use TRACE ON.\par }\pard \qj\widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Assembler Reference Manual\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 21: Introduction to the Macro Libraries\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 390}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 391}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 385}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 21\par Introduction to the Macro Libraries\par }\pard \qj\widctlpar\adjustright {\b\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Chapter 21 \endash  Introduction to the Macro Libraries\tcl1}}}{\b\v\f4 \par }{\b\f4 \par \par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA macro and subroutine libraries provide a comprehensive set of primitive commands that greatly extend the instructions available to the assembly language programmer.  Because of this extensive library, most programmers will never need to write a macro; instead, appropriate macros are selected from the macro libraries for use in a program.  Macros that require utility subroutines will generate external references which will be automatically resolved by the link editor from the subroutine library.  The types of macros found in the libraries are listed below.\par \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\f4\fs20 \bullet \tab Input/Output macros.\par \par \bullet \tab Integer math macros.\par \par \bullet \tab Miscellaneous macros.\par \par \bullet \tab Operating system macros.\par \par \bullet \tab Shell calls.\par \par \bullet    Tool set macros.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\v\f4\fs20 \par }{\f4\fs20 \par Since the system is fairly automatic, the macros can be learned as if they were simply extensions to the 65816 instruction set.  The typical steps involved in using the libraries would be:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:calling}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACGEN utility}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\v\f4\fs20 \par }\pard \qj\fi360\li1080\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab Write a program conforming to the rules outlined in the macro descriptions.\par \par 2.\tab Run the program through the MACGEN utility to create a unique, tailored macro library for the program.\par \tab \par 3.\tab Add an MCOPY directive at the beginning of the program for the file created by MACGEN.\par \par 4.\tab Assemble and link the program in the normal way.\par }\pard \qj\fi360\widctlpar\adjustright {\v\f4\fs20 .Extras disk;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA.Extras disk}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f4\fs20 \par The ORCA macro files are located in two directories, AInclude and ORCAInclude.  AInclude contains all of the macros and equate files written by Apple Computer for use with APW and ORCA/M.  The ORCAInclude folder contains an advanced set of tool and GS/OS interface macros that support passing parameters to the tools on the macro call line, as well as a number of utility macros.  These macros are the ones described in the chapters that follow.\par If you have installed ORCA/M on a hard disk, the AInclude and ORCAInclude folders will be installed in the libraries folder of your ORCA system; you can get at these macros using the prefixes 13:AInclude or 13:ORCAInclude.  From floppy disks, these folders are on your extras disk.  On the floppies, the path names for these folders are :ORCA.Extras:Libraries:AInclude and :ORCA.Extras:Libraries:ORCAInclude.\par Macro files are standard source files.  You can edit the files to check names and parameters, but you should probably not make changes to the macros.  Instead, make any custom changes to a copy of the macro that you use with a specific program.\par The documentation of the macros is divided into five chapters.  Calling the GS/OS operating system, as well as the built-in tool box, is discussed later in this chapter.  This chapter also covers topics of general interest to all (or most) of the macros.  This includes definition of the data formats used by the macros, as well as the addressing modes which are common throughout the macro libraries.  The next four chapters discuss the macros themselves.  Macros are presented by topic.  The first section deals with the mathematics macros, the second with input and output, the third with shell macros, and the last chapter with those macros that did not fit into one of the previous chapters.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 GS/OS Macros}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 GS/OS Macros\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f4\fs20 \par }{\f4\fs20 GS/OS provides a very regular set of subroutine calls which allow most of the common functions of disk interface to be performed.  The macros in this section are primarily designed to "hide the ugly," freeing you from looking up the op codes associated with the operating system calls and helping avoid possibly disastrous results of misplacing the addresses of the control blocks usually associated with these calls.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Macro Naming Conventions}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Macro Naming Conventions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\v\f4\fs20 .GS.OS file;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 M16.GS.OS file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS macros}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS macros}}}{\v\f4\fs20 \par }{\f4\fs20 The operating system calls are in the macro file ORCAInclude:M16.GS.OS.  It contains calls to both ProDOS 16 and GS/OS.  The calls to ProDOS 16 use the same name as you would find in the }{\i\f4\fs20 ProDOS 16\u8482\'aa Reference Manual}{\f4\fs20 , with an underscore character before the name.\par Unlike the tool macros, Apple has changed the style of the ProDOS macros over the years.  While the current versions of the ProDOS macros all start with an underscore character, there was a time when the underscore character was not used.  To maintain compatibility with programs written with the older style of ProDOS macros the M16.GS.OS file includes a full set of macros with the underscore character, and another full set that does not include the underscore.\par The GS/OS operating system has most of the same calls that were in ProDOS, so there needs to be some way of distinguishing between the GS/OS macros and the ProDOS macros.  Unfortunately, the mechanism used changed fairly early on, so we again have two distinct macro naming conventions.  One convention placed the characters OS before each of the macro names, while another convention placed GS after the names of the calls.  The current trend seems to be to use the GS suffix, but the M16.GS.OS file actually supports both conventions.  Once again, underscores have been added; the macros that use the GS suffix all come both with and without the underscore character.\par There is one other area of change in the macros.  Early versions of the ProDOS and GS/OS macros used underscores in complex call names, like GET_PATH_NAME.  These underscores do not appear in the call names listed in the }{\i\f4\fs20 ProDOS 16\u8482\'aa Reference Manual}{\f4\fs20 , or the }{\i\f4\fs20 GS/OS\u8482\'aa Reference Manual}{\f4\fs20 .  When these names have been used in older macro files, either those supplied my Apple Computer or those supplied by the Byte Works, the old names are still in the M16.GS.OS macro file, but there are newer versions of each of these macros that do not include the extra underscore characters.\par Putting all of this together, you should be able to use M16.GS.OS to generate macros for any existing program, whether that program used older versions of the ProDOS or GS/OS macros or the latest version.  For new programs, type the call names exactly as they are in the reference manuals, with no extra imbedded underscore characters.  Precede each macro name with an underscore character, and add the characters GS after any GS/OS call.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Inside the GS/OS Macros}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Inside the GS/OS Macros\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Each call to the operating system consists of a JSL to $E100A8, followed by a two-byte command number and a four-byte address of the control record.  The control record is a section of code which defines data fields.  All communication is through the control record; this is where the operating system gets the inputs for the call, as well as where the outputs are placed.  Each of the operating system macros requires a single parameter, the absolute address of the control record.  Calls to either operating system are distinguished in the command number.  Calls to ProDOS 16 use a command number of the form $00xx, while those to GS/OS use a command number of the form $20xx.\par As an example, a CREATE call to GS/OS is demonstrated below.\par }\pard \qj\fi360\widctlpar\tx1710\tx2340\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\tx3600\adjustright {\f6\fs18 \tab _CreateGS crRec\tab call GS/OS to create new file\par \tab bcs\tab error\tab branch to err handler if error returned\par }\pard \qj\fi450\widctlpar\tx1710\tx2340\tx3600\adjustright {\f6\fs18 \par }\pard \qj\widctlpar\tx1710\tx2340\tx3600\adjustright {\f4\fs20 The code below defines the record used with the create call.  Notice the data fields declared.  Almost every operating system call requires data fields, defined in a specific order, as part of the control record.\par }\pard \qj\fi450\widctlpar\tx1710\tx2340\tx3600\adjustright {\pard\plain \qj\fi450\widctlpar\tx1710\tx2340\tx3600\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 DC directive}}}{\pard\plain \qj\fi450\widctlpar\tx1710\tx2340\tx3600\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 ANOP directive}}}{\v\f6\fs18 \par }{\f6\fs18 \par }\pard \qj\fi450\widctlpar\tx1440\tx2340\tx3600\adjustright {\f6\fs14 crRec}{\f6\fs16 \tab }{\f6\fs14 anop}{\f6\fs16 \tab \tab Create definition\par }{\f6\fs14 crPCount\tab dc\tab i}{\f6\fs16 '7'\par }{\f6\fs14 crName}{\f6\fs16 \tab }{\f6\fs14 dc\tab a}{\f6\fs16 4'}{\f6\fs14 pathName}{\f6\fs16 '\tab pointer to path name of new file\par }{\f6\fs14 crAcc}{\f6\fs16 \tab }{\f6\fs14 dc\tab i}{\f6\fs16 '$00C3'\tab define access flags\par }{\f6\fs14 crType}{\f6\fs16 \tab }{\f6\fs14 dc\tab i}{\f6\fs16 '4'\tab ASCII text file\par }{\f6\fs14 crAux}{\f6\fs16 \tab }{\f6\fs14 dc\tab i}{\f6\fs16 4'0'\tab sequential access\par }{\f6\fs14 crStore}{\f6\fs16 \tab }{\f6\fs14 dc\tab i}{\f6\fs16 '1'\tab standard file\par }{\f6\fs14 crEOF}{\f6\fs16 \tab }{\f6\fs14 dc\tab i}{\f6\fs16 4'$10000'\tab init. file size to 64K bytes\par }{\f6\fs14 crReSrc}{\f6\fs16 \tab }{\f6\fs14 dc\tab i}{\f6\fs16 4'0'\tab not an extended file\par }{\f6\fs14 crEnd}{\f6\fs16 \tab }{\f6\fs14 anop}{\f6\fs16 \par  \par }{\f6\fs14 pathName}{\f6\fs16 \tab }{\f6\fs14 dOSIn\tab 'myFile'}{\f6\fs16 \tab name of file to create\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 word size}}}{\v\f4\fs20 \par }{\f4\fs20 Operating system calls must be made in native mode.  Registers can be either eight or sixteen bits.  If you were using short mode before the call, you will be in short mode following the call.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Tool Set Macros}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Tool Set Macros\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\v\f4\fs20 .TOOLS file;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 M16.TOOLS file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loader}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW Macros}}}{\v\f4\fs20 \par }{\f4\fs20 \par The Apple II}{\f4\fs18 GS }{\f4\fs20 has an extensive set of tool calls.  Many of the ORCA macros actually translate into tool calls.  The macro file M16.TOOLS contain macros to make the tool calls described in volumes one through three of the }{\i\f4\fs20 Apple IIGS Toolbox Reference Manual}{\f4\fs20 .   The calls are organized alphabetically by tool set name.  The names given to the tool call macros are derived from the }{\i\f4\fs20 Apple II}{\i\scaps\f4\fs20 gs}{\i\f4\fs20  Toolbox Reference Manual}{\f4\fs20 .  Each name is preceded with a tilde (~).  For example, the Control Manager call CtlBootInit has a macro named ~CtlBootInit.\par These tool macros allow you to pass parameters to the tools pretty much the way you would in a high-level language, putting the parameters on the same line as the macro call.  For example, to draw a square you could use\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\tx3600\adjustright {\f6\fs18 \tab ~MoveTo #10,#10\par \tab ~LineTo #10,#100\par \tab ~LineTo #100,#100\par \tab ~LineTo #100,#10\par }\pard \qj\fi450\widctlpar\tx1440\tx2340\tx3600\adjustright {\f6\fs18 \tab ~LineTo #10,#10\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The tool macros support several addressing modes, including immediate addressing (shown in the example, above), absolute addressing, direct page addressing, long absolute addressing, indirect addressing, and long indirect addressing.  There is also a special operator, *, to tell the macro that a parameter is already on the stack, and does not need to be loaded.  For example, this sequence is equivalent to the first ~MoveTo call from the last example:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\tx3600\adjustright {\f6\fs18 \tab lda\tab #10\par \tab pha\par \tab pha\par \tab ~MoveTo *,*\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par For a detailed explanation of the various addressing modes you can use, see the next section.\par Some tools are functions, returning a result on the stack.  For these calls, you must push space on the stack before making the tool call, and the result is left on the stack when the macro is complete.  Here's a sample showing a call to GetPort showing how this works:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18 \tab pha\tab \tab make room on the stack\par \tab pha\par \tab ~GetPort\tab get the grafPort\par \tab pl4\tab port\tab pull the result and save in port\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par All of the names used in the tool macro file match the names in the toolbox reference manuals exactly; you just add the tilde character in front of the name.  Using the macro does not effect the register contents as returned by the tool in any way; the accumulator still has the error code, and the carry flag still indicates if an error was flagged.\par There is another complete set of tool macros in the AInclude folder.  These are an older style of tool macro that does not support parameters on the macro call line.  With these macros, you must push all parameters on the stack before making the macro call.  These macros are created and maintained by Apple Computer Inc., and are included in ORCA/M for your convenience.\par The Apple tool macros are contained in a series of files, one for each tool.  The macro names match the toolbox reference manuals, but again, you need to put another character before the name; this time, the character is the underscore character (_).\par In general, tool calls using the Apple tool macros are made by:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab Pushing to make room on the stack for any output values returned by the call.\par 2.\tab Pushing any needed parameters, in the order specified in the toolkit reference manual.\par 3.\tab Making the call by simply coding the correct macro name in the opcode field.\par 4.\tab Pulling any values returned by the tool call from the stack.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Here's the example showing how to draw a square, reworked to use the Apple tool macros:\par \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2340\tx3600\adjustright {\f6\fs18 \tab ph2\tab #10\par \tab ph2\tab #10\par \tab _MoveTo\par \tab ph2\tab #10\par \tab ph2\tab #100\par \tab _LineTo\par \tab ph2\tab #100\par \tab ph2\tab #100\par \tab _LineTo\par \tab ph2\tab #100\par \tab ph2\tab #10\par \tab _LineTo\par \tab ph2\tab #10\par \tab ph2\tab #10\par \tab _LineTo\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Addressing Modes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Addressing Modes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addressing modes}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA macros}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 immediate addressing}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Like the instruction set of the CPU, macros use a variety of addressing modes to increase the power and flexibility of each macro.  There are three addressing modes supported by the macros: immediate, absolute, and indirect.\par Immediate addressing is available for most macros that require an input to perform their function.  An immediate operand is coded as a pound sign (#) followed by the value for the operand.  All data types are supported.  For example,\par \par }\pard \qj\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab put8\tab #5000000000\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par would write the approximate population of the Earth to standard output.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 absolute addressing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 indirect addressing}}}{\v\f4\fs20 \par }{\f4\fs20 Absolute addresses are coded as a number, label, or expression, using the same rules as absolute addresses in instruction operands.  An absolute address designates the memory location to use as a source or destination by the macro.\par \par }\pard \qj\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab put8\tab big\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Two-byte indirect addresses take the form of an address which points to the address of the data rather than the data itself.  Indirect addressing is indicated by enclosing the absolute address where the effective address is stored in soft brackets.  Thus,\par \par }\pard \qj\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab MUL4  \tab \{P1\},\{P2\}\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par multiplies the number pointed to by P1 by the one pointed to by P2, placing the result where P1 points.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long indirect addressing}}}{\v\f4\fs20 \par }{\f4\fs20 To perform long indirect addressing, use this format:\par \par }\pard \qj\widctlpar\tx1440\tx2340\adjustright {\f6\fs18 \tab MUL4\tab [P1],[P2]\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Data Types}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Data Types\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The macros support several data types, including three lengths of integers, characters, strings, and boolean variables.  Typing is not enforced; it is possible to read a four-byte integer into an area, then access it as a two-byte integer.  The type of data in use is indicated by a single character from the table below.  This character is used as a part of the macro name.  For example, the PUTx macro can be used to write any of these variable types to an output device; the type is indicated by replacing the x with one of the characters.  Thus, PUT2 writes two-byte integers, while PUTS writes strings.\par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \tab  }{\f4\fs20\ul Character}{\f4\fs20 \tab }{\f4\fs20\ul Type}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx990\tx1710\adjustright {\f4\fs20 \tab 2 \tab \tab signed two-byte integer\par \tab 4\tab \tab signed four-byte integer\par \tab 8\tab \tab signed eight-byte integer\par \tab C\tab \tab character\par \tab S\tab \tab ORCA-type string; 2 length bytes followed by sequence of characters\par \tab B\tab \tab boolean\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The general convention of using a lowercase character in the macro name to represent a group of very similar macros is followed throughout the descriptions of the macros.  This saves a great deal of space, makes the task of learning the macros easier, and serves to connect macros that might otherwise be scattered across the manual.  Lowercase letters are never used in the name of a macro, in the documentation, for anything else.  Of course, in your programs, you can use either uppercase or lowercase letters, and in our sample code we tend to use lowercase letters exclusively.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Two-Byte Integers}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Two-Byte Integers\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 two's complement notation\;}}}{\v\f4\fs20 \par }{\f4\fs20 \par As the name implies, two-byte integers require two bytes of storage each.  Two's complement notation is used, with the least significant byte stored first, followed by the most significant.  Two-byte integers range from -32768 to 32767.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Four-Byte Integers}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Four-Byte Integers\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Four-byte integers require four bytes of storage.  They are represented in two's complement notation with the least significant byte stored first, proceeding sequentially to the most significant byte, which is stored last.  The range represented by four-byte integers is -2147483548 to 2147483647.\par }{\f4\fs22 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4 Eight-Byte Integers}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Eight-Byte Integers\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs22 \par }{\f4\fs20 Eight-byte integers require eight bytes of storage, are stored in two's complement notation, and are represented with the least significant byte first, proceeding to the most significant byte.  The range represented by eight-byte integers is from -9223372036854775808 to 9223372036854775807.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs22 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Character}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Character\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs22\cgrid {\xe {\v\f4\fs22 }{\v\f4\fs22 ASCII}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs22\cgrid {\xe {\v\f4\fs22 }{\v\f4\fs22 ORCA string}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs22\cgrid {\xe {\v\f4\fs22 }{\v\f4\fs22 Pascal protocol}}}{\v\f4\fs22 \par }{\f4\fs22 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A character requires one byte for storage.  The ASCII character set is used to represent characters; in general, it doesn't matter if the high bit is on or off.  The system provides all inputs with the high bit off, and converts any outputs as needed; the only conflict arises for comparisons.  For that reason, it is recommended that character data always be represented with the high bit off. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\v\f4\fs20 \par }{\f4\fs20 Control characters have different effects on various output devices.  If an output device cannot respond to a given control character because that character is not defined, the control character is ignored.  Check the technical descriptions of individual hardware devices for details.  Programs running under ORCA use the GS/OS .CONSOLE driver, so a wide variety of control characters are supported.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Strings}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Strings\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Strings are variable length sequences of characters.  Each string is made up of three parts.  The first part, which requires one byte, contains the maximum number of characters in the string; this can range from 1 to 255.  The next byte contains the number of characters currently in the string; this ranges from 0 to the value of the maximum length.  The third field contains the characters in the string itself.  One byte is reserved in this field for each possible character in the string; unused bytes are not defined and have unreliable values.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 Strings require two bytes more than the maximum number of characters in the string for storage, because of the length fields.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Boolean Variables}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Boolean Variables\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Boolean variables require one byte of storage.  They are either TRUE (non-zero) or FALSE (zero).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Memory Usage}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Memory Usage\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 All macros and subroutine libraries allocate work space from the stack.  The program should allow at least 128 bytes of free stack space for use by the libraries.  No other memory is used by the libraries.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Side Effects}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Side Effects\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Some of the macros have side effects.  These effects are primarily manifested as destroying the contents of the registers; side effects are noted in the description of the macros.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Assembler Reference Manual\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 22: Mathematics Macros\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 402}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 401}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 393}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 C}{\b\f4\fs36 hapter 22\par Mathematics Macros\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Chapter 22 \endash  Mathematics Macros\tcl1}}}{\v\f4\fs20 \par }{\f4\fs20 \par \par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The mathematics macros provide support for the three formats of integer numbers described earlier.  When dealing with numbers, it will also be useful to look through the miscellaneous macros, which have number conversion macros and several macros which deal with two-byte integers as unsigned numbers.\par The macros in this section are contained in the file M16.ORCA, located in the ORCAInclude directory in your libraries folder.  You can access this file using the path name 13:ORCAInclude:m16.ORCA from your hard disk, or if you are using floppy disks, from :ORCA.Extras:Libraries:ORCAInclude:m16.ORCA.\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 ABSx}{\b\v\f4 ;}{\b\f4 \tab Integer Absolute Value\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ABSx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab ABS2\tab NUM1[,NUM2]\par LAB\tab ABS4\tab NUM1[,NUM2]\par LAB\tab ABS8\tab NUM1[,NUM2]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The argument. \par NUM2 - The result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The result is the absolute value of the argument.  NUM2 is optional; if it is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  No errors are possible.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }\pard \qj\li440\widctlpar\adjustright {\f4\fs20 \par }\pard \li440\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs14 \tab }{\f6\fs16 ABS2}{\f6\fs14 \tab }{\f6\fs16 \{P1\}\tab replaces the number pointed to by P1  !}{\f6\fs14 \tab \tab \tab }{\f6\fs16   with its absolute value\par }{\f6\fs14 \tab }{\f6\fs16 ABS8}{\f6\fs14 \tab }{\f6\fs16 #10000000,NUM1}{\f6\fs14 \tab }{\f6\fs16 places the value of 10,000,000 in NUM1 \par }\pard \qj\widctlpar\tx2160\adjustright {\f6\fs16 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 ADDx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ADDx\tcl2}}}{\b\f4 \tab Integer Addition\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ADDx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab ADD2\tab NUM1,NUM2[,NUM3]\par LAB\tab ADD4\tab NUM1,NUM2[,NUM3]\par LAB\tab ADD8\tab NUM1,NUM2[,NUM3]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The first argument for the addition.\par NUM2 - The second argument for the addition.\par NUM3 - The result of the addition.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A signed integer addition is performed on the two arguments, NUM1 and NUM2.  NUM3 is optional; if it is coded, the result is placed there, if it  is not coded, the result is placed at NUM1.  The contents of the accumulator  are lost.  If any operand uses indirect addressing, the contents of  the Y register are also lost.  If the operation is on four- or eight-byte  integers, the X and Y registers are both lost.  If an  overflow occurs, the V flag is set, otherwise it is cleared.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16       \tab ADD4\tab \{P1\},NUM1\tab adds the 4-byte integer pointed \par !\tab \tab \tab   to by P1 to the 4-byte integer \par !\tab \tab \tab   at NUM2, saving the result in\par !\tab \tab \tab   the location pointed to by P1 \par        \tab ADD8\tab NUM1,#4\tab adds 4 to the 8-byte integer at \par !\tab \tab \tab   NUM1\par        \tab ADD2\tab NUM1,NUM2,NUM3\tab adds the 2-byte integers at NUM1 \par !\tab \tab \tab   and NUM2, saving the result at\par !\tab \tab \tab   NUM3\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 CMPx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CMPx\tcl2}}}{\b\f4 \tab Integer Compare\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab CMP2\tab NUM1,NUM2\par LAB\tab CMP4\tab NUM1,NUM2\par LAB\tab CMP8\tab NUM1,NUM2\par LAB\tab CMPL\tab NUM1,NUM2\par LAB\tab CMPW\tab NUM1,NUM2\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The first argument. \par NUM2 - The second argument.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par The first integer is compared to the second integer.  The C and Z flags are set in the same way that they are set for CMP instructions; C is set if NUM1 >= NUM2 and cleared otherwise, and Z is set if NUM1 = NUM2 and cleared otherwise.  Branch instructions and branch and conditional jump macros can be used after the compare to test the condition codes.\par Unlike most two operand instructions, both operands are required for a comparison, and no result (other than the setting of the status flags) is produced.  The contents of all registers are lost.\par Unlike the 65816 compare instruction, the comparisons performed by CMP2, CMP4 and CMP8 are signed comparison.  For example, the two-byte integer $0001 is larger than $FFFF, since the first represents 1 and the second represents -1.  Signed compares are longer in terms of both space and speed than unsigned compares.\par The CMPW macro performs an unsigned compare of two 2-byte integers.\par The CMPL macro performs an unsigned compare of two 4-byte integers.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }\pard \qj\fi180\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16 \tab CMP2\tab \{P1\},#4\tab compare the 2-byte integer pointed to \par !\tab \tab \tab   by P1 to 4\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 DIVx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DIVx\tcl2}}}{\b\f4 \tab Integer Division\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DIVx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DIV2\tab NUM1,NUM2[,NUM3]\par LAB\tab DIV4\tab NUM1,NUM2[,NUM3]\par LAB\tab DIV8\tab NUM1,NUM2[,NUM3]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The first argument (numerator) for the division.\par NUM2 - The second argument (denominator) for the division.\par NUM3 - The result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A signed integer division is performed on the two arguments, dividing NUM1 by NUM2.  NUM3 is optional.  If it is coded, the result is placed there; if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If NUM2 is zero, the overflow flag is set.\par It is important to realize that this is an integer division, and that the result is an integer; thus, 3/2 is 1, not 1.5.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16        \tab DIV4\tab #7,NUM1,NUM2\tab divides 7 by NUM1, placing the result \par !\tab \tab \tab   in NUM2; the 3rd operand is \par !\tab \tab \tab   required, since the default operand \par !\tab \tab \tab   uses immediate addressing, which \par !\tab \tab \tab   cannot be used by a result\par        \tab DIV2\tab #7,#2,NUM1\tab an inefficient way to set NUM1 to 3\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 MODx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MODx\tcl2}}}{\b\f4 \tab Integer Modulo Function\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MODx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab MOD2\tab NUM1,NUM2[,NUM3]\par LAB\tab MOD4\tab NUM1,NUM2[,NUM3]\par LAB\tab MOD8\tab NUM1,NUM2[,NUM3]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The first argument (numerator) for the operation.\par NUM2 - The second argument (denominator) for the operation.\par NUM3 - The result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A signed integer division is performed on the two arguments, dividing NUM1 by NUM2; the result reported is the unsigned integer remainder.  NUM3 is optional; if is is coded, the result is placed there, if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If NUM2 is zero, the overflow flag is set.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16      \tab MOD2\tab #7,#2,NUM1\tab places 1, the remainder from the \par !\tab \tab \tab   division, into NUM1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 MULx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MULx\tcl2}}}{\b\f4 \tab Integer Multiplication\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MULx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab MUL2\tab NUM1,NUM2[,NUM3]\par LAB\tab MUL4\tab NUM1,NUM2[,NUM3]\par LAB\tab MUL8\tab NUM1,NUM2[,NUM3]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The first argument for the multiplication.\par NUM2 - The second argument for the multiplication.\par NUM3 - The result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A signed integer multiplication is performed on the two arguments, NUM1 and NUM2.  NUM3 is optional.  If it is coded, the result is placed there; if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If an overflow of the signed result occurs, the overflow flag is set.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16      \tab MUL4\tab \{P1\},#4\tab multiplies the 4-byte integer pointed \par !\tab \tab \tab   to by P1 by 4\par         \tab MUL2\tab NUM1,NUM2,NUM3\tab multiplies the 2-byte integers at \par !\tab \tab \tab   NUM1 and NUM2, saving the result at \par !\tab \tab \tab   NUM3\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 RANx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RANx\tcl2}}}{\b\f4 \tab Integer Random Number Generator\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RANx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab RAN2\tab NUM1\par LAB\tab RAN4\tab NUM1\par LAB\tab RAN8\tab NUM1\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The result. \par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A signed integer is generated by a pseudo-random number generator, and the result saved at NUM1.  Since no argument is required, this macro becomes the only integer math macro with a single operand.  All registers are destroyed.\par The random numbers generated are evenly distributed across the entire range for the size of the integer being generated; for example, two-byte random numbers range from -32768 to 32767.\par The random number generator should be initialized by using the SEED macro before the first random number macro is generated.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16 \tab RAN8\tab NUMBER\tab places an 8-byte random number at \par !\tab \tab \tab   NUMBER\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SIGNx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SIGNx\tcl2}}}{\b\f4 \tab Integer Sign Function\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SIGNx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SIGN2\tab NUM1[,NUM2]\par LAB\tab SIGN4\tab NUM1[,NUM2]\par LAB\tab SIGN8\tab NUM1[,NUM2]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The argument. \par NUM2 - The result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The result is 0 if the argument was zero, 1 if it was positive, and -1 if it was negative.  The result is placed at NUM2 if it is coded, and at NUM1 if it is not.  No errors are possible.  The contents of all the registers are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18\dn3     \tab SIGN8\tab NUM1   \tab replaces NUM1 with the result}{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SQRTx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SQRTx\tcl2}}}{\b\f4 \tab Integer Square Root\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SQRTx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SQRT2\tab NUM1[,NUM2]\par LAB\tab SQRT4\tab NUM1[,NUM2]\par LAB\tab SQRT8\tab NUM1[,NUM2]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM1 - The argument. \par NUM2 - The result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The result is the integer square root of the argument.  NUM2 is optional.  If it is coded, the result is placed there; if it is not coded, the result is placed at NUM1.  The contents of all registers are lost.  If the argument is 0, so is the result.  If the argument is negative, the result is the correct square root for the absolute value of the argument, and the overflow flag is set.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18      \tab SQRT2\tab #450,NUM2\tab places 21 in NUM2\par       \tab SQRT4\tab \{P1\}\tab replaces the 4-byte integer \par !\tab \tab \tab   pointed to by P1 with its \par !\tab \tab \tab   square root\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SUBx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SUBx\tcl2}}}{\b\f4 \tab Integer Subtraction\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SUBx macro\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SUB2\tab NUM1,NUM2[,NUM3] \par LAB\tab SUB4\tab NUM1,NUM2[,NUM3]\par LAB\tab SUB8\tab NUM1,NUM2[,NUM3]\par }{\f4\fs20   \par }{\b\f4\fs20 Operands:\par }{\f4\fs20                                 \par LAB - Label.\par NUM1 - The first argument for the subtraction.\par NUM2 - The second argument for the subtraction.\par NUM3 - Result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The second argument (NUM2) is subtracted from the first argument (NUM1).  NUM3 is optional.  If it is coded, the result is placed there; if it is not coded, the result is placed at NUM1.  The contents of the accumulator are lost.  If any operand uses indirect addressing, the contents of the Y register are also lost.  The overflow flag is set if there is an overflow and cleared otherwise.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16       \tab SUB4\tab \{P1\},NUM2,\{P2\}\tab subtracts the 4-byte integer at NUM2 \par !\tab \tab \tab   from the 4-byte integer pointed at \par !\tab \tab \tab   by P1, placing the result at the \par !\tab \tab \tab   location pointed to by P2\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Assembler Reference Manual\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 23: Input and Output Macros\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 416}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 415}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 403}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Chapter 23\par Input and Output Macros\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 23 \endash  Input and Output Macros\tcl1}}}{\v\f4 \par }{\f4 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 O file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 M16.I.O file}}}{\v\f4\fs20 \par }{\f4\fs20 \par The macros in this section provide for the input and output of the basic data types.  All output is sent through the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  Text Tools using the _WriteChar and _ErrWriteChar calls, and all input is received through the _ReadChar call.  While running under the shell, the text tools are redirected to the GS/OS Console driver.  For programs that run independently of the shell, be sure and start some form of text tool driver; the built-in Pascal driver is a good choice.\par The macros in this section are contained in the file M16.ORCA, located in the ORCAInclude directory in your libraries folder.  You can access this file using the path name 13:ORCAInclude:m16.ORCA from your hard disk, or if you are using floppy disks, from :ORCA.Extras:Libraries:ORCAInclude:m16.ORCA.\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 ALTCH}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ALTCH\tcl2}}}{\b\f4 \tab Select Alternate Character Set\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALTCH macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab ALTCH [ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ASCII control character $0E is sent to the output device.  If the device is a CRT, this enables the alternate character set.  Printers may also use this code; see your User's Manual for details.  The contents of all registers are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par See the NORMCH macro for a way to reverse the effect.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20                                                            \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs16 \tab ALTCH\par \tab ALTCH\tab ERROUT=T\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 BELL}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 BELL\tcl2}}}{\b\f4 \tab Beep the Bell\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 BELL macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab BELL  [ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ASCII control character BEL ($07) is sent to the output device.  This beeps the speaker if the CRT is in use; most printers will also make an audible sound.  The contents of all registers are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs16      \tab BELL\par         \tab BELL\tab ERROUT=T\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 CLEOL}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CLEOL\tcl2}}}{\b\f4 \tab Clear to End of Line\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CLEOL macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab CLEOL [ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ASCII control character GS ($1D) is sent to the output device.  If the CRT is the output device, the line is cleared from the cursor to the end of the line.    The contents of all registers are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs16 \tab CLEOL\par \tab CLEOL\tab ERROUT=T\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 CLEOS}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CLEOS\tcl2}}}{\b\f4 \tab Clear to End of Screen\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CLEOS macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab CLEOS [ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ASCII control character VT ($0B) is sent to the output device.  If the CRT is the output device, the screen is cleared from the cursor to the end of the screen.    The contents of all registers are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs16 \tab CLEOS\par \tab CLEOS\tab ERROUT=T\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 COUT}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 COUT\tcl2}}}{\b\f4 \tab Character Output\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COUT macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab COUT  CHAR[,ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par CHAR - Character to write.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A character is sent to the current output device.  CHAR must be a valid operand for a LDA instruction.  A similar function is performed by the PUTC macro, but this one is generally more efficient.  The contents of all registers are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16 \tab COUT\tab #'.'\tab write a .\par \tab COUT\tab CH\tab write the character at CH\par \tab COUT\tab #' ',ERROUT=T       \tab send a space to error out\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 GETx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GETx\tcl2}}}{\b\f4 \tab Variable Input\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GETx macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DSTR macro}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab GET2\tab N1[,CR]\par LAB\tab GET4\tab N1[,CR]\par LAB\tab GET8\tab N1[,CR]\par LAB\tab GETC\tab N1[,CR]\par LAB\tab GETS\tab N1[,CR]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - Location to place the variable read.\par CR - Carriage return flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The GET macros are the standard way of reading information from external devices.  They will receive all information through the _ReadChar call in the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  Text Tools, which means that the input stream can be redirected to read from disk drives or other input devices.\par N1 is used to compute the effective address where the variable read will be stored.  It can be specified as an absolute address or an indirect address.  The type of variable being read is specified by which macro is used; the GET2 macro reads in a signed two-byte integer, while the GETS macro reads an ORCA string.   The macros, and the types they input, are:\par \par }\pard \qj\fi810\widctlpar\tx1440\adjustright {\f6\fs18 GET2\tab two-byte integer\par GET4\tab four-byte integer\par GET8\tab eight-byte integer\par GETC\tab character\par GETS\tab ORCA string; 2 length bytes followed by sequence of chars.}{\f6\fs16 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par You can use the DSTR macro to initialize the area for a string read by setting its maximum expected length.  GETS will store a carriage return (ASCII character $0D) in the byte following the string's character bytes.\par The CR parameter is a flag; simply using the CR keyword is enough to signal that the flag is true.  This is normally done by coding\par \par }\pard \fi810\widctlpar\adjustright {\f6\fs18 CR=T\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par in the macro's operand.  If CR is true, the input is followed by skipping to the end of the current line.  If CR is not true, the next GETx macro call will use the first character that was not used by the original get macro.  For Example,\par \par }\pard \qj\fi810\widctlpar\tx1440\adjustright {\f6\fs18 GET2\tab NUM1\par GET2\tab NUM2,CR=T\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would read NUM1 and NUM2 from the same input line, while\par \par }\pard \qj\fi810\widctlpar\tx1440\adjustright {\f6\fs18 GET2\tab NUM1,CR=T\par GET2\tab NUM2,CR=T\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would read the numbers from two consecutive lines.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The contents of all registers are lost.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16         \tab GET2\tab INT\tab reads a 2-byte integer from the \par !\tab \tab \tab   keyboard\par         \tab GETC\tab CHAR,CR=T\tab reads a character from the keyboard, \par !\tab \tab \tab   then skips characters until a RETURN \par !\tab \tab \tab   is typed\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 GOTOXY}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GOTOXY\tcl2}}}{\b\f4 \tab Position Cursor On Screen\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GOTOXY macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 cursor positioning}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab GOTOXY X,Y[,ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par X - Column number, counting from 0.\par Y - Row number, counting from 0.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The CRT cursor is moved to the indicated location.  If Y is larger the 23, it is set to 23; if X is larger than 79 then the cursor is placed at the far right of the screen.  Operands can be immediate or absolute.  All register contents are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs16        \tab GOTOXY\tab #4,#6     \tab places the cursor on row 6, column 4\par          \tab GOTOXY\tab N1,N2     \tab places the cursor on row N2, column N1\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 HOME}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HOME\tcl2}}}{\b\f4 \tab Form Feed\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HOME macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 cursor positioning}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab HOME  [ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ASCII control character $0C (FF) is sent to the output device.  If the device is a CRT, the screen is cleared and the cursor is placed at the upper left corner of the screen.  If the device is a printer, most printers will skip to the top of a new page.  The contents of all registers are lost.  Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs16 \tab HOME\par \tab HOME\tab ERROUT=T\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 NORMCH}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NORMCH\tcl2}}}{\b\f4 \tab Select Normal Character Set\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NORMCH macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALTCH macro}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab NORMCH [ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ASCII control character $0F is sent to the output device.  If the device is a CRT, this enables the normal character set, reversing the effect of the ALTCH macro.  The contents of all registers are lost.  Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\keep\keepn\widctlpar\tx1440\tx2160\adjustright {\f6\fs16 \tab NORMCH\par \tab NORMCH\tab ERROUT=T\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 PRBL}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PRBL\tcl2}}}{\b\f4 \tab Print Blanks\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRBL macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab PRBL\tab NUM[,ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par NUM - Number of blanks to print.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par NUM is the number of blanks to print.  It must be a valid operand for a load instruction.  If zero, 65536 blanks are printed.  The contents of all registers are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18 \tab PRBL\tab #10\tab print 10 blanks}{\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 PUTx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PUTx\tcl2}}}{\b\f4 \tab Variable Output\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PUTx macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 formatted I/O}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab PUT2\tab N1[,F1][,CR][,ERROUT]\par LAB\tab PUT4\tab N1[,F1][,CR][,ERROUT]\par LAB\tab PUT8\tab N1[,F1][,CR][,ERROUT]\par LAB\tab PUTB\tab N1[,F1][,CR][,ERROUT]\par LAB\tab PUTC\tab N1[,F1][,CR][,ERROUT]\par LAB\tab PUTS\tab N1[,F1][,CR][,ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par }\pard \qj\widctlpar\tx1080\adjustright {\f4\fs20 LAB - Label.\par N1 - Location to place the variable read.\par F1 - Field with.\par CR - Carriage return flag.\par ERROUT - Error out flag.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The PUTx macros are the standard way of writing information to external devices.  They write all information to standard output or standard error output, depending on the ERROUT flag.  All registers are lost in the process.\par The CR parameter has the same meaning and is used the same as for the GETx macro, with the exception that the variable is written instead of read.\par N1 still specifies the variable, this time for output.  The only change is that immediate addressing is allowed in addition to absolute and indirect.  It is also possible to output boolean values via the PUTB macro; this writes the string "true" if the boolean byte is non-zero, and "false" if it is zero.\par F1 specifies the field width, which defaults to 0.  This specifies the width, in characters, of the field to be written to.  If the number of characters generated by the put macro is greater than or equal to the field width, the characters generated are printed as is.  If the number of characters are less than the field width, blanks are written to right justify the characters in the field.  For example,\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18          PUTC #'c',#1\par }{\f4\fs20 \par would simply print a "c" on the screen, while\par \par }{\f6\fs18          PUTC #'c','#3\par }{\f4\fs20 \par would print two blanks, followed by a "c".\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 As with the GETS macro, the string printed by PUTS is in ORCA format:  the first byte holds the string's maximum possible length, the second byte contains its current length, and the subsequent bytes are the string's characters.  You can use the DSTR macro to define and initialize the string. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DSTR macro}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA string}}}{\v\f4\fs20 \par }{\f4\fs20 Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs16      \tab PUT2\tab INT,CR=T\tab writes the 2-byte integer to \par !\tab \tab \tab   the CRT followed by a \par !\tab \tab \tab   carriage return\par        \tab PUTS \tab #'They''''re here...',#20 \tab prints "They're here..." to \par !\tab \tab \tab   the CRT, right-justified in \par !\tab \tab \tab   a 20-byte field \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 PUTCR}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PUTCR\tcl2}}}{\b\f4 \tab Carriage Return\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PUTCR macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab PUTCR [ERROUT]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ERROUT - Error out flag.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The ASCII control character $0D (CR) is sent to the output device.  If the device is a CRT, the cursor is placed at the start of the next line, scrolling the screen to get a new line if that is necessary.  The contents of all registers are lost.\par Normally, output is sent to standard out.  If }{\f6\fs18 ERROUT=T}{\f4\fs20  is coded, output is sent to error out.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs16       \tab PUTCR\par        \tab PUTCR\tab ERROUT=T\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Assembler Reference Manual\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 24: Shell Calls\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 510}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 509}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 477}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 C}{\b\f4\fs36 hapter 24\par Shell Calls\par }\pard \qj\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 24 \endash  Shell Calls\tcl1}}}{\v\f4 \par }{\f4 \par \par }{\v\f4 .SHELL file;}{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 M16.SHELL file}}}{\v\f4 \par }{\f4 \par }{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 The shell acts as an interface and extension to GS/OS.  The shell provides several functions not provided by the operating system; these functions are called exactly like GS/OS functions.  Every time a program running under the ORCA shell issues a system call, the shell intercepts the call; if it is a shell call, the shell interprets it and acts on it.  If it is a GS/OS call, the shell passes it on to GS/OS.  This chapter describes all of the shell\rquote s system calls, here referred to as shell calls.  The macros are in the file M16.SHELL.\par Just as GS/OS extended ProDOS by allowing longer path names and creating parameter blocks with parameter counts while still using basically the same calls, the shell also has two levels of calls.  The older shell calls follow ProDOS conventions, while the newer shell calls have parameter blocks that follow GS/OS conventions.  The newer calls are formed from the old call numbers by oring the original call number with $0040.\par In the discussion that follows, the new, GS/OS style calls are documented.  The older ProDOS style calls still appear in the macro file, but should not be used in new programs.\par As with the GS/OS macros, to form the macro name from the call name shown in this chapter, and GS to the end.  The correct macro name is shown in the model statement.\par \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Making a Shell Call}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Making a Shell Call\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell\:calling\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Although shell calls are made exactly like GS/OS calls, this section does not provide all of the information relevant to GS/OS calls.  GS/OS calls are described in the }{\i\f4\fs20 GS/OS\u8482\'aa Reference Manual}{\f4\fs20 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Control Record}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Control Record\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A control record is a specifically formatted table that occupies a set of contiguous bytes in memory.  It consists of a number of fields that hold information that the calling program supplies to the shell, as well as information returned by the shell to the caller. \par Every shell call requires a valid control record, referenced as an absolute address in the operand of the macro call.  You are responsible for constructing the parameter block for each call you make; the block may be anywhere in memory.  Formats for individual parameter blocks accompany the detailed system call descriptions in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Types of Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Types of Parameters\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Each field in a parameter block contains a single parameter.  There are three types of parameters used by the shell:  values, results, and pointers.  Each is either an input to the shell from the caller,  or an output from the shell to the caller.\par }\pard \qj\fi360\li540\widctlpar\adjustright {\f4\fs20 \par A value is a numeric quantity, 1 or more bytes long, that the caller passes to the shell through the parameter block.  It is an input parameter.\par A result is a numeric quantity, 1 or more bytes long, that the shell places into the parameter block for the caller to use.  It is an output parameter.\par A pointer is the 4-byte address of a location containing data, code, an address, or buffer space in which the shell can receive or place data.  The pointer itself is an input; that is, you always provide the pointer and reserve space for the data.  The data pointed to may be either input by your program, returned by the shell, or both.\par }\pard \qj\fi360\li540\widctlpar\tx540\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A given parameter may be both a value and a result.\par }\pard \qj\fi360\li360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\li360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS strings}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Unless noted otherwise, each string in a control record is a GS/OS input or output string, as appropriate.  A GS/OS input string is used for parameters that pass a string value to the shell call.  A GS/OS input string consists of a length word followed by ASCII characters.  A GS/OS output string is a buffer used to pass a string back from the shell; you should set up the pointer to the buffer in the control record before making the shell call.  The output string starts with a two-byte buffer length.  This buffer length is the total number of bytes occupied by the GS/OS output string, including the bytes used for the buffer length and length of the string.  This value must be filled in before making the shell call.  The shell will fill in the bytes after the buffer length with a string in the same format as a GS/OS input string, namely a length word followed by ASCII characters.  The shell will return an error if the buffer is not large enough to hold a particular string value.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Register Values}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Register Values\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par There are no register requirements on entry to a shell call.  The shell saves and restores all registers except the accumulator (A) and the processor status register (P); those two registers store information on the success or failure of the call.  On exit, the registers have these values:\par \par }\pard \li360\widctlpar\tx1440\adjustright {\f4\fs20 A\tab zero if call successful; if nonzero, number is the error code\line X\tab unchanged\line Y\tab unchanged\line S\tab unchanged\line D\tab unchanged\line P\tab \{see below\}\line DB\tab unchanged\line PB\tab unchanged\line PC\tab address of location following the parameter block pointer; if you are using \par \tab the macros provided in ORCA to make the call, PC will point to the instruction\par \tab following the shell call in your program\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Unchanged means that the shell initially saves, and then restores when finished, the value the register had just before the shell call.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 On exit, the processor status register (P) bits are\par \par }\pard \li360\keepn\widctlpar\tx1440\adjustright {\f4\fs20 n\tab undefined\par v\tab undefined\par m\tab unchanged\par x\tab unchanged\par d\tab zero\par i\tab unchanged\par z\tab undefined\par c\tab zero if call successful, 1 if not\par }\pard \li360\widctlpar\tx1440\adjustright {\f4\fs20 e\tab zero\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 ChangeVector}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ChangeVector\tcl2}}}{\b\f4  ($014C)\tab Change a Shell Vector\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ChangeVector shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 desktop programming}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GetLInfo shell call}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ConsoleOut shell call}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 word size}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 line editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      ChangeVectorGS REC\par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 Several subroutines called by the shell to perform standard operations may be changed to point to user supplied subroutines.  This is usually done to support desktop programming environments that want to support the shell.  The call replaces the current vector with a pointer to the user supplied subroutine, and returns the old value for subsequent restoration.  The vectors that can be changed are:\par \par }\pard \qj\fi-720\li1080\widctlpar\tx1080\adjustright {\f4\fs20\ul vector}{\f4\fs20 \tab }{\f4\fs20\ul use\par \par }{\f4\fs20 0\tab Edit vector.  A JSL is made to this location when a file is to be edited.  Do a GetLInfo call to get the file name, entry point, and any error message passed by a compiler.\par \par 1\tab Console output vector.  This subroutine is called by the ConsoleOut shell call to write a character directly to the console driver, bypassing I/O redirection and the Text Tools.  The character to write is on the stack, pushed as a word.  Your subroutine must be capable of being called with either 8- or 16-bit registers.\par \par 2\tab Stop vector.  After cleaning up, the shell jumps to this location to abort a failed EXEC file.  Normally, this is the shell's line editor, but a desktop program needs to change this vector so that control returns to the desktop program.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \qj\li450\keep\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1070{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich174\picwgoal1920\pichgoal3480\macpict\bliptag1416953712\blipupi72{\*\blipuid 5474ff7075a3002dd76f565dd29321e2}03f70007000700b500671101a00082a0008c01000a0007000700b500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0143a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0144a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da0008c34003a001c0053006538220046001c06002200460064fa00a0008da0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da0008c340082001c00b300653822008e001c060022009a001c06002200a6001c060022008e0064fa0022009a0064fa002200a60064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000120000a00098280031002e087265736572766564a00099a00097a1009600060600000002baa1009a0008fffe0000000d0000a000982b051806766563746f72a00099a00097a1009600060600000002baa1009a0008fffe0000000f0000a0009828006d00310770726f63507472a00099a00097a1009600060600000002baa1009a0008fffe000000150000a0009828009d002b0a6f6c6450726f63507472a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type (range of values)\par }{\f4\fs20 \par $00-$01\tab pCount\tab parameter count\tab 2-byte value [4]\par \par \tab \tab Parameter count; must be 4.\par \par $02\endash $03\tab reserved\tab none\tab 2-byte value [$0000]\par }\pard \fi450\widctlpar\tx1440\tx2340\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Reserved for future use.  Set this field to 0.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $04\endash $05\tab vector\tab number of vector\tab 2-byte value [$0000\endash $0002]\par \tab \tab to be changed\par }\pard \fi450\widctlpar\tx1440\tx2340\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is the number of the vector you wish to change.  See the table above.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab procPtr\tab pointer to user's\tab 4-byte pointer [$0000 0000\endash \par \tab \tab subroutine\tab                      $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is a pointer to the subroutine the shell will call.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A\endash $0D\tab oldProcPtr\tab pointer to shell's\tab 4-byte pointer [$0000 0000\endash \par \tab \tab subroutine\tab                      $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 The shell returns the old value for the vector in this location.  You should restore the vector to this value before your program finishes.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\tx990\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab ChangeVectorGS chRec\par \tab .\par \tab .\par \tab .\par chRec\tab dc\tab i'4'\par \tab dc\tab i'0'\par chVector\tab dc\tab i'0'\par chprocPtr\tab dc\tab a4'MyEditor'\par chOldProcPtr ds\tab 4\par }\pard \widctlpar\adjustright {\f6\fs14 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 ConsoleOut}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ConsoleOut\tcl2}}}{\b\f4  ($015A)\tab Write to the Console\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ConsoleOut shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 cursor positioning}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 console driver}}}{\v\f4\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      ConsoleOutGS REC\par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 The character is written to the console driver, bypassing I/O redirection.  The principle reason for doing this is to send control characters to the console driver, such as cursor positioning characters or to turn the cursor on or off.  By bypassing I/O redirection, the special characters are not written to files when the output is redirected.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \qj\li450\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2430\tx3960\adjustright {{\pict{\*\picprop\shplid1071{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich54\picwgoal1920\pichgoal1080\macpict\bliptag104052859\blipupi72{\*\blipuid 0633b87b34c6f836ee285439332c76f7}016300070007003d00671101a00082a0008c01000a00070007003d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000090000a000982b05180463686172a00099a00097a00083ff}}{\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type (range of values)\par }{\f4\fs20 \par $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par $02\endash $03\tab char\tab character to send\tab 2-byte value [$0000\endash $00FF]\par \tab \tab to console driver\par }\pard \fi450\widctlpar\tx1440\tx2340\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The character to send to the console driver.  Only the least significant byte of the character field is actually used.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par $53\tab Parameter out of range\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab ConsoleOutGS coRec\par \tab .\par \tab .\par \tab .\par coRec\tab dc\tab i'1'\par coChar\tab dc\tab i'$13'\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 Direction}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Direction\tcl2}}}{\b\f4  ($014F)\tab Check I/O Redirection\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Direction shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      DirectionGS REC\par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A program can use this function to find out whether command-line I/O redirection has occurred.  This function can be used by a program to determine whether to send form feeds to standard output, for example.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1072{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich78\picwgoal1920\pichgoal1560\macpict\bliptag1350111213\blipupi72{\*\blipuid 50790fed4c58fb4d92f4524bbca4b5fd}01f800070007005500671101a00082a0008c01000a00070007005500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da0008c34003a001c0053006538220046001c06002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000d0000a000982b011806646576696365a00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b021806646972656374a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type (range of values)\par }{\f4\fs20 \par $00-$01\tab pCount\tab parameter count\tab 2-byte value [2]\par \par \tab \tab Parameter count; must be 2.\par \par $02\endash $03\tab device\tab Device number\tab 2-byte value [$0000\endash $0002]\par }\pard \fi450\widctlpar\tx1440\tx2340\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li2520\widctlpar\tx4320\adjustright {\f4\fs20 This parameter indicates which type of input or output you are inquiring about, as follows:\par \par $0000\tab Standard input\par $0001\tab Standard output\par $0002\tab Error output\par }\pard \fi2340\widctlpar\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \fi450\keep\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $04\endash $05\tab direct\tab Direction\tab 2-byte result [$0000\endash $0002]\par }\pard \fi450\keep\keepn\widctlpar\tx1440\tx2340\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li2520\keep\keepn\widctlpar\tx4320\adjustright {\f4\fs20 This parameter indicates the type of redirection that has occurred, as follows:\par \par }\pard \li2520\keep\keepn\widctlpar\tx3240\tx4320\adjustright {\f4\fs20 $0000\tab Console\par }\pard \li2520\keepn\widctlpar\tx3240\tx4320\adjustright {\f4\fs20 $0001\tab Printer (Not possible under the 2.0 version of the shell.)\par $0002\tab Disk file\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \fi450\widctlpar\tx990\adjustright {\f4\fs20 $53\tab Parameter out of range\par }\pard \widctlpar\tx990\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab DirectionGS drRec\par \tab .\par \tab .\par \tab .\par drRec\tab dc\tab i'2'\par drDevice\tab dc\tab i'1'\tab look at standard out\par drDirect\tab ds\tab 2\tab direction\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 Error}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Error\tcl2}}}{\b\f4  ($0145)\tab Write Error\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Error shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      ErrorGS REC\par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When an Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  tool call returns an error, your program can use this function to print out the name of the tool and the appropriate error message.  This function makes it unnecessary for your program to store a complete table of error messages for tool calls.  The error number is placed in the accumulator by the tool; you need only store the accumulator value in the parameter block and execute this call to print the error message to standard error output.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1073{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich54\picwgoal1920\pichgoal1080\macpict\bliptag773136450\blipupi72{\*\blipuid 2e152042311a50c1b7fc75adbdf7fb36}016400070007003d00671101a00082a0008c01000a00070007003d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000090000a000982b0518056572726f72a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $03\tab error\tab Error number\tab 2-byte value [$0000\endash $FFFF]\par \par }\pard \li2520\widctlpar\tx4320\adjustright {\f4\fs20 This parameter specifies the error number returned by the tool call.\par }\pard \li2250\widctlpar\tx2250\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab ErrorGS erRec\par \tab .\par \tab .\par \tab .\par erRec\tab dc\tab i'1'\par erError\tab ds\tab 2\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 Execute}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Execute\tcl2}}}{\b\f4   ($014D)\tab Execute Commands\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Execute shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:scope}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\f6\fs20 LAB      ExecuteGS REC\par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function sends a command or list of commands to the ORCA Shell command interpreter.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1074{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich78\picwgoal1920\pichgoal1560\macpict\bliptag-1254899740\blipupi72{\*\blipuid b533bfe41b22ba0bd14d43f2653f7509}01f600070007005500671101a00082a0008c01000a00070007005500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da0008c34003a001c0053006538220046001c06002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000070000a000982b071804666c6167a00099a00097a1009600060600000002baa1009a0008fffe0000000c0000a00098280049003404636f6d6da00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [2]\par \par \tab \tab Parameter count; must be 2.\par \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $03\tab flag\tab Define new \tab 2-byte value [$0000 or $8000]\par \tab \tab variables table\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 If you set the most significant bit of this flag to 1 (binary), then a new variable table is not defined when the commands are executed.  This flag is used to execute an Exec file with an EXECUTE command; if no new variable table is defined, then variables defined by the list of commands modify the current variable table.  If this flag is set to $0000, a new variable table is defined for the list of commands being executed; the current variable table is not modified.  Exec files, variables, and the EXECUTE command are described in Chapter 12.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $04\endash $07\tab comm\tab Address of \tab 4-byte pointer [$0000 0000\endash \par \tab \tab command string\tab                     $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The address of the buffer in which you place the commands.  If you include more than one command, separate the commands with semicolons (;) or carriage return characters ($0D).  Terminate the command string with a null character ($00).  Any output is sent to standard output.\par }\pard \qj\fi360\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The last command in the command stream must end with a carriage return character ($0D).\par If the variable \{exit\} is not null and any command returns a non-zero error code, then any remaining commands are ignored.  Error codes and variables are described in Chapter 12.\par }\pard \li2520\widctlpar\tx4320\adjustright {\pard\plain \li2520\widctlpar\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{Exit\} shell variable}}}{\pard\plain \li2520\widctlpar\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\: shell}}}{\v\f4\fs20 \par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $??\tab Any error returned from the last command or program executed by the list of commands executed.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab ExecuteGS exRec\par \tab .\par \tab .\par \tab .\par exRec\tab dc\tab i'2'\par \tab dc\tab i'0'\tab create a new variable table\par \tab dc\tab a4'commands'\tab address of command list\par \par commands\tab dc\tab c'Catalog',i1'13,0'\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 ExpandDevices}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ExpandDevices\tcl2}}}{\b\f4  ($0154)\tab Expand a Path Name\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ExpandDevices shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:numbers}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device names}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 directory walking}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      ExpandDevicesGS REC\par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 This call is used to support prefix numbers, device names, and directory walking.  Many GS/OS calls do not directly support the use of prefix numbers and device names like the shell uses, and none support directory walking (the .. operator).  This call takes a path name as input.  The input path name can contain prefix numbers (as in 17:HELP:CAT), device numbers (as in .d3:myfile) and the directory walking operator (as in ..:prefix:myfile).  This command also remaps the old ProDOS prefixes, 0 to 7, into the equivalent GS/OS prefixes.  It also accepts full and partial path names which do not contain prefix numbers, device numbers, or the .. operator.  In all cases, it returns a valid full GS/OS path name.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs18 Parameter List:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1075{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich126\picwgoal1920\pichgoal2520\macpict\bliptag1044774955\blipupi72{\*\blipuid 3e46002b41d6271a82870931401ef5cb}02c900070007008500671101a00082a0008c01000a00070007008500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000f0000a0009828003d003106696e4e616d65a00099a00097a1009600060600000002baa1009a0008fffe000000120000a0009828006d002e076f75744e616d65a00099a00097a00083ff}}{\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20\ul \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [2]\par \par \tab \tab Parameter count; must be 2.\par \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab inName\tab pointer to input\tab 4-byte pointer [$0000 0000\endash \par \tab \tab path name\tab \tab          $00FF FFFF]\par }\pard \li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Pointer to the input name buffer.  The input value is a GS/OS input string.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab outName\tab pointer to output\tab 4-byte pointer [$0000 0000\endash \par \tab \tab path name buffer\tab \tab          $00FF FFFF]\par }\pard \li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Pointer to the output name buffer.  The output buffer is a GS/OS output string.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par $53\tab Parameter out of range\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }{\b\f4\fs20 Coding Example:\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab ExpandDevicesGS exRec\par \tab .\par \tab .\par \tab .\par exRec\tab dc\tab i'2'\par \tab dc\tab a4'inName'\par \tab dc\tab a4'outName'\par \par inName\tab dOSIn\tab '13:Login'\tab original path name\par outName\tab dOSOut\tab 100\tab expanded path name\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 Export}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Export\tcl2}}}{\b\f4  ($0156)\tab Export a Variable\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Export shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables\:scope}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      ExportGS REC\par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 The EXPORT call marks a shell variable as exportable.  Marking \{MyVariable\} as exportable, for example, would be equivalent to executing the shell command\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab export MyVariable\par }{\f4\fs18 \par }{\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1076{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich102\picwgoal1920\pichgoal2040\macpict\bliptag-152462932\blipupi72{\*\blipuid f6e999ac15b408d6af7029455a416bb7}025b00070007006d00671101a00082a0008c01000a00070007006d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b0324046e616d65a00099a00097a0008c340052001c006b00653822005e001c060022005e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000a0000a000982b012405666c616773a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [2]\par \par \tab \tab Parameter count; must be 2.\par \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab name\tab variable name\tab 4-byte pointer [$0000 0000\endash \par                         \tab \tab         \tab    $0FF FFFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 Pointer to the name of the variable to mark.  The name is a length byte followed by the ASCII characters of the name.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $07\tab flags\tab variable's flags\tab 2-byte value [$0000 or $0001]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The flags variable tells the shell whether the variable is to be marked as exportable or not.  If flags is 1, the variable is marked as exportable.  If flags is 0, the the variable is marked as not exportable.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par $53\tab Parameter out of range\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }\pard \qj\pagebb\widctlpar\tx990\adjustright {\b\f4\fs20 Coding Example:\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab ExportGS exRec\par \tab .\par \tab .\par \tab .\par exRec\tab dc\tab i'2'\par \tab dc\tab a4'name'\par \tab dc\tab i'1'\par \par inName\tab dOSIn\tab 'myVariable'\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 FastFile}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FastFile\tcl2}}}{\b\f4  ($014E)\tab Fast File Handler\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FastFile shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disk caching}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 purging files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 compilers\:writing new}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      FastFileGS REC\par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 The FastFile call sets up a high-level disk caching system that can be used by any program running under the shell.  There are two ways the system can be used.  In the first, you use the FastFile call to load and save your files, being sure to purge them when you are finished with the files.  Then, if any subsequent FastFile load is issued while the file is still in memory, the FastFile call simply locks the file and returns a pointer to it, saving a great deal of disk access time.  The second method is intended solely for the use of compilers and linkers.  Two action codes \endash  4 and 2 \endash  allow you to add a file to the file list that is not on disk, and to read a file only from memory.  This method is used by all ORCA languages and linkers from the desktop when you do a memory-based compile, and from the text shell when the +M flag is used.  The object modules produced by the compiler are passed directly to the linker, with no disk access.  Naturally, this speeds up the compile process.\par Without some form of check, it would be possible for a program that did not use the FastFile call to change a file on disk, after which a program using the FastFile system might get an old copy of the file left around from a previous call to the FastFile system.  For example, suppose you use the editor (which supports the FastFile system) to edit a file.  Next, you use a utility that does not use the FastFile call to make some change to the file.  Finally, you compile the file.  The compiler should use the copy on disk, not the copy left from the editor.  Two methods are used to make sure the FastFile call always returns the correct file.  First, any GS/OS Open, Destroy, or SetFileInfo call will remove the file from the FastFile system.  Second, any time the FastFile call finds a file in memory, it checks the disk copy (if any) to ensure that the modification date and time match.  If they do not, the disk copy is used.\par See the description of the action parameter, below, for a list of the actions the FastFile call can do for you.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \li360\keep\widctlpar\tx2880\tx5400\adjustright {{\pict{\*\picprop\shplid1077{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw354\pich210\picwgoal7080\pichgoal4200\macpict\bliptag1419677811\blipupi72{\*\blipuid 549e9073e521cdaa6f03a2d92db1eb85}0ca30007000700d901691101a00082a0008c01000a0007000700d901690a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0143a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0144a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0145a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0146a00099a00097a1009600060500000002baa1009a0008fffe000000070000a0009828001f0089023130a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023131a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023132a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023133a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023134a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023135a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023136a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023137a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023138a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023139a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023141a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a18023230a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023231a00099a00097a1009600060500000002baa1009a0008fffe000000060000a0009828001f0107023232a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a18023238a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023239a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023241a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023242a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023243a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023244a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023245a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023246a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023330a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023331a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023332a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023333a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023334a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023335a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da0008c34003a001c0053006538220046001c06002200460064fa00a0008da0008c340052001c006b00653822005e001c060022005e0064fa00a0008da0008c34006a001c009b006538220076001c0600220082001c060022008e001c06002200760064fa002200820064fa0022008e0064fa00a0008da0008c34009a001c00cb0065382200a6001c06002200b2001c06002200be001c06002200a60064fa002200b20064fa002200be0064fa00a0008da0008c340016009a002f00e338220022009a060022002200e2fa00a0008da0008c34002e009a004700e33822003a009a060022003a00e2fa00a0008da0008c340046009a007700e338220052009a060022005e009a060022006a009a060022005200e2fa0022005e00e2fa0022006a00e2fa00a0008da0008c340076009a008f00e338220082009a060022008200e2fa00a0008da0008c22008e009a48002200be009a48002200a600940c002200a000940c002200a600dc0c002200ac00dc0c0022008e009a00122200a6009a001822008e00e200182200ac00e2001222009a009a06002200b2009a060022009a00e2fa002200b200e2fa00a0008da0008c220016011848002200460118480022002e01120c0022002801120c0022002e015a0c00220034015a0c002200160118001222002e0118001822001601600018220034016000122200220118060022003a011806002200220160fa0022003a0160fa00a0008da0008c340046011800770161382200520118060022005e0118060022006a011806002200520160fa0022005e0160fa0022006a0160fa00a0008da0008c340076011800a70161382200820118060022008e0118060022009a011806002200820160fa0022008e0160fa0022009a0160fa00a0008da0008c3400a6011800d70161382200b2011806002200be011806002200ca011806002200b20160fa002200be0160fa002200ca0160fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000c0000a000982b021806616374696f6ea00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b021805696e646578a00099a00097a1009600060600000002baa1009a0008fffe0000000a0000a000982b011805666c616773a00099a00097a1009600060600000002baa1009a0008fffe000000140000a00098280085002d0a66696c6548616e646c65a00099a00097a1009600060600000002baa1009a0008fffe000000140000a000982800b5002c08706174684e616d65a00099a00097a1009600060600000002baa1009a0008fffe0000000f0000a0009828002500b006616363657373a00099a00097a1009600060600000002baa1009a0008fffe000000100000a0009828003d00af0866696c6554797065a00099a00097a1009600060600000002baa1009a0008fffe000000110000a0009828006100ad0761757854797065a00099a00097a1009600060600000002baa1009a0008fffe000000190000a0009828008500a50b73746f7261676554797065a00099a00097a1009600060600000002baa1009a0008fffe000000160000a000982b03240a63726561746544617465a00099a00097a1009600060600000002baa1009a0008fffe000000120000a00098280031012b076d6f6444617465a00099a00097a1009600060600000002baa1009a0008fffe0000000c0000a000982b0530066f7074696f6ea00099a00097a1009600060600000002baa1009a0008fffe000000140000a0009828009101290a66696c654c656e677468a00099a00097a1009600060600000002baa1009a0008fffe000000180000a000982800c101250a626c6f636b7355736564a00099a00097220016009a00f422001600e200f42200ca001c000c2200ca0064000c2200be009a000c2200be00e2000c22000a0118000c22000a0160000ca00083ff}}{\f4\fs14 \par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [5-14]\par \par \tab \tab Parameter count.  Any value from 5 to 14 is allowed.\par \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $03\tab action\tab action to take\tab 2-byte value [$00 \endash  $07]\par }\pard \li450\keepn\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx1260\tx3960\adjustright {\f4\fs20 The action parameter tells the FastFile system which action to take.\par }\pard \qj\fi360\li2520\widctlpar\adjustright {\f4\fs20 Load ($00):  You must provide the path name and flags parameters.  The file will be loaded and locked, and all of the parameters from fileHandle to blocksUsed will be filled in with the correct values.\par }{\pard\plain \qj\fi360\li2520\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file not found error}}}{\v\f4\fs20 \par }{\f4\fs20 Indexed Load ($01):  This call works like load, except that you provide an index rather than a path name.  The FastFile call returns the file at that index, or a }{\f6\fs18 file not found error }{\f4\fs20 if there are no files for that index.  For example, if there are three files in the FastFile system, you could catalog them by calling FastFile with indexes of 1, 2, 3 and 4.  When the index is 4, an error is returned, indicating that you have reached the end of the list of files.\par Load From Memory ($02):  This call works like Load, except that the file will only be returned if it is in the FastFile system.  If the file exists on disk, but has not been loaded by another FastFile call, a }{\f6\fs18 file not found}{\f4\fs20  error is returned.  This call is intended primarily for use by compilers and the linker to pass files without writing them to disk.\par }{\pard\plain \qj\fi360\li2520\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Memory Manager}}}{\pard\plain \qj\fi360\li2520\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 purging files}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi360\li2520\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\fi360\li2520\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\v\f4\fs20 \par }{\f4\fs20 Save ($03):  You must fill in all of the fields except index and blocksUsed.  The file is written to disk, but remains in memory.  Use the Purge call to allow the Memory Manager to reclaim the memory if it is needed.\par Add ($04):  You must fill in all of the fields except index and blocksUsed.  The file is placed in the FastFile system, where other programs can access it, but it is not written to disk.  You may use the Purge call to allow the Memory Manager to reclaim the memory, but this is usually not appropriate.  The main use for this call is for a compiler to pass an object module to the linker without accessing the disk.\par Delete ($05):  You must fill in the path name and action fields.  The file is removed from the FastFile system (if it is there).  The file is not deleted from the disk.\par Remove ($06):  You must fill in the path name and action fields.  As with the delete call ($05), the file is removed from the FastFile list, but this call does not do a Memory Manager DisposeHandle call to remove the file itself from memory.  This call is generally used by desktop shells to prevent other programs from seeing a file without disposing of the contents of the file.\par Purge ($07):  The file is unlocked and marked purgeable with a purge level of 2.  This allows the Memory Manager to reuse the memory if it is needed, but leaves the file in memory if the memory is not needed for some other purpose.\par }\pard \qj\li2250\widctlpar\tx1260\tx1800\tx3960\adjustright {\f4\fs20 \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $04\endash $05\tab index\tab index number of\tab 2-byte value [$0001 \endash  $7FFF]\par \tab \tab file to load\par }\pard \qj\li450\widctlpar\tx1260\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx1260\adjustright {\f4\fs20 The index parameter is only used when the action code is $01 (indexed load).  It specifies the file to load by index number, starting with 1.  See the description of indexed load, above, for details.\par }\pard \qj\li450\widctlpar\tx1260\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $07\tab flags\tab how to handle file\tab 2-byte value [$0000 \endash  $FFFF]\par }\pard \qj\li450\widctlpar\tx1260\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx1260\tx3960\adjustright {\f4\fs20 The flags field tells the FastFile system how to handle the file.  If the most significant bit ($8000) is set, the file exists on disk as well as in the FastFile system.  This flag enables the check of the mod date/time, made each time the file is loaded.  If the mod date/time for the disk copy of the file differs from the memory copy, the disk copy is used.  The next most significant bit ($4000) is set if the file may be purged.  If this flag is clear, Purge calls (action $07) are ignored.  Normally, when you are using the FastFile system to load and save disk files, you would set this field to $C000.  For passing files through the FastFile system, as is done by the compiler and linker, the flags would normally be set to $0000.  The unused bits (the least significant 14 bits) should be set to 0.\par }\pard \qj\li2250\widctlpar\tx1260\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $08\endash $0B\tab fileHandle\tab handle to file in\tab 4-byte pointer [$0000 0000\endash \par \tab \tab memory\tab \tab          $00FF FFFF]\par }\pard \qj\li450\widctlpar\tx1260\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx1260\tx2430\tx3960\adjustright {\f4\fs20 This is the handle of the file.  It is returned by the load calls, and must be provided when saving the file or adding it to the file list.\par \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0C\endash $35\tab ...\tab see diagram\tab see diagram\par }\pard \qj\li450\widctlpar\tx1260\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 The remaining parameters have the same format, use, and restrictions as the corresponding parameters for a GS/OS GetFileInfo or SetFileInfo call, with the GetFileInfo parameters applying to loads and the SetFileInfo parameters applying to stores.  In fact, the FastFile call makes GetFileInfo and SetFileInfo calls with these parameters.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par $53\tab Parameter out of range\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\tx990\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab ExportGS exRec\par \tab .\par \tab .\par \tab .\par exRec\tab dc\tab i'2'\par \tab dc\tab a4'name'\par \tab dc\tab i'1'\par \par inName\tab dOSIn\tab 'myVariable'\par \par \tab lla\tab ffPathName,name\tab load the file\par \tab stz\tab ffAction\par \tab lda\tab #$C000\par \tab sta\tab ffFlags\par \tab FastFileGS ffRec\par }\pard \fi360\keepn\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18 ;\par ; Put code to use and change the file here.  The save call below is\par ; only needed if you change the file.  Since the load call filled in\par ; all of the fields, we do not have to change much to do the save.\par ;\par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab lla\tab ffPathName,name\tab save the file\par \tab lda\tab #3\par \tab sta\tab ffAction\par \tab FastFileGS ffRec\par \tab lla\tab ffPathName\tab purge the file\par \tab lda\tab #7\par \tab sta\tab ffAction\par \tab FastFileGS ffRec\par \tab .\par \tab .\par \tab .\par ffRec\tab dc\tab i'14'\tab parameter count\par ffAction\tab ds\tab 2\tab action\par ffIndex\tab ds\tab 2\tab file index\par ffFlags\tab ds\tab 2\tab FastFile flags\par ffFileHandle ds\tab 4\tab file handle\par ffPathName ds\tab 4\tab path name\par ffAccess\tab ds\tab 2\tab GS/OS file access code\par ffFileType ds\tab 2\tab GS/OS file type\par ffAuxType\tab ds\tab 4\tab GS/OS auxiliary file type\par ffStorageType ds\tab 2\tab GS/OS storage type\par ffCreateDate ds\tab 8\tab GS/OS create date/time\par ffModDate\tab ds\tab 8\tab GS/OS modification date/time\par ffOption\tab dc\tab a4'0'\tab GS/OS file options\par ffFileLength ds\tab 4\tab file length (GS/OS & shell)\par ffBlocksUsed ds\tab 4\tab GS/OS block count\par \par name\tab dOSIn\tab 'myFile'\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f6\fs14 \page }{\b\f4 GetCommand}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetCommand\tcl2}}}{\b\f4  ($015D)\tab Get a Command Table Entry\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GetCommand shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command table}}}{\v\f4\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      GetCommandGS REC\par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 The GetCommand call returns the name, restart flag and command number for a command in the command table.  The first command is accessed with an index number of 1, the next with an index of 2, and so forth.  All commands are numbered sequentially internally.  If an index is supplied for which there is no command, the length of the name is set to 0.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2430\tx3960\adjustright {{\pict{\*\picprop\shplid1078{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw102\pich174\picwgoal2040\pichgoal3480\macpict\bliptag-1310954973\blipupi72{\*\blipuid b1dc6a232b24b73476e48045497eeb18}04290007000700b5006d1101a00082a0008c01000a0007000700b5006d0a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a18023136a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023137a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da0008c34003a001c0053006538220046001c06002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b031805696e646578a00099a00097a1009600060600000002baa1009a0008fffe0000000d0000a0009828004900330772657374617274a00099a00097a0008c340052001c006b00653822005e001c060022005e0064fa00a0008da1009600060600000002baa1009a0008fffe000000120000a00098280061002e087265736572766564a00099a00097a0008c34006a001c0083006538220076001c06002200760064fa00a0008da1009600060600000002baa1009a0008fffe000000130000a00098280079002d07636f6d6d616e64a00099a00097a0008c220082001c48002200b2001c480022009a00160c0022009400160c0022009a005e0c002200a0005e0c00220082001c001222009a001c0018220082006400182200a00064001222008e001c06002200a6001c060022008e0064fa002200a60064fa00a0008da1009600060600000002baa1009a0008fffe0000000b0000a000982b0824046e616d65a00099a00097a00083ff}}{\par }{\f4\fs20 \par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [5]\par \par \tab \tab Parameter count; must be 5.\par \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02-$03\tab index\tab index number of \tab 2-byte value [$0001\endash $7FFF]\par \tab \tab command\par \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Number of the command to return.  Commands are numbered sequentially, starting with number 1.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\pard\plain \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 restartability}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $04-$05\tab restart\tab restartability flag \tab 2-byte value [$0000\endash $0001]\par \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 1 if the language or utility is restartable, 0 if it is not.  This field is not used by built in commands.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06-$07\tab reserved\tab field not used \tab 2-byte value [$0000]\par \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Not used.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $08-$09\tab command\tab number assigned to \tab 2-byte value [$0000\endash $7FFF]\par \tab \tab command\par }{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language numbers}}}{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command numbers}}}{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSCMND file}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Command number.  Utilities have a command number of 0.  Built- in commands have the number specified in the SYSCMND file.  Languages return the language number ORed with $8000.\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A-$19\tab name\tab command's name \tab 16-byte string\par \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is the name of the command, starting with a length byte.  If there is no command for the index supplied, the length of the name is set to 0.\par }\pard \qj\fi360\li2520\widctlpar\adjustright {\f4\fs20 Unlike most strings returned from GS/OS or the shell, this name field is of a small, fixed length, so it is returned in a p-string style array, rather than in a GS/OS output buffer.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\tx990\adjustright {\b\f4\fs20 Coding Example:\par }{\pard\plain \qj\keepn\widctlpar\tx990\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PUTS macro}}}{\pard\plain \qj\keepn\widctlpar\tx990\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\pard\plain \qj\keepn\widctlpar\tx990\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ANOP directive}}}{\v\f4\fs20 \par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab stz\tab index\tab list all of the commands\par lb1\tab GetCommandGS gcRec\par \tab lda\tab gcName\par \tab and\tab #$00FF\par \tab beq\tab lb2\par \tab puts\tab gcName-1,cr=t\par \tab inc\tab index\par \tab bra\tab lb1\par lb2\tab anop\par \tab .\par \tab .\par \tab .\par gcRec\tab dc\tab i'5'\par gcIndex\tab ds\tab 2\par gcRestart\tab ds\tab 2\par \tab ds\tab 2\par gcCommand\tab ds\tab 2\par gcName\tab ds\tab 16\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 GetIODevices}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetIODevices\tcl2}}}{\b\f4  ($015C)\tab Get a List of the IO Devices\par }\pard \qj\widctlpar\adjustright {\f4\fs20 ______________________________________________________________________________\par }{\v\f4\fs20 _}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GetIODevices shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device numbers}}}{\v\f4\fs20 .CONSOLE;}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.CONSOLE}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetIODevices shell call}}}{\v\f4\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      GetIODevicesGS REC\par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 This call is obsolete.  It was used under older versions of the shell to handle I/O trapping inside of programs like the ORCA Desktop Development Environment.  I/O trapping is now handled through the GS/OS console driver.\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 GetLang}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetLang\tcl2}}}{\b\f4  ($0143)\tab Get Language Number\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      GetLangGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GetLang shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language numbers}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell commands}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function reads the current language number.  Language numbers are described in Chapter 12.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1079{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich54\picwgoal1920\pichgoal1080\macpict\bliptag-704198529\blipupi72{\*\blipuid d606c87f656a7c9dfb33593c50115219}016300070007003d00671101a00082a0008c01000a00070007003d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000080000a000982b0618046c616e67a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02-$03\tab lang\tab Language number\tab 2-byte result [$0000\endash $7FFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The current ORCA language number.  The current language number is set by the ORCA editor when it opens an existing file, or by the user with a ORCA shell command.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab GetLangGS glRec\par \tab .\par \tab .\par \tab .\par glRec\tab dc\tab i'1'\par glLang\tab ds\tab 2\par }\pard \keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 GetLInfo}{\pard\plain \keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetLInfo\tcl2}}}{\b\f4  ($0141)\tab Get Language Info\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      GetLInfoGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GetLInfo shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetLInfo shell call}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function is used by an assembler, compiler, linker, or editor to read the parameters that are passed to it.  When you make this call, you reserve the specified amount of space for each parameter in the parameter block; when the ORCA shell returns control to your program, you can then read the parameter block to obtain the information you need.\par Use the SetLInfo call when your program is finished before executing an RTL or GS/OS Quit to return control to the shell.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \keepn\widctlpar\adjustright {\par }\pard \li890\widctlpar\adjustright {{\pict{\*\picprop\shplid1080{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw240\pich234\picwgoal4800\pichgoal4680\macpict\bliptag166981909\blipupi72{\*\blipuid 09f3f115e9a6688eb40e0f8d621fab25}093d0007000700f100f71101a00082a0008c01000a0007000700f100f70a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0143a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0144a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0145a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0146a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000090000a000982b0524057346696c65a00099a00097a0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da1009600060600000002baa1009a0008fffe000000090000a000982a30056446696c65a00099a00097a0008c340082001c00b300653822008e001c060022009a001c06002200a6001c060022008e0064fa0022009a0064fa002200a60064fa00a0008da1009600060600000002baa1009a0008fffe0000000c0000a0009828009d0034057061726d73a00099a00097a0008c3400b2001c00e30065382200be001c06002200ca001c06002200d6001c06002200be0064fa002200ca0064fa002200d60064fa00a0008da1009600060600000002baa1009a0008fffe0000000d0000a000982800cd00330769537472696e67a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982800d3000b023130a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023131a00099a000972200e2001c000c2200e20064000c22000a00ac000c22000a00f4000c34001600ac002300f538a1009600060600000002baa1009a0008fffe000000090000a0009828001f00c8046d657272a00099a0009734002200ac002f00f538a1009600060600000002baa1009a0008fffe0000000a0000a0009828002b00c6056d65727266a00099a0009734002e00ac003b00f538a1009600060600000002baa1009a0008fffe000000080000a000982b020c046c6f7073a00099a0009734003a00ac004700f538a1009600060600000002baa1009a0008fffe0000000a0000a0009828004300c6056b666c6167a00099a00097a0008c34004600ac007700f53822005200ac060022005e00ac060022006a00ac060022005200f4fa0022005e00f4fa0022006a00f4fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828006100c2066d466c616773a00099a00097a0008c34007600ac00a700f53822008200ac060022008e00ac060022009a00ac060022008200f4fa0022008e00f4fa0022009a00f4fa00a0008da1009600060600000002baa1009a0008fffe0000000d0000a000982b01300670466c616773a00099a00097a0008c3400a600ac00d700f5382200b200ac06002200be00ac06002200ca00ac06002200b200f4fa002200be00f4fa002200ca00f4fa00a0008da1009600060600000002baa1009a0008fffe000000060000a000982b0730036f7267a00099a00097a1009600060500000002baa1009a0008fffe000000070000a0009828001f009b023132a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023133a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023134a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023135a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023136a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023137a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023138a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023139a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023141a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023142a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023143a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023144a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023145a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023146a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023230a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023231a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\pard\plain \qj\li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [11]\par \par \tab \tab Parameter count; must be 11.\par \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab sfile\tab Address of source\tab 4-byte pointer [$0000 0000\endash \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \tab \tab file name\tab                      $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 The address of a GS/OS output buffer buffer into which the shell will put the file name of the source file; that is, the file that the compiler or assembler is to process.  The file name can be any valid GS/OS file name, and can be a partial or full path name.\par }\pard \qj\fi360\li2520\widctlpar\adjustright {\f4\fs20 For editors, this field can contain more than one file name.  For multiple file names, the file names will be separated by a single space.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab dfile\tab Address of output\tab 4-byte pointer [$0000 0000\endash \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \tab \tab file name\tab                      $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The address of a GS/OS output buffer into which the shell puts the file name of the output file (if any); that is, the file that the compiler or assembler writes to.  The file name can be any valid GS/OS file name, and can be a partial or full path name.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A\endash 0D\tab parms\tab Address of\tab 4-byte pointer [$0000 0000\endash \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \tab \tab parameter list\tab                     $00FF FFFF]\par }{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The address of a GS/OS output buffer into which the shell puts the list of names from the NAMES= parameter list in the ORCA shell command that called the assembler or compiler.  If there was no NAMES parameter list, the length of the buffer will be set to 0.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0E\endash $11\tab istring\tab Address of\tab 4-byte result [$0000 0000\endash \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \tab \tab input strings\tab                   $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The address of a GS/OS output buffer into which the shell puts the string of commands to be passed on to a specific language compiler.  For example, if the COMPILE command includes the parameter  CC=(-I/CINCLUDES/), then the string enclosed in parentheses is found in that buffer when the C compiler is called.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $12\tab merr\tab Maximum error \tab 1-byte result [$00\endash $10]\par \tab \tab level allowed\par }{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting}}}{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 If the maximum error level found by the assembler, compiler, or linker (merrf) is greater than merr the ORCA shell does not call the next program in the processing sequence.  For example, if you use the ASML command to assemble and link a program, but the assembler finds an error level of 8 when merr equals 2, then the linker is not called when the assembly is complete.\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $13\tab merrf\tab Maximum error \tab 1-byte result [$00\endash $FF]\par \tab \tab level found\par }{\pard\plain \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetLInfo shell call}}}{\pard\plain \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting}}}{\pard\plain \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This field is used by the SetLInfo call to return the maximum error level found.  This field contains the error level returned by the last compiler in a multi-language compile.  If this is the first compile, this field is $00.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $14\tab lops\tab Operations flags\tab 1-byte result [$00\endash $10]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This field is used to keep track of the operations that are to be performed by the system.  The format of this byte is as follows:\par }\pard \widctlpar\tx2520\tx4320\adjustright {\par }\pard \li2610\widctlpar\tx2520\tx4320\adjustright {{\pict{\*\picprop\shplid1081{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw187\pich42\picwgoal3740\pichgoal840\macpict\bliptag1399142886\blipupi72{\*\blipuid 536539e66e9b7035b664fa7baca02fab}033500070007003100c21101a0008201000a00070007003100c20a000000000000000034000a002d002f00be3820001c002d001c00bd22000a0075002422000a0051002422000a0099002422000a003f002422000a0063002422000a0087002422000a00ab0024a100960006050000000274a1009a0008fffe000000090000a000980300150d00092b1a16044269743aa00099a00097a100960006050000000274a1009a0008fffd000000100000a000980d000a280026000b0656616c75653aa00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828001800340137a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829250135a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829120134a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829110133a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828001800460136a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829480132a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829110131a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829120130a00099a00097a100960006050000000274a1009a0008fffd000000070000a000982a110143a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900a0014ca00099a00097a100960006050000000274a1009a0008fffd000000070000a00098280029008e0145a00099a00097a100960006050000000274a1009a0008fffd000000070000a00098280029007b0130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900690130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900590130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900450130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900340130a00099a00097a00083ff}}{\par }\pard \widctlpar\tx2520\tx4320\adjustright {\par }\pard \li2520\widctlpar\tx4320\adjustright {\f4\fs20 where: C = Compile\par }\pard \fi270\li2610\widctlpar\tx1440\tx1980\tx2520\tx4320\adjustright {\f4\fs20 L = Link\par E = Execute\par }\pard \li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\pard\plain \li2250\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COMPILE command}}}{\pard\plain \li2250\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 CMPLG command}}}{\v\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 \par When a bit is set (1), the indicated operation is to be done.  For example, the COMPILE command sets bit 0, while the CMPLG command sets bits 0, 1, and 2.  When a compiler finishes its operation and returns control to the ORCA shell, it clears bit 0 unless a file with another language is appended to the source.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $15\tab kflag\tab Keep flag\tab 1-byte result [$00\endash $03]\par }{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This flag indicates what should be done with the output of a compiler, assembler, or linker, as follows:\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\fi2160\li450\widctlpar\tx2520\tx3420\tx4320\adjustright {\f4\fs20 Kflag\par }{\f4\fs20\ul Value}{\f4\fs20  \tab }{\f4\fs20\ul Meaning\par }{\f4\fs20 \par $00\tab Do not save output.\par }\pard \qj\fi-810\li3420\widctlpar\tx2520\tx3420\tx4320\adjustright {\f4\fs20 \par $01\tab Save to an object file with the root file name pointed to by dfile.  For example, if the output file name pointed to by dfile is PROG, then the first segment to be executed should be put in PROG.ROOT and the remaining segments should be put in PROG.A.  For linkers, save to a load file with the name pointed to by dfile (for example, PROG).\par }\pard \qj\fi-810\li3420\keep\keepn\widctlpar\tx2520\tx3420\tx4320\adjustright {\f4\fs20 \par $02\tab The .ROOT file has already been created (by another language compiler, for example).  In this case, the first file created by the compiler or assembler should end in the .A extension.\par }{\pard\plain \qj\fi-810\li3420\keep\keepn\widctlpar\tx2520\tx3420\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }{\f4\fs20 \par $03\tab At least one alphabetic suffix has already been used.  In this case, the compiler or assembler must search the directory for the highest alphabetic suffix that has been used, and then use the next one.  For example, if PROG.ROOT, PROG.A, and PROG.B already exist, the compiler should put its output in PROG.C.\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par $16\endash $19\tab mflags\tab Flags with a \tab 4-byte result [binary string]\par \tab \tab minus sign\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This parameter passes command-line-option flags such as \endash L or \endash C.  The first 26 bits of these four bytes represent the letters A\endash Z, arranged with A as the most significant bit of the most significant byte; the bytes are ordered least significant byte first.  The bit map is as follows:\par }\pard \li2700\widctlpar\tx4320\adjustright {\f4\fs20 \line }{\f6\fs18 11000000 11111111 11111111 11111111\line YZ       QRSTUVWX IJKLMNOP ABCDEFGH\par }{\pard\plain \li2700\widctlpar\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\pard\plain \li2700\widctlpar\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\v\f4\fs20 \par }\pard \li2250\widctlpar\tx2520\tx2610\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 For each flag set with a minus sign in the command, the corresponding bit in this parameter is set to 1.  See the discussions of the LINK and ASML commands in Chapter 12 for descriptions of these option flags.\par }\pard \li2250\widctlpar\tx2520\tx2610\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $1A\endash $1D\tab pflags\tab Flags with a \tab 4-byte result [binary string]\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \tab \tab plus sign\par }{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASSEMBLE command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This parameter passes command-line-option flags such as +L or +C.  The first 26 bits of these four bytes represent the letters A\endash Z; the bit map for this parameter is the same as for the mflags parameter.  See the discussions of the ASSEMBLE and LINK commands in Chapter 12 for descriptions of these option flags.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $1E\endash $21\tab org\tab Origin\tab 4-byte result [$0000 0000\endash \par \tab \tab \tab                  $FFFF FFFF]\par }{\pard\plain \li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This field is used on entry to an editor to provide a displacement into the file.  The editor can then place at the top of the screen the line that corresponds to this displacement.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ANOP directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab GetLInfo glRec\par \tab .\par \tab .\par \tab .\par glRec\tab dc\tab i'11'\par glSFile\tab dc\tab a4'inFile'\par glDFile\tab dc\tab a4'outFile'\par glParms\tab dc\tab a4'parmList'\par glIString\tab dc\tab a4'cmdList'\par glMerr\tab ds\tab 1\par glMerrf\tab ds\tab 1\par glLops\tab ds\tab 1\par glKFlag\tab ds\tab 1\par glMFlags\tab ds\tab 4\par glPFlags\tab ds\tab 4\par glOrg\tab ds\tab 4\par \par inFile\tab dOSOut\tab 256\par outFile\tab dOSOut\tab 256\par parmList\tab dOSOut\tab 256\par cmdList\tab dOSOut\tab 256\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 InitWildcard}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InitWildcard\tcl2}}}{\b\f4  ($0149)\tab Initialize Wildcards\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      InitWildcardGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 InitWildcard shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:numbers}}}{\v\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 directory walking}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 device names}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This function provides to the ORCA shell a file name that can include a wildcard character.  The shell can then search for file names matching the file name you specified when it receives a NextWildcard command.  This function accepts any file name, whether it includes a wildcard or not, and expands device names (such as .D1), prefix numbers, and the double-period (..) before the file name is passed on to GS/OS.  Therefore, you should call this function every time you want to search for a file name.  Doing so will assure that your routine supports all of the conventions for partial path names that the user expects from ORCA.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \fi-360\li450\widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1082{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich102\picwgoal1920\pichgoal2040\macpict\bliptag-1313370238\blipupi72{\*\blipuid b1b78f825c1514680634fb24a99f2a6d}025b00070007006d00671101a00082a0008c01000a00070007006d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000a0000a000982b0424057746696c65a00099a00097a0008c340052001c006b00653822005e001c060022005e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000a0000a000982a2405666c616773a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [2]\par \par \tab \tab Parameter count; must be 2.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab wFile\tab Address of\tab 4-byte pointer [$0000 0000\endash \par \tab \tab path name\tab                      $00FF FFFF]\par \par }\pard \qj\li2520\keepn\widctlpar\tx4320\adjustright {\f4\fs20 The address of a buffer containing a path name or partial path name that can include a wildcard character.  Examples of such path names are:\par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li2700\widctlpar\tx4320\adjustright {\f4\fs20 A=\par :ORCA:MYPROGS:?.ROOT\par .D2:HELLO\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }\pard \qj\fi360\li2520\widctlpar\tx4320\adjustright {\f4\fs20 When you execute a NextWildcard call, the shell finds the next file name that matches the file name pointed to by wFile.  If the wild card character you specified was a question mark (?), then the file name is written to standard output and you are prompted for confirmation before the file is acted on or the next file name is found.  The use of wildcard characters is described in the section \ldblquote Wildcards\rdblquote  in Chapter 12.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $07\tab flags\tab Prompting flags.\tab 2-byte value\par }{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME command}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Memory Manager}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This field is a series of bit flags that tell the wildcard handler to process the matching files is certain ways.\par }\pard \qj\fi360\li2520\widctlpar\tx4320\adjustright {\f4\fs20 If bit $8000 is set, prompting is not allowed; that is, a question mark (?) is treated as if it were an equal sign (=).\par If bit $4000 is set and prompting is being used, only the first choice accepted by the user (that is, the first choice for which the user types a Y in response to the prompt) is acted on.  The second flag is for use with commands that can act on only one file, such as RENAME or EDIT.\par If bit $2000 is set, and if the wildcard handler returns a directory, it will also return all of the files in the directory.  The first file returned will be the directory itself, followed by the first file in the directory, and so on.  If the directory contains other directories, they are expanded, too.\par If bit $1000 is set and bit $2000 is also set, the wildcard handler returns the files that are in a directory before it returns the directory itself.\par All other flags are reserved, and should be set to 0.\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\fi-540\li980\ri360\keep\widctlpar\adjustright {\f4\fs20 $??\tab Errors for the following GS/OS and Memory Manager calls.  See the }{\i\f4\fs20 GS/OS\u8482\'aa Reference Manual}{\f4\fs20  and the }{\i\f4\fs20 Apple Toolbox Reference}{\f4\fs20  manuals for descriptions of these errors.\par }\pard \qj\li450\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li1440\ri360\widctlpar\adjustright {\f4\fs20 Open\par Read\par Close\par Dispose\par GetFileInfo\par GetEOF\par Lock\par NewHandle\par }\pard \qj\fi-450\li450\ri360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-460\li450\ri360\pagebb\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }\pard \qj\fi-450\li450\ri360\widctlpar\adjustright {\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab InitWildcardGS inRec\par \tab .\par \tab .\par \tab .\par inRec\tab dc\tab i'2'\par inWFile\tab dc\tab a4'path'\par inFlags\tab dc\tab i'0'\par \par path\tab dOSIn\tab '=.macros'\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 NextWildcard}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NextWildcard\tcl2}}}{\b\f4  ($014A)\tab Next Wildcard Name\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      NextWildcardGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NextWildcard shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 wildcards}}}{\v\f4\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Once a file name that includes a wildcard has been supplied to the shell with an InitWildcard call, the NextWildcard call causes the shell to find the next file name that matches the wildcard file name.  For example, if the wildcard file name specified in InitWildcard is :ORCA:UTILITY:XREF.?, then the first file name returned by the shell in response to a NextWildcard call might be :ORCA:UTILITY:XREF.ASM.\par The parameter list, range of values, and the meanings of the parameters correspond exactly to the parameter list for the GS/OS GetFileInfo call.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1083{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich210\picwgoal6960\pichgoal4200\macpict\bliptag-1381790162\blipupi72{\*\blipuid ada38e2e1040574871ddf4efb55f3426}0bdd0007000700d901631101a00082a0008c01000a0007000700d901630a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0143a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0144a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0145a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0146a00099a00097a1009600060500000002baa1009a0008fffe000000070000a0009828001f0089023130a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a18023136a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023137a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023138a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a18023138a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023139a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023230a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023231a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023232a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023233a00099a00097a1009600060500000002baa1009a0008fffe000000070000a0009828002b0107023235a00099a00097a1009600060500000002baa1009a0008fffe000000070000a0009828001f0107023234a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a18023236a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023237a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023238a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023239a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023241a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023242a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023243a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023244a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023245a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023246a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023330a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023331a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023332a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023333a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da0008c340052001c006b00653822005e001c060022005e0064fa00a0008da0008c34006a001c0083006538220076001c06002200760064fa00a0008da0008c340082001c00b300653822008e001c060022009a001c06002200a6001c060022008e0064fa0022009a0064fa002200a60064fa00a0008da0008c3400b2001c00cb0065382200be001c06002200be0064fa00a0008da0008c220016009a4800220046009a480022002e00940c0022002800940c0022002e00dc0c0022003400dc0c00220016009a001222002e009a001822001600e2001822003400e20012220022009a060022003a009a060022002200e2fa0022003a00e2fa00a0008da0008c220046009a4800220076009a480022005e00940c0022005800940c0022005e00dc0c0022006400dc0c00220046009a001222005e009a001822004600e2001822006400e20012220052009a060022006a009a060022005200e2fa0022006a00e2fa00a0008da0008c340076009a00a700e338220082009a060022008e009a060022009a009a060022008200e2fa0022008e00e2fa0022009a00e2fa00a0008da0008c340016011800470161382200220118060022002e0118060022003a011806002200220160fa0022002e0160fa0022003a0160fa00a0008da0008c340046011800770161382200520118060022005e0118060022006a011806002200520160fa0022005e0160fa0022006a0160fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000140000a0009828003d002c08706174684e616d65a00099a00097a1009600060600000002baa1009a0008fffe0000000f0000a000982b062406616363657373a00099a00097a1009600060600000002baa1009a0008fffe000000100000a0009828007900310866696c6554797065a00099a00097a1009600060600000002baa1009a0008fffe000000110000a0009828009d002f0761757854797065a00099a00097a1009600060600000002baa1009a0008fffe000000190000a000982800c100270b73746f7261676554797065a00099a00097a1009600060600000002baa1009a0008fffe000000160000a0009828003100a80a63726561746544617465a00099a00097a1009600060600000002baa1009a0008fffe000000120000a000982b0530076d6f6444617465a00099a00097a1009600060600000002baa1009a0008fffe0000000c0000a000982b0530066f7074696f6ea00099a00097a1009600060600000002baa1009a0008fffe000000090000a00098280031013403454f46a00099a00097a1009600060600000002baa1009a0008fffe000000180000a0009828006101250a626c6f636b7355736564a00099a00097220016009a00f422001600e200f42200ca001c000c2200ca0064000c2200a6009a000c2200a600e2000c22000a0118000c22000a0160000ca0008c340076011800a70161382200820118060022008e0118060022009a011806002200820160fa0022008e0160fa0022009a0160fa00a0008da1009600060600000002baa1009a0008fffe000000180000a000982a300a626c6f636b7355736564a00099a00097a0008c3400a6011800d70161382200b2011806002200be011806002200ca011806002200b20160fa002200be0160fa002200ca0160fa00a0008da1009600060600000002baa1009a0008fffe000000180000a000982a300a626c6f636b7355736564a00099a00097a00083ff}}{\par }\pard \qj\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20\ul \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1-12]\par \par \tab \tab Parameter count; and value from 1 to 12.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $33\tab ...\tab see diagram\tab see diagram\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The remaining NextWildcard parameters correspond exactly to the parameters returned by the GS/OS GetFileInfo call.\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\fi-450\li450\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-450\li450\keepn\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab NextWildcardGS nwRec\par \tab .\par \tab .\par \tab .\par nwRec\tab dc\tab i'1'\par nwWFile\tab dc\tab a4'path'\par \par path\tab dOSOut\tab 256\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 PopVariables}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PopVariables\tcl2}}}{\b\f4  ($0157)\tab Pop the Previous Variable List\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      PopVariablesGS REC\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PopVariables shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables}}}{\v\f4\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 PopVariables restores the shell variable list to the state that it was in when the last PushVariables call was made.  If no PushVariables call has been made, or if a PopVariables call has been made for each PushVariables call, the call is ignored.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {{\pict{\*\picprop\shplid1084{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich30\picwgoal1920\pichgoal600\macpict\bliptag-152262043\blipupi72{\*\blipuid f6ecaa6594286f5fa226c72f7d0117cf}00d200070007002500671101a00082a0008c01000a00070007002500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a00083ff}}{\par \par }{\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [0]\par \par \tab \tab Parameter count; must be 0.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab PopVariablesGS pvRec\par \tab .\par \tab .\par \tab .\par pvRec\tab dc\tab i'0'\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 PushVariables}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PushVariables\tcl2}}}{\b\f4  ($0158)\tab Push the Variable List\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      PushVariablesGS REC\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PushVariables shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 shell variables\:scope}}}{\v\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EXEC files}}}{\v\f6\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 PushVariables saves the current state of the shell variable list, then sets up a new shell variables list using the rules for creating a new EXEC file; i.e., a new list of variables is created, and any exportable variables are copied into the new list.  PopVariables can be called to destroy the variable list, returning to the one pushed.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:}{\f4\fs20 \par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {{\pict{\*\picprop\shplid1085{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich30\picwgoal1920\pichgoal600\macpict\bliptag-152262043\blipupi72{\*\blipuid f6ecaa6594286f5fa226c72f7d0117cf}00d200070007002500671101a00082a0008c01000a00070007002500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a00083ff}}{\par \par }{\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [0]\par \par \tab \tab Parameter count; must be 0.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab PushVariablesGS pvRec\par \tab .\par \tab .\par \tab .\par pvRec\tab dc\tab i'0'\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 ReadIndexed}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ReadIndexed\tcl2}}}{\b\f4  ($0148)\tab Indexed Shell Variable Read\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      ReadIndexedGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ReadIndexed shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 shell variables\:scope}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You can use this function to read the contents of the variable table for the command level at which the call is made.  To read the entire contents of the variable table, you must repeat this call, incrementing the index number by 1 each time, until the entire contents have been returned.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1086{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich174\picwgoal1920\pichgoal3480\macpict\bliptag-889858054\blipupi72{\*\blipuid caf5d7fac3def588eb65129ec8f013fc}03e60007000700b500671101a00082a0008c01000a0007000700b500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0143a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0144a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b0324046e616d65a00099a00097a0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da1009600060600000002baa1009a0008fffe0000000b0000a000982a300576616c7565a00099a00097a0008c340082001c009b00653822008e001c060022008e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000b0000a000982a2405696e646578a00099a00097a0008c34009a001c00b30065382200a6001c06002200a60064fa00a0008da1009600060600000002baa1009a0008fffe0000000d0000a000982800a90033066578706f7274a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [4]\par \par \tab \tab Parameter count; must be 4.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab name\tab Pointer to name\tab 4-byte pointer [$0000 0000\endash \par \tab \tab of variable\tab                      $00FF FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\pard\plain \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is a pointer to a GS/OS output buffer in which the shell places the name of the next variable in the variable table.  A null string is returned when the index number exceeds the number of variables in the variable table.\par }\pard \qj\fi360\li2520\widctlpar\adjustright {\f4\fs20 In the 2.0 version of the shell, the longest possible variable name is 256 characters long.\par }\pard \qj\li2160\widctlpar\tx1440\tx2160\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li450\keep\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab value\tab Pointer to value \tab 4-byte pointer [$0000 0000\endash \par \tab \tab of variable\tab                      $00FF FFFF]\par }\pard \qj\li450\keep\keepn\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\keep\keepn\widctlpar\adjustright {\f4\fs20 This is a pointer to a GS/OS output buffer into which the shell places the value of the variable.  The value consists of a null string (that is, the length byte is $00) for an undefined variable.\par }\pard \qj\fi360\li2520\keep\keepn\widctlpar\adjustright {\f4\fs20 Variable values can be up to 65531 characters long.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A\endash $0B\tab index\tab Index number\tab 2-byte value [$0000\endash $FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is an index number that you provide.  Start with $01 and increment the number by 1 with each successive ReadIndexed call until there are no more values in the variable table.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0C\endash $0D\tab export\tab Export flag\tab 2-byte value [$0000\endash $FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 The shell returns this value, which will be 0 if the variable is not marked as exportable, and non-zero if the variable is marked as exportable.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Memory Manager}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\fi-540\li980\ri360\keep\widctlpar\adjustright {\f4\fs20 $??\tab Errors for the LOCK and UNLOCK Memory Manager calls.  See the }{\i\f4\fs20 Apple Toolbox Reference}{\f4\fs20  manual for descriptions of these errors.\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab lda\tab #1\par \tab sta\tab riIndex\par \tab ReadIndexedGS riRec\par \tab .\par \tab .\par \tab .\par riRec\tab dc\tab i'4'\par riName\tab dc\tab a4'name'\par riValue\tab dc\tab a4'value'\par riIndex\tab ds\tab 2\par riExport\tab ds\tab 2\par \par name\tab dOSOut\tab 256\par value\tab dOSOut\tab 1024\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 ReadVariable}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ReadVariable\tcl2}}}{\b\f4  ($014B)\tab Read Shell Variable\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      ReadVariableGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ReadVariable shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 shell variables}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function reads the string associated with a variable (that is, the value of the variable).  The value returned is the one valid for the currently-executing Exec file and any Exec files called from that file, or for the interactive command interpreter and all Exec files called from the command interpreter (if that is the command level in use).  Variables and Exec files are described in Chapter 12.  Use the Set call to set the value of a variable.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \qj\li450\widctlpar\adjustright {\f4\fs20 \par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1087{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich150\picwgoal1920\pichgoal3000\macpict\bliptag-1654950598\blipupi72{\*\blipuid 9d5b753a3955a71b21b63011c7537af4}035500070007009d00671101a00082a0008c01000a00070007009d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b0324046e616d65a00099a00097a0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da1009600060600000002baa1009a0008fffe0000000b0000a000982a300576616c7565a00099a00097a0008c340082001c009b00653822008e001c060022008e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000d0000a000982800910033066578706f7274a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\li450\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [3]\par \par \tab \tab Parameter count; must be 3.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab name\tab Pointer to name \tab 4-byte pointer [$0000 0000\endash \par \tab \tab of variable\tab                      $00FF FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\pard\plain \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is a pointer to a GS/OS input buffer that contains the name of the variable whose value you wish to read.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab value\tab Pointer to value\tab 4-byte pointer [$0000 0000\endash \par \tab \tab of variable\tab                      $00FF FFFF]\par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is a pointer to a OS/OS output buffer into which the shell places the value of the variable.  The value consists of a null string (that is, the length byte is $00) for an undefined variable.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A\endash $0B\tab export\tab Export flag\tab 2-byte value [$0000\endash $FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 The shell returns this value, which will be 0 if the variable is not marked as exportable, and non-zero if the variable is marked as exportable.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx990\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab ReadVariableGS rvRec\par \tab .\par \tab .\par \tab .\par rvRec\tab dc\tab i'3'\par rvName\tab dc\tab a4'name'\par rvValue\tab dc\tab a4'value'\par rvExport\tab ds\tab 2\par \par name\tab dOSIn\tab 'Status'\par value\tab dOSOut\tab 10\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 Redirect}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Redirect\tcl2}}}{\b\f4  ($0150)\tab Redirect I/O\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      RedirectGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Redirect shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 redirection}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function instructs the shell to redirect input or output to the console, or a disk file.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1088{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich126\picwgoal1920\pichgoal2520\macpict\bliptag370469164\blipupi72{\*\blipuid 1614e92ced2a4551e272f925eb307964}02f100070007008500671101a00082a0008c01000a00070007008500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da0008c34003a001c0053006538220046001c06002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000d0000a000982b011806646576696365a00099a00097a1009600060600000002baa1009a0008fffe0000000f0000a00098280049003106617070656e64a00099a00097a0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da1009600060600000002baa1009a0008fffe000000060000a000982b09240466696c65a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [3]\par \par \tab \tab Parameter count; must be 3.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $03\tab device\tab Device number\tab 2-byte value [$0000\endash $0002]\par }{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard input}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This parameter indicates which type of input or output you wish to redirect, as follows:\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li2610\widctlpar\tx2520\tx3420\tx4320\adjustright {\f4\fs20 $0000\tab Standard input\par $0001\tab Standard output\par $0002\tab Error output\par \par }\pard \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $04\endash $05\tab append\tab Append flag\tab 2-byte value [$0000\endash $FFFF]\par }{\pard\plain \li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 appending to the end of a file}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\keepn\widctlpar\tx4320\adjustright {\f4\fs20 This flag indicates whether redirected output should be appended to an existing file with the same file name, or the existing file should be deleted first.  If append is 0, the file is deleted, if it is any other value, the output is appended to the file.\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li450\keep\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab file\tab Address of file name\tab 4-byte pointer [$0000 0000\endash \par \tab \tab \tab                      $00FF FFFF]\par }{\v\f4\fs20 .CONSOLE;}{\pard\plain \qj\li450\keep\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.CONSOLE}}}{\v\f4\fs20 .PRINTER;}{\pard\plain \qj\li450\keep\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 devices\:.PRINTER}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\keep\keepn\widctlpar\tx4320\adjustright {\f4\fs20 The address of a GS/OS input buffer containing the file name of the file to or from which output is to be redirected.  The file name can be any valid GS/OS file name, a partial or full path name, or the name of a character device.\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par $53\tab Parameter out of range\par }\pard \qj\fi-540\li980\keep\widctlpar\adjustright {\f4\fs20 $??\tab Errors for the following GS/OS calls.  See the }{\i\f4\fs20 GS/OS\u8482\'aa Reference Manual }{\f4\fs20 and the }{\i\f4\fs20 Apple Toolbox Reference}{\f4\fs20  manuals for descriptions of these errors.\par }\pard \qj\fi-540\li980\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\li1440\widctlpar\adjustright {\f4\fs20 Open\par Close\par Read\par Write\par Get End of File\par }\pard \qj\widctlpar\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\pard\plain \qj\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab RedirectGS rdRec\tab send error out to a printer\par \tab .\par \tab .\par \tab .\par rdRec\tab dc\tab i'3'\par rdDevice\tab dc\tab i'2'\par rdAppend\tab dc\tab i'0'\par rdFile\tab dc\tab a4'name'\par \par name\tab dOSIn\tab '.Printer'\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 Set}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Set\tcl2}}}{\b\f4  ($0146)\tab Set Shell Variable\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      SetGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Set shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 shell variables\:assigning values to}}}{\v\f6\fs20 \par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Read shell call}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ReadIndexed shell call}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASCII}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function sets the value of a variable.  If the variable has not been previously defined, this function defines it.  Variables are described in Chapter 10.  Use the ReadVariable call to read the current value of a variable and the ReadIndexed call to read a variable table.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1089{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich150\picwgoal1920\pichgoal3000\macpict\bliptag-1654950598\blipupi72{\*\blipuid 9d5b753a3955a71b21b63011c7537af4}035500070007009d00671101a00082a0008c01000a00070007009d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b0324046e616d65a00099a00097a0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da1009600060600000002baa1009a0008fffe0000000b0000a000982a300576616c7565a00099a00097a0008c340082001c009b00653822008e001c060022008e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000d0000a000982800910033066578706f7274a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [3]\par \par \tab \tab Parameter count; must be 3.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab name\tab Pointer to name of \tab 4-byte pointer [$0000 0000\endash \par \tab \tab variable\tab                      $00FF FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx2520\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 This is a pointer to a GS/OS Input string in which you place the name of the variable whose value you wish to change.  The name is an ASCII string.  Only the first 255 characters of the name are significant.\par }\pard \qj\li2520\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab value\tab Pointer to value of \tab 4-byte pointer [$0000 0000\endash \par \tab \tab variable\tab                     $00FF FFFF]\par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2250\tx2520\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\keepn\widctlpar\adjustright {\f4\fs20 This is a pointer to a buffer in which you place the value to which the variable is to be set.  The value is an ASCII string.\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A\endash $0B\tab export\tab Export flag\tab 2-byte value [$0000\endash $FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Export flag.  Set this parameter to 1 if the variable is exportable, and 0 if the variable cannot be exported.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Memory Manager}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox, Apple II}{\scaps\v\f4\fs20 gs}{\v\f4\fs20 }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\fi-540\li980\ri360\keep\keepn\widctlpar\adjustright {\f4\fs20 $??\tab Errors for the following Memory Manager calls.  See the }{\i\f4\fs20 Apple II}{\i\scaps\f4\fs20 gs }{\i\f4\fs20 Toolbox Reference }{\f4\fs20 manual for descriptions of these errors.\par }\pard \qj\li1440\ri360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li1440\widctlpar\tx1440\adjustright {\f4\fs20 HLock\par HUnlock\par GrowHandle\par SetHandleSize\par }\pard \qj\widctlpar\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab SetGS\tab svRec\par \tab .\par \tab .\par \tab .\par svRec\tab dc\tab i'3'\par svName\tab dc\tab a4'name'\par svValue\tab dc\tab a4'value'\par svExport\tab dc\tab i'1'\par \par name\tab dOSIn\tab 'Prompt'\par value\tab dOSIn\tab 'My GS: '\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SetIODevices}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetIODevices\tcl2}}}{\b\f4  ($015B)\tab Set the IO Devices\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      SetIODevicesGS REC\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SetIODevices shell call\bxe }}}{\v\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 device numbers}}}{\v\f6\fs20 .CONSOLE;}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 devices\:.CONSOLE}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 standard output}}}{\v\f6\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 This call sets the device numbers and procedure addresses that will be used by the shell when output is sent to or read from .console.  This is generally used by desktop development environments that want to trap the standard console output for display in a window.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2430\tx3960\adjustright {{\pict{\*\picprop\shplid1090{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw222\pich138\picwgoal4440\pichgoal2760\macpict\bliptag186683825\blipupi72{\*\blipuid 0b2091b1aa8eb5aadde5b8846abef928}05b900070007009100e51101a00082a0008c01000a00070007009100e50a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000170000a0009828003100290a6f757470757454797065a00099a00097a0008c34003a001c006b006538220046001c0600220052001c060022005e001c06002200460064fa002200520064fa0022005e0064fa00a0008da1009600060600000002baa1009a0008fffe000000160000a000982b01240a6f757470757441646472a00099a00097a0008c34006a001c0083006538220076001c06002200760064fa00a0008da1009600060600000002baa1009a0008fffe000000130000a000982b0324096572726f7254797065a00099a00097a1009600060500000002baa1009a0008fffe000000060000a0009828001f00890141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a3c0146a00099a00097a1009600060500000002baa1009a0008fffe000000060000a0009828002a00890142a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0143a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0144a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0145a00099a00097a0008c340016009a004700e338220022009a060022002e009a060022003a009a060022002200e2fa0022002e00e2fa0022003a00e2fa00a0008da1009600060600000002baa1009a0008fffe000000130000a0009828003100ab096572726f7241646472a00099a00097a0008c340046009a005f00e338220052009a060022005200e2fa00a0008da1009600060600000002baa1009a0008fffe000000140000a0009828005500aa09696e70757454797065a00099a00097a0008c34005e009a008f00e33822006a009a0600220076009a0600220082009a060022006a00e2fa0022007600e2fa0022008200e2fa00a0008da1009600060600000002baa1009a0008fffe000000130000a000982b012409696e70757441646472a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982800660089023130a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023131a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023132a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023133a00099a00097220016009a00f422001600e200f422008e001c00f422008e006400f4a00083ff}}{\f4\fs20 \par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [6]\par \par \tab \tab Parameter count; must be 6.\par \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $03\tab outputType\tab output device type\tab 2-byte value [$0000\endash $0002]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\pard\plain \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Text Tools}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetOutputDevice call}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Used as the deviceType parameter of the Text Toolkit's SetOutputDevice call when the shell changes standard out to .}{\caps\f4\fs20 console}{\f4\fs20 .\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $04\endash $07\tab outputAddr\tab output slot number\tab 4-byte value [$0000 0000\endash \par \tab \tab or pointer to driver\tab                   $0FF FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Used as the ptrOrSlot parameter of the Text Tools' SetOutputDevice call when the shell changes standard out to .}{\caps\f4\fs20 console}{\f4\fs20 .\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $08\endash $09\tab errorType\tab error device type\tab 2-byte value [$0000\endash $0002]\par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2250\tx3960\adjustright {\pard\plain \qj\li450\keepn\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetErrorDevice call}}}{\pard\plain \qj\li450\keepn\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Used as the deviceType parameter of the Text Tools' SetErrorDevice call when the shell changes error out to .}{\caps\f4\fs20 console}{\f4\fs20 .\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A\endash $0D\tab errorAddr\tab error slot number\tab 4-byte value [$0000 0000\endash \par \tab \tab or pointer to driver\tab                   $0FF FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Used as the ptrOrSlot parameter of the Text Tools' SetErrorDevice call when the shell changes error out to .}{\caps\f4\fs20 console}{\f4\fs20 .\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0E\endash $0F\tab inputType\tab input device type\tab 2-byte value [$0000\endash $0002]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\pard\plain \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetInputDevice call}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard input}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Used as the deviceType parameter of the Text Toolkit's SetInputDevice call when the shell changes standard in to .}{\caps\f4\fs20 console}{\f4\fs20 .\par }\pard \qj\fi-1440\li1440\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $10\endash $13\tab inputAddr\tab input slot number\tab 4-byte value [$0000 0000\endash \par \tab \tab or pointer to driver\tab                   $0FF FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Used as the ptrOrSlot parameter of the Text Toolkit's SetInputDevice call when the shell changes standard in to .}{\caps\f4\fs20 console}{\f4\fs20 .\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }{\b\f4\fs20 Coding Example:\par }{\pard\plain \qj\widctlpar\tx990\adjustright \v\f4\fs18\cgrid {\xe {\v\f4\fs18 }{\v\f4\fs18 DC directive}}}{\v\f4\fs18 \par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab SetIODevicesGS siRec\tab use text shell defaults\par \tab .\par \tab .\par \tab .\par siRec\tab dc\tab i'6'\par \tab dc\tab i'-1',a4'0'\par \tab dc\tab i'-1',a4'0'\par \tab dc\tab i'-1',a4'0'\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 SetLang}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetLang\tcl2}}}{\b\f4  ($0144)\tab Set Language Number\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      SetLangGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SetLang shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 language numbers}}}{\v\f6\fs20 \par }{\f6\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function sets the current language number.  Language numbers are described in the section \ldblquote Command Types" in Chapter 12.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1091{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich54\picwgoal1920\pichgoal1080\macpict\bliptag-704198529\blipupi72{\*\blipuid d606c87f656a7c9dfb33593c50115219}016300070007003d00671101a00082a0008c01000a00070007003d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000080000a000982b0618046c616e67a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02-$03\tab lang\tab Language number\tab 2-byte value [$0000\endash $7FFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The ORCA language number to which the current ORCA language should be set.  If the language specified is not installed (that is, not listed in the command table), then the \ldblquote language not available\rdblquote  error is returned.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\li450\widctlpar\tx990\adjustright {\f4\fs20 $80\tab Language not available\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx990\adjustright {\b\f4\fs20 Coding Example:\par }{\pard\plain \qj\keepn\widctlpar\tx990\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18 \tab SetLangGS slRec\par \tab .\par \tab .\par \tab .\par slRec\tab dc\tab i'1'\par \tab dc\tab i'4'\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SetLInfo}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetLInfo\tcl2}}}{\b\f4  ($0142)\tab Set Language Info\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\f4\fs20 \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      SetLInfoGS REC\par }{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SetLInfo shell call\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 shell\:parameter passing}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GetLInfo shell call}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This function is used by an assembler, compiler, linker, or editor to pass parameters to the ORCA shell before executing an RTL to return control to the shell.  It can also be used by a shell program under which you are running ORCA to pass parameters to the ORCA shell.\par Use the GetLInfo call to read parameters passed to your assembler, compiler, linker, or editor.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \keepn\widctlpar\adjustright {\par }\pard \li890\widctlpar\adjustright {{\pict{\*\picprop\shplid1092{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw240\pich234\picwgoal4800\pichgoal4680\macpict\bliptag166981909\blipupi72{\*\blipuid 09f3f115e9a6688eb40e0f8d621fab25}093d0007000700f100f71101a00082a0008c01000a0007000700f100f70a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0136a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0137a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0138a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0139a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0141a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0142a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0143a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0144a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0145a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0146a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000090000a000982b0524057346696c65a00099a00097a0008c340052001c008300653822005e001c060022006a001c0600220076001c060022005e0064fa0022006a0064fa002200760064fa00a0008da1009600060600000002baa1009a0008fffe000000090000a000982a30056446696c65a00099a00097a0008c340082001c00b300653822008e001c060022009a001c06002200a6001c060022008e0064fa0022009a0064fa002200a60064fa00a0008da1009600060600000002baa1009a0008fffe0000000c0000a0009828009d0034057061726d73a00099a00097a0008c3400b2001c00e30065382200be001c06002200ca001c06002200d6001c06002200be0064fa002200ca0064fa002200d60064fa00a0008da1009600060600000002baa1009a0008fffe0000000d0000a000982800cd00330769537472696e67a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982800d3000b023130a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023131a00099a000972200e2001c000c2200e20064000c22000a00ac000c22000a00f4000c34001600ac002300f538a1009600060600000002baa1009a0008fffe000000090000a0009828001f00c8046d657272a00099a0009734002200ac002f00f538a1009600060600000002baa1009a0008fffe0000000a0000a0009828002b00c6056d65727266a00099a0009734002e00ac003b00f538a1009600060600000002baa1009a0008fffe000000080000a000982b020c046c6f7073a00099a0009734003a00ac004700f538a1009600060600000002baa1009a0008fffe0000000a0000a0009828004300c6056b666c6167a00099a00097a0008c34004600ac007700f53822005200ac060022005e00ac060022006a00ac060022005200f4fa0022005e00f4fa0022006a00f4fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828006100c2066d466c616773a00099a00097a0008c34007600ac00a700f53822008200ac060022008e00ac060022009a00ac060022008200f4fa0022008e00f4fa0022009a00f4fa00a0008da1009600060600000002baa1009a0008fffe0000000d0000a000982b01300670466c616773a00099a00097a0008c3400a600ac00d700f5382200b200ac06002200be00ac06002200ca00ac06002200b200f4fa002200be00f4fa002200ca00f4fa00a0008da1009600060600000002baa1009a0008fffe000000060000a000982b0730036f7267a00099a00097a1009600060500000002baa1009a0008fffe000000070000a0009828001f009b023132a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023133a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023134a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023135a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023136a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023137a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023138a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023139a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023141a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023142a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023143a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023144a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023145a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023146a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023230a00099a00097a1009600060500000002baa1009a0008fffe000000070000a000982a0c023231a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [11]\par \par \tab \tab Parameter count; must be 11.\par \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02\endash $05\tab sfile\tab Address of source\tab 4-byte pointer [$0000 0000\endash \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \tab \tab file name\tab                     $00FF FFFF]\par \par }{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\v\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The address of a GS/OS input string containing the file name of the source file; that is, the next file that a compiler or assembler is to process.  The file name can be any valid GS/OS file name, and can be a partial or full path name.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $06\endash $09\tab dfile\tab Address of output \tab 4-byte pointer [$0000 0000\endash \par \tab \tab file name\tab                      $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The address of a GS/OS input string containing the file name of the output file (if any); that is, the file that the compiler or assembler writes to.  The file name can be any valid GS/OS file name, and can be a partial or full path name.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $0A\endash 0D\tab parms\tab Address of parameter\tab  4-byte pointer [$0000 0000\endash \par \tab \tab list\tab \tab                $00FF FFFF]\par }{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GetLInfo shell call}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The address of a GS/OS input string containing the list of names from the NAMES= parameter list in the ORCA shell command that called the assembler or compiler.  The compiler can remove or modify these names as it processes them, so this list can be different from the one received through the GetLInfo call.\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par $0E\endash $11\tab istring\tab Address of input \tab 4-byte pointer [$0000 0000\endash \par \tab \tab strings\tab \tab \tab    $00FF FFFF]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 A placeholder for the address of a GS/OS input string containing the string of commands passed to the compiler.  This command string is not reused by the shell, so it is not necessary to pass it back to the shell with the SetLInfo call.\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par $12\tab merr\tab Maximum error\tab 1-byte value [$00\endash $10]\par \tab \tab level allowed\par }{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\pard\plain \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASML command}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 If the maximum error level found by the assembler, compiler, or linker is greater than merr, then the shell does not call the next program in the processing sequence.  For example, if you use the ASML command to assemble and link a program, but the assembler finds an error level of 8 when merr equals 2, then the linker is not called when the assembly is complete.\par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $13\tab merrf\tab Maximum error \tab 1-byte value [$00\endash $FF]\par \tab \tab level found\par }{\pard\plain \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:shell}}}{\pard\plain \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels}}}{\pard\plain \qj\li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This field is used by the SetLInfo call to return the maximum error level found.  If merrf is greater than merr, then no further processing is done by the shell.  If the high bit of merrf is set, then merrf is considered to be negative; a negative value of merrf indicates a fatal error (normally, all fatal errors are flagged as merrf=$FF).  In this case, processing terminates immediately and control is passed by the shell to the ORCA editor.  See also the discussion of the org parameter. \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par $14\tab lops\tab Operations flags\tab 1-byte value [$00\endash $10]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This field is used to keep track of the operations that have been performed by the system.  The format of this byte is as follows:\par }\pard \widctlpar\tx2520\tx4320\adjustright {\par }\pard \li2610\widctlpar\tx2520\tx4320\adjustright {{\pict{\*\picprop\shplid1093{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw187\pich42\picwgoal3740\pichgoal840\macpict\bliptag1399142886\blipupi72{\*\blipuid 536539e66e9b7035b664fa7baca02fab}033500070007003100c21101a0008201000a00070007003100c20a000000000000000034000a002d002f00be3820001c002d001c00bd22000a0075002422000a0051002422000a0099002422000a003f002422000a0063002422000a0087002422000a00ab0024a100960006050000000274a1009a0008fffe000000090000a000980300150d00092b1a16044269743aa00099a00097a100960006050000000274a1009a0008fffd000000100000a000980d000a280026000b0656616c75653aa00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828001800340137a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829250135a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829120134a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829110133a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828001800460136a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829480132a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829110131a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009829120130a00099a00097a100960006050000000274a1009a0008fffd000000070000a000982a110143a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900a0014ca00099a00097a100960006050000000274a1009a0008fffd000000070000a00098280029008e0145a00099a00097a100960006050000000274a1009a0008fffd000000070000a00098280029007b0130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900690130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900590130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900450130a00099a00097a100960006050000000274a1009a0008fffd000000070000a0009828002900340130a00099a00097a00083ff}}{\par }\pard \widctlpar\tx2520\tx4320\adjustright {\par }\pard \qj\fi2880\li450\widctlpar\tx2520\tx4320\adjustright {\f4\fs20 where\tab C = Compile\par \tab L = Link\par \tab E = Execute\par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\pard\plain \qj\li2520\widctlpar\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\li2520\widctlpar\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LINK command}}}{\v\f4\fs20 \par }{\f4\fs20 \par When a bit is set (1), the indicated operation is to be done.  When a compiler finishes its operation and returns control to the shell, it clears bit 0 unless a file with another language is appended to the source.  When a linker returns control to the shell, it clears bit 1.  When you execute the linker with a LINK command, the linker clears bits 0 and 1.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li446\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $15\tab kflag\tab Keep flag\tab 1-byte value [$00\endash $03]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This flag indicates what should be done with the output of a compiler, assembler, or linker, as follows:\par \par }\pard \qj\fi-720\li3330\widctlpar\tx2520\tx3330\tx4320\adjustright {\f4\fs20 Kflag\par }{\f4\fs20\ul Value}{\f4\fs20 \tab }{\f4\fs20\ul Meaning\par }{\f4\fs20 \par $00\tab Do not save output.\par \par $01\tab Save to an object file with the root file name pointed to by dfile.  For example, if the output file name pointed to by dfile is PROG, then the first segment to be executed should be put in PROG.ROOT and the remaining segments should be put in PROG.A.  For linkers, save to a load file with the name pointed to by dfile (for example, PROG).  A compiler or assembler will never set kflag to $01, but a shell program calling ORCA might use this value.\par \par }\pard \qj\fi-720\li3330\keep\keepn\widctlpar\tx2520\tx3330\tx4320\adjustright {\f4\fs20 $02\tab The .ROOT file has already been created.  In this case, the first file created by the next compiler or assembler should end in the .A extension.\par \par $03\tab At least one alphabetic suffix has been used.  In this case, the compiler or assembler must search the directory for the highest alphabetic suffix that has been used, and then use the next one.  For example, if PROG.ROOT, PROG.A, and PROG.B already exist, the compiler should put its output in PROG.C.\par }{\pard\plain \qj\fi-720\li3330\keep\keepn\widctlpar\tx2520\tx3330\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\fi-720\li3330\keep\keepn\widctlpar\tx2520\tx3330\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP parameter}}}{\pard\plain \qj\fi-720\li3330\keep\keepn\widctlpar\tx2520\tx3330\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 \{KeepName\} shell variable}}}{\pard\plain \qj\fi-720\li3330\keep\keepn\widctlpar\tx2520\tx3330\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 When the compiler or assembler passes control back to the shell, it should reset kflag to indicate which object files it has written; for example, if it found only one segment and created a .ROOT file but no .A file, then kflag should be $02 in the SetLInfo call.  See chapters 12, 14, and 17 for more information on object-file naming conventions.\par }\pard \qj\li2610\widctlpar\tx2520\tx3600\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $16\endash $19\tab mflags\tab Flags with a minus \tab 4-byte result [binary string]\par \tab \tab sign\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This parameter passes command-line-option flags such as \endash L or \endash C.  The first 26 bits of these four bytes represent the letters A\endash Z, arranged with A as the most significant bit of the most significant byte; the bytes are ordered least significant byte first.  The bit map is as follows:\par }\pard \li2250\widctlpar\tx2520\tx2610\tx4320\adjustright {\f4\fs20 \par }\pard \li2700\widctlpar\tx4320\adjustright {\f6\fs18 11000000 11111111 11111111 11111111\par YZ       QRSTUVWX IJKLMNOP ABCDEFGH\par }\pard \li2250\widctlpar\tx2520\tx2610\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 For each flag set with a minus sign in the command, the corresponding bit in this parameter is set to 1.  See the discussion of the ASML command in Chapter 12 for descriptions of these option flags.\par }\pard \li2250\widctlpar\tx2520\tx2610\tx4320\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $1A\endash $1D\tab pflags\tab Flags with a plus \tab 4-byte result [binary string]\par \tab \tab sign\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This parameter passes command-line-option flags such as +L or +C.  The first 26 bits of these four bytes represent the letters A\endash Z; the bit map for this parameter is the same as for the mflags parameter.  See the discussion of the ASML command in Chapter 12 for descriptions of these option flags.\par }\pard \qj\li2250\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 \par }\pard \li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $1E\endash $21\tab org\tab Origin\tab 4-byte value [$0000 0000\endash \par \tab \tab \tab \tab \tab $FFFF FFFF]\par }{\pard\plain \li446\keepn\widctlpar\tx1440\tx2520\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 The start address of the load file.  The origin is used only by the linker.  When a compile or assembly terminates with a fatal error (merrf=$FF), the compiler or editor should put the displacement of the line containing the error into the org field.  The editor can then place that line at the top of the screen.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DC directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DS directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab SetLInfo slRec\par \tab .\par \tab .\par \tab .\par slRec\tab dc\tab i'11'\par slSFile\tab dc\tab a4'inFile'\par slDFile\tab dc\tab a4'outFile'\par slParms\tab dc\tab a4'parmList'\par slIString\tab dc\tab a4'cmdList'\par slMerr\tab dc\tab i'0'\par slMerrf\tab dc\tab i'0'\par slLops\tab dc\tab i'$07'\par slKFlag\tab dc\tab i'2'\par slMFlags\tab dc\tab i4'0'\par slPFlags\tab dc\tab i4'0'\par slOrg\tab dc\tab i4'0'\par \par inFile\tab dOSIn\tab 'source'\par outFile\tab dOSIn\tab 'keep'\par parmList\tab dc\tab i'0'\par cmdList\tab dc\tab i'0'\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SetStopFlag}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetStopFlag\tcl2}}}{\b\f4  ($0159)\tab Set the Stop Flag\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      SetStopFlagGS REC\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SetStopFlag shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Stop shell call}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DC directive}}}{\v\f6\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 Set the value of the stop flag.  A subsequent call to the Stop shell call will return this value.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1094{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich54\picwgoal1920\pichgoal1080\macpict\bliptag832178296\blipupi72{\*\blipuid 319a0878eb5152bf3d70fd6f5065c952}016300070007003d00671101a00082a0008c01000a00070007003d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000070000a000982b071804666c6167a00099a00097a00083ff}}{\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02-$03\tab flag\tab stop flag\tab 2-byte result [$0000\endash $0001]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 Use 1 to set the stop flag, and 0 to clear it.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab SetStopFlagGS ssRec\par \tab .\par \tab .\par \tab .\par ssRec\tab dc\tab i'1'\par ssFlag\tab dc\tab i'1'\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 StopGS}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 StopGS\tcl2}}}{\b\f4  ($0153)\tab Stop Processing?\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      StopGS REC\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Stop shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ABORT command}}}{\v\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 keyboard buffer}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 standard input}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DS directive}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This function lets your application detect a request for an early termination of the program.  The stop flag is set when the keyboard buffer is read after the user presses }{\outl\f4\fs18 \u-3\'f0}{\f4\fs18 .}{\f4\fs20  (open apple period).\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1095{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich54\picwgoal1920\pichgoal1080\macpict\bliptag832178296\blipupi72{\*\blipuid 319a0878eb5152bf3d70fd6f5065c952}016300070007003d00671101a00082a0008c01000a00070007003d00670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a0008c340022001c003b00653822002e001c060022002e0064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe000000070000a000982b071804666c6167a00099a00097a00083ff}}{\par }\pard \widctlpar\adjustright {\par }\pard \qj\fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02-$03\tab flag\tab Stop flag\tab 2-byte result [$0000\endash $0001]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 This flag is set ($0001) by the shell when it finds a }{\outl\f4\fs18 \u-3\'f0}{\f4\fs18 .}{\f4\fs20  in the keyboard buffer.  When an ORCA utility reads from the keyboard as standard input, the shell reads the keyboard buffer and passes the keys on to the utility.  When standard input is not from the keyboard, the shell still checks the keyboard buffer for }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 . whenever a Stop call is executed.  The flag is cleared ($0000) when the Stop call is executed, when the utility program is terminated, or when windows are switched so that the utility program is no longer active.\par }\pard \qj\li2250\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tx3960\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab StopGS ssRec\par \tab .\par \tab .\par ssRec\tab dc\tab i'1'\par ssFlag\tab ds\tab 2\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 UnsetVariable}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 UnsetVariable\tcl2}}}{\b\f4  ($0155)\tab Delete a Shell Variable\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par }{\f4\fs18 \par }{\b\f4\fs20 Forms:\par }{\f4\fs18 \par }{\f6\fs20 LAB      UnsetVariableGS REC\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 UnsetVariable shell command\bxe }}}{\v\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 shell variables\:assigning values to}}}{\v\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 UNSET command}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DC directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DS directive}}}{\v\f6\fs20 \par }{\f4\fs18 \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs18 \par }{\f4\fs20 If the named shell variable exists, it is removed from the current list of variables.  Subsequent attempts to read the value of the variable will always return the null string.  This call is completely equivalent to using the shell command UNSET.\par }{\f4\fs18 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Parameter List:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1096{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich78\picwgoal1920\pichgoal1560\macpict\bliptag-968643992\blipupi72{\*\blipuid c643aa6879a34d131b9484a2585280a0}01c900070007005500671101a00082a0008c01000a00070007005500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000b0000a000982b0324046e616d65a00099a00097a00083ff}}{\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02-$05\tab name\tab pointer to variable's\tab 4-byte pointer [$0000 0000\endash \par \tab \tab name\tab \tab          $00FF FFFF]\par }\pard \qj\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20 \par }\pard \qj\li2520\widctlpar\adjustright {\f4\fs20 Pointer to the name of the variable to unset.  The name is a GS/OS input string.\par }\pard \qj\widctlpar\tx1440\tx2430\tx3960\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs18 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\tx990\adjustright {\f4\fs18 \par }{\b\f4\fs20 Coding Example:\par }{\f4\fs18 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab UnsetVariableGS uvRec\par \tab .\par \tab .\par \tab .\par uvRec\tab dc\tab i'1'\par \tab dc\tab a4'name'\par \par name\tab dOSIn\tab 'Exit'\par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 Version}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Version\tcl2}}}{\b\f4  ($0147)\tab Shell Version\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB      VersionGS REC\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Version shell call\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 version numbers}}}{\v\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DS directive}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Description:\par }{\f4\fs20 \par This function returns the version number of the ORCA shell that you are using.\par \par }{\b\f4\fs20 Parameter List:\par }\pard \widctlpar\adjustright {\par }\pard \li450\widctlpar\adjustright {{\pict{\*\picprop\shplid1097{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich78\picwgoal1920\pichgoal1560\macpict\bliptag-768082436\blipupi72{\*\blipuid d237fdfcd828c478285c77283a0abeab}01ce00070007005500671101a00082a0008c01000a00070007005500670a000000000000000034000a001c0023006538220016001c06002200160064fa00a0008da1009600060500000002baa1009a0008fffe000000060000a000982c000c00150948656c7665746963610300150d00092b0b130130a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0131a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0132a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0133a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0134a00099a00097a1009600060500000002baa1009a0008fffe000000060000a000982a0c0135a00099a00097a0008c340022001c005300653822002e001c060022003a001c0600220046001c060022002e0064fa0022003a0064fa002200460064fa00a0008da1009600060600000002baa1009a0008fffe0000000e0000a0009828001900320670436f756e74a00099a00097a1009600060600000002baa1009a0008fffe0000000f0000a0009828003d00310776657273696f6ea00099a00097a00083ff}}{\par }\pard \qj\fi-450\li450\widctlpar\tx1440\tx2250\tx3960\adjustright {\f4\fs20\ul \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20\ul Offset}{\f4\fs20 \tab }{\f4\fs20\ul Label}{\f4\fs20 \tab }{\f4\fs20\ul Parameter Name}{\f4\fs20 \tab }{\f4\fs20\ul Size and Type [range of values]\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $00-$01\tab pCount\tab parameter count\tab 2-byte value [1]\par \par \tab \tab Parameter count; must be 1.\par \par }\pard \qj\li450\widctlpar\tx1440\tx2520\tx4320\adjustright {\f4\fs20 $02-$05\tab version\tab Version number\tab 4-byte result [$0000 0000\endash \par \tab \tab \tab \tab \tab  $3939 3939]\par \par }\pard \qj\li2520\widctlpar\tx4320\adjustright {\f4\fs20 A four-byte ASCII string specifying the version number of the ORCA shell that you are using.  The initial release returns 20 followed by two space characters, with the 1 in byte 0 ($2020 3032), to indicate version number 2.0.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Possible Errors:\par }{\f4\fs20 \par }\pard \qj\fi-540\li980\widctlpar\adjustright {\f4\fs20 $04\tab Invalid parameter count\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \fi450\widctlpar\tx1440\tx2160\tx5040\adjustright {\f6\fs18      \tab VersionGS vrRec\par \tab .\par \tab .\par \tab .\par vrRec\tab dc\tab i'1'\par vrVersion\tab ds\tab 4\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 25: Miscellaneous Macros\par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 C}{\b\f4\fs36 hapter 25\par Miscellaneous Macros\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Chapter 25 \endash  Miscellaneous Macros\tcl1}}}{\v\f4 \par }{\f4 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This section describes all of the macros that did not fit into one of the previous groups.\par The macros in this section are contained in the file M16.ORCA, located in the ORCAInclude directory in your libraries folder.  You can access this file using the path name 13:ORCAInclude:m16.ORCA from your hard disk, or if you are using floppy disks, from :ORCA.Extras:Libraries:ORCAInclude:m16.ORCA.\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 ASL2}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ASL2\tcl2}}}{\f4 \tab }{\b\f4 Two-Byte Arithmetic Shift Left\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab ASL2\tab N1\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASL2 macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - Number to shift.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The two-byte number at N1 is shifted left once.  The least significant bit is replaced with a zero, and the most significant bit is placed into the carry flag.  All registers are returned intact.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab ASL2\tab NUM1\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 BGT}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 BGT\tcl2}}}{\f4  \tab }{\b\f4 Branch on Greater Than}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab BGT\tab BP\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 BGT macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 branching\:assembler}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 65816\:instruction set}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par BP - Branch point.\par \par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The 65816 does not include an instruction to branch after a comparison on the condition that the register was strictly greater than the memory location.  This macro serves the purpose, working just like a normal relative branch instructions.   All registers are returned intact.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18       \tab BGT\tab THERE\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 BLE}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 BLE\tcl2}}}{\f4  \tab }{\b\f4 Branch on Less Than or Equal}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab BLE\tab BP\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 BLE macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 65816\:instruction set}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 branching\:assembler}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par BP - Branch point.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The 65816 does not include an instruction to branch after a comparison on the condition that the register was less than or equal to the memory location.  This macro serves the purpose, working just like a normal relative branch instructions.   All registers are returned intact.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18     \tab BLE\tab THERE\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4\fs20 \page }{\b\f4 BUTTON}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 BUTTON\tcl2}}}{\f4 \tab }{\b\f4 Read a Game Paddle Button\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab BUTTON BTN[,VAL]\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 BUTTON macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 game paddles}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 BMI macro}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par BTN - Button number.\par VAL - Location to place value.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par BTN is the number of one of the three game paddle buttons, numbered from 0 to 2; it can be specified using an absolute or immediate address.  The value returned is negative if the button is being pressed, and positive if it is not.  The condition codes are set appropriately, so VAL can be omitted, and the program can follow the macro with a BMI to test for a button being pressed.  If VAL is specified, it should be an absolute address\endash the result is stored there.   The contents of the accumulator and the X register are destroyed.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18          BUTTON\tab #0         \tab branch to PRESSED if \par          BMI\tab PRESSED\tab   button 0 is being pressed\par          BUTTON\tab NUM,RES \tab RES is result of examining button NUM\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 CLSUB}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CLSUB\tcl2}}}{\f4  \tab }{\b\f4 Local C Subroutine With Parameters, Stack Frame\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab CLSUB   [PARMS],SIZE\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CLSUB macro}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par PARMS - Parameter list.\par SIZE - Size of direct page space.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par See the description of the SUB macro.\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 CNVxy}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CNVxy\tcl2}}}{\f4  \tab }{\b\f4 Convert X to Y\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms: \par }{\f4\fs20 \par }{\f6\fs20 LAB\tab CNV24\tab N1[,N2]\par LAB\tab CNV28\tab N1[,N2]\par LAB\tab CNV2S\tab N1[,N2]\par LAB\tab CNV42\tab N1[,N2]\par LAB\tab CNV48\tab N1[,N2]\par LAB\tab CNV4S\tab N1[,N2]\par LAB\tab CNV82\tab N1[,N2]\par LAB\tab CNV84\tab N1[,N2]\par LAB\tab CNV8S\tab N1[,N2]\par LAB\tab CNVS2\tab N1[,N2]\par LAB\tab CNVS4\tab N1[,N2]\par LAB\tab CNVS8\tab N1[,N2]\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CNVxy macros\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 type conversions}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - The argument.\par N2 - The result.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par These macros are used to convert from one type to another type.  By varying the characters substituted for x and y, all of the macros used for conversion can be formed.  Since they all use exactly the same protocol, they are described together here.\par Both operands can be specified using absolute or indirect addressing.   It is also possible to use immediate addressing on the argument, although this is not recommended (it would be more efficient to simply use a constant in its original form).  The argument is converted from the type  indicated by x to the type indicated by y, and stored at N2.  The second operand can be omitted if the result is to be placed at the same location used for the source.  S is a string type, so it is possible to use these macros to convert a string to a binary number, or to convert a binary number to a string without printing the result.  If an overflow occurs during the conversion process, the V flag is set; otherwise it is cleared.   The contents of all registers are lost.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par \par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18          CNV24\tab INT1,INT2\tab converts the 2-byte integer at INT1 into\par !\tab \tab \tab   a 4-byte integer, saving the result at\par !\tab \tab \tab   INT2 \par          CNV42\tab \{P1\}\tab converts the number pointed to by P1 \par !\tab \tab \tab   from a 4-byte integer to a 2-byte \par !\tab \tab \tab   integer \par          CNV2S\tab N1,STR\tab converts 2-byte integer N1 to a \par !\tab \tab \tab   string, saving  at STR \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f6\fs18 \page }{\b\f4 CSUB}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CSUB\tcl2}}}{\f4  \tab }{\b\f4 C Subroutine With Parameters, Stack Frame\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab CSUB   [PARMS],SIZE\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CSUB macro}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par PARMS - Parameter list.\par SIZE - Size of direct page space.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par See the description of the SUB macro.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 DBcn}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DBcn\tcl2}}}{\f4 \tab }{\b\f4 Decrement and Branch\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DBEQ\tab R,BP\par LAB\tab DBNE\tab R,BP\par LAB\tab DBPL\tab R,BP\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DBcn macros\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 branching\:assembler}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par R - Register or memory location to decrement.\par BP - Branch point.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This set of macros implements the end of a loop in assembly language.  R can be a register or location in memory.  It is decremented, and then a branch to BP is performed if the condition specified in the op code is met.  No registers are affected, other than the one specified.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18        \tab DBNE\tab X,LAB     \tab decrement X, branch to LAB if X is not 0 \par        \tab DBEQ\tab Y,THERE   \tab decrement Y, branch to THERE if Y is 0\par \tab DBPL\tab NUM,TOP   \tab decrement NUM, branch to TOP if NUM is \par !\tab \tab \tab   positive \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 DEC2}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DEC2\tcl2}}}{\f4 \tab }{\b\f4 Two-Byte Decrement}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DEC2\tab N1\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DEC2 macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - Two-byte number to decrement.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par N1 is decreased by one.   The contents of the accumulator are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18          DEC2  NUM1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 DEC4}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DEC4\tcl2}}}{\f4 \tab }{\b\f4 Four-Byte Decrement\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DEC4\tab N1\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DEC4 macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - Four-byte number to decrement.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par N1 is decreased by one.  The accumulator is lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab DEC2\tab NUM1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 DOSIN}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DOSIN\tcl2}}}{\f4 \tab }{\b\f4 Define GS/OS Input String}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DOSIN\tab STRING\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DOSIN macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GS/OS input strings}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASCII}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par STRING - String to define.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par DW defines a GS/OS input string.  That is, a count word followed by the ASCII characters which comprise the string.  The count word specifies the number of characters in the string.  The operand should be enclosed in single quote marks; if the string contains a single quote mark, code it four times.\par No registers are affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18      \tab DOSIN  'Here''''s a sample'\tab a string of length 15\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 DOSOUT}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DOSOUT\tcl2}}}{\f4 \tab }{\b\f4 Define GS/OS Output String}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DOSOUT LENGTH[,STRING]\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DOSOUT macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GS/OS output strings}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASCII}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par LENGTH - Maximum length of the string.\par STRING - Default string.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par DOSOUT defines a GS/OS output string.  That is, a buffer length word, followed by a count word, followed by the ASCII characters which comprise the string.  The buffer length is the length of the entire structure, including the four bytes of the buffer length and current string length; GS/OS uses this value to prevent trashing the memory that lies past the end of the string.  The count word specifies the number of characters in the string.  The string operand should be enclosed in single quote marks; if the string contains a single quote mark, code it four times.\par The string operand is optional.  If omitted, the macro creates a default string with a length of zero.\par No registers are affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18      \tab DOSOUT  255\par      \tab DOSOUT  255,'file'\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 DSTR}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DSTR\tcl2}}}{\f4 \tab }{\b\f4 Define ORCA String}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DSTR\tab STRING,LENGTH\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DSTR macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 strings, ORCA macros}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 constants}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par STRING - Character string.\par LENGTH - Maximum length of string.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par An ORCA string is a set of characters which have both a maximum and current length. The current length is the number of characters currently in the string; it can range from 0 (a null string) to the maximum length.  In memory, a string is represented by two count bytes, followed by the character bytes.  The first count byte is the maximum length of the string.  It specifies the total number of bytes used for the character bytes, so the amount of memory used by a string is the maximum length plus two.  The second byte is the current length.  The remaining bytes are the ASCII character codes for the characters currently in the string.  Unused bytes, which occur when a string is less that its maximum length, do not have predictable values.\par The DSTR macro allows the definition of string constants and variables.  At least one of the operands must be specified.  It is legal to specify both.  LENGTH is the maximum length of the string, while STRING is the initial string which will be stored in the area.  Both must be constants.  STRING should be enclosed in single quote marks; if a quote mark is needed as part of the string, it should be coded four times.  If STRING is not coded, the string is initialized with a current length of 0.  If LENGTH is not coded, it is initialized to the length of the string given.\par No registers are affected.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \li450\keepn\widctlpar\tx1440\tx2160\tx5040\tx5310\adjustright {\f6\fs18        \tab DSTR\tab 'They''''re here...'\tab initialize string constant\par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2160\tx5040\tx5310\adjustright {\f6\fs18        \tab DSTR\tab LENGTH=80\tab a string variable with \par !\tab \tab \tab \tab maximum length 80; needs\par !\tab \tab \tab \tab 82 bytes of storage\par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx5040\tx5310\adjustright {\f6\fs18        \tab DSTR\tab 'one',20\tab a string with max length \par !\tab \tab \tab \tab of 20 and current length \par !\tab \tab \tab  \tab of 3\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 DW}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DW\tcl2}}}{\f4 \tab }{\b\f4 Define Word}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab DW\tab STRING\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DW macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Pascal strings}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ASCII}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par STRING - String to define.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par DW defines a "Pascal-type string."  That is, a count byte followed by the ASCII characters which comprise the string.  The count byte specifies the number of characters in the string.  The operand should be enclosed in single quote marks; if the string contains a single quote mark, code it four times.\par No registers are affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx4320\adjustright {\f6\fs18      \tab DW  \tab 'Here''''s a sample'\tab a string of length 15\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 INC2}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 INC2\tcl2}}}{\f4 \tab }{\b\f4 Two-Byte Increment\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab INC2\tab N1\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 INC2 macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - Number to increment.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Increase the two-byte number N1 by one.   The contents of the accumulator are lost if indirect addressing is used.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18      \tab INC2\tab NUM1\tab Increment 2-byte integer stored at NUM1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 INC4}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 INC4\tcl2}}}{\f4 \tab }{\b\f4 Four-Byte Increment\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab INC4\tab N1\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 INC4 macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - Number to increment.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Increase the four-byte number N1 by one.   No registers are affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18       \tab INC4\tab NUM1\tab Increment 4-byte integer stored at NUM1\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 Jcn}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Jcn\tcl2}}}{\f4  \tab }{\b\f4 Conditional Jumps}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }\pard \qj\widctlpar\tx900\tx1530\tx2970\adjustright {\f6\fs20 LAB\tab JCC\tab BP \par LAB\tab JCS\tab BP \par LAB\tab JEQ\tab BP \par LAB\tab JGE\tab BP \par LAB\tab JGT\tab BP \par LAB\tab JLE\tab BP \par LAB\tab JLT\tab BP \par LAB\tab JMI\tab BP \par LAB\tab JNE\tab BP \par LAB\tab JPL\tab BP \par }\pard \qj\widctlpar\tx900\tx1530\adjustright {\f6\fs20 LAB\tab JVC\tab BP\par LAB\tab JVS\tab BP\par }{\pard\plain \qj\widctlpar\tx900\tx1530\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Jcn macros\bxe }}}{\pard\plain \qj\widctlpar\tx900\tx1530\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 branching\:assembler}}}{\v\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par BP - Branch point.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Relative branches have a limited range.  For the many cases when a conditional branch must be made that is outside of that range, these macros let the branch around a JMP be hidden in an easily readable form.  A conditional jump macro is provided for each of the branch conditions available on the 65816 as an instruction, as well as those provided in this macro library.  \par A conditional jump can go to any memory location within the current bank.\par No registers are affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18        \tab JNE \tab THERE \tab jump to THERE if condition code is "not \par !\tab \tab \tab   equal"\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 LA}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LA\tcl2}}}{\f4 \tab }{\b\f4 Load Address}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab LA\tab AD1,AD2\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LA macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par AD1 - Place to load the address.\par AD2 - Address to load.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The address specified by the second operand is loaded into the location specified by the first operand.  Both must be absolute addresses.  AD1 can be a multiple operand.  The contents of the accumulator are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx4050\tx4230\adjustright {\f6\fs18     \tab LA \tab NUM1,4    \tab sets the two-byte integer NUM1 to 4\par        \tab LA \tab P1,THERE  \tab loads the address of the label THERE \par !\tab \tab \tab \tab into the pointer P1\par       \tab LA\tab (P1,P2),THERE\tab loads both P1 and P2 with the \par !\tab \tab \tab \tab address THERE\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 LLA}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LLA\tcl2}}}{\f4 \tab }{\b\f4 Load Long Address}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab LLA\tab AD1,AD2\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LLA macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 long addressing}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par AD1 - Place to load the address.\par AD2 - Address to load.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The address specified by the second operand is loaded into the location specified by the first operand.  Both must be absolute addresses.  AD1 can be a multiple operand.  The contents of the accumulator are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3960\adjustright {\f6\fs18       \tab LLA \tab NUM1,4      \tab sets the 4-byte integer NUM1 to 4\par          \tab LLA    P1,THERE   \tab loads the address of label THERE \par !\tab \tab \tab   into the pointer P1\par        \tab LLA \tab (P1,P2),THERE  \tab loads both P1 and P2 with the \par !\tab \tab \tab   address THERE\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 LM}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LM\tcl2}}}{\f4 \tab }{\b\f4 Load Memory\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab LM\tab AD1,AD2\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LM macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par AD1 - Place to load the byte.\par AD2 - Byte to load.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The value specified by the second operand is loaded into the location specified by the first operand.  AD1 must be an absolute address; AD2 can be absolute or immediate.  AD1 can be a multiple operand.  The contents of the accumulator are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3960\adjustright {\f6\fs18        \tab LM  \tab NUM1,#4        \tab sets the 1-byte integer NUM1 to 4\par        \tab LM  \tab (F1,F2,F3),#0  \tab sets the 3 flags F1, F2, and F3 to 0\par        \tab LM  \tab F1,F2          \tab sets F1 to the value of F2\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 LONG}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LONG\tcl2}}}{\f4 \tab }{\b\f4 Set Register State Long\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs18 LAB\tab LONG\tab I\par LAB\tab LONG\tab M\par LAB\tab LONG\tab I,M\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 LONG macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 LONGI directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 LONGA directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 word size}}}{\v\f6\fs18 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label\par I - index register (X and Y)\par M - accumulator (A)\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi260\widctlpar\adjustright {\f4\fs20 \par Used to set the length of the specified register to sixteen bits.  This macro also generates the appropriate assembler directive ( LONGA ON or LONGI OFF) to match the state of the registers.   No register contents are affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18          LONG\tab I     \tab set X and Y index to 16-bits\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 LRET}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LRET\tcl2}}}{\f4  \tab }{\b\f4 Return from LSUB or CLSUB Macro\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab LRET   [RET]\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 RET macro}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par RET - Optional return value.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par See the description of the SUB macro.\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 LSR2}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LSR2\tcl2}}}{\f4 \tab }{\b\f4 Two-Byte Logical Shift Right\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab LSR2\tab N1\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LSR2 macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 bit shifting}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - Two-byte number to shift.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The two-byte number at N1 is shifted right.  The most significant bit becomes a zero, and the least significant bit is shifted into the C flag.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18      \tab LSR2\tab NUM1     \tab divide NUM1 by 2 (unsigned)\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 LSUB}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LSUB\tcl2}}}{\f4  \tab }{\b\f4 Local Subroutine With Parameters, Stack Frame\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab LSUB   [PARMS],SIZE\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LSUB macro}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par PARMS - Parameter list.\par SIZE - Size of direct page space.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par See the description of the SUB macro.\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 MASL}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MASL\tcl2}}}{\f4 \tab }{\b\f4 Multiple Arithmetic Shift Left\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab MASL\tab ADR,NUM\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 MASL macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 bit shifting}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ADR - Value to shift.\par NUM - Number of times to shift it.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The value at ADR is shifted left NUM times.  ADR can be the accumulator.  NUM must be an integer constant.  The size of the area shifted is either one or two bytes, depending on the size of the accumulator.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18       \tab MASL\tab A,3  \tab shift accumulator left three bits\par        \tab MASL\tab MEM,4     \tab shift memory left four bits\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 MLSR}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MLSR\tcl2}}}{\f4 \tab }{\b\f4 Multiple Logical Shift Right\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab MLSR\tab ADR,NUM\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 MLSR macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 bit shifting}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ADR - Value to shift.\par NUM - Number of times to shift it.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The value at ADR is shifted right NUM times.  ADR can be the accumulator.  NUM must be an integer constant.  The size of the area shifted is either one or two bytes, depending on the size of the accumulator.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Example:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18     \tab MLSR\tab A,3       \tab shift accumulator left 3 bits\par         \tab MLSR\tab MEM,4     \tab shift memory left 4 bits\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 MOVE}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MOVE\tcl2}}}{\f4 \tab }{\b\f4 Move Memory\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab MOVE\tab AD1,AD2,LEN\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 MOVE macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par AD1 - Source address.\par AD2 - Destination address.\par LEN - Number of bytes to move.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par LEN bytes are moved from AD1 to AD2, starting at the beginning of the move range and proceeding toward the end.  LEN can range from 0 to 65535; if 0, 65536 bytes are moved.  LEN must be specified with absolute or immediate addressing.  AD1 and AD2 can both use absolute addressing.  AD1 can also use immediate addressing, in which case the entire destination range is set to the immediate value specified.\par The data bank register is set to the value of the destination's bank.  If the destination address is not in the data bank, precede the macro with a PHB directive to save the data bank, and follow it with a PLB directive to restore the data bank.\par The contents of all registers are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3960\adjustright {\f6\fs18        \tab MOVE\tab #0,PAGE,#50 \tab sets 50 bytes to 0, starting at PAGE \par }\pard \qj\li440\widctlpar\tx1440\tx2160\tx3960\adjustright {\f6\fs18        \tab MOVE\tab HERE,THERE,Q \tab moves Q bytes from HERE to THERE\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 MOVE4}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MOVE4\tcl2}}}{\f4 \tab }{\b\f4 Move 4 Bytes of Memory\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab MOVE4\tab AD1,AD2\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 MOVE macro\bxe }}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par AD1 - Source address.\par AD2 - Destination address.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Four bytes are moved from AD1 to AD2.  AD1 and AD2 can both use absolute or indirect addressing.  AD1 can also use immediate addressing.\par The MOVE4 macro is a special case of the MOVE macro that gives more addressing modes and more efficient code for this commonly used move length.\par The contents of all registers are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li440\widctlpar\tx1440\tx2160\tx3960\adjustright {\f6\fs18        \tab MOVE4\tab HERE,THERE\par \tab MOVE4\tab [4],\{8\}\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 PHx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PHx\tcl2}}}{\f4 \tab }{\b\f4 Stack Push}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab PH2\tab ADR\par LAB\tab PH4\tab ADR\par LAB\tab PH8\tab ADR\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PHx macros\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 expressions\:assembler}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 stack}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 direct page}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ADR - Address to be pushed.  Can be immediate, indirect, or absolute.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par These macros allow a two-, four- or eight-byte value to be pushed onto the hardware stack.  Immediate or absolute addressing may be used.  If absolute addressing is used, the accumulator is lost.  The PH8 macro does not allow an expression to be used in the operand.  This is because of a limitation in the DC directive.\par The PH2 and PH4 macros support two special operand characteristics.  If the operand starts with the character <, the macros assume the operand is a direct page operand, pushing the value using the PEA instruction instead of a LDA-PHA sequence.  If the operand is the single character *, the macros do nothing; this capability is used by the tool macros when you specify an operand that is already on the stack.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18      \tab PH2\tab #$2A6       \tab push a 2-byte constant value onto stack\par }\pard \qj\li450\widctlpar\tx270\tx1440\tx2160\tx3600\adjustright {\f6\fs18      \tab PH4 \tab VAR  \tab push the 4-byte value at VAR onto stack\par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18      \tab PH4 \tab #VAR      \tab push the address of VAR onto stack\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 PLx}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PLx\tcl2}}}{\f4 \tab }{\b\f4 Stack Pull\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab PL2\tab ADR\par LAB\tab PL4\tab ADR\par LAB\tab PL8\tab ADR\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PLx macros\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 stack}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par ADR - Address to place value.  Must be absolute.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par These macros allow a two-, four-, or eight-byte value to be pulled off the hardware stack.  The accumulator contents are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18       \tab PL4 \tab VAR\tab pulls 4 bytes off the stack and places \par !\tab \tab \tab   them in VAR\par        \tab PL2 \tab $02\tab pulls 2 bytes off the stack and places \par !\tab \tab \tab   them in direct page location $02\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 PREAD}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PREAD\tcl2}}}{\f4 \tab }{\b\f4 Read a Game Paddle}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab PREAD\tab PDL[,VAL]\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PREAD macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 game paddles}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par PDL - Paddle number.\par VAL - Value read.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The value of one of the four game paddles is read (the paddles are numbered from 0 to 3).  The PDL operand must be specified; it can use immediate or absolute addressing.  VAL is optional - if specified, it must use absolute addressing.  Whether or not it is specified, the value read is in the Y register.  VAL will range from 0 to 255, depending on the position of the paddle read.\par Due to the way that the Apple game paddles work, it is not a good idea to read two paddle values in quick succession.  In general, about 0.05 seconds must be allowed to elapse between readings.  Although this may seem like a short time, it is actually about 125,000 machine cycles, or about 50,000 typical assembly language instructions.  A clear symptom that enough time is not being allowed to elapse is unpredictable or clearly erroneous paddle readings.\par The contents of all registers are lost.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18        \tab PREAD\tab #0,VAL1\tab read paddle 0 into VAL1\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 RESTORE}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RESTORE\tcl2}}}{\f4 \tab }{\b\f4 Restore Registers}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab RESTORE\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 RESTORE macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 stack}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Restores the user registers from the hardware stack in the order X, Y, A. This is the reverse of the order in which they are stacked by the SAVE macro, so RESTORE can be used to recover the registers saved by that macro.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx3600\adjustright {\f6\fs18      \tab RESTORE     \tab (no operands are required)\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par _______________________________________________________________________________\par }{\b\f4 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\b\f4 RET}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RET\tcl2}}}{\f4  \tab }{\b\f4 Return from SUB or CSUB Macro\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab RET   [RET]\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 RET macro}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par RET - Optional return value.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par See the description of the SUB macro.\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SAVE}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SAVE\tcl2}}}{\f4 \tab }{\b\f4 Save Registers\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SAVE\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SAVE macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 stack}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Saves the user registers to the hardware stack in the order A, Y, X.  They can be recovered with the RESTORE macro, described above.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx3600\adjustright {\f6\fs18     \tab SAVE   \tab (no operands are required)\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SEED}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SEED\tcl2}}}{\f4 \tab }{\b\f4 Random Number Seed}{\f4 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SEED\tab [N1]\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SEED macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 random number generator}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par N1 - The seed.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The SEED macro is used to initialize the random number generator that is used by all of the random number generation macros.  The seed is set only one time, before the first random number is required.\par To understand what the inputs to the SEED macro should be, it is necessary to first understand a little about how it is used to generate random numbers.  The first point is that the random number generators do not really produce random numbers; they produce a stream of highly uncorrelated numbers, but the stream of numbers produced is always the same if the same seed is used.  A different seed will produce a completely different set of numbers.\par This points out the two common types of inputs used to random number generators.  The first is a specified seed which does not change; this means that the program will use exactly the same sequence of random numbers each time it is executed.  This is generally done when one is debugging a program, and would like to have some measure of repeatability.  The second input type is itself a more or less random number.  This can be a number entered from the keyboard when the program is executed, or it can be provided through some other means.  Fortunately, the Apple II has an excellent source of random number seeds:  the built-in clock.\par The operand should be a two byte value; ideally, about 8 bits should be set and 8 should be clear.  It is actually acceptable to use any number as input if you are not using immediate addressing.  The reason is that the SEED macro is really after a two-byte bit pattern, which could easily be taken from the least significant part of an eight-byte integer.  The operand can be specified using immediate, absolute, or indirect addressing.\par The contents of all registers are lost.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\keepn\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18        \tab SEED\tab INT       \tab uses the 2 bytes at INT as a seed \par        \tab SEED\tab \{P1\}      \tab uses the 2 bytes pointed to by P1 \par        \tab SEED\tab #8         \tab uses 8 as a seed; good for debugging\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f4\fs20 \page }{\b\f4 SHORT}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SHORT\tcl2}}}{\f4 \tab }{\b\f4 Set Register State Short\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SHORT\tab I\par LAB\tab SHORT\tab M\par LAB\tab SHORT\tab I,M\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SHORT macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LONGI directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LONGA directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 word size}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par I - index registers (X and Y).\par M - accumulator (A)\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Set the length of the specified register to eight bits.  This macro also generates the appropriate assembler directive (LONGA OFF or LONGI OFF) to match the state of the register.\par The contents of the registers are not affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18       \tab SHORT\tab I,M  \tab sets X, Y, and A to eight bits\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f6\fs18 \page }{\b\f4 SOFTCALL}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SOFTCALL\tcl2}}}{\f4  \tab }{\b\f4 Soft Reference Call\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SOFTCALL SUB\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SOFTCALL macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DC directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 object modules}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 soft reference}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 linker}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par SUB - Subroutine to call.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par A JSR instruction is issued to the indicated subroutine, but the address is specified by a soft reference (DC S) type DC statement.  This allows a subroutine to call another subroutine from a section of code that may not be executed in a given program, so that the link editor does not bring in that subroutine unless it is requested elsewhere.  This macro finds its only use in subroutine libraries; examples of its use can be found in the subroutine library listings.  \par No registers are affected.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }{\f4\fs20 \par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f6\fs18      \tab SOFTCALL  SYSERROR\par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\f6\fs18 \page }{\b\f4 SUB}{\pard\plain \qj\widctlpar\tqr\tx7920\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SUB\tcl2}}}{\f4  \tab }{\b\f4 Subroutine With Parameters, Stack Frame\par }\pard \qj\widctlpar\adjustright {\f4\fs20 _______________________________________________________________________________\par \par }{\b\f4\fs20 Forms:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab SUB   [PARMS],SIZE\par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SUB macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CSUB macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LSUB macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CLSUB macro\bxe }}}{\v\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 RET macro\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LRET\bxe }}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 Pascal}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 C}}}{\pard\plain \qj\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 stack frames}}}{\v\f6\fs20 \par }{\f4\fs20 \par }{\b\f4\fs20 Also Described Here:\par }{\f4\fs20 \par }{\f6\fs20 LAB\tab CSUB  [PARMS],SIZE\par LAB\tab LSUB  [PARMS],SIZE\par LAB\tab CLSUB [PARMS],SIZE\par LAB\tab RET   [VALUE]\par LAB\tab LRET  [VALUE]\par }{\f4\fs20 \par }{\b\f4\fs20 Operands:\par }{\f4\fs20 \par LAB - Label.\par PARMS - Parameter list.\par SIZE - Size of direct page space.\par VALUE - Return value.\par \par }{\b\f4\fs20 Description:\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This family of macros is used to create assembly language subroutines that can be called from high-level languages, or that share properties of high-level language subroutines.  The macros give you an easy way to implement three important features in your assembly language subroutines:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 1.\tab The macros handle parameters passed on the stack, including automatically removing the parameters from the stack when the subroutine returns.\par 2.\tab The macros handle returning two byte values in the accumulator, and four byte values in the X-A register pair, just as high-level languages do.  These values can be in local variables, global variables, or in the stack frame itself.\par 3.\tab The macros create and dispose of local variable space, allocated from the stack, for a local direct page.  This gives you a set of variables that are truly local to your subroutine.  Since the variables (and parameters, for that matter) are accessed via direct page addressing, you can use this space for pointers, and do indirect addressing directly from the variables.  Since you get true local variables, you can also easily implement recursive assembly language subroutines.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The macros are designed to be used in a pair, with a subroutine macro as the first line of executable code in your subroutine, and a return macro as the last executable line.  The subroutine macros include SUB, CSUB, LSUB and CLSUB.  The return macros include RET and LRET.\par Starting with the most general case, you subroutine would begin with a SUB macro, and exit with a RET macro.  The SUB macro has two parameters, a parameter list and the number of bytes of direct page work space you want to set aside.  The parameter list is generally imbedded in parenthesis, which, in the ORCA macro language, automatically subscripts the first symbolic parameter.  Each of the parameters consists of a length byte that specifies the length of the parameter in bytes, a colon, and the name of the parameter.  Parameters can have any length from 1 to 9 bytes.  If there are no subroutine parameters, leave the first macro parameter out entirely, but be sure and remember the comma as a place holder.  The number of bytes of direct page space can be zero, but you must code some specific value.  The first useable byte of direct page space will be byte 1.  The total number of bytes of direct page space and memory used by the parameters must be less than 251 bytes.\par Parameters are equated to their proper direct page location.  You must not try to use direct page addressing inside your subroutine for direct page variables defined outside the subroutine, since the SUB macros change the value of the D register.  (The RET macro restored the caller's D register before returning.)\par The RET macro has an optional parameter.  With no parameter, the RET macro just cleans up the stack frame created by the SUB macro, then returns to the caller.  If you use a parameter, it should be a length byte, followed by a colon, followed by a parameter that is a valid operand for LDX and LDA instructions.  The length must be either 2 or 4.  If the length is 2, the value specified is returned in A.  If the length is 4, the value is returned with the most significant word in the X register, and the least significant word in the A register.\par Subroutines that use SUB and RET should be called using ORCA/Pascal's calling conventions; namely, call the subroutine with a JSL after pushing all parameters onto the stack in left to right order.  The other versions of the macros provide variations on this basic theme.  CSUB is used for ORCA/C's calling conventions; call the subroutine with a JSL, but push the parameters on the stack in right to left order.  In both cases, the RET macro removes the parameters from the stack before returning to the caller.\par LSUB is a variant on SUB that is used in assembly language programs that are smaller than 64K, or where all callers are in the same 64K bank as the subroutine.  The LSUB macro looks and works just like SUB, but you call the subroutine with a JSR instruction instead of a JSL instruction.  You must use LRET with LSUB; LRET returns with an RTS instead of an RTL.  The CLSUB macro gives you C parameter passing order for these shorter macros.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs20 Coding Examples:\par }\pard \qj\li450\widctlpar\tx1440\tx2160\tx3600\adjustright {\f4\fs20 \par }{\f6\fs18 *\par * Recursive binary search\par *\par * Parameters:\par *\tab aPtr - array pointer\par *\tab target - value to search for\par *\tab index - current index\par *\tab size - current step size\par *\par Search\tab start\par ptr1\tab equ\tab 1\tab work pointer\par \par \tab sub\tab (4:aPtr,4:target,2:index,2:size),4\par \tab .\par \tab .\par \tab .\par \tab ret\tab 2:index\par \tab end\par \par }\pard \qj\widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendices\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix A: Error Messages\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 528}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 529}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 511}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 A}{\b\f4\fs36 ppendix A\par Error Messages\par }\pard \qj\widctlpar\adjustright {\f4 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Appendix A \endash  Error Messages\tcl1}}}{\v\f4 \par }{\f4 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS\:errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tools\:errors}}}{\f4\fs20 This appendix lists the various unique error messages that are returned by the assembler or linker.  Errors returned by the shell, editor, and utilities all originate with either GS/OS or one of the Apple IIGS tools; these errors are explained in the }{\i\f4\fs20 Apple IIGS GS/OS Reference}{\f4\fs20  and the }{\i\f4\fs20 Apple IIGS Toolbox Reference}{\f4\fs20 , respectively.  Because of the context in which GS/OS and tool errors occur, it is generally easy to see what caused the error.  If there is any doubt about the cause of an error, or if you do not have a copy of the Apple reference manuals, feel free to contact our customer service department for assistance.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Error Levels}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Error Levels\tcl2}}}{\b\f4\fs28 \par }{\b\f4\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels\:assembler}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 For each error that the assembler or linker can recover from, there is an error level which gives an indication as to how bad the error is.  The table below lists the error levels and their meaning. Each error description shows the error level in brackets, right after the message.  The highest error level found is printed at the end of the assembly or link edit. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\li720\keepn\widctlpar\tx1980\adjustright {\f4\fs20\ul Severity}{\f4\fs20 \tab \tab }{\f4\fs20\ul Meaning\par }{\f4\fs20 \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\tx2520\adjustright {\f4\fs20 2\tab Warning - things may be ok.\par \par 4\tab Error - an error was made, but the assembler or linker thinks it knows the intent and has corrected the mistake.  Check the result carefully!\par \par 8\tab Error - no correction is possible, but the assembler or linker knew how much space to leave.\par \par 16\tab Error - it was not even possible to tell how much space to leave.  Reassembly will be required to fix the problem.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Recoverable Assembler Errors}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Recoverable Assembler Errors\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When the assembler finds an error that it can recover from, it prints the error on the line after the source line that contained the error.  Only one error per line is flagged, even if there is more than one error in the line.  The error message is actually a brief description of the error.  In the sections that follow, each of the possible error messages is listed, in alphabetical order.  After the error message is a number; this is the error level.  In the description following the error message, every possible cause for the error is explained, and ways to correct the problem are outlined. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 ACTR Count Exceeded}{\pard\plain \keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ACTR Count Exceeded\tcl3}}}{\b\f6\fs20  [16]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AGO directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ACTR directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:conditional assembly}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 More than the allowed number of AIF or AGO directives were encountered during a macro expansion.  Unless changed by the ACTR directive, only 255 AIF or AGO branches are allowed in a single macro expansion.  This is a safeguard to prevent infinite loops during macro expansions.  If more than 255 branches are needed, use the ACTR directive inside of the loop to keep the count sufficiently high. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Address Length not Valid}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Address Length not Valid\tcl3}}}{\b\f6\fs20  [2]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An attempt was made to force the assembler to use an operand length that is not valid for the given instruction.  For example, indirect indexed addressing requires a one-byte operand, so forcing an absolute address by coding\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18          LDA (|2),Y\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would result in this error. \par }{\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Addressing Error}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Addressing Error\tcl3}}}{\b\f6\fs20 s [16]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 long addressing}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The program counter when pass 1 defined a label was different than the program counter when pass 2 encountered the label.  There are three likely reasons for this to happen.  The first is if, for some reason, the result of a conditional assembly test was different on the two passes; this is actually caused by one of the remaining errors.  The second is if a label is defined using an EQU to be a long or zero page address, then the label is used before the EQU directive is encountered.  The last reason is if a label has been defined as zero page or long using a GEQU directive, then redefined as a local label.  On the first pass in both of these cases, the assembler assumes a length for the instruction which is then overridden before pass 2 starts. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Duplicate Label}{\b\v\f6\fs20 ;}{\b\f6\fs20  [4]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab Two or more local labels were defined using the same name.  The first such label gets flagged as a duplicate label; subsequent redefinitions are flagged as addressing errors.  Any use of the label will result in the first definition being used. \par \par 2.\tab Two or more symbolic parameters were defined using the same name.  Subsequent definitions are ignored. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Duplicate Ref in MACRO Operand}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Duplicate Ref in MACRO Operand\tcl3}}}{\b\f6\fs20  [2]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:calling}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:keyword parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:positional parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A parameter in a macro call was assigned a value two or more times.  This usually happens when both a keyword and positional parameter set the same symbolic parameter.  For the macro\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\tx1440\tx2520\adjustright {\f6\fs18        \tab macro\par        \tab example\tab &P1,&P2\par }\pard \qj\fi450\widctlpar\tx1440\tx2520\adjustright {\f6\fs18        \tab mend\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par The call\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2520\adjustright {\f6\fs18        \tab example\tab A,P1=B\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would produce this error, since P1 is set to A as a positional parameter, then to B as a keyword parameter. \par }{\f4\fs18 \par }{\b\f6\fs20 Duplicate Segment}{\pard\plain \qj\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Duplicate Segment\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Two segments with the same name were encountered during the same assembly.  Either change the name of one of the segments, or remove the duplicate segment.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 Expression Too Complex}{\pard\plain \qj\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Expression Too Complex\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembler}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab An expression contained a label whose value was defined with an EQU or GEQU that contained an expression.  That expression also contained a label defined in the same way, and so on, for ten levels.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Reduce the nest level of expressions by coding some of the terms in long hand.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par 2.\tab Too many parentheses were used.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The exact number of parentheses allowed depends on the type of expression you code, but is generally over twenty.  If this error occurs, reduce the number of parentheses used in the expression.\par }\pard \qj\widctlpar\tx360\adjustright {\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:arrays of}}}{\v\f4\fs20 \par }{\f4\fs20 \par 3.\tab A subscripted symbolic parameter was used to specify the index of another symbolic parameter, as in &A(&B(4)).\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Subscripts for symbolic parameters cannot contain subscripted symbolic parameters.  Form the subscript by first assigning the value to a different symbolic parameter, as in\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi450\widctlpar\tx360\adjustright {\f6\fs18 &C       SETA  &B(4)\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par and then using &A(&C).\par }{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORG directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OBJ directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DIRECT directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par 4.\tab An ORG, OBJ, or DIRECT directive had an expression in its operand which did not resolve to a constant at assembly time.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Replace the expression with a constant.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par 5.\tab GEQU appeared outside a segment with an operand that did not resolve to a constant.\par }{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 partial assembly}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Move the GEQU into a segment.  Be sure the segment is assembled on all partial assemblies.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 6.\tab Either the expression contains an error, such as mismatched parentheses, or the expression had too many terms for the assembler to handle.  There is no fixed limit to the number of terms in an expression, but generally the assembler will handle as many terms as will fit on a line.  Check for any kind of syntax error in the expression itself.\par }{\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Invalid Operand}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Invalid Operand\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addressing modes\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An operand was used on an instruction that does not support the addressing mode. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Label Syntax}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Label Syntax\tcl3}}}{\b\f6\fs20  [16]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:model statements}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab The label field of a statement contained a string which does not conform to the standard label syntax.  A label must start with an alphabetic character, underscore or tilde, and can be followed by zero or more alphanumeric characters, underscore characters, and tildes.\par \par 2.\tab A macro model statement had something in the label field, but it was not a symbolic parameter.  If anything occupies the label field of the statement immediately following a MACRO directive, it must be a symbolic parameter. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Length Exceeded}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Length Exceeded\tcl3}}}{\b\f6\fs20  [4]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 external labels}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab An expression was used in an operand that requires a direct page result, and the expression was not in the range 0..255.  If external labels are used in the expression, and the result will resolve to direct page when the linker resolves the references, force direct page addressing by preceding the expression with a < character, as in\par \par }\pard \qj\fi450\widctlpar\tx1440\tx2160\adjustright {\f6\fs18        \tab LDA\tab (<LABEL),Y\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If the expression is a constant expression, correct it so that it is in the range 0..255. \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par 2.\tab A directive which requires a number in a specific range received a number outside of that range in the directive.  See specific directive descriptions for allowed parameter ranges. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Macro File Not In Use}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Macro File Not In Use\tcl3}}}{\b\f6\fs20  [2]\par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MDROP directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 An MDROP was found that specified a macro file name that was never opened with an MLOAD or MCOPY, or that has already been closed with another MDROP.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Remove the extra MDROP.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 MACRO Operand Syntax Error}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 MACRO Operand Syntax Error\tcl3}}}{\b\f6\fs20  [4]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:model statements}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operand of the macro model statement contained something other than a sequence of undefined symbolic parameters separated by commas.  The macro model statement is the line immediately following a MACRO directive.  If it has an operand at all, the operand must consist of a list of symbolic parameters separated by commas, with no embedded spaces. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Missing Label}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Missing Label\tcl3}}}{\b\f6\fs20  [2]\par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DATA directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENTRY directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EQU directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVATE directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIVDATA directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 START directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tx360\adjustright {\f4\fs20 1.\tab A DATA, ENTRY, EQU, GEQU, PRIVATE, PRIVDATA, or START was found that did not have a label.  Since the purpose of these directives is to define a label, a label is required.\par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par 2.\tab A directive that sets the value of a symbolic parameter was coded without a symbolic parameter in the label field.  Since the purpose of these directives is to change the value of the symbolic parameter in the label field, a symbolic parameter is required.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Missing Operand}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Missing Operand\tcl3}}}{\b\f6\fs20  [16]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 comments\:assembly language}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETCOM directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The operation code was one that required an operand, but no operand was found.\par Make sure that the comment column has not been set to too low a value; see the description of the SETCOM directive.  Remember that ORCA requires the A as an operand for the accumulator addressing mode. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Missing Operation}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Missing Operation\tcl3}}}{\b\f6\fs20  [16]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 There was no operation code on a line that was not a comment.\par Make sure the comment column has not been set to too small a value; see the SETCOM directive.  Keep in mind that operation codes cannot start in column one. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Misplaced Statement}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Misplaced Statement\tcl3}}}{\b\f6\fs20  [16]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab A statement was used outside of a code segment which must appear inside a code segment.  Only the following directives can be used outside of a code segment: \par }{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AGO directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALIGN directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APPEND directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 COPY directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DIRECT directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DYNCHK directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EJECT directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EJECT directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ERR directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXPAND directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEN directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GEQU directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IEEE directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KIND directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIST directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGA directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LONGI directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MDROP directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MERR directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MSB directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 NUMSEX directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORG directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRINTER directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETCOM directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYMBOL directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TITLE directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TRACE directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:directive}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li360\keepn\widctlpar\tx1800\tx3240\tx4680\tx6120\adjustright {\f6\fs18 AGO\tab AIF\tab ALIGN\tab APPEND\tab COPY\par DIRECT\tab DYNCHK\tab EJECT\tab ERR\tab EXPAND\tab \par GEN\tab GEQU\tab IEEE\tab KEEP\tab KIND\tab \par LIST\tab LONGA\tab LONGI\tab MCOPY\tab MDROP\tab \par MERR\tab MLOAD\tab MSB\tab NUMSEX\tab ORG\par PRINTER\tab RENAME\tab SETCOM\tab SYMBOL\tab TITLE\tab \par TRACE\tab 65C02\tab 65816\par }\pard \qj\widctlpar\tx360\adjustright {\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The way to remember this list is that any directive or instruction that generates code or places information in the object module must appear inside a code segment. \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par 2.\tab A KEEP directive was used after the first START or DATA directive, or two KEEP directives were used for a single assembly.  Only one KEEP directive is allowed, and it must come before any code is generated. \par \par 3.\tab The RENAME directive, which must appear outside of a program segment, was used inside of a program segment. \par \par 4.\tab An ORG with a constant operand was used inside a program segment, or an ORG that was not a displacement off of the location counter was used outside of a program segment, or two ORGs were used before the same code segment.  See the description of the ORG directive for details on its use. \par \par 5.\tab More than one ALIGN directive was used for the same program segment. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Nest Level Exceeded}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Nest Level Exceeded\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:nesting}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Macros were nested more than four levels deep.  A macro may use another macro (including itself) provided that the macro used resides in the same macro file as the macro that is using it, and provided the calls are not nested more than four levels deep. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 No MEND}{\pard\plain \qj\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 No MEND\tcl3}}}{\b\f6\fs20  [4]\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A macro that did not have a MEND was expanded.  The MEND directive is required at the end of a macro definition.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Numeric Error in Operand}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Numeric Error in Operand\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 IEEE}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 floating-point data}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 floating-point data\:double precision}}}{\v\f4\fs20 .\par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab An overflow or underflow occurred during the conversion of a floating point or double precision number from the string form in the source file to the IEEE representation for the number.  Floating point numbers are limited to about 1E-38...1E38, while double precision numbers are limited to about 1E-308...1E308.  If this error occurs, the assembler will insert the IEEE format representation for 0 on an underflow, and infinity for an overflow. \par }{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 decimal data}}}{\v\f4\fs20 \par }{\f4\fs20 \par 2.\tab A decimal number was found in the operand field which was not in the range -2147483648...2147483647.  Since all integers are represented as four-byte signed numbers, decimal numbers must be in the above range. \par }{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 binary constant}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 octal constant}}}{\pard\plain \qj\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hexadecimal constant}}}{\v\f4\fs20 \par }{\f4\fs20 \par 3.\tab A binary, octal or hexadecimal constant was found which requires more than 32 bits to represent.  All numbers must be represented by no more than four bytes. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Operand Syntax}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Operand Syntax\tcl3}}}{\b\f6\fs20  [16]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This error covers a wide range of possible problems in the way an operand is written.  Generally, a quick look at the operand field will reveal the problem.  If this does not help, read the section of the reference manual that deals with operand formats for the specific instruction or directive in question. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Operand Value Not Allowed}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Operand Value Not Allowed\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALIGN directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab An ALIGN directive was used with an operand that was not a power of two. \par \par 2.\tab An ALIGN directive was used in a program segment that was either not aligned itself, or was not aligned to a byte value greater than or equal to the ALIGN directive used in the program segment.  For example,\par \par }\pard \qj\fi450\keepn\widctlpar\tx360\adjustright {\f6\fs18          align    4\par T        start\par          align    4\par }\pard \qj\fi450\widctlpar\tx360\adjustright {\f6\fs18          end \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tx360\adjustright {\f4\fs20 is acceptable, but\par \par }\pard \qj\fi450\keep\keepn\widctlpar\tx360\adjustright {\f6\fs18          align    4\par }\pard \qj\fi450\keepn\widctlpar\tx360\adjustright {\f6\fs18 T        start\par          align    8\par }\pard \qj\fi450\widctlpar\tx360\adjustright {\f6\fs18          end \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 \par will cause an error. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Rel Branch Out of Range}{\b\v\f6\fs20 ;}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A relative branch has been made to a label that is too far away.  For all instructions except BRL, relative branches are limited to a one-byte signed displacement from the end of the instruction, giving a range of 129 bytes forward and 126 bytes backward from the beginning of the instruction.  For BRL, a two- byte displacement is used, giving a range of -32765 to 32770 from the beginning of the instruction.  BRL is only available on the 65816.  For one remedy, see the conditional jump macros in the macro library. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Sequence Symbol Not Found}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Sequence Symbol Not Found\tcl3}}}{\b\f6\fs20  [4]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AGO directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbols}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:conditional assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An AIF or AGO directive attempted to branch, but could not find the sequence symbol named in the operand field.  A sequence symbol serves as the destination for a conditional assembly branch.  It consists of a period in column one, followed by the sequence symbol name in column 2.  The sequence symbol name follows the same conventions as a label, except that symbolic parameters may not be used. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Set Symbol Type Mismatch}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Set Symbol Type Mismatch\tcl3}}}{\b\f6\fs20  [4]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETA directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASEARCH directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SETC directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AMID directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AINPUT directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The set symbol type does not match the type of the symbolic parameter being set.  Symbolic parameters come in one of three types:  A (arithmetic), B (boolean) and C (character).  All symbolic parameters defined in the parameter list of a macro call are character type.  SETA and ASEARCH directives must have an arithmetic symbolic parameter; SETB directives must have a boolean symbolic parameter; and SETC, AMID and AINPUT directives must have a character symbolic parameter in the label field. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Subscript Exceeded}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Subscript Exceeded\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters\:arrays of}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A symbolic parameter subscript was larger than the number of subscripts defined for it.  For example,\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\adjustright {\f6\fs18         lda     &Num(4)\par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18 &Num(5) seta    1\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par would cause this error.  A subscript of 0 will also cause the error. \par }{\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Too Many MACRO Libs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Too Many MACRO Libs\tcl3}}}{\b\f6\fs20  [2]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MDROP directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An MCOPY or MLOAD directive was encountered, and four macro libraries were already in use.  The best solution is to combine all of the macros needed during an assembly into a single file.  Not only does this get rid of the problem, it makes assemblies much faster.  Another remedy is to use the MDROP directive to get rid of macro libraries that are no longer needed. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Too Many Positional Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Too Many Positional Parameters\tcl3}}}{\b\f6\fs20  [4]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:keyword parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros\:positional parameters}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The macro call statement used more parameters in the operand than the macro model statement had definitions for.  Keep in mind that keyword parameters take up a position.  For example, the following macro calls must all be to a macro definition with at least three parameters defined in the macro model statement operand. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi450\keepn\widctlpar\adjustright {\f6\fs18         call    L1,L2,L3\par         call    ,,\par         call    L1,,L3\par }\pard \qj\fi450\widctlpar\adjustright {\f6\fs18         call    ,L1=A,L3\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Undefined Directive in Attribute}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Undefined Directive in Attribute\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 setting attribute}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The S attribute was requested for an undefined operation code, or for an operation code that does not use ON or OFF as its operand.  The S attribute is only defined for these directives: \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ABSADDR directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CASE directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CODECHK directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DATACHK directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DYNCHK directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ERR directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EXPAND directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GEN directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 IEEE directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 INSTIME directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LIST directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LONGA directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LONGI directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 MSB directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 NUMSEX directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 OBJCASE directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PRINTER directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SYMBOL directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 TRACE directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 65C02\:directive}}}{\v\f6\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 65816\:directive}}}{\v\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx1800\tx3240\tx4680\tx6120\adjustright {\f6\fs18 ABSADDR\tab CASE\tab CODECHK\tab DATACHK\tab DYNCHK\par ERR\tab EXPAND\tab GEN\tab IEEE\tab INSTIME\tab \par LIST\tab LONGA\tab LONGI\tab MSB\tab NUMSEX\par OBJCASE\tab PRINTER\tab SYMBOL\tab TRACE\tab 65C02\par 65816\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unidentified Operation}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Unidentified Operation\tcl3}}}{\b\f6\fs20  [16]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65C02\:instruction set}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 65816\:instruction set}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RENAME directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 1.  An operation code was encountered which was not a valid instruction or directive, nor was it a defined macro.  If you are using 65C02 or 65816 instructions, make sure that they are enabled using the 65C02 and 65816 directives.  Make sure MCOPY directives have been used to make all needed macros available at assembly time. \par \par 2.  The first operation code in a RENAME directive's operand could not be found in the current list of instructions and directives. \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MACRO directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEND directive}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MEXIT directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par 3.  A MACRO, MEND or MEXIT directive was encountered in a source file. \par }{\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Undefined Symbolic Parameter}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Undefined Symbolic Parameter\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 symbolic parameters}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An & character followed by an alphabetic character was found in the source  line.  The assembler tried to find a symbolic parameter by the given name, and none was defined. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unresolved Label not Allowed}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Unresolved Label not Allowed\tcl3}}}{\b\f6\fs20  [2]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembler}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 length attribute}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 type attribute}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 count attribute}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\f4\fs20 1.\tab The operand of a directive contains an expression that must be explicitly evaluated to perform the assembly, but a label whose value could not be determined was used in the expression.  In most cases, local labels cannot be used in place of a constant.  Even though the assembler knows that the local label exists, it does not know the final location that will be assigned by the link editor. \par \par 2.\tab The length or type attribute of an undefined symbolic parameter was requested.  Only the count attribute is allowed for an undefined symbolic parameter. \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Terminal Assembler Errors}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Terminal Assembler Errors\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 terminal errors\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Some errors are so bad that the assembler cannot keep going; these are called terminal errors.  When the assembler finds a terminal error, it prints the error message and then waits for a key to be pressed.  After a key is pressed, control is passed to the system editor, which loads the file that the assembler was working on and places the line that caused the terminal error at the top of the display screen. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 AINPUT Table Damaged}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 AINPUT Table Damaged\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AINPUT directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This error will occur if a memory error has damaged the AINPUT table.  Test your memory and try again.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 File Could not be Opened}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 File Could not be Opened\tcl3}}}{\b\f6\fs20 \par }{\f4\fs20 \par A GS/OS error occurred during an attempt to open a source or macro file. \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MLOAD directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This is generally caused by a bad file of some type, or a file that is missing entirely.  Begin by carefully checking the spelling in the offending statement.  Make sure that the file can be loaded with the listed file name using the editor.  It is important to specify the path name the same way as it is listed in the assembler command when doing this check.  If the error occurs in a strange place where no files are asked for, keep in mind that a macro file is not loaded into memory until a macro is found - in other words, the problem is in one of the MCOPY or MLOAD directives. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 GS/OS Errors}{\pard\plain \qj\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 GS/OS Errors\tcl3}}}{\b\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The assembler aborts if a GS/OS error is encountered on any file read or write.  The GS/OS error message is reported.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Keep File Could Not be Opened}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Keep File Could Not be Opened\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 Either there was not enough memory to open the output file or a GS/OS error was encountered during an attempt to open the output file. \par Check the file name used in the KEEP directive for errors.  This error will occur if the file name of the keep file exceeds ten characters, since the assembler must be able to append ".ROOT" to the keep file name, and GS/OS restricts file names to fifteen characters. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 Out Of Memory}{\pard\plain \qj\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Out Of Memory\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The assembler ran out of memory.  Add more memory, cut down on the size of the source files, cut down on the size of macro files, or reduce the number of symbols.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 No END}{\pard\plain \qj\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 No END\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 END directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The assembler aborts if any segment does not have a closing END directive.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unable to Write to Object Module}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Unable to Write to Object Module\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 A GS/OS error was encountered while writing to the object module. \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This error is generally caused by a full disk, but could also be caused by a disk drive error of some sort. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\b\f4\fs28 Recoverable Linker Errors}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Recoverable Linker Errors\tcl2}}}{\b\f4\fs28 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error reporting\:linker}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error levels\:linker}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When the linker detects a nonfatal error, it prints:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 1.\tab the name of the segment that contained the error\par \par 2.\tab how far into the segment (in bytes) the error point lies\par \par 3.\tab a text error message, with the error-level number in brackets immediately to the right of the message\par }\pard \qj\fi-360\li630\widctlpar\tx630\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Addressing error}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Addressing error\tcl3}}}{\b\f6\fs20  [16]\par }{\b\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 A label could not be placed at the same location on pass 2 as it was on pass 1.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 This error is almost always accompanied by another error, which caused this one to occur; correcting the other error will correct this one.  If there is no accompanying error, check for disk errors by doing a full assembly and link.  If the error still occurs, report the problem as a bug.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 Address is not in current bank}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Address is not in current bank\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 location counter}}}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 native mode}}}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 word size}}}{\b\v\f4\fs20 \par }{\b\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The (most-significant-truncated) bytes of an expression did not evaluate to the value of the current location counter.\par For short-address forms (6502-compatible), the truncated address bytes must match the current location counter.  This restriction does not apply to long-form addresses (65816 native-mode addressing).\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 Address is not in zero page}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Address is not in zero page\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 direct page}}}{\b\v\f4\fs20 \par }{\b\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The most significant bytes of the evaluated expression were not zero, but were required to be zero by the particular statement in which the expression was used.\par This error occurs only when the statement requires a direct-page address operand (range = 0 to 255).\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Alignment and ORG conflict}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Alignment and ORG conflict\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3.Alignment and ORG conflict\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3..C3.Alignment and ORG conflict\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3..C3..C3.Alignment and ORG conflict\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3..C3..C3..C3.Alignment and ORG conflict\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3..C3..C3..C3..C3.Alignment and ORG conflict\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3..C3..C3..C3..C3..C3.Alignment and ORG conflict\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3..C3..C3..C3..C3..C3..C3.Alignment and ORG conflict\tcl3}}}{\b\f6\fs20  [8]\par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You have used both a fixed origin and an alignment factor, and the origin is not aligned to the boundary specified in the alignment factor.  One should be changed or removed so the two values are compatible.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 Alignment factor must be a power of two}{\b\v\f6\fs20 ;}{\b\f6\fs20  [8]}{\f6\fs20 \par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALIGN directive}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 An alignment factor that was not a power of 2 was used in the source code.  In ORCA Assembly language, the ALIGN directive is used to set an alignment factor.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \keep\widctlpar\adjustright {\b\f6\fs20 Alignment factor must not exceed segment align factor}{\pard\plain \keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Alignment factor must not exceed segment align factor\tcl3}}}{\b\f6\fs20  [8]}{\f6\fs20 \par }\pard \qj\keep\widctlpar\adjustright {\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 page boundary}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 An alignment factor specified inside the body of an object segment is greater than the alignment factor specified before the start of the segment.  For example, if the segment is aligned to a page boundary (ALIGN = 256), you cannot align a portion of the segment to a larger boundary (such as ALIGN = 1024).\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Code exceeds code bank size}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Code exceeds code bank size\tcl3}}}{\b\f6\fs20  [4]}{\f6\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bank boundary}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 The load segment is larger than one memory bank (64K).  You have to divide your program into smaller load segments.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Data area not found}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Data area not found\tcl3}}}{\b\f6\fs20  [2]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 data segment}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 DATA directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 USING directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 libraries}}}{\b\v\f4\fs20 \par }{\b\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 A USING directive was issued in a segment, and the linker could not find a DATA segment with the given name.  Ensure that the proper libraries are included, or change the USING directive.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 Duplicate label}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Duplicate label\tcl3}}}{\b\f6\fs20  [8]}{\f6\fs20 \par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 A label was defined twice in the program.  Remove one of the definitions.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 Duplicate segment}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Duplicate segment\tcl3}}}{\b\f6\fs20  [2]}{\f6\fs20 \par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Two segments were found in the same file with the same name.  One of the names must be changed.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Expression operand is not in same segment}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Expression operand is not in same segment\tcl3}}}{\b\f6\fs20  [8]}{\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:assembler}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par An expression in the operand of an instruction or directive includes labels that are defined in two different relocatable segments.  The linker cannot resolve the value of such an expression.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Illegal \{AuxType\} shell variable [4]}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 Illegal \{AuxType\} shell variable [4]\tcl3}}}{\b\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The linker found an \{AuxType\} shell variable, but it was not a valid decimal number or hexadecimal number.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Illegal \{KeepType\} shell variable [4]}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 Illegal \{KeepType\} shell variable [4]\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 .C3.Illegal \{KeepType\} shell variable [4]\tcl3}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 .C3..C3.Illegal \{KeepType\} shell variable [4]\tcl3}}}{\b\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The linker found a \{KeepType\} shell variable, but it was not a valid decimal number, hexadecimal number, or three-letter file type code.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Illegal shift operator}{\b\v\f6\fs20 ;}{\b\f6\fs20  [16]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 addressing modes\:assembler}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An operation involving the shift operator could not be performed.  This error results when an expression that is of a basically legal form uses the shift operator in a way that produces an unusable result.  For example, shifting an address, performing some math operations, and then shifting the result would cause this error. \par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 Invalid operation on relocatable expression}{\b\v\f6\fs20 ;}{\b\f6\fs20  [8]}{\f6\fs20 \par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bit shifting}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The ORCA linker can resolve only certain expressions that contain labels that refer to relocatable segments.  The following types of expressions }{\i\f4\fs20 cannot}{\f4\fs20  be used in an assembly-language operand involving one or more relocatable labels:\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi446\keepn\widctlpar\adjustright {\f4\fs20 A bit-by-bit NOT\par }\pard \qj\fi450\keep\widctlpar\adjustright {\f4\fs20 A bit-by-bit OR\par A bit-by-bit EOR\par A bit-by-bit AND \par A logical NOT, OR, EOR, or AND \par Any comparison (<, >, <>, <=, >=, ==)\par Multiplication\par Division\par Integer remainder (MOD)\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The following types of expressions involving a bit-shift operation }{\i\f4\fs20 cannot}{\f4\fs20  be used:\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-360\li720\keep\widctlpar\adjustright {\f4\fs20 \bullet \tab The number of bytes by which to shift a value is a relocatable label\par \bullet \tab A relocatable label is shifted more than once\par }\pard \qj\fi-360\li720\keep\keepn\widctlpar\adjustright {\f4\fs20 \bullet \tab A relocatable label is shifted and then added to another value\par }{\pard\plain \qj\fi-360\li720\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\v\f4\fs20 \par }{\f4\fs20 \bullet \tab You cannot use addition where both values being added are relocatable (you }{\i\f4\fs20 can}{\f4\fs20  add a constant to a relocatable value).\par }\pard \qj\fi-360\li720\keep\widctlpar\adjustright {\f4\fs20 \bullet \tab You cannot subtract a relocatable value from a constant (you }{\i\f4\fs20 can}{\f4\fs20  subtract a constant from a relocatable value).\par \bullet \tab You cannot subtract one relocatable value from another defined in a different segment (you }{\i\f4\fs20 can}{\f4\fs20  subtract two relocatable values defined in the same segment).\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Only JSL can reference dynamic segment}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Only JSL can reference dynamic segment\tcl3}}}{\b\f6\fs20  [8]}{\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dynamic segments}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par You referenced a dynamic segment in an instruction other than a JSL.  Only a JSL can be used to reference a dynamic segment.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 ORG Location has been passed}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 ORG Location has been passed\tcl3}}}{\b\f6\fs20  [16]\par }{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 ORG directive}}}{\b\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\b\f4\fs20 \par }{\f4\fs20 The linker encountered an ORG directive for a location it had already passed.\par Move the segment to an earlier position in the program.  This error applies only to absolute code, and should therefore be rarely encountered when writing for the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 .\par }{\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Relative address out of range}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Relative address out of range\tcl3}}}{\b\f6\fs20  [8]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\b\f4\fs20 \par }{\f4\fs20 The given destination address is too far from the current location.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Change the addressing mode or move the destination code closer.\par }{\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Segment types conflict}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Segment types conflict\tcl3}}}{\b\f6\fs20  [2]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AIF directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AGO directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 sequence symbol}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:conditional assembly language}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 You have used a code, init, or direct page segment in a load segment that has already been flagged as a data segment.  The linker is warning you that combining these data types can result in problems; for example, a data segment can be longer than 64K, but executable code cannot cross a bank boundary, so placing executable code in a data segment might produce a program that would crash.\par }\pard \qj\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Shift operator is not allowed on JSL to dynamic segment}{\b\v\f6\fs20 ;}{\b\f6\fs20  [8]}{\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dynamic segments}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bit shifting}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 The operand to a JSL includes the label of a dynamic segment that is acted on by a bit-shift operator.  You probably typed the wrong character, or used the wrong label by mistake.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }{\b\f6\fs20 TempORG not supported}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 TempORG not supported\tcl3}}}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3.TempORG not supported\tcl3}}}{\b\f6\fs20  [4]}{\f6\fs20 \par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The TempORG field is not used by native Apple IIGS development systems.  If you are importing object files from the MPW IIGS Cross Development environment, you must insure that all of the files have a TempORG of 0.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unresolved reference}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Unresolved reference\tcl3}}}{\b\f6\fs20  [8]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 labels}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 symbol tables\:linker}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 USING directive}}}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 data segment}}}{\b\v\f4\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\b\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 The linker could not find a segment referenced by a label in the program.\par If the label is listed in the global symbol table after the link, make sure the segment that references the label has issued a USING directive for the segment that contains the label.  Otherwise, correct the problem by: (1) removing the label reference, (2) defining it as a global label, or (3) defining it in a data segment.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Terminal Linker Errors}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Terminal Linker Errors\tcl2}}}{\b\f4\fs28 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 terminal errors\:linker}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Could not find library header in }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Could not find library header in }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3.Could not find library header in }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par A file has a file type if LIB, but the linker could not find a library header.  The file must be corrected before the linker can process it as a library.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 Could not open file }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\b\v\f6\fs20 ;}{\b\f6\fs20 \par }{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 command line}}}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 write protect}}}{\b\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\b\f4\fs20 \par }{\f4\fs20 GS/OS could not open the file }{\i\f4\fs20 filename}{\f4\fs20 , which you specified in the command line.\par Check the spelling of the file name you specified.  Make sure the file is present on the disk and that the disk is not write-protected.\par }{\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Could not overwrite existing file: }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Could not overwrite existing file\: }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par The linker is only allowed to replace an existing output file if the file type of the output file is one of the executable types.  It is not allowed to overwrite a TXT, SRC, or OBJ file, thus protecting the unaware user.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Expression too complex in }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Expression too complex in }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par An expression either used too many nested operations for the linkers stack or had some error in the form of the expression itself.\par Check the original source file to see of the expression can be simplified.  If there are no unwieldy expressions, look for errors that could corrupt the object file, like disk errors or desk accessories or Inits interfering with the system.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 File read error}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 File read error\tcl3}}}{\b\f6\fs20 : }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\b\v\f6\fs20 ;}{\b\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\b\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 An I/O error occurred when the linker tried to read a file that was already open.  This error should never occur.  There may be a problem with the disk drive or with the file.  You might have removed the disk before the link was complete.\par }{\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 File not Found }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 File not Found }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 KEEP directive}}}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 KEEP parameter}}}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\f4\fs20 }{\b\v\f4\fs20 \{KeepName\} shell variable}}}{\b\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\b\f4\fs20 \par }{\f4\fs20 The file }{\i\f4\fs20 filename}{\f4\fs20  could not be found.\par Check the spelling of the file name in both the KEEP directive and the LINK command.  Make sure the .ROOT or .A file has the same prefix as the file specified in those commands.\par }{\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 File write error.}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 File write error.\tcl3}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 .C3.File write error.\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par The linker encountered a GS/OS file output error trying to create or write the output file.  The most common cause for this error would be a full disk or a write protected disk.  If neither of these is the problem, check for a corrupted disk or bad blocks.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 Illegal header value in }{\b\i\f6\fs20 filename}{\b\f6\fs20 .\par }{\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par The linker checks the segment headers in object files to make sure they make sense.  This error means that the linker has found a problem with a segment header.\par This error should not occur.  Your file may have been corrupted, or the assembler or compiler may have made an error.\par }{\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Invalid dictionary in }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Invalid dictionary in }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3.Invalid dictionary in }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par The linker found a corrupted dictionary in a library file.  The library file must be corrected before the linker can process it.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Linker version mismatch.}{\b\v\f6\fs20 ;}{\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version numbers}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object module format}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par The object module format version of the object segment is more recent than the version of the linker you are using.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 Check with the Byte Works to get the latest version of ORCA.  \par }{\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 Must be an object file: }{\b\i\f6\fs20 filename}{\b\f6\fs20 .}{\pard\plain \qj\keep\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Must be an object file\: }{\b\i\v\f6\fs20 filename}{\b\v\f6\fs20 .\tcl3}}}{\f6\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\i\f4\fs20 Filename}{\f4\fs20  is not an object file or a library file.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Only one script file is allowed.}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Only one script file is allowed.\tcl3}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3.Only one script file is allowed.\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par You cannot send two script files to the linker with a single compile command, as you can for, say, the assembler.  Use one compile command for each link script.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\widctlpar\adjustright {\b\f6\fs20 Out of memory.}{\b\v\f6\fs20 ;}{\b\f6\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 All free memory has been used; the memory needed by the linker is not available.\par }\pard \qj\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Script error: link aborted.}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 Script error\: link aborted.\tcl3}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 }{\b\v\f6\fs20 .C3.Script error\: link aborted.\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par When the linker finds and reports an error in a linker script file, it does not continue processing; instead it generates this error and stops.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Stopped by open-apple .}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \b\v\f6\fs20\cgrid {\tc {\b\v\f6\fs20 Stopped by open-apple .\tcl3}}}{\b\f6\fs20 \par }{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par You can stop the linker by holding down the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20  key and pressing the period.  This actually forces a terminal error; this is the error message written by the linker.\par }\pard \qj\fi360\keep\widctlpar\adjustright {\f4\fs18 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\f6\fs20 Undefined opcode in }{\b\v\f6\fs20 ;}{\b\i\f6\fs20 filename}{\b\f6\fs20 .\par }\pard \qj\fi360\keep\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 An illegal operation code was found in the file.  This error can be caused by any number of problems, including a buggy compiler or assembler, but the most frequent cause is a corrupted object file.  Check for disk errors, memory errors, or programs (like desk accessories or Inits) that might be writing to memory that does not belong to them.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendices\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix B: File Formats\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 542}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 543}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 531}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 A}{\b\f4\fs36 ppendix B\par File Formats\par }\pard \qj\widctlpar\adjustright {\f4 \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Appendix B \endash  File Formats\tcl1}}}{\v\f4 \par }{\f4 \par \par }{\f4\fs20 \par }{\b\f4\fs28 Overview}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Overview\tcl2}}}{\f4\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA system makes use of four kinds of files:  GS/OS TXT files, ORCA SRC files, ORCA OBJ files, and GS/OS EXE files. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Text Files}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Text Files\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 text files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 editor}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 AUX field}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par GS/OS TXT files and ORCA SRC files have the same internal format.  Both are a sequence of ASCII characters with lines separated by $0D carriage return codes.  Although GS/OS makes no strict requirement, the high bit must be off for use with ORCA programs.  In addition, ORCA languages on eight-bit Apple // computers will ignore any character beyond the 80th character in each line.  On the Apple II}{\scaps\f4\fs20 gs, }{\f4\fs20 lines are limited to 255 characters}{\scaps\f4\fs20 .}{\f4\fs20   Both types of file can be created and changed by the system editor, described in Chapter 13.  Most other GS/OS-based editors will also suffice, although it may be necessary to convert the file to a TXT file before editing, and back to a SRC file afterward. \par The difference between TXT and SRC files is entirely in the way the AUX field in the file header is used.  TXT files leave this field undefined, while ORCA SRC files define it to be the language number.  In addition, ORCA SRC files have a file type of $B0, rather than the $04 used by GS/OS. \par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Object Modules}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Object Modules\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 source files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object modules}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object module format}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW}}}{\v\f4\fs20 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OMF\:see object module format}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 ORCA languages take source files as input and produce object modules as output.  These object modules are then used as input to the link editor.  Object modules are contained in a special file type with a file type number of $B1, which shows up as OBJ when cataloged from ORCA. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 APW}}}{\f4\fs20 There are now three versions of the object module format.  The first, used with ORCA/M 4.0, is labeled as version zero in the header.  The second, used by ORCA/M 4.1 on both eight-bit and sixteen-bit Apple II computers, and by early versions of ORCA/M and the Apple Programmer's Workshop on the Apple II}{\f4\fs18 GS}{\f4\fs20 , has a one as the version number.  The newest version, version two, is currently used by ORCA/M.  A variant of this OMF format, known as version 2.1, adds an optional field to the end of the header.  The optional field is not needed, nor is it created, by native development systems, although the ORCA utilities and linker will accept OMF 2.1 format files.\par This version of ORCA/M generates and accepts version two of the object module format, and the linker and utilities, unless otherwise noted, will accept either version 1 version 2, or version 2.1 files.\par The description below describes version 2.1 object modules as used by this version of ORCA/M.  Several features that deal with relocatable code and libraries have been omitted.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 code segment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\v\f4\fs20 \par }{\f4\fs20 Object modules consist of one or more object segments.  Each object segment corresponds to a code or data segment in the assembly language source file.  The object segment consists of two parts, the header and the body.  The header describes the entire object segment.  It contains such things as how many bytes the segment occupies, how many bytes it will add to the executable program image, and so on.  The body of the object segment contains one or more operation codes that tell the linker what to put in the final executable file.  These operation codes can define constant bytes, give the linker an expression involving external labels to use to compute the value of an address, and so forth.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 block boundary}}}{\v\f4\fs20 \par }{\f4\fs20 The headers for the three formats of the object module format are shown below.  Note that NUMLEN and LABLEN can greatly affect the size of the op code portion of the object segment. \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1098{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex73\picscaley74\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich564\picwgoal8760\pichgoal11280\macpict\bliptag-579445154\blipupi72{\*\blipuid dd765e5e158a111dab5791a14c163dfc}103a00070007023b01bd1101a0008201000a00070007023b01bd0a00000000000000003400d0014500e301b2383401c300b501fa01223834001c00b5004101223834004000b5006501223834006400b5008901223834008800eb009b01223834008800b5009b00ec3834009a00eb00ad01223834009a00b500ad00ec383400ac00b500d10122383400d000b500f50122383400f400b5011901223834011800b5013d01223834013c00eb014f01223834013c00b5014f00ec3834014e00b5016101223834016000b5018501223834018400b5019701223834019600b501a9012238340118002501610092383401180025012b005c383400f4002501190092383400d0002500f50092383400ac002500d100923834009a005b00ad00923834009a002500ad005c38340088005b009b0092383400880025009b005c38340064002500890092383400400025006500923834001c0025004100923822002e0025090022002e0091f700220052002509002200520091f70022007600250900220076008809002200be002509002200be008809002200e2002509002200e2008809002201060025090022010600880900a100960006060000000226a1009a0008fffe0000001e0000a000980300150d00092b3e310a424c4f434b434f554e54a00099a00097a100960006060000000226a1009a0008fffe000000180000a000982b0524085245535350414345a00099a00097a100960006060000000226a1009a0008fffe000000120000a000982b0724064c454e475448a00099a00097a100960006060000000226a1009a0008fffe0000000c0000a0009828009400350454595045a00099a00097a100960006060000000226a1009a0008fffe000000110000a000982931064c41424c454ea00099a00097a100960006060000000226a1009a0008fffe000000120000a000982800a6002f064e554d4c454ea00099a00097a100960006060000000226a1009a0008fffe000000140000a0009829340756455253494f4ea00099a00097a100960006060000000226a1009a0008fffe000000160000a000982800c100450842414e4b53495a45a00099a00097a100960006060000000226a1009a0008fffe0000000a0000a000982b0d24034f5247a00099a00097a100960006060000000226a1009a0008fffe000000190000a00098280109004209414c49474e4d454e54a00099a00097a100960006060000000226a1009a0008fffe000000130000a00098280124002e064e554d534558a00099a00097a100960006060000000226a1009a0008fffe0000000f0000a000982b1e1b06556e75736564a00099a00097a100960006060000000226a1009a0008fffe000000160000a000982801750045075345474e414d45a00099a00097a100960006060000000226a1009a0008fffd000000150000a000980d000a28001300460956657273696f6e2030a00099a00097a100960006060000000226a1009a0008fffd000000150000a0009829900956657273696f6e2031a00099a0009722007600b5090022005200b5090022002e00b5090022002e0121f7002200520121f7002200760121f700a100960006060000000226a1009a0008fffe0000001e0000a000980d000928003100ce0a424c4f434b434f554e54a00099a00097a100960006060000000226a1009a0008fffe000000180000a000982b0524085245535350414345a00099a00097a100960006060000000226a1009a0008fffe000000120000a000982b0724064c454e475448a00099a00097a100960006060000000226a1009a0008fffe0000000c0000a0009828009400c50454595045a00099a00097a100960006060000000226a1009a0008fffe000000110000a000982931064c41424c454ea00099a00097a100960006060000000226a1009a0008fffe000000120000a000982800a600bf064e554d4c454ea00099a00097a100960006060000000226a1009a0008fffe000000140000a0009829340756455253494f4ea00099a000972200be00b509002200be0121f700a100960006060000000226a1009a0008fffe000000160000a000982800c100d50842414e4b53495a45a00099a000972200e200b509002200e20121f70022010600b509002201060121f700a100960006060000000226a1009a0008fffe0000000f0000a000982b072406556e75736564a00099a00097a100960006060000000226a1009a0008fffe0000000a0000a000982b0624034f5247a00099a0009722012a00b5090022012a0121f700a100960006060000000226a1009a0008fffe000000190000a0009828012d00d209414c49474e4d454e54a00099a00097a100960006060000000226a1009a0008fffe000000130000a0009828014800be064e554d534558a00099a00097a100960006060000000226a1009a0008fffe000000120000a000982937064c4342414e4ba00099a00097a100960006060000000226a1009a0008fffe000000130000a0009828015a00d9065345474e554da00099a0009722017200b509002201720121f700a100960006060000000226a1009a0008fffe0000000e0000a000982b041b05454e545259a00099a00097a100960006060000000226a1009a0008fffe000000170000a0009828019000d408444953504e414d45a00099a00097a100960006060000000226a1009a0008fffe000000160000a000982b0112084449535044415441a00099a000972201b100ac12002201ba00ac12002201b1011812002201ba01181200a000aa61020a00ac021e00c0ffe800302201ba00b50052a000ada000aa61020a0118021e012cffe800302201ba01210052a000ada100960006060000000226a1009a0008fffe000000180000a000982801e100d3084c4f41444e414d45a00099a00097a100960006060000000226a1009a0008fffe000000160000a000982b0229075345474e414d45a00099a00097a100960006050000000226a1009a0008fffe000000080000a0009828001b000b03243030a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a2403243034a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a2403243038a00099a00097a100960006050000000226a1009a0008fffe0000000b0000a000982a2403243043a00099a00097a100960006050000000226a1009a0008fffe0000000b0000a000982a1203243045a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a1203243130a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a2403243134a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a2403243138a00099a00097a100960006050000000226a1009a0008fffe0000000b0000a000982a2403243143a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a2403243230a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a1203243232a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a1203243234a00099a00097a100960006050000000226a1009a0008fffe000000080000a000982a2403243238a00099a00097a100960006050000000226a1009a0008fffe0000000b0000a000982a1203243241a00099a00097a000aa610183001c01970030ffe8003022016000250025a000ada000aa61018300880197009cffe8003022016000910025a000ad22019f00b5001222019f012100123401e70145021e01b23834001c0145004101b2383400400145006501b2383400640145008901b2383400ac014500d101b2383400e2014500f501b2383400f40145011901b2383401180145013d01b23834013c017b014f01b23834013c0145014f017c3834014e0145016101b2383401600145018501b2383401840145019701b238340196014501a901b238a100960006060000000226a1009a0008fffd0000001a0000a000980d000a28001301620b56657273696f6e20322e31a00099a00097220076014509002200520145090022002e0145090022002e01b1f70022005201b1f70022007601b1f700a100960006060000000226a1009a0008fffe0000001b0000a000980d000928003101610942595445434f554e54a00099a00097a100960006060000000226a1009a0008fffe000000180000a000982b0224085245535350414345a00099a00097a100960006060000000226a1009a0008fffe000000120000a000982b0724064c454e475448a00099a000972200be014509002200be01b1f700a100960006060000000226a1009a0008fffe000000160000a000982800c101650842414e4b53495a45a00099a000972200e2014509002200e201b1f7002201060145090022010601b1f700a100960006060000000226a1009a0008fffe0000000f0000a000982b072d06556e75736564a00099a00097a100960006060000000226a1009a0008fffe0000000a0000a000982b061b034f5247a00099a0009722012a0145090022012a01b1f700a100960006060000000226a1009a0008fffe000000190000a0009828012d016209414c49474e4d454e54a00099a00097a100960006060000000226a1009a0008fffe000000130000a00098280148014e064e554d534558a00099a00097a100960006060000000226a1009a0008fffe000000100000a00098293906556e75736564a00099a00097a100960006060000000226a1009a0008fffe000000130000a0009828015a0169065345474e554da00099a000972201720145090022017201b1f700a100960006060000000226a1009a0008fffe0000000e0000a000982b041b05454e545259a00099a00097a100960006060000000226a1009a0008fffe000000170000a00098280190016408444953504e414d45a00099a00097a100960006060000000226a1009a0008fffe000000160000a000982b0112084449535044415441a00099a000972201d5013c12002201de013c12002201d501a812002201de01a81200a000aa61022e013c02420150ffe800302201de01450052a000ada000aa61022e01a8024201bcffe800302201de01b10052a000ada100960006060000000226a1009a0008fffe000000180000a000982802050163084c4f41444e414d45a00099a00097a100960006060000000226a1009a0008fffe000000160000a000982b0229075345474e414d45a00099a000972201c3014500122201c301b10012340088017b009b01b2383400880145009b017c3834009a017b00ad01b23834009a014500ad017c38a100960006060000000226a1009a0008fffe000000100000a00098280094015106556e75736564a00099a00097a100960006060000000226a1009a0008fffe000000110000a000982935064c41424c454ea00099a00097a100960006060000000226a1009a0008fffe000000120000a000982800a6014f064e554d4c454ea00099a00097a100960006060000000226a1009a0008fffe000000140000a0009829340756455253494f4ea00099a00097a100960006060000000226a1009a0008fffe0000000a0000a000982800dc0171044b494e44a00099a000973401a8014501cd01b238a100960006060000000226a1009a0008fffe000000160000a000982801bd01660754454d504f5247a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1720\li2160\keepn\widctlpar\tx2160\adjustright {\f4\fs20\ul Name}{\f4\fs20 \tab }{\f4\fs20\ul Description\par }{\f4\fs20 \par }\pard \qj\fi-1714\li2160\widctlpar\tx2160\adjustright {\f4\fs20 BLOCKCOUNT\tab Number of blocks occupied by the segment.  Versions 0 and 1 of the OMF aligned segments to 512 byte boundaries; this is the number of 512 byte blocks used by the segment.\par \par BYTECOUNT\tab Number of bytes occupied by the segment.  Version 2 of the OMF places one segment right after the end of the previous segment, to the length is a byte count, rather than a block count.\par \par RESSPACE\tab Number of bytes to place at the end of the segment.  These bytes will be filled with zeros.\par }{\pard\plain \qj\fi-1714\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\v\f4\fs20 \par }{\f4\fs20 \par LENGTH\tab Total number of bytes occupied by the segment in the executable file.\par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 segment type}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi-1710\li2160\widctlpar\tx2160\adjustright {\f4\fs20 TYPE\tab In versions 0 and 1, this 1-byte field specifies the type and attributes of the segment.\par }\pard \fi-1440\li2160\widctlpar\adjustright {\f4\fs20 \par }\pard \li2610\widctlpar\tx3330\tx4320\tx6840\adjustright {\f4\fs20\ul Bit}{\f4\fs20 \tab }{\f4\fs20\ul Meaning\par }{\f4\fs20 \tab Segment\tab Type\par 0-4\tab $00\tab code\par \tab $01\tab data\par \tab $02\tab jump table segment\par \tab $04\tab path name segment\par \tab $08\tab library dictionary segment\par \tab $10\tab initialization segment\par \tab $11\tab absolute-bank segment\par \tab $12\tab direct-page/stack segment\par \par 5-7\tab Segment Attribute\par }{\pard\plain \li2610\widctlpar\tx3330\tx4320\tx6840\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dynamic segments}}}{\pard\plain \li2610\widctlpar\tx3330\tx4320\tx6840\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 static segments}}}{\v\f4\fs20 \par }{\f4\fs20 \par 5\tab 1=position independent\par 6\tab 1=private\par 7\tab 0=static; 1=dynamic\tab \par }\pard \li2610\widctlpar\tx3690\tx4680\tx6840\adjustright {\f4\fs20 \par }\pard \qj\li2160\widctlpar\tx3780\tx4680\adjustright {\f4\fs20 A segment can have only one type but any combination of attributes.  For example, a position-independent dynamic data segment has TYPE=($A1).\par \par }\pard \fi-1710\li2160\widctlpar\tx2160\adjustright {\f4\fs20 KIND\tab In version 2, this 2-byte field specifies the type and attributes of the segment, replacing the TYPE field in the older OMF versions.\par }\pard \fi-1440\li2160\widctlpar\adjustright {\f4\fs20 \par }\pard \li2610\keepn\widctlpar\tx3330\tx4320\tx6840\adjustright {\f4\fs20\ul Bit}{\f4\fs20 \tab }{\f4\fs20\ul Meaning\par }{\f4\fs20 \tab Segment\tab Type\par 0-4\tab $00\tab code\par \tab $01\tab data\par \tab $02\tab jump table segment\par \tab $04\tab path name segment\par \tab $08\tab library dictionary segment\par \tab $10\tab initialization segment\par }\pard \li2610\widctlpar\tx3330\tx4320\tx6840\adjustright {\f4\fs20 \tab $12\tab direct-page/stack segment\par \par 5-15\tab Segment Attribute\par }{\pard\plain \li2610\widctlpar\tx3330\tx4320\tx6840\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dynamic segments}}}{\pard\plain \li2610\widctlpar\tx3330\tx4320\tx6840\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 static segments}}}{\v\f4\fs20 \par }{\f4\fs20 \par 8\tab 1=bank relative segment\par 9\tab 1=skip segment\par 10\tab 1=reload segment\par 11\tab 1=absolute bank segment\par 12\tab 1=cannot be loaded in special memory\par 13\tab 1=position independent\par 14\tab 1=private\par 15\tab 0=static; 1=dynamic\tab \par }\pard \li2610\widctlpar\tx3690\tx4680\tx6840\adjustright {\f4\fs20 \par }\pard \qj\li2160\widctlpar\tx3780\tx4680\adjustright {\f4\fs20 A segment can have only one type but any combination of attributes.  For example, a position-independent dynamic data segment has KIND=($A001).\par \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ASCII}}}{\v\f4\fs20 \par }{\f4\fs20 LABLEN\tab Length of labels.  This can range from zero to ten.  A label length of zero indicates that labels are variable length.  Variable length labels start with a length byte and are followed by ASCII characters.  They can be up to 255 bytes long.  Fixed length labels are padded on the right with spaces.  In this version, labels are of variable length.\par \par NUMLEN\tab Numbers can be one to four bytes in length.  In this version, they are four bytes long.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version numbers}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object module format}}}{\v\f4\fs20 \par }{\f4\fs20 \par VERSION\tab The version of the object module format.  This will be 0, 1 or 2.\par \par BANKSIZE\tab The maximum size of an executable segment.  In this version, this value is $10000, for executable segments up to 64K in length.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation}}}{\v\f4\fs20 \par }{\f4\fs20 \par ORG\tab Fixed origin for the segment.  If ORG is zero, the segment is relocatable.\par \par ALIGNMENT\tab Byte boundary to align the segment to.  This value must be a power of two.  If it is zero, the segment is not aligned.\par \par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 byte order}}}{\v\f4\fs20 \par }{\f4\fs20 NUMSEX\tab Specifies the order that numbers appear in.  If NUMSEX is zero, numbers appear least significant byte first.  If it is not zero, they appear most significant byte first.  NUMSEX is always zero in this version of ORCA.\par \par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 language card}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 object segment}}}{\v\f4\fs20 \par }{\f4\fs20 LCBANK\tab Used on the Apple IIGS to indicate if a segment should be loaded into the language card area.  This field is obsolete, and is no longer supported by Apple's loader.\par \par SEGNUM\tab In the Apple IIGS load segment, this number is used by the loader to check the contents of the file.  This field is used only in executable files.  It is not created, used, or checked in OBJ files.\par \par ENTRY\tab Displacement into the object segment where execution should begin.\par \par DISPNAME\tab Displacement to the name field.  Using a displacement allows the format to be expanded later.  (See TEMPORG for an example.)\par \par DISPDATA\tab Displacement to the data field.  Using a displacement allows the format to be expanded later.  It also allows for variable length segment names, without requiring the program reading the file to check the length of the segment name.\par \par TEMPORG\tab Indicates a "temporary origin" for the MPW IIGS cross development assembler.  This field is not used on the Apple IIGS.  It is optional; if present, it must be set to 0.\par \par LOADNAME\tab Name of the load segment.  This field is always ten bytes long.  It is the load segments for the current object segment.  While the ten bytes are traditionally filled with printing ASCII characters, there is no real restriction imposed on the bytes.\par \par SEGNAME\tab Name of the object segment.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The header is followed by the op code portion of the segment.  The op code portion of the segment consists of three major groups of op codes.  These are:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:object module format}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f4\fs20 \tab }{\f4\fs20\ul Op Code}{\f4\fs20 \tab }{\f4\fs20\ul Use}{\f4\fs20 \par \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \tab $00\tab \tab end of segment indicator\par \tab $01-$DF\tab absolute bytes\par \tab $E0-$FF\tab directives\par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 As indicated, the segment ends when a $00 is found.  A hex number from $01 to $DF is essentially a byte counter.  The indicated number of bytes are placed directly in the load module, unchanged.  The bytes follow the byte count in the order of use.\par The last item to describe is the directives themselves.\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20\ul Op Code}{\f4\fs20 \tab }{\f4\fs20\ul Description}{\f4\fs20 \par \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $E0\tab Align - The operand is a NUMLEN byte number indicating the even byte boundary to align to.  Alignment to a page boundary would appear, with NUMLEN=4, as E0 00 01 00 00.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $E1\tab ORG - The operand is a NUMLEN byte number  indicating an absolute address to ORG to.  If ORG>* (* is the current location counter) zeros are inserted to reach ORG.  If ORG=*, no action is taken.  If ORG<*, the linker must backtrack in the binary load module. If ORG < START, where START is the first byte generated, an error results.\par }\pard \qj\fi-990\li1440\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation dictionary}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bit shifting}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 $E2\tab RELOC - This is a relocation record, used in the relocation dictionary of a load segment.  It is used to patch an address in a load segment with a reference to another address in the same load segment.  It contains two 1-byte counts followed by two offsets.  The first count is the number of bytes to be relocated, and the second count is a bit-shift operator, telling how many times to shift the relocated address before inserting the result into memory.  If the bit-shift operator is positive, then the number is shifted to the left, filling vacated bit positions with 0\rquote s.  If the bit-shift operator is negative, then the number is shifted right. \par }\pard \qj\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \tab The first offset gives the location (relative to the start of the segment) of the number that is to be relocated.  The second offset is the location of the reference relative to the start of the segment; that is, it is the value that the number would have if the segment it\rquote s in started at address $000000.  For example, suppose the segment includes the following lines:\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\li2160\keepn\widctlpar\tx3420\tx4320\adjustright {\f4\fs20\ul location}{\f4\fs20       \tab }{\f4\fs20\ul line\par }\pard \qj\li2160\keep\widctlpar\tx3420\tx4320\adjustright {\f4\fs20 \par }{\f6\fs18 35      \tab label\tab anop\par 400              \tab lda   label+4\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \tab Label is a local reference to a location 53 ($35) bytes after the start of the segment.  When this segment is loaded into memory, the value of label+4 depends on the starting location of the segment, so the linker creates a RELOC record in the relocation dictionary for this value.  Label+4 is two bytes long; that is, the number of bytes to be relocated is 2.  No bit-shift operation is needed.  The number to be calculated during relocation is 1025 ($401) bytes after the start of the segment (immediately after the LDA, which is one byte).  The value of label+4 would be $39 if the segment started at address $000000.  The RELOC record for the number to be loaded into the A register by this statement would therefore look like this: (note that the values are stored low-byte first, as specified by NUMSEX):\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\fi450\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f6\fs18 E2020001 04000039 000000 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 which corresponds to the following values:\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\fi450\li1440\keep\widctlpar\tx2970\adjustright {\f4\fs20 $E2\tab operation code\par $02\tab number of bytes to be relocated\tab \par $00\tab bit-shift operator\par $00000401\tab offset of value from start of segment\par $00000039\tab value if segment started at $000000\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \tab Certain types of arithmetic expressions are illegal in a relocatable segment.  Specifically, any expression that cannot be evaluated (relative to the start of the segment) by the assembler cannot be used.  The expression LAB|4 can be evaluated, for example, since the RELOC record includes a bit-shift operator; however LAB|4+4 cannot be used, because the assembler would have to know the absolute value of LAB in order to perform the bit-shift operation }{\i\f4\fs20 before}{\f4\fs20  adding 4 to it.  Similarly, the value of LAB*4 depends on the absolute value of LAB, and cannot be evaluated relative to the start of the segment, so multiplication is illegal in expressions in relocatable segments.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:object module format}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 bit shifting}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 $E3\tab INTERSEG - This record is used in the relocation dictionary of a load segment, and contains a patch to a long call to an external reference.  The INTERSEG record is used to patch an address in a load segment with a reference to another address in a different load segment.  It contains two 1-byte counts followed by an offset, a 2-byte file number, a 2-byte segment number, and a second offset.  The first count is the number of bytes to be relocated, and the second count is a bit-shift operator, telling how many times to shift the relocated address before inserting the result into memory.  If the bit-shift operator is positive, then the number is shifted to the left, filling vacated bit positions with 0\rquote s.  If the bit-shift operator is negative, then the number is shifted right.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation dictionary}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 load segment}}}{\v\f4\fs20 \par }\pard \qj\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \tab The first offset is the location, relative to the start of the segment, of the number that is to be relocated.  If the reference is to a static segment, then the file number, segment number, and second offset correspond to the subroutine referenced.  The file number is always one.\par \tab For example, suppose the segment includes an instruction like\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\fi450\li1440\keep\widctlpar\adjustright {\f6\fs18          jsl   ext\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 where the label ext is an external reference to a location in a static segment.  If this instruction is at relative address $720 within its segment and ext is at relative address $345 in segment $000A in file $0001, then the linker creates an INTERSEG record in the relocation dictionary that looks like this (note that the values are stored low-byte first, as specified by NUMSEX):\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 external labels}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 static segments}}}{\pard\plain \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 byte order}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi450\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f6\fs18 E3030020 07000001 000A0045 030000\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 which corresponds to the following values:\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\fi450\li1440\keep\keepn\widctlpar\tx3060\adjustright {\f4\fs20 $E3\tab operation code\par $03\tab number of bytes to be relocated\par $00\tab bit-shift operator\par $00000720\tab offset of instruction\par $0001\tab file number\par $000A\tab segment number\par }\pard \qj\fi450\li1440\keep\widctlpar\tx3060\adjustright {\f4\fs20 $00000345\tab offset of subroutine referenced\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\f4\fs20 \par }\pard \qj\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 \tab When the loader processes the relocation dictionary, it uses the second offset to find the JSL, and patches in the address corresponding to the file number, segment number, and offset of the referenced subroutine.\par \tab INTERSEG records are used for any long-address reference to a static segment\par }\pard \qj\fi-990\li1440\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1170\tx1440\tx1710\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 static segments}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $E4\tab USING - followed by a LABLEN byte name of a data area to use.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $E5\tab STRONG - followed by a LABLEN byte name to generate a strong reference to.  This does not generate code, but will flag an error if the routine cannot be found.  Its effect is to insure that the routine is included in the load module.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard reference}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $E6\tab GLOBAL - followed by a LABLEN byte label whose  value is set to the current location counter.  The name is followed by  three fields.\par \tab \tab The first field is the length attribute; it is a one-byte value in OMF versions 0 and 1, and a two-byte value in OMF version 2.  If the value exceeds 255 in OMF version 0 or 1, or 65535 in OMF version 2, the value is set to 255 or 65535, respectively.  This value indicates a field overflow.\par \tab \tab The second value is a one-byte value.  It is the type attribute for the label, and corresponds exactly to the type attribute used by the assembler.\par \tab \tab The last field is a one-byte private flag, which indicates if the name is visible outside of the object module in which it appears (the value is zero) or only in the object file (the value is one). \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 length attribute}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 type attribute}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 static variables}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:object module format}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 constants}}}{\v\f4\fs20 \par }{\f4\fs20 \par $E7\tab GEQU - The operand is a LABLEN byte name,  followed by three fields, followed by an expression.\par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 \tab \tab The first field is the length attribute; it is a one-byte value in OMF versions 0 and 1, and a two-byte value in OMF version 2.  If the value exceeds 255 in OMF version 0 or 1, or 65535 in OMF version 2, the value is set to 255 or 65535, respectively.  This value indicates a field overflow.\par \tab \tab The second value is a one-byte value.  It is the type attribute for the label, and corresponds exactly to the type attribute used by the assembler.\par \tab \tab The last field is a one-byte private flag, which indicates if the name is visible outside of the object module in which it appears (the value is zero) or only in the object file (the value is one). \par \tab \tab The value of the label is set to the value of the expression.  See EXPR (op code $E8) for a description of an expression.  (In version 0 of the OMF, this expression was always represented as a NUMLEN byte constant value.)\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $E8\tab MEM - The operand is two absolute NUMLEN byte values specifying an absolute range of memory which must be reserved.  This is not needed or supported on the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory management}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $EB\tab EXPR - The first operand byte is the  number of bytes to generate, and is <= NUMLEN.  This is followed by a reverse polish notation expression.  Operators include:\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-994\li2880\keepn\widctlpar\tx2880\adjustright {\f4\fs20\ul Operator}{\f4\fs20 \tab }{\f4\fs20\ul Description\par }{\f4\fs20 \par $00\tab end of expression\par $01\tab signed integer add\par }\pard \qj\fi-990\li2880\widctlpar\tx2880\adjustright {\f4\fs20 $02\tab signed integer subtract\par $03\tab signed integer multiply\par $04\tab signed integer divide\par $05\tab modulo operation\par $06\tab arithmetic negation\par $07\tab signed bit shift operator\par $08\tab logical and\par $09\tab logical or\par $0A\tab logical eor\par $0B\tab logical not\par $0C\tab logical <=\par $0D\tab logical >=\par $0E\tab logical <>\par $0F\tab logical <\par $10\tab logical >\par $11\tab logical =\par $12\tab bit and\par $13\tab bit or\par $14\tab bit eor\par $15\tab bit not\par \par }\pard \qj\fi-1440\li2880\widctlpar\tx2880\adjustright {\f4\fs20 Operands are\par }\pard \qj\fi-990\li2880\widctlpar\tx2880\adjustright {\pard\plain \qj\fi-990\li2880\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\v\f4\fs20 \par }{\f4\fs20 \par $80\tab current location counter\par $81\tab ABS - followed by a NUMLEN byte absolute value\par $82\tab WEAK - followed by a NUMLEN byte weak reference label name}{\pard\plain \qj\fi-990\li2880\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 soft reference}}}{\f4\fs20 \par $83\tab reference to a LABLEN byte label in the operand, resolves as the label value\par $84\tab length attribute of the following LABLEN byte label}{\pard\plain \qj\fi-990\li2880\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 length attribute}}}{\f4\fs20 \par $85\tab type attribute of the following LABLEN byte label}{\pard\plain \qj\fi-990\li2880\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 type attribute}}}{\f4\fs20 \par $86\tab count attribute of the following LABLEN byte label}{\pard\plain \qj\fi-990\li2880\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 count attribute}}}{\f4\fs20 \par $87\tab REL - followed by a NUMLEN byte displacement from the start of the current module\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $EC\tab ZPEXPR - same as $EB, except that the bits are truncated to allow the final value to fit into the specified space must all be zero.  If the truncated bytes are not zero, the linker will flag an error when the segment is processed.  This is effectively a variable length implementation of a zero page protocol.}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $ED\tab BKEXPR - same as $EB, except that the bits are truncated to allow the final value to fit  into the specified space must match the corresponding bits in the current location counter.  This allows checking to insure  that an address is in the correct bank.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $EE\tab RELEXPR - the first byte is the number of bytes to generate, and is <=NUMLEN.  This is  followed by a NUMLEN byte displacement from the current location counter, which is the origin for a relative branch.  An expression of the same format as that for $EB follows this value.  The expression is resolved as a NUMLEN byte absolute address, then a relative branch is  generated from the origin to the computed destination.  The result is truncated to the needed number of bytes, and checked to insure that no range errors resulted from the truncation.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 branching\:object module format}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:object module format}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $EF\tab LOCAL - same as $E6 except that it is a true  local label, and is ignored by the link editor unless the module is a data area.  In subroutines, it can be used for symbolic debugging.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels\:local}}}{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 data segment}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $F0\tab EQU - same as $E7, except that this is a local label, significant only in data areas.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $F1\tab DS - the operand is a NUMLEN byte number indicating how many zero bytes to insert in the file at the current location counter.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 location counter}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 $F2\tab LCONST - This record contains a 4-byte count followed by absolute code or data.  The count indicates the number of bytes of data.  LCONST is similar to CONST except that it allows for a much greater number of data bytes.\par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 $F3\tab LEXPR - This record contains a 1-byte count followed by an expression.  The expression is evaluated, and its value is truncated to the number of bytes specified in the count.  The order of the truncation is from most significant to least significant.  If the expression evaluates to a single label with a fixed, constant offset, and the label is in another segment, and that segment is a dynamic code segment, then the linker is allowed to create an entry for that label in the jump table segment.  (The jump table segment provides a mechanism to allow dynamic loading of segments as they are needed.)  Only a JSL instruction should generate an LEXPR record.\par }\pard \fi-990\li1440\keep\widctlpar\tx1440\adjustright {\pard\plain \fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 expressions\:object module format}}}{\pard\plain \fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 labels}}}{\pard\plain \fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dynamic segments}}}{\pard\plain \fi-990\li1440\keep\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 jump table}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \fi-990\li1440\keep\widctlpar\tx1800\adjustright {\f4\fs20 $F4\tab ENTRY - This record is used in a run-time library dictionary.  It contains a two-byte segment number, followed by a label that is the name of the code segment or global entry point.\par \tab \tab Run-time libraries are not used on the Apple IIGS, since tools serve the same purpose much more effectively.\par }\pard \fi-990\li1440\keep\widctlpar\tx1440\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\tx3330\tx4950\adjustright {\f4\fs20 $F5\tab cRELOC - This record is the compressed version of the RELOC record.  It is identical to the RELOC record, except that the offsets are 2 bytes long rather than 4 bytes.  The cRELOC record can be used only if both offsets are less than $FFFF (65535).  The following example compares a RELOC record and a cRELOC record for the same reference (for an explanation of each line of these records, see the discussion of the RELOC record):\par }\pard \fi-2880\li2880\widctlpar\tx1440\tx2880\tx3330\tx4950\adjustright {\f4\fs20 \par }\pard \fi-990\li2880\widctlpar\tx3330\tx4950\adjustright {\b\f4\fs20 RELOC\tab cRELOC\par }{\f4\fs20 \par $E2\tab $F5\par $02\tab $02\par $00\tab $00\par $00000401\tab $0401\par $00000039\tab $0039\par (11 bytes)\tab (7 bytes)\par }\pard \fi-2880\li2880\widctlpar\tx1440\tx2880\tx3330\tx4950\adjustright {\f4\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $F6\tab cINTERSEG \endash  This record is the compressed version of the INTERSEG record.  It is identical to the INTERSEG record, except that the offsets are 2 bytes long rather than 4 bytes, the segment number is 1 byte rather than 2 bytes, and it does not include the 2-byte file number.  The cINTERSEG record can be used only if both offsets are less than $FFFF (65535), the segment number is less than 256, and the file number associated with the reference is 1.  References to segments in run-time-library files must use INTERSEG records rather than cINTERSEG records.\par }\pard \qj\li1440\widctlpar\tx1800\tx3330\tx4950\adjustright {\f4\fs20 \tab The following example compares an INTERSEG record and a cINTERSEG record for the same reference (for an explanation of each line of these records, see the discussion of the INTERSEG record):\par }\pard \fi-2880\li2880\widctlpar\tx1800\tx2880\tx3330\tx4950\adjustright {\f4\fs20 \par }\pard \li1800\keepn\widctlpar\tx1800\tx3420\adjustright {\b\f4\fs20 INTERSEG\tab cINTERSEG}{\f4\fs20 \par \par }\pard \li1800\keepn\widctlpar\tx1800\tx3150\tx3420\adjustright {\f4\fs20 $E3\tab \tab $F6\par $03\tab \tab $03\par $00\tab \tab $00\par $00000720\tab \tab $0720\par $0001\par $000A\tab \tab $0A\par $00000345\tab \tab $0345\par (15 bytes)\tab \tab (8 bytes)\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-1000\li1440\widctlpar\tx1800\adjustright {\f4\fs20 $F7\tab SUPER - Super records contain a series of cRELOC, cINTERSEG and INTERSEG records, compacted into a short, tabular form.  The difference between a compacted OMF file and an uncompacted OMF file is that compacted OMF files use SUPER records to reduce space and cut down on load time.\par \tab \tab SUPER records are not covered in this appendix.  For details on the format of SUPER records, see volume 2 of }{\i\f4\fs20 Apple IIGS GS/OS Reference}{\f4\fs20 .\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs28 Executable Files}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Executable Files\tcl2}}}{\b\f4\fs28 \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 executable files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 operation codes\:object module format}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 utilities}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file types}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 While load files (executable files) and object files are used for entirely different purposes, their internal formats are the same.  This makes it easier to write utility programs to work with the system.  While the two file types share the same structure, there are limitations on which operation codes can appear in which file types, and some header fields are only used in one or the other.\par }\pard \qj\fi360\widctlpar\tx3600\adjustright {\f4\fs20 The body of each load segment consists of two parts: \par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx720\adjustright {\f4\fs20 1.\tab A memory image consisting of LCONST records and DS records containing all of the code and data that do not change with load address (with space reserved for location-dependent addresses).  The DS records are inserted by the linker (in response to DS records in the object file) to reserve large blocks of space, rather than putting large blocks of zeros in the load file.  These DS records are not used to save space in expressed files, which are formatted for load speed, rather than disk space.\par }{\pard\plain \qj\fi-270\li720\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 relocation dictionary}}}{\v\f4\fs20 \par }{\f4\fs20 \par 2.\tab A relocation dictionary that provides the information necessary to patch the memory image records at load time.\par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 When the segment is loaded into memory, each LCONST record or DS record is loaded in one piece, and then the relocation dictionary is processed.  The relocation dictionary includes RELOC (or cRELOC) and INTERSEG (or cINTERSEG) records only: the RELOC records provide the information necessary to recalculate the values of location-dependent local references, and the INTERSEG records provide the information necessary to transfer control to another load segment.  See the discussions of the RELOC and INTERSEG records in the last section for more information.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendices\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix C: Custom Installations\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 548}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 549}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 545}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 A}{\b\f4\fs36 ppendix C\par Custom Installations \par }\pard \widctlpar\adjustright {\f4\fs20 \par \par \par \par }\pard \qj\widctlpar\adjustright {\i\f4\fs20 \par }\pard \widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Appendix C \endash  Custom Installations\tcl1}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 system configuration}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 installing ORCA/M}}}{\f4\fs20 This appendix is designed to help you install ORCA/M to take advantage of your specific hardware configuration.  As shipped, ORCA/M is set up for people who have one or two 3.5 inch floppy disk drives.  If that describes your system, you should make copies of the original disks, and use them just as they were shipped.  If you have a hard disk, you can use Apple's Installer program to create an ORCA/M environment that suits your needs.  Finally, this appendix describes the principal files that make up the ORCA development environment and the assembler; by studying this section, you can learn why we configured ORCA/M the way we did, and adjust the installation to suite your needs.\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Installer Scripts}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Installer Scripts\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Apple's Installer can be used to install ORCA/M on your hard disk, either as a separate language or in combination with other ORCA languages.  To run the installer, execute the Installer file from the ORCA.Extras disk.  There are several installer scripts listed in the window that appears; these are described below.  Select the one you want, select the disk that you want to install the program on from the right-hand list, and click on the Install button.\par Please note that with the current version of Apple's Installer, you will have to select the installation script before you can pick a folder from the right-hand list.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 New System}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New System\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This is the basic, all-purpose installation script.  It installs the full ORCA/M system and all of the macro files and help files that you don't have enough room for from a floppy-disk based system.\par If you run a lot of software, you probably boot into the Finder or some other program launcher.  In that case, you should probably install ORCA/M in a folder that is not at the root level of your hard disk.\par If you plan to use your computer primarily for programming, you can set things up so you boot directly into ORCA/M.  To do that, start by installing Apple's system disk without a Finder.  (Apple's installer, shipped on their system disk and available free from your local Apple dealer, has an installation option to install the system with no Finder.)  Next, install ORCA/M at the root level of your boot volume, making sure that ORCA.SYS16 is the first system file on the boot disk.  System files are those files with a file type of S16 that end with the characters ".SYS16", as well as the files with a file type of SYS that end in the characters ".SYSTEM".\par See also "ORCA Icons", "ORCA Pascal, C, Asm Libraries", ".PRINTER and .NULL", and "GSBug", below.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ORCA Icons}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ORCA Icons\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 If you use Apple's Finder as a program launcher, be sure and install the ORCA Icons.  ORCA itself will show up as a whale, while the various source files, object files, and utilities will be displayed with distinctive icons.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 .PRINTER and .NULL}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 .PRINTER and .NULL\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The ORCA system disk comes with the .PRINTER and .NULL drivers installed, along with the relevant support files for the .PRINTER driver.  If you will be running ORCA from your hard disk, and would like to install these drivers, select this option in the installer.  It copies both drivers to your System:Drivers folder.  It also copies the TextPrinterInit to your System:System.Setup folder, the TextPrinterCDev to your System:CDevs folder, and the TextPrinterCDA to your System:Desk.Accs folder.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GSBug}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GSBug\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This option installs the Init version of the debugger in your system folder.  Use it to quickly install GSBug on your hard disk.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 ORCA Pascal, C, Asm Libraries}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ORCA Pascal, C, Asm Libraries\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par If you are using ORCA/M by itself, installing ORCA/M gives you all of the libraries you need.\par If you are adding ORCA/C and ORCA/Pascal to your ORCA/M system, you must have a total of three library files in your library folder, and they must appear in the correct order.  If you are missing any of the libraries, or if they are in the wrong order, you will get linker errors with either C, Pascal, or possibly with both languages.  This installer script installs the libraries for C, Pascal, and assembly language in the correct order.  (The libraries used by the assembler are also used by C and Pascal, so you get them anytime you use C or Pascal.)  You can use this installer script before or after any of the other scripts.\par You should not use this script unless you are installing C or Pascal.  Installing extra libraries takes up a little more room on your disk; slows link times a little, since the linker has to scan an extra library; and uses up a little extra memory, since the library header is loaded by the linker.  If you are using Pascal, but not C, you can go back later and delete the file ORCALIB from your libraries folder; if you are using C but not Pascal, you can delete the file PASLIB.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Update System}{\b\v\f4 ;}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This script will update an old ORCA/M system or add ORCA/M to an existing ORCA/C or ORCA/Pascal system.  All of the executable files from the ORCA/M disk are copied to your old system, but the LOGIN file, SYSCMND file, SYSEMAC file, SYSTABS file and SYSHELP file are not updated, since all of these may have been customized in your old system.  Of course, if you are installing ORCA/M into an existing system that does not already have ORCA/M, you will need to add ASM65816 as a language to your SYSCMND file.\par ORCA/M 2.0 is compatible with the compilers from ORCA/Pascal 1.3 and ORCA/C 1.2 and later.  All of the other executable files from these languages are replaced when you update a system.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 C}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\f4\fs20 Libraries for Pascal, C, and assembly language should all come from the same disk.  The libraries included with this version of ORCA/M, for example, work fine with the 1.x versions of Pascal and C, updating the compilers so they use the new I/O conventions of GS/OS and the 2.0 version of the ORCA shell.  The SYSLIB file from this version of ORCA/M cannot, however, be used with the PASLIB or ORCALIB files from earlier releases of the compilers.\par See also "ORCA Icons", "ORCA Pascal, C, Asm Libraries", ".PRINTER and .NULL", and "GSBug", below.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Update System, No Editor}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Update System, No Editor\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par This installation script is basically the same as the "Update System" script, described above, but it doesn't install the text editor.  It may seem silly at first to install a text system with no text editor, but there are a number of text-based editors available from third party sources; this installation option installs ORCA/M without removing your existing text editor.\par See also "ORCA Icons", "ORCA Pascal, C, Asm Libraries", ".PRINTER and .NULL", and "GSBug", below.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 RAM Disks}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 RAM Disks\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 RAM disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM disks}}}{\f4\fs20  come in a variety of sizes and flavors.  One of the most common is a RAM disk allocated from the control panel of your computer.  }{\i\f4\fs20 We do not recommend using a RAM disk of this kind unless you have only one 3.5" floppy disk, and then we recommend keeping it small and using it only for temporary storage.}{\f4\fs20   These RAM disks are allocated from the memory of your computer.  ORCA/M can make very effective use of that memory if you let it \endash  the system will perform better than if you try to copy parts of ORCA to your RAM disk.  In addition, RAM disks allocated from main memory are easy to destroy from a program that is accidentally writing to memory that it has not allocated.  While this is unusual in commercial programs, you may find that your own programs do this frequently during the development cycle.  RAM disks that are not allocated from main memory, like Apple's "Slinky" RAM disk, are good for work space and even source code.  The so-called ROM disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ROM disks}}}{\f4\fs20 , or battery-backed RAM disks, should be treated as small hard disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hard disks}}}{\f4\fs20 .  See the sections on installing ORCA/M on a hard disk for effective ways of using ROM disks.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Details About Configuration}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Details About Configuration\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 system configuration}}}{\f4\fs20 In this section, we will explore why ORCA/M is configured the way it is by looking at what happens when you run ORCA/M, when ORCA looks for files, and where it looks for files.  The material in this section is advanced information for experienced programmers.  You do not need to understand this material for beginning and intermediate programming, and the entire section can safely be skipped.\par }{\v\f4\fs20 .Sys16 file;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA.Sys16 file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell}}}{\f4\fs20 You always start ORCA/M by running the ORCA.SYS16 file.  This file contains the UNIX-like text based shell.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSCMND file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell\:command table}}}{\f4\fs20 The first thing the shell does after starting is to look for a folder called SHELL; this folder must be in the same location as the ORCA.SYS16 file.  Inside this folder, the shell looks for an ASCII file (it can be stamped as a ProDOS TXT file or an ORCA SRC file) with the name SYSCMND; this is the command table.  It is loaded one time, and never examined again.  The shell must get at least this far, successfully loading the SYSCMND table, or it will stop with a system error.\par The next step taken by the shell is to set up the default prefixes.  The shell is a GS/OS aware program, and expects the program launcher you use to set prefix 8 to the current prefix, and prefix 9 to the program's prefix.  Prefix 8 is not changed if it has already been set by the program launcher, but the shell will set it to the same prefix as prefix 9 if prefix 8 is initially empty.  The remaining prefixes default to prefix 9 plus some subdirectory, as show in the table below.\par \par }\pard \qj\li1260\keepn\widctlpar\adjustright {\f4\fs20\ul prefix}{\f4\fs20 \tab }{\f4\fs20\ul set to\par }{\f4\fs18 13\tab 9:libraries\par 14\tab 9\par 15\tab 9:shell\par 16\tab 9:languages\par }\pard \qj\li1260\widctlpar\adjustright {\f4\fs18 17\tab 9:utilities\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LOGIN file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 scripts\:see EXEC files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ALIAS command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 PRIZM}}}{\f4\fs20 The last step taken by the shell is to look in prefix 15 for a script file named LOGIN.  To qualify, this file must have a file type of SRC, and a language stamp of EXEC.  If the shell does not find a valid LOGIN file, it simply moves on; in other words, you can leave out the LOGIN file if you choose.  Typically, this script file is used to set up custom aliases, set up shell variables, change the default prefixes listed above to other locations, and to execute PRIZM, the desktop development system.  One thing this shows is that, as far as ORCA is concerned, the PRIZM desktop development system is actually nothing more than an application that you run from within the shell.  Systems that default to the desktop programming environment do so by running PRIZM from within the LOGIN script, so PRIZM is executed as part of the boot process.\par After executing the LOGIN script, the shell writes a # character to the screen and waits for further commands.  If course, if PRIZM is executed from the LOGIN file, the shell never gets a chance to do this until you quit from PRIZM.\par Prefixes 13 to 17 are initialized by the shell, but you can change them to point to other folders if you prefer.  To understand how these prefixes are used, we'll look at the programs that currently use them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EDIT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSEMAC file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSHELP file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTABS file}}}{\f4\fs20 When you use the EDIT command, the shell attempts to run a program named EDITOR; it expects to find an EXE file with this name in prefix 15 (the "shell" prefix).  If the shell does not find an EXE file with the name EDITOR in prefix 15, it writes the message "ProDOS: File not found" and returns to the # prompt.  The ORCA editor uses prefix 15 to locate the SYSTABS file (to set up the tab line), the SYSEMAC file (to set up the default editor macros), and the SYSHELP file (to write the editor help screen).  The editor can function perfectly well without any of these files, although you will get a warning message each time you load a file if there is no SYSTABS file.  When you cut, copy or paste text, the editor reads or writes a file called SYSTEMP to prefix 14; obviously, the editor will perform a lot faster on these operations if prefix 14 is set to point to a RAM disk.\par A few other programs look at the SYSTABS file in prefix 15; PRIZM is another good example.  No other use is currently made of prefix 15.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pipes}}}{\f4\fs20 Prefix 14, which the editor uses as a work prefix, is also used by the shell when you pipe output from one program to become input to another program.  The shell handles piping by creating a temporary file to hold the output of one program, reading this file as standard input for the next program.  These pipe files are called SYSPIPE0, SYSPIPE1, and so forth, depending on how many pipes were used on a single command line.\par When you use any of the commands to compile or link a program, the shell looks in prefix 16 for the compiler, assembler, or linker.  For example, if you assemble an ASM65816 source file, the shall takes a look at the auxtype field for the file, which will have a value of 3.  The shell then scans its internal copy of the SYSCMND file looking for a language with a number of 3, and finds one with a name of ASM65816.  The shell then loads and executes the file 16:ASM65816; if it does not find such a file, it flags a language not available error .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 header files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\f4\fs20 Compilers and linkers make heavy use of prefix 13, which is not actually used by the shell.  A convention has also gradually developed to put assembler macros and equate files in a folder called ainclude inside the library folder, although the assembler and MACGEN utility don't automatically scan this folder.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\f4\fs20 The linker also uses the library folder.  When you link a program, especially one written in a high-level language, the program almost always needs a few subroutines from a standard library.  The linker recognizes this automatically, and scans prefix 13 looking for library files.  The linker ignores any folders or other non-library files it might find.  When the linker finds a library file, it opens it, scans the files in the library to resolve any subroutines, closes the file, and moves on.  The linker never goes back to rescan a library, which is why it is important for the libraries to be in the correct order.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 utilities}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 EXEC files}}}{\f4\fs20 Prefix 17 is the utility prefix.  When you type a command from the shell, the shell checks to see if it is in the command table.  If so, and if the file is a utility, the shell appends the name to 17: and executes the resulting file.  For example, when you run the MAKELIB utility to create your own library, the shell actually executes the file 17:MAKELIB, giving a file not found error if there is no such file.  Utilities are not limited to EXE type files; you can make an SYS file, S16 file, or script file a utility, too.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 HELP command}}}{\f4\fs20 Prefix 17 is also used by the help command.  When you type HELP with no parameters, the help command dumps the command names from the SYSCMND table.  When you type HELP with some parameter, like\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par }{\f6\fs18 help catalog\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 the help command looks for a text (TXT) or source (SRC) file named 17:HELP:CATALOG, typing the file if it is found.  In other words, you can use the help command to type any standard file, as long as you put that file in the HELP folder inside of the utilities folder.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 All of the files that were not mentioned in this section can be placed absolutely anywhere you want to put them \endash  since none of the ORCA software looks for the files in a specific location, you have to tell the system where they are anyway.  It might as well be a location you can remember, so pick one that makes sense to you.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Finder}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory model}}}{\f4\fs20 All of this information can be put to use for a variety of purposes.  For example, by installing the Finder, BASIC.SYSTEM, and any other programs you use regularly as utilities under ORCA, you can boot directly into ORCA's text environment (which takes less time than booting into the Finder) and use ORCA as a program launcher.  You can also split the ORCA system across several 3.5" floppy disks by moving, say, the libraries folder to the second disk, setting prefix 13 to point to the new disk from within your LOGIN file.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\colsx0\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par " }}{\fldrslt }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendices\par }}{\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix D: Licensing\par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 566}}}{\f5\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 567}}}{\f5\fs20 \par }}{\headerf \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\li288\widctlpar\tx1620\adjustright {" }}{\fldrslt }}\pard\plain \qr\li288\widctlpar\tx1620\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \s28\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 559}}}{\f5\fs20 \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 A}{\b\f4\fs36 ppendix D\par Licensing \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par \par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Appendix D \endash  Licensing\tcl1}}}{\v\f4\fs20 \par }{\fs20 \par \par }{\b\f4\fs28 Using the .PRINTER Driver}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using the .PRINTER Driver\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printer driver}}}{\f4\fs20 Programs that print by opening .PRINTER and writing through GS:OS will not work unless the .PRINTER driver is installed in the SYSTEM:DRIVERS folder of the boot disk.  If you wish to distribute a program that requires this driver, you must include an appropriate copyright statement with your program.  This copyright statement should appear on the distribution disk, and should read:\par \par .PRINTER Driver Copyright 1991, Byte Works Inc.\par \par You may only distribute the printer driver with other software, and the software must be created in whole or in part with an ORCA language.  There is no fee for using the .PRINTER driver.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Macros}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Macros\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 macros}}}{\f4\fs20 Macros may be used in your own programs without restriction, so long as the source code for the macros are not distributed with the program.\par If you would like to distribute the macros with your program, the following copyright message must appear in the macro source file:\par \par Copyright 1991, Byte Works, Inc.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Using SYSLIB}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using SYSLIB\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSLIB}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 libraries}}}{\f4\fs20 If your program must be linked with the ORCA/M SYSLIB library file, you are using copyrighted libraries in your program.  In that case, the following copyright message must appear in the same location as any other copyright information in your program:\par \par Contains libraries from ORCA/M, Copyright 1991, Byte Works, Inc.\par \par There is no fee for using the libraries in your program.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\titlepg\sectdefaultcl {\headerr \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst { PRINT \\p page " newpath\par 11 713 moveto 47 713 lineto 54 756 moveto 54 720 lineto\par 11 65 moveto 47 65 lineto 54 58 moveto 54 22 lineto\par 565 713 moveto 601 713 lineto 558 756 moveto 558 720 lineto\par 558 22 moveto 558 58 lineto 565 65 moveto 601 65 lineto\par stroke\par }\pard \qr\widctlpar\adjustright {" }}{\fldrslt }}\pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix E: Differences Between ORCA/M 2.0 and ORCA/M 1.0\par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\caps\f4\fs36 A}{\b\f4\fs36 ppendix E\par Differences Between ORCA/M 2.0 and ORCA/M 1.0 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par \par }{\v\f4\fs20 .0 and ORCA/M 1.0;}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Appendix E \endash  Differences Between ORCA/M 2.0 and ORCA/M 1.0\tcl1}}}{\v\f4\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 This appendix summarizes the major differences between using ORCA/M 2.0 under GS/OS and using ORCA/M 1.1 under ProDOS 16.  In many cases, this appendix only points out that a difference exists and gives a broad overview of the difference; you can refer to the main body of this reference manual for further details.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 GS/OS}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 GS/OS\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 Path Names}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Path Names\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 file names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 path names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ProDOS}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS}}}{\v\f4\fs20 \par }{\f4\fs20 GS/OS now supports longer file names, longer path names, file names with new characters, and the use of lowercase characters in file names.  All of the programs in ORCA/M fully support these changes.  Specifically:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4\fs20 \bullet \tab ORCA allows path names up to 32K in length.\par \bullet \tab The : separator can be used instead of the / separator.  The / separator can also be used, although you cannot mix the two separators in the same path name.  For example, these two path names are equivalent, and either is acceptable:\par \par }{\f6\fs18 \tab \tab /Disk/Folder/File\par \tab \tab :Disk:Folder:File\par }{\f4\fs20 \par \bullet \tab File names can be up to 32K in length, and can contain any typeable character except ':'.  If the file name contains spaces, the '?' character, or the '=' character, you must inclose the file name in quotes.  While ORCA and GS/OS support a wide variety of file names, not all FSTs support all characters; in particular, the ProDOS FST, which is currently used to format floppy disks and hard disks, only allows 15 characters in a file name, forces the characters to be alphanumeric or the period, and requires that the first character be alphabetic.\par \bullet \tab Lowercase letters are accepted throughout the ORCA environment.  When a file is created using lowercase letters, the file name on disk will use the same case.  Commands that print file names, like CATALOG, use the same case as is found on disk.  The RENAME command can be used to change the case of existing file names.  While uppercase and lowercase letters are allowed for readability, case is not significant, so File, FILE and file all refer to the same file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par Because of these changes, the ORCA Shell is set to grow with GS/OS.  As this manual is written, the only FSTs that are available are for ProDOS, AppleShare and CD ROM drives, but the shell will support future FTSs automatically as GS/OS grows.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Standard I/O}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Standard I/O\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 error output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 redirection}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 I/O redirection}}}{\v\f4\fs20 \par }{\f4\fs20 The shell now uses the GS/OS .CONSOLE driver for input and output.  Due to current limitations in GS/OS, your programs must still use the text tools for input and output if you want your input and output to be redirectable under the shell.  We hope this will change in the relatively near future.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Numbered Prefixes}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Numbered Prefixes\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 prefixes\:numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 default prefix}}}{\v\f4\fs20 \par }{\f4\fs20 ProDOS supported eight numbered prefixes, from 0 to 7.  Each of these prefixes was limited to 64 characters, and all but prefix 7 had preassigned uses, either for ProDOS itself or for the ORCA system.\par GS/OS still supports prefixes 0 to 7 for backward compatibility, but these prefixes have all been superseded by longer prefixes, numbered 8 to 31.  GS/OS does not support use of both the prefixes from 0 to 7 and the prefixes from 8 to 31 in the same application.\par The following table shows the old prefix numbers, as well as the new prefix number, and the standard use for the prefix.\par \par }\pard \qj\li1080\widctlpar\tx2160\tx3240\adjustright {\f4\fs20\ul Old Prefix}{\f4\fs20 \tab }{\f4\fs20\ul New Prefix}{\f4\fs20 \tab }{\f4\fs20\ul Use}{\f4\fs20 \par 0\tab 8\tab Default prefix.\par 1\tab 9\tab Program prefix; set to programs location when executed.\par 2\tab 13\tab Library prefix.\par 3\tab 14\tab Work prefix.\par 4\tab 15\tab Shell prefix (formerly called the ORCA system prefix).\par 5\tab 16\tab Languages prefix.\par 6\tab 17\tab Utilities prefix.\par 7\tab 18\tab No prespecified use.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par When you are using the ORCA shell, prefixes 0 to 7 will be set to null.  If you attempt to use one of these prefixes, the shell automatically maps the prefix into the new GS/OS prefix, leaving the old ProDOS prefix set to null.\par When a program is executed by the shell (or any other GS/OS program launcher), it examines the auxiliary file type to determine if the program is GS/OS aware.  If so, the prefixes are left exactly as they were in the shell.  If not, the new prefixes are mapped back into the old ProDOS prefixes before the program is executed, then mapped back when the program returns control to the shell.  If any of the new prefixes are too long to map into the shorter ProDOS prefixes, the shell flags an error and refuses to execute the program.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Shell}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Shell\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 Command Line Length}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Command Line Length\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 command line\:length}}}{\v\f4\fs20 \par }{\f4\fs20 The shell no longer limits the expanded length of a command line to 255 characters.  Instead, a command line can expand to 64K characters.  File name expansion, which severely limited the number of files that could be linked with the old limit of 255 characters on a line, can also utilize the full 64K characters, allowing you to link virtually any number of files.\par In script files, it is possible to use the \\ character to concatenate lines, building up a long line from a series of shorter ones in the editor.\par The command line editor is still limited to 255 characters, but shell variables can be used to build up a longer line.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Shell Variable Length}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Shell Variable Length\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell variables}}}{\v\f4\fs20 \par }{\f4\fs20 Shell variable values can be up to 64K characters, as opposed to the old limit of 255 characters.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 New .PRINTER Driver}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New .PRINTER Driver\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printer driver}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 printers}}}{\v\f4\fs20 \par }{\f4\fs20 The built-in .PRINTER driver from the old shell has been removed, and replaced with a new GS/OS driver, also called .PRINTER.  From the shell, this means that you use the printer in I/O redirection exactly as you always did, but the new driver means you can also use the text printer from outside the shell.\par The old shell variables used to configure the shell's built-in printer driver are no longer used.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 New .NULL Driver}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New .NULL Driver\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 null driver}}}{\v\f4\fs20 \par }{\f4\fs20 The shell has another new driver, called .NULL.  This driver accepts characters and does nothing with them.  It's a lot more useful than it sounds!  This driver is generally used in scripts, where you can redirect unwanted output to .NULL so it won't show up on the console.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Shell Prefix}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Shell Prefix\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shell prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 system prefix}}}{\v\f4\fs20 \par }{\f4\fs20 The old ORCA system prefix (prefix number 4, now 15) has been renamed to shell to avoid confusion with the GS/OS system prefix.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 Larger Default Stack}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Larger Default Stack\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 stack size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 direct page}}}{\v\f4\fs20 \par }{\f4\fs20 The default stack size for a program launched by ProDOS or the ORCA 1.1 shell was 1K.  The default stack size for a program launched by GS/OS or the ORCA 2.0 shell is 4K.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 New Shell Variables}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New Shell Variables\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The shell supports several new shell variables to control various defaults.\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f4\fs20\ul Shell Variable}{\f4\fs20 \tab }{\f4\fs20\ul Use\par }{\f4\fs20 Prompt\tab Replace the shell's # prompt with your custom prompt.\par Insert\tab The shell's line editor defaults to over strike mode; this variable can be used to force the shell to start in over strike mode.\par Separator\tab Used to change the default output separator from : to / (or some other value).\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4 New Command Line Editor}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New Command Line Editor\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The command line editor uses the standard Apple cursors for insert and over strike mode, and supports several new features, including word tab right, word tab left, forward delete, and undo.\par \par }\pard \qj\widctlpar\adjustright {\b\f4 New or Changed Commands}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 New or Changed Commands\tcl3}}}{\b\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The table below summarizes additions and changes to the shell commands.  New commands are flagged with an asterisk.\par \par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {\f4\fs20\ul Command}{\f4\fs20 \tab }{\f4\fs20\ul Changes}{\f4\fs20 \par CATALOG\tab Supports the invisible bit.\par \tab Shows extended files.\par \tab Many new flags control output and provide more information.\par \tab Supports any valid GS/OS FST.\par CHANGE\tab -P flag can be used to suppress progress information.\par COPY\tab Copies files with resource forks.\par \tab Can copy only the resource fork, or only the data fork.\par CRUNCH\tab Supports OMF 2.0.\par \tab A new flag lets you suppress progress information.\par DELETE\tab Can delete a directory and its contents.\par \tab -P flag can be used to suppress progress information.\par \tab -W flag can be used to suppress file not found warnings.\par DEVICES}{\f4\fs18\up6 *}{\f4\fs20 \tab Lists GS/OS devices.\par \tab A variety of flags control the format and extend of the output.\par DISABLE\tab Supports the invisible bit.\par \tab -P flag can be used to suppress progress information.\par DUMPOBJ\tab Supports OMF 2.0.\par ECHO\tab A new flag allows you to suppress a carriage return.\par \tab A new flag allows you to suppress expansion of tabs.\par EDIT\tab Accepts multiple input names.\par ENABLE\tab Supports the invisible bit.\par \tab -P flag can be used to suppress progress information.\par ENTAB}{\f4\fs18\up6 *}{\f4\fs20 \tab Replaces runs of spaces with tab characters.\par ERASE}{\f4\fs18\up6 *}{\f4\fs20 \tab Erase a disk.\par EXISTS}{\f4\fs18\up6 *}{\f4\fs20 \tab See if a file exists.\par FILETYPE\tab Allows you to change the auxiliary file type.\par \tab -P flag can be used to suppress progress information.\par HELP\tab Supports tabs in help files.\par HOME}{\f4\fs18\up6 *}{\f4\fs20 \tab Clear the screen and home the cursor.\par INIT\tab Supports multiple FSTs.\par INPUT}{\f4\fs18\up6 *}{\f4\fs20 \tab Read a response from the user.\par LINKER}{\f4\fs18\up6 *}{\f4\fs20 \tab New linker script language.\par MACGEN\tab Supports tabs.\par \tab A new flag lets you suppress progress information.\par MAKEBIN\tab Supports OMF 2.0.\par \tab A new flag lets you suppress progress information.\par MAKELIB\tab Supports OMF 2.0.\par \tab A new flag lets you suppress progress information.\par MOVE\tab Moves extended files.\par NEWER}{\f4\fs18\up6 *}{\f4\fs20 \tab Checks to see if a file is newer than a list of files.\par PREFIX\tab -C flag allows you to set a prefix that is not online.\par SET\tab Allows shell variable values up to 64K in length.\par SHOW\tab Lists the boot prefix (*) and the network area prefix (@).\par \tab Supports prefixes up to number 31.\par \tab Times are now formatted in accordance with control panel settings.\par SHUTDOWN}{\f4\fs18\up6 *}{\f4\fs20 \tab Ejects disks and shuts down the computer.\par SWITCH\tab -P flag can be used to suppress progress information.\par TOUCH}{\f4\fs18\up6 *}{\f4\fs20 \tab Set modification date to current date.\par TYPE\tab Expands tabs for correctly formatted screen output.\par \tab Supports SYSTABS file for tab expansion.\par \tab Tab expansion can be suppressed.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs28 Editor}{\pard\plain \qj\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Editor\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par The editor supports files up to the length of available memory.\par Lines are no longer limited to 255 characters.  When a line exceeds 255 characters, the line is wrapped using a soft carriage return.  This works just like most text processors.\par Tabs are now supported.\par The editor can edit up to ten files at one time.\par A new flag in the SYSTABS file lets you enter the editor in insert mode by default.\par All time-consuming commands can now be canceled with the }{\outl\f4\fs18 \u-3\'f0}{\f4\fs20 . command.\par Mouse support has been added (although you can still use all commands from the keyboard).\par Search and Search/Replace have been updated.  They now support searching for whole words, special whitespace modes that make searching for strings with tabs easier, and case sensitive searches.  Internal enhancements have increased the speed of these commands, too.\par You can display hidden characters, like tabs and end of line marks.\par The standard Apple cursors for insert and over strike modes are now used.\par A new command allows blocks of text to be shifted right and left.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 ASM65816}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 ASM65816\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The KIND directive now supports the 16 bit segment kinds of OMF 2.0.\par Object files use OMF 2.0, reducing the amount of disk space required for OBJ files.\par The assembler supports tabs, using the appropriate tab line from the SYSTABS file.\par The -P flag allows you to suppress the progress information normally printed by the assembler.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 LINKER}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 LINKER\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 The linker supports a limited scripting mode.\par The -P flag can be used to suppress progress information.\par The \{AuxType\} shell variable can be used to set the auxiliary file type of the executable file.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Rez Compiler}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Rez Compiler\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 resources}}}{\v\f4\fs20 \par }{\f4\fs20 Apple's Rez resource compiler is now a standard part of the ORCA/M package.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 GSBug}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 GSBug\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 debuggers}}}{\v\f4\fs20 \par }{\f4\fs20 Apple's GSBug debugger now ships as a standard part of ORCA/M.\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 New Utilities}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 New Utilities\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }{\v\f4\fs20 .0;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OMF 1.0}}}{\v\f4\fs20 .0;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 OMF 2.0}}}{\v\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 Several new utilities have been imported from Apple's "Tools and Interfaces for APW," including COMPACT, DEREZ, DISKCHECK, EXPRESS and RESEQUAL.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Macros}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Macros\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 A complete new set of tool macros are available for the tools.  These macros let you type tool parameters on the same line as the macro, rather than pushing parameters before the macro call.  For example, drawing a box is a mere 5 lines:\par \par }\pard \qj\li360\widctlpar\tx1080\adjustright {\f6\fs18 \tab MoveTo #10,#10\par \tab LineTo #100,#10\par \tab LineTo #100,#100\par \tab LineTo #10,#100\par \tab LineTo #10,#10\par }\pard \qj\fi360\widctlpar\adjustright {\f4\fs20 \par There are also several new macros, including: a set of macros for high-level language style parameter passing and recursion (SUB, CSUB, LSUB, CLSUB, RET and LRET), a more efficient move macro for four byte values (MOVE4), improved stack push macros (PH2 and PH4), and macros for creating GS/OS strings (DOSIN and DOSOUT).\par \par }\pard \qj\widctlpar\adjustright {\sect }\sectd \sbkodd\headery1872\footery1872\cols2\titlepg\sectdefaultcl \pard\plain \widctlpar\adjustright \f12\cgrid {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 Index\tcl1}}}{\v\f4\fs20 \par }\pard \ri720\widctlpar\adjustright {\b\f4\fs20 Special Characters\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX \\r  }}{\fldrslt {\f4\fs20 & character 26\par &SYSCNT symbolic parameter 67, }{\b\f4\fs20 341}{\f4\fs20 \par &SYSDATE symbolic parameter }{\b\f4\fs20 342}{\f4\fs20 \par &SYSNAME symbolic parameter }{\b\f4\fs20 342}{\f4\fs20 \par &SYSOPR symbolic parameter }{\b\f4\fs20 342}{\f4\fs20 \par &SYSTIME symbolic parameter }{\b\f4\fs20 342}{\f4\fs20 \par \{0\} shell variable 78, 81, 82, 83, }{\b\f4\fs20 104}{\f4\fs20 \par \{1\}, \{2\}, ... shell variables 81, 82, 83, }{\b\f4\fs20 104}{\f4\fs20 \par \{AuxType\} shell variable }{\b\f4\fs20 104}{\f4\fs20 , 142, 187\par \{CaseSensitive\} shell variable }{\b\f4\fs20 104}{\f4\fs20 \par \{Command\} shell variable 81, 82, 83, }{\b\f4\fs20 104}{\f4\fs20 \par \{Echo\} shell variable }{\b\f4\fs20 104}{\f4\fs20 \par \{Exit\} shell variable 81-83, 86, }{\b\f4\fs20 104}{\f4\fs20 , 149, 153, 395\par \{Insert\} shell variable }{\b\f4\fs20 104}{\f4\fs20 \par \{KeepName\} shell variable }{\b\f4\fs20 105}{\f4\fs20 , 118, 184, 187, 302, 411, 435, 483\par \{KeepType\} shell variable }{\b\f4\fs20 105}{\f4\fs20 , 142, 187\par \{Libraries\} shell variable }{\b\f4\fs20 105}{\f4\fs20 , 184\par \{LinkName\} shell variable }{\b\f4\fs20 105}{\f4\fs20 , 148, 187\par \{Parameters\} shell variable 81, 82, 83, }{\b\f4\fs20 105}{\f4\fs20 \par \{Prompt\} shell variable }{\b\f4\fs20 105}{\f4\fs20 \par \{Separator\} shell variable }{\b\f4\fs20 106}{\f4\fs20 \par \{Status\} shell variable 81, 82, 83, 86, }{\b\f4\fs20 106}{\f4\fs20 , 141, 149, 153\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 Numbers\par }{\f4\fs20 \par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 6502\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 cpu xxv, 50, 309, 321, 334\par writing code for 325, 334\par writing programs for 50, 150\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 65802\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 cpu xxv\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 65816\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 cpu xxiv, xxv, 48, 50, 190, 309, 321, 329, 344\par directive 51, 304, }{\b\f4\fs20 334}{\f4\fs20 , 344, 475, 478\par instruction set 23, 56, 308, 332, 334, 337, 355, 442, 478\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 658881 card 324\par 65C02\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 cpu xxv, 50, 321, 334\par directive 51, 304, }{\b\f4\fs20 334}{\f4\fs20 , 344, 475, 478\par instruction set 478\par writing code for 325, 334\par writing programs for 50, 150\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\b\f4\fs20 A}{\f4\fs20 \par \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 ABORT command 9, 41, 117, 304, 438\par ABSADDR directive 303, }{\b\f4\fs20 318}{\f4\fs20 , 344, 478\par absolute addressing 309, 310, 325, 331, 353, 359\par ABSx macro }{\b\f4\fs20 363}{\f4\fs20 \par ACTR directive }{\b\f4\fs20 346}{\f4\fs20 , 472\par ADD4 macro 53, 57\par Address not in current bank error 190\par addresses }{\b\f4\fs20 322}{\f4\fs20 \par addressing modes 50, 309, 359\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 473, 481\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 ADDx macro }{\b\f4\fs20 364}{\f4\fs20 \par AGO directive 65, }{\b\f4\fs20 347}{\f4\fs20 , 472, 475, 477, 482\par AIF directive 65, 66, 343, 345, 346, }{\b\f4\fs20 348}{\f4\fs20 , 352, 472, 475, 477, 482\par AINPUT directive 107, }{\b\f4\fs20 348}{\f4\fs20 , 477, 479\par ALIAS command }{\b\f4\fs20 115}{\f4\fs20 , 502\par aliasing 90, 112, 120, 137, 140, 160\par ALIGN directive }{\b\f4\fs20 318}{\f4\fs20 , 345, 475, 476, 480\par alphabetizing directories 125\par ALTCH macro }{\b\f4\fs20 373}{\f4\fs20 , 380\par AMID directive 64, }{\b\f4\fs20 349}{\f4\fs20 , 477\par ANOP directive 23, 28, }{\b\f4\fs20 319}{\f4\fs20 , 357, 406, 413\par APPEND directive 45, 116, 150, 299, }{\b\f4\fs20 319}{\f4\fs20 , 337, 347, 351, 475\par appending to the end of a file 40, }{\b\f4\fs20 107}{\f4\fs20 , 425\par Apple Computer, Inc. xxiv\par Apple IIGS computer xxv\par AppleShare 146\par AppleSoft 150, 323, 328\par APW 70, 73, 487\par APW C 124\par APW macros 56, 357\par ASCII 30, 47, 102, 104, 134, 154, 318, 323, 330, 355, 360, 373-375, 377, 380, 384, 398, 421, 423, 427, 439, 440, 447-450, 487, 490\par ASEARCH directive 64, }{\b\f4\fs20 349}{\f4\fs20 , 477\par ASL2 macro }{\b\f4\fs20 441}{\f4\fs20 \par ASM6502 language 96\par ASM65816\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 command 1\par language 9, 81, 96\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 ASM65816 command }{\b\f4\fs20 116}{\f4\fs20 \par ASML command 41, 42, 87, 101, 105, }{\b\f4\fs20 116}{\f4\fs20 , 119, 148, 156, 184, 185, 299, 300, 305, 306, 412, 433\par ASMLG command 41, 43, 105, 116, 148, 156, 184, 299, 300, 330\par ASSEMBLE command 11, 41, 86, 116, 152, 191, 299, 300, 412\par assembler 112\par assembler directives 23, 45-51, 303, }{\b\f4\fs20 317}{\f4\fs20 -}{\b\f4\fs20 334}{\f4\fs20 \par assembler listing 41, 46, 117, 301, 304, }{\b\f4\fs20 305}{\f4\fs20 , 326, 329, 334\par assembler variables 26, 28\par assembling a program 3, 40, 90, 116, }{\b\f4\fs20 119}{\f4\fs20 , 123, }{\b\f4\fs20 125}{\f4\fs20 , }{\b\f4\fs20 299}{\f4\fs20 -}{\b\f4\fs20 306}{\f4\fs20 \par assembly language\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 macros 24\par statements 23\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 attributes 65-67\par AUX field 487\par auxiliary file type 104, 122, 142\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 B}{\f4\fs20 \par \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 back up xxiii\par bank boundary 48, 190, 481\par bank relative programs 147, 186\par BELL macro }{\b\f4\fs20 374}{\f4\fs20 \par BGE instruction 308\par BGT macro }{\b\f4\fs20 442}{\f4\fs20 \par BIN files 48, 150\par binary constant 313, 476\par binary data }{\b\f4\fs20 323}{\f4\fs20 \par bit shifting 312, 457, 458, 481, 482, 492, 493\par BLE macro }{\b\f4\fs20 442}{\f4\fs20 \par BLOAD command 150\par block boundary 488\par blocks 121, 122\par BLT instruction 308\par BMI macro 443\par boot prefix 38, 97, 98\par booting ORCA xxiii\par branching\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 65, 66, 365, 442, 445, 452, 476\par conditional assembly 472\par conditional assembly language 477, 482\par EXEC files 86, 103\par object module format 496\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 BREAK command 86, }{\b\f4\fs20 119}{\f4\fs20 , 149\par BRUN command 150\par BUTTON macro }{\b\f4\fs20 443}{\f4\fs20 \par byte order 29, 330, 490, 493\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 C\par }{\f4\fs20 \par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 C 97, 469, 501\par CASE directive 47, 303, }{\b\f4\fs20 319}{\f4\fs20 , 344, 478\par case sensitivity 174\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 24, 47, 319, 330\par linker 330\par shell 35, 86, 103, 104, 106\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 CAT command (See CATALOG command)\par CATALOG command 8, 10, 11, 96, 107, 112, }{\b\f4\fs20 120}{\f4\fs20 , 125, 132, 142, 158\par CDA 75\par CDevs 75\par CHANGE command 9, 81, }{\b\f4\fs20 123}{\f4\fs20 , 138\par ChangeVector shell call }{\b\f4\fs20 388}{\f4\fs20 \par character constant 315\par character data }{\b\f4\fs20 323}{\f4\fs20 \par Classic Desk Accessory 75\par CLEOL macro }{\b\f4\fs20 374}{\f4\fs20 \par CLEOS macro }{\b\f4\fs20 375}{\f4\fs20 \par CLSUB macro 443, }{\b\f4\fs20 469}{\f4\fs20 \par CMPL command 41, 101, 116, }{\b\f4\fs20 123}{\f4\fs20 , 148, 184, 299, 300\par CMPLG command 41, 101, 116, }{\b\f4\fs20 123}{\f4\fs20 , 148, 184, 299, 300, 411\par CMPx macro }{\b\f4\fs20 365}{\f4\fs20 \par CNVxy macros }{\b\f4\fs20 444}{\f4\fs20 \par code segment 26, 30, 31, 42, 45, 59, 67, 118, 152, 189, 190, 300, 304, 328, 332, 333, 342, 473, 475, 487\par CODECHK directive 50, 303, }{\b\f4\fs20 319}{\f4\fs20 , 344, 478\par command line 40, 70, 77, 96, 102-105, 107, 140, 156, 183, 306, 391, 483\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 length 508\par prompt 105\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 command list 10, 144\par command numbers 406\par command table 7, 39, 72, 89, }{\b\f4\fs20 112}{\f4\fs20 , 124, 144, 405\par commands (See shell commands)\par COMMANDS command 72, 94, 112, }{\b\f4\fs20 124}{\f4\fs20 \par COMMENT command 10, 107, }{\b\f4\fs20 160}{\f4\fs20 \par comments 26\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 46\par assembly language 25, 307, 315, 333, 474\par EXEC files 107\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 COMPACT command }{\b\f4\fs20 124}{\f4\fs20 \par compaction 147, 186\par COMPILE command 41, 101, 116, 125, 299, 300, 411\par compiler\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 installing new 72\par }\pard\plain \s26\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 writing new 73, 400\par }\pard \s26\widctlpar\adjustright {\f4\fs20 COMPRESS command }{\b\f4\fs20 125}{\f4\fs20 , 158\par conditional assembly 26, 65, 353\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 branching 347, 348\par looping 346\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 console driver 390\par ConsoleOut shell call 388, }{\b\f4\fs20 390}{\f4\fs20 \par constants 27, 45, 309, 312, 320, 325-327, 449, 474, 478, 482, 494\par CONTINUE command }{\b\f4\fs20 125}{\f4\fs20 \par control panel devices 75\par COPY command 11, 79, 85, 86, 101, }{\b\f4\fs20 126}{\f4\fs20 \par COPY directive 45, 150, 299, 303, }{\b\f4\fs20 319}{\f4\fs20 , 337, 347, 351, 475\par COUNT attribute 65, }{\b\f4\fs20 343}{\f4\fs20 , 478, 495\par COUT macro }{\b\f4\fs20 376}{\f4\fs20 \par CPA instruction 308\par CPM 146\par CPU cycles 328\par CREATE command }{\b\f4\fs20 128}{\f4\fs20 \par creation time 122\par cross assembler 332\par CRUNCH utility 86, 96, 99, }{\b\f4\fs20 128}{\f4\fs20 \par CSUB macro 445, }{\b\f4\fs20 469}{\f4\fs20 \par current prefix 98, 120, 125\par cursor positioning 379, 380, 390\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 D}{\f4\fs20 \par \par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 data 28, 320, 325\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 character 29, 30\par hexadecimal 29\par integer 29\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 DATA directive 23, 25, 31, 48, 118, 190, 303, 304, 318, }{\b\f4\fs20 320}{\f4\fs20 , 328, 331, 332, 474, 481\par data fork 126, 226\par data segment 31, 48, 320, 334, 473, 481, 483, 487, 494, 496\par DATACHK directive 50, 303, }{\b\f4\fs20 320}{\f4\fs20 , 344, 478\par date 122\par DBcn macros }{\b\f4\fs20 445}{\f4\fs20 \par DC directive 23, 28, 30, 46, 47, 66, }{\b\f4\fs20 320}{\f4\fs20 , 326-328, 330, 342, 344, 345, 357, 413, 422, 426, 428, 430, 431, 436, 437, 439, 468\par }\pard\plain \s25\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 debugger (see GSBug)\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 DEC2 macro }{\b\f4\fs20 446}{\f4\fs20 \par DEC4 macro }{\b\f4\fs20 446}{\f4\fs20 \par decimal constant 314\par decimal data 476\par default prefix 508\par DELETE command 101, 125, }{\b\f4\fs20 128}{\f4\fs20 \par DeRez 195-197, 200, 201, 204, 207, 214, 216, 220, 226\par DEREZ command }{\b\f4\fs20 129}{\f4\fs20 \par desktop programming 388\par desktop programs 69\par DETAB 160\par device names 37, }{\b\f4\fs20 100}{\f4\fs20 , 126, 157, 396, 414\par device numbers 100, 407, 429\par devices 37, 40, 131, 157, 360, 373, 374, 375, 376, 377, 380, 382, 384, 407\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 .CONSOLE 40, 100, 107, 407, 426, 429\par .NULL 111\par .PRINTER 40, 100, 107, 108, 306, 426\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 DEVICES command }{\b\f4\fs20 131}{\f4\fs20 \par DIRECT directive 303, }{\b\f4\fs20 325}{\f4\fs20 , 473, 475\par direct page 28, 31, 305, 309, 310, 325, 327, 461, 472, 474, 480, 495, 509\par Direction shell call }{\b\f4\fs20 391}{\f4\fs20 \par directives (See assembler directives)\par directory walking 36, }{\b\f4\fs20 100}{\f4\fs20 , 396, 414\par DISABLE command 11, }{\b\f4\fs20 131}{\f4\fs20 , 138\par disassembler 121\par disassembly 133, 137\par disk caching 400\par disk copying 126\par disk size 121\par DISKCHECK command }{\b\f4\fs20 132}{\f4\fs20 \par displaying files (See the TYPE command)\par DIV4 macro 53\par DIVx macro }{\b\f4\fs20 366}{\f4\fs20 \par DOS 125, 158\par DOS (Apple) 146\par DOSIN macro }{\b\f4\fs20 447}{\f4\fs20 \par DOSOUT macro }{\b\f4\fs20 448}{\f4\fs20 \par drivers 330\par DS directive 23, 30, 55, }{\b\f4\fs20 325}{\f4\fs20 , 331, 345, 406, 413, 422, 426, 436, 438, 439, 440\par DSTR macro 377, 382, }{\b\f4\fs20 449}{\f4\fs20 \par DUMPBOJ utility }{\b\f4\fs20 137}{\f4\fs20 \par DUMPOBJ command 101\par DUMPOBJ utility 115, }{\b\f4\fs20 133}{\f4\fs20 \par duplicate label 67, 320\par DW macro 66, 344, }{\b\f4\fs20 450}{\f4\fs20 \par dynamic segments 325, 482, 489, 490, 496\par DYNCHK directive }{\b\f4\fs20 325}{\f4\fs20 , 344, 475, 478\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 E}{\f4\fs20 \par \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 ECHO command 80, 119, }{\b\f4\fs20 137}{\f4\fs20 , 144\par EDIT command 2, 11, 13, 81, 98, }{\b\f4\fs20 138}{\f4\fs20 , 415, 502\par editor 2, 13-21, 90, 112, 161-181, 301, 304, 408, 412, 433, 435, 478, 487\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 about command }{\b\f4\fs20 167}{\f4\fs20 \par arrow keys 2, 14, 164\par auto-indent mode }{\b\f4\fs20 162}{\f4\fs20 , 172, 180\par beep the speaker command }{\b\f4\fs20 167}{\f4\fs20 \par beginning of line command }{\b\f4\fs20 168}{\f4\fs20 \par bottom of page command 15\par bottom of screen command 162, }{\b\f4\fs20 168}{\f4\fs20 \par buttons 166\par check boxes 166\par close command }{\b\f4\fs20 168}{\f4\fs20 \par continue searching macro 17\par control underscore key }{\b\f4\fs20 162}{\f4\fs20 \par copy command 20, }{\b\f4\fs20 168}{\f4\fs20 \par create macros command 164\par cursor down command 162, }{\b\f4\fs20 168}{\f4\fs20 \par cursor left command 163, }{\b\f4\fs20 168}{\f4\fs20 \par cursor movement 2, 14-16\par cursor right command 163, }{\b\f4\fs20 168}{\f4\fs20 \par cursor up command 162, }{\b\f4\fs20 168}{\f4\fs20 \par customizing }{\b\f4\fs20 179}{\f4\fs20 \par cut command 20, }{\b\f4\fs20 169}{\f4\fs20 \par define macros command }{\b\f4\fs20 169}{\f4\fs20 \par delete character command }{\b\f4\fs20 169}{\f4\fs20 , 179\par delete character left command }{\b\f4\fs20 169}{\f4\fs20 , 179\par delete command 21, }{\b\f4\fs20 169}{\f4\fs20 \par delete current character command 16\par DELETE key 2, 16\par delete line command 16, }{\b\f4\fs20 169}{\f4\fs20 , 179\par delete to end of line command 16, }{\b\f4\fs20 169}{\f4\fs20 , 179\par delete word command }{\b\f4\fs20 170}{\f4\fs20 , 179\par deleting characters in macros 164\par dialogs 165\par editline controls 165\par editline items 165\par end macro definition command 164\par end of line command 15, }{\b\f4\fs20 170}{\f4\fs20 \par ESCAPE key 20, 163\par escape mode 15, }{\b\f4\fs20 162}{\f4\fs20 \par executing macros }{\b\f4\fs20 165}{\f4\fs20 \par exit macro creation command 165\par help command 13, }{\b\f4\fs20 170}{\f4\fs20 \par hidden characters 163\par insert blank lines command 17, 162, }{\b\f4\fs20 170}{\f4\fs20 \par insert mode 17, }{\b\f4\fs20 161}{\f4\fs20 \par insert one space command 17, }{\b\f4\fs20 170}{\f4\fs20 \par installing new 72\par line length }{\b\f4\fs20 161}{\f4\fs20 \par list controls 166\par macro keystrokes }{\b\f4\fs20 164}{\f4\fs20 \par macros }{\b\f4\fs20 164}{\f4\fs20 \par modes 179\par mouse 167\par moving through a file 15, }{\b\f4\fs20 173}{\f4\fs20 \par multiple files 171, 176, 177\par new command }{\b\f4\fs20 170}{\f4\fs20 \par open Apple key 162\par open command }{\b\f4\fs20 171}{\f4\fs20 \par over strike mode }{\b\f4\fs20 161}{\f4\fs20 , 180\par paste command 20, 168, }{\b\f4\fs20 172}{\f4\fs20 \par quit command 3, 21, }{\b\f4\fs20 172}{\f4\fs20 \par remove blanks command 17, }{\b\f4\fs20 172}{\f4\fs20 \par repeat counts 15, 16, 17, }{\b\f4\fs20 162}{\f4\fs20 , }{\b\f4\fs20 172}{\f4\fs20 \par RETURN key 2, 14, 20, 163, }{\b\f4\fs20 172}{\f4\fs20 \par save as command }{\b\f4\fs20 173}{\f4\fs20 \par save command 3, }{\b\f4\fs20 173}{\f4\fs20 \par screen move commands 162\par scroll down one line command }{\b\f4\fs20 174}{\f4\fs20 \par scroll down one page command 15, }{\b\f4\fs20 174}{\f4\fs20 \par scroll up one line }{\b\f4\fs20 174}{\f4\fs20 \par scroll up one page command 15, }{\b\f4\fs20 174}{\f4\fs20 \par scrolling 15\par search and replace down command 19, }{\b\f4\fs20 175}{\f4\fs20 \par search and replace up command 19, }{\b\f4\fs20 176}{\f4\fs20 \par search down command 17, }{\b\f4\fs20 174}{\f4\fs20 \par search up command }{\b\f4\fs20 175}{\f4\fs20 \par select file command }{\b\f4\fs20 176}{\f4\fs20 \par select mode 180\par }\pard\plain \s24\li720\widctlpar\adjustright \f12\cgrid {\f4\fs20 by character }{\b\f4\fs20 162}{\f4\fs20 , 163, 172\par by line 20, }{\b\f4\fs20 162}{\f4\fs20 \par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 set/clear auto-indent mode command }{\b\f4\fs20 178}{\f4\fs20 \par set/clear escape mode command }{\b\f4\fs20 178}{\f4\fs20 \par set/clear insert mode command }{\b\f4\fs20 178}{\f4\fs20 \par set/clear select mode command }{\b\f4\fs20 178}{\f4\fs20 \par set/clear tab stops command }{\b\f4\fs20 177}{\f4\fs20 \par setting defaults }{\b\f4\fs20 179}{\f4\fs20 \par shift left command }{\b\f4\fs20 177}{\f4\fs20 \par shift right command }{\b\f4\fs20 177}{\f4\fs20 \par start of line command 15, 162\par status banner 2, 14, 117\par switch files command }{\b\f4\fs20 177}{\f4\fs20 \par tab command 163, }{\b\f4\fs20 178}{\f4\fs20 \par TAB key 2, 14\par tab left command 163, }{\b\f4\fs20 178}{\f4\fs20 \par tab mode 180\par tabs 163, 166\par top of page command 15\par top of screen command 162, }{\b\f4\fs20 179}{\f4\fs20 \par undo command 169\par undo delete buffer 169, 179\par undo delete command }{\b\f4\fs20 179}{\f4\fs20 \par version }{\b\f4\fs20 167}{\f4\fs20 \par word left command 163, }{\b\f4\fs20 179}{\f4\fs20 \par word right command 163, }{\b\f4\fs20 179}{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 EDITOR file 99\par EJECT directive 46, 47, }{\b\f4\fs20 326}{\f4\fs20 , 475\par ELSE clause of IF command 86, 87, }{\b\f4\fs20 138}{\f4\fs20 , 145\par ELSE IF clause of IF command 86, 145, 149\par emulation mode 136\par ENABLE command 11, 132, }{\b\f4\fs20 138}{\f4\fs20 , 142\par END command 84, 85, 86, 87, 119, 125, }{\b\f4\fs20 139}{\f4\fs20 , 144, 145, 149\par END directive 23, 26, 31, 62, 117, 301, 304, }{\b\f4\fs20 326}{\f4\fs20 , 336, 479\par ENTAB utility }{\b\f4\fs20 139}{\f4\fs20 \par ENTRY directive 23, 31, }{\b\f4\fs20 326}{\f4\fs20 , 332, 474\par EOF 122\par EQU directive 23, 27-28, 45, 309, 312, }{\b\f4\fs20 326}{\f4\fs20 , 345, 472, 473, 474\par ERASE command }{\b\f4\fs20 139}{\f4\fs20 \par ERR directive 46, 47, 303, }{\b\f4\fs20 327}{\f4\fs20 , 344, 475, 478\par }\pard \s26\widctlpar\adjustright {\f4\fs20 error levels 410, 433\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 50, 330, 353, 471\par linker 479\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 error output 40, 69, 97, 108, 373-376, 379-382, 384, 425, 430, 508\par }\pard \s26\widctlpar\adjustright {\f4\fs20 error reporting 410\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 46, 50, 116, 304, 305, 319, 320, 325, 327, 328, 330, 350, 353, 471\par linker 189, 479\par shell 70, 82, 85, 104, 106, 108, 141, 393, 395, 433\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 Error shell call }{\b\f4\fs20 393}{\f4\fs20 \par errors 301, 471\par EXEC command 81, }{\b\f4\fs20 140}{\f4\fs20 \par }\pard \s26\fi-180\li180\widctlpar\adjustright {\f4\fs20 EXEC files 70, 77, 80, 90, 97, }{\b\f4\fs20 102}{\f4\fs20 , 119, 125, 137, 140, 144, 149, 156, 301, 388, 394, 420, 423, 503\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 parameter passing 81-85, 103, 143, 157\par redirection 107\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 EXEC language 81, 102, 140\par executable files 35, 41-43, 51, 72, 96, 97, 105, 112, 183-185, 187, 304, 322, 331, 489, 497\par EXECUTE command 84, 104, 105, }{\b\f4\fs20 140}{\f4\fs20 , 157\par Execute shell call }{\b\f4\fs20 394}{\f4\fs20 \par executing a program 119, 123\par EXISTS command }{\b\f4\fs20 140}{\f4\fs20 \par EXIT command }{\b\f4\fs20 141}{\f4\fs20 \par EXPAND directive 46, 47, 303, }{\b\f4\fs20 327}{\f4\fs20 , 344, 475, 478\par ExpandDevices shell call }{\b\f4\fs20 396}{\f4\fs20 \par EXPORT command 83, 84, 104, }{\b\f4\fs20 141}{\f4\fs20 , 157\par Export shell call }{\b\f4\fs20 398}{\f4\fs20 \par EXPRESS command }{\b\f4\fs20 141}{\f4\fs20 \par expressed files 148, 186\par expressions\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler }{\b\f4\fs20 309}{\f4\fs20 -}{\b\f4\fs20 311}{\f4\fs20 , 321, 348, 461, 473, 474, 478, 481\par assembly language 25, 28\par conditional assembly language 353\par macros 63\par object module format 493, 494, 496\par shell 86, }{\b\f4\fs20 106}{\f4\fs20 , 145\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 ExpressLoad 141\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 extended files (see resources)\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 external labels 90, 184, 185, 304, 309, 474, 493\par }\pard \s26\widctlpar\adjustright {\f4\fs20 Eyes, David xxv\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 F}{\f4\fs20 \par \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 FastFile shell call }{\b\f4\fs20 400}{\f4\fs20 \par file access flags 122, 131, 138, 142\par file length 122\par file names 35, }{\b\f4\fs20 100}{\f4\fs20 , 121, 302, 507\par file not found error 1, 401\par file system translator 146\par file types 35, 102, 104, 105, 121, 142, 150, 151, 159, 183, 483, 484, 487, 497\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 auxtype (see auxiliary file type)\par SRC 102\par TXT 102\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 files 35\par FILETYPE command 73, }{\b\f4\fs20 142}{\f4\fs20 \par Finder 69, 73, 503\par Fischer, Michael xxv\par fixed address 331\par floating-point data }{\b\f4\fs20 323}{\f4\fs20 , 328, 330, 476\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 double precision }{\b\f4\fs20 324}{\f4\fs20 , 476\par extended precision }{\b\f4\fs20 324}{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 FOR command 84-87, 103, 119, 125, 139, }{\b\f4\fs20 143}{\f4\fs20 \par formatted I/O 382\par formatting disks }{\b\f4\fs20 139}{\f4\fs20 , }{\b\f4\fs20 145}{\f4\fs20 \par FST 146\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\b\f4\fs20 \par G\par \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 game paddles 443, 463\par GBLA directive 63, 66, 340, }{\b\f4\fs20 350}{\f4\fs20 \par GBLB directive 63, 340, }{\b\f4\fs20 350}{\f4\fs20 \par GBLC directive 63, 340, }{\b\f4\fs20 350}{\f4\fs20 \par GEN directive 61, 149, 303, 336, 344, }{\b\f4\fs20 350}{\f4\fs20 , 475, 478\par GEQU directive 23, 27, 31, 303, 309, 312, }{\b\f4\fs20 327}{\f4\fs20 , 332, 345, 472, 473, 474, 475\par GET4 macro 53\par GetCommand shell call }{\b\f4\fs20 405}{\f4\fs20 \par GetIODevices shell call }{\b\f4\fs20 407}{\f4\fs20 \par GetLang shell call }{\b\f4\fs20 408}{\f4\fs20 \par GetLInfo shell call 388, }{\b\f4\fs20 409}{\f4\fs20 , 432, 433\par GetLInfoGS macro 72\par GETx macro 40, }{\b\f4\fs20 377}{\f4\fs20 \par GOTOXY macro }{\b\f4\fs20 379}{\f4\fs20 \par GS/OS xxv, 106, 507\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 errors 471\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 GS/OS aware 99\par GS/OS input strings 447\par GS/OS macros 356\par GS/OS output strings 448\par GS/OS strings 386\par GSBug\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 altering memory 282\par breakpoints 252, 255, 259, 274, 275\par BRK 232\par command filters 251, 258\par command line 242, 279-291\par configuration file 232, 235, 286, 287\par debugging 243, 246, 250, 254, 266, 271\par direct page 259\par displaying memory 240, 242, 243, 272, 280\par expressions 285\par GS/OS calls 270\par hexadecimal 284\par installation 231\par master display 239\par memory display 240\par memory protection 251, 256, 276\par mini-assembler 268\par printing 243\par quitting 244\par registers 257, 259, 260, 261, 262, 263, 265\par segments 253\par selecting displays 237, 239\par stack 260, 265\par toolbox calls 270\par trace history 249, 252\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 GSBug Debugger 229-291\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 H\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX \\r  }}{\fldrslt {\f4\fs20 hard disks 501\par hard reference }{\b\f4\fs20 322}{\f4\fs20 , 494\par header files 503\par HELP command 7, 9, 40, 55, 96, 99, }{\b\f4\fs20 144}{\f4\fs20 , 503\par hexadecimal constant 314, 476\par hexadecimal data }{\b\f4\fs20 322}{\f4\fs20 \par hidden characters 163\par High Sierra 146\par HISTORY commands }{\b\f4\fs20 144}{\f4\fs20 \par HOME command }{\b\f4\fs20 145}{\f4\fs20 \par HOME macro }{\b\f4\fs20 380}{\f4\fs20 \par }\pard \s26\ri720\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 I}{\f4\fs20 \par \par }\pard \s26\fi-180\li180\widctlpar\adjustright {\f4\fs20 I/O redirection (See redirection), 508\par IBM 370 assembler 24\par IEEE directive 303, 323, }{\b\f4\fs20 328}{\f4\fs20 , 344, 475, 476, 478\par IF command 86, 87, 139, }{\b\f4\fs20 145}{\f4\fs20 , 149\par immediate addressing 309, 310, 329, 359\par IN clause of FOR command 143\par INC2 macro }{\b\f4\fs20 451}{\f4\fs20 \par INC4 macro }{\b\f4\fs20 451}{\f4\fs20 \par indexed addressing 310\par indirect addressing 359\par INIT command 12, }{\b\f4\fs20 145}{\f4\fs20 \par INIT utility 99\par Initialization Programs 75\par Inits 75\par InitWildcard shell call }{\b\f4\fs20 414}{\f4\fs20 \par INPUT command }{\b\f4\fs20 147}{\f4\fs20 \par installing ORCA/M 499\par INSTIME directive 303, }{\b\f4\fs20 328}{\f4\fs20 , 344, 478\par instruction set 50\par integer data }{\b\f4\fs20 321}{\f4\fs20 \par }\pard \s26\ri720\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 J\par }{\f4\fs20 \par }\pard \s26\widctlpar\adjustright {\f4\fs20 Jcn macros }{\b\f4\fs20 452}{\f4\fs20 \par jump table 496\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 K\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 KEEP directive 23, 24, 26, 105, 117, 184, 191, 302, 303, }{\b\f4\fs20 328}{\f4\fs20 , 336, 411, 435, 475, 479, 483\par keep name 187\par KEEP parameter 105, 117, 148, 152, 184, 191, 302, 411, 435, 483\par keyboard buffer 438\par KIND directive }{\b\f4\fs20 328}{\f4\fs20 , 475\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 L\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 LA macro }{\b\f4\fs20 453}{\f4\fs20 \par labels 24, 47, 65, 474, 478, 481-483, 490, 492, 496\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 global 30-31, 41, 43, 90, 117, 184-186, 189, 301, 304, 325-327, 332, 333\par local 27, 31, 304, 319, 325, 326, 333, 334, 472, 478, 496\par macros 54, 60, 61\par syntax }{\b\f4\fs20 308}{\f4\fs20 , 317\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 Labiak, William xxv\par language card 491\par language names 81, 107, 122, 140, 154, 157, 159\par language numbers }{\b\f4\fs20 96}{\f4\fs20 , 157, 179, 406, 408, 431\par language stamp 77, 80, 81, 96, 102, 116, 122, 123, 138, 140, 300\par Languages prefix 39, 97, 99, 112\par LCLA directive 62, 65, 66, 340, 343, 348, }{\b\f4\fs20 351}{\f4\fs20 \par LCLB directive 62, 340, }{\b\f4\fs20 351}{\f4\fs20 \par LCLC directive 62, 66, 340, 341, 346, }{\b\f4\fs20 351}{\f4\fs20 \par LENGTH attribute 66, }{\b\f4\fs20 344}{\f4\fs20 , 478, 494, 495\par libraries 42, 98, 105, 134, 148, 151, 152, 183-186, 301, 327, 361, 481, 501, 503, 505\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 creating }{\b\f4\fs20 191}{\f4\fs20 \par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 Libraries prefix 39, 43, 97, 98, 185, 191\par library files 35\par Lichty, Ron xxv\par line editor 9, 89, }{\b\f4\fs20 93}{\f4\fs20 -}{\b\f4\fs20 95}{\f4\fs20 , 388\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 clear-line command 94\par cursor-left command 94\par cursor-right command 94\par delete-character-left command 94\par delete-to-end-of-line command 94\par end-of-line command 94\par execute command 95\par insert mode 94\par start-of-line command 94\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 line length\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembly language 307\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 LINK command 11, 41, 42, 86, 102, 105, 119, }{\b\f4\fs20 147}{\f4\fs20 , 184, 192, 302, 412, 434\par link editor (See linker)\par link map 42, 117, 147, 186, 301\par linker 42, 90, 98, 105, 112, 118, 147, }{\b\f4\fs20 183}{\f4\fs20 -}{\b\f4\fs20 193}{\f4\fs20 , 304, 322, 331-333, 401, 434, 468, 474, 503\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 output }{\b\f4\fs20 188}{\f4\fs20 \par output name 187\par script files 148, 192\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 LINKER command }{\b\f4\fs20 148}{\f4\fs20 \par linking a program 42, 116, 119, 123, 184, 299, 318, 322\par Lisa 146\par LIST directive 46, 47, 117, 301, 303, 327, }{\b\f4\fs20 329}{\f4\fs20 , 336, 344, 475, 478\par LLA macro }{\b\f4\fs20 454}{\f4\fs20 \par LM macro }{\b\f4\fs20 455}{\f4\fs20 \par load files 147\par }\pard \s26\li360\widctlpar\adjustright {\f4\fs20 See also executable files\par }\pard \s26\fi-180\li180\widctlpar\adjustright {\f4\fs20 load module 185\par load segment 26, 48, 150, 184, 189, 190, 318, 320, 332, 333, 481, 491, 492, 493\par loader 43, 72, 90, 183, 189, 191, 325, 357\par Loader Dumper 291-298\par location counter 28, 312, 319, 326, 331, 480, 494, 495, 496\par locking files 131\par logical operators\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembly language 311\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 LOGIN file 39, 82, 84, 99, 116, 141, 154, 157, 502\par long addressing 28, 31, 191, 309, 310, 320, 327, 454, 472\par long command lines 102\par long indirect addressing 359\par LONG macro 50, }{\b\f4\fs20 456}{\f4\fs20 \par LONGA directive 50, 303, }{\b\f4\fs20 329}{\f4\fs20 , 344, 456, 467, 475, 478\par LONGI directive 50, 303, }{\b\f4\fs20 329}{\f4\fs20 , 344, 456, 467, 475, 478\par LOOP command 119, 125, 139, }{\b\f4\fs20 149}{\f4\fs20 \par LRET }{\b\f4\fs20 469}{\f4\fs20 \par LSR2 macro }{\b\f4\fs20 457}{\f4\fs20 \par LSUB macro 457, }{\b\f4\fs20 469}{\f4\fs20 \par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard\plain \s26\ri720\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\b\f4\fs20  INDEX  }}{\fldrslt {\b\f4\fs20 M\par }{\f4\fs20 \par }\pard \s26\fi-180\li180\widctlpar\adjustright {\f4\fs20 M16.GS.OS file 356\par M16.I.O file 373\par M16.SHELL file 385\par M16.TOOLS file 357\par MacGen utility 3, 55, 56, }{\b\f4\fs20 149}{\f4\fs20 , 355\par Macintosh 146\par macro buffer 335, 351, 352\par MACRO directive 59, 66, 335, 341, 343, 347, }{\b\f4\fs20 351}{\f4\fs20 , 472, 474, 478\par macro files 149\par macro model line 59, 62\par macros 505\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 calling 337, 339, 355, 472\par expansion 55, 61, 67, 299, 305, 332, 336, 341, 350, 352\par keyword parameters 57, }{\b\f4\fs20 339}{\f4\fs20 , 472, 477\par libraries 53, 56\par macro model statements 59\par model statements 337, 474\par naming 59\par nesting 475\par parameter passing 60, 66\par parameters 57, 59\par positional parameters 57, 472, 477\par using 53-57\par writing 59-67, }{\b\f4\fs20 335}{\f4\fs20 -}{\b\f4\fs20 346}{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 MAKEBIN utility }{\b\f4\fs20 150}{\f4\fs20 \par MAKELIB command 191\par MAKELIB utility 98, 99, }{\b\f4\fs20 151}{\f4\fs20 , 183\par MASL macro }{\b\f4\fs20 458}{\f4\fs20 \par MCOPY directive 55, 150, 299, 303, 335, 336, }{\b\f4\fs20 351}{\f4\fs20 , 355, 474, 475, 477, 478, 479\par MDROP directive 55, 303, }{\b\f4\fs20 352}{\f4\fs20 , 474, 475, 477\par MEM directive 303, }{\b\f4\fs20 329}{\f4\fs20 \par memory management 48, 51, 72, 318, 331, 361, 479, 494\par Memory Manager 69, 401, 415, 422, 428\par memory model 503\par MEND directive 59, 62, 66, 335, 337, 341, 343, 347, }{\b\f4\fs20 352}{\f4\fs20 , 472, 475, 478\par merging files 160\par MERR directive 50, 116, 303, }{\b\f4\fs20 330}{\f4\fs20 , 475\par MEXIT directive }{\b\f4\fs20 352}{\f4\fs20 , 478\par MLOAD directive 299, 303, 335, }{\b\f4\fs20 352}{\f4\fs20 , 474, 475, 477, 479\par MLSR macro }{\b\f4\fs20 458}{\f4\fs20 \par MNOTE directive 346, }{\b\f4\fs20 353}{\f4\fs20 \par modification date 153, 159\par modify time 122\par MODx macro }{\b\f4\fs20 367}{\f4\fs20 \par mouse 167\par MOVE command 11, 101, }{\b\f4\fs20 152}{\f4\fs20 , 191\par MOVE macro }{\b\f4\fs20 459}{\f4\fs20 , }{\b\f4\fs20 460}{\f4\fs20 \par MS/DOS 146\par MSB directive 30, 47, 303, 323, }{\b\f4\fs20 330}{\f4\fs20 , 344, 475, 478\par MUL4 macro 53\par multiple languages 3, 12\par MULx macro }{\b\f4\fs20 368}{\f4\fs20 \par }\pard \s26\ri720\widctlpar\adjustright {\b\f4\fs20 N\par }{\f4\fs20 \par }\pard \s26\fi-180\li180\widctlpar\adjustright {\f4\fs20 native mode 69, 136, 480\par NDA 75\par networks 98\par New Desk Accessory 75\par NEWER command }{\b\f4\fs20 153}{\f4\fs20 \par NextWildcard shell call }{\b\f4\fs20 417}{\f4\fs20 \par NORMCH macro }{\b\f4\fs20 380}{\f4\fs20 \par NOT operator 312\par null driver 509\par NUMSEX directive 303, 324, }{\b\f4\fs20 330}{\f4\fs20 , 344, 475, 478\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 O\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 OBJ directive }{\b\f4\fs20 330}{\f4\fs20 , 473\par OBJCASE directive 303, }{\b\f4\fs20 330}{\f4\fs20 , 344, 478\par object module format 3, 133, 135, 152, 484, 487, 490\par object modules 35, 41, 42, 90, 105, 117, 119, 125, 128, 147, 151, 183-186, 301, 322, 328, 333, 400, 401, 411, 435, 468, 475, 479, 484, 487\par object segment 42, 118, 137, 147, 186, 189, 301, 303, 304, 328, 480, 487, 491\par object types 50\par OBJEND directive }{\b\f4\fs20 331}{\f4\fs20 \par octal constant 314, 476\par OMF 124\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see also object module format\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 OMF 1.0 512\par OMF 2.0 512\par on-line help 73\par operands\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembly language 25, 28, 309\par macros 54, 57, 60\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 operation codes\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembly language 25, 299, 308, 332, 475\par macros 54, 335\par object module format 491, 497\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 ORCA disk 8, 10, 11\par ORCA macros 359\par ORCA string 360, 382\par ORCA system hierarchy 89\par ORCA.Extras disk 56, 355\par ORCA.Sys16 file 11, 501\par ORCA/C language 96\par ORCA/Pascal language 96\par ORG directive 51, 318, }{\b\f4\fs20 331}{\f4\fs20 , 345, 473, 475, 482\par output (See standard output, redirection)\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 P\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 page boundary 318, 328, 480\par partial assembly 41, 86, 117, 128, 185, 300, 302, 410, 412, 433, 473\par Pascal 97, 146, 469, 501\par Pascal protocol 70, 360\par Pascal strings 450\par path names 26, 36, 45, 79, 97, 102, 106, 118, 121, 396, 409, 414, 432, 479, 507\par PHx macros }{\b\f4\fs20 461}{\f4\fs20 \par pipes 90, 98, }{\b\f4\fs20 111}{\f4\fs20 , 502\par PLx macros }{\b\f4\fs20 462}{\f4\fs20 \par PopVariables shell call }{\b\f4\fs20 419}{\f4\fs20 \par PRBL macro }{\b\f4\fs20 381}{\f4\fs20 \par PREAD macro }{\b\f4\fs20 463}{\f4\fs20 \par PREFIX command 2, 10, 39, 97, 98, }{\b\f4\fs20 154}{\f4\fs20 \par prefixes 26\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 0-7 39, 99\par numbers 38, }{\b\f4\fs20 97}{\f4\fs20 , 99, 100, 112, 396, 414, 508\par standard 37, 38\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 PRINTER directive 46, 47, 119, 303, 306, }{\b\f4\fs20 332}{\f4\fs20 , 344, 475, 478\par printer driver 505, 509\par printers }{\b\f4\fs20 108}{\f4\fs20 -}{\b\f4\fs20 111}{\f4\fs20 , 505, 509\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 characters per line 109\par configuration 108\par control characters 110\par lines per page 109\par redirecting output 107, 108\par slot 109\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 printing files 107, 160\par PRIVATE directive 25, 48, 118, 190, 303, 304, 328, }{\b\f4\fs20 332}{\f4\fs20 , 474\par PRIVDATA directive 25, 48, 118, 190, 303, 304, 328, }{\b\f4\fs20 332}{\f4\fs20 , 474\par PRIZM 502\par ProDOS 146, 507\par ProDOS 16 xxv\par ProDOS 8 xxv, 39, 48, 72, 97, 142, 150, 318, 324, 325\par PRODOS command 96, }{\b\f4\fs20 154}{\f4\fs20 , 159\par PRODOS language 96, 102, 154\par ProDOS macros 356\par program launchers 97\par program segmentation 27, 48, }{\b\f4\fs20 189}{\f4\fs20 \par program size 122\par programming examples 2, 31, 32, 48, 54, 60, 61, 70, 81, 85, 86, 87, 119, 125, 144, 145, 149, 190, 336\par progress information 301\par prompt (see shell prompt)\par }\pard \s26\widctlpar\adjustright {\f4\fs20 purging files 400, 401\par PushVariables shell call }{\b\f4\fs20 420}{\f4\fs20 \par PUT4 macro 53, 57\par PUTCR macro 53, }{\b\f4\fs20 384}{\f4\fs20 \par PUTS macro 53, 406\par PUTx macro }{\b\f4\fs20 382}{\f4\fs20 \par }\pard \s26\ri720\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 Q\par }{\f4\fs20 \par }\pard \s26\widctlpar\adjustright {\f4\fs20 QUIT command }{\b\f4\fs20 154}{\f4\fs20 \par }\pard \s26\ri720\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 R\par }{\f4\fs20 \par }\pard \s26\fi-180\li180\widctlpar\adjustright {\f4\fs20 RAM 37, 39, 98\par RAM disks 501\par random number generator 466\par RANx macro }{\b\f4\fs20 369}{\f4\fs20 \par Read shell call 427\par ReadIndexed shell call }{\b\f4\fs20 421}{\f4\fs20 , 427\par ReadVariable shell call }{\b\f4\fs20 423}{\f4\fs20 \par Redirect shell call }{\b\f4\fs20 425}{\f4\fs20 \par redirection 40, 70, 79, 82, 90, 96, 107, 119, 306, 377, 388, 390, 391, 425, 508\par relocation 43, 51, 72, 90, 183, 304, 309, 328, 331, 481, 490\par relocation dictionary 48, 184, 492, 493, 497\par RENAME command 11, 95, 101, }{\b\f4\fs20 155}{\f4\fs20 , 415\par RENAME directive 303, }{\b\f4\fs20 332}{\f4\fs20 , 475, 478\par RESEQUAL command }{\b\f4\fs20 155}{\f4\fs20 \par resource description file 196, 198\par resource fork 122, 126, 226\par resources 126, 129, 155, 156, 195-228, 511\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see also Rez\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 restartability 112, 124, 405\par restartable programs 96\par RESTORE macro }{\b\f4\fs20 464}{\f4\fs20 \par RET macro 456, 464, }{\b\f4\fs20 469}{\f4\fs20 \par return characters 163\par Rez 129, 195-228\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 append statement 220\par arrays 207, 210, 213\par built-in functions 213, 222\par change statement 209\par comments 196\par conditional compilation 216\par data statement 200\par define statement 216\par delete statement 209\par escape characters 225\par expressions 221\par if statement 216\par include statement 98, 198, 219\par labels 212, 213, 214, 215\par macros 216\par options 227\par printf statement 217\par read statement 200\par resource attributes 199\par resource statement 210, 220-226\par resource types 201\par strings 204, 224, 225\par switch statement 208, 210\par symbols 209\par type statement 201\par undef statement 216\par variables 222\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 REZ command }{\b\f4\fs20 156}{\f4\fs20 \par ROM code 51, 318, 330, 331\par ROM disks 501\par RUN command 5, 11, 41-43, 55, 105, 116, }{\b\f4\fs20 156}{\f4\fs20 , 184, 299, 300, 330\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 S\par }{\f4\fs20 \par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 S16 files 97\par S16 programs 73\par SANE Tool 323, 324, 330\par SAVE macro }{\b\f4\fs20 465}{\f4\fs20 \par Scanlon, Leo J. xxv\par script files\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 linker 148\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 scripts\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 see EXEC files 502\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 SEED macro }{\b\f4\fs20 466}{\f4\fs20 \par segment type 328, 489\par segmentation (See program segmentation)\par segments 189, 291\par separate compilation 43, 185, 332\par sequence symbols 26, 65, 308, }{\b\f4\fs20 343}{\f4\fs20 , 347, 348, 477, 482\par SET command 79, 81, 83, 84, 85, 86, 87, 103, 149, }{\b\f4\fs20 156}{\f4\fs20 , 160\par Set shell call }{\b\f4\fs20 427}{\f4\fs20 \par SETA directive 63, 65, 66, 340, 343, 348, }{\b\f4\fs20 353}{\f4\fs20 , 477\par SETB directive 63, 340, }{\b\f4\fs20 353}{\f4\fs20 \par SETC directive 63, 66, 340, 341, 346, }{\b\f4\fs20 354}{\f4\fs20 , 477\par SETCOM directive 46, 47, 303, }{\b\f4\fs20 333}{\f4\fs20 , 474, 475\par SetErrorDevice call 430\par SetInputDevice call 430\par SetIODevices shell call 407, }{\b\f4\fs20 429}{\f4\fs20 \par SetLang shell call }{\b\f4\fs20 431}{\f4\fs20 \par SetLInfo shell call 409, 410, }{\b\f4\fs20 432}{\f4\fs20 \par SetOutputDevice call 429\par SetStopFlag shell call }{\b\f4\fs20 437}{\f4\fs20 \par setting attribute }{\b\f4\fs20 344}{\f4\fs20 , 478\par shell 501\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 calling }{\b\f4\fs20 385}{\f4\fs20 \par command table 501\par parameter passing 432\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 shell commands 1, 77, 89, 102, 408\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 built-in commands 12, 96, 112\par command expansion 9, 94\par command list 94, 95\par command parameters 41\par command types 12, }{\b\f4\fs20 95}{\f4\fs20 , 112\par entering 9\par language commands 12\par language names }{\b\f4\fs20 96}{\f4\fs20 , 112\par metacharacters 118\par multiple commands 95, 103\par parameters 12, 116, 140\par utilities 96\par utility commands 12, 112\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 shell identifier 70\par shell prefix 97, 112, 124, 170, 509\par shell prompt 1, 95, 105\par shell variables 78, 81, }{\b\f4\fs20 103}{\f4\fs20 , 104, 140, 147, 419, 423, 509\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 assigning values to 79, 103, 156, 160, 427, 439\par expansion 79\par metacharacters 105, 302\par scope 83, 84, 104, 141, 157, 394, 398, 420, 421\par string concatenation 79\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 SHORT macro 50, }{\b\f4\fs20 467}{\f4\fs20 \par SHOW command 9, 37, 100, 107, 123, 154, }{\b\f4\fs20 157}{\f4\fs20 \par SHUTDOWN command }{\b\f4\fs20 157}{\f4\fs20 \par SIGNx macro }{\b\f4\fs20 370}{\f4\fs20 \par soft reference }{\b\f4\fs20 322}{\f4\fs20 , 468, 495\par SOFTCALL macro }{\b\f4\fs20 468}{\f4\fs20 \par SOS 146\par source files 35, 159, 183, 191, 299, 307, 487\par sparse files 122\par SQRTx macro }{\b\f4\fs20 371}{\f4\fs20 \par stack 361, 461, 462, 464, 465\par stack addressing 311\par stack frames 469\par stack size 509\par standard input 69, 97, 107, 348, 425, 430, 438, 508\par standard output 40, 69, 97, 107, 120, 133, 137, 159, 359, 374-376, 379-382, 384, 391, 394, 414, 425, 429, 508\par standard prefixes }{\b\f4\fs20 97}{\f4\fs20 , 99, 154, 157\par START directive 23, 25, 26, 30, 48, 118, 190, 303, 304, 318, 320, 328, 331, 332, }{\b\f4\fs20 333}{\f4\fs20 , 336, 474\par static segments 150, 489, 490, 493, 494\par static variables 332, 494\par status register 50\par Stop shell call 437, }{\b\f4\fs20 438}{\f4\fs20 \par storage type 122\par strings 323\par strings, ORCA macros 449\par SUB macro }{\b\f4\fs20 469}{\f4\fs20 \par SUB4 macro 53\par SUBx macro }{\b\f4\fs20 372}{\f4\fs20 \par SWITCH command 125, }{\b\f4\fs20 158}{\f4\fs20 \par SYMBOL directive 46, 47, 301, 303, 304, }{\b\f4\fs20 333}{\f4\fs20 , 344, 475, 478\par symbol tables\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 41, 46, 117, 301, 304, 326, 327, 333\par linker 42, 117, 147, 184, 186, 189, 301, 483\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 symbolic parameters 60, 307, }{\b\f4\fs20 337}{\f4\fs20 , 472, 474, 477, 478\par }\pard\plain \s25\fi-180\li540\widctlpar\adjustright \f12\cgrid {\f4\fs20 arrays of 63, 65, }{\b\f4\fs20 339}{\f4\fs20 , 473, 477\par assigning values to 63, 337, 340, 348, 349, 353, 354, 472, 477\par booleans 62, 63, 67, 337, 345, 350, 351, 353\par concatenation 341\par defining 62\par dot operator 341\par integers 62, 63, 64, 67, 337, 345, 349, 350, 351, 353\par positional parameters 337, 338\par scope 340, 350, 351\par strings 60, 62, 63, 64, 67, 337, 345, 348, 349, 350, 351, 354\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 SYSCMND file 39, 72, 99, 112, 124, 406, 501\par SYSEMAC file 39, 99, 165, 502\par SYSHELP file 170, 502\par SYSLIB 505\par SYSPIPEx files 111\par SYSTABS file 39, 98, 99, 179, 502\par system configuration 499, 501\par SYSTEM files 97\par System prefix 39, 72, 509\par system programs 69, 73\par system requirements xxiv\par SYSTEMP file 20, 168, 172\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 T\par }{\f4\fs20 \par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 tabs 163, 166, 174, 180\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 ENTAB utility 139\par removing 160\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 terminal errors 117, 301\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 305, 478\par linker 483\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 TEXT command }{\b\f4\fs20 159}{\f4\fs20 \par text files 96, }{\b\f4\fs20 102}{\f4\fs20 , 112, 154, 159, 160, 355, 487\par TEXT language 96, 102, 159\par Text Tools 40, 59, 69, 70, 335, 373, 377, 388, 390, 429\par time 122\par TITLE directive 47, 304, }{\b\f4\fs20 334}{\f4\fs20 , 475\par Toolbox, Apple IIGS xxv, 29, 48, 55, 59, 70, 82, 335, 356, 357, 373, 393, 422, 426, 428\par }\pard\plain \s25\widctlpar\adjustright \f12\cgrid {\f4\fs20 tool errors 471\par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 TOUCH command }{\b\f4\fs20 159}{\f4\fs20 \par TRACE directive 64, 149, 304, 308, 340, 343, 344, 346, 348, }{\b\f4\fs20 354}{\f4\fs20 , 475, 478\par two's complement notation 360\par type attribute }{\b\f4\fs20 345}{\f4\fs20 , 478, 494, 495\par TYPE command 8, 139, }{\b\f4\fs20 159}{\f4\fs20 \par type conversions 444\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 U\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 UNALIAS command 116, }{\b\f4\fs20 160}{\f4\fs20 \par unlocking files 138\par UNSET command 80, 83, 85, 86, 103, 104, 149, 157, }{\b\f4\fs20 160}{\f4\fs20 , 439\par UnsetVariable shell command }{\b\f4\fs20 439}{\f4\fs20 \par user ID 70, 72\par USING directive 31, 320, }{\b\f4\fs20 334}{\f4\fs20 , 481, 483\par utilities 81, 497, 503\par Utilities prefix 39, 72, 96, 97, 99, 112, 144\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 V\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 variables (See assembler variables, shell variables, symbolic parameters, DC directive, DS directive, ANOP directive, labels)\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 assembler 320\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 version\par }\pard\plain \s25\li360\widctlpar\adjustright \f12\cgrid {\f4\fs20 editor 167\par }\pard\plain \s26\widctlpar\adjustright \f12\cgrid {\f4\fs20 version numbers 440, 484, 490\par Version shell call }{\b\f4\fs20 440}{\f4\fs20 \par }\pard \s26\fi-180\li180\widctlpar\adjustright {\f4\fs20 volume names 2, 36, 100, 120, 125, 126, 139, 145, 157\par }\pard\plain \ri720\widctlpar\adjustright \f12\cgrid }}\pard\plain \ri720\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }{\b\f4\fs20 W\par }{\f4\fs20 \par }\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\field\flddirty{\*\fldinst {\f4\fs20  INDEX  }}{\fldrslt {\f4\fs20 wait flag 41, 117, 301, 304\par wildcards 11, }{\b\f4\fs20 101}{\f4\fs20 , 121, 126, 128, 138, 140, 152, 158, 159, 414, 417\par word size 50, 69, 328, 329, 344, 357, 388, 456, 467, 480\par work prefix 20, 39, 97, 98, 111, 168, 172\par write protect 127, 483}}}\pard\plain \s26\fi-180\li180\widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard\plain \qj\widctlpar\adjustright \f12\cgrid {\par \par }}