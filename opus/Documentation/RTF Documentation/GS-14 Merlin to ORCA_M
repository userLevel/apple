{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f23\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f25\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f26\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f27\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f28\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f34\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f35\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f37\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f38\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f40\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f41\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f42\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f43\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f44\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f45\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f46\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f47\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f48\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f49\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f50\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f51\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f52\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f53\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f55\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f57\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f58\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f60\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f61\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f62\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f63\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f64\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f65\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f66\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f67\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f68\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f69\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f77\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f78\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f80\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f81\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f82\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f86\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f87\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f88\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f89\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f90\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f91\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f92\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f93\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f96\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f97\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f98\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f99\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f100\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f101\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f102\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f103\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f104\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f105\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f106\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f107\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f108\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f109\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f110\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f112\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f113\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f114\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f115\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f116\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f117\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f118\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f119\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f121\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f122\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f123\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f124\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f125\fnil\fcharset2\fprq2 Zapf Dingbats;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f23\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f25\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f26\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f27\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f28\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f34\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f35\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f37\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f38\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f40\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f41\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f42\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f43\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f44\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f45\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f46\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f47\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f48\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f49\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f50\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f51\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f52\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f53\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f55\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f57\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f58\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f60\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f61\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f62\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f63\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f64\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f65\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f66\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f67\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f68\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f69\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f77\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f78\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f80\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f81\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f82\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f86\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f87\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f88\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f89\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f90\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f91\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f92\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f93\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f96\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f97\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f98\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f99\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f100\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f101\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f102\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f103\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f104\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f105\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f106\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f107\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f108\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f109\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f110\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f112\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f113\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f114\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f115\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f116\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f117\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f118\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f119\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f121\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f122\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f123\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f124\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f125\fnil\fcharset2\fprq2 Zapf Dingbats;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \snext0 Normal;}{\s1\keepn\widctlpar\tqr\tx9000\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 1;}{\s2\keepn\widctlpar\tqr\tx9000\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext15 header;}{\s16\qj\widctlpar\adjustright \f4\cgrid \snext16 Text;}{\s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid \sbasedon0 \snext17 Code;}{\s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid \sbasedon0 \snext18 Model;}{\s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext19 Parameters;}{\s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext20 footer;}{\*\cs21 \additive \sbasedon10 page number;}{\s22\sb200\widctlpar\tqr\tx9350\adjustright \b\lang1024\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{\s23\li360\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{\s24\li480\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s25\li720\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{\s26\li960\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s27\li1200\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s28\li1440\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{\s29\li1680\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s30\li1920\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\s31\fi-240\li240\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 1;}{\s32\li720\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid \sbasedon17 \snext32 Comparison;}{\s33\fi-240\li480\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 2;}{\s34\fi-240\li720\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 3;}{\s35\fi-240\li960\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 4;}{\s36\fi-240\li1200\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 5;}{\s37\fi-240\li1440\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 6;}{\s38\fi-240\li1680\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 7;}{\s39\fi-240\li1920\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 8;}{\s40\fi-240\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd index 9;}{\s41\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext31 index heading;}}{\info{\title Utilities Package #1}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy19\hr15\min54}{\revtim\yr2000\mo10\dy19\hr15\min54}{\printim\yr2000\mo10\dy19\hr15\min53}{\version2}{\edmins0}{\nofpages39}{\nofwords8719}{\nofchars49702}{\*\company Byte Works, Inc.}{\nofcharsws61037}{\vern99}}\margl1440\margr1440 \facingp\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbknone\linex-32767\headery1080\footery1080\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs72 \hich\af4\dbch\af4\loch\f4 \hich\f4 Merlin\u8482\'aa\loch\f4 \hich\f4  to ORCA/M\u8482\'aa\par }{\b\fs28 \hich\af4\dbch\af4\loch\f4 Source Code Translator\par \hich\af4\dbch\af4\loch\f4 for ORCA/M\par \hich\af4\dbch\af4\loch\f4 or the Apple II}{\b\fs20 \hich\af4\dbch\af4\loch\f4 GS}{\b\fs28 \hich\af4\dbch\af4\loch\f4  Programmer's Workshop\par }{\b \par }{\b\fs36 \hich\af4\dbch\af4\loch\f4 Includes Source Code\par }{\b \par }{\b\fs72 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex109\picscaley116\piccropl0\piccropr0\piccropt0\piccropb0\picw360\pich219\picwgoal7200\pichgoal4380\macpict\bliptag-1555728666\blipupi72{\*\blipuid a34576e68d883ab644b5068fc7c732b9}002900400037011b019f110101000a001d0008011b01e90800090b000a000a4000400037011b019fff}}{\b \par }\pard \widctlpar\adjustright {\b \par }\pard \qc\widctlpar\adjustright {\b\fs28 \hich\af4\dbch\af4\loch\f4 By Barbara Allred\par \par \hich\af4\dbch\af4\loch\f4 Copyright 1987\par }\pard \widctlpar\adjustright {\par }\pard \qc\li20\nowidctlpar\tqr\tx9360\adjustright {\par }{{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich176\picwgoal8760\pichgoal3520\macpict\bliptag-1229934158\blipupi72{\*\blipuid b6b0b1b2b2eba5eae05d25da145947cc}0e220000000100b001b7001102ff0c00ffffffff000100000000000001b7000000b000000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800380000000000b001b80000000100b001b70000000100b001b7000115e200011ffffb0006300600c0000003fd000060fc0018e200043fff80000cfe0006300600c0000003fd000060fc0018e20004380380000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0019e20004300180000cfe0007300600c00000030cfe000060fc0019e20004300180003ffe0007300600c00000030cfe000070fc001ce2001838038381bf0ffc00300600c7fc1ff30c0ff800787fc1ff00001ce200183fffc7c18c1ffe00380600cfff3ff30c1ffc007cffe3ff80001ce200183fffe7c18c1c0e003c0600cfff38030c1c1c007ce0e38180001ce200183f00e7c18c1806003e0600ce0730030c180c007cc0630180001ce200183e0067c18c1806003e0600cc0330030c1800007cc0630180001be200153e0067c18c1c0e003e0600cc033003ff9800007cc063fe001ce200183e0067c18e1ffe003e0600ce033803ff9ff8007ce0638000001ce200183e0067c18f1ffc003e0600cf033c03e38ffc007cf063c0000020e7000010fd00183e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d18003fc0003e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d180030c0003e0067818f9f00003e0600cf833e03e1807c007cf863e0000022e8001e030c3830c0003e0067018f9f00003e0600cf833e03e1807c007cf863e1800022e8001e060cfc30c0003e0066018f9f06003e0600cf833e03e1987c007cf863e1800022e8001e0c07cc3fc0003f00e6038f9f06003f0f01cfc73e03e1987c007cf863e18e0022e8001e1807063800003fffe7ff8f9ffe003fffffcfff3e03e19ffc007cf863ff8e0022e8001e3807023800001fffc3ff870ffc001fffff87fe1c01c187f800387061ff0e000fe800047c030338c0fd00010380ed000fe80004ce03c13fc0fd00010180ed0012ec00070200000187c1e180fc00010180ed0013ee000801480020000303e1f0fb00010180ed0015ef000930140024c0000001f0f0fc000203ff80ed0014ef000438e0000043fe0001f8f0fc000103ffec000eef00087b01ec02678000007ce4000eef00083c7a00201f8000003ce4000ff000050733e0000207fe00001ce4000cf0000607c7f80001610ce1000cf00006079e01090092dce1000cf00006033c8832041c7ce1000cf0000646e8004000823ce1000cf00006fddd20402005d0e1000df00007fbf5c4801040ccc0e2000df00007f7f13080120967e0e2000df000072f8121801020b2e0e2000df000075f7e8880108af1c0e20011f1000b07be65404032012880000262e50011f1000b07be85c26020457c80002777e50012f1000c077cf93000c1029c5c0077ff30e60012f1000c017b0d848a08278e7c003f9f70e60012f1000c02fc02d0100018ef280771e1e0e60012f1000c02f402c40001201f3007fdff76e60012f1000c1ce801008096341f9003afbdbee60012f1000c1de801626b1e4c0d9116fbf01ee60012f1000c3de8018180ecdc0f973dffedece60012f1000c39e80116003f5e0bcf3bf9680ce60013f1000d0bc4026c401f5f0bce1ff7656780e70013f1000d0bc403f8700fafd1cc1f9c1d9f80e70012f1000c0bc30fdbe067e7d3c873e3e063e60012f1000c73cefbe73e33f867e4ffc7f35fe60013f1000df3cfff22ff1bf7bde4dfaff9adc0e70013f1000d73dfe746ff99ffffe7ef0ff9e1c0e70013f1000d17d7ffc5ffddecece7edeff9fd80e70012f1000c17feff45ffcdfedfe1e80ffa3fe60012f1000c17afdbc5ffcdebffe0e56ffb7fe60013f1000d67b9ffc57fcdffffe17d87f1ddc0e70013f1000df7fbff457f5debede7e061e279c0e70012f1000cf3c17a46be99e8ffe7ff500f7ee60012f1000c73cbfe23453adf47e53dadadbee60012f1000c13e3ff21be33bfcfe4df400337e60012f1000c0bc87f908065ffa3cefdededefe60012f1000c0bc1879800cf7f2bcbfff89be8e60012f1000c19f2018c03deff53c1ffed77f8e60012f1000c79f251860fbcff97caf37edfbce60012f1000c7ce440c180fafff798fde9677ce60012f1000c3cb480807ff0fff397867f5f80e60012f1000c04f400b000297fe786013dafc0e60012f1000c0274008040d87fe72000b7fec0e60011f1000b0e7a012000013fcf0000d2e6e50011f1000b0d2e01301f160f0e45804ae0e50011f1000b3f1d86e060c0e01c79404be0e50011f1000b6c9178c0c1e0021cfd8055e0e50011f1000b3d2ac05081f16238fdb04dc0e50011f1000b2c46370101f980703c52d680e50011f1000b1466cec103f880703faceae0e50011f1000b33f339a103f804e47fe9f2f0e50011f1000b35f1870107f841cf7f86c970e50012f2000c07ebe0c68107f8039b7fff9560e50012f2000c06f86321808ff00f257fffed40e50012f2000c0703e79800dfe31e06bfffdf60e50012f2000c03afffc6007fc078c7dffa50b8e50011f1000be7ffc3801f01e5f78ffe84b8e50014f4000ee000002fe7e080000388ffdfff36b8e50015f5000f0178000077e37210003c18ffa7e598a0e50015f5000f021c00009fc6e00519c07cfff7efc2a0e50015f5000f030e0001bc03c23000039fffc7d864a0e50015f5000f03070002febde506023f0ffff5a016b8e50015f5000f01830002747cf01f0b850fffcc6808b8e50015f5000f01c18003827e84320f8fffffc4d00fb8e50015f5000f40e10000027f900007cdffff9c9c07a0e50015f5000f60718000027ffd2a2fff7fff8eb80fa0e50015f5000f703f00000366ef2e3fffbfff2fa80720e50015f5000f780a000003fdffdc3ffffffe9f980738e50015f500005cfe000b01f9ffe7de7f5ffc3ff00f78e50015f500000efe000b01ffdff6fe3ff7f2ff400f70e50016f6001010072000000e5ffffffc1fff55ff201e40e50016f600101803e0000007fde7ff6c1ffff3ff187e40e50016f600101c01c0000007bf5f7ffc1ffd5ffebffef0e50016f600101e0180000006fdadbffc1ffffff117fcf0e50016f600010701fe000b02dbbadffb3fffffe45afd60e50014f600010380fe000307ffc07ffdff02fe1679e40016f700020701c0fe00031ffe3f7ffdff03c1aafb80e50017f700020bc0f8fe000439f77fafeffeff03bcd6f3c0e50017f7000210e070fe00031d5dff9ffeff04fd5b4bf780e50016f70002187060fe000a0c78ffdfeffcfffeeda5ece40016f700021838c0fe000a077fffdfde78f1fec0a3dce40015f700010c18fd000a0dfdffdfce38e1f900239ee40015f700010e0cfd000a1c007f9f1e0003a1c02736e40015f700010708fd000a39edffaf180001e3c02660e40016f8000240038cfd000a3c081e3280ffe013d84cf0e40016f80002c001f8fd000a0f6560f10f01fe07dcc978e40016f80002c00050fd000a039d9df03ba60f8385b330e40015fa000201e0e0fb0009026061f1fedfe6601e4fe30015fa0002021160fb0009065f5e33fdefd3d8599fe30015fa0002021860fb0009062dbc07ff1769241a67e30015fa0002821830fb00090f81ff1ff0f7fd7f09c0e30016fb000301860c30fb00090e6dff3ffb5ffd1d87e0e30016fc00040103830c30fa00086932fff9b7fd4ec3e0e30016fc00040102c30c18fa00087562fde7b7f97fe3c0e30015fc00040380c3041efa0007fde1fefdebfa2f71e2001909081e0207800380c18438fa00081af9c1fdadf67ff0b8e30019091833060cc00580618c40fa000802fb98df2e0feff8fce300180838210e084001c060ccf900080397787d45fbfff87ce3001808586196186000c06030f900080306f03ba007f83c38e3001707186186186000c030f80008030ef03f2a00b01e30e3001707186186186000e03cf80008034ef03c9fc1e40e10e300170718618618600060e0f8000801dee0386037ca071be300150618618618600068f600075e7039800fdc071fe300160618618618600070f7000803bf3c7a4003d8078fe300160618210608400080f700081fbf9ef48009d4078ce30014041833060cc0f500080fbfc18b8002db0788e30014047e1e1f8780f5000806bfff730f0aee0f8ce3000ff00009035fffe73fc0729f4780e4000ff00009017ffdce7fe6783fc780e4000ef00008037efbcc7fe2bfffc7e3000ef00008077fbfacfff43fffc6e3000ef000083f7fff5cfff0bfffc6e3000ff000093f7fffdcfffb3fffc380e4000ff00009077effecfff02effc380e4000ff00009037fffac7ff2bfffc780e4000ff00009017f83ee7ff83ffdc780e4000ef00008017f3dd63fc5fc3fc4e3000ef00008037e06f60f81710fc4e3000ef000080fbc037b0028e6e78ee3000ef000081fbc01798005e7178fe3000ef000080ebc0154c0214c3b8fe3000ef0000801bc017a702ad4938fe3000def00075c025d900c580318e3000def00075e00fe6030c80310e3000ef0000801cf01eb9fc8e80618e3000ef0000801ef837e000020063ce3000ef0000803e7fcfbbe12b00c3ce3000ef0000803d7cfebc1e14c3c7ce3000def00071bbfdf808057f8c8e3000def000719ff9700440ff080e3000def000705ff6c002153f180e3000def000706ffbe000217e3c0e3000def00071a7daa000841c3e0e3000def00073f367400081b86c0e3000def0007389cfe00108f0c40e3000bee0005476b0004541ce2000bee0005b32a8080187ee2000bee0005f8e1000060dee2000cef000601c63b94c38384e2000cef000601830e40140780e2000cef00060103c0e08019c0e2000bee000503b80200f0c0e2000aee00040714800f28e1000aee0004041d6d9a10e10008ed0002082307e00008ed00020c08c2e0000000a0008f00a0008300ff}}{\par }\pard \widctlpar\adjustright {\par \sect }\sectd \sbkodd\linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\b\fs20 Limited Warranty}{\fs20  \_ Subject to the below stated limitations, Byte Works Inc. hereby warrants that the program contained in this unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from date of purchase. Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose. The limits of warranty extend only to the original purchaser.\par \par Neither Byte Works, Inc. nor the authors of this program am liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interniption of service, loss of business, or anticipatory profits.\par \par To obtain the warranty offered, the enqlosed purchaser registration card must be completed and returned to the Byte Works Inc. within ten (10) days of purchase.\par \par Important Notice \_ This is a fully copyrighted work and as such is protected under copyright laws of the United States of America. According to these laws, consumers of copywritten material may make copies for their personal use only. Duplication for any purpose whatsoever would constititite infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criniinal penalties of up to one year imprisonment and/or a $10,000 file.\par \par This product is sold for use on a single computer at at a single location. Contact the publisher for information regarding licensing for use at multiple\_workstation or multiple\_computer installations.\par \par ORCA/M is a trademark of the Byte Works, Inc.\par \par }\pard \s16\qc\widctlpar\adjustright {\fs20 Program, Documentation and Design\par Copyright 1987\par The Byte Works, Inc.\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \sect }\sectd \sbkodd\linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs36 \hich\af4\dbch\af4\loch\f4 Table of Contents\par }{\par }\pard\plain \s22\sb200\widctlpar\tqr\tx9350\adjustright \b\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\field\fldedit{\*\fldinst {\b0 \hich\af4\dbch\af4\loch\f4  TOC \\o "1-3" }}{\fldrslt {\hich\af4\dbch\af4\loch\f4 Chapter 1 - Introduction\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496\hich\af4\dbch\af4\loch\f4 604819 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800310039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 1}}}{\par }\pard\plain \s23\li360\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 What Merlin\_to\_ORCA Is\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604820 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 What You Should Have Received\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604821 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Overview of the Manual\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604822 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 2}}}{\lang1024 \par }\pard\plain \s22\sb200\widctlpar\tqr\tx9350\adjustright \b\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 2 - How to Use Merlin\_to\_ORCA\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604823 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320033000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 5}}}{\par }\pard\plain \s23\li360\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Installation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604824 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 5}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Installing As A Utility Under ORCA/M 1.0\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604825 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 5}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Installing As A Utility Under ORCA/M 4.1\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604826 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 5}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Installing As A Utility Under ORCA/M 4.0\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604827\hich\af4\dbch\af4\loch\f4  \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 6}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Running the Translator as a Utility\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604828 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 6}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Running the Translator as a Stand\_Alone Program\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604829 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800320039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 8}}}{\lang1024 \par }\pard\plain \s22\sb200\widctlpar\tqr\tx9350\adjustright \b\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 3 - Differences Between ORCA/M and Merlin Assembly Language Programs\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49660483\hich\af4\dbch\af4\loch\f4 0 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330030000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 9}}}{\par }\pard\plain \s23\li360\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Structure\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604831 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 9}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Comments\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604832 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 9}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Segmentation\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604833 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 10}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Labels\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604834 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 11}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Instructions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604835 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Expressions\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49660\hich\af4\dbch\af4\loch\f4 4836 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Directives\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604837 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 15}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604838 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 15}}}{\lang1024 \par }\pard\plain \s22\sb200\widctlpar\tqr\tx9350\adjustright \b\lang1024\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Chapter 4 - Translation of Merlin Directives\tab }{\field{\*\fldinst {\hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604839 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800330039000000}}}{\fldrslt {\hich\af4\dbch\af4\loch\f4 17}}}{\par }\pard\plain \s23\li360\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Directives Which Use Strings\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604840 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 17}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ASC\tab Define ASCII S\hich\af4\dbch\af4\loch\f4 tring\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604841 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 18}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 AST\tab Print Asterisks in Assembly Listing\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604842 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 18}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 CHK\tab Compute Check Sums\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604843 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 18}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 CYC\tab Print CPU Cycle Times\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604844 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DA\tab Define Address\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _\hich\af4\dbch\af4\loch\f4 Toc496604845 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DAT \tab Date Stamp Listing\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604846 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DCI\tab Dextral Character Invert\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604847 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DDB\tab Define Double Byte, Reverse Order\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604848 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 20}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1440\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DFB, DB\tab Define Byte\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604849 \\\hich\af4\dbch\af4\loch\f4 h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800340039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 20}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DO, ELSE, FIN\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604850 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 20}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DS\tab Define Storage\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604851 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 21}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1680\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DSK, SAV\tab Save Object Module\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604852 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 22}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1920\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DUM, DEND\tab Define "Dummy" Section\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604853 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 22}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 DW\tab Define Word\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGER\hich\af4\dbch\af4\loch\f4 EF _Toc496604854 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 23}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 END\tab End Program\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604855 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 23}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ENT\tab Define Entry Point\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604856 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 23}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1920\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 EOM or <<<\tab End of Macro Definition\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604857 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 23}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1440\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 EQU or =\tab Equate\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604858 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 23}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ERR\tab Chec\hich\af4\dbch\af4\loch\f4 k Error\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604859 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800350039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 24}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 EXP\tab Expand Macros\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604860 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 24}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 EXT\tab External Label\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604861 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 24}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 FLS\tab Display String in Flashing Video\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604862 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 25}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 HEX\tab Define Hex Data\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc49660486\hich\af4\dbch\af4\loch\f4 3 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 25}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 INV\tab Display String in Inverse Video\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604864 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 25}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 KBD\tab Assembly Input from Keyboard\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604865 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 26}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 LST \tab Generate Assembly Listing\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604866 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 26}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1440\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LSTDO\tab List "DO OFF" Areas\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604\hich\af4\dbch\af4\loch\f4 867 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 26}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LUP\tab Loop\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604868 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 26}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MAC\tab Define Macro\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604869 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800360039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 27}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 MX\tab Set Accumulator and Index Register Sizes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604870 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 28}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 OBJ\tab Set Division Between Object Code and Symbol Table\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604\hich\af4\dbch\af4\loch\f4 871 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 28}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PAG\tab This is exactly the same as the ORCA directive EJECT:\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604872 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 28}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 PAU\tab Pause\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604873 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 29}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1920\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PMC or >>>\tab Put Macro in Source Code Stream\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604874 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 29}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 ORG\tab Set Origin\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4966\hich\af4\dbch\af4\loch\f4 04875 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 29}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 PUT\tab Insert Contents of Source File into Code Stream\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604876 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 30}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 REL\tab Define Relocatable Module\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604877 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 30}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 REV\tab Reverse Character Order of String\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604878 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 30}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SKP\tab Write Blank Lines \hich\af4\dbch\af4\loch\f4 to Listing\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604879 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800370039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 31}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 STR\tab Define String with Leading Count Byte\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604880 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 31}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SW\tab Allow "Sweet 16" Opcodes\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604881 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 31}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 TR\tab Truncate Listing Lines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604882 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 32}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 TYP\tab Set Filetype \hich\af4\dbch\af4\loch\f4 of Object Module\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604883 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 32}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 USE\tab Access Macro File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604884 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 32}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 USR\tab Define User Opcode\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604885 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 32}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 VAR\tab Define Variables\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496604886 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 33}}}{\lang1024 \par }\pard \s23\li360\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 XC\tab Extend Instruction Set\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc4\hich\af4\dbch\af4\loch\f4 96604887 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003600300034003800380037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 33}}}{\lang1024 \par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid }}\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \sect }\sectd \sbkodd\pgnrestart\linex-32767\headery1080\footery1080\sectdefaultcl {\footerl \pard\plain \s20\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs21 \hich\af4\dbch\af4\loch\f4  PAGE }}{\fldrslt {\cs21\lang1024 \hich\af4\dbch\af4\loch\f4 32}}}{\par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs21 \hich\af4\dbch\af4\loch\f4  PAGE }}{\fldrslt {\cs21\lang1024 \hich\af4\dbch\af4\loch\f4 33}}}{\fs20 \par }}\pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604819}\hich\af4\dbch\af4\loch\f4 Chapter 1 - Introduction{\*\bkmkend _Toc496604819}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par \par \par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604820}\hich\af4\dbch\af4\loch\f4 What Merlin\_to\_ORCA Is{\*\bkmkend _Toc496604820}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The Merlin\_to\_ORCA Source Code Translator takes as input a Merlin assembly\_language source file and translates the input to an ORCA assembly\_language program. You should be aware that the translation is close, but not perfect. Lines which cannot be translated are clearly marked (as comments), so that you may change them by hand. The translator does not support DOS. If you will be converting Merlin DOS source files, you should first run your Merlin programs through the DOS\_to\_ProDOS CONVERT utility supplied with your ProDOS system disk, then pass the converted ProDOS Merlin source file through the Merlin\_to\_ORCA translator.\par \par Throughout this manual, comments applying to ORCA/M 1.0 apply equally to the Apple II}{\fs20 GS}{ Programmer's Workshop (APW).\par \par There are four main differences between the Merlin and ORCA assembler packages. First, the linkers are different. At this point in time, the ORCA/M 4.1 linker does not produce REL files, nor does the assembler save portions of the object file to different names. The problem with REL files is moot on the Apple II}{\fs20 GS}{, as that is a "relocating" machine, and the ORCA/M 1.0 linker produces only relocatable executable output. (ORCA/M 1.0 provides a binary\_file maker, installed as a utility named MAKEBIN, for programmers developing software on the Apple II}{\fs20 GS}{ that is targeted for the eight\_bit Apple // computers.)\par \par Second, the macro languages used by the two assemblers are distinct. Macro translation is discussed at the end of Chapter Three.\par \par Third, the directives defined for each assembler are unique. Some directives are translated directly, others use ORCA macros to accomplish translation, and some require extensive analysis in order to perform partial or full translation. A few of the directives are simply discarded. These either relate to the Merlin linker (EXT, REL), or serve some function which can be duplicated by the ORCA command processor (DAT, TYP), or simply cannot be translated (CHK, OBJ, PAU, SW, USR).\par \par Finally, expression syntax differs between the two assemblers. The translator contains an expression evaluator which transforms Merlin expressions to ORCA expressions.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604821}\hich\af4\dbch\af4\loch\f4 What You Should Have Received{\*\bkmkend _Toc496604821}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The Merlin\_to\_ORCA Translator package consists of the following: one 5.25" diskette containing both the 8\_bit and 16\_bit versions of the program and source code, this manual explaining the program, and a warranty registration card. Returning the warranty registration card allows you to receive update information and the Byte Works' newsletter, }{\i ORCA NEWS.\par \par }{Side one of the disk contains the following subdirectories:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {EXECUTE\par HELP\par MERLN.GS\par MERLN.II\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Side two of the disk contains the single subdirectory named COMMON.\par \par Within the subdirectory EXECUTE are the executable files named MERLN.GS and MERLN.II. MERLN.GS is the translator which runs on the Apple II}{\fs20 GS}{ computer. MERLN.II is the version which runs on the Apple ][, ][+, //e, or //e. The file named MERLIN.MACROS contains special ORCA macros which are used as a final step in the translation process. This file should be included when running a translated source program under ORCA/M, as explained in Chapter Two of this manual.\par \par HELP contains two text files which briefly describe how to execute the two translators. They are provided in case you would like to install Merlin\_to\_ORCA as a utility, as detailed in Chapter Two.\par \par The ProDOS 16 specific portions of the code are found in the subdirectory named MERLN.GS, in the files named MERLN.GS.FILE and MERLN.GS.MACROS. The ProDOS 8 specific source code is located in the subdirectory named MERLN.II, in the files named MERLN.H.FILE, MERLN.II.FILE2, and MERLN.II.MACROS. The source code contained in the .FILE modules includes the global data definitions, and the memory management, file handling, and terminal error routines. The MACROS files contain the macros used in writing the translator.\par \par The source code which is shared by both versions of the program is located in the subdirectory named COMMON. All of the files in this directory are named MERLJN.x, where x is a letter specifying the first character of the first subroutine in that file.\par \par The Byte Works' intent in releasing the source code to the Merlin\_to\_ORCA Translator is to allow you to make any changes to the program you want. The program is for your personal use only, however. Merlin\_to\_ORCA is copyrighted, and the Byte Works retains all rights to it.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604822}\hich\af4\dbch\af4\loch\f4 Overview of the Manual{\*\bkmkend _Toc496604822}\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Chapter Two explains how to install and run the translator. Chapter Three explains the differences\hich\af4\dbch\af4\loch\f4  between the Merlin and ORCA assemblers, concentrating on such areas as labels, instructions, directives, macros, operands, and comments. Chapter Four discusses each Merlin directive, showing how the program translates each of them. It is not necessary th\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 t you read every word of the manual in order to use the translator effectively. If you are already somewhat familiar with ORCA, then all you may need to read are the directions for running Merlin\_to\_ORCA, given in Chapter Two. If ORCA is somewhat mysterio\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 s to you, you may find Chapter Three helpful. Chapter Four, covering the directives, has been written so that you need only refer to those Merlin directives whose translation you are particularly interested in.\par \par \sect }\sectd \sbkodd\linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604823}\hich\af4\dbch\af4\loch\f4 Chapter 2 - How to Use Merlin\_to\_ORCA{\*\bkmkend _Toc496604823}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par \par \par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604824}\hich\af4\dbch\af4\loch\f4 I\hich\af4\dbch\af4\loch\f4 nstallation{\*\bkmkend _Toc496604824}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The Merlin\_to\_ORCA translator runs in the ORCA/M environment, and relies upon the ORCA shell and system libraries for correct execution. The translator can be installed as a utility, or executed as a stand\_alone program.\par \par }\pard \s16\qj\li720\ri720\widctlpar\adjustright {\i PLEASE!!! Make a back\_up copy of Merlin\_to\_ORCA and store the original in a safe place. Protect your investment !!!\par }\pard \s16\qj\widctlpar\adjustright {\i \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604825}\hich\af4\dbch\af4\loch\f4 Installing As A Utility Under ORCA/M 1.0{\*\bkmkend _Toc496604825}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par To install Merfin\_to\_ORCA as a utility, copy the executable file named MERLN.GS, located in the translator subdirectory EXECUTE/, to the UTILITIES directory of your ORCA/M. system.. Now copy the text file named MERLN.GS, located in the translator's subdirectory HELP/, to the ORCA UTILITIES/HELP prefix. This will allow on\_line help, and can be accessed by entering the command\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {HELP MERLN.GS\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The final step in installing Merlin\_to\_ORCA as a utility is to modify the system command table. Enter the editor with the file named SYSCMND, located in the SYSTEM prefix of ORCA. Insert a blank line for the new utility in the correct place in the table. (The system command names are generally stored in sorted increasing alphabetical order.) Beginning in column one of the blank line, enter the name of the executable file you just copied to UTILITIES (MERLN.GS). Move to the next column in the table, on this same line, and enter a `U' for utility. An optional comment may be entered in the third column, describing the command's function.\par \par Exit the editor, saving the modified SYSCMND file. To inform the system about its new command, use the COMMANDS command, described in your ORCA manual:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {COMMMDS <pathname of SYSCMND>\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par or simply reboot ORCAJM.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604826}\hich\af4\dbch\af4\loch\f4 Installing As A Utility Under ORCA/M 4.1{\*\bkmkend _Toc496604826}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par To install Merlin\_to\_ORCA as a utility, copy the executable file named MERLN.II, located in the translator subdirectory EXECUTE/, to the UTILITIES directory of your ORCA/M system. Now copy the text file named MERLN.II, located in the translator's subdirectory HELP/, to the ORCA UTTLITIES/HELP prefix. This will allow on\_line help, and can be accessed by entering the command\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {HELP MERLN.II\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The final step in installing Merfin\_to\_ORCA as a utility is to modify the system command table. Enter the editor with the file named SYSCMND, located in the SYSTEM prefix of ORCA. Insert a blank line for the new utility in the correct place in the table. (The system command names are generally stored in sorted increasing alphabetical order.) Beginning in column one of the blank line, enter the name of the executable file you just copied to UTILITIES (MERLN.II). Move to the next column in the table, on this same line, and enter a 'U' for utility. An optional comment may be entered in the third column, describing the command's function.\par \par Exit the editor, saving the modified SYSCMND file. To inform the system of its new command, use the COMMANDS command, described in your ORCA manual:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {COMMANDS <pathname of SYSCMND>\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par or simply reboot ORCA/M.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604827}\hich\af4\dbch\af4\loch\f4 Installing As A Utility Under ORCA/M 4.0{\*\bkmkend _Toc496604827}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par To install Merlin\_to\_ORCA as a utility, copy the executable file named MERLN.II, located in the translator subdirectory EXECUTE/, to the UTILITIES directory of your ORCA/M system. Now copy the text file named MIERLN.II, located in the translator's subdirectory HELP/, to the ORCA UTILITIES/HELP prefix. This will allow on\_fine help, and can be accessed by entering the command\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {HELP MERLN.II\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The final step in installing Merlin\_to\_ORCA as a utility is to modify the system configuration. Do this by calling the ORCA utility named SYSGEN:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {SYSGEN\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par You will see a menu screen displayed. Select 'S' for system characteristics to change. You will now see a SYSTEMS PREFIXES menu screen. Select 'U' for utility and then enter a carriage return, followed by pressing the escape (ESC) key. This sequence of keystrokes returns you to the main screen. Enter 'Q' for quit. SYSGEN will ask if you want to make the change permanent. Enter 'Y' for yes, then the pathname of ORCA.HOST, which is typically /ORCA.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604828}\hich\af4\dbch\af4\loch\f4 Running the Translator as a Utility{\*\bkmkend _Toc496604828}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par To explain how to use the translator, we will walk through a simple example. Let's assume that you have a Merlin source file named PROG1, and that the program is located on a volume named /MY.PROGS, in a subdirectory named ASM. The pathname for PROG1 is then /MY.PROGS/ASM/PROG1. Let's also assume that you have installed Merhn\_to\_ORCA as a utility.\par \par The translator program is executed by entering the name of its executable file installed in the UTILITIES prefix. The input file name is entered next on the command line. For now, we will assume that we are in the subdirectory named /MY. PROGS/ASM/. The command line would then be:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {MERLN.GS    PROG1\tab }{\f4 (ProDOS 16 version)}{\par MERLN.II    PROG1\tab }{\f4 (ProDOS 8 version)}{\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The translation Of PROG1 will be written to standard output, which is defined as the monitor screen by default. We will probably want the translation to be placed in a file, however. We can redirect the output to a file by using the special symbol '>'. Let's assume that we want the output to go to a file named PROG1.O. The command line would then be:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {MERLN.GS    PROG1  > PROG1.O\tab }{\f4 (ProDOS 16 version)}{\par MERLN.II    PROG1  > PROG1.O\tab }{\f4 (ProDOS 8 version)}{\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par If we want to send the output to the printer instead of a file, we can redirect it by using the special device name.PRINTER:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {MERLN.GS    PROG1  > .PRINTER\tab }{\f4 (ProDOS 16 version)}{\par MERLN.II    PROG1  > .PRINTER\tab }{\f4 (ProDOS 8 version)}{\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Input can also be redirected by using the special symbol '<'. In the following examples, the input still comes from the file PROG1, as above. We could then enter:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {MERLN.GS    < PROG1\tab }{\f4 send output to monitor screen}{\par MERLN.II    < PROG1\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {MERLN.GS    < PROG1  > PROG1.0\tab }{\f4 send output to PROG1.O}{\par MERLN.II    < PROG1  > PROG1.0\par \par MERLN.GS    < PROG1  > .PRINTER\tab }{\f4 send output to the printer}{\par MERLN.II    < PROG1  > .PRINTER\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par What if we're not in the same subdirectory as the program we want to translate? We can access the file by using its pathname:\par \par }\pard\plain \s17\fi700\li20\keepn\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {MERLN.GS   /MYPROGS/ASM/PROG1\par MERLN.II   /MYPROGS/ASM/PROG1\par MERLN.GS   < /MYPROGS/ASM/PROG1\par MERLN.II   < /MYPROGS/ASM/PROG1\par MERLN.GS   /MYPROG2/ASM/PROG1   > .PRINTER\par MERLN.II   /MYPROG2/ASM/PROG1   > FILE3\par }\pard \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright {MERLN.GS   < /ASM/PROG1   > /ORCAPROGS/PROJ5/FILE56\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par All of the above commands are valid, based on our hypothetical disk. Note that the last example shows that you can redirect output to a file located in another subdirectory, or even on another volume.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604829}\hich\af4\dbch\af4\loch\f4 Run\hich\af4\dbch\af4\loch\f4 ning the Translator as a Stand\_Alone Program{\*\bkmkend _Toc496604829}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par If you do not want to install Merlin\_to\_ORCA as a utility, you can run the translator as a standalone program. ORCA executable programs (EXE files under ProDOS 16 or BIN files under ProDOS 8) are run by simply typing the pathname of the executable file. If you are in the directory where the executable file resides, then the filename by itself is sufficient to inform ORCA of the program you want to run. If you are in a directory other than the one where the executable file resides, then you can run it from the current directory by entering a pathname. The discussion above about supplying an input filename and redirection still apply. For example, suppose MERLN.H is in your current directory and you want to translate a file named MYFILE. The command fine to accomplish this is would be any of the following:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {MERLN.II    MYFILE\par MERLN.II    < MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Now suppose that MERLN.II is in a directory named AID, on a volume named /PROFILE. You could translate MYFILE, which is in your current prefix by any of the following command lines:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {/PROFILE/AID/MERLN.II    MYFILE    > .PRINTER\par /PROFILE/AID/MERLN.II    < MYFILE\par /PROFILE/AID/MERLN.II    MYFILE    > OUTFILE\par /PROFILE/AID/MERLN.II    < MYFILE    > /PROGS/P2/OSSS/OUTFILE3\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \sect }\sectd \sbkodd\linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604830}\hich\af4\dbch\af4\loch\f4 Cha\hich\af4\dbch\af4\loch\f4 pter 3 - Differences Between ORCA/M and Merlin Assembly\- Language Programs{\*\bkmkend _Toc496604830}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par \par \par \par Assembly-language source lines consist of the following fields:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {LABEL\tab OPCODE\tab OPERAND \tab COMMENT\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The opcode is an instruction defined in the target processor's instruction set, an assembler directive, or a macro call. Well\_defined standards for the components of a language are generally prescribed for high\_level language compilers, but this is not the case with assemblers. While ORCA and Merlin both provide the accepted instruction/operand syntax for the 65xx family of processors, they also uniquely define labels, directives, macros, and comments.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604831}\hich\af4\dbch\af4\loch\f4 Structure{\*\bkmkend _Toc496604831}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par One of the most important differences between ORCA and Merlin is the general structure of an assembly\_language program. Under ORCA/M 4.1, lines may be as long as 80 characters. The source code fields can be any length, as long as the combined field length does not exceed 80 characters. Note that labels are only significant through the first ten characters. Under the Apple\~II}{\fs20 GS}{ version of ORCA/M, lines can be up to 255 characters in length. Labels can be any size, and all characters are significant, but an opcode must be included on a line containing a label. The translator will replace Merlin lines containing only a label with\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {LABEL\tab ANOP\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par where ANOP is the ORCA assembler directive "do nothing." In other words, ANOP can be used to define an address for a label.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604832}\hich\af4\dbch\af4\loch\f4 Comments{\*\bkmkend _Toc496604832}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ORCA comment lines are either completely blank, or begin with one of * ; ! in column one. Comments included at the end of a source line may begin one blank space after the last field of a line (either the opcode or the operand), or in column 4 1. They need not be prefixed with any special character, such as the ';'character required by Merlin. Care should be taken when commenting lines containing an optional operand. If the comment is not placed after column 40, the ORCA assembler will assume that the comment is the operand, resulting in an assembly\_time error.\par \par The translator replaces Merlin source lines which contain blanks followed by a comment denoted with ; with a semi\_colon in column one, followed by the comment printed starting in column 41:\par \par }\pard \s16\qj\li720\widctlpar\tx5040\adjustright {\ul Merlin}{ \tab }{\ul ORCA}{\par }\pard \s16\qj\widctlpar\adjustright {\par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {\fs18 ; here is a comment\tab \tab ;                  here is a comment\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Merlin comment lines which are all blanks or begin with an asterisk in column one are copied to the ORCA source file as is.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604833}\hich\af4\dbch\af4\loch\f4 Segmentation{\*\bkmkend _Toc496604833}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ORCA is one of the very few assemblers that provides true segmentation. That is, an assembly language program can be broken into segments, with each segment fulfilling a specific function. (This is very similar to subroutines found in high\_level languages.) Segments are typically executed from other segments via the jump\_to\_subroutine instructions JSR and JSL. The labels within each segment are private to that segment, so that the same label name can be used in every segment of the program, if this is desired. An ORCA segment has the following structure\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\tx6120\adjustright \f6\fs20\cgrid {LABEL\tab START\tab \tab LABEL\tab DATA\par \par \tab . . .\tab      or\tab \tab . . .\par \par \tab END\tab \tab \tab END\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par where the first type of segment is used for code segments, and the other is used to define a block of data definitions. ORCA requires that a valid assembly\_language program contain at least one segmenL\par \par Only the labels on the START and DATA directives are global, like a procedure names in Pascal or C. They should be unique within the program. (Labels defined using the GEQU and ENTRY directives are also global; these are described in your ORCA/M manual.)\par \par In creating an ORCA source file from a Merlin program, the translator places the following lines at the beginning of the output:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1980\tx2880\tx5040\adjustright \f6\fs20\cgrid {\tab MCOPY MERLIN.MACROS\par \tab MCOPY MY.MACROS\par TRANSLATE\tab START\par \tab LCLA &LUP\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par and, at the end of translation\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1980\tx2880\tx5040\adjustright \f6\fs20\cgrid {\tab END\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The file MERLIN.MACROS contains the translation of a few Merlin directives. These are discussed in the next chapter. The file MY.MACROS contains the translated macros you have defined in your Merlin source program. Macros are discussed at the end of this chapter. The line LCIA &LUP is for use with Merlin's LUP directive; it is covered in Chapter Four.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604834}\hich\af4\dbch\af4\loch\f4 Labels{\*\bkmkend _Toc496604834}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Merlin provides labels with limited scope \_ something that is done more effectively by ORCA through segmentation. A Merlin label beginning with the character ':' is defined as a local label and "attached" to the closest previous global label. The same local label can then be reused following a new global label.\par \par ORCA and Merlin both allow the definition of variables. Merlin variables begin with the']' character, provide multi\_purpose association with data, and can be redefined as often as desired. ORCA variables begin with the character '&' , are typed upon declaration (that is, there are three distinct variable types: arithmetic, boolean, and character), and can only be defined once for the segment or macm in which they appear.\par \par The syntax of label names differs on the two systems. The maximum length of labels under Merlin is thirteen characters, while under ORCA/M 4.1 it is ten (significant) characters, and for ORCA/M 1.0 it is 255 characters. The syntax of a valid ORCA label is based upon. that for standard identifiers in high\_level languages: a letter, optionally followed by zero or more letters or digits, up to the maximum presrcibed. An extension to the standard allows ORCA labels to start with or include the '~' and the '_' characters.\par \par Merlin labels, on the other hand, are extremely free\_format. They are required to begin with a character at least as great in ASCII value as ':', and cannot contain periods or characters less in value than an ASCII zero.\par \par A major component, then, of Merlin\_to\_ORCA is label translation. One of the first things the translator does, in its initialization routine called PQT, is to allocate memory for a label table. All non\_ORCA labels are stored in this table. Under ProDOS 8, which uses a simple bit\_map technique for memory management, the translator allocates as large a buffer for the table as it can. When the buffer is exhausted, the program aborts. Under ProDOS 16, which contains a more sophisticated memory manager, the program asks ProDOS for a table buffer of initial size 1024 bytes. It then asks ProDOS to grow this buffer as needed. If the buffer reaches a point where it can no longer be grown, the program aborts.\par \par Whenever the translator encounters a label, it first determines if its syntax is acceptable to ORCA. If it is not, it then searches the label table for a match. If a match occurs, the label translation routine, either TRANS_LABEL or TRANS_VAR, returns the unique ORCA\_syntax label defined for that Merlin labef. lf no match occurred, the new label is added to the end of the table, and a unique translation is derived for the label. With the exception of variables, as discussed later in this section, Merlin labels are stored into the table in the foRowing manner: The first byte of the label's field is the size of the label \_ the number of characters of which it is comprised. The rest of the field contains the individual characters of the Merlin label. IIe end of the table is marked with a zero in the label\_size field.\par \par Merlin global labels are rewritten in the ORCA source file as the seven\_byte string 'SYS'+ 'xxxx' where xxxx is an ASCII number corresponding to the index of the label in the table. For example, if the second non\_ORCA label encountered in the Merlin source file was @AB, then the translator would return SYS0001. Note that zero is the first index into the table.\par \par Local labels are transformed into the eight\_byte string 'L' + 'xxxx' + 'yyy', where xxxx is an ASCII number corresponding to the index of the label in the table, and yyy is the current ASCII global label counter. The translator increments the global label counter with each occurrence of a global label found in the label field of an input source line. A unique local label is stored only once into the table. It is redefined during translation by appending the current global counter to it.\par \par Merlin variables are translated into the eight\_byte string 'V' + 'xxxx' + 'zzz' , where xxxx is an ASCII number corresponding to the index of the label in the table, and zzz is an ASCII count attached to this particular variable. Note that zzz is stored at the end of the label field of all variables in the label table, and that the size of a variable in the table is three more than the number of characters defining its name. Whenever the translator encounters a variable, it first searches the table for a match. If a match occurs, it checks whether the variable occurred in the label field of the input line. If this is the case, then the translator increments the variable counter at the end of the variable's field in the label table. If a variable occurred in the operand field, then the translator returns the counter as is from the table. New variables have their counter initialized to three ASCII zeroes.\par \par To sum up label translation, the Merlin code segment on the left would produce the ORCA segment on the right:\par \par }\pard \s16\qj\li1800\widctlpar\tx6120\adjustright {\ul Merlin}{\tab }{\ul ORCA\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\tx6120\tx7200\adjustright \f6\fs20\cgrid {\tab . . .\tab \tab . . .\par ]1\tab LDA\tab NUM,X\tab V0000000\tab LDA\tab NUM,X\par \tab BMI\tab @NEG\tab \tab BMI\tab SYS0001\par \tab INX\tab \tab \tab INX\par \tab BPL\tab ]1\tab \tab BPL\tab VOOOOOOO\par @NEG\tab ADC\tab #3\tab SYS0001\tab ADC\tab #3\par ]1\tab CMP\tab #6\tab V0000001\tab CMP\tab #6\par BEQ\tab @NEG\tab \tab BEQ\tab SYS0001\par \tab ADC\tab #2\tab \tab ADC\tab #2\par \tab BNE\tab ]1\tab \tab BNE\tab V0000001\par :LOOP\tab LDA\tab TABLE,Y\tab L0002001\tab LDA\tab TABLE,Y\par \tab BEQ\tab OUT\tab \tab BEQ\tab OUT\par \tab INY\tab \tab \tab INY\par \tab BNE\tab :LOOP\tab \tab BNE\tab L0002001\par OUT\tab STA\tab VALUE\tab OUT\tab STA \tab VALUE\par :LOOP\tab CMP\tab #2\tab L0002002\tab CMP\tab #2\par \tab . . .\tab \tab . . .\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604835}\hich\af4\dbch\af4\loch\f4 Instructions{\*\bkmkend _Toc496604835}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Both ORCA and Merlin employ the standard set of three\_character mnemonics to express the instruction set of the 65xx processor, and both allow the extensions BLT for BCC and BGE for BCS. Wherever possible, both assemblers resolve addresses to zero\_page locations. The mechanism available to the programmer to override addressing assumptions is different, however. Under ORCA, the operand field begins with a '!' or '|' character to inform the assembler that the operand's address is two bytes long. Tle operand field can also begin with a '>' character to request long (3\_byte) addressing. Under Merlin, any character except D' may be placed in the fourth byte of the opcode to request absolute addressing. Tberefore, an instruction whose fourth byte is not 'D'or'd' will be translated as !expression:\par \par }\pard \s16\qj\li1800\widctlpar\tx6120\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\widctlpar\adjustright {\ul \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\tx6120\tx7200\adjustright \f6\fs20\cgrid {\tab LDA:\tab $3\tab \tab LDA \tab !$3\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604836}\hich\af4\dbch\af4\loch\f4 Expressions{\*\bkmkend _Toc496604836}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Valid operands for 65xx instructions are identical in the two assemblers, with the exception of forced addressing described above, immediate data syntax, and expressions. The sequence #/ in Merlin specifies the high byte of the expression given in the operand. ORCA allows the same byte selection with the single symbol / . The symbols < to access the low byte of an expression and > to access the high byte are the same in both ORCA and Merlin. ORCA additionally recognizes ^ as the third byte of an expression.\par \par }\pard \s16\qj\li360\widctlpar\tx2160\tx3960\tx5760\adjustright {\ul Identical}{\tab }{\ul Merlin}{\tab }{\ul ORCA}{\tab }{\ul Byte of Operand}{\par }\pard \s16\qj\widctlpar\adjustright {\par }\pard\plain \s17\fi340\li20\nowidctlpar\tx2160\tx3960\tx5760\adjustright \f6\fs20\cgrid {#<expression\tab \tab \tab low (1st) byte\par #>expression\tab \tab \tab high (2nd) byte\par #expression\tab \tab \tab low (1st) byte\par \tab #/expression\tab /expression\tab high byte of\par \tab \tab \tab immediate value\par \tab \tab #^expression\tab highest (3rd) byte of\par \tab \tab \tab \tab expression\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Valid arithmetic operators used in expressions are the same for the two assemblers: + - / * . The logical operators are dissimilar; they are summarized in the following table.\par \par }\pard \s16\qj\li360\keepn\widctlpar\tx3240\tx6120\adjustright {\ul Operator}{\tab }{\ul Merlin}{ \tab }{\ul ORCA}{\par \par }{\f6\fs20 Addition\tab + \tab +\par Subtraction\tab -\tab -\par Multiplication\tab *\tab *\par Division\tab /\tab /\par Indirect address\tab ( )\tab ( )\par Bitwise OR\tab .\par Bitwise AND\tab &\par Bitwise EOR\tab !\par Wordwise OR\tab \tab .OR.\par Wordwi3e AND\tab \tab .AND.\par Wordwise EOR\tab \tab .EOR.\par NOT\tab \tab .NOT.\par Grouping\tab \tab ( expression )\par Bit shift\tab \tab |\par Equality\tab \tab =\par Not equal\tab \tab <>\par Greater than\tab \tab >\par Less than\tab \tab <\par Greater than or equal\tab \tab >=\par }\pard \s16\qj\li360\widctlpar\tx3240\tx6120\adjustright {\f6\fs20 Less than or equal\tab \tab <=\par }\pard \s16\qj\widctlpar\adjustright {\par Rules of precedence also differ between Merlin and ORCA. Merlin assumes a strictly left\_toright associativity, and does not permit parentheses within expressions except to denote an indirect address. ORCA defines precedence of operators according to the following rules:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx2520\tx3600\tx4680\tx5760\tx6840\tx7920\adjustright \f6\fs20\cgrid {Highest:\tab .NOT.\tab ( )\par \par Next highest:\tab *\tab /\tab .AND.\tab |\par \par Next highest:\tab +\tab -\tab .OR.\tab .EOR.\par \par Lowest:\tab =\tab <>\tab <=\tab >=\tab <\tab >\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par For example, the expressions below would result in two different values being returned by ORCA and Merlin, because of the difference in precedence:\par \par }\pard \s16\qj\li360\widctlpar\tx2880\tx5400\adjustright {\tab }{\ul Merlin}{\tab }{\ul ORCA}{\par \par }\pard\plain \s17\fi340\li20\nowidctlpar\tx2880\tx5400\adjustright \f6\fs20\cgrid {3+2*5\tab (3+2)*5 = 25\tab 3+(2*5) = 13\par 4\_1/3\tab (4\_1)/3 = 1\tab 4\_(1/3) = 4\tab integer division\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par In order to define Merlin expressions in ORCA's syntax, the translator uses parentheses to form groupings that produce an unambiguous left\_to\_right precedence. The start character for complex expressions is a '+.' Labels appearing within expressions are translated to ORCA labels as required. The examples below illustrate expression translation:\par \par }\pard \s16\qj\li720\widctlpar\tx3600\adjustright {\ul Merlin Expression}{\tab }{\ul ORCA Expression\par \par }\pard\plain \s17\li720\nowidctlpar\tx3600\adjustright \f6\fs20\cgrid {#/LABl\_LAB2\tab /LABl\_LAB2\par \par ($32+3),Y\tab ($32+3),Y\par \par 5\_6+7*%0111/:LOOP\tab +(((5\_6)+7)*%0111)/L0025003\par \par "a"&$lF\tab **   "a"&$1F   **\par \tab **   Cannot translate bitwise operators **\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Note that numbers for both assemblers are coded using the standard 65xx conventions: a hex number begins with the character $, a binary number begins with % , and a decimal value contains the digits zero through nine. Pathnames are also coded identically, following the syntax rules accepted by ProDOS. The final example above shows that Merlin expressions conutining bitwise logical operators are flagged as errors by the translator.\par \par Character strings are represented in different formats under ORCA and Merlin. ORCA strings can contain any printable characters, and are delimited by ' ' or " ". The delimiters must match, and both are required. A delimiter appearing within a string must be doubled. Delimiters have no bearing on the setting of the most significant bit of the characters wiffiin the string. A string containing only a pair of delimiters denotes the null (empty) string. Merlin strings, on the other hand, do not require matching delimiters, and the final delimiter may be omitted for single\_character strings. A Merlin delimiter may be any non\_numeric character other than / or , . The delimiter character used in Merlin strings has a special meaning. If it is less in value than an ASCII single\_quote mark, it specifies that the characters within the string are to be represented internally with their high bits set. Otherwise, their high bits are to cleared.\par \par Merlin strings are translated to ORCA strings by enclosing the entire string between singlequote delimiters. A delimiter found embedded in the string is doubled. If the Merlin delimiter selects high bit on, then the ORCA directive MSB ON is placed in the ORCA source file before the line containing the translated string, and the ORCA directive MSB OFF is placed in the source file after the line. Note that MSB is used to set the high bit of character data under ORCA/M.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604837}\hich\af4\dbch\af4\loch\f4 Directives{\*\bkmkend _Toc496604837}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Directives are highly individualized for any assembler, reflecting the basic structure of the assembler itself as well as the particular taste and biases of the assembler's author(s). Chapter Four of this manual discusses every Merlin directive, explaining the ORCA translation of each.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604838}\hich\af4\dbch\af4\loch\f4 Macros{\*\bkmkend _Toc496604838}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Both ORCA and Merlin support the use of macros, which are lines of assembly\_language code that are inserted into a program when the assembler sees a macro name as an opcode. Both allow values to be passed to macros, and the values passed are associated with symbolic parameters. Merlin's symbolic parameters are predefined as ]1, ]2,...,]8. When used in a Merlin macro, 12, for example, means to replace ]2 by the second value given on the macro invocation line of the source file. ORCA macros permit symbolic parameters to be defined within the macro. The parameters that are to be sent to the macro have symbolic names, and these are defined on the macro model line (the line following the one containing the word 'MACRO.') ORCA macros also permit the definition of other symbolic variables within the macro. The example below shows some of the differences between ORCA and Merlin macros.\par \par }\pard \s16\qj\fi720\widctlpar\tx1440\tx2520\tx3600\tx5400\tx6480\tx7560\adjustright {\tab \tab }{\ul Merlin}{\tab \tab \tab }{\ul ORCA\par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1440\tx2520\tx3600\tx5400\tx6480\tx7560\adjustright \f6\fs20\cgrid {\par }{\f4 MACRO DEFINITION:\par }{\par \tab ADD\tab MAC\tab \tab \tab MACRO\par \tab \tab CLC\tab \tab &LAB\tab ADD\tab &A,&B,&C\par \tab \tab LDA\tab #]1\tab &LAB\tab CLC\par \tab \tab ADC\tab ]2\tab \tab LDA\tab #&A\par \tab \tab STA\tab ]3\tab \tab ADC\tab &B\par \tab \tab EOM\tab \tab \tab STA\tab &C\par \tab \tab \tab \tab MEND\par \par }{\f4 MACRO INVOCATION:\par }{\par \tab \tab PMC\tab ADD.3;4;ADDR\tab \tab ADD\tab 3,4,ADDR\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ORCA does not allow macros to be defined within a program. Macros are defined in a special file containing only macros, and the file is accessed from the program with the MCOPY and MLOAD directives. Whenever the translator finds a MAC directive, it writes the line containing the MAC and all other lines up to and including the next EOM directive to a file named MY.MACROS. ORCA allows macros to be neste4 but only to a level of four deep. Macro nesting is handled differently by the two assemblers. ORCA considers macros to be nested when one macro calls another macro. All macro definitions are complete\_\_that is, they contain the definition of only one macro. The translator therefore separates nested Merlin macros.\par \par MY.MACROS is created at the beginning of the translation. If the file already exists when the translation starts, it is overwritten. This means that you will have to move or rename MY.MACROS between executions of the translator in the same directory. IIe directives which are specific to macro creation and handling are discussed on an individual basis in the next chapter.\par \par Merlin variables that are used within a macro receive special translation. If the variable is one of the special Merlin variables ]1 through ]8, then it is translated to a corresponding ORCA symbolic parameter in the range &A through &H. If the variable is not one of ]1 through ]8, then it is converted to an ORCA label as described earlier in this chapter.\par \sect }\sectd \sbkodd\linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604839}\hich\af4\dbch\af4\loch\f4 Chapter 4 - Translation of Merlin Directives{\*\bkmkend _Toc496604839}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par \par \par \par This chapter describes the substitutions that Merlin\_to\_ORCA makes when it encounters a Merlin directive. In general, a label occurring in a Merlin source line is handled as explained in Chapter 3 in the section "Labels." Operands used by different directives tend to be rather specialized. Therefore, operand translation is discussed in the context of the directive which operates upon it. Merlin directives which are said to be "rejected" are shown in the ORCA source file as a comment, followed by a commented line containing an error message:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {Label EXT\tab **   Label\tab EXT   **\par }\pard \s32\li720\nowidctlpar\tx3960\adjustright {\tab **   This directive is not translated   ***\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604840}\hich\af4\dbch\af4\loch\f4 Directives Which Use Strings{\*\bkmkend _Toc496604840}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The following Merlin directives accept delimited strings as operands: ASC, DCl, FLS, INV, KBD, REV, and STR. The translator handles them in a special manner, using macros supplied in the file MERLIN.MACROS. Each of these directives has two different macros associated with it, one for when the high bit is clear, and another for when the high bit is set. In order to determine which macro to use, the translator examines the Merlin delimiter to see if the high bit should be set. If it should, the translator uses the directive name for the macro name, with an 'H' appended to the name of the macro. For example,\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {ASC   "string"\tab ASCH  'string'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par If the high bit is not to be set, the translator simply uses the name of the directive to invoke the macro for that particular directive:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {DCI   'hey hey'\tab DCI  'hey hey'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The string contained in the operand is then put into ORCA format, using single quote marks as delimiters. Single or double quote marks found within the string are doubled in preparation for ORCA's macro\_handling facilities. Hex data found at the end of the Merlin operand is compressed into a single string, delimited by single quotes:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {Label   INV   "HEY "FF\tab Label   INVH  'HEY ','FF'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Note that you can use these macros in your own programs, provided you specify the operands in the expected format. The sections which describe the translation of directives which rely upon special macros give examples of Merlin code, followed by the translated ORCA code, and ending with a generalization of the code produced by the special macro.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604841}\hich\af4\dbch\af4\loch\f4 ASC\tab Define ASCII String{\*\bkmkend _Toc496604841}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ASC is translated to a DC character statement. Any hex data is converted to a DC hex statement:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {LAB   ASC "hey hey "FF\tab LAB ASCH 'hey hey ','FF'\tab LAB DC C"hey hey "\par }\pard \s32\li720\nowidctlpar\tx3600\tx6660\adjustright {\tab \tab     DC \tab H"FF"\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604842}\hich\af4\dbch\af4\loch\f4 AST\tab Print Asterisks in Assembly Listing{\*\bkmkend _Toc496604842}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par When found during translation, AST causes the number of asterisks given in the operand to be written to the ORCA source file. This means that the translator must make sense of the operand at the time it is encountered. For simplicity's sake, the translator requires that the operand be a decimal number. For example,\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {AST   8\tab ********\par AST   value\tab **  AST      value  **\par \tab **  Can only translate simple decimal operands  **\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604843}\hich\af4\dbch\af4\loch\f4 CHK\tab Compute Check Sums{\*\bkmkend _Toc496604843}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ORCA has no means of computing check sums during assembly. This directive is therefore rejected.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604844}\hich\af4\dbch\af4\loch\f4 CYC\tab Print CPU Cycle Times{\*\bkmkend _Toc496604844}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\cgrid {\par CYC is translated as the ORCA directive INSTIPAE, which prints CPU cycle times in an extra column to the left of the source lines. Cycle times which are subject to change, such as because of crossing a bank boundary, are marked with an asterisk. INSTUVE does not permit totalling, averaging, or resetting to zero:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {CYC\tab INSTIME ON\par CYC   AVE\tab INSTIME ON\par }\pard \s32\li720\nowidctlpar\tx3960\adjustright {CYC   OFF\tab INSTIME OFF\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\ul \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604845}\hich\af4\dbch\af4\loch\f4 DA\tab Def\hich\af4\dbch\af4\loch\f4 ine Address{\*\bkmkend _Toc496604845}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par This directive is entirely analogous to the ORCA DC A directive (define address constant), which defines two\_byte integers for each value given in the operand. The ORCA directive requires that the operand be enclosed in quote marks.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {Lab   DA    $2000,198,Lab3\tab Lab   DC    A'$2000,198,Lab3'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604846}\hich\af4\dbch\af4\loch\f4 DAT \tab Date Stamp Listing{\*\bkmkend _Toc496604846}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par This directive is unnecessary under ORCA because ORCA date\_stamps all assembly listings. You may wish to examine ORCA's TITLE directive, which lets you put page numbers and an optional title at the top of every page of an assembly listing.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604847}\hich\af4\dbch\af4\loch\f4 DCI\tab Dextral Character Invert{\*\bkmkend _Toc496604847}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The final character contained in the string is removed. ne first part of the string is translated as a DC character statement, as is the final character of the Merlin string. Its high bit is set opposite to that of the rest of the string, however. Any trailing hex data is converted to a DC hex statement:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {MSG  DCI  (hey, you(,8f,aa\tab MSG  DCIH 'hey, you','8faa'\tab MSG  DC  C"hey, yo"\par \tab \tab      MSB ON\par \tab \tab      DC  C"u"\par \tab \tab      MSB OFF\par \tab \tab      DC  H"8faa"\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604848}\hich\af4\dbch\af4\loch\f4 DDB\tab Define Double Byte, Reverse Order{\*\bkmkend _Toc496604848}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\cgrid {\par }\pard \s16\qj\widctlpar\adjustright {DDB is translated using a macro named DDB, located in MERLIN.MACROS. The macro strips each value in the operand and writes it with its byte\_order reversed, using ORCA DC I1 (define constant one\_byte integer) directives. The macro DDB may be used in other ORCA source programs, provided that it is included in a macro file that will be used by the program. The operands for the DDB macro are coded without quotes.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {LAB  DDB  $7FAB\tab LAB  DDB  '$7FAB'\tab LAB  DC   II>'$7FAB'\par \tab \tab      DC   Il'$7FAB'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604849}\hich\af4\dbch\af4\loch\f4 DFB, DB\tab Define Byte{\*\bkmkend _Toc496604849}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par DFB is translated as the ORCA directive DC I1 (define constant one\_byte integer). The individual values contained in the operand are passed through the translator's expression evaluator. When the high byte of a multiple\_byte value is requested, the translator produces code to perform bit shifting:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {LAB1  DFB   98,>$7FAB\tab LAB1  DC   I1'98,$7FAB|\_8'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\ul \par }{The high byte of the second expression is obtained by bit\_shifting the two\_byte value backwards eight bits. This could also be written as\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {DC\tab I1>'$7FAB'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604850}\hich\af4\dbch\af4\loch\f4 DO, ELSE, FIN{\*\bkmkend _Toc496604850}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The Merlin conditional assembly language is translated to ORCA's conditional assembly language using the ORCA directives AT and AGO, and sequence symbols. When a DO directive is found, the Translator substitutes AIF for the opcode. The DO's operand is then passed through the translator's expression evaluator. The operand is enclosed in parentheses, and compared to zero as a whole. If the value is equal to zero, then the code between the DO and the next ELSE or FIN is not assembled. For example,\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {DO   3+LAB\tab       AIF  (3+LAB)=0,.I\par . . .\tab       . . .\par FIN\tab .I\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\ul \par }{The meaning of the AIF statement is: If (3+LAB) equals zero, then branch to the line beginning with the sequence symbol .I .\par \par When an ELSE directive is found, the translator issues an unconditional branch to the next sequence symbol, followed by a line containing the previous sequence symbol. For example,\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {DO   3\tab       AIF  (3)=0,.I\par . . .\tab       . . .\par ELSE\tab       AGO  .J\par \tab .I\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par In the ORCA translation, the code between the DO and ELSE would only be executed if the DO's operand was true (i.e. not equal to zero). The AGO .J instruction at the end of the DO-when\_true block causes the assembler to skip past the ELSE clause. If the DO's operand is false (i.e. equal to zero), the assembler will skip to the line marked by the sequence symbol .I, which marks the beginning of the ELSE clause.\par \par A FIN directive causes the translator to issue the sequence symbol specified in the last DO or ELSE translation. In our example, it might be .J . Putting this all together,\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {DO   (GradeA)\tab       AIF  (GradeA)=0,.I\par . . .\tab       . . .\par ELSE\tab       AGO  .J\par \tab .I\par . . .\tab       . . .\par FIN\tab .J\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Note that the translator allows for nesting of DOs up to eight levels deep. Attempting to nest deeper than eight levels results in an error message being issued by the translator.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604851}\hich\af4\dbch\af4\loch\f4 DS\tab Define S\hich\af4\dbch\af4\loch\f4 torage{\*\bkmkend _Toc496604851}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par DS is translated with the aid of a macro named MDS, located in MERLIN.MACROS. If the first operand of the DS directive is a single '\\', then the macro translates the source line as ALIGN 256, the ORCA directive which causes alignment to a specified boundary. The aligrunent called for by '\\' is to the next page of memory, hence an alignment of 256. If a second operand follows the '\\', the translator will issue a message that it is unable to fill memory with anything but zeroes.\par \par If the first operand of the DS directive is a positive value, and has no second operand, it is translated as an ORCA DS directive, which functions just like the Merlin DS directive.\par \par A second operand following a first positively\_valued operand causes the macro to produce code which will fill memory with the value given in the second operand. The translator uses an ORCA DC I1 directive to do this.\par \par If the first operand is a negative value, then the macro rewrites it as an ORCA ORG *\_<value>, which is ORCA's method of backing up the current location counter. Examples:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {DS   5\tab MDS   5\tab DS    5\par DS   10,$F\tab MDS   10,$F\tab DC    10I1'$F'\par DS   -5\tab MDS   -5\tab ORG   *-5\par DS   \\\tab MDS   \\\tab ALIGN 256\par DS   \\,$F\tab MDS   \\,$F\tab ALIGN 256\par \tab \tab **  Can only zero-fill  **\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\ul \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604852}\hich\af4\dbch\af4\loch\f4 DSK, SAV\tab Save Object Module{\*\bkmkend _Toc496604852}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ORCA does not allow saving portions of the object module to different disk files. It writes the complete object module to a single file, specified in the operand of the ORCA KEEP directive, or given from the command line with the KEEP parameter. The KEEP directive, if it is used, must appear before the first START of an ORCA assembly\_language program. The translator uses an internal flag, named KEEP FLG, which is set when the first SAV or DSK directive is encountered. The first SAV or DSR is accepted, and translated to the ORCA directive KEEP. Subsequent SAVs or DSKs are flagged as errors. For example\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {SAV   MYFILE.O\tab KEEP  MYFILE.O\par . . .\tab . . .\par DSK   FILE3\tab **  DSK      FILE3  **\par \tab **  Only 1 SAV or DSK directive may be used  **\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604853}\hich\af4\dbch\af4\loch\f4 DUM, DEND\tab Define "Dummy" Section{\*\bkmkend _Toc496604853}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par DUM is translated using the ORCA macro named DUM,'located in the file MERLIN.MACROS. The macro uses the ORCA directive OBJ to establish an ORG address for the dummy section. It also uses a global arithmetic variable named &DUM, setting it to the current location counter. Source lines occurring between DUM and DEND are translated in the usual manner. When the translator finds a DEND directive, it uses a macro named DEND, contained in the file MERLIN.MACROS, to finalize the translation of the dummy section. The DEND macro first issues an ORCA OBJEND directive to signal the end of the dummy section. It then calculates the length of the dummy section and issues an ORCA ORG directive with an operand to "back up" over the dummy section. Because macros are used to perform the translation, you will see\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {DUM\tab < operand >\par . . .\par DEND\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par \par in the ORCA source file.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604854}\hich\af4\dbch\af4\loch\f4 DW\tab Define Word{\*\bkmkend _Toc496604854}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par DW is the same directive as the Merlin directive DA. What's more, ORCA's DC A (define address constant) directive is just a mnemonic for its DC I (define two\_byte integer constant) directive. As with DA, DW is translated directly.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {LB1   DW    $300,876\tab LB1   DC    1'$300,876'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604855}\hich\af4\dbch\af4\loch\f4 END\tab End Program{\*\bkmkend _Toc496604855}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par This directive in the source file causes the translator to set its internal end\_of\_file flag to true, and wrap up the translation program.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604856}\hich\af4\dbch\af4\loch\f4 ENT\tab Define Entry Point{\*\bkmkend _Toc496604856}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ENT is translated as the ORCA directive ENTRY. ENTRY defines an alternate entry\_point into a segment. In the example below, you could enter the subroutine SEG2 at the beginning, or at the entry points ENT1 or ENT2.\par \par }\pard\plain \s32\li720\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {Main  START\tab SEG2  START\par       . . .\tab       . . .\par \tab ENT1  ENTRY\par       JSR   ENT1\tab ENT1  ENTRY\par       JSR   SEG2\par       . . .\tab       . . .\par \tab ENT2  ENTRY\par       JSR   READIT\tab       JSR   READIT\par       RTS\tab       RTS\par       END\tab       END\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604857}\hich\af4\dbch\af4\loch\f4 EOM or <<<\tab End of Macro Definition{\*\bkmkend _Toc496604857}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The Merlin directive EOM signals the end of a macro definition. It is translated directly to the ORCA directive MEND, which also flags the end of a macro definition. MEND is written to MY.MACROS, and the translator's within\_macro flag is set to false so that subsequent lines of source will be written to standard output rather than to MY.MACROS.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604858}\hich\af4\dbch\af4\loch\f4 EQU or =\tab Equate{\*\bkmkend _Toc496604858}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Merlin and ORCA equates are used in the same way in a program, to define constants or addresses. The syntax is the same except for = , which is not recognized by ORCA. It is important to note that the labels attached to equates are }{\i case insensitive }{under ORCA/M 4.1: StARt is the same as sTArT, for example. In translating equates, Merlin\_to\_ORCA will translate the label, then use 'EQU' as the opcode, and then pass the operand through its expression evaluator.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {Last  =     45*3\tab LAST  EQU   45*3\par HERE  EQU   *\tab HERE  ANOP\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Under ORCA/M 1.0, you may use EQU * to set a label to the value of the current location counter. Under ORCA/M 4.1, this is not allowed. You may set a label to the value of the current location counter under either system by use of the ORCA directive ANOP, which means "no operation."\par \par Under ORCA/M 1.0, equates can use values which have not yet been defined, and the assembler can be set to be case sensitive. You would use the ORCA directive CASE, with an operand of ON to request case sensitive handling of labels.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604859}\hich\af4\dbch\af4\loch\f4 ERR\tab Check Error{\*\bkmkend _Toc496604859}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par There is no equivalent to ERR under ORCA. This directive is therefore rejected.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604860}\hich\af4\dbch\af4\loch\f4 EXP\tab Expand Macros{\*\bkmkend _Toc496604860}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par EXP is akin to the ORCA directive GEN, both of which can be set to ON to display macro expansions. GEN does not support an operand such as ONLY, however. The translations are summarized below.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {EXP   ON\tab GEN   ON\par EXP   OFF\tab GEN   OFF\par EXP   ONLY\tab GEN   ON\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604861}\hich\af4\dbch\af4\loch\f4 EXT\tab External Label{\*\bkmkend _Toc496604861}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Merlin's REL files are roughly analogous to ORCA's library files. To ensure that the ORCA linker includes a particular subroutine in the final object module, you would use a DC R directive:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {[Label] DC    R'Subrtn1[ [,Subrtn2] [,Subrtn3] . . . ] '\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par where the [ ] enclose optional entries. The named segments must reside in the ORCA LJBRARIES prefix. The files contained in this prefix are all in object\_module format (i.e. the intermediate code produced by an assembly of the original source program). Since REL and library files are not quite the same, this directive is rejected.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604862}\hich\af4\dbch\af4\loch\f4 FLS\tab Display String in Flashing Video{\*\bkmkend _Toc496604862}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The FLS macros examine each character in the string, causing each to be in the range $40 to $7F. A new string is built from the input string, and translated into an ORCA DC 1\_byte integer string. Trailing hex data is rewritten as an ORCA DC hex statement:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {LBL  FLS  'ERR!'\tab LBL  FLS  'ERR!'\tab LBL  DC   I1'$45,$52,$52'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604863}\hich\af4\dbch\af4\loch\f4 HEX\tab Define Hex Data{\*\bkmkend _Toc496604863}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par BEX is translated directly into an ORCA DC H statement. All of the hex values given in the operand are compressed into a single string of hex digits. Commas within the Merlin hex string are converted to blanks for readability.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {HEX   AB,CD,EF\tab HEX   DC    H'AB CD EF'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\ul \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604864}\hich\af4\dbch\af4\loch\f4 INV\tab Display String in Inverse Video{\*\bkmkend _Toc496604864}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The INV macros examine each character in the string, causing each to be in the range $3F to $7F. A new string is built from the input string and translated into an ORCA DC 1\_byte integer string. Trailing hex data is rewritten as an ORCA DC hex statement:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {Lab  INV  &hey&,7FAA\tab Lab  INVH  'hey','7FAA'\tab      MSB   ON\par \tab \tab Lab  DC    I1'$28,$25,$39'\par \tab \tab      MSB   OFF\par \tab \tab      DC    H'7FAA'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604865}\hich\af4\dbch\af4\loch\f4 KBD\tab Assembly Input from Keyboard{\*\bkmkend _Toc496604865}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\cgrid {\par This directive is translated using a macro named KBD, found in MERLIN.MACROS. The macro first inputs a value from the keyboard during assembly using ORCA's AINPUT directive. It then equates the label defined in the Merlin source line with the value input. The KBD macro may be used in another ORCA program by including it in a macro file that the program will be using.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {Label KBD\tab       LCLC  &C            define string variable\par \tab &C    AINPUT "Give value for Label: "\par \tab Label EQU   &C\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604866}\hich\af4\dbch\af4\loch\f4 LST \tab Generate Assembly Listing{\*\bkmkend _Toc496604866}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par This directive is similar to the ORCA directive LIST, which is the substitution used by the translator. Since LIST requires an operand of either ON or OFF, a missing LST operand is converted to ON. Note that ORCA does not support keyboard input during assembly, except through the use of its AINPUT directive or when pressing special keys to abort the assembly. That is, ORCA does not allow "toggling" of LIST ON during assembly. For example,\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {LST   OFF\tab LIST  OFF\par LST\tab LIST  ON\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604867}\hich\af4\dbch\af4\loch\f4 LSTDO\tab List "DO OFF" Areas{\*\bkmkend _Toc496604867}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par ORCA has no provision for displaying lines occurring within a DO OFF block. The only way to see these lines during assembly is to set the DO's operand to true. ORCA lines containing conditional assembly variables and directives are not displayed in the assembly listing unless TRACE ON is specified. For that reason, LSTDO is translated as TRACE:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {LSTDO OFF\tab TRACE ON\par LSTDO\tab TRACE OFF\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604868}\hich\af4\dbch\af4\loch\f4 LUP\tab Loop{\*\bkmkend _Toc496604868}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par It is now time to explain the third line of the translated source file:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {       LCLA  &LUP\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par &LUP is the name of an arithmetic symbolic parameter. It is defined as such with the ORCA directive LCLA. When the translator sees the Merlin directive LUP, it sets up a loop using ORCA's conditional assembly language. The first step is to decide the number of times to perform the loop. This is accomplished by setting &LUP to the value found in the operand of the LUP statement:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {&LUP   SETA  <expression>\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Note that <expression> is passed to the translator's expression evaluator to put it in ORCA's format. The bottom of the loop will be defined by the Merlin directive --^. In order to have a place to branch, the Wmslator uses a special ORCA label called a sequence symbol:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {&LUP  SETA  <expression>\par .LUP\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par A sequence symbol is a label whose first character is a period. If the assembler is not looking for a place to branch, a line beginning with a sequence symbol is treated as a comment.\par \par The lines between LUP and --^ are translated as usual. When the translator encounters --^ it decrements the loop counter &LUP, and, if the value of &LUP is still positive, branches up to the sequence symbol .LUP:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {LB1   LUP   3\tab LB1   ANOP       define label before looping\par       ADC   #3\tab &LUP  SETA  3\par       --^\tab .LUP\par \tab       ADC   #3\par \tab &LUP  SETA  &LUP-1\par \tab       AIF   &LUP>0,.LUP\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The conditional assembly directive AIF has a two\_part operand. The first part is a logical expression. If it is true (not equal to zero), then a branch to the sequence symbol given in the second part of the operand is executed.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604869}\hich\af4\dbch\af4\loch\f4 MAC\tab Define Macro{\*\bkmkend _Toc496604869}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par MAC signals the beginning of a macro definition. If this is a new definition (i.e. not part of another macro), then the translator writes an opcode of 'MACRO' to the MY.MACROS file. On the next line it writes the name of the macro in the opcode field, and a string of eight symbolic parameters in the operand field. The symbolic parameters correspond to Merlin's eight predefined macro variables. If more parameters are coded than are needed, no harm is done.\par \par MAC also causes the translator's internal within\_macro flag to be set to true so that subsequent Merlin source lines which are part of the macro are also written to MY.MACROS. If MAC is encountered within another macro, the current macro in MY.MACROS is ended and a new one begun. Macros are ended under ORCA with the 'MEND' directive. Macro nesting ala Merlin is possible under ORCA, but the practice is not recommended. Also, you should be aware that macros cannot be nested more than four levels deep under ORCA. By nesting we mean macro A calls macro B which calls macro C ...\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {SUB   MAC\tab       MACRO\par ADD   MAC\tab &LAB  SUB   &A,&B,&C,&D,&E,&F,&G,&H\par \tab       MEND\par \tab       MACRO\par \tab &LAB  ADD   &A,&B,&C,&D,&E,&F,&G,&H\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Note that the macro's symbolic parameters, which are defined on its macro model line, are local to the macro; other macros may also use the same names without conflim\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604870}\hich\af4\dbch\af4\loch\f4 MX\tab Set Accumulator and Index Register Sizes{\*\bkmkend _Toc496604870}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The trmslator uses a macro, named MX and located in NIERLIN.MACROS, to translate MX. This macro may be used in another ORCA program by including it in a macro file that the program will be using.\par \par ORCA uses the directives LONGA and LONGI to inform the assembler of the sizes of the accumulator and index registers, respectively. LONGA ON specifies that loads and stores involving the accumulator are 16 bits. Eight\_bit registers are denoted with OFF as an operand. The default register size under ORCA/M 4.1 is eight bits; under ORCA/M 1.0 it is sixteen bits. Normally the LONG and SHORT macros are used to set register sizes in ORCA. See your reference manual for details.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {MX    %0\tab LONGA ON\par \tab LONGI ON\par MX    1\tab LONGI ON\par \tab LONGA OFF\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604871}\hich\af4\dbch\af4\loch\f4 OBJ\tab Set Division Between Object Code and Symbol\hich\af4\dbch\af4\loch\f4  Table{\*\bkmkend _Toc496604871}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Since ORCA is a disk\_based assembler, there is no counterpart to OBJ under ORCA. The translator therefore rejects OBJ. Note that there is an ORCA directive named OBJ, but it is used for a different purpose.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604872}\hich\af4\dbch\af4\loch\f4 PAG\tab This is exactly the same as the ORCA\hich\af4\dbch\af4\loch\f4  directive EJECT:{\*\bkmkend _Toc496604872}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {PAG\tab EJECT\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604873}\hich\af4\dbch\af4\loch\f4 PAU\tab Pause{\*\bkmkend _Toc496604873}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par No counterpart to PAU exists under ORCA. The translator rejects PAU.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604874}\hich\af4\dbch\af4\loch\f4 PMC or >>>\tab Put Macro in Source Code Stream{\*\bkmkend _Toc496604874}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Under ORCA, macros are invoked in a program by using the macro!s name as the opcode, and placing any values to be passed to the macro in the operand field. When the translator encounters PMC, it extracts the macro's name from the operand field and places this in the opcode field of the translated line. It then processes each value to be assigned to a different symbolic variable, and encloses the translated value in double quote marks. Note that macros invoked from other macros are coded the same way as in a program under ORCA.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {PMC   ADD,13;3;NUM\tab ADD   "13","3","NUM"\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The operands are enclosed in quotes in case one of the values to be passed to the macro contains indirect addressing, as in (ADDR),X.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604875}\hich\af4\dbch\af4\loch\f4 ORG\tab Set Origin{\*\bkmkend _Toc496604875}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The first ORG of a Merlin program is exactly equal to the first ORG of an ORCA program: they specify the load address of the program. ORCA additionally allows its ORG operand to contain the constructs *+expression or *\_expression to move the location counter forward or backward. The first ORCA ORG must be coded before the first START directive of the program.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {ORG   $4000\tab ORG   $4000\par DS    -10\tab ORG   *-10\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Merlin ORGs containing operands and appearing after the first ORG of a program define the beginning of code segments that will be moved (to the address given in the operand). The main program is loaded at the location specified in the first ORG. An ORG without an operand defines the end of the "moving" code segment. ORCA provides the same capabilities with the directives OBJ and OBJEND. The following example explains the translation:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {\par       ORG   $3000\tab       ORG   $3000\par       LDX   #END1\_LB1\tab MAIN  START\par TOP   LDA   LBI,X\tab       LDX   #END1\_LB1\par       STA   $200,X\tab TOP   LDA   LB1,X\par       DEX\tab       STA   $200,X\par       BNE   TOP\tab       DEX\par       JMP   $200\tab       BNE   TOP\par       ORG   $200\tab       JMP   $200\par LB1   LDA   #3\tab LB1   ANOP\par       . . .\tab OBJ   $200\par END1  RTS\tab       LDA   #3\par       ORG \tab       . . .\par       . . .\tab END1  RTS\par \tab       OBJEND\par }\pard \s32\li720\nowidctlpar\tx3960\adjustright {\tab       . . .\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604876}\hich\af4\dbch\af4\loch\f4 PUT\tab Insert Contents of Source File into Code Stream{\*\bkmkend _Toc496604876}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par PUT is very similar to the ORCA directive COPY. Both accept a pathname as an operand, and insert the file named in the operand at the current location in the file being assembled. For example\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {\par PUT   /MYFILES/FILE1\tab COPY  /MYFILES/FILE1\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604877}\hich\af4\dbch\af4\loch\f4 REL\tab Define Relocatable Module{\*\bkmkend _Toc496604877}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par As mentioned in chapter one, the ORCA/M 4.1 hnker does not produce relocatable modules, while the ORCA/M 1.0 linker produces only relocatable modules. For this reason, the translator rejects the REL directive.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604878}\hich\af4\dbch\af4\loch\f4 REV\tab Reverse Character Order of String{\*\bkmkend _Toc496604878}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The REV macros work on the input string from the end to the beginning, producing a new string which is the reverse of the input:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {LAB  REV   'hey'\tab LAB   REV   'hey'\tab LAB   DC    C'yeh'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604879}\hich\af4\dbch\af4\loch\f4 SKP\tab Write Blank Lines to Listing{\*\bkmkend _Toc496604879}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\cgrid {\par }\pard \s16\qj\keep\keepn\widctlpar\adjustright {When found during translation, SKP causes the number of blank lines given in the operand to be written to the ORCA source file. This means that the translator must make sense of the operand at the time it is encountered. For simplicity's sake, the translator requires that the operand be a decimal number. For example,\par }\pard \s16\qj\keepn\widctlpar\adjustright {\par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {SKP   3\par \par SKP   value\tab **  SKP   value  **\par \tab **  Can only translate simple decimal operands  **\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604880}\hich\af4\dbch\af4\loch\f4 STR\tab Define String with Leading Count Byte{\*\bkmkend _Toc496604880}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The STR macros compute the length of the input string, converting the length to a DC one\_byte integer statement. The string is entered next, using a DC character statement. (Note that this can be accomplished in ORCA with its standard DW macro.) Trailing hex data is converted to a DC hex statement:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3600\tx6660\adjustright {\ul Merlin}{\tab }{\ul Translation}{\tab }{\ul Code Produced by Macro\par \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3600\tx6660\adjustright \f6\fs18\cgrid {LB1   STR   'Hey !'F9\tab LB1   STR   'Hey !','F9'\tab LB1   DC    I1'L:"Hey !"'\par \tab \tab       DC    C'Hey !'\par \tab \tab       DC    H'F9'\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604881}\hich\af4\dbch\af4\loch\f4 SW\tab Allow "Sweet 16" Opcodes{\*\bkmkend _Toc496604881}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The "Sweet 16" opcodes were not implemented in versions of the Apple II which followed the Apple ][ computer. For this reason, ORCA does not support these opcodes. Please consult the macro sections at the end of the ORCA reference manual for full details on using the ORCA macros which provide 16\_bit integer math operations.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604882}\hich\af4\dbch\af4\loch\f4 TR\tab Truncate Listing Lin\hich\af4\dbch\af4\loch\f4 es{\*\bkmkend _Toc496604882}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\cgrid {\par TR is roughly equivalent to ORCA's EXPAND directive. EXPAND, when set to ON, causes up to 16 bytes of each DC statement (a data definition directive, like Merlin's ASC, DCI, and DDB directives) to be displayed in the assembly listing. When set to OFF, only the first four bytes of each DC statement are shown in the listing. The number of bytes displayed on other types of source lines cannot by controlled by the user. Examples:\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {TR    ON\tab EXPAND OFF\par TR    OFF\tab EXPAND ON\par TR\tab EXPAND OFF\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604883}\hich\af4\dbch\af4\loch\f4 TYP\tab Set F\hich\af4\dbch\af4\loch\f4 iletype of Object Module{\*\bkmkend _Toc496604883}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par No counterpart to TYP exists in the ORCA assembler, so the translator rejects it However, both ORCA/M 4.1 and 1.0 provide a shell command named FILETYPE which allows you to change the type of any file.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604884}\hich\af4\dbch\af4\loch\f4 USE\tab Access Macro File{\*\bkmkend _Toc496604884}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par USE is comparable to the ORCA directive MCOPY, which places the first four blocks of the file named in the operand into a macro buffer. Subsequent macro calls in the source code cause the assembler to search the macro buffer for the invoked macro. Portions of the macro file are swapped in and out of the buffer as necessary. For example\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {USE   MY.MACROS\tab MCOPY MY.MACROS\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604885}\hich\af4\dbch\af4\loch\f4 USR\tab Define User Opcode{\*\bkmkend _Toc496604885}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par This directive has no counterpart under ORCA and is therefore rejected. Note that you can provide tailored routines using macros and/or libraries.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604886}\hich\af4\dbch\af4\loch\f4 VAR\tab Define Variables{\*\bkmkend _Toc496604886}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\cgrid {\par For each of the values given in the operand of VAR, the translator produces a variable label and EQUates it to the value given. The labels displayed by the translator are the mnslations of the Merlin variables ]1, ]2, . . . up to the number of values given in the VAR operand. (Variable translation is discussed in chapter two.) The values appearing in the operand am sent to the translator's expression evaluator prior to being written to the ORCA source file. For example\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {VAR   3+6*7;"A;Label\tab V0001002 EQU   +(3+6)*7\par \tab          MSB   ON\par \tab V0004000 EQU   'A'\par \tab          MSB   OFF\par \tab V0005002 EQU   LABEL\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496604887}\hich\af4\dbch\af4\loch\f4 XC\tab Extend Instruction Set{\*\bkmkend _Toc496604887}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par Under ORCA 4.1, the set of opcodes recognized by the assembler defaults to 6502 instructions only. The assembler can be told to recognize 65C02 opcodes by using the 65CO2 directive, with an operand of ON. It can be commanded to recognize 65816 opcodes by using the directive 65816, with an operand of ON.\par \par Under ORCA 1.0, the assembler's opcode set defaults to 65816 instructions. The default can be overrridden to access, for instance, only 6502 instructions by using the directives\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\tx1800\tx2880\tx5040\adjustright \f6\fs20\cgrid {65816 OFF\par 65CO2 OFF\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par The translator has a flag which is set to false at the beginning of translation. When the first XC directive is seen, the translator converts it to 65CO2 ON. The next XC directive in the source file is rewritten as 65816 ON.\par \par }\pard \s16\qj\li720\keepn\widctlpar\tx3960\adjustright {\ul Merlin}{\tab }{\ul ORCA\par }\pard \s16\qj\li720\keepn\widctlpar\tx3690\adjustright {\ul \par }\pard\plain \s32\li720\keepn\nowidctlpar\tx3960\adjustright \f6\fs18\cgrid {XC\tab 65C02 ON\par XC\tab 65816 ON\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\cgrid {\par }}